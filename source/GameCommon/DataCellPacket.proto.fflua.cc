// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataCellPacket.proto
#include "DataCellPacket.pb.h"
#include "DataCellPacket.proto.fflua.h"
namespace Packet {
bool DataCell_fflua_reg(lua_State* state)
{
//for decltype
	DataCell* message(nullptr);
	message;
	ff::fflua_register_t<DataCell, ctor()>(state, "DataCell", "google::protobuf::Message")
		// required fixed64 guid = 1;
		.def(&DataCell::guid, "guid")
		.def(&DataCell::set_guid, "set_guid")
		// required fixed64 player_guid = 2;
		.def(&DataCell::player_guid, "player_guid")
		.def(&DataCell::set_player_guid, "set_player_guid")
		// required .Packet.CellLogicType type = 3;
		.def(&DataCell::type, "type")
		.def(&DataCell::set_type, "set_type")
		// repeated int32 data = 4;
		.def(&DataCell::data_size, "data_size")
		.def<decltype(message->data(0)) (DataCell::*)(int) const>(&DataCell::data, "data")
		.def<void(DataCell::*)(int, const decltype(message->data(0)))>(&DataCell::set_data, "set_data")
		.def(&DataCell::add_data, "add_data")
		.def(&DataCell::ByteSize, "ByteSize")
		.def(&DataCell::SetInitialized, "SetInitialized")
		;
	return true;
}
bool Data64Cell_fflua_reg(lua_State* state)
{
//for decltype
	Data64Cell* message(nullptr);
	message;
	ff::fflua_register_t<Data64Cell, ctor()>(state, "Data64Cell", "google::protobuf::Message")
		// required fixed64 guid = 1;
		.def(&Data64Cell::guid, "guid")
		.def(&Data64Cell::set_guid, "set_guid")
		// required fixed64 player_guid = 2;
		.def(&Data64Cell::player_guid, "player_guid")
		.def(&Data64Cell::set_player_guid, "set_player_guid")
		// required .Packet.Cell64LogicType type = 3;
		.def(&Data64Cell::type, "type")
		.def(&Data64Cell::set_type, "set_type")
		// repeated fixed64 data = 4;
		.def(&Data64Cell::data_size, "data_size")
		.def<decltype(message->data(0)) (Data64Cell::*)(int) const>(&Data64Cell::data, "data")
		.def<void(Data64Cell::*)(int, const decltype(message->data(0)))>(&Data64Cell::set_data, "set_data")
		.def(&Data64Cell::add_data, "add_data")
		.def(&Data64Cell::ByteSize, "ByteSize")
		.def(&Data64Cell::SetInitialized, "SetInitialized")
		;
	return true;
}
bool DataCell32ValueUpdateReply_fflua_reg(lua_State* state)
{
//for decltype
	DataCell32ValueUpdateReply* message(nullptr);
	message;
	ff::fflua_register_t<DataCell32ValueUpdateReply, ctor()>(state, "DataCell32ValueUpdateReply", "google::protobuf::Message")
		// required .Packet.CellLogicType type = 1;
		.def(&DataCell32ValueUpdateReply::type, "type")
		.def(&DataCell32ValueUpdateReply::set_type, "set_type")
		// required int32 index = 2;
		.def(&DataCell32ValueUpdateReply::index, "index")
		.def(&DataCell32ValueUpdateReply::set_index, "set_index")
		// required int32 data = 3;
		.def(&DataCell32ValueUpdateReply::data, "data")
		.def(&DataCell32ValueUpdateReply::set_data, "set_data")
		.def(&DataCell32ValueUpdateReply::ByteSize, "ByteSize")
		.def(&DataCell32ValueUpdateReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool DataCell64ValueUpdateReply_fflua_reg(lua_State* state)
{
//for decltype
	DataCell64ValueUpdateReply* message(nullptr);
	message;
	ff::fflua_register_t<DataCell64ValueUpdateReply, ctor()>(state, "DataCell64ValueUpdateReply", "google::protobuf::Message")
		// required .Packet.Cell64LogicType type = 1;
		.def(&DataCell64ValueUpdateReply::type, "type")
		.def(&DataCell64ValueUpdateReply::set_type, "set_type")
		// required int32 index = 2;
		.def(&DataCell64ValueUpdateReply::index, "index")
		.def(&DataCell64ValueUpdateReply::set_index, "set_index")
		// required fixed64 data = 3;
		.def(&DataCell64ValueUpdateReply::data, "data")
		.def(&DataCell64ValueUpdateReply::set_data, "set_data")
		.def(&DataCell64ValueUpdateReply::ByteSize, "ByteSize")
		.def(&DataCell64ValueUpdateReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool DataCellUpdateReply_fflua_reg(lua_State* state)
{
//for decltype
	DataCellUpdateReply* message(nullptr);
	message;
	ff::fflua_register_t<DataCellUpdateReply, ctor()>(state, "DataCellUpdateReply", "google::protobuf::Message")
		// optional .Packet.DataCell cell32 = 1;
		.def(&DataCellUpdateReply::cell32, "cell32")
		.def(&DataCellUpdateReply::mutable_cell32, "mutable_cell32")
		.def(&DataCellUpdateReply::has_cell32, "has_cell32")
		// optional .Packet.Data64Cell cell64 = 2;
		.def(&DataCellUpdateReply::cell64, "cell64")
		.def(&DataCellUpdateReply::mutable_cell64, "mutable_cell64")
		.def(&DataCellUpdateReply::has_cell64, "has_cell64")
		.def(&DataCellUpdateReply::ByteSize, "ByteSize")
		.def(&DataCellUpdateReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool DataCell32ListReply_fflua_reg(lua_State* state)
{
//for decltype
	DataCell32ListReply* message(nullptr);
	message;
	ff::fflua_register_t<DataCell32ListReply, ctor()>(state, "DataCell32ListReply", "google::protobuf::Message")
		// repeated .Packet.DataCell cell_list = 1;
		.def(&DataCell32ListReply::cell_list_size, "cell_list_size")
		.def<decltype(message->cell_list(0)) (DataCell32ListReply::*)(int) const>(&DataCell32ListReply::cell_list, "cell_list")
		.def<decltype(message->mutable_cell_list(0)) (DataCell32ListReply::*)(int)>(&DataCell32ListReply::mutable_cell_list, "mutable_cell_list")
		.def(&DataCell32ListReply::add_cell_list, "add_cell_list")
		.def(&DataCell32ListReply::ByteSize, "ByteSize")
		.def(&DataCell32ListReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool DataCell64ListReply_fflua_reg(lua_State* state)
{
//for decltype
	DataCell64ListReply* message(nullptr);
	message;
	ff::fflua_register_t<DataCell64ListReply, ctor()>(state, "DataCell64ListReply", "google::protobuf::Message")
		// repeated .Packet.Data64Cell cell_list = 1;
		.def(&DataCell64ListReply::cell_list_size, "cell_list_size")
		.def<decltype(message->cell_list(0)) (DataCell64ListReply::*)(int) const>(&DataCell64ListReply::cell_list, "cell_list")
		.def<decltype(message->mutable_cell_list(0)) (DataCell64ListReply::*)(int)>(&DataCell64ListReply::mutable_cell_list, "mutable_cell_list")
		.def(&DataCell64ListReply::add_cell_list, "add_cell_list")
		.def(&DataCell64ListReply::ByteSize, "ByteSize")
		.def(&DataCell64ListReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool SingleDataCell32ListReply_fflua_reg(lua_State* state)
{
//for decltype
	SingleDataCell32ListReply* message(nullptr);
	message;
	ff::fflua_register_t<SingleDataCell32ListReply, ctor()>(state, "SingleDataCell32ListReply", "google::protobuf::Message")
		// required .Packet.CellLogicType type = 1;
		.def(&SingleDataCell32ListReply::type, "type")
		.def(&SingleDataCell32ListReply::set_type, "set_type")
		// repeated .Packet.DataCell cell_list = 2;
		.def(&SingleDataCell32ListReply::cell_list_size, "cell_list_size")
		.def<decltype(message->cell_list(0)) (SingleDataCell32ListReply::*)(int) const>(&SingleDataCell32ListReply::cell_list, "cell_list")
		.def<decltype(message->mutable_cell_list(0)) (SingleDataCell32ListReply::*)(int)>(&SingleDataCell32ListReply::mutable_cell_list, "mutable_cell_list")
		.def(&SingleDataCell32ListReply::add_cell_list, "add_cell_list")
		.def(&SingleDataCell32ListReply::ByteSize, "ByteSize")
		.def(&SingleDataCell32ListReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool SingleDataCell64ListReply_fflua_reg(lua_State* state)
{
//for decltype
	SingleDataCell64ListReply* message(nullptr);
	message;
	ff::fflua_register_t<SingleDataCell64ListReply, ctor()>(state, "SingleDataCell64ListReply", "google::protobuf::Message")
		// required .Packet.Cell64LogicType type = 1;
		.def(&SingleDataCell64ListReply::type, "type")
		.def(&SingleDataCell64ListReply::set_type, "set_type")
		// repeated .Packet.Data64Cell cell_list = 2;
		.def(&SingleDataCell64ListReply::cell_list_size, "cell_list_size")
		.def<decltype(message->cell_list(0)) (SingleDataCell64ListReply::*)(int) const>(&SingleDataCell64ListReply::cell_list, "cell_list")
		.def<decltype(message->mutable_cell_list(0)) (SingleDataCell64ListReply::*)(int)>(&SingleDataCell64ListReply::mutable_cell_list, "mutable_cell_list")
		.def(&SingleDataCell64ListReply::add_cell_list, "add_cell_list")
		.def(&SingleDataCell64ListReply::ByteSize, "ByteSize")
		.def(&SingleDataCell64ListReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool DataCellPacket_fflua_regist_all(lua_State* state)
{
	DataCell_fflua_reg(state);
	Data64Cell_fflua_reg(state);
	DataCell32ValueUpdateReply_fflua_reg(state);
	DataCell64ValueUpdateReply_fflua_reg(state);
	DataCellUpdateReply_fflua_reg(state);
	DataCell32ListReply_fflua_reg(state);
	DataCell64ListReply_fflua_reg(state);
	SingleDataCell32ListReply_fflua_reg(state);
	SingleDataCell64ListReply_fflua_reg(state);
	return true;
}
}
