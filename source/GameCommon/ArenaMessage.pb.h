// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ArenaMessage.proto

#ifndef PROTOBUF_ArenaMessage_2eproto__INCLUDED
#define PROTOBUF_ArenaMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ProtoBufOption.pb.h"
#include "PlayerBasicInfo.pb.h"
#include "ActorBasicInfo.pb.h"
// @@protoc_insertion_point(includes)

namespace Packet {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ArenaMessage_2eproto();
void protobuf_AssignDesc_ArenaMessage_2eproto();
void protobuf_ShutdownFile_ArenaMessage_2eproto();

class ArenaMainData;
class ArenaPlayer;
class ArenaPlayerInfo;
class ArenaLog;
class ArenaPlayerDataChange;
class ArenaChallengePlayer;
class ArenaPanelOpen;
class ArenaRefreshTarget;
class ArenaPanelClose;
class ArenaBuyChallengeCount;

// ===================================================================

class ArenaMainData : public ::google::protobuf::Message {
 public:
  ArenaMainData();
  virtual ~ArenaMainData();

  ArenaMainData(const ArenaMainData& from);

  inline ArenaMainData& operator=(const ArenaMainData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaMainData& default_instance();

  void Swap(ArenaMainData* other);

  // implements Message ----------------------------------------------

  ArenaMainData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaMainData& from);
  void MergeFrom(const ArenaMainData& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Packet.ArenaPlayer targets = 1;
  inline int targets_size() const;
  inline void clear_targets();
  static const int kTargetsFieldNumber = 1;
  inline const ::Packet::ArenaPlayer& targets(int index) const;
  inline ::Packet::ArenaPlayer* mutable_targets(int index);
  inline ::Packet::ArenaPlayer* add_targets();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::ArenaPlayer >&
      targets() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::ArenaPlayer >*
      mutable_targets();

  // required .Packet.ArenaPlayer my_self = 2;
  inline bool has_my_self() const;
  inline void clear_my_self();
  static const int kMySelfFieldNumber = 2;
  inline const ::Packet::ArenaPlayer& my_self() const;
  inline ::Packet::ArenaPlayer* mutable_my_self();
  inline ::Packet::ArenaPlayer* release_my_self();
  inline void set_allocated_my_self(::Packet::ArenaPlayer* my_self);

  // repeated .Packet.ArenaLog logs = 3;
  inline int logs_size() const;
  inline void clear_logs();
  static const int kLogsFieldNumber = 3;
  inline const ::Packet::ArenaLog& logs(int index) const;
  inline ::Packet::ArenaLog* mutable_logs(int index);
  inline ::Packet::ArenaLog* add_logs();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::ArenaLog >&
      logs() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::ArenaLog >*
      mutable_logs();

  // required fixed64 last_reload_tick = 4;
  inline bool has_last_reload_tick() const;
  inline void clear_last_reload_tick();
  static const int kLastReloadTickFieldNumber = 4;
  inline ::google::protobuf::uint64 last_reload_tick() const;
  inline void set_last_reload_tick(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Packet.ArenaMainData)
 private:
  inline void set_has_my_self();
  inline void clear_has_my_self();
  inline void set_has_last_reload_tick();
  inline void clear_has_last_reload_tick();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::ArenaPlayer > targets_;
  ::Packet::ArenaPlayer* my_self_;
  ::google::protobuf::RepeatedPtrField< ::Packet::ArenaLog > logs_;
  ::google::protobuf::uint64 last_reload_tick_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ArenaMessage_2eproto();
  friend void protobuf_AssignDesc_ArenaMessage_2eproto();
  friend void protobuf_ShutdownFile_ArenaMessage_2eproto();

  void InitAsDefaultInstance();
  static ArenaMainData* default_instance_;
};
// -------------------------------------------------------------------

class ArenaPlayer : public ::google::protobuf::Message {
 public:
  ArenaPlayer();
  virtual ~ArenaPlayer();

  ArenaPlayer(const ArenaPlayer& from);

  inline ArenaPlayer& operator=(const ArenaPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaPlayer& default_instance();

  void Swap(ArenaPlayer* other);

  // implements Message ----------------------------------------------

  ArenaPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaPlayer& from);
  void MergeFrom(const ArenaPlayer& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Packet.ArenaPlayerInfo player_info = 1;
  inline bool has_player_info() const;
  inline void clear_player_info();
  static const int kPlayerInfoFieldNumber = 1;
  inline const ::Packet::ArenaPlayerInfo& player_info() const;
  inline ::Packet::ArenaPlayerInfo* mutable_player_info();
  inline ::Packet::ArenaPlayerInfo* release_player_info();
  inline void set_allocated_player_info(::Packet::ArenaPlayerInfo* player_info);

  // repeated .Packet.ActorFullInfo actors = 2;
  inline int actors_size() const;
  inline void clear_actors();
  static const int kActorsFieldNumber = 2;
  inline const ::Packet::ActorFullInfo& actors(int index) const;
  inline ::Packet::ActorFullInfo* mutable_actors(int index);
  inline ::Packet::ActorFullInfo* add_actors();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::ActorFullInfo >&
      actors() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::ActorFullInfo >*
      mutable_actors();

  // required fixed64 guid = 3;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 3;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // required int32 rank = 4;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 4;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // required int32 yesterday_rank = 5;
  inline bool has_yesterday_rank() const;
  inline void clear_yesterday_rank();
  static const int kYesterdayRankFieldNumber = 5;
  inline ::google::protobuf::int32 yesterday_rank() const;
  inline void set_yesterday_rank(::google::protobuf::int32 value);

  // required int32 in_battle = 6;
  inline bool has_in_battle() const;
  inline void clear_in_battle();
  static const int kInBattleFieldNumber = 6;
  inline ::google::protobuf::int32 in_battle() const;
  inline void set_in_battle(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.ArenaPlayer)
 private:
  inline void set_has_player_info();
  inline void clear_has_player_info();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_yesterday_rank();
  inline void clear_has_yesterday_rank();
  inline void set_has_in_battle();
  inline void clear_has_in_battle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Packet::ArenaPlayerInfo* player_info_;
  ::google::protobuf::RepeatedPtrField< ::Packet::ActorFullInfo > actors_;
  ::google::protobuf::uint64 guid_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 yesterday_rank_;
  ::google::protobuf::int32 in_battle_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_ArenaMessage_2eproto();
  friend void protobuf_AssignDesc_ArenaMessage_2eproto();
  friend void protobuf_ShutdownFile_ArenaMessage_2eproto();

  void InitAsDefaultInstance();
  static ArenaPlayer* default_instance_;
};
// -------------------------------------------------------------------

class ArenaPlayerInfo : public ::google::protobuf::Message {
 public:
  ArenaPlayerInfo();
  virtual ~ArenaPlayerInfo();

  ArenaPlayerInfo(const ArenaPlayerInfo& from);

  inline ArenaPlayerInfo& operator=(const ArenaPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaPlayerInfo& default_instance();

  void Swap(ArenaPlayerInfo* other);

  // implements Message ----------------------------------------------

  ArenaPlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaPlayerInfo& from);
  void MergeFrom(const ArenaPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string icon = 1;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 1;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // required int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 score = 4;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.ArenaPlayerInfo)
 private:
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* icon_;
  ::std::string* name_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ArenaMessage_2eproto();
  friend void protobuf_AssignDesc_ArenaMessage_2eproto();
  friend void protobuf_ShutdownFile_ArenaMessage_2eproto();

  void InitAsDefaultInstance();
  static ArenaPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class ArenaLog : public ::google::protobuf::Message {
 public:
  ArenaLog();
  virtual ~ArenaLog();

  ArenaLog(const ArenaLog& from);

  inline ArenaLog& operator=(const ArenaLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaLog& default_instance();

  void Swap(ArenaLog* other);

  // implements Message ----------------------------------------------

  ArenaLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaLog& from);
  void MergeFrom(const ArenaLog& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Packet.ArenaPlayer player = 1;
  inline bool has_player() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 1;
  inline const ::Packet::ArenaPlayer& player() const;
  inline ::Packet::ArenaPlayer* mutable_player();
  inline ::Packet::ArenaPlayer* release_player();
  inline void set_allocated_player(::Packet::ArenaPlayer* player);

  // required fixed64 replay_guid = 2;
  inline bool has_replay_guid() const;
  inline void clear_replay_guid();
  static const int kReplayGuidFieldNumber = 2;
  inline ::google::protobuf::uint64 replay_guid() const;
  inline void set_replay_guid(::google::protobuf::uint64 value);

  // required bool win = 3;
  inline bool has_win() const;
  inline void clear_win();
  static const int kWinFieldNumber = 3;
  inline bool win() const;
  inline void set_win(bool value);

  // required int32 rank_change = 4;
  inline bool has_rank_change() const;
  inline void clear_rank_change();
  static const int kRankChangeFieldNumber = 4;
  inline ::google::protobuf::int32 rank_change() const;
  inline void set_rank_change(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.ArenaLog)
 private:
  inline void set_has_player();
  inline void clear_has_player();
  inline void set_has_replay_guid();
  inline void clear_has_replay_guid();
  inline void set_has_win();
  inline void clear_has_win();
  inline void set_has_rank_change();
  inline void clear_has_rank_change();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Packet::ArenaPlayer* player_;
  ::google::protobuf::uint64 replay_guid_;
  bool win_;
  ::google::protobuf::int32 rank_change_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ArenaMessage_2eproto();
  friend void protobuf_AssignDesc_ArenaMessage_2eproto();
  friend void protobuf_ShutdownFile_ArenaMessage_2eproto();

  void InitAsDefaultInstance();
  static ArenaLog* default_instance_;
};
// -------------------------------------------------------------------

class ArenaPlayerDataChange : public ::google::protobuf::Message {
 public:
  ArenaPlayerDataChange();
  virtual ~ArenaPlayerDataChange();

  ArenaPlayerDataChange(const ArenaPlayerDataChange& from);

  inline ArenaPlayerDataChange& operator=(const ArenaPlayerDataChange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaPlayerDataChange& default_instance();

  void Swap(ArenaPlayerDataChange* other);

  // implements Message ----------------------------------------------

  ArenaPlayerDataChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaPlayerDataChange& from);
  void MergeFrom(const ArenaPlayerDataChange& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // required .Packet.ArenaPlayer player = 2;
  inline bool has_player() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 2;
  inline const ::Packet::ArenaPlayer& player() const;
  inline ::Packet::ArenaPlayer* mutable_player();
  inline ::Packet::ArenaPlayer* release_player();
  inline void set_allocated_player(::Packet::ArenaPlayer* player);

  // @@protoc_insertion_point(class_scope:Packet.ArenaPlayerDataChange)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_player();
  inline void clear_has_player();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::Packet::ArenaPlayer* player_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ArenaMessage_2eproto();
  friend void protobuf_AssignDesc_ArenaMessage_2eproto();
  friend void protobuf_ShutdownFile_ArenaMessage_2eproto();

  void InitAsDefaultInstance();
  static ArenaPlayerDataChange* default_instance_;
};
// -------------------------------------------------------------------

class ArenaChallengePlayer : public ::google::protobuf::Message {
 public:
  ArenaChallengePlayer();
  virtual ~ArenaChallengePlayer();

  ArenaChallengePlayer(const ArenaChallengePlayer& from);

  inline ArenaChallengePlayer& operator=(const ArenaChallengePlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaChallengePlayer& default_instance();

  void Swap(ArenaChallengePlayer* other);

  // implements Message ----------------------------------------------

  ArenaChallengePlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaChallengePlayer& from);
  void MergeFrom(const ArenaChallengePlayer& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 target_guid = 1;
  inline bool has_target_guid() const;
  inline void clear_target_guid();
  static const int kTargetGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 target_guid() const;
  inline void set_target_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Packet.ArenaChallengePlayer)
 private:
  inline void set_has_target_guid();
  inline void clear_has_target_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 target_guid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ArenaMessage_2eproto();
  friend void protobuf_AssignDesc_ArenaMessage_2eproto();
  friend void protobuf_ShutdownFile_ArenaMessage_2eproto();

  void InitAsDefaultInstance();
  static ArenaChallengePlayer* default_instance_;
};
// -------------------------------------------------------------------

class ArenaPanelOpen : public ::google::protobuf::Message {
 public:
  ArenaPanelOpen();
  virtual ~ArenaPanelOpen();

  ArenaPanelOpen(const ArenaPanelOpen& from);

  inline ArenaPanelOpen& operator=(const ArenaPanelOpen& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaPanelOpen& default_instance();

  void Swap(ArenaPanelOpen* other);

  // implements Message ----------------------------------------------

  ArenaPanelOpen* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaPanelOpen& from);
  void MergeFrom(const ArenaPanelOpen& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Packet.ArenaPanelOpen)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ArenaMessage_2eproto();
  friend void protobuf_AssignDesc_ArenaMessage_2eproto();
  friend void protobuf_ShutdownFile_ArenaMessage_2eproto();

  void InitAsDefaultInstance();
  static ArenaPanelOpen* default_instance_;
};
// -------------------------------------------------------------------

class ArenaRefreshTarget : public ::google::protobuf::Message {
 public:
  ArenaRefreshTarget();
  virtual ~ArenaRefreshTarget();

  ArenaRefreshTarget(const ArenaRefreshTarget& from);

  inline ArenaRefreshTarget& operator=(const ArenaRefreshTarget& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaRefreshTarget& default_instance();

  void Swap(ArenaRefreshTarget* other);

  // implements Message ----------------------------------------------

  ArenaRefreshTarget* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaRefreshTarget& from);
  void MergeFrom(const ArenaRefreshTarget& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Packet.ArenaRefreshTarget)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ArenaMessage_2eproto();
  friend void protobuf_AssignDesc_ArenaMessage_2eproto();
  friend void protobuf_ShutdownFile_ArenaMessage_2eproto();

  void InitAsDefaultInstance();
  static ArenaRefreshTarget* default_instance_;
};
// -------------------------------------------------------------------

class ArenaPanelClose : public ::google::protobuf::Message {
 public:
  ArenaPanelClose();
  virtual ~ArenaPanelClose();

  ArenaPanelClose(const ArenaPanelClose& from);

  inline ArenaPanelClose& operator=(const ArenaPanelClose& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaPanelClose& default_instance();

  void Swap(ArenaPanelClose* other);

  // implements Message ----------------------------------------------

  ArenaPanelClose* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaPanelClose& from);
  void MergeFrom(const ArenaPanelClose& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Packet.ArenaPanelClose)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ArenaMessage_2eproto();
  friend void protobuf_AssignDesc_ArenaMessage_2eproto();
  friend void protobuf_ShutdownFile_ArenaMessage_2eproto();

  void InitAsDefaultInstance();
  static ArenaPanelClose* default_instance_;
};
// -------------------------------------------------------------------

class ArenaBuyChallengeCount : public ::google::protobuf::Message {
 public:
  ArenaBuyChallengeCount();
  virtual ~ArenaBuyChallengeCount();

  ArenaBuyChallengeCount(const ArenaBuyChallengeCount& from);

  inline ArenaBuyChallengeCount& operator=(const ArenaBuyChallengeCount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaBuyChallengeCount& default_instance();

  void Swap(ArenaBuyChallengeCount* other);

  // implements Message ----------------------------------------------

  ArenaBuyChallengeCount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaBuyChallengeCount& from);
  void MergeFrom(const ArenaBuyChallengeCount& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Packet.ArenaBuyChallengeCount)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ArenaMessage_2eproto();
  friend void protobuf_AssignDesc_ArenaMessage_2eproto();
  friend void protobuf_ShutdownFile_ArenaMessage_2eproto();

  void InitAsDefaultInstance();
  static ArenaBuyChallengeCount* default_instance_;
};
// ===================================================================


// ===================================================================

// ArenaMainData

// repeated .Packet.ArenaPlayer targets = 1;
inline int ArenaMainData::targets_size() const {
  return targets_.size();
}
inline void ArenaMainData::clear_targets() {
  targets_.Clear();
  SetDirty();
}
inline const ::Packet::ArenaPlayer& ArenaMainData::targets(int index) const {
  return targets_.Get(index);
}
inline ::Packet::ArenaPlayer* ArenaMainData::mutable_targets(int index) {
  SetDirty();
  return targets_.Mutable(index);
}
inline ::Packet::ArenaPlayer* ArenaMainData::add_targets() {
  SetDirty();
  return targets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::ArenaPlayer >&
ArenaMainData::targets() const {
  return targets_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::ArenaPlayer >*
ArenaMainData::mutable_targets() {
  SetDirty();
  return &targets_;
}

// required .Packet.ArenaPlayer my_self = 2;
inline bool ArenaMainData::has_my_self() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArenaMainData::set_has_my_self() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArenaMainData::clear_has_my_self() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArenaMainData::clear_my_self() {
  if (my_self_ != NULL) my_self_->::Packet::ArenaPlayer::Clear();
  clear_has_my_self();
  SetDirty();
}
inline const ::Packet::ArenaPlayer& ArenaMainData::my_self() const {
  return my_self_ != NULL ? *my_self_ : *default_instance_->my_self_;
}
inline ::Packet::ArenaPlayer* ArenaMainData::mutable_my_self() {
  SetDirty();
  set_has_my_self();
  if (my_self_ == NULL) my_self_ = new ::Packet::ArenaPlayer;
  return my_self_;
}
inline ::Packet::ArenaPlayer* ArenaMainData::release_my_self() {
  SetDirty();
  clear_has_my_self();
  ::Packet::ArenaPlayer* temp = my_self_;
  my_self_ = NULL;
  return temp;
}
inline void ArenaMainData::set_allocated_my_self(::Packet::ArenaPlayer* my_self) {
  SetDirty();
  delete my_self_;
  my_self_ = my_self;
  if (my_self) {
    set_has_my_self();
  } else {
    clear_has_my_self();
  }
}

// repeated .Packet.ArenaLog logs = 3;
inline int ArenaMainData::logs_size() const {
  return logs_.size();
}
inline void ArenaMainData::clear_logs() {
  logs_.Clear();
  SetDirty();
}
inline const ::Packet::ArenaLog& ArenaMainData::logs(int index) const {
  return logs_.Get(index);
}
inline ::Packet::ArenaLog* ArenaMainData::mutable_logs(int index) {
  SetDirty();
  return logs_.Mutable(index);
}
inline ::Packet::ArenaLog* ArenaMainData::add_logs() {
  SetDirty();
  return logs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::ArenaLog >&
ArenaMainData::logs() const {
  return logs_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::ArenaLog >*
ArenaMainData::mutable_logs() {
  SetDirty();
  return &logs_;
}

// required fixed64 last_reload_tick = 4;
inline bool ArenaMainData::has_last_reload_tick() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ArenaMainData::set_has_last_reload_tick() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ArenaMainData::clear_has_last_reload_tick() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ArenaMainData::clear_last_reload_tick() {
  last_reload_tick_ = GOOGLE_ULONGLONG(0);
  clear_has_last_reload_tick();
  SetDirty();
}
inline ::google::protobuf::uint64 ArenaMainData::last_reload_tick() const {
  return last_reload_tick_;
}
inline void ArenaMainData::set_last_reload_tick(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_last_reload_tick();
  last_reload_tick_ = value;
}

// -------------------------------------------------------------------

// ArenaPlayer

// required .Packet.ArenaPlayerInfo player_info = 1;
inline bool ArenaPlayer::has_player_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArenaPlayer::set_has_player_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArenaPlayer::clear_has_player_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArenaPlayer::clear_player_info() {
  if (player_info_ != NULL) player_info_->::Packet::ArenaPlayerInfo::Clear();
  clear_has_player_info();
  SetDirty();
}
inline const ::Packet::ArenaPlayerInfo& ArenaPlayer::player_info() const {
  return player_info_ != NULL ? *player_info_ : *default_instance_->player_info_;
}
inline ::Packet::ArenaPlayerInfo* ArenaPlayer::mutable_player_info() {
  SetDirty();
  set_has_player_info();
  if (player_info_ == NULL) player_info_ = new ::Packet::ArenaPlayerInfo;
  return player_info_;
}
inline ::Packet::ArenaPlayerInfo* ArenaPlayer::release_player_info() {
  SetDirty();
  clear_has_player_info();
  ::Packet::ArenaPlayerInfo* temp = player_info_;
  player_info_ = NULL;
  return temp;
}
inline void ArenaPlayer::set_allocated_player_info(::Packet::ArenaPlayerInfo* player_info) {
  SetDirty();
  delete player_info_;
  player_info_ = player_info;
  if (player_info) {
    set_has_player_info();
  } else {
    clear_has_player_info();
  }
}

// repeated .Packet.ActorFullInfo actors = 2;
inline int ArenaPlayer::actors_size() const {
  return actors_.size();
}
inline void ArenaPlayer::clear_actors() {
  actors_.Clear();
  SetDirty();
}
inline const ::Packet::ActorFullInfo& ArenaPlayer::actors(int index) const {
  return actors_.Get(index);
}
inline ::Packet::ActorFullInfo* ArenaPlayer::mutable_actors(int index) {
  SetDirty();
  return actors_.Mutable(index);
}
inline ::Packet::ActorFullInfo* ArenaPlayer::add_actors() {
  SetDirty();
  return actors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::ActorFullInfo >&
ArenaPlayer::actors() const {
  return actors_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::ActorFullInfo >*
ArenaPlayer::mutable_actors() {
  SetDirty();
  return &actors_;
}

// required fixed64 guid = 3;
inline bool ArenaPlayer::has_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ArenaPlayer::set_has_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ArenaPlayer::clear_has_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ArenaPlayer::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 ArenaPlayer::guid() const {
  return guid_;
}
inline void ArenaPlayer::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// required int32 rank = 4;
inline bool ArenaPlayer::has_rank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ArenaPlayer::set_has_rank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ArenaPlayer::clear_has_rank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ArenaPlayer::clear_rank() {
  rank_ = 0;
  clear_has_rank();
  SetDirty();
}
inline ::google::protobuf::int32 ArenaPlayer::rank() const {
  return rank_;
}
inline void ArenaPlayer::set_rank(::google::protobuf::int32 value) {
  SetDirty();
  set_has_rank();
  rank_ = value;
}

// required int32 yesterday_rank = 5;
inline bool ArenaPlayer::has_yesterday_rank() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ArenaPlayer::set_has_yesterday_rank() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ArenaPlayer::clear_has_yesterday_rank() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ArenaPlayer::clear_yesterday_rank() {
  yesterday_rank_ = 0;
  clear_has_yesterday_rank();
  SetDirty();
}
inline ::google::protobuf::int32 ArenaPlayer::yesterday_rank() const {
  return yesterday_rank_;
}
inline void ArenaPlayer::set_yesterday_rank(::google::protobuf::int32 value) {
  SetDirty();
  set_has_yesterday_rank();
  yesterday_rank_ = value;
}

// required int32 in_battle = 6;
inline bool ArenaPlayer::has_in_battle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ArenaPlayer::set_has_in_battle() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ArenaPlayer::clear_has_in_battle() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ArenaPlayer::clear_in_battle() {
  in_battle_ = 0;
  clear_has_in_battle();
  SetDirty();
}
inline ::google::protobuf::int32 ArenaPlayer::in_battle() const {
  return in_battle_;
}
inline void ArenaPlayer::set_in_battle(::google::protobuf::int32 value) {
  SetDirty();
  set_has_in_battle();
  in_battle_ = value;
}

// -------------------------------------------------------------------

// ArenaPlayerInfo

// required string icon = 1;
inline bool ArenaPlayerInfo::has_icon() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArenaPlayerInfo::set_has_icon() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArenaPlayerInfo::clear_has_icon() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArenaPlayerInfo::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
  SetDirty();
}
inline const ::std::string& ArenaPlayerInfo::icon() const {
  return *icon_;
}
inline void ArenaPlayerInfo::set_icon(const ::std::string& value) {
  SetDirty();
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void ArenaPlayerInfo::set_icon(const char* value) {
  SetDirty();
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void ArenaPlayerInfo::set_icon(const char* value, size_t size) {
  SetDirty();
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArenaPlayerInfo::mutable_icon() {
  SetDirty();
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* ArenaPlayerInfo::release_icon() {
  SetDirty();
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ArenaPlayerInfo::set_allocated_icon(::std::string* icon) {
  SetDirty();
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 level = 2;
inline bool ArenaPlayerInfo::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArenaPlayerInfo::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArenaPlayerInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArenaPlayerInfo::clear_level() {
  level_ = 0;
  clear_has_level();
  SetDirty();
}
inline ::google::protobuf::int32 ArenaPlayerInfo::level() const {
  return level_;
}
inline void ArenaPlayerInfo::set_level(::google::protobuf::int32 value) {
  SetDirty();
  set_has_level();
  level_ = value;
}

// required string name = 3;
inline bool ArenaPlayerInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ArenaPlayerInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ArenaPlayerInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ArenaPlayerInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
  SetDirty();
}
inline const ::std::string& ArenaPlayerInfo::name() const {
  return *name_;
}
inline void ArenaPlayerInfo::set_name(const ::std::string& value) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ArenaPlayerInfo::set_name(const char* value) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ArenaPlayerInfo::set_name(const char* value, size_t size) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArenaPlayerInfo::mutable_name() {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ArenaPlayerInfo::release_name() {
  SetDirty();
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ArenaPlayerInfo::set_allocated_name(::std::string* name) {
  SetDirty();
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 score = 4;
inline bool ArenaPlayerInfo::has_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ArenaPlayerInfo::set_has_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ArenaPlayerInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ArenaPlayerInfo::clear_score() {
  score_ = 0;
  clear_has_score();
  SetDirty();
}
inline ::google::protobuf::int32 ArenaPlayerInfo::score() const {
  return score_;
}
inline void ArenaPlayerInfo::set_score(::google::protobuf::int32 value) {
  SetDirty();
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// ArenaLog

// required .Packet.ArenaPlayer player = 1;
inline bool ArenaLog::has_player() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArenaLog::set_has_player() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArenaLog::clear_has_player() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArenaLog::clear_player() {
  if (player_ != NULL) player_->::Packet::ArenaPlayer::Clear();
  clear_has_player();
  SetDirty();
}
inline const ::Packet::ArenaPlayer& ArenaLog::player() const {
  return player_ != NULL ? *player_ : *default_instance_->player_;
}
inline ::Packet::ArenaPlayer* ArenaLog::mutable_player() {
  SetDirty();
  set_has_player();
  if (player_ == NULL) player_ = new ::Packet::ArenaPlayer;
  return player_;
}
inline ::Packet::ArenaPlayer* ArenaLog::release_player() {
  SetDirty();
  clear_has_player();
  ::Packet::ArenaPlayer* temp = player_;
  player_ = NULL;
  return temp;
}
inline void ArenaLog::set_allocated_player(::Packet::ArenaPlayer* player) {
  SetDirty();
  delete player_;
  player_ = player;
  if (player) {
    set_has_player();
  } else {
    clear_has_player();
  }
}

// required fixed64 replay_guid = 2;
inline bool ArenaLog::has_replay_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArenaLog::set_has_replay_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArenaLog::clear_has_replay_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArenaLog::clear_replay_guid() {
  replay_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_replay_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 ArenaLog::replay_guid() const {
  return replay_guid_;
}
inline void ArenaLog::set_replay_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_replay_guid();
  replay_guid_ = value;
}

// required bool win = 3;
inline bool ArenaLog::has_win() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ArenaLog::set_has_win() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ArenaLog::clear_has_win() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ArenaLog::clear_win() {
  win_ = false;
  clear_has_win();
  SetDirty();
}
inline bool ArenaLog::win() const {
  return win_;
}
inline void ArenaLog::set_win(bool value) {
  SetDirty();
  set_has_win();
  win_ = value;
}

// required int32 rank_change = 4;
inline bool ArenaLog::has_rank_change() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ArenaLog::set_has_rank_change() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ArenaLog::clear_has_rank_change() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ArenaLog::clear_rank_change() {
  rank_change_ = 0;
  clear_has_rank_change();
  SetDirty();
}
inline ::google::protobuf::int32 ArenaLog::rank_change() const {
  return rank_change_;
}
inline void ArenaLog::set_rank_change(::google::protobuf::int32 value) {
  SetDirty();
  set_has_rank_change();
  rank_change_ = value;
}

// -------------------------------------------------------------------

// ArenaPlayerDataChange

// required fixed64 guid = 1;
inline bool ArenaPlayerDataChange::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArenaPlayerDataChange::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArenaPlayerDataChange::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArenaPlayerDataChange::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 ArenaPlayerDataChange::guid() const {
  return guid_;
}
inline void ArenaPlayerDataChange::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// required .Packet.ArenaPlayer player = 2;
inline bool ArenaPlayerDataChange::has_player() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArenaPlayerDataChange::set_has_player() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArenaPlayerDataChange::clear_has_player() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArenaPlayerDataChange::clear_player() {
  if (player_ != NULL) player_->::Packet::ArenaPlayer::Clear();
  clear_has_player();
  SetDirty();
}
inline const ::Packet::ArenaPlayer& ArenaPlayerDataChange::player() const {
  return player_ != NULL ? *player_ : *default_instance_->player_;
}
inline ::Packet::ArenaPlayer* ArenaPlayerDataChange::mutable_player() {
  SetDirty();
  set_has_player();
  if (player_ == NULL) player_ = new ::Packet::ArenaPlayer;
  return player_;
}
inline ::Packet::ArenaPlayer* ArenaPlayerDataChange::release_player() {
  SetDirty();
  clear_has_player();
  ::Packet::ArenaPlayer* temp = player_;
  player_ = NULL;
  return temp;
}
inline void ArenaPlayerDataChange::set_allocated_player(::Packet::ArenaPlayer* player) {
  SetDirty();
  delete player_;
  player_ = player;
  if (player) {
    set_has_player();
  } else {
    clear_has_player();
  }
}

// -------------------------------------------------------------------

// ArenaChallengePlayer

// required fixed64 target_guid = 1;
inline bool ArenaChallengePlayer::has_target_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArenaChallengePlayer::set_has_target_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArenaChallengePlayer::clear_has_target_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArenaChallengePlayer::clear_target_guid() {
  target_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_target_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 ArenaChallengePlayer::target_guid() const {
  return target_guid_;
}
inline void ArenaChallengePlayer::set_target_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_target_guid();
  target_guid_ = value;
}

// -------------------------------------------------------------------

// ArenaPanelOpen

// -------------------------------------------------------------------

// ArenaRefreshTarget

// -------------------------------------------------------------------

// ArenaPanelClose

// -------------------------------------------------------------------

// ArenaBuyChallengeCount


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ArenaMessage_2eproto__INCLUDED
