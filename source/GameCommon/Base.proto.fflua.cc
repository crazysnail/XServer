// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Base.proto
#include "Base.pb.h"
#include "Base.proto.fflua.h"
namespace Packet {
bool Position_fflua_reg(lua_State* state)
{
//for decltype
	Position* message(nullptr);
	message;
	ff::fflua_register_t<Position, ctor()>(state, "Position", "google::protobuf::Message")
		// required int32 x = 1;
		.def(&Position::x, "x")
		.def(&Position::set_x, "set_x")
		// required int32 y = 2;
		.def(&Position::y, "y")
		.def(&Position::set_y, "set_y")
		// required int32 z = 3;
		.def(&Position::z, "z")
		.def(&Position::set_z, "set_z")
		.def(&Position::ByteSize, "ByteSize")
		.def(&Position::SetInitialized, "SetInitialized")
		;
	return true;
}
bool Notify_fflua_reg(lua_State* state)
{
//for decltype
	Notify* message(nullptr);
	message;
	ff::fflua_register_t<Notify, ctor()>(state, "Notify", "google::protobuf::Message")
		// required string notify = 1;
		.def(&Notify::notify, "notify")
		.def<void (Notify::*)(const std::string&)>(&Notify::set_notify, "set_notify")
		// optional int32 show_type = 2;
		.def(&Notify::show_type, "show_type")
		.def(&Notify::set_show_type, "set_show_type")
		.def(&Notify::has_show_type, "has_show_type")
		.def(&Notify::ByteSize, "ByteSize")
		.def(&Notify::SetInitialized, "SetInitialized")
		;
	return true;
}
bool ShmHead_fflua_reg(lua_State* state)
{
//for decltype
	ShmHead* message(nullptr);
	message;
	ff::fflua_register_t<ShmHead, ctor()>(state, "ShmHead", "google::protobuf::Message")
		// required fixed64 cache_time = 1;
		.def(&ShmHead::cache_time, "cache_time")
		.def(&ShmHead::set_cache_time, "set_cache_time")
		.def(&ShmHead::ByteSize, "ByteSize")
		.def(&ShmHead::SetInitialized, "SetInitialized")
		;
	return true;
}
bool ServerInfo_fflua_reg(lua_State* state)
{
//for decltype
	ServerInfo* message(nullptr);
	message;
	ff::fflua_register_t<ServerInfo, ctor()>(state, "ServerInfo", "google::protobuf::Message")
		// required int32 serverid = 1;
		.def(&ServerInfo::serverid, "serverid")
		.def(&ServerInfo::set_serverid, "set_serverid")
		// required uint32 db_refresh_time = 2;
		.def(&ServerInfo::db_refresh_time, "db_refresh_time")
		.def(&ServerInfo::set_db_refresh_time, "set_db_refresh_time")
		// required bool active_gm_command = 3;
		.def(&ServerInfo::active_gm_command, "active_gm_command")
		.def(&ServerInfo::set_active_gm_command, "set_active_gm_command")
		// required int32 invest_count = 4;
		.def(&ServerInfo::invest_count, "invest_count")
		.def(&ServerInfo::set_invest_count, "set_invest_count")
		// required int32 guildbattle_times = 5;
		.def(&ServerInfo::guildbattle_times, "guildbattle_times")
		.def(&ServerInfo::set_guildbattle_times, "set_guildbattle_times")
		// repeated int32 acr_data = 6;
		.def(&ServerInfo::acr_data_size, "acr_data_size")
		.def<decltype(message->acr_data(0)) (ServerInfo::*)(int) const>(&ServerInfo::acr_data, "acr_data")
		.def<void(ServerInfo::*)(int, const decltype(message->acr_data(0)))>(&ServerInfo::set_acr_data, "set_acr_data")
		.def(&ServerInfo::add_acr_data, "add_acr_data")
		.def(&ServerInfo::ByteSize, "ByteSize")
		.def(&ServerInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool PayOrderInfo_fflua_reg(lua_State* state)
{
//for decltype
	PayOrderInfo* message(nullptr);
	message;
	ff::fflua_register_t<PayOrderInfo, ctor()>(state, "PayOrderInfo", "google::protobuf::Message")
		// required fixed64 guid = 1;
		.def(&PayOrderInfo::guid, "guid")
		.def(&PayOrderInfo::set_guid, "set_guid")
		// required string orderid = 2;
		.def(&PayOrderInfo::orderid, "orderid")
		.def<void (PayOrderInfo::*)(const std::string&)>(&PayOrderInfo::set_orderid, "set_orderid")
		// required int32 partnerid = 3;
		.def(&PayOrderInfo::partnerid, "partnerid")
		.def(&PayOrderInfo::set_partnerid, "set_partnerid")
		// required int32 serverid = 4;
		.def(&PayOrderInfo::serverid, "serverid")
		.def(&PayOrderInfo::set_serverid, "set_serverid")
		// required fixed64 playerid = 5;
		.def(&PayOrderInfo::playerid, "playerid")
		.def(&PayOrderInfo::set_playerid, "set_playerid")
		// required string productid = 6;
		.def(&PayOrderInfo::productid, "productid")
		.def<void (PayOrderInfo::*)(const std::string&)>(&PayOrderInfo::set_productid, "set_productid")
		// required float chargemoney = 7;
		.def(&PayOrderInfo::chargemoney, "chargemoney")
		.def(&PayOrderInfo::set_chargemoney, "set_chargemoney")
		// required float activitychargemoney = 8;
		.def(&PayOrderInfo::activitychargemoney, "activitychargemoney")
		.def(&PayOrderInfo::set_activitychargemoney, "set_activitychargemoney")
		// required string deviceldentifier = 9;
		.def(&PayOrderInfo::deviceldentifier, "deviceldentifier")
		.def<void (PayOrderInfo::*)(const std::string&)>(&PayOrderInfo::set_deviceldentifier, "set_deviceldentifier")
		// required string ip = 10;
		.def(&PayOrderInfo::ip, "ip")
		.def<void (PayOrderInfo::*)(const std::string&)>(&PayOrderInfo::set_ip, "set_ip")
		// required string extra = 11;
		.def(&PayOrderInfo::extra, "extra")
		.def<void (PayOrderInfo::*)(const std::string&)>(&PayOrderInfo::set_extra, "set_extra")
		// required float finalchargemoney = 12;
		.def(&PayOrderInfo::finalchargemoney, "finalchargemoney")
		.def(&PayOrderInfo::set_finalchargemoney, "set_finalchargemoney")
		// required int32 ismonthcard = 13;
		.def(&PayOrderInfo::ismonthcard, "ismonthcard")
		.def(&PayOrderInfo::set_ismonthcard, "set_ismonthcard")
		.def(&PayOrderInfo::ByteSize, "ByteSize")
		.def(&PayOrderInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool LuaFile_fflua_reg(lua_State* state)
{
//for decltype
	LuaFile* message(nullptr);
	message;
	ff::fflua_register_t<LuaFile, ctor()>(state, "LuaFile", "google::protobuf::Message")
		// required int32 script_id = 1;
		.def(&LuaFile::script_id, "script_id")
		.def(&LuaFile::set_script_id, "set_script_id")
		// required fixed64 crc = 2;
		.def(&LuaFile::crc, "crc")
		.def(&LuaFile::set_crc, "set_crc")
		// required bytes content = 3;
		.def(&LuaFile::content, "content")
		.def<void (LuaFile::*)(const std::string&)>(&LuaFile::set_content, "set_content")
		.def(&LuaFile::ByteSize, "ByteSize")
		.def(&LuaFile::SetInitialized, "SetInitialized")
		;
	return true;
}
bool LuaFilesReply_fflua_reg(lua_State* state)
{
//for decltype
	LuaFilesReply* message(nullptr);
	message;
	ff::fflua_register_t<LuaFilesReply, ctor()>(state, "LuaFilesReply", "google::protobuf::Message")
		// repeated .Packet.LuaFile files = 1;
		.def(&LuaFilesReply::files_size, "files_size")
		.def<decltype(message->files(0)) (LuaFilesReply::*)(int) const>(&LuaFilesReply::files, "files")
		.def<decltype(message->mutable_files(0)) (LuaFilesReply::*)(int)>(&LuaFilesReply::mutable_files, "mutable_files")
		.def(&LuaFilesReply::add_files, "add_files")
		.def(&LuaFilesReply::ByteSize, "ByteSize")
		.def(&LuaFilesReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool OperativeConfig_fflua_reg(lua_State* state)
{
//for decltype
	OperativeConfig* message(nullptr);
	message;
	ff::fflua_register_t<OperativeConfig, ctor()>(state, "OperativeConfig", "google::protobuf::Message")
		// required int32 script_id = 1;
		.def(&OperativeConfig::script_id, "script_id")
		.def(&OperativeConfig::set_script_id, "set_script_id")
		// required string content = 3;
		.def(&OperativeConfig::content, "content")
		.def<void (OperativeConfig::*)(const std::string&)>(&OperativeConfig::set_content, "set_content")
		.def(&OperativeConfig::ByteSize, "ByteSize")
		.def(&OperativeConfig::SetInitialized, "SetInitialized")
		;
	return true;
}
bool OperativeConfigReply_fflua_reg(lua_State* state)
{
//for decltype
	OperativeConfigReply* message(nullptr);
	message;
	ff::fflua_register_t<OperativeConfigReply, ctor()>(state, "OperativeConfigReply", "google::protobuf::Message")
		// repeated .Packet.OperativeConfig configs = 1;
		.def(&OperativeConfigReply::configs_size, "configs_size")
		.def<decltype(message->configs(0)) (OperativeConfigReply::*)(int) const>(&OperativeConfigReply::configs, "configs")
		.def<decltype(message->mutable_configs(0)) (OperativeConfigReply::*)(int)>(&OperativeConfigReply::mutable_configs, "mutable_configs")
		.def(&OperativeConfigReply::add_configs, "add_configs")
		.def(&OperativeConfigReply::ByteSize, "ByteSize")
		.def(&OperativeConfigReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool Base_fflua_regist_all(lua_State* state)
{
	Position_fflua_reg(state);
	Notify_fflua_reg(state);
	ShmHead_fflua_reg(state);
	ServerInfo_fflua_reg(state);
	PayOrderInfo_fflua_reg(state);
	LuaFile_fflua_reg(state);
	LuaFilesReply_fflua_reg(state);
	OperativeConfig_fflua_reg(state);
	OperativeConfigReply_fflua_reg(state);
	return true;
}
}
