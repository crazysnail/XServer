// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BattleInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BattleInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Packet {

namespace {

const ::google::protobuf::Descriptor* BattleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BattleInfo_2eproto() {
  protobuf_AddDesc_BattleInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BattleInfo.proto");
  GOOGLE_CHECK(file != NULL);
  BattleInfo_descriptor_ = file->message_type(0);
  static const int BattleInfo_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, endurance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, physical_strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, agile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, intelligence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, spirit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, physical_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, physical_armor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, magic_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, magic_armor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, accurate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, dodge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, critical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, toughness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, move_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, attack_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, percent_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, percent_physical_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, percent_physical_armor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, percent_magic_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, percent_magic_armor_),
  };
  BattleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleInfo_descriptor_,
      BattleInfo::default_instance_,
      BattleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BattleInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleInfo_descriptor_, &BattleInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BattleInfo_2eproto() {
  delete BattleInfo::default_instance_;
  delete BattleInfo_reflection_;
}

void protobuf_AddDesc_BattleInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020BattleInfo.proto\022\006Packet\"\346\003\n\nBattleInf"
    "o\022\021\n\tendurance\030\001 \002(\005\022\031\n\021physical_strengt"
    "h\030\002 \002(\005\022\r\n\005agile\030\003 \002(\005\022\024\n\014intelligence\030\004"
    " \002(\005\022\016\n\006spirit\030\005 \002(\005\022\n\n\002hp\030\006 \002(\005\022\027\n\017phys"
    "ical_attack\030\007 \002(\005\022\026\n\016physical_armor\030\010 \002("
    "\005\022\024\n\014magic_attack\030\t \002(\005\022\023\n\013magic_armor\030\n"
    " \002(\005\022\020\n\010accurate\030\013 \002(\005\022\r\n\005dodge\030\014 \002(\005\022\020\n"
    "\010critical\030\r \002(\005\022\021\n\ttoughness\030\016 \002(\005\022\022\n\nmo"
    "ve_speed\030\017 \002(\005\022\024\n\014attack_speed\030\020 \002(\005\022\r\n\005"
    "skill\030\021 \002(\005\022\022\n\npercent_hp\030\022 \001(\005\022\037\n\027perce"
    "nt_physical_attack\030\023 \001(\005\022\036\n\026percent_phys"
    "ical_armor\030\024 \001(\005\022\034\n\024percent_magic_attack"
    "\030\025 \001(\005\022\033\n\023percent_magic_armor\030\026 \001(\005", 515);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BattleInfo.proto", &protobuf_RegisterTypes);
  BattleInfo::default_instance_ = new BattleInfo();
  BattleInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BattleInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BattleInfo_2eproto {
  StaticDescriptorInitializer_BattleInfo_2eproto() {
    protobuf_AddDesc_BattleInfo_2eproto();
  }
} static_descriptor_initializer_BattleInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BattleInfo::kEnduranceFieldNumber;
const int BattleInfo::kPhysicalStrengthFieldNumber;
const int BattleInfo::kAgileFieldNumber;
const int BattleInfo::kIntelligenceFieldNumber;
const int BattleInfo::kSpiritFieldNumber;
const int BattleInfo::kHpFieldNumber;
const int BattleInfo::kPhysicalAttackFieldNumber;
const int BattleInfo::kPhysicalArmorFieldNumber;
const int BattleInfo::kMagicAttackFieldNumber;
const int BattleInfo::kMagicArmorFieldNumber;
const int BattleInfo::kAccurateFieldNumber;
const int BattleInfo::kDodgeFieldNumber;
const int BattleInfo::kCriticalFieldNumber;
const int BattleInfo::kToughnessFieldNumber;
const int BattleInfo::kMoveSpeedFieldNumber;
const int BattleInfo::kAttackSpeedFieldNumber;
const int BattleInfo::kSkillFieldNumber;
const int BattleInfo::kPercentHpFieldNumber;
const int BattleInfo::kPercentPhysicalAttackFieldNumber;
const int BattleInfo::kPercentPhysicalArmorFieldNumber;
const int BattleInfo::kPercentMagicAttackFieldNumber;
const int BattleInfo::kPercentMagicArmorFieldNumber;
#endif  // !_MSC_VER

BattleInfo::BattleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleInfo::InitAsDefaultInstance() {
}

BattleInfo::BattleInfo(const BattleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleInfo::SharedCtor() {
  _cached_size_ = 0;
  endurance_ = 0;
  physical_strength_ = 0;
  agile_ = 0;
  intelligence_ = 0;
  spirit_ = 0;
  hp_ = 0;
  physical_attack_ = 0;
  physical_armor_ = 0;
  magic_attack_ = 0;
  magic_armor_ = 0;
  accurate_ = 0;
  dodge_ = 0;
  critical_ = 0;
  toughness_ = 0;
  move_speed_ = 0;
  attack_speed_ = 0;
  skill_ = 0;
  percent_hp_ = 0;
  percent_physical_attack_ = 0;
  percent_physical_armor_ = 0;
  percent_magic_attack_ = 0;
  percent_magic_armor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleInfo::~BattleInfo() {
  SharedDtor();
}

void BattleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleInfo_descriptor_;
}

const BattleInfo& BattleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleInfo_2eproto();
  return *default_instance_;
}

BattleInfo* BattleInfo::default_instance_ = NULL;

BattleInfo* BattleInfo::New() const {
  return new BattleInfo;
}

void BattleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    endurance_ = 0;
    physical_strength_ = 0;
    agile_ = 0;
    intelligence_ = 0;
    spirit_ = 0;
    hp_ = 0;
    physical_attack_ = 0;
    physical_armor_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    magic_attack_ = 0;
    magic_armor_ = 0;
    accurate_ = 0;
    dodge_ = 0;
    critical_ = 0;
    toughness_ = 0;
    move_speed_ = 0;
    attack_speed_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    skill_ = 0;
    percent_hp_ = 0;
    percent_physical_attack_ = 0;
    percent_physical_armor_ = 0;
    percent_magic_attack_ = 0;
    percent_magic_armor_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool BattleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 endurance = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endurance_)));
          set_has_endurance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_physical_strength;
        break;
      }

      // required int32 physical_strength = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_physical_strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &physical_strength_)));
          set_has_physical_strength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_agile;
        break;
      }

      // required int32 agile = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agile:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agile_)));
          set_has_agile();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_intelligence;
        break;
      }

      // required int32 intelligence = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intelligence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intelligence_)));
          set_has_intelligence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_spirit;
        break;
      }

      // required int32 spirit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spirit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spirit_)));
          set_has_spirit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hp;
        break;
      }

      // required int32 hp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_physical_attack;
        break;
      }

      // required int32 physical_attack = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_physical_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &physical_attack_)));
          set_has_physical_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_physical_armor;
        break;
      }

      // required int32 physical_armor = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_physical_armor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &physical_armor_)));
          set_has_physical_armor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_magic_attack;
        break;
      }

      // required int32 magic_attack = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magic_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magic_attack_)));
          set_has_magic_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_magic_armor;
        break;
      }

      // required int32 magic_armor = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magic_armor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magic_armor_)));
          set_has_magic_armor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_accurate;
        break;
      }

      // required int32 accurate = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accurate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accurate_)));
          set_has_accurate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_dodge;
        break;
      }

      // required int32 dodge = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dodge_)));
          set_has_dodge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_critical;
        break;
      }

      // required int32 critical = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &critical_)));
          set_has_critical();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_toughness;
        break;
      }

      // required int32 toughness = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toughness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toughness_)));
          set_has_toughness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_move_speed;
        break;
      }

      // required int32 move_speed = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_move_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move_speed_)));
          set_has_move_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_attack_speed;
        break;
      }

      // required int32 attack_speed = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_speed_)));
          set_has_attack_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_skill;
        break;
      }

      // required int32 skill = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_)));
          set_has_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_percent_hp;
        break;
      }

      // optional int32 percent_hp = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_percent_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percent_hp_)));
          set_has_percent_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_percent_physical_attack;
        break;
      }

      // optional int32 percent_physical_attack = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_percent_physical_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percent_physical_attack_)));
          set_has_percent_physical_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_percent_physical_armor;
        break;
      }

      // optional int32 percent_physical_armor = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_percent_physical_armor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percent_physical_armor_)));
          set_has_percent_physical_armor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_percent_magic_attack;
        break;
      }

      // optional int32 percent_magic_attack = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_percent_magic_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percent_magic_attack_)));
          set_has_percent_magic_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_percent_magic_armor;
        break;
      }

      // optional int32 percent_magic_armor = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_percent_magic_armor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percent_magic_armor_)));
          set_has_percent_magic_armor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void BattleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 endurance = 1;
  if (has_endurance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->endurance(), output);
  }

  // required int32 physical_strength = 2;
  if (has_physical_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->physical_strength(), output);
  }

  // required int32 agile = 3;
  if (has_agile()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->agile(), output);
  }

  // required int32 intelligence = 4;
  if (has_intelligence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->intelligence(), output);
  }

  // required int32 spirit = 5;
  if (has_spirit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->spirit(), output);
  }

  // required int32 hp = 6;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hp(), output);
  }

  // required int32 physical_attack = 7;
  if (has_physical_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->physical_attack(), output);
  }

  // required int32 physical_armor = 8;
  if (has_physical_armor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->physical_armor(), output);
  }

  // required int32 magic_attack = 9;
  if (has_magic_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->magic_attack(), output);
  }

  // required int32 magic_armor = 10;
  if (has_magic_armor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->magic_armor(), output);
  }

  // required int32 accurate = 11;
  if (has_accurate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->accurate(), output);
  }

  // required int32 dodge = 12;
  if (has_dodge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->dodge(), output);
  }

  // required int32 critical = 13;
  if (has_critical()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->critical(), output);
  }

  // required int32 toughness = 14;
  if (has_toughness()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->toughness(), output);
  }

  // required int32 move_speed = 15;
  if (has_move_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->move_speed(), output);
  }

  // required int32 attack_speed = 16;
  if (has_attack_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->attack_speed(), output);
  }

  // required int32 skill = 17;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->skill(), output);
  }

  // optional int32 percent_hp = 18;
  if (has_percent_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->percent_hp(), output);
  }

  // optional int32 percent_physical_attack = 19;
  if (has_percent_physical_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->percent_physical_attack(), output);
  }

  // optional int32 percent_physical_armor = 20;
  if (has_percent_physical_armor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->percent_physical_armor(), output);
  }

  // optional int32 percent_magic_attack = 21;
  if (has_percent_magic_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->percent_magic_attack(), output);
  }

  // optional int32 percent_magic_armor = 22;
  if (has_percent_magic_armor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->percent_magic_armor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 endurance = 1;
  if (has_endurance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->endurance(), target);
  }

  // required int32 physical_strength = 2;
  if (has_physical_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->physical_strength(), target);
  }

  // required int32 agile = 3;
  if (has_agile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->agile(), target);
  }

  // required int32 intelligence = 4;
  if (has_intelligence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->intelligence(), target);
  }

  // required int32 spirit = 5;
  if (has_spirit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->spirit(), target);
  }

  // required int32 hp = 6;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hp(), target);
  }

  // required int32 physical_attack = 7;
  if (has_physical_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->physical_attack(), target);
  }

  // required int32 physical_armor = 8;
  if (has_physical_armor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->physical_armor(), target);
  }

  // required int32 magic_attack = 9;
  if (has_magic_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->magic_attack(), target);
  }

  // required int32 magic_armor = 10;
  if (has_magic_armor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->magic_armor(), target);
  }

  // required int32 accurate = 11;
  if (has_accurate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->accurate(), target);
  }

  // required int32 dodge = 12;
  if (has_dodge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->dodge(), target);
  }

  // required int32 critical = 13;
  if (has_critical()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->critical(), target);
  }

  // required int32 toughness = 14;
  if (has_toughness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->toughness(), target);
  }

  // required int32 move_speed = 15;
  if (has_move_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->move_speed(), target);
  }

  // required int32 attack_speed = 16;
  if (has_attack_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->attack_speed(), target);
  }

  // required int32 skill = 17;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->skill(), target);
  }

  // optional int32 percent_hp = 18;
  if (has_percent_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->percent_hp(), target);
  }

  // optional int32 percent_physical_attack = 19;
  if (has_percent_physical_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->percent_physical_attack(), target);
  }

  // optional int32 percent_physical_armor = 20;
  if (has_percent_physical_armor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->percent_physical_armor(), target);
  }

  // optional int32 percent_magic_attack = 21;
  if (has_percent_magic_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->percent_magic_attack(), target);
  }

  // optional int32 percent_magic_armor = 22;
  if (has_percent_magic_armor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->percent_magic_armor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 endurance = 1;
    if (has_endurance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endurance());
    }

    // required int32 physical_strength = 2;
    if (has_physical_strength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->physical_strength());
    }

    // required int32 agile = 3;
    if (has_agile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agile());
    }

    // required int32 intelligence = 4;
    if (has_intelligence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intelligence());
    }

    // required int32 spirit = 5;
    if (has_spirit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spirit());
    }

    // required int32 hp = 6;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // required int32 physical_attack = 7;
    if (has_physical_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->physical_attack());
    }

    // required int32 physical_armor = 8;
    if (has_physical_armor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->physical_armor());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 magic_attack = 9;
    if (has_magic_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magic_attack());
    }

    // required int32 magic_armor = 10;
    if (has_magic_armor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magic_armor());
    }

    // required int32 accurate = 11;
    if (has_accurate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accurate());
    }

    // required int32 dodge = 12;
    if (has_dodge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dodge());
    }

    // required int32 critical = 13;
    if (has_critical()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->critical());
    }

    // required int32 toughness = 14;
    if (has_toughness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->toughness());
    }

    // required int32 move_speed = 15;
    if (has_move_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->move_speed());
    }

    // required int32 attack_speed = 16;
    if (has_attack_speed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_speed());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 skill = 17;
    if (has_skill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill());
    }

    // optional int32 percent_hp = 18;
    if (has_percent_hp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percent_hp());
    }

    // optional int32 percent_physical_attack = 19;
    if (has_percent_physical_attack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percent_physical_attack());
    }

    // optional int32 percent_physical_armor = 20;
    if (has_percent_physical_armor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percent_physical_armor());
    }

    // optional int32 percent_magic_attack = 21;
    if (has_percent_magic_attack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percent_magic_attack());
    }

    // optional int32 percent_magic_armor = 22;
    if (has_percent_magic_armor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percent_magic_armor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void BattleInfo::MergeFrom(const BattleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_endurance()) {
      set_endurance(from.endurance());
    }
    if (from.has_physical_strength()) {
      set_physical_strength(from.physical_strength());
    }
    if (from.has_agile()) {
      set_agile(from.agile());
    }
    if (from.has_intelligence()) {
      set_intelligence(from.intelligence());
    }
    if (from.has_spirit()) {
      set_spirit(from.spirit());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_physical_attack()) {
      set_physical_attack(from.physical_attack());
    }
    if (from.has_physical_armor()) {
      set_physical_armor(from.physical_armor());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_magic_attack()) {
      set_magic_attack(from.magic_attack());
    }
    if (from.has_magic_armor()) {
      set_magic_armor(from.magic_armor());
    }
    if (from.has_accurate()) {
      set_accurate(from.accurate());
    }
    if (from.has_dodge()) {
      set_dodge(from.dodge());
    }
    if (from.has_critical()) {
      set_critical(from.critical());
    }
    if (from.has_toughness()) {
      set_toughness(from.toughness());
    }
    if (from.has_move_speed()) {
      set_move_speed(from.move_speed());
    }
    if (from.has_attack_speed()) {
      set_attack_speed(from.attack_speed());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_skill()) {
      set_skill(from.skill());
    }
    if (from.has_percent_hp()) {
      set_percent_hp(from.percent_hp());
    }
    if (from.has_percent_physical_attack()) {
      set_percent_physical_attack(from.percent_physical_attack());
    }
    if (from.has_percent_physical_armor()) {
      set_percent_physical_armor(from.percent_physical_armor());
    }
    if (from.has_percent_magic_attack()) {
      set_percent_magic_attack(from.percent_magic_attack());
    }
    if (from.has_percent_magic_armor()) {
      set_percent_magic_armor(from.percent_magic_armor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void BattleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void BattleInfo::CopyFrom(const BattleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool BattleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0001ffff) != 0x0001ffff) return false;

  return true;
}

void BattleInfo::SetInitialized() {
  _has_bits_[0] |= 0x0001ffff;

  return;
}

void BattleInfo::Swap(BattleInfo* other) {
  if (other != this) {
    std::swap(endurance_, other->endurance_);
    std::swap(physical_strength_, other->physical_strength_);
    std::swap(agile_, other->agile_);
    std::swap(intelligence_, other->intelligence_);
    std::swap(spirit_, other->spirit_);
    std::swap(hp_, other->hp_);
    std::swap(physical_attack_, other->physical_attack_);
    std::swap(physical_armor_, other->physical_armor_);
    std::swap(magic_attack_, other->magic_attack_);
    std::swap(magic_armor_, other->magic_armor_);
    std::swap(accurate_, other->accurate_);
    std::swap(dodge_, other->dodge_);
    std::swap(critical_, other->critical_);
    std::swap(toughness_, other->toughness_);
    std::swap(move_speed_, other->move_speed_);
    std::swap(attack_speed_, other->attack_speed_);
    std::swap(skill_, other->skill_);
    std::swap(percent_hp_, other->percent_hp_);
    std::swap(percent_physical_attack_, other->percent_physical_attack_);
    std::swap(percent_physical_armor_, other->percent_physical_armor_);
    std::swap(percent_magic_attack_, other->percent_magic_attack_);
    std::swap(percent_magic_armor_, other->percent_magic_armor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata BattleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleInfo_descriptor_;
  metadata.reflection = BattleInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

// @@protoc_insertion_point(global_scope)
