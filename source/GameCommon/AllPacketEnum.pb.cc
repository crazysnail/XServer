// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AllPacketEnum.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AllPacketEnum.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Packet {

namespace {

const ::google::protobuf::EnumDescriptor* PlayerTeamStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ActorType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BattleActorType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LastHpType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ActorStar_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ActorColor_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ActorBattleType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ActorFigthFormation_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DamageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DamageExpression_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SkillPositionLogicType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BattleGroundType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BattleObjectType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ActorStateType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ActorControlType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Property_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ChatChannel_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CellLogicType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NumberCellIndex_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BitFlagCellIndex_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MissionCellIndex_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GuideCellIndex_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ActivityDataIndex_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AcRewardIndex_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TargetDataIndex_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ActionDataIndex_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ResetTimeIndex_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Cell64LogicType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LootCellIndex_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GuildUserCellIndex_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NumberCell64Index_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EquipBook64Index_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ZoneCellIndex_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FriendMessageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ContainerType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AccountType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MissionState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MissionOption_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MissionDB_Param_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Camp_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ArrangeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Race_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Professions_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Talent_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Gender_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* HeroPosition_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TokenType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GuildPosition_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GuildBuildType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GuildBattle_Stage_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PlayerSceneStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RaidState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ResultOption_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ResultCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NpcSourceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NpcOption_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BattleFieldState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FlagOption_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RankGroup_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SimpleImpactEffectType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BattleGroundStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CaptureStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StrongHoldStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SkillBuffStubType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_AllPacketEnum_2eproto() {
  protobuf_AddDesc_AllPacketEnum_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AllPacketEnum.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerTeamStatus_descriptor_ = file->enum_type(0);
  ActorType_descriptor_ = file->enum_type(1);
  BattleActorType_descriptor_ = file->enum_type(2);
  LastHpType_descriptor_ = file->enum_type(3);
  ActorStar_descriptor_ = file->enum_type(4);
  ActorColor_descriptor_ = file->enum_type(5);
  ActorBattleType_descriptor_ = file->enum_type(6);
  ActorFigthFormation_descriptor_ = file->enum_type(7);
  DamageType_descriptor_ = file->enum_type(8);
  DamageExpression_descriptor_ = file->enum_type(9);
  SkillPositionLogicType_descriptor_ = file->enum_type(10);
  BattleGroundType_descriptor_ = file->enum_type(11);
  BattleObjectType_descriptor_ = file->enum_type(12);
  ActorStateType_descriptor_ = file->enum_type(13);
  ActorControlType_descriptor_ = file->enum_type(14);
  Property_descriptor_ = file->enum_type(15);
  ChatChannel_descriptor_ = file->enum_type(16);
  CellLogicType_descriptor_ = file->enum_type(17);
  NumberCellIndex_descriptor_ = file->enum_type(18);
  BitFlagCellIndex_descriptor_ = file->enum_type(19);
  MissionCellIndex_descriptor_ = file->enum_type(20);
  GuideCellIndex_descriptor_ = file->enum_type(21);
  ActivityDataIndex_descriptor_ = file->enum_type(22);
  AcRewardIndex_descriptor_ = file->enum_type(23);
  TargetDataIndex_descriptor_ = file->enum_type(24);
  ActionDataIndex_descriptor_ = file->enum_type(25);
  ResetTimeIndex_descriptor_ = file->enum_type(26);
  Cell64LogicType_descriptor_ = file->enum_type(27);
  LootCellIndex_descriptor_ = file->enum_type(28);
  GuildUserCellIndex_descriptor_ = file->enum_type(29);
  NumberCell64Index_descriptor_ = file->enum_type(30);
  EquipBook64Index_descriptor_ = file->enum_type(31);
  ZoneCellIndex_descriptor_ = file->enum_type(32);
  FriendMessageType_descriptor_ = file->enum_type(33);
  ContainerType_descriptor_ = file->enum_type(34);
  AccountType_descriptor_ = file->enum_type(35);
  MissionState_descriptor_ = file->enum_type(36);
  MissionOption_descriptor_ = file->enum_type(37);
  MissionDB_Param_descriptor_ = file->enum_type(38);
  Camp_descriptor_ = file->enum_type(39);
  ArrangeType_descriptor_ = file->enum_type(40);
  Race_descriptor_ = file->enum_type(41);
  Professions_descriptor_ = file->enum_type(42);
  Talent_descriptor_ = file->enum_type(43);
  Gender_descriptor_ = file->enum_type(44);
  HeroPosition_descriptor_ = file->enum_type(45);
  TokenType_descriptor_ = file->enum_type(46);
  GuildPosition_descriptor_ = file->enum_type(47);
  GuildBuildType_descriptor_ = file->enum_type(48);
  GuildBattle_Stage_descriptor_ = file->enum_type(49);
  PlayerSceneStatus_descriptor_ = file->enum_type(50);
  RaidState_descriptor_ = file->enum_type(51);
  ResultOption_descriptor_ = file->enum_type(52);
  ResultCode_descriptor_ = file->enum_type(53);
  NpcSourceType_descriptor_ = file->enum_type(54);
  NpcOption_descriptor_ = file->enum_type(55);
  BattleFieldState_descriptor_ = file->enum_type(56);
  FlagOption_descriptor_ = file->enum_type(57);
  RankGroup_descriptor_ = file->enum_type(58);
  SimpleImpactEffectType_descriptor_ = file->enum_type(59);
  BattleGroundStatus_descriptor_ = file->enum_type(60);
  CaptureStatus_descriptor_ = file->enum_type(61);
  StrongHoldStatus_descriptor_ = file->enum_type(62);
  SkillBuffStubType_descriptor_ = file->enum_type(63);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AllPacketEnum_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_AllPacketEnum_2eproto() {
}

void protobuf_AddDesc_AllPacketEnum_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023AllPacketEnum.proto\022\006Packet*B\n\020PlayerT"
    "eamStatus\022\017\n\013Team_Follow\020\000\022\017\n\013Team_AFKIN"
    "G\020\001\022\014\n\010Team_AFK\020\002*_\n\tActorType\022\010\n\004Main\020\001"
    "\022\010\n\004Hero\020\002\022\013\n\007Monster\020\003\022\010\n\004Boss\020\004\022\021\n\rSUM"
    "MON_NORMAL\020\005\022\024\n\020SUMMON_NO_SELECT\020\006*\\\n\017Ba"
    "ttleActorType\022\014\n\010BAT_MAIN\020\001\022\014\n\010BAT_HERO\020"
    "\002\022\017\n\013BAT_MONSTER\020\003\022\014\n\010BAT_BOSS\020\004\022\016\n\nBAT_"
    "SUMMON\020\005*X\n\nLastHpType\022\016\n\nHellLastHp\020\000\022\014"
    "\n\010BFLastHp\020\001\022\014\n\010GBLastHp\020\002\022\017\n\013GBOSSLastH"
    "p\020\003\022\r\n\tLastHpMax\020\005*<\n\tActorStar\022\007\n\003ONE\020\001"
    "\022\007\n\003TWO\020\002\022\t\n\005THREE\020\003\022\010\n\004FOUR\020\004\022\010\n\004FIVE\020\005"
    "*c\n\nActorColor\022\t\n\005WHILE\020\001\022\013\n\007GREEN_0\020\002\022\013"
    "\n\007GREEN_1\020\003\022\n\n\006BLUE_0\020\004\022\n\n\006BLUE_1\020\005\022\n\n\006B"
    "LUE_2\020\006\022\014\n\010PURPLE_0\020\007*2\n\017ActorBattleType"
    "\022\020\n\014USE_PHYSICAL\020\001\022\r\n\tUSE_MAGIC\020\002*\357\004\n\023Ac"
    "torFigthFormation\022\025\n\021INVALID_FORMATION\020\000"
    "\022\023\n\017AFF_NORMAL_HOOK\020\001\022\022\n\016AFF_PVE_NORMAL\020"
    "\001\022\022\n\016AFF_PVP_ONLINE\020\002\022\025\n\021AFF_STAGE_CAPTU"
    "RE\020\003\022\023\n\017AFF_STAGE_GUARD\020\004\022\032\n\026AFF_PVP_LOO"
    "T_FORMATION\020\005\022\021\n\rAFF_PVP_ARENA\020\006\022\027\n\023AFF_"
    "PVP_TRIAL_FIELD\020\007\022\021\n\rAFF_PVP_GUARD\020\010\022\030\n\024"
    "AFF_PVP_BATTLE_FIELD\020\t\022\031\n\025AFF_PVP_WORLDB"
    "OSS_Sun\020\n\022\031\n\025AFF_PVP_WORLDBOSS_Mon\020\013\022\032\n\026"
    "AFF_PVP_WORLDBOSS_Tues\020\014\022\031\n\025AFF_PVP_WORL"
    "DBOSS_Wed\020\r\022\032\n\026AFF_PVP_WORLDBOSS_Thur\020\016\022"
    "\031\n\025AFF_PVP_WORLDBOSS_Fri\020\017\022\031\n\025AFF_PVP_WO"
    "RLDBOSS_Sat\020\020\022\026\n\022AFF_PVE_GUILD_BOSS\020\021\022\026\n"
    "\022AFF_PVE_GUILD_COPY\020\022\022\032\n\026AFF_PVE_REWARD_"
    "MISSION\020\023\022\037\n\033AFF_PVE_ARCHAEOLOGY_MISSION"
    "\020\024\022\031\n\025AFF_PVE_GOBLIN_CARBON\020\025\022\030\n\024AFF_PVE"
    "_BLOOD_CARBON\020\026\032\002\020\001*Z\n\nDamageType\022\014\n\010PHY"
    "SICAL\020\001\022\t\n\005FLASH\020\002\022\007\n\003ICE\020\003\022\010\n\004FIRE\020\004\022\n\n"
    "\006NATURE\020\005\022\n\n\006SHADOW\020\006\022\010\n\004HOLY\020\007*y\n\020Damag"
    "eExpression\022\030\n\024ActorOnDamage_NORMAL\020\001\022\032\n"
    "\026ActorOnDamage_CRITICAL\020\002\022\027\n\023ActorOnDama"
    "ge_DODGE\020\003\022\026\n\022ActorOnDamage_CURE\020\004*c\n\026Sk"
    "illPositionLogicType\022\020\n\014CHARGE_LOGIC\020\001\022\022"
    "\n\016TELEPORT_LOGIC\020\002\022\021\n\rCAPTURE_LOGIC\020\003\022\020\n"
    "\014HITOFF_LOGIC\020\004*\336\002\n\020BattleGroundType\022\r\n\t"
    "NO_BATTLE\020\000\022\016\n\nPVE_SINGLE\020\001\022\014\n\010PVE_HOOK\020"
    "\002\022\017\n\013PVP_OFFLINE\020\003\022\016\n\nPVP_ONLINE\020\004\022\031\n\025PV"
    "P_PVE_CAPTURE_STAGE\020\005\022\022\n\016PVE_STAGE_BOSS\020"
    "\006\022\014\n\010PVP_LOOT\020\t\022\r\n\tPVP_ARENA\020\n\022\023\n\017PVP_TR"
    "IAL_FIELD\020\013\022\024\n\020PVP_BATTEL_FIELD\020\014\022\024\n\020PVP"
    "_GUILD_BATTLE\020\r\022\022\n\016PVE_GUILD_BOSS\020\016\022\030\n\024P"
    "VP_WORLDBOSS_BATTLE\020\017\022\022\n\016PVE_GUILD_COPY\020"
    "\020\022\033\n\027PVP_GUILD_CAPTURE_POINT\020\021\022\020\n\014PVE_SI"
    "MULATE\020\022*l\n\020BattleObjectType\022\020\n\014INVALID_"
    "TYPE\020\000\022\010\n\004TRAP\020\001\022\016\n\nMAIN_ACTOR\020\002\022\016\n\nHERO"
    "_ACTOR\020\003\022\022\n\016NORMAL_MONSTER\020\004\022\010\n\004BOSS\020\005*g"
    "\n\016ActorStateType\022\016\n\nACTOR_IDEL\020\001\022\024\n\020ACTO"
    "R_SELECT_TAR\020\002\022\016\n\nACTOR_MOVE\020\003\022\017\n\013ACTOR_"
    "FIGHT\020\004\022\016\n\nACTOR_DEAD\020\005*&\n\020ActorControlT"
    "ype\022\006\n\002AI\020\000\022\n\n\006MANUAL\020\001*\273\003\n\010Property\022\024\n\020"
    "INVALID_PROPERTY\020\000\022\r\n\tENDURANCE\020\001\022\024\n\020PHY"
    "SICAL_STRENTH\020\002\022\t\n\005AGILE\020\003\022\020\n\014INTELLIGEN"
    "CE\020\004\022\n\n\006SPIRIT\020\005\022\006\n\002HP\020\006\022\023\n\017PHYSICAL_ATT"
    "ACK\020\007\022\022\n\016PHYSICAL_ARMOR\020\010\022\020\n\014MAGIC_ATTAC"
    "K\020\t\022\017\n\013MAGIC_ARMOR\020\n\022\014\n\010ACCURATE\020\013\022\t\n\005DO"
    "DGE\020\014\022\014\n\010CRITICAL\020\r\022\r\n\tTOUGHNESS\020\016\022\016\n\nMO"
    "VE_SPEED\020\017\022\020\n\014ATTACK_SPEED\020\020\022\t\n\005SKILL\020\021\022"
    "\016\n\nPERCENT_HP\020\022\022\033\n\027PERCENT_PHYSICAL_ATTA"
    "CK\020\023\022\032\n\026PERCENT_PHYSICAL_ARMOR\020\024\022\030\n\024PERC"
    "ENT_MAGIC_ATTACK\020\025\022\027\n\023PERCENT_MAGIC_ARMO"
    "R\020\026\022\030\n\024PERCENT_CURE_ABILITY\020\027*s\n\013ChatCha"
    "nnel\022\n\n\006SYSTEM\020\000\022\t\n\005WORLD\020\001\022\t\n\005SCENE\020\002\022\t"
    "\n\005GUILD\020\003\022\010\n\004TEAM\020\004\022\014\n\010TEAMINFO\020\005\022\n\n\006FAR"
    "MSG\020\006\022\n\n\006RUNMSG\020\007\022\007\n\003MAX\020\010*\343\001\n\rCellLogic"
    "Type\022\034\n\017InvalidCellType\020\377\377\377\377\377\377\377\377\377\001\022\016\n\nNu"
    "mberCell\020\000\022\017\n\013BitFlagCell\020\001\022\017\n\013MissionCe"
    "ll\020\002\022\r\n\tGuideCell\020\003\022\020\n\014AcRewardCell\020\004\022\020\n"
    "\014ActivityCell\020\005\022\r\n\tMountCell\020\006\022\016\n\nTarget"
    "Data\020\007\022\016\n\nActionData\020\010\022\r\n\tResetTime\020\t\022\021\n"
    "\rGuildUserCell\020\n*\222\004\n\017NumberCellIndex\022$\n\027"
    "NumberCellIndex_Invalid\020\377\377\377\377\377\377\377\377\377\001\022\026\n\022Cr"
    "ystalToCoinCount\020\000\022\024\n\020TargetRewardFlag\020\001"
    "\022\022\n\016DrawLuckyValue\020\002\022\026\n\022ActivityRewardFl"
    "ag\020\003\022\023\n\017DrawLuckyValue2\020\004\022\023\n\017DrawLuckyVa"
    "lue3\020\005\022\020\n\014InspireTimes\020\007\022\023\n\017HellReliveTi"
    "mes\020\010\022\023\n\017GuildCommonData\020\t\022\033\n\027ArenaChall"
    "engeTimeToday\020\n\022\026\n\022ArenaBuyTimesToday\020\013\022"
    "\024\n\020HellDayWaveCount\020\014\022\017\n\013ReNameCount\020\r\022\031"
    "\n\025GuildFreezeContribute\020\016\022\026\n\022GuildCurCon"
    "tribute\020\017\022\026\n\022GuildAllContribute\020\020\022\036\n\032Cry"
    "stalExtendEquipBagTimes\020\021\022\032\n\026CrystalExte"
    "ndBankTimes\020\022\022\035\n\031CrystalExtendItemBagTim"
    "es\020\023\022\027\n\023NumberCellIndex_Max\020\024*\255\003\n\020BitFla"
    "gCellIndex\022%\n\030BitFlagCellIndex_Invalid\020\377"
    "\377\377\377\377\377\377\377\377\001\022\030\n\024FirstCrystalDrawFlag\020\000\022\025\n\021F"
    "irstCoinDrawFlag\020\001\022\032\n\026WorldBossAutoFight"
    "Flag\020\002\022\024\n\020FirstDayKillFlag\020\003\022\026\n\022SecondCo"
    "inDrawFlag\020\004\022\030\n\024FirstBattleFieldFlag\020\005\022\026"
    "\n\022FirstWorldBossFlag\020\006\022\025\n\021FirstTriFieldF"
    "lag\020\007\022\021\n\rMonthCardFlag\020\010\022\020\n\014LifeCardFlag"
    "\020\t\022\016\n\nInvestFlag\020\n\022\023\n\017DayTriFieldFlag\020\013\022"
    "\027\n\023DayTriGuildBossFlag\020\014\022\025\n\021InnerHookIni"
    "tFlag\020\r\022\032\n\026MissionAutoBuyItemFlag\020\016\022\030\n\024B"
    "itFlagCellIndex_Max\020 *=\n\020MissionCellInde"
    "x\022\024\n\020MissionCellStart\020\000\022\023\n\016MissionCellEn"
    "d\020\200\001*8\n\016GuideCellIndex\022\023\n\017GuideGroupStar"
    "t\020\000\022\021\n\rGuideGroupEnd\020@*@\n\021ActivityDataIn"
    "dex\022\025\n\021ActivityDataStart\020\000\022\024\n\017ActivityDa"
    "taEnd\020\200\001*8\n\rAcRewardIndex\022\023\n\017RewardDataS"
    "tart\020\000\022\022\n\rRewardDataEnd\020\200\002*:\n\017TargetData"
    "Index\022\023\n\017TargetDataStart\020\000\022\022\n\rTargetData"
    "End\020\200\001*:\n\017ActionDataIndex\022\023\n\017ActionDataS"
    "tart\020\000\022\022\n\rActionDataEnd\020\200\001*6\n\016ResetTimeI"
    "ndex\022\022\n\016ResetTimeStart\020\000\022\020\n\014ResetTimeEnd"
    "\020@*f\n\017Cell64LogicType\022\036\n\021InvalidCell64Ty"
    "pe\020\377\377\377\377\377\377\377\377\377\001\022\020\n\014NumberCell64\020\000\022\022\n\016LootC"
    "ell64Type\020\001\022\r\n\tEquipBook\020\002*|\n\rLootCellIn"
    "dex\022\031\n\025LAST_LOOT_PLAYER_GUID\020\000\022\017\n\013UNBIND"
    "_COIN\020\001\022\024\n\020LOOT_COUNT_TODAY\020\002\022\025\n\021LAST_BE"
    "_LOOT_TIME\020\003\022\022\n\016LAST_LOOT_TIME\020\004*5\n\022Guil"
    "dUserCellIndex\022\014\n\010DONATION\020\000\022\021\n\rGUILDUSE"
    "R_MAX\020\001*\243\001\n\021NumberCell64Index\022\014\n\010TestGui"
    "d\020\000\022\017\n\013LastGuildId\020\001\022\r\n\tActorBook\020\002\022\021\n\rG"
    "uideFlagData\020\003\022\022\n\016GuideFirstFlag\020\004\022\022\n\016Sc"
    "eneFirstFlag\020\005\022\022\n\016MissRewardFlag\020\006\022\021\n\rIn"
    "nerHookFlag\020\007*8\n\020EquipBook64Index\022\022\n\016Equ"
    "ipBookStart\020\000\022\020\n\014EquipBookEnd\020@*5\n\rZoneC"
    "ellIndex\022\021\n\rAddPopularity\020\000\022\021\n\rOffNewMes"
    "sage\020\001*=\n\021FriendMessageType\022\013\n\007SystemM\020\001"
    "\022\016\n\nFriendTips\020\003\022\013\n\007FriendM\020\000*\375\001\n\rContai"
    "nerType\022\032\n\rLayer_Invalid\020\377\377\377\377\377\377\377\377\377\001\022\022\n\016L"
    "ayer_EquipBag\020\000\022\021\n\rLayer_ItemBag\020\001\022\024\n\020La"
    "yer_MissionBag\020\002\022\017\n\013Layer_Equip\020\003\022\016\n\nLay"
    "er_Bank\020\004\022\031\n\025Layer_EquipAndItemBag\020\007\022\020\n\014"
    "Layer_AllBag\020\010\022\022\n\016Layer_TokenBag\020\t\022\033\n\027La"
    "yer_MissionAndItemBag\020\n\022\024\n\020Layer_Arrange"
    "Bag\020\013*,\n\013AccountType\022\010\n\004FAST\020\000\022\010\n\004BIND\020\001"
    "\022\t\n\005THIRD\020\002*k\n\014MissionState\022\017\n\013MissionTo"
    "do\020\000\022\021\n\rMissionFinish\020\001\022\021\n\rMissionFailed"
    "\020\002\022\023\n\017MissionComplete\020\003\022\017\n\013MissionDrop\020\004"
    "*O\n\rMissionOption\022\n\n\006Accept\020\000\022\n\n\006Finish\020"
    "\001\022\010\n\004Drop\020\002\022\t\n\005Fight\020\003\022\007\n\003Add\020\004\022\010\n\004Raid\020"
    "\005*\203\002\n\017MissionDB_Param\022\r\n\tNpc_Index\020\000\022\021\n\r"
    "Monster_Group\020\001\022\n\n\006Pos_Id\020\002\022\016\n\nNpc_Serie"
    "s\020\003\022\025\n\021Commit_Npc_Series\020\004\022\020\n\014Finish_Val"
    "ue\020\005\022\023\n\017CarbonRuntimeId\020\006\022\026\n\022MultiFinish"
    "_Value1\020\007\022\026\n\022MultiFinish_Value2\020\010\022\026\n\022Mul"
    "tiFinish_Value3\020\t\022\026\n\022MultiFinish_Value4\020"
    "\n\022\024\n\020StoryStage_Value\020\013*\037\n\004Camp\022\014\n\010Allia"
    "nce\020\000\022\t\n\005Horde\020\001*B\n\013ArrangeType\022\027\n\nAT_In"
    "valid\020\377\377\377\377\377\377\377\377\377\001\022\r\n\tAT_Leader\020\000\022\013\n\007AT_Ro"
    "ll\020\001*d\n\004Race\022\014\n\010Non_Race\020\000\022\n\n\006Tauren\020\001\022\n"
    "\n\006Undead\020\002\022\007\n\003Orc\020\003\022\t\n\005Troll\020\004\022\t\n\005Human\020"
    "\005\022\014\n\010NigthElf\020\006\022\t\n\005Gnome\020\007*\206\001\n\013Professio"
    "ns\022\014\n\010Non_Prof\020\000\022\013\n\007Warrior\020\001\022\n\n\006Shaman\020"
    "\002\022\n\n\006Hunter\020\003\022\010\n\004Mage\020\004\022\t\n\005Druid\020\005\022\013\n\007Wa"
    "rlock\020\006\022\n\n\006Priest\020\007\022\013\n\007Paladin\020\010\022\t\n\005Rogu"
    "e\020\t*\221\004\n\006Talent\022\016\n\nNon_Talent\020\000\022\022\n\016Warrio"
    "r_Weapon\020\001\022\020\n\014Warrior_Rage\020\002\022\021\n\rWarrior_"
    "Armor\020\003\022\022\n\016Shaman_Element\020\004\022\022\n\016Shaman_St"
    "renth\020\005\022\017\n\013Shaman_Cure\020\006\022\020\n\014Hunter_Beast"
    "\020\007\022\020\n\014Hunter_Shoot\020\010\022\023\n\017Hunter_Suivival\020"
    "\t\022\021\n\rMage_Profound\020\n\022\014\n\010Mage_Ice\020\013\022\r\n\tMa"
    "ge_Fire\020\014\022\r\n\tDruid_Cat\020\r\022\016\n\nDruid_Bear\020\016"
    "\022\016\n\nDruid_Cure\020\017\022\016\n\nDruid_Bird\020\020\022\020\n\014Warl"
    "ock_Pain\020\021\022\021\n\rWarlock_Demon\020\022\022\020\n\014Warlock"
    "_Ruin\020\023\022\022\n\016Priest_Precept\020\024\022\017\n\013Priest_Ho"
    "ly\020\025\022\017\n\013Priest_Dark\020\026\022\020\n\014Paladin_Cure\020\027\022"
    "\021\n\rPaladin_Armor\020\030\022\023\n\017Paladin_Precept\020\031\022"
    "\022\n\016Rogue_Assassin\020\032\022\021\n\rRogue_Fighter\020\033\022\017"
    "\n\013Rogue_Agile\020\034*+\n\006Gender\022\013\n\007UNKNOWN\020\001\022\010"
    "\n\004MALE\020\002\022\n\n\006FEMAIL\020\003*Z\n\014HeroPosition\022\022\n\016"
    "PhysicalAttack\020\000\022\017\n\013MagicAttack\020\001\022\010\n\004Tan"
    "k\020\002\022\t\n\005Nanny\020\003\022\020\n\014Max_Position\020\004*\242\003\n\tTok"
    "enType\022\021\n\rToken_Invalid\020\000\022\021\n\nToken_Gold\020"
    "\361\307\241\016\022\024\n\rToken_Crystal\020\362\307\241\016\022\022\n\013Token_Hono"
    "r\020\363\307\241\016\022\023\n\014Token_Reward\020\364\307\241\016\022\020\n\tToken_Day"
    "\020\365\307\241\016\022\025\n\016Token_BankGold\020\366\307\241\016\022\025\n\016Token_Ex"
    "pPoint\020\367\307\241\016\022\020\n\tToken_Exp\020\370\307\241\016\022\025\n\016Token_H"
    "ero_Exp\020\371\307\241\016\022\023\n\014Token_Friend\020\372\307\241\016\022\027\n\020Tok"
    "en_Chivalrous\020\373\307\241\016\022\031\n\022Token_ColdExpPoint"
    "\020\374\307\241\016\022\027\n\020Token_GuildMoney\020\375\307\241\016\022\034\n\025Token_"
    "GuildContribute\020\376\307\241\016\022\027\n\020Token_GuildBonus"
    "\020\377\307\241\016\022\023\n\014Token_LawFul\020\200\310\241\016\022\031\n\022Token_Form"
    "ationExp\020\201\310\241\016*\307\001\n\rGuildPosition\022\013\n\007TRAIN"
    "EE\020\000\022\016\n\nFOUR_GROUP\020\001\022\017\n\013THREE_GROUP\020\002\022\020\n"
    "\014SECOND_GROUP\020\003\022\r\n\tONE_GROUP\020\004\022\017\n\013FOUR_L"
    "EADER\020\005\022\020\n\014THREE_LEADER\020\006\022\021\n\rSECOND_LEAD"
    "ER\020\007\022\016\n\nONE_LEADER\020\010\022\022\n\016VICE_CHIEFTAIN\020\t"
    "\022\r\n\tCHIEFTAIN\020\n*V\n\016GuildBuildType\022\016\n\nGUI"
    "LD_MAIN\020\000\022\021\n\rGUILD_CASHBOX\020\001\022\016\n\nGUILD_SH"
    "OP\020\002\022\021\n\rGUILD_STORAGE\020\003*\204\001\n\021GuildBattle_"
    "Stage\022\032\n\026GuildBattle_Stage_None\020\000\022\035\n\031Gui"
    "ldBattle_Stage_Prepare\020\001\022\031\n\025GuildBattle_"
    "Stage_War\020\002\022\031\n\025GuildBattle_Stage_End\020\003*m"
    "\n\021PlayerSceneStatus\022\010\n\004NONE\020\000\022\022\n\016WAIT_FO"
    "R_ENTER\020\001\022\022\n\016READY_TO_ENTER\020\002\022\010\n\004IDEL\020\003\022"
    "\n\n\006MOVING\020\004\022\020\n\014CHANGE_SCENE\020\005*d\n\tRaidSta"
    "te\022\014\n\010RaidInit\020\000\022\r\n\tRaidEnter\020\001\022\017\n\013RaidR"
    "unning\020\002\022\013\n\007RaidEnd\020\003\022\r\n\tToDestroy\020\004\022\r\n\t"
    "DBLoading\020\005*\304\005\n\014ResultOption\022\030\n\013Default_"
    "Opt\020\377\377\377\377\377\377\377\377\377\001\022\017\n\013Item_Common\020\000\022\021\n\rMagic"
    "al_Equip\020\001\022\r\n\tSell_Item\020\002\022\017\n\013Bank_Option"
    "\020\003\022\017\n\013Scene_Enter\020\004\022\023\n\017Dismantle_Equip\020\005"
    "\022\022\n\016Enhance_Equips\020\006\022\017\n\013Gem_Compose\020\007\022\016\n"
    "\nNpc_Option\020\010\022\021\n\rMarket_Option\020\t\022\017\n\013Equi"
    "p_Refix\020\n\022\023\n\017ExpPoint_Option\020\013\022\014\n\010Team_O"
    "pt\020\r\022\010\n\004Chat\020\016\022\014\n\010Raid_Opt\020\017\022\017\n\013Mission_"
    "Opt\020\020\022\020\n\014Activity_Opt\020\021\022\n\n\006BATTLE\020\022\022\r\n\tG"
    "uild_Opt\020\023\022\017\n\013SCENE_STAGE\020\024\022\016\n\nOnHook_Op"
    "t\020\025\022\021\n\rChallengeBoss\020\026\022\024\n\020CaptureStage_O"
    "pt\020\027\022\017\n\013Player_Loot\020\030\022\017\n\013Player_Draw\020\031\022\021"
    "\n\rWolrdBoss_Opt\020\032\022\014\n\010Hell_Opt\020\033\022\013\n\007Arena"
    "Op\020\034\022\r\n\tActor_Opt\020\036\022\022\n\016Upgrade_Relate\020\037\022"
    "\016\n\nWear_Equip\020 \022\016\n\nFriend_Opt\020!\022\023\n\017Battl"
    "eField_Opt\020\"\022\021\n\rEquip_Enchant\020#\022\025\n\021Equip"
    "_EnchantSlot\020$\022\017\n\013Equip_Inset\020%\022\021\n\rEquip"
    "_Inherit\020&\022\r\n\tSkill_Opt\020\'\022\017\n\013Message_Opt"
    "\020(*\233\036\n\nResultCode\022\031\n\014UnknownError\020\377\377\377\377\377\377"
    "\377\377\377\001\022\014\n\010ResultOK\020\000\022\r\n\tBagIsFull\020\001\022\021\n\rGol"
    "dNotEnough\020\002\022\024\n\020CrystalNotEnough\020\003\022\017\n\013In"
    "validItem\020\004\022\020\n\014InvalidEquip\020\005\022\024\n\020RemoveI"
    "temFailed\020\006\022\025\n\021CostItemNotEnough\020\007\022\025\n\021In"
    "validConfigData\020\010\022\022\n\016EquipNotOnBody\020\t\022\016\n"
    "\nLevelLimit\020\n\022\017\n\013InvalidRace\020\013\022\025\n\021Invali"
    "dProfession\020\014\022\021\n\rInvalidTalent\020\r\022\024\n\020Inva"
    "lidEquipType\020\016\022\016\n\nCountLimit\020\017\022\030\n\024Invali"
    "dContainerType\020\020\022\017\n\013SpaceIsFull\020\021\022\022\n\016Int"
    "ernalResult\020\022\022\024\n\020InvalidDestScene\020\023\022\017\n\013C"
    "antUseItem\020\024\022\021\n\rCoolDownLimit\020\025\022\023\n\017CantD"
    "estroyItem\020\026\022\020\n\014CantSellItem\020\027\022\014\n\010MaxLim"
    "it\020\030\022\016\n\nInvalidGem\020\031\022\020\n\014GemNotEnough\020\032\022\024"
    "\n\020GemComposeFailed\020\033\022\017\n\013NpcNotExist\020\034\022\013\n"
    "\007NpcLock\020\035\022\027\n\023TokenHonorNotEnough\020\036\022\030\n\024T"
    "okenRewardNotEnough\020\037\022\025\n\021TokenDayNotEnou"
    "gh\020 \022\025\n\021InvalidMarketData\020!\022\020\n\014ItemIsLoc"
    "ked\020\"\022\021\n\rExpPointLimit\020#\022\031\n\025ColdExpPoint"
    "NotEnough\020$\022\026\n\022InvalidNpcPosition\020%\022\032\n\026I"
    "nvalidMissionPosition\020&\022\024\n\020CreateRaidFai"
    "led\020\'\022\022\n\016InvalidMission\020(\022\020\n\014LimitedScen"
    "e\020)\022\021\n\rPlayerNoExist\020*\022\026\n\022InvalidMission"
    "Data\020+\022\026\n\022DiffMissionProcess\020,\022\025\n\021SyncMi"
    "ssionFailed\020-\022\031\n\025ActivityRewardBoxDone\020."
    "\022\024\n\020InvalidDrowGroup\020/\022\023\n\017InvalidDrawTyp"
    "e\0200\022\031\n\025InvalidDrawConfigData\0201\022\025\n\021Memenb"
    "erTempLeave\0202\022\013\n\007Team_In\0203\022\014\n\010Team_Out\0204"
    "\022\016\n\nTeam_Exist\0205\022\020\n\014Team_NoExist\0206\022\022\n\016Te"
    "am_NotLeader\0207\022\r\n\tTeam_Full\0208\022\020\n\014Team_In"
    "Apply\0209\022\023\n\017Team_LimitLevel\020:\022\023\n\017Team_Not"
    "Purpose\020;\022\027\n\023Team_NotHeroPostion\020<\022\021\n\rIn"
    "spireFailed\020=\022\017\n\013SingleLimit\020>\022\023\n\017Member"
    "NotEnough\020\?\022\023\n\017InvalidPosition\020@\022\014\n\010Colo"
    "rMax\020A\022\025\n\021MissionCountLimit\020B\022\013\n\007NoActor"
    "\020C\022\020\n\014InvalidColor\020D\022\024\n\020InvalidNpcOption"
    "\020E\022\013\n\007Chat_CD\020F\022\022\n\016Chat_WordLevel\020G\022\030\n\024S"
    "ETTING_UNACCEPTABLE\020H\022\014\n\010NoBattle\020I\022\014\n\010R"
    "eachPos\020J\022\016\n\nOnHookMove\020K\022\020\n\014OnHookBattl"
    "e\020L\022\027\n\023InvalidTargetPlayer\020M\022\017\n\013ActorIsD"
    "ead\020N\022\021\n\rGuild_NoExist\020P\022\016\n\nGuild_Full\020Q"
    "\022\016\n\nGuild_Have\020R\022\026\n\022Guild_HaveDonation\020S"
    "\022\026\n\022Guild_Notchieftain\020T\022\026\n\022Guild_CDKNot"
    "Enough\020U\022\021\n\rGuild_HaveCDK\020V\022\035\n\031Guild_Bui"
    "ldLevelNotEnough\020W\022\030\n\024Guild_BuildLevelMo"
    "re\020X\022\030\n\024Guild_MoneyNotEnough\020Y\022\035\n\031Guild_"
    "PracticePlayerlevel\020Z\022\034\n\030Guild_PracticeG"
    "uildlevel\020[\022\026\n\022BattleCreateFailed\020\\\022\026\n\022C"
    "hallengeTimeLimit\020^\022\017\n\013Wrong_Scene\020_\022\020\n\014"
    "Wrong_Status\020`\022\017\n\013HookStartOK\020a\022\r\n\tHookE"
    "ndOK\020b\022\r\n\tBattleEnd\020c\022\021\n\rHookRefreshOK\020d"
    "\022\022\n\016JoinRoomFailed\020e\022\025\n\021InvalidPlayerDat"
    "a\020f\022\017\n\013NotJoinRoom\020g\022\023\n\017BattleFieldOver\020"
    "h\022\016\n\nRoomIsFull\020i\022\021\n\rInvalidBFCamp\020j\022\026\n\022"
    "SCENE_STAGE_NO_TAX\020x\022\020\n\014Wait_Loading\020y\022\007"
    "\n\003Win\020z\022\010\n\004Lost\020{\022\036\n\032SCENE_STAGE_TAX_COL"
    "LECT_OK\020|\022\r\n\tSameScene\020}\022\022\n\016TargetInBatt"
    "le\020~\022\023\n\017InvalidFormData\020\177\022\027\n\022InvalidBatt"
    "leGroup\020\200\001\022\027\n\022InvalidBattleState\020\201\001\022\026\n\021A"
    "ctivity_NotStart\020\202\001\022\024\n\017Invalid_Request\020\203"
    "\001\022\026\n\021InvalidSceneStage\020\204\001\022\014\n\007TimeOut\020\205\001\022"
    "\013\n\006NoFlag\020\206\001\022\020\n\013InvalidName\020\207\001\022\017\n\nTimesL"
    "imit\020\210\001\022\022\n\rRewardAlready\020\211\001\022\026\n\021Guild_InA"
    "pplyList\020\214\001\022\030\n\023Guild_DuplicateName\020\215\001\022\023\n"
    "\016Guild_BossDead\020\216\001\022\024\n\017Guild_LevelUpCD\020\217\001"
    "\022\021\n\014Guild_NoHave\020\220\001\022\030\n\023Scene_Level_Too_L"
    "ow\020\310\001\022\032\n\025Target_Max_Loot_Count\020\311\001\022\030\n\023Sel"
    "f_Max_Loot_Count\020\312\001\022\026\n\021Target_In_Protect"
    "\020\313\001\022\024\n\017Target_Dismatch\020\314\001\022\032\n\025Target_Chal"
    "lenge_Done\020\315\001\022\020\n\013Target_Busy\020\316\001\022\035\n\030Team_"
    "TargetLevelLimitTen\020\346\001\022\027\n\022Team_LevelLimi"
    "tTen\020\347\001\022\030\n\023Team_CreateResultOK\020\350\001\022\024\n\017Tea"
    "m_TargetHave\020\351\001\022\030\n\023Team_CreateInBattle\020\352"
    "\001\022\025\n\020Team_InBattleOpt\020\353\001\022\030\n\023Guild_Battle"
    "_NoOpen\020\372\001\022\031\n\024Guild_Battle_NoEnter\020\373\001\022\034\n"
    "\027Guild_Battle_NoOpponent\020\374\001\022\033\n\026Guild_Bat"
    "tle_NoQualify\020\375\001\022\026\n\021Guild_Battle_Stop\020\376\001"
    "\022\023\n\016FRIEND_SUCCESS\020\255\002\022\020\n\013FRIEND_FULL\020\256\002\022"
    "\024\n\017ADD_SELF_FRIEND\020\257\002\022\025\n\020PLAYER_IS_FRIEN"
    "D\020\260\002\022\024\n\017FRIEND_NOTEXIST\020\261\002\022\023\n\016PLAYER_OFF"
    "LINE\020\262\002\022\024\n\017PLAYER_NOTEXIST\020\263\002\022\025\n\020PLAYER_"
    "NOTONLINE\020\266\002\022\025\n\020MESSAGE_NOT_EXIT\020\267\002\022\025\n\020M"
    "ISSION_NOT_EXIT\020\270\002\022\027\n\022InvalidMissionType"
    "\020\336\002\022\016\n\tDropLimit\020\337\002\022\030\n\023InvalidMissionSta"
    "te\020\340\002\022\025\n\020InvalidMissionId\020\341\002\022\026\n\021InvalidF"
    "inishType\020\342\002\022\022\n\rInvalidPlayer\020\343\002\022\022\n\rNoMo"
    "reMission\020\344\002\022\024\n\017InvalidItemType\020\345\002\022\020\n\013In"
    "validSlot\020\346\002\022\017\n\nSlotOpened\020\347\002\022\026\n\021BatchEn"
    "chantFirst\020\350\002\022\021\n\014InvalidIndex\020\351\002\022\023\n\016Moun"
    "tAreadyGet\020\352\002\022\022\n\rMountIsLocked\020\353\002\022\021\n\014Mou"
    "ntLimited\020\354\002\022\031\n\024RewardConditionLimit\020\355\002\022"
    "\027\n\022LuaScriptException\020\356\002\022\026\n\021InvalidPlaye"
    "rName\020\357\002\022\030\n\023DuplicatePlayerName\020\360\002\022\030\n\023In"
    "validPlayerConfig\020\361\002\022\023\n\016CreatePlayerOk\020\362"
    "\002\022\r\n\010MaxLevel\020\363\002\022\021\n\014InvalidSkill\020\364\002\022\020\n\013R"
    "ewardLimit\020\365\002\022\023\n\016GameServerBusy\020\366\002\022\017\n\nBi"
    "nd_Actor\020\367\002\022\023\n\016TeamGroupLimit\020\370\002*e\n\rNpcS"
    "ourceType\022\036\n\021InvalidSourceType\020\377\377\377\377\377\377\377\377\377"
    "\001\022\021\n\rPlayerMission\020\000\022\017\n\013ScenePublic\020\001\022\020\n"
    "\014BurningUnion\020\002*2\n\tNpcOption\022\n\n\006NpcAdd\020\000"
    "\022\n\n\006NpcDel\020\001\022\r\n\tNpcUpdate\020\002*\305\001\n\020BattleFi"
    "eldState\022\035\n\020bf_state_invalid\020\377\377\377\377\377\377\377\377\377\001\022"
    "\023\n\017bf_state_inroom\020\001\022\031\n\025bf_state_room_wa"
    "iting\020\002\022\025\n\021bf_state_inbattle\020\003\022\033\n\027bf_sta"
    "te_battle_waiting\020\004\022\027\n\023bf_state_wait_lea"
    "ve\020\005\022\025\n\021bf_state_disagree\020\006*J\n\nFlagOptio"
    "n\022\r\n\tBeginPick\020\000\022\016\n\nCancelPick\020\001\022\017\n\013Succ"
    "essPick\020\002\022\014\n\010FlagDrop\020\003*n\n\tRankGroup\022\023\n\017"
    "Rank_FightValue\020\001\022\016\n\nRank_Arena\020\002\022\034\n\030Ran"
    "k_FormationFightValue\020\003\022\016\n\nRank_Tower\020\004\022"
    "\016\n\nRank_Level\020\005*\241\001\n\026SimpleImpactEffectTy"
    "pe\022\033\n\016EF_InvalidType\020\377\377\377\377\377\377\377\377\377\001\022\022\n\016EF_Pl"
    "ayerSpeed\020\001\022\025\n\021EF_ActorAttribute\020\002\022\024\n\020EF"
    "_PlayerSpecial\020\003\022\023\n\017EF_ActorSpecial\020\004\022\024\n"
    "\020EF_PlayerLackeys\020\005*h\n\022BattleGroundStatu"
    "s\022\010\n\004WAIT\020\000\022\014\n\010FIGHTING\020\001\022\t\n\005PAUSE\020\002\022\017\n\013"
    "WAIT_TO_END\020\003\022\007\n\003END\020\004\022\010\n\004NEXT\020\005\022\013\n\007RECY"
    "CLE\020\006*n\n\rCaptureStatus\022\r\n\tCS_INITED\020\000\022\031\n"
    "\025CS_LOAD_FIGHTING_DATA\020\001\022\022\n\016CS_DECLARE_W"
    "AR\020\002\022\017\n\013CS_FIGHTING\020\003\022\016\n\nCS_PROTECT\020\004*\222\001"
    "\n\020StrongHoldStatus\022\014\n\010SHS_IDLE\020\000\022\020\n\014SHS_"
    "FIGHTING\020\001\022\024\n\020SHS_ATTACKER_WIN\020\002\022\024\n\020SHS_"
    "DEFENDER_WIN\020\003\022\030\n\024SHS_ATTACKER_WIN_BYE\020\004"
    "\022\030\n\024SHS_DEFENDER_WIN_BYE\020\005*\236\t\n\021SkillBuff"
    "StubType\022\034\n\030after_do_dodge_stub_func\020\000\022\037"
    "\n\033after_do_critical_stub_func\020\001\022 \n\034after"
    "_battle_start_stub_func\020\002\022!\n\035before_batt"
    "le_start_stub_func\020\003\022%\n!after_source_val"
    "ue_calc_stub_func\020\004\022,\n(target_after_sour"
    "ce_value_calc_stub_func\020\005\022,\n(target_afte"
    "r_target_value_calc_stub_func\020\006\022%\n!after"
    "_target_value_calc_stub_func\020\007\0222\n.after_"
    "source_critical_etc_value_calc_stub_func"
    "\020\010\022\035\n\031before_buff_add_stub_func\020\t\022\034\n\030aft"
    "er_buff_add_stub_func\020\n\022\034\n\030on_time_elaps"
    "e_stub_func\020\013\022%\n!after_control_prob_calc"
    "_stub_func\020\014\0222\n.after_target_critical_et"
    "c_value_calc_stub_func\020\r\022\033\n\027after_be_cur"
    "e_stub_func\020\016\022\034\n\030before_be_cure_stub_fun"
    "c\020\017\022\034\n\030before_do_cure_stub_func\020\020\022\033\n\027aft"
    "er_do_cure_stub_func\020\021\022\036\n\032before_be_dama"
    "ge_stub_func\020\022\022\035\n\031after_be_damage_stub_f"
    "unc\020\023\022\036\n\032before_do_damage_stub_func\020\024\022\035\n"
    "\031after_do_damage_stub_func\020\025\022\034\n\030after_be"
    "_dodge_stub_func\020\026\022\037\n\033after_be_critical_"
    "stub_func\020\027\022)\n%after_calc_critical_perce"
    "nt_stub_func\020\030\022&\n\"after_calc_dodge_perce"
    "nt_stub_func\020\031\022 \n\034after_select_skill_stu"
    "b_func\020\032\022\035\n\031after_hp_change_stub_func\020\033\022"
    "\"\n\036combo_point_overflow_stub_func\020\034\022$\n a"
    "fter_use_active_skill_stub_func\020\035\022\031\n\025bef"
    "ore_dead_stub_func\020\036\022\'\n#actor_use_long_t"
    "ime_skill_stub_func\020\037\022\034\n\030max_skill_buff_"
    "stub_type\020 ", 14611);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AllPacketEnum.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AllPacketEnum_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AllPacketEnum_2eproto {
  StaticDescriptorInitializer_AllPacketEnum_2eproto() {
    protobuf_AddDesc_AllPacketEnum_2eproto();
  }
} static_descriptor_initializer_AllPacketEnum_2eproto_;
const ::google::protobuf::EnumDescriptor* PlayerTeamStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerTeamStatus_descriptor_;
}
bool PlayerTeamStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ActorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorType_descriptor_;
}
bool ActorType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BattleActorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleActorType_descriptor_;
}
bool BattleActorType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LastHpType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LastHpType_descriptor_;
}
bool LastHpType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ActorStar_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorStar_descriptor_;
}
bool ActorStar_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ActorColor_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorColor_descriptor_;
}
bool ActorColor_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ActorBattleType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorBattleType_descriptor_;
}
bool ActorBattleType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ActorFigthFormation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorFigthFormation_descriptor_;
}
bool ActorFigthFormation_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DamageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DamageType_descriptor_;
}
bool DamageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DamageExpression_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DamageExpression_descriptor_;
}
bool DamageExpression_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SkillPositionLogicType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillPositionLogicType_descriptor_;
}
bool SkillPositionLogicType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BattleGroundType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleGroundType_descriptor_;
}
bool BattleGroundType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BattleObjectType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleObjectType_descriptor_;
}
bool BattleObjectType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ActorStateType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorStateType_descriptor_;
}
bool ActorStateType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ActorControlType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorControlType_descriptor_;
}
bool ActorControlType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Property_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Property_descriptor_;
}
bool Property_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ChatChannel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatChannel_descriptor_;
}
bool ChatChannel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CellLogicType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CellLogicType_descriptor_;
}
bool CellLogicType_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NumberCellIndex_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NumberCellIndex_descriptor_;
}
bool NumberCellIndex_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BitFlagCellIndex_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BitFlagCellIndex_descriptor_;
}
bool BitFlagCellIndex_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 32:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MissionCellIndex_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionCellIndex_descriptor_;
}
bool MissionCellIndex_IsValid(int value) {
  switch(value) {
    case 0:
    case 128:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GuideCellIndex_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuideCellIndex_descriptor_;
}
bool GuideCellIndex_IsValid(int value) {
  switch(value) {
    case 0:
    case 64:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ActivityDataIndex_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityDataIndex_descriptor_;
}
bool ActivityDataIndex_IsValid(int value) {
  switch(value) {
    case 0:
    case 128:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AcRewardIndex_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcRewardIndex_descriptor_;
}
bool AcRewardIndex_IsValid(int value) {
  switch(value) {
    case 0:
    case 256:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TargetDataIndex_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetDataIndex_descriptor_;
}
bool TargetDataIndex_IsValid(int value) {
  switch(value) {
    case 0:
    case 128:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ActionDataIndex_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionDataIndex_descriptor_;
}
bool ActionDataIndex_IsValid(int value) {
  switch(value) {
    case 0:
    case 128:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ResetTimeIndex_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResetTimeIndex_descriptor_;
}
bool ResetTimeIndex_IsValid(int value) {
  switch(value) {
    case 0:
    case 64:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Cell64LogicType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cell64LogicType_descriptor_;
}
bool Cell64LogicType_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LootCellIndex_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LootCellIndex_descriptor_;
}
bool LootCellIndex_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GuildUserCellIndex_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildUserCellIndex_descriptor_;
}
bool GuildUserCellIndex_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NumberCell64Index_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NumberCell64Index_descriptor_;
}
bool NumberCell64Index_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EquipBook64Index_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipBook64Index_descriptor_;
}
bool EquipBook64Index_IsValid(int value) {
  switch(value) {
    case 0:
    case 64:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ZoneCellIndex_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZoneCellIndex_descriptor_;
}
bool ZoneCellIndex_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FriendMessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendMessageType_descriptor_;
}
bool FriendMessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ContainerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerType_descriptor_;
}
bool ContainerType_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AccountType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountType_descriptor_;
}
bool AccountType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MissionState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionState_descriptor_;
}
bool MissionState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MissionOption_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionOption_descriptor_;
}
bool MissionOption_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MissionDB_Param_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionDB_Param_descriptor_;
}
bool MissionDB_Param_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Camp_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Camp_descriptor_;
}
bool Camp_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ArrangeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArrangeType_descriptor_;
}
bool ArrangeType_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Race_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Race_descriptor_;
}
bool Race_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Professions_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Professions_descriptor_;
}
bool Professions_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Talent_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Talent_descriptor_;
}
bool Talent_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Gender_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gender_descriptor_;
}
bool Gender_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* HeroPosition_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroPosition_descriptor_;
}
bool HeroPosition_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TokenType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TokenType_descriptor_;
}
bool TokenType_IsValid(int value) {
  switch(value) {
    case 0:
    case 29910001:
    case 29910002:
    case 29910003:
    case 29910004:
    case 29910005:
    case 29910006:
    case 29910007:
    case 29910008:
    case 29910009:
    case 29910010:
    case 29910011:
    case 29910012:
    case 29910013:
    case 29910014:
    case 29910015:
    case 29910016:
    case 29910017:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GuildPosition_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildPosition_descriptor_;
}
bool GuildPosition_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GuildBuildType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBuildType_descriptor_;
}
bool GuildBuildType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GuildBattle_Stage_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBattle_Stage_descriptor_;
}
bool GuildBattle_Stage_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PlayerSceneStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerSceneStatus_descriptor_;
}
bool PlayerSceneStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RaidState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaidState_descriptor_;
}
bool RaidState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ResultOption_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultOption_descriptor_;
}
bool ResultOption_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ResultCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultCode_descriptor_;
}
bool ResultCode_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 310:
    case 311:
    case 312:
    case 350:
    case 351:
    case 352:
    case 353:
    case 354:
    case 355:
    case 356:
    case 357:
    case 358:
    case 359:
    case 360:
    case 361:
    case 362:
    case 363:
    case 364:
    case 365:
    case 366:
    case 367:
    case 368:
    case 369:
    case 370:
    case 371:
    case 372:
    case 373:
    case 374:
    case 375:
    case 376:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NpcSourceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NpcSourceType_descriptor_;
}
bool NpcSourceType_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NpcOption_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NpcOption_descriptor_;
}
bool NpcOption_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BattleFieldState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleFieldState_descriptor_;
}
bool BattleFieldState_IsValid(int value) {
  switch(value) {
    case -1:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FlagOption_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlagOption_descriptor_;
}
bool FlagOption_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RankGroup_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankGroup_descriptor_;
}
bool RankGroup_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SimpleImpactEffectType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimpleImpactEffectType_descriptor_;
}
bool SimpleImpactEffectType_IsValid(int value) {
  switch(value) {
    case -1:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BattleGroundStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleGroundStatus_descriptor_;
}
bool BattleGroundStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CaptureStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaptureStatus_descriptor_;
}
bool CaptureStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StrongHoldStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StrongHoldStatus_descriptor_;
}
bool StrongHoldStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SkillBuffStubType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillBuffStubType_descriptor_;
}
bool SkillBuffStubType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

// @@protoc_insertion_point(global_scope)
