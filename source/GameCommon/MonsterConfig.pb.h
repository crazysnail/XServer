// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MonsterConfig.proto

#ifndef PROTOBUF_MonsterConfig_2eproto__INCLUDED
#define PROTOBUF_MonsterConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "AllConfigEnum.pb.h"
#include "ProtoBufOption.pb.h"
#include "BattleInfo.pb.h"
#include "Base.pb.h"
// @@protoc_insertion_point(includes)

namespace Config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MonsterConfig_2eproto();
void protobuf_AssignDesc_MonsterConfig_2eproto();
void protobuf_ShutdownFile_MonsterConfig_2eproto();

class MonsterConfig;
class MonsterAttribute;
class MonsterDefine;
class MonsterGroup;

// ===================================================================

class MonsterConfig : public ::google::protobuf::Message {
 public:
  MonsterConfig();
  virtual ~MonsterConfig();

  MonsterConfig(const MonsterConfig& from);

  inline MonsterConfig& operator=(const MonsterConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MonsterConfig& default_instance();

  void Swap(MonsterConfig* other);

  // implements Message ----------------------------------------------

  MonsterConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MonsterConfig& from);
  void MergeFrom(const MonsterConfig& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required float scale = 2;
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 2;
  inline float scale() const;
  inline void set_scale(float value);

  // required float radius = 3;
  inline bool has_radius() const;
  inline void clear_radius();
  static const int kRadiusFieldNumber = 3;
  inline float radius() const;
  inline void set_radius(float value);

  // required .Config.NpcType npc_type = 4;
  inline bool has_npc_type() const;
  inline void clear_npc_type();
  static const int kNpcTypeFieldNumber = 4;
  inline ::Config::NpcType npc_type() const;
  inline void set_npc_type(::Config::NpcType value);

  // required .Config.MonsterType monster_type = 5;
  inline bool has_monster_type() const;
  inline void clear_monster_type();
  static const int kMonsterTypeFieldNumber = 5;
  inline ::Config::MonsterType monster_type() const;
  inline void set_monster_type(::Config::MonsterType value);

  // required int32 rage_time = 6;
  inline bool has_rage_time() const;
  inline void clear_rage_time();
  static const int kRageTimeFieldNumber = 6;
  inline ::google::protobuf::int32 rage_time() const;
  inline void set_rage_time(::google::protobuf::int32 value);

  // required int32 level = 7;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 7;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required int32 exp_drop = 8;
  inline bool has_exp_drop() const;
  inline void clear_exp_drop();
  static const int kExpDropFieldNumber = 8;
  inline ::google::protobuf::int32 exp_drop() const;
  inline void set_exp_drop(::google::protobuf::int32 value);

  // required int32 gold_drop = 9;
  inline bool has_gold_drop() const;
  inline void clear_gold_drop();
  static const int kGoldDropFieldNumber = 9;
  inline ::google::protobuf::int32 gold_drop() const;
  inline void set_gold_drop(::google::protobuf::int32 value);

  // required .Packet.BattleInfo battle_info = 10;
  inline bool has_battle_info() const;
  inline void clear_battle_info();
  static const int kBattleInfoFieldNumber = 10;
  inline const ::Packet::BattleInfo& battle_info() const;
  inline ::Packet::BattleInfo* mutable_battle_info();
  inline ::Packet::BattleInfo* release_battle_info();
  inline void set_allocated_battle_info(::Packet::BattleInfo* battle_info);

  // repeated int32 skill_ids = 11;
  inline int skill_ids_size() const;
  inline void clear_skill_ids();
  static const int kSkillIdsFieldNumber = 11;
  inline ::google::protobuf::int32 skill_ids(int index) const;
  inline void set_skill_ids(int index, ::google::protobuf::int32 value);
  inline void add_skill_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      skill_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_skill_ids();

  // required int32 ai_strategy = 12;
  inline bool has_ai_strategy() const;
  inline void clear_ai_strategy();
  static const int kAiStrategyFieldNumber = 12;
  inline ::google::protobuf::int32 ai_strategy() const;
  inline void set_ai_strategy(::google::protobuf::int32 value);

  // required int32 client_res_id = 13;
  inline bool has_client_res_id() const;
  inline void clear_client_res_id();
  static const int kClientResIdFieldNumber = 13;
  inline ::google::protobuf::int32 client_res_id() const;
  inline void set_client_res_id(::google::protobuf::int32 value);

  // required int32 monster_class = 14;
  inline bool has_monster_class() const;
  inline void clear_monster_class();
  static const int kMonsterClassFieldNumber = 14;
  inline ::google::protobuf::int32 monster_class() const;
  inline void set_monster_class(::google::protobuf::int32 value);

  // required int32 adapt_group = 15;
  inline bool has_adapt_group() const;
  inline void clear_adapt_group();
  static const int kAdaptGroupFieldNumber = 15;
  inline ::google::protobuf::int32 adapt_group() const;
  inline void set_adapt_group(::google::protobuf::int32 value);

  // required int32 life_time = 16;
  inline bool has_life_time() const;
  inline void clear_life_time();
  static const int kLifeTimeFieldNumber = 16;
  inline ::google::protobuf::int32 life_time() const;
  inline void set_life_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Config.MonsterConfig)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_radius();
  inline void clear_has_radius();
  inline void set_has_npc_type();
  inline void clear_has_npc_type();
  inline void set_has_monster_type();
  inline void clear_has_monster_type();
  inline void set_has_rage_time();
  inline void clear_has_rage_time();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp_drop();
  inline void clear_has_exp_drop();
  inline void set_has_gold_drop();
  inline void clear_has_gold_drop();
  inline void set_has_battle_info();
  inline void clear_has_battle_info();
  inline void set_has_ai_strategy();
  inline void clear_has_ai_strategy();
  inline void set_has_client_res_id();
  inline void clear_has_client_res_id();
  inline void set_has_monster_class();
  inline void clear_has_monster_class();
  inline void set_has_adapt_group();
  inline void clear_has_adapt_group();
  inline void set_has_life_time();
  inline void clear_has_life_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  float scale_;
  float radius_;
  int npc_type_;
  int monster_type_;
  ::google::protobuf::int32 rage_time_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 exp_drop_;
  ::Packet::BattleInfo* battle_info_;
  ::google::protobuf::int32 gold_drop_;
  ::google::protobuf::int32 ai_strategy_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > skill_ids_;
  ::google::protobuf::int32 client_res_id_;
  ::google::protobuf::int32 monster_class_;
  ::google::protobuf::int32 adapt_group_;
  ::google::protobuf::int32 life_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_MonsterConfig_2eproto();
  friend void protobuf_AssignDesc_MonsterConfig_2eproto();
  friend void protobuf_ShutdownFile_MonsterConfig_2eproto();

  void InitAsDefaultInstance();
  static MonsterConfig* default_instance_;
};
// -------------------------------------------------------------------

class MonsterAttribute : public ::google::protobuf::Message {
 public:
  MonsterAttribute();
  virtual ~MonsterAttribute();

  MonsterAttribute(const MonsterAttribute& from);

  inline MonsterAttribute& operator=(const MonsterAttribute& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MonsterAttribute& default_instance();

  void Swap(MonsterAttribute* other);

  // implements Message ----------------------------------------------

  MonsterAttribute* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MonsterAttribute& from);
  void MergeFrom(const MonsterAttribute& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 group = 1;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 1;
  inline ::google::protobuf::int32 group() const;
  inline void set_group(::google::protobuf::int32 value);

  // required int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required .Packet.BattleInfo battle_info = 3;
  inline bool has_battle_info() const;
  inline void clear_battle_info();
  static const int kBattleInfoFieldNumber = 3;
  inline const ::Packet::BattleInfo& battle_info() const;
  inline ::Packet::BattleInfo* mutable_battle_info();
  inline ::Packet::BattleInfo* release_battle_info();
  inline void set_allocated_battle_info(::Packet::BattleInfo* battle_info);

  // @@protoc_insertion_point(class_scope:Config.MonsterAttribute)
 private:
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_battle_info();
  inline void clear_has_battle_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 group_;
  ::google::protobuf::int32 level_;
  ::Packet::BattleInfo* battle_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_MonsterConfig_2eproto();
  friend void protobuf_AssignDesc_MonsterConfig_2eproto();
  friend void protobuf_ShutdownFile_MonsterConfig_2eproto();

  void InitAsDefaultInstance();
  static MonsterAttribute* default_instance_;
};
// -------------------------------------------------------------------

class MonsterDefine : public ::google::protobuf::Message {
 public:
  MonsterDefine();
  virtual ~MonsterDefine();

  MonsterDefine(const MonsterDefine& from);

  inline MonsterDefine& operator=(const MonsterDefine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MonsterDefine& default_instance();

  void Swap(MonsterDefine* other);

  // implements Message ----------------------------------------------

  MonsterDefine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MonsterDefine& from);
  void MergeFrom(const MonsterDefine& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 loc = 2;
  inline bool has_loc() const;
  inline void clear_loc();
  static const int kLocFieldNumber = 2;
  inline ::google::protobuf::int32 loc() const;
  inline void set_loc(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Config.MonsterDefine)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_loc();
  inline void clear_has_loc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 loc_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_MonsterConfig_2eproto();
  friend void protobuf_AssignDesc_MonsterConfig_2eproto();
  friend void protobuf_ShutdownFile_MonsterConfig_2eproto();

  void InitAsDefaultInstance();
  static MonsterDefine* default_instance_;
};
// -------------------------------------------------------------------

class MonsterGroup : public ::google::protobuf::Message {
 public:
  MonsterGroup();
  virtual ~MonsterGroup();

  MonsterGroup(const MonsterGroup& from);

  inline MonsterGroup& operator=(const MonsterGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MonsterGroup& default_instance();

  void Swap(MonsterGroup* other);

  // implements Message ----------------------------------------------

  MonsterGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MonsterGroup& from);
  void MergeFrom(const MonsterGroup& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 mission_id = 2;
  inline bool has_mission_id() const;
  inline void clear_mission_id();
  static const int kMissionIdFieldNumber = 2;
  inline ::google::protobuf::int32 mission_id() const;
  inline void set_mission_id(::google::protobuf::int32 value);

  // repeated .Config.MonsterDefine monsters = 4;
  inline int monsters_size() const;
  inline void clear_monsters();
  static const int kMonstersFieldNumber = 4;
  inline const ::Config::MonsterDefine& monsters(int index) const;
  inline ::Config::MonsterDefine* mutable_monsters(int index);
  inline ::Config::MonsterDefine* add_monsters();
  inline const ::google::protobuf::RepeatedPtrField< ::Config::MonsterDefine >&
      monsters() const;
  inline ::google::protobuf::RepeatedPtrField< ::Config::MonsterDefine >*
      mutable_monsters();

  // repeated int32 package_id = 5;
  inline int package_id_size() const;
  inline void clear_package_id();
  static const int kPackageIdFieldNumber = 5;
  inline ::google::protobuf::int32 package_id(int index) const;
  inline void set_package_id(int index, ::google::protobuf::int32 value);
  inline void add_package_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      package_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_package_id();

  // repeated int32 package_weight = 6;
  inline int package_weight_size() const;
  inline void clear_package_weight();
  static const int kPackageWeightFieldNumber = 6;
  inline ::google::protobuf::int32 package_weight(int index) const;
  inline void set_package_weight(int index, ::google::protobuf::int32 value);
  inline void add_package_weight(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      package_weight() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_package_weight();

  // @@protoc_insertion_point(class_scope:Config.MonsterGroup)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_mission_id();
  inline void clear_has_mission_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 mission_id_;
  ::google::protobuf::RepeatedPtrField< ::Config::MonsterDefine > monsters_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > package_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > package_weight_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_MonsterConfig_2eproto();
  friend void protobuf_AssignDesc_MonsterConfig_2eproto();
  friend void protobuf_ShutdownFile_MonsterConfig_2eproto();

  void InitAsDefaultInstance();
  static MonsterGroup* default_instance_;
};
// ===================================================================


// ===================================================================

// MonsterConfig

// required int32 id = 1;
inline bool MonsterConfig::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MonsterConfig::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MonsterConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MonsterConfig::clear_id() {
  id_ = 0;
  clear_has_id();
  SetDirty();
}
inline ::google::protobuf::int32 MonsterConfig::id() const {
  return id_;
}
inline void MonsterConfig::set_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_id();
  id_ = value;
}

// required float scale = 2;
inline bool MonsterConfig::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MonsterConfig::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MonsterConfig::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MonsterConfig::clear_scale() {
  scale_ = 0;
  clear_has_scale();
  SetDirty();
}
inline float MonsterConfig::scale() const {
  return scale_;
}
inline void MonsterConfig::set_scale(float value) {
  SetDirty();
  set_has_scale();
  scale_ = value;
}

// required float radius = 3;
inline bool MonsterConfig::has_radius() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MonsterConfig::set_has_radius() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MonsterConfig::clear_has_radius() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MonsterConfig::clear_radius() {
  radius_ = 0;
  clear_has_radius();
  SetDirty();
}
inline float MonsterConfig::radius() const {
  return radius_;
}
inline void MonsterConfig::set_radius(float value) {
  SetDirty();
  set_has_radius();
  radius_ = value;
}

// required .Config.NpcType npc_type = 4;
inline bool MonsterConfig::has_npc_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MonsterConfig::set_has_npc_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MonsterConfig::clear_has_npc_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MonsterConfig::clear_npc_type() {
  npc_type_ = 0;
  clear_has_npc_type();
  SetDirty();
}
inline ::Config::NpcType MonsterConfig::npc_type() const {
  return static_cast< ::Config::NpcType >(npc_type_);
}
inline void MonsterConfig::set_npc_type(::Config::NpcType value) {
  assert(::Config::NpcType_IsValid(value));
  SetDirty();
  set_has_npc_type();
  npc_type_ = value;
}

// required .Config.MonsterType monster_type = 5;
inline bool MonsterConfig::has_monster_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MonsterConfig::set_has_monster_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MonsterConfig::clear_has_monster_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MonsterConfig::clear_monster_type() {
  monster_type_ = 0;
  clear_has_monster_type();
  SetDirty();
}
inline ::Config::MonsterType MonsterConfig::monster_type() const {
  return static_cast< ::Config::MonsterType >(monster_type_);
}
inline void MonsterConfig::set_monster_type(::Config::MonsterType value) {
  assert(::Config::MonsterType_IsValid(value));
  SetDirty();
  set_has_monster_type();
  monster_type_ = value;
}

// required int32 rage_time = 6;
inline bool MonsterConfig::has_rage_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MonsterConfig::set_has_rage_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MonsterConfig::clear_has_rage_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MonsterConfig::clear_rage_time() {
  rage_time_ = 0;
  clear_has_rage_time();
  SetDirty();
}
inline ::google::protobuf::int32 MonsterConfig::rage_time() const {
  return rage_time_;
}
inline void MonsterConfig::set_rage_time(::google::protobuf::int32 value) {
  SetDirty();
  set_has_rage_time();
  rage_time_ = value;
}

// required int32 level = 7;
inline bool MonsterConfig::has_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MonsterConfig::set_has_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MonsterConfig::clear_has_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MonsterConfig::clear_level() {
  level_ = 0;
  clear_has_level();
  SetDirty();
}
inline ::google::protobuf::int32 MonsterConfig::level() const {
  return level_;
}
inline void MonsterConfig::set_level(::google::protobuf::int32 value) {
  SetDirty();
  set_has_level();
  level_ = value;
}

// required int32 exp_drop = 8;
inline bool MonsterConfig::has_exp_drop() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MonsterConfig::set_has_exp_drop() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MonsterConfig::clear_has_exp_drop() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MonsterConfig::clear_exp_drop() {
  exp_drop_ = 0;
  clear_has_exp_drop();
  SetDirty();
}
inline ::google::protobuf::int32 MonsterConfig::exp_drop() const {
  return exp_drop_;
}
inline void MonsterConfig::set_exp_drop(::google::protobuf::int32 value) {
  SetDirty();
  set_has_exp_drop();
  exp_drop_ = value;
}

// required int32 gold_drop = 9;
inline bool MonsterConfig::has_gold_drop() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MonsterConfig::set_has_gold_drop() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MonsterConfig::clear_has_gold_drop() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MonsterConfig::clear_gold_drop() {
  gold_drop_ = 0;
  clear_has_gold_drop();
  SetDirty();
}
inline ::google::protobuf::int32 MonsterConfig::gold_drop() const {
  return gold_drop_;
}
inline void MonsterConfig::set_gold_drop(::google::protobuf::int32 value) {
  SetDirty();
  set_has_gold_drop();
  gold_drop_ = value;
}

// required .Packet.BattleInfo battle_info = 10;
inline bool MonsterConfig::has_battle_info() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MonsterConfig::set_has_battle_info() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MonsterConfig::clear_has_battle_info() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MonsterConfig::clear_battle_info() {
  if (battle_info_ != NULL) battle_info_->::Packet::BattleInfo::Clear();
  clear_has_battle_info();
  SetDirty();
}
inline const ::Packet::BattleInfo& MonsterConfig::battle_info() const {
  return battle_info_ != NULL ? *battle_info_ : *default_instance_->battle_info_;
}
inline ::Packet::BattleInfo* MonsterConfig::mutable_battle_info() {
  SetDirty();
  set_has_battle_info();
  if (battle_info_ == NULL) battle_info_ = new ::Packet::BattleInfo;
  return battle_info_;
}
inline ::Packet::BattleInfo* MonsterConfig::release_battle_info() {
  SetDirty();
  clear_has_battle_info();
  ::Packet::BattleInfo* temp = battle_info_;
  battle_info_ = NULL;
  return temp;
}
inline void MonsterConfig::set_allocated_battle_info(::Packet::BattleInfo* battle_info) {
  SetDirty();
  delete battle_info_;
  battle_info_ = battle_info;
  if (battle_info) {
    set_has_battle_info();
  } else {
    clear_has_battle_info();
  }
}

// repeated int32 skill_ids = 11;
inline int MonsterConfig::skill_ids_size() const {
  return skill_ids_.size();
}
inline void MonsterConfig::clear_skill_ids() {
  skill_ids_.Clear();
  SetDirty();
}
inline ::google::protobuf::int32 MonsterConfig::skill_ids(int index) const {
  return skill_ids_.Get(index);
}
inline void MonsterConfig::set_skill_ids(int index, ::google::protobuf::int32 value) {
  SetDirty();
  skill_ids_.Set(index, value);
}
inline void MonsterConfig::add_skill_ids(::google::protobuf::int32 value) {
  SetDirty();
  skill_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MonsterConfig::skill_ids() const {
  return skill_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MonsterConfig::mutable_skill_ids() {
  SetDirty();
  return &skill_ids_;
}

// required int32 ai_strategy = 12;
inline bool MonsterConfig::has_ai_strategy() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MonsterConfig::set_has_ai_strategy() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MonsterConfig::clear_has_ai_strategy() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MonsterConfig::clear_ai_strategy() {
  ai_strategy_ = 0;
  clear_has_ai_strategy();
  SetDirty();
}
inline ::google::protobuf::int32 MonsterConfig::ai_strategy() const {
  return ai_strategy_;
}
inline void MonsterConfig::set_ai_strategy(::google::protobuf::int32 value) {
  SetDirty();
  set_has_ai_strategy();
  ai_strategy_ = value;
}

// required int32 client_res_id = 13;
inline bool MonsterConfig::has_client_res_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MonsterConfig::set_has_client_res_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MonsterConfig::clear_has_client_res_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MonsterConfig::clear_client_res_id() {
  client_res_id_ = 0;
  clear_has_client_res_id();
  SetDirty();
}
inline ::google::protobuf::int32 MonsterConfig::client_res_id() const {
  return client_res_id_;
}
inline void MonsterConfig::set_client_res_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_client_res_id();
  client_res_id_ = value;
}

// required int32 monster_class = 14;
inline bool MonsterConfig::has_monster_class() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MonsterConfig::set_has_monster_class() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MonsterConfig::clear_has_monster_class() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MonsterConfig::clear_monster_class() {
  monster_class_ = 0;
  clear_has_monster_class();
  SetDirty();
}
inline ::google::protobuf::int32 MonsterConfig::monster_class() const {
  return monster_class_;
}
inline void MonsterConfig::set_monster_class(::google::protobuf::int32 value) {
  SetDirty();
  set_has_monster_class();
  monster_class_ = value;
}

// required int32 adapt_group = 15;
inline bool MonsterConfig::has_adapt_group() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MonsterConfig::set_has_adapt_group() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MonsterConfig::clear_has_adapt_group() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MonsterConfig::clear_adapt_group() {
  adapt_group_ = 0;
  clear_has_adapt_group();
  SetDirty();
}
inline ::google::protobuf::int32 MonsterConfig::adapt_group() const {
  return adapt_group_;
}
inline void MonsterConfig::set_adapt_group(::google::protobuf::int32 value) {
  SetDirty();
  set_has_adapt_group();
  adapt_group_ = value;
}

// required int32 life_time = 16;
inline bool MonsterConfig::has_life_time() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MonsterConfig::set_has_life_time() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MonsterConfig::clear_has_life_time() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MonsterConfig::clear_life_time() {
  life_time_ = 0;
  clear_has_life_time();
  SetDirty();
}
inline ::google::protobuf::int32 MonsterConfig::life_time() const {
  return life_time_;
}
inline void MonsterConfig::set_life_time(::google::protobuf::int32 value) {
  SetDirty();
  set_has_life_time();
  life_time_ = value;
}

// -------------------------------------------------------------------

// MonsterAttribute

// required int32 group = 1;
inline bool MonsterAttribute::has_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MonsterAttribute::set_has_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MonsterAttribute::clear_has_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MonsterAttribute::clear_group() {
  group_ = 0;
  clear_has_group();
  SetDirty();
}
inline ::google::protobuf::int32 MonsterAttribute::group() const {
  return group_;
}
inline void MonsterAttribute::set_group(::google::protobuf::int32 value) {
  SetDirty();
  set_has_group();
  group_ = value;
}

// required int32 level = 2;
inline bool MonsterAttribute::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MonsterAttribute::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MonsterAttribute::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MonsterAttribute::clear_level() {
  level_ = 0;
  clear_has_level();
  SetDirty();
}
inline ::google::protobuf::int32 MonsterAttribute::level() const {
  return level_;
}
inline void MonsterAttribute::set_level(::google::protobuf::int32 value) {
  SetDirty();
  set_has_level();
  level_ = value;
}

// required .Packet.BattleInfo battle_info = 3;
inline bool MonsterAttribute::has_battle_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MonsterAttribute::set_has_battle_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MonsterAttribute::clear_has_battle_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MonsterAttribute::clear_battle_info() {
  if (battle_info_ != NULL) battle_info_->::Packet::BattleInfo::Clear();
  clear_has_battle_info();
  SetDirty();
}
inline const ::Packet::BattleInfo& MonsterAttribute::battle_info() const {
  return battle_info_ != NULL ? *battle_info_ : *default_instance_->battle_info_;
}
inline ::Packet::BattleInfo* MonsterAttribute::mutable_battle_info() {
  SetDirty();
  set_has_battle_info();
  if (battle_info_ == NULL) battle_info_ = new ::Packet::BattleInfo;
  return battle_info_;
}
inline ::Packet::BattleInfo* MonsterAttribute::release_battle_info() {
  SetDirty();
  clear_has_battle_info();
  ::Packet::BattleInfo* temp = battle_info_;
  battle_info_ = NULL;
  return temp;
}
inline void MonsterAttribute::set_allocated_battle_info(::Packet::BattleInfo* battle_info) {
  SetDirty();
  delete battle_info_;
  battle_info_ = battle_info;
  if (battle_info) {
    set_has_battle_info();
  } else {
    clear_has_battle_info();
  }
}

// -------------------------------------------------------------------

// MonsterDefine

// required int32 id = 1;
inline bool MonsterDefine::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MonsterDefine::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MonsterDefine::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MonsterDefine::clear_id() {
  id_ = 0;
  clear_has_id();
  SetDirty();
}
inline ::google::protobuf::int32 MonsterDefine::id() const {
  return id_;
}
inline void MonsterDefine::set_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_id();
  id_ = value;
}

// required int32 loc = 2;
inline bool MonsterDefine::has_loc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MonsterDefine::set_has_loc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MonsterDefine::clear_has_loc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MonsterDefine::clear_loc() {
  loc_ = 0;
  clear_has_loc();
  SetDirty();
}
inline ::google::protobuf::int32 MonsterDefine::loc() const {
  return loc_;
}
inline void MonsterDefine::set_loc(::google::protobuf::int32 value) {
  SetDirty();
  set_has_loc();
  loc_ = value;
}

// -------------------------------------------------------------------

// MonsterGroup

// required int32 id = 1;
inline bool MonsterGroup::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MonsterGroup::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MonsterGroup::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MonsterGroup::clear_id() {
  id_ = 0;
  clear_has_id();
  SetDirty();
}
inline ::google::protobuf::int32 MonsterGroup::id() const {
  return id_;
}
inline void MonsterGroup::set_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_id();
  id_ = value;
}

// required int32 mission_id = 2;
inline bool MonsterGroup::has_mission_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MonsterGroup::set_has_mission_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MonsterGroup::clear_has_mission_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MonsterGroup::clear_mission_id() {
  mission_id_ = 0;
  clear_has_mission_id();
  SetDirty();
}
inline ::google::protobuf::int32 MonsterGroup::mission_id() const {
  return mission_id_;
}
inline void MonsterGroup::set_mission_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_mission_id();
  mission_id_ = value;
}

// repeated .Config.MonsterDefine monsters = 4;
inline int MonsterGroup::monsters_size() const {
  return monsters_.size();
}
inline void MonsterGroup::clear_monsters() {
  monsters_.Clear();
  SetDirty();
}
inline const ::Config::MonsterDefine& MonsterGroup::monsters(int index) const {
  return monsters_.Get(index);
}
inline ::Config::MonsterDefine* MonsterGroup::mutable_monsters(int index) {
  SetDirty();
  return monsters_.Mutable(index);
}
inline ::Config::MonsterDefine* MonsterGroup::add_monsters() {
  SetDirty();
  return monsters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Config::MonsterDefine >&
MonsterGroup::monsters() const {
  return monsters_;
}
inline ::google::protobuf::RepeatedPtrField< ::Config::MonsterDefine >*
MonsterGroup::mutable_monsters() {
  SetDirty();
  return &monsters_;
}

// repeated int32 package_id = 5;
inline int MonsterGroup::package_id_size() const {
  return package_id_.size();
}
inline void MonsterGroup::clear_package_id() {
  package_id_.Clear();
  SetDirty();
}
inline ::google::protobuf::int32 MonsterGroup::package_id(int index) const {
  return package_id_.Get(index);
}
inline void MonsterGroup::set_package_id(int index, ::google::protobuf::int32 value) {
  SetDirty();
  package_id_.Set(index, value);
}
inline void MonsterGroup::add_package_id(::google::protobuf::int32 value) {
  SetDirty();
  package_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MonsterGroup::package_id() const {
  return package_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MonsterGroup::mutable_package_id() {
  SetDirty();
  return &package_id_;
}

// repeated int32 package_weight = 6;
inline int MonsterGroup::package_weight_size() const {
  return package_weight_.size();
}
inline void MonsterGroup::clear_package_weight() {
  package_weight_.Clear();
  SetDirty();
}
inline ::google::protobuf::int32 MonsterGroup::package_weight(int index) const {
  return package_weight_.Get(index);
}
inline void MonsterGroup::set_package_weight(int index, ::google::protobuf::int32 value) {
  SetDirty();
  package_weight_.Set(index, value);
}
inline void MonsterGroup::add_package_weight(::google::protobuf::int32 value) {
  SetDirty();
  package_weight_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MonsterGroup::package_weight() const {
  return package_weight_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MonsterGroup::mutable_package_weight() {
  SetDirty();
  return &package_weight_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MonsterConfig_2eproto__INCLUDED
