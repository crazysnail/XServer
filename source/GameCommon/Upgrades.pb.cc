// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Upgrades.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Upgrades.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Packet {

namespace {

const ::google::protobuf::Descriptor* UpgradeItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpgradeItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpgradeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpgradeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpgradeColorReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpgradeColorReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpgradeColorReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpgradeColorReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpgradeLevelReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpgradeLevelReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpgradeLevelReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpgradeLevelReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UpgradeLevelReply_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UpgradeStarReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpgradeStarReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpgradeStarReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpgradeStarReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UpgradeStarReply_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UpgradeSkillReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpgradeSkillReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnhenceEquipReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnhenceEquipReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddEnchantSlotReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddEnchantSlotReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnchantEquipReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnchantEquipReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchEnchantEquipReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchEnchantEquipReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnchantPreviewEle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnchantPreviewEle_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnchantPreview_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnchantPreview_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchEnchantEquipReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchEnchantEquipReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchEnchantEquipConfirmReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchEnchantEquipConfirmReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchEnchantEquipConfirmReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchEnchantEquipConfirmReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BatchEnchantEquipConfirmReply_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* InsetEquipReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InsetEquipReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TakeOutGemReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TakeOutGemReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipInheritReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipInheritReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FixEquipReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FixEquipReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GemFusionReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GemFusionReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CG_GemFusion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_GemFusion_reflection_ = NULL;
const ::google::protobuf::Descriptor* DismantleEquipReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DismantleEquipReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipMagicalReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipMagicalReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Upgrades_2eproto() {
  protobuf_AddDesc_Upgrades_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Upgrades.proto");
  GOOGLE_CHECK(file != NULL);
  UpgradeItemInfo_descriptor_ = file->message_type(0);
  static const int UpgradeItemInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeItemInfo, item_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeItemInfo, item_amount_),
  };
  UpgradeItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpgradeItemInfo_descriptor_,
      UpgradeItemInfo::default_instance_,
      UpgradeItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpgradeItemInfo));
  UpgradeInfo_descriptor_ = file->message_type(1);
  static const int UpgradeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeInfo, actor_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeInfo, items_),
  };
  UpgradeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpgradeInfo_descriptor_,
      UpgradeInfo::default_instance_,
      UpgradeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpgradeInfo));
  UpgradeColorReq_descriptor_ = file->message_type(2);
  static const int UpgradeColorReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeColorReq, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeColorReq, up_to_color_),
  };
  UpgradeColorReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpgradeColorReq_descriptor_,
      UpgradeColorReq::default_instance_,
      UpgradeColorReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeColorReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeColorReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpgradeColorReq));
  UpgradeColorReply_descriptor_ = file->message_type(3);
  static const int UpgradeColorReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeColorReply, actor_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeColorReply, now_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeColorReply, prev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeColorReply, curr_),
  };
  UpgradeColorReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpgradeColorReply_descriptor_,
      UpgradeColorReply::default_instance_,
      UpgradeColorReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeColorReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeColorReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpgradeColorReply));
  UpgradeLevelReq_descriptor_ = file->message_type(4);
  static const int UpgradeLevelReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeLevelReq, one_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeLevelReq, actor_guid_),
  };
  UpgradeLevelReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpgradeLevelReq_descriptor_,
      UpgradeLevelReq::default_instance_,
      UpgradeLevelReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeLevelReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeLevelReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpgradeLevelReq));
  UpgradeLevelReply_descriptor_ = file->message_type(5);
  static const int UpgradeLevelReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeLevelReply, req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeLevelReply, result_),
  };
  UpgradeLevelReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpgradeLevelReply_descriptor_,
      UpgradeLevelReply::default_instance_,
      UpgradeLevelReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeLevelReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeLevelReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpgradeLevelReply));
  UpgradeLevelReply_Result_descriptor_ = UpgradeLevelReply_descriptor_->enum_type(0);
  UpgradeStarReq_descriptor_ = file->message_type(6);
  static const int UpgradeStarReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeStarReq, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeStarReq, up_to_star_),
  };
  UpgradeStarReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpgradeStarReq_descriptor_,
      UpgradeStarReq::default_instance_,
      UpgradeStarReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeStarReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeStarReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpgradeStarReq));
  UpgradeStarReply_descriptor_ = file->message_type(7);
  static const int UpgradeStarReply_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeStarReply, req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeStarReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeStarReply, now_star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeStarReply, prev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeStarReply, curr_),
  };
  UpgradeStarReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpgradeStarReply_descriptor_,
      UpgradeStarReply::default_instance_,
      UpgradeStarReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeStarReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeStarReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpgradeStarReply));
  UpgradeStarReply_Result_descriptor_ = UpgradeStarReply_descriptor_->enum_type(0);
  UpgradeSkillReq_descriptor_ = file->message_type(8);
  static const int UpgradeSkillReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeSkillReq, actor_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeSkillReq, skill_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeSkillReq, up_to_level_),
  };
  UpgradeSkillReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpgradeSkillReq_descriptor_,
      UpgradeSkillReq::default_instance_,
      UpgradeSkillReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeSkillReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeSkillReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpgradeSkillReq));
  EnhenceEquipReq_descriptor_ = file->message_type(9);
  static const int EnhenceEquipReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnhenceEquipReq, equip_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnhenceEquipReq, is_max_),
  };
  EnhenceEquipReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnhenceEquipReq_descriptor_,
      EnhenceEquipReq::default_instance_,
      EnhenceEquipReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnhenceEquipReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnhenceEquipReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnhenceEquipReq));
  AddEnchantSlotReq_descriptor_ = file->message_type(10);
  static const int AddEnchantSlotReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddEnchantSlotReq, equip_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddEnchantSlotReq, slot_index_),
  };
  AddEnchantSlotReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddEnchantSlotReq_descriptor_,
      AddEnchantSlotReq::default_instance_,
      AddEnchantSlotReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddEnchantSlotReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddEnchantSlotReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddEnchantSlotReq));
  EnchantEquipReq_descriptor_ = file->message_type(11);
  static const int EnchantEquipReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantEquipReq, equip_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantEquipReq, lock_slots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantEquipReq, items_),
  };
  EnchantEquipReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnchantEquipReq_descriptor_,
      EnchantEquipReq::default_instance_,
      EnchantEquipReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantEquipReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantEquipReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnchantEquipReq));
  BatchEnchantEquipReq_descriptor_ = file->message_type(12);
  static const int BatchEnchantEquipReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchEnchantEquipReq, equip_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchEnchantEquipReq, lock_slots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchEnchantEquipReq, item_),
  };
  BatchEnchantEquipReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatchEnchantEquipReq_descriptor_,
      BatchEnchantEquipReq::default_instance_,
      BatchEnchantEquipReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchEnchantEquipReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchEnchantEquipReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatchEnchantEquipReq));
  EnchantPreviewEle_descriptor_ = file->message_type(13);
  static const int EnchantPreviewEle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantPreviewEle, effect_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantPreviewEle, effect_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantPreviewEle, max_value_),
  };
  EnchantPreviewEle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnchantPreviewEle_descriptor_,
      EnchantPreviewEle::default_instance_,
      EnchantPreviewEle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantPreviewEle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantPreviewEle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnchantPreviewEle));
  EnchantPreview_descriptor_ = file->message_type(14);
  static const int EnchantPreview_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantPreview, elements_),
  };
  EnchantPreview_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnchantPreview_descriptor_,
      EnchantPreview::default_instance_,
      EnchantPreview_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantPreview, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnchantPreview, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnchantPreview));
  BatchEnchantEquipReply_descriptor_ = file->message_type(15);
  static const int BatchEnchantEquipReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchEnchantEquipReply, req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchEnchantEquipReply, previews_),
  };
  BatchEnchantEquipReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatchEnchantEquipReply_descriptor_,
      BatchEnchantEquipReply::default_instance_,
      BatchEnchantEquipReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchEnchantEquipReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchEnchantEquipReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatchEnchantEquipReply));
  BatchEnchantEquipConfirmReq_descriptor_ = file->message_type(16);
  static const int BatchEnchantEquipConfirmReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchEnchantEquipConfirmReq, equip_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchEnchantEquipConfirmReq, confirm_index_),
  };
  BatchEnchantEquipConfirmReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatchEnchantEquipConfirmReq_descriptor_,
      BatchEnchantEquipConfirmReq::default_instance_,
      BatchEnchantEquipConfirmReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchEnchantEquipConfirmReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchEnchantEquipConfirmReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatchEnchantEquipConfirmReq));
  BatchEnchantEquipConfirmReply_descriptor_ = file->message_type(17);
  static const int BatchEnchantEquipConfirmReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchEnchantEquipConfirmReply, req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchEnchantEquipConfirmReply, result_),
  };
  BatchEnchantEquipConfirmReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatchEnchantEquipConfirmReply_descriptor_,
      BatchEnchantEquipConfirmReply::default_instance_,
      BatchEnchantEquipConfirmReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchEnchantEquipConfirmReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchEnchantEquipConfirmReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatchEnchantEquipConfirmReply));
  BatchEnchantEquipConfirmReply_Result_descriptor_ = BatchEnchantEquipConfirmReply_descriptor_->enum_type(0);
  InsetEquipReq_descriptor_ = file->message_type(18);
  static const int InsetEquipReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsetEquipReq, equip_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsetEquipReq, gem_config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsetEquipReq, index_),
  };
  InsetEquipReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InsetEquipReq_descriptor_,
      InsetEquipReq::default_instance_,
      InsetEquipReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsetEquipReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsetEquipReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InsetEquipReq));
  TakeOutGemReq_descriptor_ = file->message_type(19);
  static const int TakeOutGemReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeOutGemReq, equip_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeOutGemReq, gem_config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeOutGemReq, index_),
  };
  TakeOutGemReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TakeOutGemReq_descriptor_,
      TakeOutGemReq::default_instance_,
      TakeOutGemReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeOutGemReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeOutGemReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TakeOutGemReq));
  EquipInheritReq_descriptor_ = file->message_type(20);
  static const int EquipInheritReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInheritReq, old_equip_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInheritReq, new_equip_guid_),
  };
  EquipInheritReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipInheritReq_descriptor_,
      EquipInheritReq::default_instance_,
      EquipInheritReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInheritReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInheritReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipInheritReq));
  FixEquipReq_descriptor_ = file->message_type(21);
  static const int FixEquipReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixEquipReq, equip_guid_),
  };
  FixEquipReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FixEquipReq_descriptor_,
      FixEquipReq::default_instance_,
      FixEquipReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixEquipReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixEquipReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FixEquipReq));
  GemFusionReq_descriptor_ = file->message_type(22);
  static const int GemFusionReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemFusionReq, gem_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemFusionReq, fusion_all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemFusionReq, cannot_fail_),
  };
  GemFusionReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GemFusionReq_descriptor_,
      GemFusionReq::default_instance_,
      GemFusionReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemFusionReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemFusionReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GemFusionReq));
  CG_GemFusion_descriptor_ = file->message_type(23);
  static const int CG_GemFusion_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_GemFusion, bag_gem_guids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_GemFusion, bag_gem_counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_GemFusion, buy_gem_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_GemFusion, buy_gem_counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_GemFusion, target_gem_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_GemFusion, equip_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_GemFusion, gem_index_),
  };
  CG_GemFusion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_GemFusion_descriptor_,
      CG_GemFusion::default_instance_,
      CG_GemFusion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_GemFusion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_GemFusion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_GemFusion));
  DismantleEquipReq_descriptor_ = file->message_type(24);
  static const int DismantleEquipReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DismantleEquipReq, equip_guids_),
  };
  DismantleEquipReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DismantleEquipReq_descriptor_,
      DismantleEquipReq::default_instance_,
      DismantleEquipReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DismantleEquipReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DismantleEquipReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DismantleEquipReq));
  EquipMagicalReq_descriptor_ = file->message_type(25);
  static const int EquipMagicalReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipMagicalReq, src_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipMagicalReq, des_guid_),
  };
  EquipMagicalReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipMagicalReq_descriptor_,
      EquipMagicalReq::default_instance_,
      EquipMagicalReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipMagicalReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipMagicalReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipMagicalReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Upgrades_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpgradeItemInfo_descriptor_, &UpgradeItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpgradeInfo_descriptor_, &UpgradeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpgradeColorReq_descriptor_, &UpgradeColorReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpgradeColorReply_descriptor_, &UpgradeColorReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpgradeLevelReq_descriptor_, &UpgradeLevelReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpgradeLevelReply_descriptor_, &UpgradeLevelReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpgradeStarReq_descriptor_, &UpgradeStarReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpgradeStarReply_descriptor_, &UpgradeStarReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpgradeSkillReq_descriptor_, &UpgradeSkillReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnhenceEquipReq_descriptor_, &EnhenceEquipReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddEnchantSlotReq_descriptor_, &AddEnchantSlotReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnchantEquipReq_descriptor_, &EnchantEquipReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatchEnchantEquipReq_descriptor_, &BatchEnchantEquipReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnchantPreviewEle_descriptor_, &EnchantPreviewEle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnchantPreview_descriptor_, &EnchantPreview::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatchEnchantEquipReply_descriptor_, &BatchEnchantEquipReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatchEnchantEquipConfirmReq_descriptor_, &BatchEnchantEquipConfirmReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatchEnchantEquipConfirmReply_descriptor_, &BatchEnchantEquipConfirmReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InsetEquipReq_descriptor_, &InsetEquipReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TakeOutGemReq_descriptor_, &TakeOutGemReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipInheritReq_descriptor_, &EquipInheritReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FixEquipReq_descriptor_, &FixEquipReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GemFusionReq_descriptor_, &GemFusionReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_GemFusion_descriptor_, &CG_GemFusion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DismantleEquipReq_descriptor_, &DismantleEquipReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipMagicalReq_descriptor_, &EquipMagicalReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Upgrades_2eproto() {
  delete UpgradeItemInfo::default_instance_;
  delete UpgradeItemInfo_reflection_;
  delete UpgradeInfo::default_instance_;
  delete UpgradeInfo_reflection_;
  delete UpgradeColorReq::default_instance_;
  delete UpgradeColorReq_reflection_;
  delete UpgradeColorReply::default_instance_;
  delete UpgradeColorReply_reflection_;
  delete UpgradeLevelReq::default_instance_;
  delete UpgradeLevelReq_reflection_;
  delete UpgradeLevelReply::default_instance_;
  delete UpgradeLevelReply_reflection_;
  delete UpgradeStarReq::default_instance_;
  delete UpgradeStarReq_reflection_;
  delete UpgradeStarReply::default_instance_;
  delete UpgradeStarReply_reflection_;
  delete UpgradeSkillReq::default_instance_;
  delete UpgradeSkillReq_reflection_;
  delete EnhenceEquipReq::default_instance_;
  delete EnhenceEquipReq_reflection_;
  delete AddEnchantSlotReq::default_instance_;
  delete AddEnchantSlotReq_reflection_;
  delete EnchantEquipReq::default_instance_;
  delete EnchantEquipReq_reflection_;
  delete BatchEnchantEquipReq::default_instance_;
  delete BatchEnchantEquipReq_reflection_;
  delete EnchantPreviewEle::default_instance_;
  delete EnchantPreviewEle_reflection_;
  delete EnchantPreview::default_instance_;
  delete EnchantPreview_reflection_;
  delete BatchEnchantEquipReply::default_instance_;
  delete BatchEnchantEquipReply_reflection_;
  delete BatchEnchantEquipConfirmReq::default_instance_;
  delete BatchEnchantEquipConfirmReq_reflection_;
  delete BatchEnchantEquipConfirmReply::default_instance_;
  delete BatchEnchantEquipConfirmReply_reflection_;
  delete InsetEquipReq::default_instance_;
  delete InsetEquipReq_reflection_;
  delete TakeOutGemReq::default_instance_;
  delete TakeOutGemReq_reflection_;
  delete EquipInheritReq::default_instance_;
  delete EquipInheritReq_reflection_;
  delete FixEquipReq::default_instance_;
  delete FixEquipReq_reflection_;
  delete GemFusionReq::default_instance_;
  delete GemFusionReq_reflection_;
  delete CG_GemFusion::default_instance_;
  delete CG_GemFusion_reflection_;
  delete DismantleEquipReq::default_instance_;
  delete DismantleEquipReq_reflection_;
  delete EquipMagicalReq::default_instance_;
  delete EquipMagicalReq_reflection_;
}

void protobuf_AddDesc_Upgrades_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Packet::protobuf_AddDesc_BattleInfo_2eproto();
  ::Packet::protobuf_AddDesc_ActorBasicInfo_2eproto();
  ::Packet::protobuf_AddDesc_AllPacketEnum_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016Upgrades.proto\022\006Packet\032\020BattleInfo.pro"
    "to\032\024ActorBasicInfo.proto\032\023AllPacketEnum."
    "proto\"9\n\017UpgradeItemInfo\022\021\n\titem_guid\030\001 "
    "\002(\006\022\023\n\013item_amount\030\002 \002(\005\"I\n\013UpgradeInfo\022"
    "\022\n\nactor_guid\030\001 \002(\006\022&\n\005items\030\002 \003(\0132\027.Pac"
    "ket.UpgradeItemInfo\"]\n\017UpgradeColorReq\022!"
    "\n\004info\030\001 \002(\0132\023.Packet.UpgradeInfo\022\'\n\013up_"
    "to_color\030\002 \002(\0162\022.Packet.ActorColor\"\222\001\n\021U"
    "pgradeColorReply\022\022\n\nactor_guid\030\001 \002(\006\022%\n\t"
    "now_color\030\002 \002(\0162\022.Packet.ActorColor\022 \n\004p"
    "rev\030\003 \001(\0132\022.Packet.BattleInfo\022 \n\004curr\030\004 "
    "\001(\0132\022.Packet.BattleInfo\"6\n\017UpgradeLevelR"
    "eq\022\017\n\007one_key\030\001 \002(\010\022\022\n\nactor_guid\030\002 \002(\006\""
    "\340\001\n\021UpgradeLevelReply\022$\n\003req\030\001 \002(\0132\027.Pac"
    "ket.UpgradeLevelReq\0220\n\006result\030\002 \002(\0162 .Pa"
    "cket.UpgradeLevelReply.Result\"s\n\006Result\022"
    "\013\n\007SUCCESS\020\001\022\r\n\tMAX_LEVEL\020\002\022\022\n\016NO_ENOUGH"
    "_ITEM\020\003\022\022\n\016INVALID_TARGET\020\004\022%\n!ITEM_AMOU"
    "NT_SHOULD_MORE_THAN_ZERO\020\005\"Z\n\016UpgradeSta"
    "rReq\022!\n\004info\030\001 \002(\0132\023.Packet.UpgradeInfo\022"
    "%\n\nup_to_star\030\002 \002(\0162\021.Packet.ActorStar\"\236"
    "\002\n\020UpgradeStarReply\022#\n\003req\030\001 \002(\0132\026.Packe"
    "t.UpgradeStarReq\022/\n\006result\030\002 \002(\0162\037.Packe"
    "t.UpgradeStarReply.Result\022#\n\010now_star\030\003 "
    "\001(\0162\021.Packet.ActorStar\022 \n\004prev\030\004 \001(\0132\022.P"
    "acket.BattleInfo\022 \n\004curr\030\005 \001(\0132\022.Packet."
    "BattleInfo\"K\n\006Result\022\013\n\007SUCCESS\020\001\022\014\n\010MAX"
    "_STAR\020\002\022\022\n\016NO_ENOUGH_ITEM\020\003\022\022\n\016INVALID_T"
    "ARGET\020\004\"N\n\017UpgradeSkillReq\022\022\n\nactor_guid"
    "\030\001 \002(\006\022\022\n\nskill_guid\030\002 \003(\006\022\023\n\013up_to_leve"
    "l\030\003 \003(\005\"5\n\017EnhenceEquipReq\022\022\n\nequip_guid"
    "\030\001 \003(\006\022\016\n\006is_max\030\002 \002(\010\";\n\021AddEnchantSlot"
    "Req\022\022\n\nequip_guid\030\001 \002(\006\022\022\n\nslot_index\030\002 "
    "\002(\005\"a\n\017EnchantEquipReq\022\022\n\nequip_guid\030\001 \002"
    "(\006\022\022\n\nlock_slots\030\002 \003(\005\022&\n\005items\030\003 \003(\0132\027."
    "Packet.UpgradeItemInfo\"e\n\024BatchEnchantEq"
    "uipReq\022\022\n\nequip_guid\030\001 \002(\006\022\022\n\nlock_slots"
    "\030\002 \003(\005\022%\n\004item\030\003 \003(\0132\027.Packet.UpgradeIte"
    "mInfo\"Q\n\021EnchantPreviewEle\022\023\n\013effect_typ"
    "e\030\001 \002(\t\022\024\n\014effect_value\030\002 \002(\005\022\021\n\tmax_val"
    "ue\030\003 \002(\005\"=\n\016EnchantPreview\022+\n\010elements\030\001"
    " \003(\0132\031.Packet.EnchantPreviewEle\"m\n\026Batch"
    "EnchantEquipReply\022)\n\003req\030\001 \002(\0132\034.Packet."
    "BatchEnchantEquipReq\022(\n\010previews\030\002 \003(\0132\026"
    ".Packet.EnchantPreview\"H\n\033BatchEnchantEq"
    "uipConfirmReq\022\022\n\nequip_guid\030\001 \002(\006\022\025\n\rcon"
    "firm_index\030\002 \002(\005\"\364\001\n\035BatchEnchantEquipCo"
    "nfirmReply\0220\n\003req\030\001 \002(\0132#.Packet.BatchEn"
    "chantEquipConfirmReq\022<\n\006result\030\002 \002(\0162,.P"
    "acket.BatchEnchantEquipConfirmReply.Resu"
    "lt\"c\n\006Result\022\013\n\007SUCCESS\020\001\022&\n\"NEED_BATCH_"
    "ENCHANT_EQUIP_REQ_FIRST\020\002\022\021\n\rINVALID_EQU"
    "IP\020\003\022\021\n\rINVALID_INDEX\020\004\"I\n\rInsetEquipReq"
    "\022\022\n\nequip_guid\030\001 \003(\006\022\025\n\rgem_config_id\030\002 "
    "\003(\005\022\r\n\005index\030\003 \003(\005\"I\n\rTakeOutGemReq\022\022\n\ne"
    "quip_guid\030\001 \003(\006\022\025\n\rgem_config_id\030\002 \003(\005\022\r"
    "\n\005index\030\003 \003(\005\"A\n\017EquipInheritReq\022\026\n\016old_"
    "equip_guid\030\001 \002(\006\022\026\n\016new_equip_guid\030\002 \002(\006"
    "\"!\n\013FixEquipReq\022\022\n\nequip_guid\030\001 \003(\006\"I\n\014G"
    "emFusionReq\022\020\n\010gem_guid\030\001 \002(\006\022\022\n\nfusion_"
    "all\030\002 \002(\010\022\023\n\013cannot_fail\030\003 \002(\010\"\250\001\n\014CG_Ge"
    "mFusion\022\025\n\rbag_gem_guids\030\001 \003(\006\022\026\n\016bag_ge"
    "m_counts\030\002 \003(\005\022\023\n\013buy_gem_ids\030\003 \003(\005\022\026\n\016b"
    "uy_gem_counts\030\004 \003(\005\022\025\n\rtarget_gem_id\030\005 \002"
    "(\005\022\022\n\nequip_guid\030\006 \001(\006\022\021\n\tgem_index\030\007 \001("
    "\005\"(\n\021DismantleEquipReq\022\023\n\013equip_guids\030\001 "
    "\003(\006\"5\n\017EquipMagicalReq\022\020\n\010src_guid\030\001 \002(\006"
    "\022\020\n\010des_guid\030\002 \002(\006", 2698);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Upgrades.proto", &protobuf_RegisterTypes);
  UpgradeItemInfo::default_instance_ = new UpgradeItemInfo();
  UpgradeInfo::default_instance_ = new UpgradeInfo();
  UpgradeColorReq::default_instance_ = new UpgradeColorReq();
  UpgradeColorReply::default_instance_ = new UpgradeColorReply();
  UpgradeLevelReq::default_instance_ = new UpgradeLevelReq();
  UpgradeLevelReply::default_instance_ = new UpgradeLevelReply();
  UpgradeStarReq::default_instance_ = new UpgradeStarReq();
  UpgradeStarReply::default_instance_ = new UpgradeStarReply();
  UpgradeSkillReq::default_instance_ = new UpgradeSkillReq();
  EnhenceEquipReq::default_instance_ = new EnhenceEquipReq();
  AddEnchantSlotReq::default_instance_ = new AddEnchantSlotReq();
  EnchantEquipReq::default_instance_ = new EnchantEquipReq();
  BatchEnchantEquipReq::default_instance_ = new BatchEnchantEquipReq();
  EnchantPreviewEle::default_instance_ = new EnchantPreviewEle();
  EnchantPreview::default_instance_ = new EnchantPreview();
  BatchEnchantEquipReply::default_instance_ = new BatchEnchantEquipReply();
  BatchEnchantEquipConfirmReq::default_instance_ = new BatchEnchantEquipConfirmReq();
  BatchEnchantEquipConfirmReply::default_instance_ = new BatchEnchantEquipConfirmReply();
  InsetEquipReq::default_instance_ = new InsetEquipReq();
  TakeOutGemReq::default_instance_ = new TakeOutGemReq();
  EquipInheritReq::default_instance_ = new EquipInheritReq();
  FixEquipReq::default_instance_ = new FixEquipReq();
  GemFusionReq::default_instance_ = new GemFusionReq();
  CG_GemFusion::default_instance_ = new CG_GemFusion();
  DismantleEquipReq::default_instance_ = new DismantleEquipReq();
  EquipMagicalReq::default_instance_ = new EquipMagicalReq();
  UpgradeItemInfo::default_instance_->InitAsDefaultInstance();
  UpgradeInfo::default_instance_->InitAsDefaultInstance();
  UpgradeColorReq::default_instance_->InitAsDefaultInstance();
  UpgradeColorReply::default_instance_->InitAsDefaultInstance();
  UpgradeLevelReq::default_instance_->InitAsDefaultInstance();
  UpgradeLevelReply::default_instance_->InitAsDefaultInstance();
  UpgradeStarReq::default_instance_->InitAsDefaultInstance();
  UpgradeStarReply::default_instance_->InitAsDefaultInstance();
  UpgradeSkillReq::default_instance_->InitAsDefaultInstance();
  EnhenceEquipReq::default_instance_->InitAsDefaultInstance();
  AddEnchantSlotReq::default_instance_->InitAsDefaultInstance();
  EnchantEquipReq::default_instance_->InitAsDefaultInstance();
  BatchEnchantEquipReq::default_instance_->InitAsDefaultInstance();
  EnchantPreviewEle::default_instance_->InitAsDefaultInstance();
  EnchantPreview::default_instance_->InitAsDefaultInstance();
  BatchEnchantEquipReply::default_instance_->InitAsDefaultInstance();
  BatchEnchantEquipConfirmReq::default_instance_->InitAsDefaultInstance();
  BatchEnchantEquipConfirmReply::default_instance_->InitAsDefaultInstance();
  InsetEquipReq::default_instance_->InitAsDefaultInstance();
  TakeOutGemReq::default_instance_->InitAsDefaultInstance();
  EquipInheritReq::default_instance_->InitAsDefaultInstance();
  FixEquipReq::default_instance_->InitAsDefaultInstance();
  GemFusionReq::default_instance_->InitAsDefaultInstance();
  CG_GemFusion::default_instance_->InitAsDefaultInstance();
  DismantleEquipReq::default_instance_->InitAsDefaultInstance();
  EquipMagicalReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Upgrades_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Upgrades_2eproto {
  StaticDescriptorInitializer_Upgrades_2eproto() {
    protobuf_AddDesc_Upgrades_2eproto();
  }
} static_descriptor_initializer_Upgrades_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int UpgradeItemInfo::kItemGuidFieldNumber;
const int UpgradeItemInfo::kItemAmountFieldNumber;
#endif  // !_MSC_VER

UpgradeItemInfo::UpgradeItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpgradeItemInfo::InitAsDefaultInstance() {
}

UpgradeItemInfo::UpgradeItemInfo(const UpgradeItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpgradeItemInfo::SharedCtor() {
  _cached_size_ = 0;
  item_guid_ = GOOGLE_ULONGLONG(0);
  item_amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpgradeItemInfo::~UpgradeItemInfo() {
  SharedDtor();
}

void UpgradeItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpgradeItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpgradeItemInfo_descriptor_;
}

const UpgradeItemInfo& UpgradeItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Upgrades_2eproto();
  return *default_instance_;
}

UpgradeItemInfo* UpgradeItemInfo::default_instance_ = NULL;

UpgradeItemInfo* UpgradeItemInfo::New() const {
  return new UpgradeItemInfo;
}

void UpgradeItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_guid_ = GOOGLE_ULONGLONG(0);
    item_amount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool UpgradeItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 item_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &item_guid_)));
          set_has_item_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_amount;
        break;
      }

      // required int32 item_amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_amount_)));
          set_has_item_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void UpgradeItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 item_guid = 1;
  if (has_item_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->item_guid(), output);
  }

  // required int32 item_amount = 2;
  if (has_item_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpgradeItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 item_guid = 1;
  if (has_item_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->item_guid(), target);
  }

  // required int32 item_amount = 2;
  if (has_item_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpgradeItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 item_guid = 1;
    if (has_item_guid()) {
      total_size += 1 + 8;
    }

    // required int32 item_amount = 2;
    if (has_item_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpgradeItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpgradeItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void UpgradeItemInfo::MergeFrom(const UpgradeItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_guid()) {
      set_item_guid(from.item_guid());
    }
    if (from.has_item_amount()) {
      set_item_amount(from.item_amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void UpgradeItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void UpgradeItemInfo::CopyFrom(const UpgradeItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool UpgradeItemInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UpgradeItemInfo::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void UpgradeItemInfo::Swap(UpgradeItemInfo* other) {
  if (other != this) {
    std::swap(item_guid_, other->item_guid_);
    std::swap(item_amount_, other->item_amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata UpgradeItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpgradeItemInfo_descriptor_;
  metadata.reflection = UpgradeItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpgradeInfo::kActorGuidFieldNumber;
const int UpgradeInfo::kItemsFieldNumber;
#endif  // !_MSC_VER

UpgradeInfo::UpgradeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpgradeInfo::InitAsDefaultInstance() {
}

UpgradeInfo::UpgradeInfo(const UpgradeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpgradeInfo::SharedCtor() {
  _cached_size_ = 0;
  actor_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpgradeInfo::~UpgradeInfo() {
  SharedDtor();
}

void UpgradeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpgradeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpgradeInfo_descriptor_;
}

const UpgradeInfo& UpgradeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Upgrades_2eproto();
  return *default_instance_;
}

UpgradeInfo* UpgradeInfo::default_instance_ = NULL;

UpgradeInfo* UpgradeInfo::New() const {
  return new UpgradeInfo;
}

void UpgradeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    actor_guid_ = GOOGLE_ULONGLONG(0);
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool UpgradeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 actor_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &actor_guid_)));
          set_has_actor_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .Packet.UpgradeItemInfo items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void UpgradeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 actor_guid = 1;
  if (has_actor_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->actor_guid(), output);
  }

  // repeated .Packet.UpgradeItemInfo items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpgradeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 actor_guid = 1;
  if (has_actor_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->actor_guid(), target);
  }

  // repeated .Packet.UpgradeItemInfo items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpgradeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 actor_guid = 1;
    if (has_actor_guid()) {
      total_size += 1 + 8;
    }

  }
  // repeated .Packet.UpgradeItemInfo items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpgradeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpgradeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void UpgradeInfo::MergeFrom(const UpgradeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actor_guid()) {
      set_actor_guid(from.actor_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void UpgradeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void UpgradeInfo::CopyFrom(const UpgradeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool UpgradeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void UpgradeInfo::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  for (int i = 0; i < items_size(); i++) {
    this->mutable_items(i)->SetInitialized();
  }
  return;
}

void UpgradeInfo::Swap(UpgradeInfo* other) {
  if (other != this) {
    std::swap(actor_guid_, other->actor_guid_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata UpgradeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpgradeInfo_descriptor_;
  metadata.reflection = UpgradeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpgradeColorReq::kInfoFieldNumber;
const int UpgradeColorReq::kUpToColorFieldNumber;
#endif  // !_MSC_VER

UpgradeColorReq::UpgradeColorReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpgradeColorReq::InitAsDefaultInstance() {
  info_ = const_cast< ::Packet::UpgradeInfo*>(&::Packet::UpgradeInfo::default_instance());
}

UpgradeColorReq::UpgradeColorReq(const UpgradeColorReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpgradeColorReq::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  up_to_color_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpgradeColorReq::~UpgradeColorReq() {
  SharedDtor();
}

void UpgradeColorReq::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void UpgradeColorReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeColorReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpgradeColorReq_descriptor_;
}

const UpgradeColorReq& UpgradeColorReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Upgrades_2eproto();
  return *default_instance_;
}

UpgradeColorReq* UpgradeColorReq::default_instance_ = NULL;

UpgradeColorReq* UpgradeColorReq::New() const {
  return new UpgradeColorReq;
}

void UpgradeColorReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::Packet::UpgradeInfo::Clear();
    }
    up_to_color_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool UpgradeColorReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.UpgradeInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_up_to_color;
        break;
      }

      // required .Packet.ActorColor up_to_color = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_up_to_color:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::ActorColor_IsValid(value)) {
            set_up_to_color(static_cast< ::Packet::ActorColor >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void UpgradeColorReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.UpgradeInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // required .Packet.ActorColor up_to_color = 2;
  if (has_up_to_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->up_to_color(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpgradeColorReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.UpgradeInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // required .Packet.ActorColor up_to_color = 2;
  if (has_up_to_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->up_to_color(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpgradeColorReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.UpgradeInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // required .Packet.ActorColor up_to_color = 2;
    if (has_up_to_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->up_to_color());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeColorReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpgradeColorReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpgradeColorReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void UpgradeColorReq::MergeFrom(const UpgradeColorReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::Packet::UpgradeInfo::MergeFrom(from.info());
    }
    if (from.has_up_to_color()) {
      set_up_to_color(from.up_to_color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void UpgradeColorReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void UpgradeColorReq::CopyFrom(const UpgradeColorReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool UpgradeColorReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void UpgradeColorReq::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  if (has_info()) {
    this->mutable_info()->SetInitialized();
  }
  return;
}

void UpgradeColorReq::Swap(UpgradeColorReq* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(up_to_color_, other->up_to_color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata UpgradeColorReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpgradeColorReq_descriptor_;
  metadata.reflection = UpgradeColorReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpgradeColorReply::kActorGuidFieldNumber;
const int UpgradeColorReply::kNowColorFieldNumber;
const int UpgradeColorReply::kPrevFieldNumber;
const int UpgradeColorReply::kCurrFieldNumber;
#endif  // !_MSC_VER

UpgradeColorReply::UpgradeColorReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpgradeColorReply::InitAsDefaultInstance() {
  prev_ = const_cast< ::Packet::BattleInfo*>(&::Packet::BattleInfo::default_instance());
  curr_ = const_cast< ::Packet::BattleInfo*>(&::Packet::BattleInfo::default_instance());
}

UpgradeColorReply::UpgradeColorReply(const UpgradeColorReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpgradeColorReply::SharedCtor() {
  _cached_size_ = 0;
  actor_guid_ = GOOGLE_ULONGLONG(0);
  now_color_ = 1;
  prev_ = NULL;
  curr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpgradeColorReply::~UpgradeColorReply() {
  SharedDtor();
}

void UpgradeColorReply::SharedDtor() {
  if (this != default_instance_) {
    delete prev_;
    delete curr_;
  }
}

void UpgradeColorReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeColorReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpgradeColorReply_descriptor_;
}

const UpgradeColorReply& UpgradeColorReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Upgrades_2eproto();
  return *default_instance_;
}

UpgradeColorReply* UpgradeColorReply::default_instance_ = NULL;

UpgradeColorReply* UpgradeColorReply::New() const {
  return new UpgradeColorReply;
}

void UpgradeColorReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    actor_guid_ = GOOGLE_ULONGLONG(0);
    now_color_ = 1;
    if (has_prev()) {
      if (prev_ != NULL) prev_->::Packet::BattleInfo::Clear();
    }
    if (has_curr()) {
      if (curr_ != NULL) curr_->::Packet::BattleInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool UpgradeColorReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 actor_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &actor_guid_)));
          set_has_actor_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_now_color;
        break;
      }

      // required .Packet.ActorColor now_color = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_now_color:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::ActorColor_IsValid(value)) {
            set_now_color(static_cast< ::Packet::ActorColor >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_prev;
        break;
      }

      // optional .Packet.BattleInfo prev = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prev()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_curr;
        break;
      }

      // optional .Packet.BattleInfo curr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_curr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_curr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void UpgradeColorReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 actor_guid = 1;
  if (has_actor_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->actor_guid(), output);
  }

  // required .Packet.ActorColor now_color = 2;
  if (has_now_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->now_color(), output);
  }

  // optional .Packet.BattleInfo prev = 3;
  if (has_prev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->prev(), output);
  }

  // optional .Packet.BattleInfo curr = 4;
  if (has_curr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->curr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpgradeColorReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 actor_guid = 1;
  if (has_actor_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->actor_guid(), target);
  }

  // required .Packet.ActorColor now_color = 2;
  if (has_now_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->now_color(), target);
  }

  // optional .Packet.BattleInfo prev = 3;
  if (has_prev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->prev(), target);
  }

  // optional .Packet.BattleInfo curr = 4;
  if (has_curr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->curr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpgradeColorReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 actor_guid = 1;
    if (has_actor_guid()) {
      total_size += 1 + 8;
    }

    // required .Packet.ActorColor now_color = 2;
    if (has_now_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->now_color());
    }

    // optional .Packet.BattleInfo prev = 3;
    if (has_prev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prev());
    }

    // optional .Packet.BattleInfo curr = 4;
    if (has_curr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->curr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeColorReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpgradeColorReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpgradeColorReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void UpgradeColorReply::MergeFrom(const UpgradeColorReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actor_guid()) {
      set_actor_guid(from.actor_guid());
    }
    if (from.has_now_color()) {
      set_now_color(from.now_color());
    }
    if (from.has_prev()) {
      mutable_prev()->::Packet::BattleInfo::MergeFrom(from.prev());
    }
    if (from.has_curr()) {
      mutable_curr()->::Packet::BattleInfo::MergeFrom(from.curr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void UpgradeColorReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void UpgradeColorReply::CopyFrom(const UpgradeColorReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool UpgradeColorReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_prev()) {
    if (!this->prev().IsInitialized()) return false;
  }
  if (has_curr()) {
    if (!this->curr().IsInitialized()) return false;
  }
  return true;
}

void UpgradeColorReply::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  if (has_prev()) {
    this->mutable_prev()->SetInitialized();
  }
  if (has_curr()) {
    this->mutable_curr()->SetInitialized();
  }
  return;
}

void UpgradeColorReply::Swap(UpgradeColorReply* other) {
  if (other != this) {
    std::swap(actor_guid_, other->actor_guid_);
    std::swap(now_color_, other->now_color_);
    std::swap(prev_, other->prev_);
    std::swap(curr_, other->curr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata UpgradeColorReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpgradeColorReply_descriptor_;
  metadata.reflection = UpgradeColorReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpgradeLevelReq::kOneKeyFieldNumber;
const int UpgradeLevelReq::kActorGuidFieldNumber;
#endif  // !_MSC_VER

UpgradeLevelReq::UpgradeLevelReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpgradeLevelReq::InitAsDefaultInstance() {
}

UpgradeLevelReq::UpgradeLevelReq(const UpgradeLevelReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpgradeLevelReq::SharedCtor() {
  _cached_size_ = 0;
  one_key_ = false;
  actor_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpgradeLevelReq::~UpgradeLevelReq() {
  SharedDtor();
}

void UpgradeLevelReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpgradeLevelReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeLevelReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpgradeLevelReq_descriptor_;
}

const UpgradeLevelReq& UpgradeLevelReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Upgrades_2eproto();
  return *default_instance_;
}

UpgradeLevelReq* UpgradeLevelReq::default_instance_ = NULL;

UpgradeLevelReq* UpgradeLevelReq::New() const {
  return new UpgradeLevelReq;
}

void UpgradeLevelReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    one_key_ = false;
    actor_guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool UpgradeLevelReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool one_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &one_key_)));
          set_has_one_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_actor_guid;
        break;
      }

      // required fixed64 actor_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_actor_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &actor_guid_)));
          set_has_actor_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void UpgradeLevelReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool one_key = 1;
  if (has_one_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->one_key(), output);
  }

  // required fixed64 actor_guid = 2;
  if (has_actor_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->actor_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpgradeLevelReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool one_key = 1;
  if (has_one_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->one_key(), target);
  }

  // required fixed64 actor_guid = 2;
  if (has_actor_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->actor_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpgradeLevelReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool one_key = 1;
    if (has_one_key()) {
      total_size += 1 + 1;
    }

    // required fixed64 actor_guid = 2;
    if (has_actor_guid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeLevelReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpgradeLevelReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpgradeLevelReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void UpgradeLevelReq::MergeFrom(const UpgradeLevelReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_one_key()) {
      set_one_key(from.one_key());
    }
    if (from.has_actor_guid()) {
      set_actor_guid(from.actor_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void UpgradeLevelReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void UpgradeLevelReq::CopyFrom(const UpgradeLevelReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool UpgradeLevelReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UpgradeLevelReq::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void UpgradeLevelReq::Swap(UpgradeLevelReq* other) {
  if (other != this) {
    std::swap(one_key_, other->one_key_);
    std::swap(actor_guid_, other->actor_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata UpgradeLevelReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpgradeLevelReq_descriptor_;
  metadata.reflection = UpgradeLevelReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* UpgradeLevelReply_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpgradeLevelReply_Result_descriptor_;
}
bool UpgradeLevelReply_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UpgradeLevelReply_Result UpgradeLevelReply::SUCCESS;
const UpgradeLevelReply_Result UpgradeLevelReply::MAX_LEVEL;
const UpgradeLevelReply_Result UpgradeLevelReply::NO_ENOUGH_ITEM;
const UpgradeLevelReply_Result UpgradeLevelReply::INVALID_TARGET;
const UpgradeLevelReply_Result UpgradeLevelReply::ITEM_AMOUNT_SHOULD_MORE_THAN_ZERO;
const UpgradeLevelReply_Result UpgradeLevelReply::Result_MIN;
const UpgradeLevelReply_Result UpgradeLevelReply::Result_MAX;
const int UpgradeLevelReply::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int UpgradeLevelReply::kReqFieldNumber;
const int UpgradeLevelReply::kResultFieldNumber;
#endif  // !_MSC_VER

UpgradeLevelReply::UpgradeLevelReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpgradeLevelReply::InitAsDefaultInstance() {
  req_ = const_cast< ::Packet::UpgradeLevelReq*>(&::Packet::UpgradeLevelReq::default_instance());
}

UpgradeLevelReply::UpgradeLevelReply(const UpgradeLevelReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpgradeLevelReply::SharedCtor() {
  _cached_size_ = 0;
  req_ = NULL;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpgradeLevelReply::~UpgradeLevelReply() {
  SharedDtor();
}

void UpgradeLevelReply::SharedDtor() {
  if (this != default_instance_) {
    delete req_;
  }
}

void UpgradeLevelReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeLevelReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpgradeLevelReply_descriptor_;
}

const UpgradeLevelReply& UpgradeLevelReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Upgrades_2eproto();
  return *default_instance_;
}

UpgradeLevelReply* UpgradeLevelReply::default_instance_ = NULL;

UpgradeLevelReply* UpgradeLevelReply::New() const {
  return new UpgradeLevelReply;
}

void UpgradeLevelReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_req()) {
      if (req_ != NULL) req_->::Packet::UpgradeLevelReq::Clear();
    }
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool UpgradeLevelReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.UpgradeLevelReq req = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .Packet.UpgradeLevelReply.Result result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::UpgradeLevelReply_Result_IsValid(value)) {
            set_result(static_cast< ::Packet::UpgradeLevelReply_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void UpgradeLevelReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.UpgradeLevelReq req = 1;
  if (has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->req(), output);
  }

  // required .Packet.UpgradeLevelReply.Result result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpgradeLevelReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.UpgradeLevelReq req = 1;
  if (has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->req(), target);
  }

  // required .Packet.UpgradeLevelReply.Result result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpgradeLevelReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.UpgradeLevelReq req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->req());
    }

    // required .Packet.UpgradeLevelReply.Result result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeLevelReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpgradeLevelReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpgradeLevelReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void UpgradeLevelReply::MergeFrom(const UpgradeLevelReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req()) {
      mutable_req()->::Packet::UpgradeLevelReq::MergeFrom(from.req());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void UpgradeLevelReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void UpgradeLevelReply::CopyFrom(const UpgradeLevelReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool UpgradeLevelReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_req()) {
    if (!this->req().IsInitialized()) return false;
  }
  return true;
}

void UpgradeLevelReply::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  if (has_req()) {
    this->mutable_req()->SetInitialized();
  }
  return;
}

void UpgradeLevelReply::Swap(UpgradeLevelReply* other) {
  if (other != this) {
    std::swap(req_, other->req_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata UpgradeLevelReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpgradeLevelReply_descriptor_;
  metadata.reflection = UpgradeLevelReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpgradeStarReq::kInfoFieldNumber;
const int UpgradeStarReq::kUpToStarFieldNumber;
#endif  // !_MSC_VER

UpgradeStarReq::UpgradeStarReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpgradeStarReq::InitAsDefaultInstance() {
  info_ = const_cast< ::Packet::UpgradeInfo*>(&::Packet::UpgradeInfo::default_instance());
}

UpgradeStarReq::UpgradeStarReq(const UpgradeStarReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpgradeStarReq::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  up_to_star_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpgradeStarReq::~UpgradeStarReq() {
  SharedDtor();
}

void UpgradeStarReq::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void UpgradeStarReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeStarReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpgradeStarReq_descriptor_;
}

const UpgradeStarReq& UpgradeStarReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Upgrades_2eproto();
  return *default_instance_;
}

UpgradeStarReq* UpgradeStarReq::default_instance_ = NULL;

UpgradeStarReq* UpgradeStarReq::New() const {
  return new UpgradeStarReq;
}

void UpgradeStarReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::Packet::UpgradeInfo::Clear();
    }
    up_to_star_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool UpgradeStarReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.UpgradeInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_up_to_star;
        break;
      }

      // required .Packet.ActorStar up_to_star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_up_to_star:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::ActorStar_IsValid(value)) {
            set_up_to_star(static_cast< ::Packet::ActorStar >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void UpgradeStarReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.UpgradeInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // required .Packet.ActorStar up_to_star = 2;
  if (has_up_to_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->up_to_star(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpgradeStarReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.UpgradeInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // required .Packet.ActorStar up_to_star = 2;
  if (has_up_to_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->up_to_star(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpgradeStarReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.UpgradeInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // required .Packet.ActorStar up_to_star = 2;
    if (has_up_to_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->up_to_star());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeStarReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpgradeStarReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpgradeStarReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void UpgradeStarReq::MergeFrom(const UpgradeStarReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::Packet::UpgradeInfo::MergeFrom(from.info());
    }
    if (from.has_up_to_star()) {
      set_up_to_star(from.up_to_star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void UpgradeStarReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void UpgradeStarReq::CopyFrom(const UpgradeStarReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool UpgradeStarReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void UpgradeStarReq::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  if (has_info()) {
    this->mutable_info()->SetInitialized();
  }
  return;
}

void UpgradeStarReq::Swap(UpgradeStarReq* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(up_to_star_, other->up_to_star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata UpgradeStarReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpgradeStarReq_descriptor_;
  metadata.reflection = UpgradeStarReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* UpgradeStarReply_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpgradeStarReply_Result_descriptor_;
}
bool UpgradeStarReply_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UpgradeStarReply_Result UpgradeStarReply::SUCCESS;
const UpgradeStarReply_Result UpgradeStarReply::MAX_STAR;
const UpgradeStarReply_Result UpgradeStarReply::NO_ENOUGH_ITEM;
const UpgradeStarReply_Result UpgradeStarReply::INVALID_TARGET;
const UpgradeStarReply_Result UpgradeStarReply::Result_MIN;
const UpgradeStarReply_Result UpgradeStarReply::Result_MAX;
const int UpgradeStarReply::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int UpgradeStarReply::kReqFieldNumber;
const int UpgradeStarReply::kResultFieldNumber;
const int UpgradeStarReply::kNowStarFieldNumber;
const int UpgradeStarReply::kPrevFieldNumber;
const int UpgradeStarReply::kCurrFieldNumber;
#endif  // !_MSC_VER

UpgradeStarReply::UpgradeStarReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpgradeStarReply::InitAsDefaultInstance() {
  req_ = const_cast< ::Packet::UpgradeStarReq*>(&::Packet::UpgradeStarReq::default_instance());
  prev_ = const_cast< ::Packet::BattleInfo*>(&::Packet::BattleInfo::default_instance());
  curr_ = const_cast< ::Packet::BattleInfo*>(&::Packet::BattleInfo::default_instance());
}

UpgradeStarReply::UpgradeStarReply(const UpgradeStarReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpgradeStarReply::SharedCtor() {
  _cached_size_ = 0;
  req_ = NULL;
  result_ = 1;
  now_star_ = 1;
  prev_ = NULL;
  curr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpgradeStarReply::~UpgradeStarReply() {
  SharedDtor();
}

void UpgradeStarReply::SharedDtor() {
  if (this != default_instance_) {
    delete req_;
    delete prev_;
    delete curr_;
  }
}

void UpgradeStarReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeStarReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpgradeStarReply_descriptor_;
}

const UpgradeStarReply& UpgradeStarReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Upgrades_2eproto();
  return *default_instance_;
}

UpgradeStarReply* UpgradeStarReply::default_instance_ = NULL;

UpgradeStarReply* UpgradeStarReply::New() const {
  return new UpgradeStarReply;
}

void UpgradeStarReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_req()) {
      if (req_ != NULL) req_->::Packet::UpgradeStarReq::Clear();
    }
    result_ = 1;
    now_star_ = 1;
    if (has_prev()) {
      if (prev_ != NULL) prev_->::Packet::BattleInfo::Clear();
    }
    if (has_curr()) {
      if (curr_ != NULL) curr_->::Packet::BattleInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool UpgradeStarReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.UpgradeStarReq req = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .Packet.UpgradeStarReply.Result result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::UpgradeStarReply_Result_IsValid(value)) {
            set_result(static_cast< ::Packet::UpgradeStarReply_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_now_star;
        break;
      }

      // optional .Packet.ActorStar now_star = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_now_star:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::ActorStar_IsValid(value)) {
            set_now_star(static_cast< ::Packet::ActorStar >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_prev;
        break;
      }

      // optional .Packet.BattleInfo prev = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prev()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_curr;
        break;
      }

      // optional .Packet.BattleInfo curr = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_curr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_curr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void UpgradeStarReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.UpgradeStarReq req = 1;
  if (has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->req(), output);
  }

  // required .Packet.UpgradeStarReply.Result result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional .Packet.ActorStar now_star = 3;
  if (has_now_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->now_star(), output);
  }

  // optional .Packet.BattleInfo prev = 4;
  if (has_prev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->prev(), output);
  }

  // optional .Packet.BattleInfo curr = 5;
  if (has_curr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->curr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpgradeStarReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.UpgradeStarReq req = 1;
  if (has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->req(), target);
  }

  // required .Packet.UpgradeStarReply.Result result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional .Packet.ActorStar now_star = 3;
  if (has_now_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->now_star(), target);
  }

  // optional .Packet.BattleInfo prev = 4;
  if (has_prev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->prev(), target);
  }

  // optional .Packet.BattleInfo curr = 5;
  if (has_curr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->curr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpgradeStarReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.UpgradeStarReq req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->req());
    }

    // required .Packet.UpgradeStarReply.Result result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .Packet.ActorStar now_star = 3;
    if (has_now_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->now_star());
    }

    // optional .Packet.BattleInfo prev = 4;
    if (has_prev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prev());
    }

    // optional .Packet.BattleInfo curr = 5;
    if (has_curr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->curr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeStarReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpgradeStarReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpgradeStarReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void UpgradeStarReply::MergeFrom(const UpgradeStarReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req()) {
      mutable_req()->::Packet::UpgradeStarReq::MergeFrom(from.req());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_now_star()) {
      set_now_star(from.now_star());
    }
    if (from.has_prev()) {
      mutable_prev()->::Packet::BattleInfo::MergeFrom(from.prev());
    }
    if (from.has_curr()) {
      mutable_curr()->::Packet::BattleInfo::MergeFrom(from.curr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void UpgradeStarReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void UpgradeStarReply::CopyFrom(const UpgradeStarReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool UpgradeStarReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_req()) {
    if (!this->req().IsInitialized()) return false;
  }
  if (has_prev()) {
    if (!this->prev().IsInitialized()) return false;
  }
  if (has_curr()) {
    if (!this->curr().IsInitialized()) return false;
  }
  return true;
}

void UpgradeStarReply::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  if (has_req()) {
    this->mutable_req()->SetInitialized();
  }
  if (has_prev()) {
    this->mutable_prev()->SetInitialized();
  }
  if (has_curr()) {
    this->mutable_curr()->SetInitialized();
  }
  return;
}

void UpgradeStarReply::Swap(UpgradeStarReply* other) {
  if (other != this) {
    std::swap(req_, other->req_);
    std::swap(result_, other->result_);
    std::swap(now_star_, other->now_star_);
    std::swap(prev_, other->prev_);
    std::swap(curr_, other->curr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata UpgradeStarReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpgradeStarReply_descriptor_;
  metadata.reflection = UpgradeStarReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpgradeSkillReq::kActorGuidFieldNumber;
const int UpgradeSkillReq::kSkillGuidFieldNumber;
const int UpgradeSkillReq::kUpToLevelFieldNumber;
#endif  // !_MSC_VER

UpgradeSkillReq::UpgradeSkillReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpgradeSkillReq::InitAsDefaultInstance() {
}

UpgradeSkillReq::UpgradeSkillReq(const UpgradeSkillReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpgradeSkillReq::SharedCtor() {
  _cached_size_ = 0;
  actor_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpgradeSkillReq::~UpgradeSkillReq() {
  SharedDtor();
}

void UpgradeSkillReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpgradeSkillReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeSkillReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpgradeSkillReq_descriptor_;
}

const UpgradeSkillReq& UpgradeSkillReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Upgrades_2eproto();
  return *default_instance_;
}

UpgradeSkillReq* UpgradeSkillReq::default_instance_ = NULL;

UpgradeSkillReq* UpgradeSkillReq::New() const {
  return new UpgradeSkillReq;
}

void UpgradeSkillReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    actor_guid_ = GOOGLE_ULONGLONG(0);
  }
  skill_guid_.Clear();
  up_to_level_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool UpgradeSkillReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 actor_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &actor_guid_)));
          set_has_actor_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_skill_guid;
        break;
      }

      // repeated fixed64 skill_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_skill_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17, input, this->mutable_skill_guid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_skill_guid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_skill_guid;
        if (input->ExpectTag(24)) goto parse_up_to_level;
        break;
      }

      // repeated int32 up_to_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_up_to_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_up_to_level())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_up_to_level())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_up_to_level;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void UpgradeSkillReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 actor_guid = 1;
  if (has_actor_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->actor_guid(), output);
  }

  // repeated fixed64 skill_guid = 2;
  for (int i = 0; i < this->skill_guid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->skill_guid(i), output);
  }

  // repeated int32 up_to_level = 3;
  for (int i = 0; i < this->up_to_level_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->up_to_level(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpgradeSkillReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 actor_guid = 1;
  if (has_actor_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->actor_guid(), target);
  }

  // repeated fixed64 skill_guid = 2;
  for (int i = 0; i < this->skill_guid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(2, this->skill_guid(i), target);
  }

  // repeated int32 up_to_level = 3;
  for (int i = 0; i < this->up_to_level_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->up_to_level(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpgradeSkillReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 actor_guid = 1;
    if (has_actor_guid()) {
      total_size += 1 + 8;
    }

  }
  // repeated fixed64 skill_guid = 2;
  {
    int data_size = 0;
    data_size = 8 * this->skill_guid_size();
    total_size += 1 * this->skill_guid_size() + data_size;
  }

  // repeated int32 up_to_level = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->up_to_level_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->up_to_level(i));
    }
    total_size += 1 * this->up_to_level_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeSkillReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpgradeSkillReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpgradeSkillReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void UpgradeSkillReq::MergeFrom(const UpgradeSkillReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_guid_.MergeFrom(from.skill_guid_);
  up_to_level_.MergeFrom(from.up_to_level_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actor_guid()) {
      set_actor_guid(from.actor_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void UpgradeSkillReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void UpgradeSkillReq::CopyFrom(const UpgradeSkillReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool UpgradeSkillReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UpgradeSkillReq::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void UpgradeSkillReq::Swap(UpgradeSkillReq* other) {
  if (other != this) {
    std::swap(actor_guid_, other->actor_guid_);
    skill_guid_.Swap(&other->skill_guid_);
    up_to_level_.Swap(&other->up_to_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata UpgradeSkillReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpgradeSkillReq_descriptor_;
  metadata.reflection = UpgradeSkillReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnhenceEquipReq::kEquipGuidFieldNumber;
const int EnhenceEquipReq::kIsMaxFieldNumber;
#endif  // !_MSC_VER

EnhenceEquipReq::EnhenceEquipReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnhenceEquipReq::InitAsDefaultInstance() {
}

EnhenceEquipReq::EnhenceEquipReq(const EnhenceEquipReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnhenceEquipReq::SharedCtor() {
  _cached_size_ = 0;
  is_max_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnhenceEquipReq::~EnhenceEquipReq() {
  SharedDtor();
}

void EnhenceEquipReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnhenceEquipReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnhenceEquipReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnhenceEquipReq_descriptor_;
}

const EnhenceEquipReq& EnhenceEquipReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Upgrades_2eproto();
  return *default_instance_;
}

EnhenceEquipReq* EnhenceEquipReq::default_instance_ = NULL;

EnhenceEquipReq* EnhenceEquipReq::New() const {
  return new EnhenceEquipReq;
}

void EnhenceEquipReq::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    is_max_ = false;
  }
  equip_guid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool EnhenceEquipReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 equip_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_equip_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9, input, this->mutable_equip_guid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_equip_guid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_equip_guid;
        if (input->ExpectTag(16)) goto parse_is_max;
        break;
      }

      // required bool is_max = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_max_)));
          set_has_is_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void EnhenceEquipReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated fixed64 equip_guid = 1;
  for (int i = 0; i < this->equip_guid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->equip_guid(i), output);
  }

  // required bool is_max = 2;
  if (has_is_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_max(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnhenceEquipReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated fixed64 equip_guid = 1;
  for (int i = 0; i < this->equip_guid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(1, this->equip_guid(i), target);
  }

  // required bool is_max = 2;
  if (has_is_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_max(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnhenceEquipReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool is_max = 2;
    if (has_is_max()) {
      total_size += 1 + 1;
    }

  }
  // repeated fixed64 equip_guid = 1;
  {
    int data_size = 0;
    data_size = 8 * this->equip_guid_size();
    total_size += 1 * this->equip_guid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnhenceEquipReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnhenceEquipReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnhenceEquipReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void EnhenceEquipReq::MergeFrom(const EnhenceEquipReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_guid_.MergeFrom(from.equip_guid_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_is_max()) {
      set_is_max(from.is_max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void EnhenceEquipReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void EnhenceEquipReq::CopyFrom(const EnhenceEquipReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool EnhenceEquipReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void EnhenceEquipReq::SetInitialized() {
  _has_bits_[0] |= 0x00000002;

  return;
}

void EnhenceEquipReq::Swap(EnhenceEquipReq* other) {
  if (other != this) {
    equip_guid_.Swap(&other->equip_guid_);
    std::swap(is_max_, other->is_max_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata EnhenceEquipReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnhenceEquipReq_descriptor_;
  metadata.reflection = EnhenceEquipReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddEnchantSlotReq::kEquipGuidFieldNumber;
const int AddEnchantSlotReq::kSlotIndexFieldNumber;
#endif  // !_MSC_VER

AddEnchantSlotReq::AddEnchantSlotReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddEnchantSlotReq::InitAsDefaultInstance() {
}

AddEnchantSlotReq::AddEnchantSlotReq(const AddEnchantSlotReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddEnchantSlotReq::SharedCtor() {
  _cached_size_ = 0;
  equip_guid_ = GOOGLE_ULONGLONG(0);
  slot_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddEnchantSlotReq::~AddEnchantSlotReq() {
  SharedDtor();
}

void AddEnchantSlotReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddEnchantSlotReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddEnchantSlotReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddEnchantSlotReq_descriptor_;
}

const AddEnchantSlotReq& AddEnchantSlotReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Upgrades_2eproto();
  return *default_instance_;
}

AddEnchantSlotReq* AddEnchantSlotReq::default_instance_ = NULL;

AddEnchantSlotReq* AddEnchantSlotReq::New() const {
  return new AddEnchantSlotReq;
}

void AddEnchantSlotReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_guid_ = GOOGLE_ULONGLONG(0);
    slot_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool AddEnchantSlotReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 equip_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &equip_guid_)));
          set_has_equip_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_slot_index;
        break;
      }

      // required int32 slot_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_index_)));
          set_has_slot_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void AddEnchantSlotReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 equip_guid = 1;
  if (has_equip_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->equip_guid(), output);
  }

  // required int32 slot_index = 2;
  if (has_slot_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slot_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddEnchantSlotReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 equip_guid = 1;
  if (has_equip_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->equip_guid(), target);
  }

  // required int32 slot_index = 2;
  if (has_slot_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slot_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddEnchantSlotReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 equip_guid = 1;
    if (has_equip_guid()) {
      total_size += 1 + 8;
    }

    // required int32 slot_index = 2;
    if (has_slot_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddEnchantSlotReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddEnchantSlotReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddEnchantSlotReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void AddEnchantSlotReq::MergeFrom(const AddEnchantSlotReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_guid()) {
      set_equip_guid(from.equip_guid());
    }
    if (from.has_slot_index()) {
      set_slot_index(from.slot_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void AddEnchantSlotReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void AddEnchantSlotReq::CopyFrom(const AddEnchantSlotReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool AddEnchantSlotReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AddEnchantSlotReq::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void AddEnchantSlotReq::Swap(AddEnchantSlotReq* other) {
  if (other != this) {
    std::swap(equip_guid_, other->equip_guid_);
    std::swap(slot_index_, other->slot_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata AddEnchantSlotReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddEnchantSlotReq_descriptor_;
  metadata.reflection = AddEnchantSlotReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnchantEquipReq::kEquipGuidFieldNumber;
const int EnchantEquipReq::kLockSlotsFieldNumber;
const int EnchantEquipReq::kItemsFieldNumber;
#endif  // !_MSC_VER

EnchantEquipReq::EnchantEquipReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnchantEquipReq::InitAsDefaultInstance() {
}

EnchantEquipReq::EnchantEquipReq(const EnchantEquipReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnchantEquipReq::SharedCtor() {
  _cached_size_ = 0;
  equip_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnchantEquipReq::~EnchantEquipReq() {
  SharedDtor();
}

void EnchantEquipReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnchantEquipReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnchantEquipReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnchantEquipReq_descriptor_;
}

const EnchantEquipReq& EnchantEquipReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Upgrades_2eproto();
  return *default_instance_;
}

EnchantEquipReq* EnchantEquipReq::default_instance_ = NULL;

EnchantEquipReq* EnchantEquipReq::New() const {
  return new EnchantEquipReq;
}

void EnchantEquipReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_guid_ = GOOGLE_ULONGLONG(0);
  }
  lock_slots_.Clear();
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool EnchantEquipReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 equip_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &equip_guid_)));
          set_has_equip_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lock_slots;
        break;
      }

      // repeated int32 lock_slots = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lock_slots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_lock_slots())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lock_slots())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lock_slots;
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .Packet.UpgradeItemInfo items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void EnchantEquipReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 equip_guid = 1;
  if (has_equip_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->equip_guid(), output);
  }

  // repeated int32 lock_slots = 2;
  for (int i = 0; i < this->lock_slots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->lock_slots(i), output);
  }

  // repeated .Packet.UpgradeItemInfo items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnchantEquipReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 equip_guid = 1;
  if (has_equip_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->equip_guid(), target);
  }

  // repeated int32 lock_slots = 2;
  for (int i = 0; i < this->lock_slots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->lock_slots(i), target);
  }

  // repeated .Packet.UpgradeItemInfo items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnchantEquipReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 equip_guid = 1;
    if (has_equip_guid()) {
      total_size += 1 + 8;
    }

  }
  // repeated int32 lock_slots = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->lock_slots_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lock_slots(i));
    }
    total_size += 1 * this->lock_slots_size() + data_size;
  }

  // repeated .Packet.UpgradeItemInfo items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnchantEquipReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnchantEquipReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnchantEquipReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void EnchantEquipReq::MergeFrom(const EnchantEquipReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  lock_slots_.MergeFrom(from.lock_slots_);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_guid()) {
      set_equip_guid(from.equip_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void EnchantEquipReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void EnchantEquipReq::CopyFrom(const EnchantEquipReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool EnchantEquipReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void EnchantEquipReq::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  for (int i = 0; i < items_size(); i++) {
    this->mutable_items(i)->SetInitialized();
  }
  return;
}

void EnchantEquipReq::Swap(EnchantEquipReq* other) {
  if (other != this) {
    std::swap(equip_guid_, other->equip_guid_);
    lock_slots_.Swap(&other->lock_slots_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata EnchantEquipReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnchantEquipReq_descriptor_;
  metadata.reflection = EnchantEquipReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BatchEnchantEquipReq::kEquipGuidFieldNumber;
const int BatchEnchantEquipReq::kLockSlotsFieldNumber;
const int BatchEnchantEquipReq::kItemFieldNumber;
#endif  // !_MSC_VER

BatchEnchantEquipReq::BatchEnchantEquipReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BatchEnchantEquipReq::InitAsDefaultInstance() {
}

BatchEnchantEquipReq::BatchEnchantEquipReq(const BatchEnchantEquipReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BatchEnchantEquipReq::SharedCtor() {
  _cached_size_ = 0;
  equip_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchEnchantEquipReq::~BatchEnchantEquipReq() {
  SharedDtor();
}

void BatchEnchantEquipReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BatchEnchantEquipReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchEnchantEquipReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchEnchantEquipReq_descriptor_;
}

const BatchEnchantEquipReq& BatchEnchantEquipReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Upgrades_2eproto();
  return *default_instance_;
}

BatchEnchantEquipReq* BatchEnchantEquipReq::default_instance_ = NULL;

BatchEnchantEquipReq* BatchEnchantEquipReq::New() const {
  return new BatchEnchantEquipReq;
}

void BatchEnchantEquipReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_guid_ = GOOGLE_ULONGLONG(0);
  }
  lock_slots_.Clear();
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool BatchEnchantEquipReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 equip_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &equip_guid_)));
          set_has_equip_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lock_slots;
        break;
      }

      // repeated int32 lock_slots = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lock_slots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_lock_slots())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lock_slots())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lock_slots;
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // repeated .Packet.UpgradeItemInfo item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void BatchEnchantEquipReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 equip_guid = 1;
  if (has_equip_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->equip_guid(), output);
  }

  // repeated int32 lock_slots = 2;
  for (int i = 0; i < this->lock_slots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->lock_slots(i), output);
  }

  // repeated .Packet.UpgradeItemInfo item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BatchEnchantEquipReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 equip_guid = 1;
  if (has_equip_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->equip_guid(), target);
  }

  // repeated int32 lock_slots = 2;
  for (int i = 0; i < this->lock_slots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->lock_slots(i), target);
  }

  // repeated .Packet.UpgradeItemInfo item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BatchEnchantEquipReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 equip_guid = 1;
    if (has_equip_guid()) {
      total_size += 1 + 8;
    }

  }
  // repeated int32 lock_slots = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->lock_slots_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lock_slots(i));
    }
    total_size += 1 * this->lock_slots_size() + data_size;
  }

  // repeated .Packet.UpgradeItemInfo item = 3;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchEnchantEquipReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatchEnchantEquipReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatchEnchantEquipReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void BatchEnchantEquipReq::MergeFrom(const BatchEnchantEquipReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  lock_slots_.MergeFrom(from.lock_slots_);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_guid()) {
      set_equip_guid(from.equip_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void BatchEnchantEquipReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void BatchEnchantEquipReq::CopyFrom(const BatchEnchantEquipReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool BatchEnchantEquipReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void BatchEnchantEquipReq::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  for (int i = 0; i < item_size(); i++) {
    this->mutable_item(i)->SetInitialized();
  }
  return;
}

void BatchEnchantEquipReq::Swap(BatchEnchantEquipReq* other) {
  if (other != this) {
    std::swap(equip_guid_, other->equip_guid_);
    lock_slots_.Swap(&other->lock_slots_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata BatchEnchantEquipReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchEnchantEquipReq_descriptor_;
  metadata.reflection = BatchEnchantEquipReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnchantPreviewEle::kEffectTypeFieldNumber;
const int EnchantPreviewEle::kEffectValueFieldNumber;
const int EnchantPreviewEle::kMaxValueFieldNumber;
#endif  // !_MSC_VER

EnchantPreviewEle::EnchantPreviewEle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnchantPreviewEle::InitAsDefaultInstance() {
}

EnchantPreviewEle::EnchantPreviewEle(const EnchantPreviewEle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnchantPreviewEle::SharedCtor() {
  _cached_size_ = 0;
  effect_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  effect_value_ = 0;
  max_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnchantPreviewEle::~EnchantPreviewEle() {
  SharedDtor();
}

void EnchantPreviewEle::SharedDtor() {
  if (effect_type_ != &::google::protobuf::internal::kEmptyString) {
    delete effect_type_;
  }
  if (this != default_instance_) {
  }
}

void EnchantPreviewEle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnchantPreviewEle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnchantPreviewEle_descriptor_;
}

const EnchantPreviewEle& EnchantPreviewEle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Upgrades_2eproto();
  return *default_instance_;
}

EnchantPreviewEle* EnchantPreviewEle::default_instance_ = NULL;

EnchantPreviewEle* EnchantPreviewEle::New() const {
  return new EnchantPreviewEle;
}

void EnchantPreviewEle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_effect_type()) {
      if (effect_type_ != &::google::protobuf::internal::kEmptyString) {
        effect_type_->clear();
      }
    }
    effect_value_ = 0;
    max_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool EnchantPreviewEle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string effect_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_effect_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->effect_type().data(), this->effect_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_effect_value;
        break;
      }

      // required int32 effect_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effect_value_)));
          set_has_effect_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_value;
        break;
      }

      // required int32 max_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_value_)));
          set_has_max_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void EnchantPreviewEle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string effect_type = 1;
  if (has_effect_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->effect_type().data(), this->effect_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->effect_type(), output);
  }

  // required int32 effect_value = 2;
  if (has_effect_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->effect_value(), output);
  }

  // required int32 max_value = 3;
  if (has_max_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnchantPreviewEle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string effect_type = 1;
  if (has_effect_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->effect_type().data(), this->effect_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->effect_type(), target);
  }

  // required int32 effect_value = 2;
  if (has_effect_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->effect_value(), target);
  }

  // required int32 max_value = 3;
  if (has_max_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnchantPreviewEle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string effect_type = 1;
    if (has_effect_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->effect_type());
    }

    // required int32 effect_value = 2;
    if (has_effect_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effect_value());
    }

    // required int32 max_value = 3;
    if (has_max_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnchantPreviewEle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnchantPreviewEle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnchantPreviewEle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void EnchantPreviewEle::MergeFrom(const EnchantPreviewEle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_effect_type()) {
      set_effect_type(from.effect_type());
    }
    if (from.has_effect_value()) {
      set_effect_value(from.effect_value());
    }
    if (from.has_max_value()) {
      set_max_value(from.max_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void EnchantPreviewEle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void EnchantPreviewEle::CopyFrom(const EnchantPreviewEle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool EnchantPreviewEle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void EnchantPreviewEle::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  return;
}

void EnchantPreviewEle::Swap(EnchantPreviewEle* other) {
  if (other != this) {
    std::swap(effect_type_, other->effect_type_);
    std::swap(effect_value_, other->effect_value_);
    std::swap(max_value_, other->max_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata EnchantPreviewEle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnchantPreviewEle_descriptor_;
  metadata.reflection = EnchantPreviewEle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnchantPreview::kElementsFieldNumber;
#endif  // !_MSC_VER

EnchantPreview::EnchantPreview()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnchantPreview::InitAsDefaultInstance() {
}

EnchantPreview::EnchantPreview(const EnchantPreview& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnchantPreview::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnchantPreview::~EnchantPreview() {
  SharedDtor();
}

void EnchantPreview::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnchantPreview::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnchantPreview::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnchantPreview_descriptor_;
}

const EnchantPreview& EnchantPreview::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Upgrades_2eproto();
  return *default_instance_;
}

EnchantPreview* EnchantPreview::default_instance_ = NULL;

EnchantPreview* EnchantPreview::New() const {
  return new EnchantPreview;
}

void EnchantPreview::Clear() {
  elements_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool EnchantPreview::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.EnchantPreviewEle elements = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_elements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_elements()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_elements;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void EnchantPreview::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.EnchantPreviewEle elements = 1;
  for (int i = 0; i < this->elements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->elements(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnchantPreview::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.EnchantPreviewEle elements = 1;
  for (int i = 0; i < this->elements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elements(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnchantPreview::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.EnchantPreviewEle elements = 1;
  total_size += 1 * this->elements_size();
  for (int i = 0; i < this->elements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elements(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnchantPreview::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnchantPreview* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnchantPreview*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void EnchantPreview::MergeFrom(const EnchantPreview& from) {
  GOOGLE_CHECK_NE(&from, this);
  elements_.MergeFrom(from.elements_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void EnchantPreview::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void EnchantPreview::CopyFrom(const EnchantPreview& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool EnchantPreview::IsInitialized() const {

  for (int i = 0; i < elements_size(); i++) {
    if (!this->elements(i).IsInitialized()) return false;
  }
  return true;
}

void EnchantPreview::SetInitialized() {

  for (int i = 0; i < elements_size(); i++) {
    this->mutable_elements(i)->SetInitialized();
  }
  return;
}

void EnchantPreview::Swap(EnchantPreview* other) {
  if (other != this) {
    elements_.Swap(&other->elements_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata EnchantPreview::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnchantPreview_descriptor_;
  metadata.reflection = EnchantPreview_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BatchEnchantEquipReply::kReqFieldNumber;
const int BatchEnchantEquipReply::kPreviewsFieldNumber;
#endif  // !_MSC_VER

BatchEnchantEquipReply::BatchEnchantEquipReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BatchEnchantEquipReply::InitAsDefaultInstance() {
  req_ = const_cast< ::Packet::BatchEnchantEquipReq*>(&::Packet::BatchEnchantEquipReq::default_instance());
}

BatchEnchantEquipReply::BatchEnchantEquipReply(const BatchEnchantEquipReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BatchEnchantEquipReply::SharedCtor() {
  _cached_size_ = 0;
  req_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchEnchantEquipReply::~BatchEnchantEquipReply() {
  SharedDtor();
}

void BatchEnchantEquipReply::SharedDtor() {
  if (this != default_instance_) {
    delete req_;
  }
}

void BatchEnchantEquipReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchEnchantEquipReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchEnchantEquipReply_descriptor_;
}

const BatchEnchantEquipReply& BatchEnchantEquipReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Upgrades_2eproto();
  return *default_instance_;
}

BatchEnchantEquipReply* BatchEnchantEquipReply::default_instance_ = NULL;

BatchEnchantEquipReply* BatchEnchantEquipReply::New() const {
  return new BatchEnchantEquipReply;
}

void BatchEnchantEquipReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_req()) {
      if (req_ != NULL) req_->::Packet::BatchEnchantEquipReq::Clear();
    }
  }
  previews_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool BatchEnchantEquipReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.BatchEnchantEquipReq req = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_previews;
        break;
      }

      // repeated .Packet.EnchantPreview previews = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_previews:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_previews()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_previews;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void BatchEnchantEquipReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.BatchEnchantEquipReq req = 1;
  if (has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->req(), output);
  }

  // repeated .Packet.EnchantPreview previews = 2;
  for (int i = 0; i < this->previews_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->previews(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BatchEnchantEquipReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.BatchEnchantEquipReq req = 1;
  if (has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->req(), target);
  }

  // repeated .Packet.EnchantPreview previews = 2;
  for (int i = 0; i < this->previews_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->previews(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BatchEnchantEquipReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.BatchEnchantEquipReq req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->req());
    }

  }
  // repeated .Packet.EnchantPreview previews = 2;
  total_size += 1 * this->previews_size();
  for (int i = 0; i < this->previews_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->previews(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchEnchantEquipReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatchEnchantEquipReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatchEnchantEquipReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void BatchEnchantEquipReply::MergeFrom(const BatchEnchantEquipReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  previews_.MergeFrom(from.previews_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req()) {
      mutable_req()->::Packet::BatchEnchantEquipReq::MergeFrom(from.req());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void BatchEnchantEquipReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void BatchEnchantEquipReply::CopyFrom(const BatchEnchantEquipReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool BatchEnchantEquipReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_req()) {
    if (!this->req().IsInitialized()) return false;
  }
  for (int i = 0; i < previews_size(); i++) {
    if (!this->previews(i).IsInitialized()) return false;
  }
  return true;
}

void BatchEnchantEquipReply::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  if (has_req()) {
    this->mutable_req()->SetInitialized();
  }
  for (int i = 0; i < previews_size(); i++) {
    this->mutable_previews(i)->SetInitialized();
  }
  return;
}

void BatchEnchantEquipReply::Swap(BatchEnchantEquipReply* other) {
  if (other != this) {
    std::swap(req_, other->req_);
    previews_.Swap(&other->previews_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata BatchEnchantEquipReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchEnchantEquipReply_descriptor_;
  metadata.reflection = BatchEnchantEquipReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BatchEnchantEquipConfirmReq::kEquipGuidFieldNumber;
const int BatchEnchantEquipConfirmReq::kConfirmIndexFieldNumber;
#endif  // !_MSC_VER

BatchEnchantEquipConfirmReq::BatchEnchantEquipConfirmReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BatchEnchantEquipConfirmReq::InitAsDefaultInstance() {
}

BatchEnchantEquipConfirmReq::BatchEnchantEquipConfirmReq(const BatchEnchantEquipConfirmReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BatchEnchantEquipConfirmReq::SharedCtor() {
  _cached_size_ = 0;
  equip_guid_ = GOOGLE_ULONGLONG(0);
  confirm_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchEnchantEquipConfirmReq::~BatchEnchantEquipConfirmReq() {
  SharedDtor();
}

void BatchEnchantEquipConfirmReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BatchEnchantEquipConfirmReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchEnchantEquipConfirmReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchEnchantEquipConfirmReq_descriptor_;
}

const BatchEnchantEquipConfirmReq& BatchEnchantEquipConfirmReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Upgrades_2eproto();
  return *default_instance_;
}

BatchEnchantEquipConfirmReq* BatchEnchantEquipConfirmReq::default_instance_ = NULL;

BatchEnchantEquipConfirmReq* BatchEnchantEquipConfirmReq::New() const {
  return new BatchEnchantEquipConfirmReq;
}

void BatchEnchantEquipConfirmReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_guid_ = GOOGLE_ULONGLONG(0);
    confirm_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool BatchEnchantEquipConfirmReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 equip_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &equip_guid_)));
          set_has_equip_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_confirm_index;
        break;
      }

      // required int32 confirm_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_confirm_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &confirm_index_)));
          set_has_confirm_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void BatchEnchantEquipConfirmReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 equip_guid = 1;
  if (has_equip_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->equip_guid(), output);
  }

  // required int32 confirm_index = 2;
  if (has_confirm_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->confirm_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BatchEnchantEquipConfirmReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 equip_guid = 1;
  if (has_equip_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->equip_guid(), target);
  }

  // required int32 confirm_index = 2;
  if (has_confirm_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->confirm_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BatchEnchantEquipConfirmReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 equip_guid = 1;
    if (has_equip_guid()) {
      total_size += 1 + 8;
    }

    // required int32 confirm_index = 2;
    if (has_confirm_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->confirm_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchEnchantEquipConfirmReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatchEnchantEquipConfirmReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatchEnchantEquipConfirmReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void BatchEnchantEquipConfirmReq::MergeFrom(const BatchEnchantEquipConfirmReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_guid()) {
      set_equip_guid(from.equip_guid());
    }
    if (from.has_confirm_index()) {
      set_confirm_index(from.confirm_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void BatchEnchantEquipConfirmReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void BatchEnchantEquipConfirmReq::CopyFrom(const BatchEnchantEquipConfirmReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool BatchEnchantEquipConfirmReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BatchEnchantEquipConfirmReq::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void BatchEnchantEquipConfirmReq::Swap(BatchEnchantEquipConfirmReq* other) {
  if (other != this) {
    std::swap(equip_guid_, other->equip_guid_);
    std::swap(confirm_index_, other->confirm_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata BatchEnchantEquipConfirmReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchEnchantEquipConfirmReq_descriptor_;
  metadata.reflection = BatchEnchantEquipConfirmReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BatchEnchantEquipConfirmReply_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchEnchantEquipConfirmReply_Result_descriptor_;
}
bool BatchEnchantEquipConfirmReply_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BatchEnchantEquipConfirmReply_Result BatchEnchantEquipConfirmReply::SUCCESS;
const BatchEnchantEquipConfirmReply_Result BatchEnchantEquipConfirmReply::NEED_BATCH_ENCHANT_EQUIP_REQ_FIRST;
const BatchEnchantEquipConfirmReply_Result BatchEnchantEquipConfirmReply::INVALID_EQUIP;
const BatchEnchantEquipConfirmReply_Result BatchEnchantEquipConfirmReply::INVALID_INDEX;
const BatchEnchantEquipConfirmReply_Result BatchEnchantEquipConfirmReply::Result_MIN;
const BatchEnchantEquipConfirmReply_Result BatchEnchantEquipConfirmReply::Result_MAX;
const int BatchEnchantEquipConfirmReply::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BatchEnchantEquipConfirmReply::kReqFieldNumber;
const int BatchEnchantEquipConfirmReply::kResultFieldNumber;
#endif  // !_MSC_VER

BatchEnchantEquipConfirmReply::BatchEnchantEquipConfirmReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BatchEnchantEquipConfirmReply::InitAsDefaultInstance() {
  req_ = const_cast< ::Packet::BatchEnchantEquipConfirmReq*>(&::Packet::BatchEnchantEquipConfirmReq::default_instance());
}

BatchEnchantEquipConfirmReply::BatchEnchantEquipConfirmReply(const BatchEnchantEquipConfirmReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BatchEnchantEquipConfirmReply::SharedCtor() {
  _cached_size_ = 0;
  req_ = NULL;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchEnchantEquipConfirmReply::~BatchEnchantEquipConfirmReply() {
  SharedDtor();
}

void BatchEnchantEquipConfirmReply::SharedDtor() {
  if (this != default_instance_) {
    delete req_;
  }
}

void BatchEnchantEquipConfirmReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchEnchantEquipConfirmReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchEnchantEquipConfirmReply_descriptor_;
}

const BatchEnchantEquipConfirmReply& BatchEnchantEquipConfirmReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Upgrades_2eproto();
  return *default_instance_;
}

BatchEnchantEquipConfirmReply* BatchEnchantEquipConfirmReply::default_instance_ = NULL;

BatchEnchantEquipConfirmReply* BatchEnchantEquipConfirmReply::New() const {
  return new BatchEnchantEquipConfirmReply;
}

void BatchEnchantEquipConfirmReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_req()) {
      if (req_ != NULL) req_->::Packet::BatchEnchantEquipConfirmReq::Clear();
    }
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool BatchEnchantEquipConfirmReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.BatchEnchantEquipConfirmReq req = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .Packet.BatchEnchantEquipConfirmReply.Result result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::BatchEnchantEquipConfirmReply_Result_IsValid(value)) {
            set_result(static_cast< ::Packet::BatchEnchantEquipConfirmReply_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void BatchEnchantEquipConfirmReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.BatchEnchantEquipConfirmReq req = 1;
  if (has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->req(), output);
  }

  // required .Packet.BatchEnchantEquipConfirmReply.Result result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BatchEnchantEquipConfirmReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.BatchEnchantEquipConfirmReq req = 1;
  if (has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->req(), target);
  }

  // required .Packet.BatchEnchantEquipConfirmReply.Result result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BatchEnchantEquipConfirmReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.BatchEnchantEquipConfirmReq req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->req());
    }

    // required .Packet.BatchEnchantEquipConfirmReply.Result result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchEnchantEquipConfirmReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatchEnchantEquipConfirmReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatchEnchantEquipConfirmReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void BatchEnchantEquipConfirmReply::MergeFrom(const BatchEnchantEquipConfirmReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req()) {
      mutable_req()->::Packet::BatchEnchantEquipConfirmReq::MergeFrom(from.req());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void BatchEnchantEquipConfirmReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void BatchEnchantEquipConfirmReply::CopyFrom(const BatchEnchantEquipConfirmReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool BatchEnchantEquipConfirmReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_req()) {
    if (!this->req().IsInitialized()) return false;
  }
  return true;
}

void BatchEnchantEquipConfirmReply::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  if (has_req()) {
    this->mutable_req()->SetInitialized();
  }
  return;
}

void BatchEnchantEquipConfirmReply::Swap(BatchEnchantEquipConfirmReply* other) {
  if (other != this) {
    std::swap(req_, other->req_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata BatchEnchantEquipConfirmReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchEnchantEquipConfirmReply_descriptor_;
  metadata.reflection = BatchEnchantEquipConfirmReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InsetEquipReq::kEquipGuidFieldNumber;
const int InsetEquipReq::kGemConfigIdFieldNumber;
const int InsetEquipReq::kIndexFieldNumber;
#endif  // !_MSC_VER

InsetEquipReq::InsetEquipReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InsetEquipReq::InitAsDefaultInstance() {
}

InsetEquipReq::InsetEquipReq(const InsetEquipReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InsetEquipReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InsetEquipReq::~InsetEquipReq() {
  SharedDtor();
}

void InsetEquipReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InsetEquipReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InsetEquipReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InsetEquipReq_descriptor_;
}

const InsetEquipReq& InsetEquipReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Upgrades_2eproto();
  return *default_instance_;
}

InsetEquipReq* InsetEquipReq::default_instance_ = NULL;

InsetEquipReq* InsetEquipReq::New() const {
  return new InsetEquipReq;
}

void InsetEquipReq::Clear() {
  equip_guid_.Clear();
  gem_config_id_.Clear();
  index_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool InsetEquipReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 equip_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_equip_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9, input, this->mutable_equip_guid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_equip_guid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_equip_guid;
        if (input->ExpectTag(16)) goto parse_gem_config_id;
        break;
      }

      // repeated int32 gem_config_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_gem_config_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_gem_config_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gem_config_id;
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // repeated int32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void InsetEquipReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated fixed64 equip_guid = 1;
  for (int i = 0; i < this->equip_guid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->equip_guid(i), output);
  }

  // repeated int32 gem_config_id = 2;
  for (int i = 0; i < this->gem_config_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->gem_config_id(i), output);
  }

  // repeated int32 index = 3;
  for (int i = 0; i < this->index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->index(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InsetEquipReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated fixed64 equip_guid = 1;
  for (int i = 0; i < this->equip_guid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(1, this->equip_guid(i), target);
  }

  // repeated int32 gem_config_id = 2;
  for (int i = 0; i < this->gem_config_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->gem_config_id(i), target);
  }

  // repeated int32 index = 3;
  for (int i = 0; i < this->index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->index(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InsetEquipReq::ByteSize() const {
  int total_size = 0;

  // repeated fixed64 equip_guid = 1;
  {
    int data_size = 0;
    data_size = 8 * this->equip_guid_size();
    total_size += 1 * this->equip_guid_size() + data_size;
  }

  // repeated int32 gem_config_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->gem_config_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->gem_config_id(i));
    }
    total_size += 1 * this->gem_config_id_size() + data_size;
  }

  // repeated int32 index = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->index(i));
    }
    total_size += 1 * this->index_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InsetEquipReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InsetEquipReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InsetEquipReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void InsetEquipReq::MergeFrom(const InsetEquipReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_guid_.MergeFrom(from.equip_guid_);
  gem_config_id_.MergeFrom(from.gem_config_id_);
  index_.MergeFrom(from.index_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void InsetEquipReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void InsetEquipReq::CopyFrom(const InsetEquipReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool InsetEquipReq::IsInitialized() const {

  return true;
}

void InsetEquipReq::SetInitialized() {

  return;
}

void InsetEquipReq::Swap(InsetEquipReq* other) {
  if (other != this) {
    equip_guid_.Swap(&other->equip_guid_);
    gem_config_id_.Swap(&other->gem_config_id_);
    index_.Swap(&other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata InsetEquipReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InsetEquipReq_descriptor_;
  metadata.reflection = InsetEquipReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TakeOutGemReq::kEquipGuidFieldNumber;
const int TakeOutGemReq::kGemConfigIdFieldNumber;
const int TakeOutGemReq::kIndexFieldNumber;
#endif  // !_MSC_VER

TakeOutGemReq::TakeOutGemReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TakeOutGemReq::InitAsDefaultInstance() {
}

TakeOutGemReq::TakeOutGemReq(const TakeOutGemReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TakeOutGemReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TakeOutGemReq::~TakeOutGemReq() {
  SharedDtor();
}

void TakeOutGemReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TakeOutGemReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakeOutGemReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TakeOutGemReq_descriptor_;
}

const TakeOutGemReq& TakeOutGemReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Upgrades_2eproto();
  return *default_instance_;
}

TakeOutGemReq* TakeOutGemReq::default_instance_ = NULL;

TakeOutGemReq* TakeOutGemReq::New() const {
  return new TakeOutGemReq;
}

void TakeOutGemReq::Clear() {
  equip_guid_.Clear();
  gem_config_id_.Clear();
  index_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool TakeOutGemReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 equip_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_equip_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9, input, this->mutable_equip_guid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_equip_guid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_equip_guid;
        if (input->ExpectTag(16)) goto parse_gem_config_id;
        break;
      }

      // repeated int32 gem_config_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_gem_config_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_gem_config_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gem_config_id;
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // repeated int32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void TakeOutGemReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated fixed64 equip_guid = 1;
  for (int i = 0; i < this->equip_guid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->equip_guid(i), output);
  }

  // repeated int32 gem_config_id = 2;
  for (int i = 0; i < this->gem_config_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->gem_config_id(i), output);
  }

  // repeated int32 index = 3;
  for (int i = 0; i < this->index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->index(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TakeOutGemReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated fixed64 equip_guid = 1;
  for (int i = 0; i < this->equip_guid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(1, this->equip_guid(i), target);
  }

  // repeated int32 gem_config_id = 2;
  for (int i = 0; i < this->gem_config_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->gem_config_id(i), target);
  }

  // repeated int32 index = 3;
  for (int i = 0; i < this->index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->index(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TakeOutGemReq::ByteSize() const {
  int total_size = 0;

  // repeated fixed64 equip_guid = 1;
  {
    int data_size = 0;
    data_size = 8 * this->equip_guid_size();
    total_size += 1 * this->equip_guid_size() + data_size;
  }

  // repeated int32 gem_config_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->gem_config_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->gem_config_id(i));
    }
    total_size += 1 * this->gem_config_id_size() + data_size;
  }

  // repeated int32 index = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->index(i));
    }
    total_size += 1 * this->index_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakeOutGemReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TakeOutGemReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TakeOutGemReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void TakeOutGemReq::MergeFrom(const TakeOutGemReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_guid_.MergeFrom(from.equip_guid_);
  gem_config_id_.MergeFrom(from.gem_config_id_);
  index_.MergeFrom(from.index_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void TakeOutGemReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void TakeOutGemReq::CopyFrom(const TakeOutGemReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool TakeOutGemReq::IsInitialized() const {

  return true;
}

void TakeOutGemReq::SetInitialized() {

  return;
}

void TakeOutGemReq::Swap(TakeOutGemReq* other) {
  if (other != this) {
    equip_guid_.Swap(&other->equip_guid_);
    gem_config_id_.Swap(&other->gem_config_id_);
    index_.Swap(&other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata TakeOutGemReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TakeOutGemReq_descriptor_;
  metadata.reflection = TakeOutGemReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipInheritReq::kOldEquipGuidFieldNumber;
const int EquipInheritReq::kNewEquipGuidFieldNumber;
#endif  // !_MSC_VER

EquipInheritReq::EquipInheritReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipInheritReq::InitAsDefaultInstance() {
}

EquipInheritReq::EquipInheritReq(const EquipInheritReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipInheritReq::SharedCtor() {
  _cached_size_ = 0;
  old_equip_guid_ = GOOGLE_ULONGLONG(0);
  new_equip_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipInheritReq::~EquipInheritReq() {
  SharedDtor();
}

void EquipInheritReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipInheritReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipInheritReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipInheritReq_descriptor_;
}

const EquipInheritReq& EquipInheritReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Upgrades_2eproto();
  return *default_instance_;
}

EquipInheritReq* EquipInheritReq::default_instance_ = NULL;

EquipInheritReq* EquipInheritReq::New() const {
  return new EquipInheritReq;
}

void EquipInheritReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    old_equip_guid_ = GOOGLE_ULONGLONG(0);
    new_equip_guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool EquipInheritReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 old_equip_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &old_equip_guid_)));
          set_has_old_equip_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_new_equip_guid;
        break;
      }

      // required fixed64 new_equip_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_new_equip_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &new_equip_guid_)));
          set_has_new_equip_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void EquipInheritReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 old_equip_guid = 1;
  if (has_old_equip_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->old_equip_guid(), output);
  }

  // required fixed64 new_equip_guid = 2;
  if (has_new_equip_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->new_equip_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipInheritReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 old_equip_guid = 1;
  if (has_old_equip_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->old_equip_guid(), target);
  }

  // required fixed64 new_equip_guid = 2;
  if (has_new_equip_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->new_equip_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipInheritReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 old_equip_guid = 1;
    if (has_old_equip_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 new_equip_guid = 2;
    if (has_new_equip_guid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipInheritReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipInheritReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipInheritReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void EquipInheritReq::MergeFrom(const EquipInheritReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_old_equip_guid()) {
      set_old_equip_guid(from.old_equip_guid());
    }
    if (from.has_new_equip_guid()) {
      set_new_equip_guid(from.new_equip_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void EquipInheritReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void EquipInheritReq::CopyFrom(const EquipInheritReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool EquipInheritReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EquipInheritReq::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void EquipInheritReq::Swap(EquipInheritReq* other) {
  if (other != this) {
    std::swap(old_equip_guid_, other->old_equip_guid_);
    std::swap(new_equip_guid_, other->new_equip_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata EquipInheritReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipInheritReq_descriptor_;
  metadata.reflection = EquipInheritReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FixEquipReq::kEquipGuidFieldNumber;
#endif  // !_MSC_VER

FixEquipReq::FixEquipReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FixEquipReq::InitAsDefaultInstance() {
}

FixEquipReq::FixEquipReq(const FixEquipReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FixEquipReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FixEquipReq::~FixEquipReq() {
  SharedDtor();
}

void FixEquipReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FixEquipReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FixEquipReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FixEquipReq_descriptor_;
}

const FixEquipReq& FixEquipReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Upgrades_2eproto();
  return *default_instance_;
}

FixEquipReq* FixEquipReq::default_instance_ = NULL;

FixEquipReq* FixEquipReq::New() const {
  return new FixEquipReq;
}

void FixEquipReq::Clear() {
  equip_guid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool FixEquipReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 equip_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_equip_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9, input, this->mutable_equip_guid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_equip_guid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_equip_guid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void FixEquipReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated fixed64 equip_guid = 1;
  for (int i = 0; i < this->equip_guid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->equip_guid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FixEquipReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated fixed64 equip_guid = 1;
  for (int i = 0; i < this->equip_guid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(1, this->equip_guid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FixEquipReq::ByteSize() const {
  int total_size = 0;

  // repeated fixed64 equip_guid = 1;
  {
    int data_size = 0;
    data_size = 8 * this->equip_guid_size();
    total_size += 1 * this->equip_guid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FixEquipReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FixEquipReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FixEquipReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void FixEquipReq::MergeFrom(const FixEquipReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_guid_.MergeFrom(from.equip_guid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void FixEquipReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void FixEquipReq::CopyFrom(const FixEquipReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool FixEquipReq::IsInitialized() const {

  return true;
}

void FixEquipReq::SetInitialized() {

  return;
}

void FixEquipReq::Swap(FixEquipReq* other) {
  if (other != this) {
    equip_guid_.Swap(&other->equip_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata FixEquipReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FixEquipReq_descriptor_;
  metadata.reflection = FixEquipReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GemFusionReq::kGemGuidFieldNumber;
const int GemFusionReq::kFusionAllFieldNumber;
const int GemFusionReq::kCannotFailFieldNumber;
#endif  // !_MSC_VER

GemFusionReq::GemFusionReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GemFusionReq::InitAsDefaultInstance() {
}

GemFusionReq::GemFusionReq(const GemFusionReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GemFusionReq::SharedCtor() {
  _cached_size_ = 0;
  gem_guid_ = GOOGLE_ULONGLONG(0);
  fusion_all_ = false;
  cannot_fail_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GemFusionReq::~GemFusionReq() {
  SharedDtor();
}

void GemFusionReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GemFusionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GemFusionReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GemFusionReq_descriptor_;
}

const GemFusionReq& GemFusionReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Upgrades_2eproto();
  return *default_instance_;
}

GemFusionReq* GemFusionReq::default_instance_ = NULL;

GemFusionReq* GemFusionReq::New() const {
  return new GemFusionReq;
}

void GemFusionReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gem_guid_ = GOOGLE_ULONGLONG(0);
    fusion_all_ = false;
    cannot_fail_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GemFusionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 gem_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &gem_guid_)));
          set_has_gem_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fusion_all;
        break;
      }

      // required bool fusion_all = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fusion_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fusion_all_)));
          set_has_fusion_all();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cannot_fail;
        break;
      }

      // required bool cannot_fail = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cannot_fail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cannot_fail_)));
          set_has_cannot_fail();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GemFusionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 gem_guid = 1;
  if (has_gem_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->gem_guid(), output);
  }

  // required bool fusion_all = 2;
  if (has_fusion_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->fusion_all(), output);
  }

  // required bool cannot_fail = 3;
  if (has_cannot_fail()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->cannot_fail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GemFusionReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 gem_guid = 1;
  if (has_gem_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->gem_guid(), target);
  }

  // required bool fusion_all = 2;
  if (has_fusion_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->fusion_all(), target);
  }

  // required bool cannot_fail = 3;
  if (has_cannot_fail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->cannot_fail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GemFusionReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 gem_guid = 1;
    if (has_gem_guid()) {
      total_size += 1 + 8;
    }

    // required bool fusion_all = 2;
    if (has_fusion_all()) {
      total_size += 1 + 1;
    }

    // required bool cannot_fail = 3;
    if (has_cannot_fail()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GemFusionReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GemFusionReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GemFusionReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GemFusionReq::MergeFrom(const GemFusionReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gem_guid()) {
      set_gem_guid(from.gem_guid());
    }
    if (from.has_fusion_all()) {
      set_fusion_all(from.fusion_all());
    }
    if (from.has_cannot_fail()) {
      set_cannot_fail(from.cannot_fail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GemFusionReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GemFusionReq::CopyFrom(const GemFusionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GemFusionReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GemFusionReq::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  return;
}

void GemFusionReq::Swap(GemFusionReq* other) {
  if (other != this) {
    std::swap(gem_guid_, other->gem_guid_);
    std::swap(fusion_all_, other->fusion_all_);
    std::swap(cannot_fail_, other->cannot_fail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GemFusionReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GemFusionReq_descriptor_;
  metadata.reflection = GemFusionReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CG_GemFusion::kBagGemGuidsFieldNumber;
const int CG_GemFusion::kBagGemCountsFieldNumber;
const int CG_GemFusion::kBuyGemIdsFieldNumber;
const int CG_GemFusion::kBuyGemCountsFieldNumber;
const int CG_GemFusion::kTargetGemIdFieldNumber;
const int CG_GemFusion::kEquipGuidFieldNumber;
const int CG_GemFusion::kGemIndexFieldNumber;
#endif  // !_MSC_VER

CG_GemFusion::CG_GemFusion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_GemFusion::InitAsDefaultInstance() {
}

CG_GemFusion::CG_GemFusion(const CG_GemFusion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_GemFusion::SharedCtor() {
  _cached_size_ = 0;
  target_gem_id_ = 0;
  equip_guid_ = GOOGLE_ULONGLONG(0);
  gem_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_GemFusion::~CG_GemFusion() {
  SharedDtor();
}

void CG_GemFusion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CG_GemFusion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_GemFusion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_GemFusion_descriptor_;
}

const CG_GemFusion& CG_GemFusion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Upgrades_2eproto();
  return *default_instance_;
}

CG_GemFusion* CG_GemFusion::default_instance_ = NULL;

CG_GemFusion* CG_GemFusion::New() const {
  return new CG_GemFusion;
}

void CG_GemFusion::Clear() {
  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    target_gem_id_ = 0;
    equip_guid_ = GOOGLE_ULONGLONG(0);
    gem_index_ = 0;
  }
  bag_gem_guids_.Clear();
  bag_gem_counts_.Clear();
  buy_gem_ids_.Clear();
  buy_gem_counts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool CG_GemFusion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 bag_gem_guids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bag_gem_guids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9, input, this->mutable_bag_gem_guids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_bag_gem_guids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_bag_gem_guids;
        if (input->ExpectTag(16)) goto parse_bag_gem_counts;
        break;
      }

      // repeated int32 bag_gem_counts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bag_gem_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_bag_gem_counts())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bag_gem_counts())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bag_gem_counts;
        if (input->ExpectTag(24)) goto parse_buy_gem_ids;
        break;
      }

      // repeated int32 buy_gem_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_gem_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_buy_gem_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_buy_gem_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buy_gem_ids;
        if (input->ExpectTag(32)) goto parse_buy_gem_counts;
        break;
      }

      // repeated int32 buy_gem_counts = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_gem_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_buy_gem_counts())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_buy_gem_counts())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_buy_gem_counts;
        if (input->ExpectTag(40)) goto parse_target_gem_id;
        break;
      }

      // required int32 target_gem_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_gem_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_gem_id_)));
          set_has_target_gem_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_equip_guid;
        break;
      }

      // optional fixed64 equip_guid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_equip_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &equip_guid_)));
          set_has_equip_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gem_index;
        break;
      }

      // optional int32 gem_index = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gem_index_)));
          set_has_gem_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void CG_GemFusion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated fixed64 bag_gem_guids = 1;
  for (int i = 0; i < this->bag_gem_guids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->bag_gem_guids(i), output);
  }

  // repeated int32 bag_gem_counts = 2;
  for (int i = 0; i < this->bag_gem_counts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->bag_gem_counts(i), output);
  }

  // repeated int32 buy_gem_ids = 3;
  for (int i = 0; i < this->buy_gem_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->buy_gem_ids(i), output);
  }

  // repeated int32 buy_gem_counts = 4;
  for (int i = 0; i < this->buy_gem_counts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->buy_gem_counts(i), output);
  }

  // required int32 target_gem_id = 5;
  if (has_target_gem_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->target_gem_id(), output);
  }

  // optional fixed64 equip_guid = 6;
  if (has_equip_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->equip_guid(), output);
  }

  // optional int32 gem_index = 7;
  if (has_gem_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gem_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_GemFusion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated fixed64 bag_gem_guids = 1;
  for (int i = 0; i < this->bag_gem_guids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(1, this->bag_gem_guids(i), target);
  }

  // repeated int32 bag_gem_counts = 2;
  for (int i = 0; i < this->bag_gem_counts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->bag_gem_counts(i), target);
  }

  // repeated int32 buy_gem_ids = 3;
  for (int i = 0; i < this->buy_gem_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->buy_gem_ids(i), target);
  }

  // repeated int32 buy_gem_counts = 4;
  for (int i = 0; i < this->buy_gem_counts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->buy_gem_counts(i), target);
  }

  // required int32 target_gem_id = 5;
  if (has_target_gem_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->target_gem_id(), target);
  }

  // optional fixed64 equip_guid = 6;
  if (has_equip_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->equip_guid(), target);
  }

  // optional int32 gem_index = 7;
  if (has_gem_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gem_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_GemFusion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    // required int32 target_gem_id = 5;
    if (has_target_gem_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_gem_id());
    }

    // optional fixed64 equip_guid = 6;
    if (has_equip_guid()) {
      total_size += 1 + 8;
    }

    // optional int32 gem_index = 7;
    if (has_gem_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gem_index());
    }

  }
  // repeated fixed64 bag_gem_guids = 1;
  {
    int data_size = 0;
    data_size = 8 * this->bag_gem_guids_size();
    total_size += 1 * this->bag_gem_guids_size() + data_size;
  }

  // repeated int32 bag_gem_counts = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->bag_gem_counts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bag_gem_counts(i));
    }
    total_size += 1 * this->bag_gem_counts_size() + data_size;
  }

  // repeated int32 buy_gem_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->buy_gem_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->buy_gem_ids(i));
    }
    total_size += 1 * this->buy_gem_ids_size() + data_size;
  }

  // repeated int32 buy_gem_counts = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->buy_gem_counts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->buy_gem_counts(i));
    }
    total_size += 1 * this->buy_gem_counts_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_GemFusion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_GemFusion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_GemFusion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void CG_GemFusion::MergeFrom(const CG_GemFusion& from) {
  GOOGLE_CHECK_NE(&from, this);
  bag_gem_guids_.MergeFrom(from.bag_gem_guids_);
  bag_gem_counts_.MergeFrom(from.bag_gem_counts_);
  buy_gem_ids_.MergeFrom(from.buy_gem_ids_);
  buy_gem_counts_.MergeFrom(from.buy_gem_counts_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from.has_target_gem_id()) {
      set_target_gem_id(from.target_gem_id());
    }
    if (from.has_equip_guid()) {
      set_equip_guid(from.equip_guid());
    }
    if (from.has_gem_index()) {
      set_gem_index(from.gem_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void CG_GemFusion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void CG_GemFusion::CopyFrom(const CG_GemFusion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool CG_GemFusion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;

  return true;
}

void CG_GemFusion::SetInitialized() {
  _has_bits_[0] |= 0x00000010;

  return;
}

void CG_GemFusion::Swap(CG_GemFusion* other) {
  if (other != this) {
    bag_gem_guids_.Swap(&other->bag_gem_guids_);
    bag_gem_counts_.Swap(&other->bag_gem_counts_);
    buy_gem_ids_.Swap(&other->buy_gem_ids_);
    buy_gem_counts_.Swap(&other->buy_gem_counts_);
    std::swap(target_gem_id_, other->target_gem_id_);
    std::swap(equip_guid_, other->equip_guid_);
    std::swap(gem_index_, other->gem_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata CG_GemFusion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_GemFusion_descriptor_;
  metadata.reflection = CG_GemFusion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DismantleEquipReq::kEquipGuidsFieldNumber;
#endif  // !_MSC_VER

DismantleEquipReq::DismantleEquipReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DismantleEquipReq::InitAsDefaultInstance() {
}

DismantleEquipReq::DismantleEquipReq(const DismantleEquipReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DismantleEquipReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DismantleEquipReq::~DismantleEquipReq() {
  SharedDtor();
}

void DismantleEquipReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DismantleEquipReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DismantleEquipReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DismantleEquipReq_descriptor_;
}

const DismantleEquipReq& DismantleEquipReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Upgrades_2eproto();
  return *default_instance_;
}

DismantleEquipReq* DismantleEquipReq::default_instance_ = NULL;

DismantleEquipReq* DismantleEquipReq::New() const {
  return new DismantleEquipReq;
}

void DismantleEquipReq::Clear() {
  equip_guids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool DismantleEquipReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 equip_guids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_equip_guids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9, input, this->mutable_equip_guids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_equip_guids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_equip_guids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void DismantleEquipReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated fixed64 equip_guids = 1;
  for (int i = 0; i < this->equip_guids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->equip_guids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DismantleEquipReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated fixed64 equip_guids = 1;
  for (int i = 0; i < this->equip_guids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(1, this->equip_guids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DismantleEquipReq::ByteSize() const {
  int total_size = 0;

  // repeated fixed64 equip_guids = 1;
  {
    int data_size = 0;
    data_size = 8 * this->equip_guids_size();
    total_size += 1 * this->equip_guids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DismantleEquipReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DismantleEquipReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DismantleEquipReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void DismantleEquipReq::MergeFrom(const DismantleEquipReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_guids_.MergeFrom(from.equip_guids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void DismantleEquipReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void DismantleEquipReq::CopyFrom(const DismantleEquipReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool DismantleEquipReq::IsInitialized() const {

  return true;
}

void DismantleEquipReq::SetInitialized() {

  return;
}

void DismantleEquipReq::Swap(DismantleEquipReq* other) {
  if (other != this) {
    equip_guids_.Swap(&other->equip_guids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata DismantleEquipReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DismantleEquipReq_descriptor_;
  metadata.reflection = DismantleEquipReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipMagicalReq::kSrcGuidFieldNumber;
const int EquipMagicalReq::kDesGuidFieldNumber;
#endif  // !_MSC_VER

EquipMagicalReq::EquipMagicalReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipMagicalReq::InitAsDefaultInstance() {
}

EquipMagicalReq::EquipMagicalReq(const EquipMagicalReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipMagicalReq::SharedCtor() {
  _cached_size_ = 0;
  src_guid_ = GOOGLE_ULONGLONG(0);
  des_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipMagicalReq::~EquipMagicalReq() {
  SharedDtor();
}

void EquipMagicalReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipMagicalReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipMagicalReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipMagicalReq_descriptor_;
}

const EquipMagicalReq& EquipMagicalReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Upgrades_2eproto();
  return *default_instance_;
}

EquipMagicalReq* EquipMagicalReq::default_instance_ = NULL;

EquipMagicalReq* EquipMagicalReq::New() const {
  return new EquipMagicalReq;
}

void EquipMagicalReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_guid_ = GOOGLE_ULONGLONG(0);
    des_guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool EquipMagicalReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 src_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &src_guid_)));
          set_has_src_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_des_guid;
        break;
      }

      // required fixed64 des_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_des_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &des_guid_)));
          set_has_des_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void EquipMagicalReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 src_guid = 1;
  if (has_src_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->src_guid(), output);
  }

  // required fixed64 des_guid = 2;
  if (has_des_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->des_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipMagicalReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 src_guid = 1;
  if (has_src_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->src_guid(), target);
  }

  // required fixed64 des_guid = 2;
  if (has_des_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->des_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipMagicalReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 src_guid = 1;
    if (has_src_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 des_guid = 2;
    if (has_des_guid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipMagicalReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipMagicalReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipMagicalReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void EquipMagicalReq::MergeFrom(const EquipMagicalReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_guid()) {
      set_src_guid(from.src_guid());
    }
    if (from.has_des_guid()) {
      set_des_guid(from.des_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void EquipMagicalReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void EquipMagicalReq::CopyFrom(const EquipMagicalReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool EquipMagicalReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EquipMagicalReq::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void EquipMagicalReq::Swap(EquipMagicalReq* other) {
  if (other != this) {
    std::swap(src_guid_, other->src_guid_);
    std::swap(des_guid_, other->des_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata EquipMagicalReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipMagicalReq_descriptor_;
  metadata.reflection = EquipMagicalReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

// @@protoc_insertion_point(global_scope)
