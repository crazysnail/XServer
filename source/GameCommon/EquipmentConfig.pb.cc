// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EquipmentConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EquipmentConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Config {

namespace {

const ::google::protobuf::Descriptor* EquipmentConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipFixCost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipFixCost_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipEnhenceCost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipEnhenceCost_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipEnchantCost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipEnchantCost_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipDismantle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipDismantle_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipDismantle_DismantleItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipDismantle_DismantleItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentSuitConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentSuitConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnhanceMasterConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnhanceMasterConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_EquipmentConfig_2eproto() {
  protobuf_AddDesc_EquipmentConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "EquipmentConfig.proto");
  GOOGLE_CHECK(file != NULL);
  EquipmentConfig_descriptor_ = file->message_type(0);
  static const int EquipmentConfig_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, weapon_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, race_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, prof_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, talent_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, level_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, init_durable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, suit_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, property_effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, strength_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, strength_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, gem_slot_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, res_),
  };
  EquipmentConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentConfig_descriptor_,
      EquipmentConfig::default_instance_,
      EquipmentConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentConfig));
  EquipFixCost_descriptor_ = file->message_type(1);
  static const int EquipFixCost_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipFixCost, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipFixCost, green_fix_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipFixCost, blue_fix_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipFixCost, purple_fix_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipFixCost, orange_fix_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipFixCost, white_fix_gold_),
  };
  EquipFixCost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipFixCost_descriptor_,
      EquipFixCost::default_instance_,
      EquipFixCost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipFixCost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipFixCost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipFixCost));
  EquipEnhenceCost_descriptor_ = file->message_type(2);
  static const int EquipEnhenceCost_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipEnhenceCost, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipEnhenceCost, enhence_gold_),
  };
  EquipEnhenceCost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipEnhenceCost_descriptor_,
      EquipEnhenceCost::default_instance_,
      EquipEnhenceCost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipEnhenceCost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipEnhenceCost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipEnhenceCost));
  EquipEnchantCost_descriptor_ = file->message_type(3);
  static const int EquipEnchantCost_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipEnchantCost, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipEnchantCost, enchant_item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipEnchantCost, enchant_item_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipEnchantCost, enchant_property_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipEnchantCost, lock_item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipEnchantCost, lock_item_cost_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipEnchantCost, lock_item_cost_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipEnchantCost, lock_item_cost_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipEnchantCost, enchant_lock_item_factor_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipEnchantCost, enchant_lock_item_factor_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipEnchantCost, enchant_lock_item_factor_3_),
  };
  EquipEnchantCost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipEnchantCost_descriptor_,
      EquipEnchantCost::default_instance_,
      EquipEnchantCost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipEnchantCost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipEnchantCost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipEnchantCost));
  EquipDismantle_descriptor_ = file->message_type(4);
  static const int EquipDismantle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDismantle, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDismantle, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDismantle, dismantle_items_),
  };
  EquipDismantle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipDismantle_descriptor_,
      EquipDismantle::default_instance_,
      EquipDismantle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDismantle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDismantle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipDismantle));
  EquipDismantle_DismantleItem_descriptor_ = EquipDismantle_descriptor_->nested_type(0);
  static const int EquipDismantle_DismantleItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDismantle_DismantleItem, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDismantle_DismantleItem, item_amount_),
  };
  EquipDismantle_DismantleItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipDismantle_DismantleItem_descriptor_,
      EquipDismantle_DismantleItem::default_instance_,
      EquipDismantle_DismantleItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDismantle_DismantleItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipDismantle_DismantleItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipDismantle_DismantleItem));
  EquipmentSuitConfig_descriptor_ = file->message_type(5);
  static const int EquipmentSuitConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentSuitConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentSuitConfig, part_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentSuitConfig, part_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentSuitConfig, part_value_),
  };
  EquipmentSuitConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentSuitConfig_descriptor_,
      EquipmentSuitConfig::default_instance_,
      EquipmentSuitConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentSuitConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentSuitConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentSuitConfig));
  EnhanceMasterConfig_descriptor_ = file->message_type(6);
  static const int EnhanceMasterConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnhanceMasterConfig, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnhanceMasterConfig, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnhanceMasterConfig, value_),
  };
  EnhanceMasterConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnhanceMasterConfig_descriptor_,
      EnhanceMasterConfig::default_instance_,
      EnhanceMasterConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnhanceMasterConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnhanceMasterConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnhanceMasterConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_EquipmentConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentConfig_descriptor_, &EquipmentConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipFixCost_descriptor_, &EquipFixCost::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipEnhenceCost_descriptor_, &EquipEnhenceCost::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipEnchantCost_descriptor_, &EquipEnchantCost::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipDismantle_descriptor_, &EquipDismantle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipDismantle_DismantleItem_descriptor_, &EquipDismantle_DismantleItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentSuitConfig_descriptor_, &EquipmentSuitConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnhanceMasterConfig_descriptor_, &EnhanceMasterConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_EquipmentConfig_2eproto() {
  delete EquipmentConfig::default_instance_;
  delete EquipmentConfig_reflection_;
  delete EquipFixCost::default_instance_;
  delete EquipFixCost_reflection_;
  delete EquipEnhenceCost::default_instance_;
  delete EquipEnhenceCost_reflection_;
  delete EquipEnchantCost::default_instance_;
  delete EquipEnchantCost_reflection_;
  delete EquipDismantle::default_instance_;
  delete EquipDismantle_reflection_;
  delete EquipDismantle_DismantleItem::default_instance_;
  delete EquipDismantle_DismantleItem_reflection_;
  delete EquipmentSuitConfig::default_instance_;
  delete EquipmentSuitConfig_reflection_;
  delete EnhanceMasterConfig::default_instance_;
  delete EnhanceMasterConfig_reflection_;
}

void protobuf_AddDesc_EquipmentConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Config::protobuf_AddDesc_AllConfigEnum_2eproto();
  ::Packet::protobuf_AddDesc_AllPacketEnum_2eproto();
  ::Packet::protobuf_AddDesc_ProtoBufOption_2eproto();
  ::Packet::protobuf_AddDesc_PlayerBasicInfo_2eproto();
  ::Packet::protobuf_AddDesc_BattleInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025EquipmentConfig.proto\022\006Config\032\023AllConf"
    "igEnum.proto\032\023AllPacketEnum.proto\032\024Proto"
    "BufOption.proto\032\025PlayerBasicInfo.proto\032\020"
    "BattleInfo.proto\"\306\003\n\017EquipmentConfig\022\n\n\002"
    "id\030\001 \002(\005\022#\n\004type\030\002 \002(\0162\025.Config.Equipmen"
    "tType\022\'\n\013weapon_type\030\003 \002(\0162\022.Config.Weap"
    "onType\022%\n\005color\030\004 \002(\0162\026.Config.Equipment"
    "Color\022 \n\nrace_limit\030\005 \003(\0162\014.Packet.Race\022"
    "\'\n\nprof_limit\030\006 \003(\0162\023.Packet.Professions"
    "\022$\n\014talent_limit\030\007 \003(\0162\016.Packet.Talent\022\023"
    "\n\013level_limit\030\010 \002(\005\022\024\n\014init_durable\030\t \002("
    "\005\022\025\n\rsuit_group_id\030\n \002(\005\022+\n\017property_eff"
    "ect\030\013 \002(\0132\022.Packet.BattleInfo\022\025\n\rstrengt"
    "h_type\030\014 \002(\t\022\026\n\016strength_value\030\r \002(\002\022\026\n\016"
    "gem_slot_count\030\016 \002(\005\022\013\n\003res\030\017 \002(\005\"\226\001\n\014Eq"
    "uipFixCost\022\r\n\005level\030\001 \002(\005\022\026\n\016green_fix_g"
    "old\030\002 \002(\005\022\025\n\rblue_fix_gold\030\003 \002(\005\022\027\n\017purp"
    "le_fix_gold\030\004 \002(\005\022\027\n\017orange_fix_gold\030\005 \002"
    "(\005\022\026\n\016white_fix_gold\030\006 \002(\005\"7\n\020EquipEnhen"
    "ceCost\022\r\n\005level\030\001 \002(\005\022\024\n\014enhence_gold\030\002 "
    "\002(\005\"\310\002\n\020EquipEnchantCost\022\r\n\005level\030\001 \002(\005\022"
    "\027\n\017enchant_item_id\030\003 \002(\005\022\033\n\023enchant_item"
    "_amount\030\004 \002(\005\022\037\n\027enchant_property_factor"
    "\030\005 \002(\005\022\024\n\014lock_item_id\030\006 \002(\005\022\030\n\020lock_ite"
    "m_cost_1\030\007 \002(\005\022\030\n\020lock_item_cost_2\030\010 \002(\005"
    "\022\030\n\020lock_item_cost_3\030\t \002(\005\022\"\n\032enchant_lo"
    "ck_item_factor_1\030\n \002(\005\022\"\n\032enchant_lock_i"
    "tem_factor_2\030\013 \002(\005\022\"\n\032enchant_lock_item_"
    "factor_3\030\014 \002(\005\"\274\001\n\016EquipDismantle\022\r\n\005lev"
    "el\030\001 \002(\005\022%\n\005color\030\002 \002(\0162\026.Config.Equipme"
    "ntColor\022=\n\017dismantle_items\030\003 \003(\0132$.Confi"
    "g.EquipDismantle.DismantleItem\0325\n\rDisman"
    "tleItem\022\017\n\007item_id\030\001 \002(\005\022\023\n\013item_amount\030"
    "\002 \002(\005\"n\n\023EquipmentSuitConfig\022\n\n\002id\030\001 \002(\005"
    "\022\030\n\npart_count\030\002 \003(\005B\004\300\363\030\004\022\027\n\tpart_attr\030"
    "\003 \003(\tB\004\300\363\030\004\022\030\n\npart_value\030\004 \003(\005B\004\300\363\030\004\"M\n"
    "\023EnhanceMasterConfig\022\r\n\005level\030\001 \002(\005\022\022\n\004a"
    "ttr\030\002 \003(\tB\004\300\363\030\005\022\023\n\005value\030\003 \003(\005B\004\300\363\030\005", 1516);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "EquipmentConfig.proto", &protobuf_RegisterTypes);
  EquipmentConfig::default_instance_ = new EquipmentConfig();
  EquipFixCost::default_instance_ = new EquipFixCost();
  EquipEnhenceCost::default_instance_ = new EquipEnhenceCost();
  EquipEnchantCost::default_instance_ = new EquipEnchantCost();
  EquipDismantle::default_instance_ = new EquipDismantle();
  EquipDismantle_DismantleItem::default_instance_ = new EquipDismantle_DismantleItem();
  EquipmentSuitConfig::default_instance_ = new EquipmentSuitConfig();
  EnhanceMasterConfig::default_instance_ = new EnhanceMasterConfig();
  EquipmentConfig::default_instance_->InitAsDefaultInstance();
  EquipFixCost::default_instance_->InitAsDefaultInstance();
  EquipEnhenceCost::default_instance_->InitAsDefaultInstance();
  EquipEnchantCost::default_instance_->InitAsDefaultInstance();
  EquipDismantle::default_instance_->InitAsDefaultInstance();
  EquipDismantle_DismantleItem::default_instance_->InitAsDefaultInstance();
  EquipmentSuitConfig::default_instance_->InitAsDefaultInstance();
  EnhanceMasterConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EquipmentConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_EquipmentConfig_2eproto {
  StaticDescriptorInitializer_EquipmentConfig_2eproto() {
    protobuf_AddDesc_EquipmentConfig_2eproto();
  }
} static_descriptor_initializer_EquipmentConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int EquipmentConfig::kIdFieldNumber;
const int EquipmentConfig::kTypeFieldNumber;
const int EquipmentConfig::kWeaponTypeFieldNumber;
const int EquipmentConfig::kColorFieldNumber;
const int EquipmentConfig::kRaceLimitFieldNumber;
const int EquipmentConfig::kProfLimitFieldNumber;
const int EquipmentConfig::kTalentLimitFieldNumber;
const int EquipmentConfig::kLevelLimitFieldNumber;
const int EquipmentConfig::kInitDurableFieldNumber;
const int EquipmentConfig::kSuitGroupIdFieldNumber;
const int EquipmentConfig::kPropertyEffectFieldNumber;
const int EquipmentConfig::kStrengthTypeFieldNumber;
const int EquipmentConfig::kStrengthValueFieldNumber;
const int EquipmentConfig::kGemSlotCountFieldNumber;
const int EquipmentConfig::kResFieldNumber;
#endif  // !_MSC_VER

EquipmentConfig::EquipmentConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentConfig::InitAsDefaultInstance() {
  property_effect_ = const_cast< ::Packet::BattleInfo*>(&::Packet::BattleInfo::default_instance());
}

EquipmentConfig::EquipmentConfig(const EquipmentConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentConfig::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = -1;
  weapon_type_ = -1;
  color_ = 0;
  level_limit_ = 0;
  init_durable_ = 0;
  suit_group_id_ = 0;
  property_effect_ = NULL;
  strength_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strength_value_ = 0;
  gem_slot_count_ = 0;
  res_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentConfig::~EquipmentConfig() {
  SharedDtor();
}

void EquipmentConfig::SharedDtor() {
  if (strength_type_ != &::google::protobuf::internal::kEmptyString) {
    delete strength_type_;
  }
  if (this != default_instance_) {
    delete property_effect_;
  }
}

void EquipmentConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentConfig_descriptor_;
}

const EquipmentConfig& EquipmentConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentConfig_2eproto();
  return *default_instance_;
}

EquipmentConfig* EquipmentConfig::default_instance_ = NULL;

EquipmentConfig* EquipmentConfig::New() const {
  return new EquipmentConfig;
}

void EquipmentConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = -1;
    weapon_type_ = -1;
    color_ = 0;
    level_limit_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    init_durable_ = 0;
    suit_group_id_ = 0;
    if (has_property_effect()) {
      if (property_effect_ != NULL) property_effect_->::Packet::BattleInfo::Clear();
    }
    if (has_strength_type()) {
      if (strength_type_ != &::google::protobuf::internal::kEmptyString) {
        strength_type_->clear();
      }
    }
    strength_value_ = 0;
    gem_slot_count_ = 0;
    res_ = 0;
  }
  race_limit_.Clear();
  prof_limit_.Clear();
  talent_limit_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool EquipmentConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .Config.EquipmentType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Config::EquipmentType_IsValid(value)) {
            set_type(static_cast< ::Config::EquipmentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_weapon_type;
        break;
      }

      // required .Config.WeaponType weapon_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weapon_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Config::WeaponType_IsValid(value)) {
            set_weapon_type(static_cast< ::Config::WeaponType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_color;
        break;
      }

      // required .Config.EquipmentColor color = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Config::EquipmentColor_IsValid(value)) {
            set_color(static_cast< ::Config::EquipmentColor >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_race_limit;
        break;
      }

      // repeated .Packet.Race race_limit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_race_limit:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::Race_IsValid(value)) {
            add_race_limit(static_cast< ::Packet::Race >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::Packet::Race_IsValid,
                 this->mutable_race_limit())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_race_limit;
        if (input->ExpectTag(48)) goto parse_prof_limit;
        break;
      }

      // repeated .Packet.Professions prof_limit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof_limit:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::Professions_IsValid(value)) {
            add_prof_limit(static_cast< ::Packet::Professions >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::Packet::Professions_IsValid,
                 this->mutable_prof_limit())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_prof_limit;
        if (input->ExpectTag(56)) goto parse_talent_limit;
        break;
      }

      // repeated .Packet.Talent talent_limit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_talent_limit:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::Talent_IsValid(value)) {
            add_talent_limit(static_cast< ::Packet::Talent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::Packet::Talent_IsValid,
                 this->mutable_talent_limit())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_talent_limit;
        if (input->ExpectTag(64)) goto parse_level_limit;
        break;
      }

      // required int32 level_limit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_limit_)));
          set_has_level_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_init_durable;
        break;
      }

      // required int32 init_durable = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_init_durable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &init_durable_)));
          set_has_init_durable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_suit_group_id;
        break;
      }

      // required int32 suit_group_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suit_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &suit_group_id_)));
          set_has_suit_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_property_effect;
        break;
      }

      // required .Packet.BattleInfo property_effect = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_property_effect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_property_effect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_strength_type;
        break;
      }

      // required string strength_type = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strength_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strength_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strength_type().data(), this->strength_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_strength_value;
        break;
      }

      // required float strength_value = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_strength_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &strength_value_)));
          set_has_strength_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_gem_slot_count;
        break;
      }

      // required int32 gem_slot_count = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem_slot_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gem_slot_count_)));
          set_has_gem_slot_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_res;
        break;
      }

      // required int32 res = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void EquipmentConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .Config.EquipmentType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required .Config.WeaponType weapon_type = 3;
  if (has_weapon_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->weapon_type(), output);
  }

  // required .Config.EquipmentColor color = 4;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->color(), output);
  }

  // repeated .Packet.Race race_limit = 5;
  for (int i = 0; i < this->race_limit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->race_limit(i), output);
  }

  // repeated .Packet.Professions prof_limit = 6;
  for (int i = 0; i < this->prof_limit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->prof_limit(i), output);
  }

  // repeated .Packet.Talent talent_limit = 7;
  for (int i = 0; i < this->talent_limit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->talent_limit(i), output);
  }

  // required int32 level_limit = 8;
  if (has_level_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->level_limit(), output);
  }

  // required int32 init_durable = 9;
  if (has_init_durable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->init_durable(), output);
  }

  // required int32 suit_group_id = 10;
  if (has_suit_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->suit_group_id(), output);
  }

  // required .Packet.BattleInfo property_effect = 11;
  if (has_property_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->property_effect(), output);
  }

  // required string strength_type = 12;
  if (has_strength_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strength_type().data(), this->strength_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->strength_type(), output);
  }

  // required float strength_value = 13;
  if (has_strength_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->strength_value(), output);
  }

  // required int32 gem_slot_count = 14;
  if (has_gem_slot_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->gem_slot_count(), output);
  }

  // required int32 res = 15;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .Config.EquipmentType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required .Config.WeaponType weapon_type = 3;
  if (has_weapon_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->weapon_type(), target);
  }

  // required .Config.EquipmentColor color = 4;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->color(), target);
  }

  // repeated .Packet.Race race_limit = 5;
  for (int i = 0; i < this->race_limit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->race_limit(i), target);
  }

  // repeated .Packet.Professions prof_limit = 6;
  for (int i = 0; i < this->prof_limit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->prof_limit(i), target);
  }

  // repeated .Packet.Talent talent_limit = 7;
  for (int i = 0; i < this->talent_limit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->talent_limit(i), target);
  }

  // required int32 level_limit = 8;
  if (has_level_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->level_limit(), target);
  }

  // required int32 init_durable = 9;
  if (has_init_durable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->init_durable(), target);
  }

  // required int32 suit_group_id = 10;
  if (has_suit_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->suit_group_id(), target);
  }

  // required .Packet.BattleInfo property_effect = 11;
  if (has_property_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->property_effect(), target);
  }

  // required string strength_type = 12;
  if (has_strength_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strength_type().data(), this->strength_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->strength_type(), target);
  }

  // required float strength_value = 13;
  if (has_strength_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->strength_value(), target);
  }

  // required int32 gem_slot_count = 14;
  if (has_gem_slot_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->gem_slot_count(), target);
  }

  // required int32 res = 15;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required .Config.EquipmentType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .Config.WeaponType weapon_type = 3;
    if (has_weapon_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->weapon_type());
    }

    // required .Config.EquipmentColor color = 4;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
    }

    // required int32 level_limit = 8;
    if (has_level_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level_limit());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 init_durable = 9;
    if (has_init_durable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->init_durable());
    }

    // required int32 suit_group_id = 10;
    if (has_suit_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->suit_group_id());
    }

    // required .Packet.BattleInfo property_effect = 11;
    if (has_property_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->property_effect());
    }

    // required string strength_type = 12;
    if (has_strength_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strength_type());
    }

    // required float strength_value = 13;
    if (has_strength_value()) {
      total_size += 1 + 4;
    }

    // required int32 gem_slot_count = 14;
    if (has_gem_slot_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gem_slot_count());
    }

    // required int32 res = 15;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->res());
    }

  }
  // repeated .Packet.Race race_limit = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->race_limit_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->race_limit(i));
    }
    total_size += 1 * this->race_limit_size() + data_size;
  }

  // repeated .Packet.Professions prof_limit = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->prof_limit_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->prof_limit(i));
    }
    total_size += 1 * this->prof_limit_size() + data_size;
  }

  // repeated .Packet.Talent talent_limit = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->talent_limit_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->talent_limit(i));
    }
    total_size += 1 * this->talent_limit_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void EquipmentConfig::MergeFrom(const EquipmentConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  race_limit_.MergeFrom(from.race_limit_);
  prof_limit_.MergeFrom(from.prof_limit_);
  talent_limit_.MergeFrom(from.talent_limit_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_weapon_type()) {
      set_weapon_type(from.weapon_type());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_level_limit()) {
      set_level_limit(from.level_limit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_init_durable()) {
      set_init_durable(from.init_durable());
    }
    if (from.has_suit_group_id()) {
      set_suit_group_id(from.suit_group_id());
    }
    if (from.has_property_effect()) {
      mutable_property_effect()->::Packet::BattleInfo::MergeFrom(from.property_effect());
    }
    if (from.has_strength_type()) {
      set_strength_type(from.strength_type());
    }
    if (from.has_strength_value()) {
      set_strength_value(from.strength_value());
    }
    if (from.has_gem_slot_count()) {
      set_gem_slot_count(from.gem_slot_count());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void EquipmentConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void EquipmentConfig::CopyFrom(const EquipmentConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool EquipmentConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007f8f) != 0x00007f8f) return false;

  if (has_property_effect()) {
    if (!this->property_effect().IsInitialized()) return false;
  }
  return true;
}

void EquipmentConfig::SetInitialized() {
  _has_bits_[0] |= 0x00007f8f;

  if (has_property_effect()) {
    this->mutable_property_effect()->SetInitialized();
  }
  return;
}

void EquipmentConfig::Swap(EquipmentConfig* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(weapon_type_, other->weapon_type_);
    std::swap(color_, other->color_);
    race_limit_.Swap(&other->race_limit_);
    prof_limit_.Swap(&other->prof_limit_);
    talent_limit_.Swap(&other->talent_limit_);
    std::swap(level_limit_, other->level_limit_);
    std::swap(init_durable_, other->init_durable_);
    std::swap(suit_group_id_, other->suit_group_id_);
    std::swap(property_effect_, other->property_effect_);
    std::swap(strength_type_, other->strength_type_);
    std::swap(strength_value_, other->strength_value_);
    std::swap(gem_slot_count_, other->gem_slot_count_);
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata EquipmentConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentConfig_descriptor_;
  metadata.reflection = EquipmentConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipFixCost::kLevelFieldNumber;
const int EquipFixCost::kGreenFixGoldFieldNumber;
const int EquipFixCost::kBlueFixGoldFieldNumber;
const int EquipFixCost::kPurpleFixGoldFieldNumber;
const int EquipFixCost::kOrangeFixGoldFieldNumber;
const int EquipFixCost::kWhiteFixGoldFieldNumber;
#endif  // !_MSC_VER

EquipFixCost::EquipFixCost()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipFixCost::InitAsDefaultInstance() {
}

EquipFixCost::EquipFixCost(const EquipFixCost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipFixCost::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  green_fix_gold_ = 0;
  blue_fix_gold_ = 0;
  purple_fix_gold_ = 0;
  orange_fix_gold_ = 0;
  white_fix_gold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipFixCost::~EquipFixCost() {
  SharedDtor();
}

void EquipFixCost::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipFixCost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipFixCost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipFixCost_descriptor_;
}

const EquipFixCost& EquipFixCost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentConfig_2eproto();
  return *default_instance_;
}

EquipFixCost* EquipFixCost::default_instance_ = NULL;

EquipFixCost* EquipFixCost::New() const {
  return new EquipFixCost;
}

void EquipFixCost::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    green_fix_gold_ = 0;
    blue_fix_gold_ = 0;
    purple_fix_gold_ = 0;
    orange_fix_gold_ = 0;
    white_fix_gold_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool EquipFixCost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_green_fix_gold;
        break;
      }

      // required int32 green_fix_gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_green_fix_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &green_fix_gold_)));
          set_has_green_fix_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_blue_fix_gold;
        break;
      }

      // required int32 blue_fix_gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blue_fix_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blue_fix_gold_)));
          set_has_blue_fix_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_purple_fix_gold;
        break;
      }

      // required int32 purple_fix_gold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_purple_fix_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &purple_fix_gold_)));
          set_has_purple_fix_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_orange_fix_gold;
        break;
      }

      // required int32 orange_fix_gold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orange_fix_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orange_fix_gold_)));
          set_has_orange_fix_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_white_fix_gold;
        break;
      }

      // required int32 white_fix_gold = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_white_fix_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &white_fix_gold_)));
          set_has_white_fix_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void EquipFixCost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // required int32 green_fix_gold = 2;
  if (has_green_fix_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->green_fix_gold(), output);
  }

  // required int32 blue_fix_gold = 3;
  if (has_blue_fix_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->blue_fix_gold(), output);
  }

  // required int32 purple_fix_gold = 4;
  if (has_purple_fix_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->purple_fix_gold(), output);
  }

  // required int32 orange_fix_gold = 5;
  if (has_orange_fix_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->orange_fix_gold(), output);
  }

  // required int32 white_fix_gold = 6;
  if (has_white_fix_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->white_fix_gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipFixCost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // required int32 green_fix_gold = 2;
  if (has_green_fix_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->green_fix_gold(), target);
  }

  // required int32 blue_fix_gold = 3;
  if (has_blue_fix_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->blue_fix_gold(), target);
  }

  // required int32 purple_fix_gold = 4;
  if (has_purple_fix_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->purple_fix_gold(), target);
  }

  // required int32 orange_fix_gold = 5;
  if (has_orange_fix_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->orange_fix_gold(), target);
  }

  // required int32 white_fix_gold = 6;
  if (has_white_fix_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->white_fix_gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipFixCost::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 green_fix_gold = 2;
    if (has_green_fix_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->green_fix_gold());
    }

    // required int32 blue_fix_gold = 3;
    if (has_blue_fix_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blue_fix_gold());
    }

    // required int32 purple_fix_gold = 4;
    if (has_purple_fix_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->purple_fix_gold());
    }

    // required int32 orange_fix_gold = 5;
    if (has_orange_fix_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orange_fix_gold());
    }

    // required int32 white_fix_gold = 6;
    if (has_white_fix_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->white_fix_gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipFixCost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipFixCost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipFixCost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void EquipFixCost::MergeFrom(const EquipFixCost& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_green_fix_gold()) {
      set_green_fix_gold(from.green_fix_gold());
    }
    if (from.has_blue_fix_gold()) {
      set_blue_fix_gold(from.blue_fix_gold());
    }
    if (from.has_purple_fix_gold()) {
      set_purple_fix_gold(from.purple_fix_gold());
    }
    if (from.has_orange_fix_gold()) {
      set_orange_fix_gold(from.orange_fix_gold());
    }
    if (from.has_white_fix_gold()) {
      set_white_fix_gold(from.white_fix_gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void EquipFixCost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void EquipFixCost::CopyFrom(const EquipFixCost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool EquipFixCost::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void EquipFixCost::SetInitialized() {
  _has_bits_[0] |= 0x0000003f;

  return;
}

void EquipFixCost::Swap(EquipFixCost* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(green_fix_gold_, other->green_fix_gold_);
    std::swap(blue_fix_gold_, other->blue_fix_gold_);
    std::swap(purple_fix_gold_, other->purple_fix_gold_);
    std::swap(orange_fix_gold_, other->orange_fix_gold_);
    std::swap(white_fix_gold_, other->white_fix_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata EquipFixCost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipFixCost_descriptor_;
  metadata.reflection = EquipFixCost_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipEnhenceCost::kLevelFieldNumber;
const int EquipEnhenceCost::kEnhenceGoldFieldNumber;
#endif  // !_MSC_VER

EquipEnhenceCost::EquipEnhenceCost()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipEnhenceCost::InitAsDefaultInstance() {
}

EquipEnhenceCost::EquipEnhenceCost(const EquipEnhenceCost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipEnhenceCost::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  enhence_gold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipEnhenceCost::~EquipEnhenceCost() {
  SharedDtor();
}

void EquipEnhenceCost::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipEnhenceCost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipEnhenceCost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipEnhenceCost_descriptor_;
}

const EquipEnhenceCost& EquipEnhenceCost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentConfig_2eproto();
  return *default_instance_;
}

EquipEnhenceCost* EquipEnhenceCost::default_instance_ = NULL;

EquipEnhenceCost* EquipEnhenceCost::New() const {
  return new EquipEnhenceCost;
}

void EquipEnhenceCost::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    enhence_gold_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool EquipEnhenceCost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_enhence_gold;
        break;
      }

      // required int32 enhence_gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enhence_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enhence_gold_)));
          set_has_enhence_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void EquipEnhenceCost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // required int32 enhence_gold = 2;
  if (has_enhence_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->enhence_gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipEnhenceCost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // required int32 enhence_gold = 2;
  if (has_enhence_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->enhence_gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipEnhenceCost::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 enhence_gold = 2;
    if (has_enhence_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enhence_gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipEnhenceCost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipEnhenceCost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipEnhenceCost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void EquipEnhenceCost::MergeFrom(const EquipEnhenceCost& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_enhence_gold()) {
      set_enhence_gold(from.enhence_gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void EquipEnhenceCost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void EquipEnhenceCost::CopyFrom(const EquipEnhenceCost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool EquipEnhenceCost::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EquipEnhenceCost::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void EquipEnhenceCost::Swap(EquipEnhenceCost* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(enhence_gold_, other->enhence_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata EquipEnhenceCost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipEnhenceCost_descriptor_;
  metadata.reflection = EquipEnhenceCost_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipEnchantCost::kLevelFieldNumber;
const int EquipEnchantCost::kEnchantItemIdFieldNumber;
const int EquipEnchantCost::kEnchantItemAmountFieldNumber;
const int EquipEnchantCost::kEnchantPropertyFactorFieldNumber;
const int EquipEnchantCost::kLockItemIdFieldNumber;
const int EquipEnchantCost::kLockItemCost1FieldNumber;
const int EquipEnchantCost::kLockItemCost2FieldNumber;
const int EquipEnchantCost::kLockItemCost3FieldNumber;
const int EquipEnchantCost::kEnchantLockItemFactor1FieldNumber;
const int EquipEnchantCost::kEnchantLockItemFactor2FieldNumber;
const int EquipEnchantCost::kEnchantLockItemFactor3FieldNumber;
#endif  // !_MSC_VER

EquipEnchantCost::EquipEnchantCost()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipEnchantCost::InitAsDefaultInstance() {
}

EquipEnchantCost::EquipEnchantCost(const EquipEnchantCost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipEnchantCost::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  enchant_item_id_ = 0;
  enchant_item_amount_ = 0;
  enchant_property_factor_ = 0;
  lock_item_id_ = 0;
  lock_item_cost_1_ = 0;
  lock_item_cost_2_ = 0;
  lock_item_cost_3_ = 0;
  enchant_lock_item_factor_1_ = 0;
  enchant_lock_item_factor_2_ = 0;
  enchant_lock_item_factor_3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipEnchantCost::~EquipEnchantCost() {
  SharedDtor();
}

void EquipEnchantCost::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipEnchantCost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipEnchantCost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipEnchantCost_descriptor_;
}

const EquipEnchantCost& EquipEnchantCost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentConfig_2eproto();
  return *default_instance_;
}

EquipEnchantCost* EquipEnchantCost::default_instance_ = NULL;

EquipEnchantCost* EquipEnchantCost::New() const {
  return new EquipEnchantCost;
}

void EquipEnchantCost::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    enchant_item_id_ = 0;
    enchant_item_amount_ = 0;
    enchant_property_factor_ = 0;
    lock_item_id_ = 0;
    lock_item_cost_1_ = 0;
    lock_item_cost_2_ = 0;
    lock_item_cost_3_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    enchant_lock_item_factor_1_ = 0;
    enchant_lock_item_factor_2_ = 0;
    enchant_lock_item_factor_3_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool EquipEnchantCost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_enchant_item_id;
        break;
      }

      // required int32 enchant_item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enchant_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enchant_item_id_)));
          set_has_enchant_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_enchant_item_amount;
        break;
      }

      // required int32 enchant_item_amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enchant_item_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enchant_item_amount_)));
          set_has_enchant_item_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_enchant_property_factor;
        break;
      }

      // required int32 enchant_property_factor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enchant_property_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enchant_property_factor_)));
          set_has_enchant_property_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lock_item_id;
        break;
      }

      // required int32 lock_item_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lock_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lock_item_id_)));
          set_has_lock_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lock_item_cost_1;
        break;
      }

      // required int32 lock_item_cost_1 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lock_item_cost_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lock_item_cost_1_)));
          set_has_lock_item_cost_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_lock_item_cost_2;
        break;
      }

      // required int32 lock_item_cost_2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lock_item_cost_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lock_item_cost_2_)));
          set_has_lock_item_cost_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_lock_item_cost_3;
        break;
      }

      // required int32 lock_item_cost_3 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lock_item_cost_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lock_item_cost_3_)));
          set_has_lock_item_cost_3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_enchant_lock_item_factor_1;
        break;
      }

      // required int32 enchant_lock_item_factor_1 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enchant_lock_item_factor_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enchant_lock_item_factor_1_)));
          set_has_enchant_lock_item_factor_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_enchant_lock_item_factor_2;
        break;
      }

      // required int32 enchant_lock_item_factor_2 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enchant_lock_item_factor_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enchant_lock_item_factor_2_)));
          set_has_enchant_lock_item_factor_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_enchant_lock_item_factor_3;
        break;
      }

      // required int32 enchant_lock_item_factor_3 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enchant_lock_item_factor_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enchant_lock_item_factor_3_)));
          set_has_enchant_lock_item_factor_3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void EquipEnchantCost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // required int32 enchant_item_id = 3;
  if (has_enchant_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->enchant_item_id(), output);
  }

  // required int32 enchant_item_amount = 4;
  if (has_enchant_item_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->enchant_item_amount(), output);
  }

  // required int32 enchant_property_factor = 5;
  if (has_enchant_property_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->enchant_property_factor(), output);
  }

  // required int32 lock_item_id = 6;
  if (has_lock_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lock_item_id(), output);
  }

  // required int32 lock_item_cost_1 = 7;
  if (has_lock_item_cost_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lock_item_cost_1(), output);
  }

  // required int32 lock_item_cost_2 = 8;
  if (has_lock_item_cost_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->lock_item_cost_2(), output);
  }

  // required int32 lock_item_cost_3 = 9;
  if (has_lock_item_cost_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->lock_item_cost_3(), output);
  }

  // required int32 enchant_lock_item_factor_1 = 10;
  if (has_enchant_lock_item_factor_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->enchant_lock_item_factor_1(), output);
  }

  // required int32 enchant_lock_item_factor_2 = 11;
  if (has_enchant_lock_item_factor_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->enchant_lock_item_factor_2(), output);
  }

  // required int32 enchant_lock_item_factor_3 = 12;
  if (has_enchant_lock_item_factor_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->enchant_lock_item_factor_3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipEnchantCost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // required int32 enchant_item_id = 3;
  if (has_enchant_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->enchant_item_id(), target);
  }

  // required int32 enchant_item_amount = 4;
  if (has_enchant_item_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->enchant_item_amount(), target);
  }

  // required int32 enchant_property_factor = 5;
  if (has_enchant_property_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->enchant_property_factor(), target);
  }

  // required int32 lock_item_id = 6;
  if (has_lock_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lock_item_id(), target);
  }

  // required int32 lock_item_cost_1 = 7;
  if (has_lock_item_cost_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lock_item_cost_1(), target);
  }

  // required int32 lock_item_cost_2 = 8;
  if (has_lock_item_cost_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->lock_item_cost_2(), target);
  }

  // required int32 lock_item_cost_3 = 9;
  if (has_lock_item_cost_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->lock_item_cost_3(), target);
  }

  // required int32 enchant_lock_item_factor_1 = 10;
  if (has_enchant_lock_item_factor_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->enchant_lock_item_factor_1(), target);
  }

  // required int32 enchant_lock_item_factor_2 = 11;
  if (has_enchant_lock_item_factor_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->enchant_lock_item_factor_2(), target);
  }

  // required int32 enchant_lock_item_factor_3 = 12;
  if (has_enchant_lock_item_factor_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->enchant_lock_item_factor_3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipEnchantCost::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 enchant_item_id = 3;
    if (has_enchant_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enchant_item_id());
    }

    // required int32 enchant_item_amount = 4;
    if (has_enchant_item_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enchant_item_amount());
    }

    // required int32 enchant_property_factor = 5;
    if (has_enchant_property_factor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enchant_property_factor());
    }

    // required int32 lock_item_id = 6;
    if (has_lock_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lock_item_id());
    }

    // required int32 lock_item_cost_1 = 7;
    if (has_lock_item_cost_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lock_item_cost_1());
    }

    // required int32 lock_item_cost_2 = 8;
    if (has_lock_item_cost_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lock_item_cost_2());
    }

    // required int32 lock_item_cost_3 = 9;
    if (has_lock_item_cost_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lock_item_cost_3());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 enchant_lock_item_factor_1 = 10;
    if (has_enchant_lock_item_factor_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enchant_lock_item_factor_1());
    }

    // required int32 enchant_lock_item_factor_2 = 11;
    if (has_enchant_lock_item_factor_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enchant_lock_item_factor_2());
    }

    // required int32 enchant_lock_item_factor_3 = 12;
    if (has_enchant_lock_item_factor_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enchant_lock_item_factor_3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipEnchantCost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipEnchantCost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipEnchantCost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void EquipEnchantCost::MergeFrom(const EquipEnchantCost& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_enchant_item_id()) {
      set_enchant_item_id(from.enchant_item_id());
    }
    if (from.has_enchant_item_amount()) {
      set_enchant_item_amount(from.enchant_item_amount());
    }
    if (from.has_enchant_property_factor()) {
      set_enchant_property_factor(from.enchant_property_factor());
    }
    if (from.has_lock_item_id()) {
      set_lock_item_id(from.lock_item_id());
    }
    if (from.has_lock_item_cost_1()) {
      set_lock_item_cost_1(from.lock_item_cost_1());
    }
    if (from.has_lock_item_cost_2()) {
      set_lock_item_cost_2(from.lock_item_cost_2());
    }
    if (from.has_lock_item_cost_3()) {
      set_lock_item_cost_3(from.lock_item_cost_3());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_enchant_lock_item_factor_1()) {
      set_enchant_lock_item_factor_1(from.enchant_lock_item_factor_1());
    }
    if (from.has_enchant_lock_item_factor_2()) {
      set_enchant_lock_item_factor_2(from.enchant_lock_item_factor_2());
    }
    if (from.has_enchant_lock_item_factor_3()) {
      set_enchant_lock_item_factor_3(from.enchant_lock_item_factor_3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void EquipEnchantCost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void EquipEnchantCost::CopyFrom(const EquipEnchantCost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool EquipEnchantCost::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void EquipEnchantCost::SetInitialized() {
  _has_bits_[0] |= 0x000007ff;

  return;
}

void EquipEnchantCost::Swap(EquipEnchantCost* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(enchant_item_id_, other->enchant_item_id_);
    std::swap(enchant_item_amount_, other->enchant_item_amount_);
    std::swap(enchant_property_factor_, other->enchant_property_factor_);
    std::swap(lock_item_id_, other->lock_item_id_);
    std::swap(lock_item_cost_1_, other->lock_item_cost_1_);
    std::swap(lock_item_cost_2_, other->lock_item_cost_2_);
    std::swap(lock_item_cost_3_, other->lock_item_cost_3_);
    std::swap(enchant_lock_item_factor_1_, other->enchant_lock_item_factor_1_);
    std::swap(enchant_lock_item_factor_2_, other->enchant_lock_item_factor_2_);
    std::swap(enchant_lock_item_factor_3_, other->enchant_lock_item_factor_3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata EquipEnchantCost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipEnchantCost_descriptor_;
  metadata.reflection = EquipEnchantCost_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipDismantle_DismantleItem::kItemIdFieldNumber;
const int EquipDismantle_DismantleItem::kItemAmountFieldNumber;
#endif  // !_MSC_VER

EquipDismantle_DismantleItem::EquipDismantle_DismantleItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipDismantle_DismantleItem::InitAsDefaultInstance() {
}

EquipDismantle_DismantleItem::EquipDismantle_DismantleItem(const EquipDismantle_DismantleItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipDismantle_DismantleItem::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0;
  item_amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipDismantle_DismantleItem::~EquipDismantle_DismantleItem() {
  SharedDtor();
}

void EquipDismantle_DismantleItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipDismantle_DismantleItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipDismantle_DismantleItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipDismantle_DismantleItem_descriptor_;
}

const EquipDismantle_DismantleItem& EquipDismantle_DismantleItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentConfig_2eproto();
  return *default_instance_;
}

EquipDismantle_DismantleItem* EquipDismantle_DismantleItem::default_instance_ = NULL;

EquipDismantle_DismantleItem* EquipDismantle_DismantleItem::New() const {
  return new EquipDismantle_DismantleItem;
}

void EquipDismantle_DismantleItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0;
    item_amount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool EquipDismantle_DismantleItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_amount;
        break;
      }

      // required int32 item_amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_amount_)));
          set_has_item_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void EquipDismantle_DismantleItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_id(), output);
  }

  // required int32 item_amount = 2;
  if (has_item_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipDismantle_DismantleItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_id(), target);
  }

  // required int32 item_amount = 2;
  if (has_item_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipDismantle_DismantleItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

    // required int32 item_amount = 2;
    if (has_item_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipDismantle_DismantleItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipDismantle_DismantleItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipDismantle_DismantleItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void EquipDismantle_DismantleItem::MergeFrom(const EquipDismantle_DismantleItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_amount()) {
      set_item_amount(from.item_amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void EquipDismantle_DismantleItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void EquipDismantle_DismantleItem::CopyFrom(const EquipDismantle_DismantleItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool EquipDismantle_DismantleItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EquipDismantle_DismantleItem::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void EquipDismantle_DismantleItem::Swap(EquipDismantle_DismantleItem* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_amount_, other->item_amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata EquipDismantle_DismantleItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipDismantle_DismantleItem_descriptor_;
  metadata.reflection = EquipDismantle_DismantleItem_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int EquipDismantle::kLevelFieldNumber;
const int EquipDismantle::kColorFieldNumber;
const int EquipDismantle::kDismantleItemsFieldNumber;
#endif  // !_MSC_VER

EquipDismantle::EquipDismantle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipDismantle::InitAsDefaultInstance() {
}

EquipDismantle::EquipDismantle(const EquipDismantle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipDismantle::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  color_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipDismantle::~EquipDismantle() {
  SharedDtor();
}

void EquipDismantle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipDismantle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipDismantle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipDismantle_descriptor_;
}

const EquipDismantle& EquipDismantle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentConfig_2eproto();
  return *default_instance_;
}

EquipDismantle* EquipDismantle::default_instance_ = NULL;

EquipDismantle* EquipDismantle::New() const {
  return new EquipDismantle;
}

void EquipDismantle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    color_ = 0;
  }
  dismantle_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool EquipDismantle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_color;
        break;
      }

      // required .Config.EquipmentColor color = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Config::EquipmentColor_IsValid(value)) {
            set_color(static_cast< ::Config::EquipmentColor >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dismantle_items;
        break;
      }

      // repeated .Config.EquipDismantle.DismantleItem dismantle_items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dismantle_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dismantle_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dismantle_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void EquipDismantle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // required .Config.EquipmentColor color = 2;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->color(), output);
  }

  // repeated .Config.EquipDismantle.DismantleItem dismantle_items = 3;
  for (int i = 0; i < this->dismantle_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dismantle_items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipDismantle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // required .Config.EquipmentColor color = 2;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->color(), target);
  }

  // repeated .Config.EquipDismantle.DismantleItem dismantle_items = 3;
  for (int i = 0; i < this->dismantle_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dismantle_items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipDismantle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required .Config.EquipmentColor color = 2;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
    }

  }
  // repeated .Config.EquipDismantle.DismantleItem dismantle_items = 3;
  total_size += 1 * this->dismantle_items_size();
  for (int i = 0; i < this->dismantle_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dismantle_items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipDismantle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipDismantle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipDismantle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void EquipDismantle::MergeFrom(const EquipDismantle& from) {
  GOOGLE_CHECK_NE(&from, this);
  dismantle_items_.MergeFrom(from.dismantle_items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void EquipDismantle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void EquipDismantle::CopyFrom(const EquipDismantle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool EquipDismantle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < dismantle_items_size(); i++) {
    if (!this->dismantle_items(i).IsInitialized()) return false;
  }
  return true;
}

void EquipDismantle::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  for (int i = 0; i < dismantle_items_size(); i++) {
    this->mutable_dismantle_items(i)->SetInitialized();
  }
  return;
}

void EquipDismantle::Swap(EquipDismantle* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(color_, other->color_);
    dismantle_items_.Swap(&other->dismantle_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata EquipDismantle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipDismantle_descriptor_;
  metadata.reflection = EquipDismantle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentSuitConfig::kIdFieldNumber;
const int EquipmentSuitConfig::kPartCountFieldNumber;
const int EquipmentSuitConfig::kPartAttrFieldNumber;
const int EquipmentSuitConfig::kPartValueFieldNumber;
#endif  // !_MSC_VER

EquipmentSuitConfig::EquipmentSuitConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentSuitConfig::InitAsDefaultInstance() {
}

EquipmentSuitConfig::EquipmentSuitConfig(const EquipmentSuitConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentSuitConfig::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentSuitConfig::~EquipmentSuitConfig() {
  SharedDtor();
}

void EquipmentSuitConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentSuitConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentSuitConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentSuitConfig_descriptor_;
}

const EquipmentSuitConfig& EquipmentSuitConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentConfig_2eproto();
  return *default_instance_;
}

EquipmentSuitConfig* EquipmentSuitConfig::default_instance_ = NULL;

EquipmentSuitConfig* EquipmentSuitConfig::New() const {
  return new EquipmentSuitConfig;
}

void EquipmentSuitConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  part_count_.Clear();
  part_attr_.Clear();
  part_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool EquipmentSuitConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_part_count;
        break;
      }

      // repeated int32 part_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_part_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_part_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_part_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_part_count;
        if (input->ExpectTag(26)) goto parse_part_attr;
        break;
      }

      // repeated string part_attr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_part_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_part_attr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->part_attr(this->part_attr_size() - 1).data(),
            this->part_attr(this->part_attr_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_part_attr;
        if (input->ExpectTag(32)) goto parse_part_value;
        break;
      }

      // repeated int32 part_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_part_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_part_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_part_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_part_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void EquipmentSuitConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated int32 part_count = 2;
  for (int i = 0; i < this->part_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->part_count(i), output);
  }

  // repeated string part_attr = 3;
  for (int i = 0; i < this->part_attr_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->part_attr(i).data(), this->part_attr(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->part_attr(i), output);
  }

  // repeated int32 part_value = 4;
  for (int i = 0; i < this->part_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->part_value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentSuitConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated int32 part_count = 2;
  for (int i = 0; i < this->part_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->part_count(i), target);
  }

  // repeated string part_attr = 3;
  for (int i = 0; i < this->part_attr_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->part_attr(i).data(), this->part_attr(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->part_attr(i), target);
  }

  // repeated int32 part_value = 4;
  for (int i = 0; i < this->part_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->part_value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentSuitConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  // repeated int32 part_count = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->part_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->part_count(i));
    }
    total_size += 1 * this->part_count_size() + data_size;
  }

  // repeated string part_attr = 3;
  total_size += 1 * this->part_attr_size();
  for (int i = 0; i < this->part_attr_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->part_attr(i));
  }

  // repeated int32 part_value = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->part_value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->part_value(i));
    }
    total_size += 1 * this->part_value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentSuitConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentSuitConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentSuitConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void EquipmentSuitConfig::MergeFrom(const EquipmentSuitConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  part_count_.MergeFrom(from.part_count_);
  part_attr_.MergeFrom(from.part_attr_);
  part_value_.MergeFrom(from.part_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void EquipmentSuitConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void EquipmentSuitConfig::CopyFrom(const EquipmentSuitConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool EquipmentSuitConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EquipmentSuitConfig::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void EquipmentSuitConfig::Swap(EquipmentSuitConfig* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    part_count_.Swap(&other->part_count_);
    part_attr_.Swap(&other->part_attr_);
    part_value_.Swap(&other->part_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata EquipmentSuitConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentSuitConfig_descriptor_;
  metadata.reflection = EquipmentSuitConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnhanceMasterConfig::kLevelFieldNumber;
const int EnhanceMasterConfig::kAttrFieldNumber;
const int EnhanceMasterConfig::kValueFieldNumber;
#endif  // !_MSC_VER

EnhanceMasterConfig::EnhanceMasterConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnhanceMasterConfig::InitAsDefaultInstance() {
}

EnhanceMasterConfig::EnhanceMasterConfig(const EnhanceMasterConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnhanceMasterConfig::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnhanceMasterConfig::~EnhanceMasterConfig() {
  SharedDtor();
}

void EnhanceMasterConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnhanceMasterConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnhanceMasterConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnhanceMasterConfig_descriptor_;
}

const EnhanceMasterConfig& EnhanceMasterConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentConfig_2eproto();
  return *default_instance_;
}

EnhanceMasterConfig* EnhanceMasterConfig::default_instance_ = NULL;

EnhanceMasterConfig* EnhanceMasterConfig::New() const {
  return new EnhanceMasterConfig;
}

void EnhanceMasterConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
  }
  attr_.Clear();
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool EnhanceMasterConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attr;
        break;
      }

      // repeated string attr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_attr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attr(this->attr_size() - 1).data(),
            this->attr(this->attr_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attr;
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // repeated int32 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void EnhanceMasterConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // repeated string attr = 2;
  for (int i = 0; i < this->attr_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->attr(i).data(), this->attr(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->attr(i), output);
  }

  // repeated int32 value = 3;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnhanceMasterConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // repeated string attr = 2;
  for (int i = 0; i < this->attr_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attr(i).data(), this->attr(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->attr(i), target);
  }

  // repeated int32 value = 3;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnhanceMasterConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  // repeated string attr = 2;
  total_size += 1 * this->attr_size();
  for (int i = 0; i < this->attr_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->attr(i));
  }

  // repeated int32 value = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->value(i));
    }
    total_size += 1 * this->value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnhanceMasterConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnhanceMasterConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnhanceMasterConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void EnhanceMasterConfig::MergeFrom(const EnhanceMasterConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_.MergeFrom(from.attr_);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void EnhanceMasterConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void EnhanceMasterConfig::CopyFrom(const EnhanceMasterConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool EnhanceMasterConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EnhanceMasterConfig::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void EnhanceMasterConfig::Swap(EnhanceMasterConfig* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    attr_.Swap(&other->attr_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata EnhanceMasterConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnhanceMasterConfig_descriptor_;
  metadata.reflection = EnhanceMasterConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config

// @@protoc_insertion_point(global_scope)
