// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EquipmentConfig.proto

#ifndef PROTOBUF_EquipmentConfig_2eproto__INCLUDED
#define PROTOBUF_EquipmentConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "AllConfigEnum.pb.h"
#include "AllPacketEnum.pb.h"
#include "ProtoBufOption.pb.h"
#include "PlayerBasicInfo.pb.h"
#include "BattleInfo.pb.h"
// @@protoc_insertion_point(includes)

namespace Config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_EquipmentConfig_2eproto();
void protobuf_AssignDesc_EquipmentConfig_2eproto();
void protobuf_ShutdownFile_EquipmentConfig_2eproto();

class EquipmentConfig;
class EquipFixCost;
class EquipEnhenceCost;
class EquipEnchantCost;
class EquipDismantle;
class EquipDismantle_DismantleItem;
class EquipmentSuitConfig;
class EnhanceMasterConfig;

// ===================================================================

class EquipmentConfig : public ::google::protobuf::Message {
 public:
  EquipmentConfig();
  virtual ~EquipmentConfig();

  EquipmentConfig(const EquipmentConfig& from);

  inline EquipmentConfig& operator=(const EquipmentConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentConfig& default_instance();

  void Swap(EquipmentConfig* other);

  // implements Message ----------------------------------------------

  EquipmentConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentConfig& from);
  void MergeFrom(const EquipmentConfig& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required .Config.EquipmentType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::Config::EquipmentType type() const;
  inline void set_type(::Config::EquipmentType value);

  // required .Config.WeaponType weapon_type = 3;
  inline bool has_weapon_type() const;
  inline void clear_weapon_type();
  static const int kWeaponTypeFieldNumber = 3;
  inline ::Config::WeaponType weapon_type() const;
  inline void set_weapon_type(::Config::WeaponType value);

  // required .Config.EquipmentColor color = 4;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 4;
  inline ::Config::EquipmentColor color() const;
  inline void set_color(::Config::EquipmentColor value);

  // repeated .Packet.Race race_limit = 5;
  inline int race_limit_size() const;
  inline void clear_race_limit();
  static const int kRaceLimitFieldNumber = 5;
  inline ::Packet::Race race_limit(int index) const;
  inline void set_race_limit(int index, ::Packet::Race value);
  inline void add_race_limit(::Packet::Race value);
  inline const ::google::protobuf::RepeatedField<int>& race_limit() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_race_limit();

  // repeated .Packet.Professions prof_limit = 6;
  inline int prof_limit_size() const;
  inline void clear_prof_limit();
  static const int kProfLimitFieldNumber = 6;
  inline ::Packet::Professions prof_limit(int index) const;
  inline void set_prof_limit(int index, ::Packet::Professions value);
  inline void add_prof_limit(::Packet::Professions value);
  inline const ::google::protobuf::RepeatedField<int>& prof_limit() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_prof_limit();

  // repeated .Packet.Talent talent_limit = 7;
  inline int talent_limit_size() const;
  inline void clear_talent_limit();
  static const int kTalentLimitFieldNumber = 7;
  inline ::Packet::Talent talent_limit(int index) const;
  inline void set_talent_limit(int index, ::Packet::Talent value);
  inline void add_talent_limit(::Packet::Talent value);
  inline const ::google::protobuf::RepeatedField<int>& talent_limit() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_talent_limit();

  // required int32 level_limit = 8;
  inline bool has_level_limit() const;
  inline void clear_level_limit();
  static const int kLevelLimitFieldNumber = 8;
  inline ::google::protobuf::int32 level_limit() const;
  inline void set_level_limit(::google::protobuf::int32 value);

  // required int32 init_durable = 9;
  inline bool has_init_durable() const;
  inline void clear_init_durable();
  static const int kInitDurableFieldNumber = 9;
  inline ::google::protobuf::int32 init_durable() const;
  inline void set_init_durable(::google::protobuf::int32 value);

  // required int32 suit_group_id = 10;
  inline bool has_suit_group_id() const;
  inline void clear_suit_group_id();
  static const int kSuitGroupIdFieldNumber = 10;
  inline ::google::protobuf::int32 suit_group_id() const;
  inline void set_suit_group_id(::google::protobuf::int32 value);

  // required .Packet.BattleInfo property_effect = 11;
  inline bool has_property_effect() const;
  inline void clear_property_effect();
  static const int kPropertyEffectFieldNumber = 11;
  inline const ::Packet::BattleInfo& property_effect() const;
  inline ::Packet::BattleInfo* mutable_property_effect();
  inline ::Packet::BattleInfo* release_property_effect();
  inline void set_allocated_property_effect(::Packet::BattleInfo* property_effect);

  // required string strength_type = 12;
  inline bool has_strength_type() const;
  inline void clear_strength_type();
  static const int kStrengthTypeFieldNumber = 12;
  inline const ::std::string& strength_type() const;
  inline void set_strength_type(const ::std::string& value);
  inline void set_strength_type(const char* value);
  inline void set_strength_type(const char* value, size_t size);
  inline ::std::string* mutable_strength_type();
  inline ::std::string* release_strength_type();
  inline void set_allocated_strength_type(::std::string* strength_type);

  // required float strength_value = 13;
  inline bool has_strength_value() const;
  inline void clear_strength_value();
  static const int kStrengthValueFieldNumber = 13;
  inline float strength_value() const;
  inline void set_strength_value(float value);

  // required int32 gem_slot_count = 14;
  inline bool has_gem_slot_count() const;
  inline void clear_gem_slot_count();
  static const int kGemSlotCountFieldNumber = 14;
  inline ::google::protobuf::int32 gem_slot_count() const;
  inline void set_gem_slot_count(::google::protobuf::int32 value);

  // required int32 res = 15;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 15;
  inline ::google::protobuf::int32 res() const;
  inline void set_res(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Config.EquipmentConfig)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_weapon_type();
  inline void clear_has_weapon_type();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_level_limit();
  inline void clear_has_level_limit();
  inline void set_has_init_durable();
  inline void clear_has_init_durable();
  inline void set_has_suit_group_id();
  inline void clear_has_suit_group_id();
  inline void set_has_property_effect();
  inline void clear_has_property_effect();
  inline void set_has_strength_type();
  inline void clear_has_strength_type();
  inline void set_has_strength_value();
  inline void clear_has_strength_value();
  inline void set_has_gem_slot_count();
  inline void clear_has_gem_slot_count();
  inline void set_has_res();
  inline void clear_has_res();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  int type_;
  int weapon_type_;
  int color_;
  ::google::protobuf::RepeatedField<int> race_limit_;
  ::google::protobuf::RepeatedField<int> prof_limit_;
  ::google::protobuf::RepeatedField<int> talent_limit_;
  ::google::protobuf::int32 level_limit_;
  ::google::protobuf::int32 init_durable_;
  ::Packet::BattleInfo* property_effect_;
  ::google::protobuf::int32 suit_group_id_;
  float strength_value_;
  ::std::string* strength_type_;
  ::google::protobuf::int32 gem_slot_count_;
  ::google::protobuf::int32 res_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_EquipmentConfig_2eproto();
  friend void protobuf_AssignDesc_EquipmentConfig_2eproto();
  friend void protobuf_ShutdownFile_EquipmentConfig_2eproto();

  void InitAsDefaultInstance();
  static EquipmentConfig* default_instance_;
};
// -------------------------------------------------------------------

class EquipFixCost : public ::google::protobuf::Message {
 public:
  EquipFixCost();
  virtual ~EquipFixCost();

  EquipFixCost(const EquipFixCost& from);

  inline EquipFixCost& operator=(const EquipFixCost& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipFixCost& default_instance();

  void Swap(EquipFixCost* other);

  // implements Message ----------------------------------------------

  EquipFixCost* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipFixCost& from);
  void MergeFrom(const EquipFixCost& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required int32 green_fix_gold = 2;
  inline bool has_green_fix_gold() const;
  inline void clear_green_fix_gold();
  static const int kGreenFixGoldFieldNumber = 2;
  inline ::google::protobuf::int32 green_fix_gold() const;
  inline void set_green_fix_gold(::google::protobuf::int32 value);

  // required int32 blue_fix_gold = 3;
  inline bool has_blue_fix_gold() const;
  inline void clear_blue_fix_gold();
  static const int kBlueFixGoldFieldNumber = 3;
  inline ::google::protobuf::int32 blue_fix_gold() const;
  inline void set_blue_fix_gold(::google::protobuf::int32 value);

  // required int32 purple_fix_gold = 4;
  inline bool has_purple_fix_gold() const;
  inline void clear_purple_fix_gold();
  static const int kPurpleFixGoldFieldNumber = 4;
  inline ::google::protobuf::int32 purple_fix_gold() const;
  inline void set_purple_fix_gold(::google::protobuf::int32 value);

  // required int32 orange_fix_gold = 5;
  inline bool has_orange_fix_gold() const;
  inline void clear_orange_fix_gold();
  static const int kOrangeFixGoldFieldNumber = 5;
  inline ::google::protobuf::int32 orange_fix_gold() const;
  inline void set_orange_fix_gold(::google::protobuf::int32 value);

  // required int32 white_fix_gold = 6;
  inline bool has_white_fix_gold() const;
  inline void clear_white_fix_gold();
  static const int kWhiteFixGoldFieldNumber = 6;
  inline ::google::protobuf::int32 white_fix_gold() const;
  inline void set_white_fix_gold(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Config.EquipFixCost)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_green_fix_gold();
  inline void clear_has_green_fix_gold();
  inline void set_has_blue_fix_gold();
  inline void clear_has_blue_fix_gold();
  inline void set_has_purple_fix_gold();
  inline void clear_has_purple_fix_gold();
  inline void set_has_orange_fix_gold();
  inline void clear_has_orange_fix_gold();
  inline void set_has_white_fix_gold();
  inline void clear_has_white_fix_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 green_fix_gold_;
  ::google::protobuf::int32 blue_fix_gold_;
  ::google::protobuf::int32 purple_fix_gold_;
  ::google::protobuf::int32 orange_fix_gold_;
  ::google::protobuf::int32 white_fix_gold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_EquipmentConfig_2eproto();
  friend void protobuf_AssignDesc_EquipmentConfig_2eproto();
  friend void protobuf_ShutdownFile_EquipmentConfig_2eproto();

  void InitAsDefaultInstance();
  static EquipFixCost* default_instance_;
};
// -------------------------------------------------------------------

class EquipEnhenceCost : public ::google::protobuf::Message {
 public:
  EquipEnhenceCost();
  virtual ~EquipEnhenceCost();

  EquipEnhenceCost(const EquipEnhenceCost& from);

  inline EquipEnhenceCost& operator=(const EquipEnhenceCost& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipEnhenceCost& default_instance();

  void Swap(EquipEnhenceCost* other);

  // implements Message ----------------------------------------------

  EquipEnhenceCost* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipEnhenceCost& from);
  void MergeFrom(const EquipEnhenceCost& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required int32 enhence_gold = 2;
  inline bool has_enhence_gold() const;
  inline void clear_enhence_gold();
  static const int kEnhenceGoldFieldNumber = 2;
  inline ::google::protobuf::int32 enhence_gold() const;
  inline void set_enhence_gold(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Config.EquipEnhenceCost)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_enhence_gold();
  inline void clear_has_enhence_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 enhence_gold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_EquipmentConfig_2eproto();
  friend void protobuf_AssignDesc_EquipmentConfig_2eproto();
  friend void protobuf_ShutdownFile_EquipmentConfig_2eproto();

  void InitAsDefaultInstance();
  static EquipEnhenceCost* default_instance_;
};
// -------------------------------------------------------------------

class EquipEnchantCost : public ::google::protobuf::Message {
 public:
  EquipEnchantCost();
  virtual ~EquipEnchantCost();

  EquipEnchantCost(const EquipEnchantCost& from);

  inline EquipEnchantCost& operator=(const EquipEnchantCost& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipEnchantCost& default_instance();

  void Swap(EquipEnchantCost* other);

  // implements Message ----------------------------------------------

  EquipEnchantCost* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipEnchantCost& from);
  void MergeFrom(const EquipEnchantCost& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required int32 enchant_item_id = 3;
  inline bool has_enchant_item_id() const;
  inline void clear_enchant_item_id();
  static const int kEnchantItemIdFieldNumber = 3;
  inline ::google::protobuf::int32 enchant_item_id() const;
  inline void set_enchant_item_id(::google::protobuf::int32 value);

  // required int32 enchant_item_amount = 4;
  inline bool has_enchant_item_amount() const;
  inline void clear_enchant_item_amount();
  static const int kEnchantItemAmountFieldNumber = 4;
  inline ::google::protobuf::int32 enchant_item_amount() const;
  inline void set_enchant_item_amount(::google::protobuf::int32 value);

  // required int32 enchant_property_factor = 5;
  inline bool has_enchant_property_factor() const;
  inline void clear_enchant_property_factor();
  static const int kEnchantPropertyFactorFieldNumber = 5;
  inline ::google::protobuf::int32 enchant_property_factor() const;
  inline void set_enchant_property_factor(::google::protobuf::int32 value);

  // required int32 lock_item_id = 6;
  inline bool has_lock_item_id() const;
  inline void clear_lock_item_id();
  static const int kLockItemIdFieldNumber = 6;
  inline ::google::protobuf::int32 lock_item_id() const;
  inline void set_lock_item_id(::google::protobuf::int32 value);

  // required int32 lock_item_cost_1 = 7;
  inline bool has_lock_item_cost_1() const;
  inline void clear_lock_item_cost_1();
  static const int kLockItemCost1FieldNumber = 7;
  inline ::google::protobuf::int32 lock_item_cost_1() const;
  inline void set_lock_item_cost_1(::google::protobuf::int32 value);

  // required int32 lock_item_cost_2 = 8;
  inline bool has_lock_item_cost_2() const;
  inline void clear_lock_item_cost_2();
  static const int kLockItemCost2FieldNumber = 8;
  inline ::google::protobuf::int32 lock_item_cost_2() const;
  inline void set_lock_item_cost_2(::google::protobuf::int32 value);

  // required int32 lock_item_cost_3 = 9;
  inline bool has_lock_item_cost_3() const;
  inline void clear_lock_item_cost_3();
  static const int kLockItemCost3FieldNumber = 9;
  inline ::google::protobuf::int32 lock_item_cost_3() const;
  inline void set_lock_item_cost_3(::google::protobuf::int32 value);

  // required int32 enchant_lock_item_factor_1 = 10;
  inline bool has_enchant_lock_item_factor_1() const;
  inline void clear_enchant_lock_item_factor_1();
  static const int kEnchantLockItemFactor1FieldNumber = 10;
  inline ::google::protobuf::int32 enchant_lock_item_factor_1() const;
  inline void set_enchant_lock_item_factor_1(::google::protobuf::int32 value);

  // required int32 enchant_lock_item_factor_2 = 11;
  inline bool has_enchant_lock_item_factor_2() const;
  inline void clear_enchant_lock_item_factor_2();
  static const int kEnchantLockItemFactor2FieldNumber = 11;
  inline ::google::protobuf::int32 enchant_lock_item_factor_2() const;
  inline void set_enchant_lock_item_factor_2(::google::protobuf::int32 value);

  // required int32 enchant_lock_item_factor_3 = 12;
  inline bool has_enchant_lock_item_factor_3() const;
  inline void clear_enchant_lock_item_factor_3();
  static const int kEnchantLockItemFactor3FieldNumber = 12;
  inline ::google::protobuf::int32 enchant_lock_item_factor_3() const;
  inline void set_enchant_lock_item_factor_3(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Config.EquipEnchantCost)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_enchant_item_id();
  inline void clear_has_enchant_item_id();
  inline void set_has_enchant_item_amount();
  inline void clear_has_enchant_item_amount();
  inline void set_has_enchant_property_factor();
  inline void clear_has_enchant_property_factor();
  inline void set_has_lock_item_id();
  inline void clear_has_lock_item_id();
  inline void set_has_lock_item_cost_1();
  inline void clear_has_lock_item_cost_1();
  inline void set_has_lock_item_cost_2();
  inline void clear_has_lock_item_cost_2();
  inline void set_has_lock_item_cost_3();
  inline void clear_has_lock_item_cost_3();
  inline void set_has_enchant_lock_item_factor_1();
  inline void clear_has_enchant_lock_item_factor_1();
  inline void set_has_enchant_lock_item_factor_2();
  inline void clear_has_enchant_lock_item_factor_2();
  inline void set_has_enchant_lock_item_factor_3();
  inline void clear_has_enchant_lock_item_factor_3();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 enchant_item_id_;
  ::google::protobuf::int32 enchant_item_amount_;
  ::google::protobuf::int32 enchant_property_factor_;
  ::google::protobuf::int32 lock_item_id_;
  ::google::protobuf::int32 lock_item_cost_1_;
  ::google::protobuf::int32 lock_item_cost_2_;
  ::google::protobuf::int32 lock_item_cost_3_;
  ::google::protobuf::int32 enchant_lock_item_factor_1_;
  ::google::protobuf::int32 enchant_lock_item_factor_2_;
  ::google::protobuf::int32 enchant_lock_item_factor_3_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_EquipmentConfig_2eproto();
  friend void protobuf_AssignDesc_EquipmentConfig_2eproto();
  friend void protobuf_ShutdownFile_EquipmentConfig_2eproto();

  void InitAsDefaultInstance();
  static EquipEnchantCost* default_instance_;
};
// -------------------------------------------------------------------

class EquipDismantle_DismantleItem : public ::google::protobuf::Message {
 public:
  EquipDismantle_DismantleItem();
  virtual ~EquipDismantle_DismantleItem();

  EquipDismantle_DismantleItem(const EquipDismantle_DismantleItem& from);

  inline EquipDismantle_DismantleItem& operator=(const EquipDismantle_DismantleItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipDismantle_DismantleItem& default_instance();

  void Swap(EquipDismantle_DismantleItem* other);

  // implements Message ----------------------------------------------

  EquipDismantle_DismantleItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipDismantle_DismantleItem& from);
  void MergeFrom(const EquipDismantle_DismantleItem& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);

  // required int32 item_amount = 2;
  inline bool has_item_amount() const;
  inline void clear_item_amount();
  static const int kItemAmountFieldNumber = 2;
  inline ::google::protobuf::int32 item_amount() const;
  inline void set_item_amount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Config.EquipDismantle.DismantleItem)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_amount();
  inline void clear_has_item_amount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 item_id_;
  ::google::protobuf::int32 item_amount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_EquipmentConfig_2eproto();
  friend void protobuf_AssignDesc_EquipmentConfig_2eproto();
  friend void protobuf_ShutdownFile_EquipmentConfig_2eproto();

  void InitAsDefaultInstance();
  static EquipDismantle_DismantleItem* default_instance_;
};
// -------------------------------------------------------------------

class EquipDismantle : public ::google::protobuf::Message {
 public:
  EquipDismantle();
  virtual ~EquipDismantle();

  EquipDismantle(const EquipDismantle& from);

  inline EquipDismantle& operator=(const EquipDismantle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipDismantle& default_instance();

  void Swap(EquipDismantle* other);

  // implements Message ----------------------------------------------

  EquipDismantle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipDismantle& from);
  void MergeFrom(const EquipDismantle& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef EquipDismantle_DismantleItem DismantleItem;

  // accessors -------------------------------------------------------

  // required int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required .Config.EquipmentColor color = 2;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 2;
  inline ::Config::EquipmentColor color() const;
  inline void set_color(::Config::EquipmentColor value);

  // repeated .Config.EquipDismantle.DismantleItem dismantle_items = 3;
  inline int dismantle_items_size() const;
  inline void clear_dismantle_items();
  static const int kDismantleItemsFieldNumber = 3;
  inline const ::Config::EquipDismantle_DismantleItem& dismantle_items(int index) const;
  inline ::Config::EquipDismantle_DismantleItem* mutable_dismantle_items(int index);
  inline ::Config::EquipDismantle_DismantleItem* add_dismantle_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Config::EquipDismantle_DismantleItem >&
      dismantle_items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Config::EquipDismantle_DismantleItem >*
      mutable_dismantle_items();

  // @@protoc_insertion_point(class_scope:Config.EquipDismantle)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_color();
  inline void clear_has_color();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 level_;
  int color_;
  ::google::protobuf::RepeatedPtrField< ::Config::EquipDismantle_DismantleItem > dismantle_items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_EquipmentConfig_2eproto();
  friend void protobuf_AssignDesc_EquipmentConfig_2eproto();
  friend void protobuf_ShutdownFile_EquipmentConfig_2eproto();

  void InitAsDefaultInstance();
  static EquipDismantle* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentSuitConfig : public ::google::protobuf::Message {
 public:
  EquipmentSuitConfig();
  virtual ~EquipmentSuitConfig();

  EquipmentSuitConfig(const EquipmentSuitConfig& from);

  inline EquipmentSuitConfig& operator=(const EquipmentSuitConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentSuitConfig& default_instance();

  void Swap(EquipmentSuitConfig* other);

  // implements Message ----------------------------------------------

  EquipmentSuitConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentSuitConfig& from);
  void MergeFrom(const EquipmentSuitConfig& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // repeated int32 part_count = 2;
  inline int part_count_size() const;
  inline void clear_part_count();
  static const int kPartCountFieldNumber = 2;
  inline ::google::protobuf::int32 part_count(int index) const;
  inline void set_part_count(int index, ::google::protobuf::int32 value);
  inline void add_part_count(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      part_count() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_part_count();

  // repeated string part_attr = 3;
  inline int part_attr_size() const;
  inline void clear_part_attr();
  static const int kPartAttrFieldNumber = 3;
  inline const ::std::string& part_attr(int index) const;
  inline ::std::string* mutable_part_attr(int index);
  inline void set_part_attr(int index, const ::std::string& value);
  inline void set_part_attr(int index, const char* value);
  inline void set_part_attr(int index, const char* value, size_t size);
  inline ::std::string* add_part_attr();
  inline void add_part_attr(const ::std::string& value);
  inline void add_part_attr(const char* value);
  inline void add_part_attr(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& part_attr() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_part_attr();

  // repeated int32 part_value = 4;
  inline int part_value_size() const;
  inline void clear_part_value();
  static const int kPartValueFieldNumber = 4;
  inline ::google::protobuf::int32 part_value(int index) const;
  inline void set_part_value(int index, ::google::protobuf::int32 value);
  inline void add_part_value(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      part_value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_part_value();

  // @@protoc_insertion_point(class_scope:Config.EquipmentSuitConfig)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > part_count_;
  ::google::protobuf::RepeatedPtrField< ::std::string> part_attr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > part_value_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_EquipmentConfig_2eproto();
  friend void protobuf_AssignDesc_EquipmentConfig_2eproto();
  friend void protobuf_ShutdownFile_EquipmentConfig_2eproto();

  void InitAsDefaultInstance();
  static EquipmentSuitConfig* default_instance_;
};
// -------------------------------------------------------------------

class EnhanceMasterConfig : public ::google::protobuf::Message {
 public:
  EnhanceMasterConfig();
  virtual ~EnhanceMasterConfig();

  EnhanceMasterConfig(const EnhanceMasterConfig& from);

  inline EnhanceMasterConfig& operator=(const EnhanceMasterConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnhanceMasterConfig& default_instance();

  void Swap(EnhanceMasterConfig* other);

  // implements Message ----------------------------------------------

  EnhanceMasterConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnhanceMasterConfig& from);
  void MergeFrom(const EnhanceMasterConfig& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // repeated string attr = 2;
  inline int attr_size() const;
  inline void clear_attr();
  static const int kAttrFieldNumber = 2;
  inline const ::std::string& attr(int index) const;
  inline ::std::string* mutable_attr(int index);
  inline void set_attr(int index, const ::std::string& value);
  inline void set_attr(int index, const char* value);
  inline void set_attr(int index, const char* value, size_t size);
  inline ::std::string* add_attr();
  inline void add_attr(const ::std::string& value);
  inline void add_attr(const char* value);
  inline void add_attr(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& attr() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_attr();

  // repeated int32 value = 3;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline ::google::protobuf::int32 value(int index) const;
  inline void set_value(int index, ::google::protobuf::int32 value);
  inline void add_value(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:Config.EnhanceMasterConfig)
 private:
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> attr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > value_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_EquipmentConfig_2eproto();
  friend void protobuf_AssignDesc_EquipmentConfig_2eproto();
  friend void protobuf_ShutdownFile_EquipmentConfig_2eproto();

  void InitAsDefaultInstance();
  static EnhanceMasterConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// EquipmentConfig

// required int32 id = 1;
inline bool EquipmentConfig::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentConfig::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentConfig::clear_id() {
  id_ = 0;
  clear_has_id();
  SetDirty();
}
inline ::google::protobuf::int32 EquipmentConfig::id() const {
  return id_;
}
inline void EquipmentConfig::set_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_id();
  id_ = value;
}

// required .Config.EquipmentType type = 2;
inline bool EquipmentConfig::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipmentConfig::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipmentConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipmentConfig::clear_type() {
  type_ = -1;
  clear_has_type();
  SetDirty();
}
inline ::Config::EquipmentType EquipmentConfig::type() const {
  return static_cast< ::Config::EquipmentType >(type_);
}
inline void EquipmentConfig::set_type(::Config::EquipmentType value) {
  assert(::Config::EquipmentType_IsValid(value));
  SetDirty();
  set_has_type();
  type_ = value;
}

// required .Config.WeaponType weapon_type = 3;
inline bool EquipmentConfig::has_weapon_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipmentConfig::set_has_weapon_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipmentConfig::clear_has_weapon_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipmentConfig::clear_weapon_type() {
  weapon_type_ = -1;
  clear_has_weapon_type();
  SetDirty();
}
inline ::Config::WeaponType EquipmentConfig::weapon_type() const {
  return static_cast< ::Config::WeaponType >(weapon_type_);
}
inline void EquipmentConfig::set_weapon_type(::Config::WeaponType value) {
  assert(::Config::WeaponType_IsValid(value));
  SetDirty();
  set_has_weapon_type();
  weapon_type_ = value;
}

// required .Config.EquipmentColor color = 4;
inline bool EquipmentConfig::has_color() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EquipmentConfig::set_has_color() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EquipmentConfig::clear_has_color() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EquipmentConfig::clear_color() {
  color_ = 0;
  clear_has_color();
  SetDirty();
}
inline ::Config::EquipmentColor EquipmentConfig::color() const {
  return static_cast< ::Config::EquipmentColor >(color_);
}
inline void EquipmentConfig::set_color(::Config::EquipmentColor value) {
  assert(::Config::EquipmentColor_IsValid(value));
  SetDirty();
  set_has_color();
  color_ = value;
}

// repeated .Packet.Race race_limit = 5;
inline int EquipmentConfig::race_limit_size() const {
  return race_limit_.size();
}
inline void EquipmentConfig::clear_race_limit() {
  race_limit_.Clear();
  SetDirty();
}
inline ::Packet::Race EquipmentConfig::race_limit(int index) const {
  return static_cast< ::Packet::Race >(race_limit_.Get(index));
}
inline void EquipmentConfig::set_race_limit(int index, ::Packet::Race value) {
  assert(::Packet::Race_IsValid(value));
  SetDirty();
  race_limit_.Set(index, value);
}
inline void EquipmentConfig::add_race_limit(::Packet::Race value) {
  assert(::Packet::Race_IsValid(value));
  SetDirty();
  race_limit_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
EquipmentConfig::race_limit() const {
  return race_limit_;
}
inline ::google::protobuf::RepeatedField<int>*
EquipmentConfig::mutable_race_limit() {
  SetDirty();
  return &race_limit_;
}

// repeated .Packet.Professions prof_limit = 6;
inline int EquipmentConfig::prof_limit_size() const {
  return prof_limit_.size();
}
inline void EquipmentConfig::clear_prof_limit() {
  prof_limit_.Clear();
  SetDirty();
}
inline ::Packet::Professions EquipmentConfig::prof_limit(int index) const {
  return static_cast< ::Packet::Professions >(prof_limit_.Get(index));
}
inline void EquipmentConfig::set_prof_limit(int index, ::Packet::Professions value) {
  assert(::Packet::Professions_IsValid(value));
  SetDirty();
  prof_limit_.Set(index, value);
}
inline void EquipmentConfig::add_prof_limit(::Packet::Professions value) {
  assert(::Packet::Professions_IsValid(value));
  SetDirty();
  prof_limit_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
EquipmentConfig::prof_limit() const {
  return prof_limit_;
}
inline ::google::protobuf::RepeatedField<int>*
EquipmentConfig::mutable_prof_limit() {
  SetDirty();
  return &prof_limit_;
}

// repeated .Packet.Talent talent_limit = 7;
inline int EquipmentConfig::talent_limit_size() const {
  return talent_limit_.size();
}
inline void EquipmentConfig::clear_talent_limit() {
  talent_limit_.Clear();
  SetDirty();
}
inline ::Packet::Talent EquipmentConfig::talent_limit(int index) const {
  return static_cast< ::Packet::Talent >(talent_limit_.Get(index));
}
inline void EquipmentConfig::set_talent_limit(int index, ::Packet::Talent value) {
  assert(::Packet::Talent_IsValid(value));
  SetDirty();
  talent_limit_.Set(index, value);
}
inline void EquipmentConfig::add_talent_limit(::Packet::Talent value) {
  assert(::Packet::Talent_IsValid(value));
  SetDirty();
  talent_limit_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
EquipmentConfig::talent_limit() const {
  return talent_limit_;
}
inline ::google::protobuf::RepeatedField<int>*
EquipmentConfig::mutable_talent_limit() {
  SetDirty();
  return &talent_limit_;
}

// required int32 level_limit = 8;
inline bool EquipmentConfig::has_level_limit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EquipmentConfig::set_has_level_limit() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EquipmentConfig::clear_has_level_limit() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EquipmentConfig::clear_level_limit() {
  level_limit_ = 0;
  clear_has_level_limit();
  SetDirty();
}
inline ::google::protobuf::int32 EquipmentConfig::level_limit() const {
  return level_limit_;
}
inline void EquipmentConfig::set_level_limit(::google::protobuf::int32 value) {
  SetDirty();
  set_has_level_limit();
  level_limit_ = value;
}

// required int32 init_durable = 9;
inline bool EquipmentConfig::has_init_durable() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EquipmentConfig::set_has_init_durable() {
  _has_bits_[0] |= 0x00000100u;
}
inline void EquipmentConfig::clear_has_init_durable() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void EquipmentConfig::clear_init_durable() {
  init_durable_ = 0;
  clear_has_init_durable();
  SetDirty();
}
inline ::google::protobuf::int32 EquipmentConfig::init_durable() const {
  return init_durable_;
}
inline void EquipmentConfig::set_init_durable(::google::protobuf::int32 value) {
  SetDirty();
  set_has_init_durable();
  init_durable_ = value;
}

// required int32 suit_group_id = 10;
inline bool EquipmentConfig::has_suit_group_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void EquipmentConfig::set_has_suit_group_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void EquipmentConfig::clear_has_suit_group_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void EquipmentConfig::clear_suit_group_id() {
  suit_group_id_ = 0;
  clear_has_suit_group_id();
  SetDirty();
}
inline ::google::protobuf::int32 EquipmentConfig::suit_group_id() const {
  return suit_group_id_;
}
inline void EquipmentConfig::set_suit_group_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_suit_group_id();
  suit_group_id_ = value;
}

// required .Packet.BattleInfo property_effect = 11;
inline bool EquipmentConfig::has_property_effect() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void EquipmentConfig::set_has_property_effect() {
  _has_bits_[0] |= 0x00000400u;
}
inline void EquipmentConfig::clear_has_property_effect() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void EquipmentConfig::clear_property_effect() {
  if (property_effect_ != NULL) property_effect_->::Packet::BattleInfo::Clear();
  clear_has_property_effect();
  SetDirty();
}
inline const ::Packet::BattleInfo& EquipmentConfig::property_effect() const {
  return property_effect_ != NULL ? *property_effect_ : *default_instance_->property_effect_;
}
inline ::Packet::BattleInfo* EquipmentConfig::mutable_property_effect() {
  SetDirty();
  set_has_property_effect();
  if (property_effect_ == NULL) property_effect_ = new ::Packet::BattleInfo;
  return property_effect_;
}
inline ::Packet::BattleInfo* EquipmentConfig::release_property_effect() {
  SetDirty();
  clear_has_property_effect();
  ::Packet::BattleInfo* temp = property_effect_;
  property_effect_ = NULL;
  return temp;
}
inline void EquipmentConfig::set_allocated_property_effect(::Packet::BattleInfo* property_effect) {
  SetDirty();
  delete property_effect_;
  property_effect_ = property_effect;
  if (property_effect) {
    set_has_property_effect();
  } else {
    clear_has_property_effect();
  }
}

// required string strength_type = 12;
inline bool EquipmentConfig::has_strength_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void EquipmentConfig::set_has_strength_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void EquipmentConfig::clear_has_strength_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void EquipmentConfig::clear_strength_type() {
  if (strength_type_ != &::google::protobuf::internal::kEmptyString) {
    strength_type_->clear();
  }
  clear_has_strength_type();
  SetDirty();
}
inline const ::std::string& EquipmentConfig::strength_type() const {
  return *strength_type_;
}
inline void EquipmentConfig::set_strength_type(const ::std::string& value) {
  SetDirty();
  set_has_strength_type();
  if (strength_type_ == &::google::protobuf::internal::kEmptyString) {
    strength_type_ = new ::std::string;
  }
  strength_type_->assign(value);
}
inline void EquipmentConfig::set_strength_type(const char* value) {
  SetDirty();
  set_has_strength_type();
  if (strength_type_ == &::google::protobuf::internal::kEmptyString) {
    strength_type_ = new ::std::string;
  }
  strength_type_->assign(value);
}
inline void EquipmentConfig::set_strength_type(const char* value, size_t size) {
  SetDirty();
  set_has_strength_type();
  if (strength_type_ == &::google::protobuf::internal::kEmptyString) {
    strength_type_ = new ::std::string;
  }
  strength_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EquipmentConfig::mutable_strength_type() {
  SetDirty();
  set_has_strength_type();
  if (strength_type_ == &::google::protobuf::internal::kEmptyString) {
    strength_type_ = new ::std::string;
  }
  return strength_type_;
}
inline ::std::string* EquipmentConfig::release_strength_type() {
  SetDirty();
  clear_has_strength_type();
  if (strength_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strength_type_;
    strength_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EquipmentConfig::set_allocated_strength_type(::std::string* strength_type) {
  SetDirty();
  if (strength_type_ != &::google::protobuf::internal::kEmptyString) {
    delete strength_type_;
  }
  if (strength_type) {
    set_has_strength_type();
    strength_type_ = strength_type;
  } else {
    clear_has_strength_type();
    strength_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required float strength_value = 13;
inline bool EquipmentConfig::has_strength_value() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void EquipmentConfig::set_has_strength_value() {
  _has_bits_[0] |= 0x00001000u;
}
inline void EquipmentConfig::clear_has_strength_value() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void EquipmentConfig::clear_strength_value() {
  strength_value_ = 0;
  clear_has_strength_value();
  SetDirty();
}
inline float EquipmentConfig::strength_value() const {
  return strength_value_;
}
inline void EquipmentConfig::set_strength_value(float value) {
  SetDirty();
  set_has_strength_value();
  strength_value_ = value;
}

// required int32 gem_slot_count = 14;
inline bool EquipmentConfig::has_gem_slot_count() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void EquipmentConfig::set_has_gem_slot_count() {
  _has_bits_[0] |= 0x00002000u;
}
inline void EquipmentConfig::clear_has_gem_slot_count() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void EquipmentConfig::clear_gem_slot_count() {
  gem_slot_count_ = 0;
  clear_has_gem_slot_count();
  SetDirty();
}
inline ::google::protobuf::int32 EquipmentConfig::gem_slot_count() const {
  return gem_slot_count_;
}
inline void EquipmentConfig::set_gem_slot_count(::google::protobuf::int32 value) {
  SetDirty();
  set_has_gem_slot_count();
  gem_slot_count_ = value;
}

// required int32 res = 15;
inline bool EquipmentConfig::has_res() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void EquipmentConfig::set_has_res() {
  _has_bits_[0] |= 0x00004000u;
}
inline void EquipmentConfig::clear_has_res() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void EquipmentConfig::clear_res() {
  res_ = 0;
  clear_has_res();
  SetDirty();
}
inline ::google::protobuf::int32 EquipmentConfig::res() const {
  return res_;
}
inline void EquipmentConfig::set_res(::google::protobuf::int32 value) {
  SetDirty();
  set_has_res();
  res_ = value;
}

// -------------------------------------------------------------------

// EquipFixCost

// required int32 level = 1;
inline bool EquipFixCost::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipFixCost::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipFixCost::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipFixCost::clear_level() {
  level_ = 0;
  clear_has_level();
  SetDirty();
}
inline ::google::protobuf::int32 EquipFixCost::level() const {
  return level_;
}
inline void EquipFixCost::set_level(::google::protobuf::int32 value) {
  SetDirty();
  set_has_level();
  level_ = value;
}

// required int32 green_fix_gold = 2;
inline bool EquipFixCost::has_green_fix_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipFixCost::set_has_green_fix_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipFixCost::clear_has_green_fix_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipFixCost::clear_green_fix_gold() {
  green_fix_gold_ = 0;
  clear_has_green_fix_gold();
  SetDirty();
}
inline ::google::protobuf::int32 EquipFixCost::green_fix_gold() const {
  return green_fix_gold_;
}
inline void EquipFixCost::set_green_fix_gold(::google::protobuf::int32 value) {
  SetDirty();
  set_has_green_fix_gold();
  green_fix_gold_ = value;
}

// required int32 blue_fix_gold = 3;
inline bool EquipFixCost::has_blue_fix_gold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipFixCost::set_has_blue_fix_gold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipFixCost::clear_has_blue_fix_gold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipFixCost::clear_blue_fix_gold() {
  blue_fix_gold_ = 0;
  clear_has_blue_fix_gold();
  SetDirty();
}
inline ::google::protobuf::int32 EquipFixCost::blue_fix_gold() const {
  return blue_fix_gold_;
}
inline void EquipFixCost::set_blue_fix_gold(::google::protobuf::int32 value) {
  SetDirty();
  set_has_blue_fix_gold();
  blue_fix_gold_ = value;
}

// required int32 purple_fix_gold = 4;
inline bool EquipFixCost::has_purple_fix_gold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EquipFixCost::set_has_purple_fix_gold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EquipFixCost::clear_has_purple_fix_gold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EquipFixCost::clear_purple_fix_gold() {
  purple_fix_gold_ = 0;
  clear_has_purple_fix_gold();
  SetDirty();
}
inline ::google::protobuf::int32 EquipFixCost::purple_fix_gold() const {
  return purple_fix_gold_;
}
inline void EquipFixCost::set_purple_fix_gold(::google::protobuf::int32 value) {
  SetDirty();
  set_has_purple_fix_gold();
  purple_fix_gold_ = value;
}

// required int32 orange_fix_gold = 5;
inline bool EquipFixCost::has_orange_fix_gold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EquipFixCost::set_has_orange_fix_gold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EquipFixCost::clear_has_orange_fix_gold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EquipFixCost::clear_orange_fix_gold() {
  orange_fix_gold_ = 0;
  clear_has_orange_fix_gold();
  SetDirty();
}
inline ::google::protobuf::int32 EquipFixCost::orange_fix_gold() const {
  return orange_fix_gold_;
}
inline void EquipFixCost::set_orange_fix_gold(::google::protobuf::int32 value) {
  SetDirty();
  set_has_orange_fix_gold();
  orange_fix_gold_ = value;
}

// required int32 white_fix_gold = 6;
inline bool EquipFixCost::has_white_fix_gold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EquipFixCost::set_has_white_fix_gold() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EquipFixCost::clear_has_white_fix_gold() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EquipFixCost::clear_white_fix_gold() {
  white_fix_gold_ = 0;
  clear_has_white_fix_gold();
  SetDirty();
}
inline ::google::protobuf::int32 EquipFixCost::white_fix_gold() const {
  return white_fix_gold_;
}
inline void EquipFixCost::set_white_fix_gold(::google::protobuf::int32 value) {
  SetDirty();
  set_has_white_fix_gold();
  white_fix_gold_ = value;
}

// -------------------------------------------------------------------

// EquipEnhenceCost

// required int32 level = 1;
inline bool EquipEnhenceCost::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipEnhenceCost::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipEnhenceCost::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipEnhenceCost::clear_level() {
  level_ = 0;
  clear_has_level();
  SetDirty();
}
inline ::google::protobuf::int32 EquipEnhenceCost::level() const {
  return level_;
}
inline void EquipEnhenceCost::set_level(::google::protobuf::int32 value) {
  SetDirty();
  set_has_level();
  level_ = value;
}

// required int32 enhence_gold = 2;
inline bool EquipEnhenceCost::has_enhence_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipEnhenceCost::set_has_enhence_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipEnhenceCost::clear_has_enhence_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipEnhenceCost::clear_enhence_gold() {
  enhence_gold_ = 0;
  clear_has_enhence_gold();
  SetDirty();
}
inline ::google::protobuf::int32 EquipEnhenceCost::enhence_gold() const {
  return enhence_gold_;
}
inline void EquipEnhenceCost::set_enhence_gold(::google::protobuf::int32 value) {
  SetDirty();
  set_has_enhence_gold();
  enhence_gold_ = value;
}

// -------------------------------------------------------------------

// EquipEnchantCost

// required int32 level = 1;
inline bool EquipEnchantCost::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipEnchantCost::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipEnchantCost::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipEnchantCost::clear_level() {
  level_ = 0;
  clear_has_level();
  SetDirty();
}
inline ::google::protobuf::int32 EquipEnchantCost::level() const {
  return level_;
}
inline void EquipEnchantCost::set_level(::google::protobuf::int32 value) {
  SetDirty();
  set_has_level();
  level_ = value;
}

// required int32 enchant_item_id = 3;
inline bool EquipEnchantCost::has_enchant_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipEnchantCost::set_has_enchant_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipEnchantCost::clear_has_enchant_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipEnchantCost::clear_enchant_item_id() {
  enchant_item_id_ = 0;
  clear_has_enchant_item_id();
  SetDirty();
}
inline ::google::protobuf::int32 EquipEnchantCost::enchant_item_id() const {
  return enchant_item_id_;
}
inline void EquipEnchantCost::set_enchant_item_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_enchant_item_id();
  enchant_item_id_ = value;
}

// required int32 enchant_item_amount = 4;
inline bool EquipEnchantCost::has_enchant_item_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipEnchantCost::set_has_enchant_item_amount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipEnchantCost::clear_has_enchant_item_amount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipEnchantCost::clear_enchant_item_amount() {
  enchant_item_amount_ = 0;
  clear_has_enchant_item_amount();
  SetDirty();
}
inline ::google::protobuf::int32 EquipEnchantCost::enchant_item_amount() const {
  return enchant_item_amount_;
}
inline void EquipEnchantCost::set_enchant_item_amount(::google::protobuf::int32 value) {
  SetDirty();
  set_has_enchant_item_amount();
  enchant_item_amount_ = value;
}

// required int32 enchant_property_factor = 5;
inline bool EquipEnchantCost::has_enchant_property_factor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EquipEnchantCost::set_has_enchant_property_factor() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EquipEnchantCost::clear_has_enchant_property_factor() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EquipEnchantCost::clear_enchant_property_factor() {
  enchant_property_factor_ = 0;
  clear_has_enchant_property_factor();
  SetDirty();
}
inline ::google::protobuf::int32 EquipEnchantCost::enchant_property_factor() const {
  return enchant_property_factor_;
}
inline void EquipEnchantCost::set_enchant_property_factor(::google::protobuf::int32 value) {
  SetDirty();
  set_has_enchant_property_factor();
  enchant_property_factor_ = value;
}

// required int32 lock_item_id = 6;
inline bool EquipEnchantCost::has_lock_item_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EquipEnchantCost::set_has_lock_item_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EquipEnchantCost::clear_has_lock_item_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EquipEnchantCost::clear_lock_item_id() {
  lock_item_id_ = 0;
  clear_has_lock_item_id();
  SetDirty();
}
inline ::google::protobuf::int32 EquipEnchantCost::lock_item_id() const {
  return lock_item_id_;
}
inline void EquipEnchantCost::set_lock_item_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_lock_item_id();
  lock_item_id_ = value;
}

// required int32 lock_item_cost_1 = 7;
inline bool EquipEnchantCost::has_lock_item_cost_1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EquipEnchantCost::set_has_lock_item_cost_1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EquipEnchantCost::clear_has_lock_item_cost_1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EquipEnchantCost::clear_lock_item_cost_1() {
  lock_item_cost_1_ = 0;
  clear_has_lock_item_cost_1();
  SetDirty();
}
inline ::google::protobuf::int32 EquipEnchantCost::lock_item_cost_1() const {
  return lock_item_cost_1_;
}
inline void EquipEnchantCost::set_lock_item_cost_1(::google::protobuf::int32 value) {
  SetDirty();
  set_has_lock_item_cost_1();
  lock_item_cost_1_ = value;
}

// required int32 lock_item_cost_2 = 8;
inline bool EquipEnchantCost::has_lock_item_cost_2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EquipEnchantCost::set_has_lock_item_cost_2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EquipEnchantCost::clear_has_lock_item_cost_2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EquipEnchantCost::clear_lock_item_cost_2() {
  lock_item_cost_2_ = 0;
  clear_has_lock_item_cost_2();
  SetDirty();
}
inline ::google::protobuf::int32 EquipEnchantCost::lock_item_cost_2() const {
  return lock_item_cost_2_;
}
inline void EquipEnchantCost::set_lock_item_cost_2(::google::protobuf::int32 value) {
  SetDirty();
  set_has_lock_item_cost_2();
  lock_item_cost_2_ = value;
}

// required int32 lock_item_cost_3 = 9;
inline bool EquipEnchantCost::has_lock_item_cost_3() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EquipEnchantCost::set_has_lock_item_cost_3() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EquipEnchantCost::clear_has_lock_item_cost_3() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EquipEnchantCost::clear_lock_item_cost_3() {
  lock_item_cost_3_ = 0;
  clear_has_lock_item_cost_3();
  SetDirty();
}
inline ::google::protobuf::int32 EquipEnchantCost::lock_item_cost_3() const {
  return lock_item_cost_3_;
}
inline void EquipEnchantCost::set_lock_item_cost_3(::google::protobuf::int32 value) {
  SetDirty();
  set_has_lock_item_cost_3();
  lock_item_cost_3_ = value;
}

// required int32 enchant_lock_item_factor_1 = 10;
inline bool EquipEnchantCost::has_enchant_lock_item_factor_1() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EquipEnchantCost::set_has_enchant_lock_item_factor_1() {
  _has_bits_[0] |= 0x00000100u;
}
inline void EquipEnchantCost::clear_has_enchant_lock_item_factor_1() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void EquipEnchantCost::clear_enchant_lock_item_factor_1() {
  enchant_lock_item_factor_1_ = 0;
  clear_has_enchant_lock_item_factor_1();
  SetDirty();
}
inline ::google::protobuf::int32 EquipEnchantCost::enchant_lock_item_factor_1() const {
  return enchant_lock_item_factor_1_;
}
inline void EquipEnchantCost::set_enchant_lock_item_factor_1(::google::protobuf::int32 value) {
  SetDirty();
  set_has_enchant_lock_item_factor_1();
  enchant_lock_item_factor_1_ = value;
}

// required int32 enchant_lock_item_factor_2 = 11;
inline bool EquipEnchantCost::has_enchant_lock_item_factor_2() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void EquipEnchantCost::set_has_enchant_lock_item_factor_2() {
  _has_bits_[0] |= 0x00000200u;
}
inline void EquipEnchantCost::clear_has_enchant_lock_item_factor_2() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void EquipEnchantCost::clear_enchant_lock_item_factor_2() {
  enchant_lock_item_factor_2_ = 0;
  clear_has_enchant_lock_item_factor_2();
  SetDirty();
}
inline ::google::protobuf::int32 EquipEnchantCost::enchant_lock_item_factor_2() const {
  return enchant_lock_item_factor_2_;
}
inline void EquipEnchantCost::set_enchant_lock_item_factor_2(::google::protobuf::int32 value) {
  SetDirty();
  set_has_enchant_lock_item_factor_2();
  enchant_lock_item_factor_2_ = value;
}

// required int32 enchant_lock_item_factor_3 = 12;
inline bool EquipEnchantCost::has_enchant_lock_item_factor_3() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void EquipEnchantCost::set_has_enchant_lock_item_factor_3() {
  _has_bits_[0] |= 0x00000400u;
}
inline void EquipEnchantCost::clear_has_enchant_lock_item_factor_3() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void EquipEnchantCost::clear_enchant_lock_item_factor_3() {
  enchant_lock_item_factor_3_ = 0;
  clear_has_enchant_lock_item_factor_3();
  SetDirty();
}
inline ::google::protobuf::int32 EquipEnchantCost::enchant_lock_item_factor_3() const {
  return enchant_lock_item_factor_3_;
}
inline void EquipEnchantCost::set_enchant_lock_item_factor_3(::google::protobuf::int32 value) {
  SetDirty();
  set_has_enchant_lock_item_factor_3();
  enchant_lock_item_factor_3_ = value;
}

// -------------------------------------------------------------------

// EquipDismantle_DismantleItem

// required int32 item_id = 1;
inline bool EquipDismantle_DismantleItem::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipDismantle_DismantleItem::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipDismantle_DismantleItem::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipDismantle_DismantleItem::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
  SetDirty();
}
inline ::google::protobuf::int32 EquipDismantle_DismantleItem::item_id() const {
  return item_id_;
}
inline void EquipDismantle_DismantleItem::set_item_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_item_id();
  item_id_ = value;
}

// required int32 item_amount = 2;
inline bool EquipDismantle_DismantleItem::has_item_amount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipDismantle_DismantleItem::set_has_item_amount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipDismantle_DismantleItem::clear_has_item_amount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipDismantle_DismantleItem::clear_item_amount() {
  item_amount_ = 0;
  clear_has_item_amount();
  SetDirty();
}
inline ::google::protobuf::int32 EquipDismantle_DismantleItem::item_amount() const {
  return item_amount_;
}
inline void EquipDismantle_DismantleItem::set_item_amount(::google::protobuf::int32 value) {
  SetDirty();
  set_has_item_amount();
  item_amount_ = value;
}

// -------------------------------------------------------------------

// EquipDismantle

// required int32 level = 1;
inline bool EquipDismantle::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipDismantle::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipDismantle::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipDismantle::clear_level() {
  level_ = 0;
  clear_has_level();
  SetDirty();
}
inline ::google::protobuf::int32 EquipDismantle::level() const {
  return level_;
}
inline void EquipDismantle::set_level(::google::protobuf::int32 value) {
  SetDirty();
  set_has_level();
  level_ = value;
}

// required .Config.EquipmentColor color = 2;
inline bool EquipDismantle::has_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipDismantle::set_has_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipDismantle::clear_has_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipDismantle::clear_color() {
  color_ = 0;
  clear_has_color();
  SetDirty();
}
inline ::Config::EquipmentColor EquipDismantle::color() const {
  return static_cast< ::Config::EquipmentColor >(color_);
}
inline void EquipDismantle::set_color(::Config::EquipmentColor value) {
  assert(::Config::EquipmentColor_IsValid(value));
  SetDirty();
  set_has_color();
  color_ = value;
}

// repeated .Config.EquipDismantle.DismantleItem dismantle_items = 3;
inline int EquipDismantle::dismantle_items_size() const {
  return dismantle_items_.size();
}
inline void EquipDismantle::clear_dismantle_items() {
  dismantle_items_.Clear();
  SetDirty();
}
inline const ::Config::EquipDismantle_DismantleItem& EquipDismantle::dismantle_items(int index) const {
  return dismantle_items_.Get(index);
}
inline ::Config::EquipDismantle_DismantleItem* EquipDismantle::mutable_dismantle_items(int index) {
  SetDirty();
  return dismantle_items_.Mutable(index);
}
inline ::Config::EquipDismantle_DismantleItem* EquipDismantle::add_dismantle_items() {
  SetDirty();
  return dismantle_items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Config::EquipDismantle_DismantleItem >&
EquipDismantle::dismantle_items() const {
  return dismantle_items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Config::EquipDismantle_DismantleItem >*
EquipDismantle::mutable_dismantle_items() {
  SetDirty();
  return &dismantle_items_;
}

// -------------------------------------------------------------------

// EquipmentSuitConfig

// required int32 id = 1;
inline bool EquipmentSuitConfig::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentSuitConfig::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentSuitConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentSuitConfig::clear_id() {
  id_ = 0;
  clear_has_id();
  SetDirty();
}
inline ::google::protobuf::int32 EquipmentSuitConfig::id() const {
  return id_;
}
inline void EquipmentSuitConfig::set_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_id();
  id_ = value;
}

// repeated int32 part_count = 2;
inline int EquipmentSuitConfig::part_count_size() const {
  return part_count_.size();
}
inline void EquipmentSuitConfig::clear_part_count() {
  part_count_.Clear();
  SetDirty();
}
inline ::google::protobuf::int32 EquipmentSuitConfig::part_count(int index) const {
  return part_count_.Get(index);
}
inline void EquipmentSuitConfig::set_part_count(int index, ::google::protobuf::int32 value) {
  SetDirty();
  part_count_.Set(index, value);
}
inline void EquipmentSuitConfig::add_part_count(::google::protobuf::int32 value) {
  SetDirty();
  part_count_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
EquipmentSuitConfig::part_count() const {
  return part_count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
EquipmentSuitConfig::mutable_part_count() {
  SetDirty();
  return &part_count_;
}

// repeated string part_attr = 3;
inline int EquipmentSuitConfig::part_attr_size() const {
  return part_attr_.size();
}
inline void EquipmentSuitConfig::clear_part_attr() {
  part_attr_.Clear();
  SetDirty();
}
inline const ::std::string& EquipmentSuitConfig::part_attr(int index) const {
  return part_attr_.Get(index);
}
inline ::std::string* EquipmentSuitConfig::mutable_part_attr(int index) {
  SetDirty();
  return part_attr_.Mutable(index);
}
inline void EquipmentSuitConfig::set_part_attr(int index, const ::std::string& value) {
  SetDirty();
  part_attr_.Mutable(index)->assign(value);
}
inline void EquipmentSuitConfig::set_part_attr(int index, const char* value) {
  SetDirty();
  part_attr_.Mutable(index)->assign(value);
}
inline void EquipmentSuitConfig::set_part_attr(int index, const char* value, size_t size) {
  SetDirty();
  part_attr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EquipmentSuitConfig::add_part_attr() {
  SetDirty();
  return part_attr_.Add();
}
inline void EquipmentSuitConfig::add_part_attr(const ::std::string& value) {
  SetDirty();
  part_attr_.Add()->assign(value);
}
inline void EquipmentSuitConfig::add_part_attr(const char* value) {
  SetDirty();
  part_attr_.Add()->assign(value);
}
inline void EquipmentSuitConfig::add_part_attr(const char* value, size_t size) {
  SetDirty();
  part_attr_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
EquipmentSuitConfig::part_attr() const {
  return part_attr_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
EquipmentSuitConfig::mutable_part_attr() {
  SetDirty();
  return &part_attr_;
}

// repeated int32 part_value = 4;
inline int EquipmentSuitConfig::part_value_size() const {
  return part_value_.size();
}
inline void EquipmentSuitConfig::clear_part_value() {
  part_value_.Clear();
  SetDirty();
}
inline ::google::protobuf::int32 EquipmentSuitConfig::part_value(int index) const {
  return part_value_.Get(index);
}
inline void EquipmentSuitConfig::set_part_value(int index, ::google::protobuf::int32 value) {
  SetDirty();
  part_value_.Set(index, value);
}
inline void EquipmentSuitConfig::add_part_value(::google::protobuf::int32 value) {
  SetDirty();
  part_value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
EquipmentSuitConfig::part_value() const {
  return part_value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
EquipmentSuitConfig::mutable_part_value() {
  SetDirty();
  return &part_value_;
}

// -------------------------------------------------------------------

// EnhanceMasterConfig

// required int32 level = 1;
inline bool EnhanceMasterConfig::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnhanceMasterConfig::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnhanceMasterConfig::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnhanceMasterConfig::clear_level() {
  level_ = 0;
  clear_has_level();
  SetDirty();
}
inline ::google::protobuf::int32 EnhanceMasterConfig::level() const {
  return level_;
}
inline void EnhanceMasterConfig::set_level(::google::protobuf::int32 value) {
  SetDirty();
  set_has_level();
  level_ = value;
}

// repeated string attr = 2;
inline int EnhanceMasterConfig::attr_size() const {
  return attr_.size();
}
inline void EnhanceMasterConfig::clear_attr() {
  attr_.Clear();
  SetDirty();
}
inline const ::std::string& EnhanceMasterConfig::attr(int index) const {
  return attr_.Get(index);
}
inline ::std::string* EnhanceMasterConfig::mutable_attr(int index) {
  SetDirty();
  return attr_.Mutable(index);
}
inline void EnhanceMasterConfig::set_attr(int index, const ::std::string& value) {
  SetDirty();
  attr_.Mutable(index)->assign(value);
}
inline void EnhanceMasterConfig::set_attr(int index, const char* value) {
  SetDirty();
  attr_.Mutable(index)->assign(value);
}
inline void EnhanceMasterConfig::set_attr(int index, const char* value, size_t size) {
  SetDirty();
  attr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EnhanceMasterConfig::add_attr() {
  SetDirty();
  return attr_.Add();
}
inline void EnhanceMasterConfig::add_attr(const ::std::string& value) {
  SetDirty();
  attr_.Add()->assign(value);
}
inline void EnhanceMasterConfig::add_attr(const char* value) {
  SetDirty();
  attr_.Add()->assign(value);
}
inline void EnhanceMasterConfig::add_attr(const char* value, size_t size) {
  SetDirty();
  attr_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
EnhanceMasterConfig::attr() const {
  return attr_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
EnhanceMasterConfig::mutable_attr() {
  SetDirty();
  return &attr_;
}

// repeated int32 value = 3;
inline int EnhanceMasterConfig::value_size() const {
  return value_.size();
}
inline void EnhanceMasterConfig::clear_value() {
  value_.Clear();
  SetDirty();
}
inline ::google::protobuf::int32 EnhanceMasterConfig::value(int index) const {
  return value_.Get(index);
}
inline void EnhanceMasterConfig::set_value(int index, ::google::protobuf::int32 value) {
  SetDirty();
  value_.Set(index, value);
}
inline void EnhanceMasterConfig::add_value(::google::protobuf::int32 value) {
  SetDirty();
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
EnhanceMasterConfig::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
EnhanceMasterConfig::mutable_value() {
  SetDirty();
  return &value_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_EquipmentConfig_2eproto__INCLUDED
