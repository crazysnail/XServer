// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FriendMail.proto
#include "FriendMail.pb.h"
#include "FriendMail.proto.fflua.h"
namespace Packet {
bool FriendInfotReq_fflua_reg(lua_State* state)
{
//for decltype
	FriendInfotReq* message(nullptr);
	message;
	ff::fflua_register_t<FriendInfotReq, ctor()>(state, "FriendInfotReq", "google::protobuf::Message");
	return true;
}
bool MessageListPlayerInfo_fflua_reg(lua_State* state)
{
//for decltype
	MessageListPlayerInfo* message(nullptr);
	message;
	ff::fflua_register_t<MessageListPlayerInfo, ctor()>(state, "MessageListPlayerInfo", "google::protobuf::Message")
		// required fixed64 player_guid = 1;
		.def(&MessageListPlayerInfo::player_guid, "player_guid")
		.def(&MessageListPlayerInfo::set_player_guid, "set_player_guid")
		// required fixed64 msg_player_guid = 2;
		.def(&MessageListPlayerInfo::msg_player_guid, "msg_player_guid")
		.def(&MessageListPlayerInfo::set_msg_player_guid, "set_msg_player_guid")
		// required string msg_player_name = 3;
		.def(&MessageListPlayerInfo::msg_player_name, "msg_player_name")
		.def<void (MessageListPlayerInfo::*)(const std::string&)>(&MessageListPlayerInfo::set_msg_player_name, "set_msg_player_name")
		// required int32 msg_player_hair = 4;
		.def(&MessageListPlayerInfo::msg_player_hair, "msg_player_hair")
		.def(&MessageListPlayerInfo::set_msg_player_hair, "set_msg_player_hair")
		// required int32 msg_player_level = 5;
		.def(&MessageListPlayerInfo::msg_player_level, "msg_player_level")
		.def(&MessageListPlayerInfo::set_msg_player_level, "set_msg_player_level")
		.def(&MessageListPlayerInfo::ByteSize, "ByteSize")
		.def(&MessageListPlayerInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool FriendPlayer_fflua_reg(lua_State* state)
{
//for decltype
	FriendPlayer* message(nullptr);
	message;
	ff::fflua_register_t<FriendPlayer, ctor()>(state, "FriendPlayer", "google::protobuf::Message")
		// required fixed64 guid = 1;
		.def(&FriendPlayer::guid, "guid")
		.def(&FriendPlayer::set_guid, "set_guid")
		// required fixed64 player_guid = 2;
		.def(&FriendPlayer::player_guid, "player_guid")
		.def(&FriendPlayer::set_player_guid, "set_player_guid")
		// required fixed64 friend_guid = 3;
		.def(&FriendPlayer::friend_guid, "friend_guid")
		.def(&FriendPlayer::set_friend_guid, "set_friend_guid")
		// required int32 friendvalue = 4;
		.def(&FriendPlayer::friendvalue, "friendvalue")
		.def(&FriendPlayer::set_friendvalue, "set_friendvalue")
		// required int32 init_actor_id = 5;
		.def(&FriendPlayer::init_actor_id, "init_actor_id")
		.def(&FriendPlayer::set_init_actor_id, "set_init_actor_id")
		// required int32 hair = 6;
		.def(&FriendPlayer::hair, "hair")
		.def(&FriendPlayer::set_hair, "set_hair")
		// required string name = 7;
		.def(&FriendPlayer::name, "name")
		.def<void (FriendPlayer::*)(const std::string&)>(&FriendPlayer::set_name, "set_name")
		// required int32 level = 8;
		.def(&FriendPlayer::level, "level")
		.def(&FriendPlayer::set_level, "set_level")
		.def(&FriendPlayer::ByteSize, "ByteSize")
		.def(&FriendPlayer::SetInitialized, "SetInitialized")
		;
	return true;
}
bool ZoneInfo_fflua_reg(lua_State* state)
{
//for decltype
	ZoneInfo* message(nullptr);
	message;
	ff::fflua_register_t<ZoneInfo, ctor()>(state, "ZoneInfo", "google::protobuf::Message")
		// required fixed64 guid = 1;
		.def(&ZoneInfo::guid, "guid")
		.def(&ZoneInfo::set_guid, "set_guid")
		// required string signature = 2;
		.def(&ZoneInfo::signature, "signature")
		.def<void (ZoneInfo::*)(const std::string&)>(&ZoneInfo::set_signature, "set_signature")
		// repeated int32 signid = 3;
		.def(&ZoneInfo::signid_size, "signid_size")
		.def<decltype(message->signid(0)) (ZoneInfo::*)(int) const>(&ZoneInfo::signid, "signid")
		.def<void(ZoneInfo::*)(int, const decltype(message->signid(0)))>(&ZoneInfo::set_signid, "set_signid")
		.def(&ZoneInfo::add_signid, "add_signid")
		// required int32 popularity = 4;
		.def(&ZoneInfo::popularity, "popularity")
		.def(&ZoneInfo::set_popularity, "set_popularity")
		// required int32 celldata = 5;
		.def(&ZoneInfo::celldata, "celldata")
		.def(&ZoneInfo::set_celldata, "set_celldata")
		.def(&ZoneInfo::ByteSize, "ByteSize")
		.def(&ZoneInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool MessageBoard_fflua_reg(lua_State* state)
{
//for decltype
	MessageBoard* message(nullptr);
	message;
	ff::fflua_register_t<MessageBoard, ctor()>(state, "MessageBoard", "google::protobuf::Message")
		// required fixed64 guid = 1;
		.def(&MessageBoard::guid, "guid")
		.def(&MessageBoard::set_guid, "set_guid")
		// required fixed64 owerid = 2;
		.def(&MessageBoard::owerid, "owerid")
		.def(&MessageBoard::set_owerid, "set_owerid")
		// required fixed64 playerid = 3;
		.def(&MessageBoard::playerid, "playerid")
		.def(&MessageBoard::set_playerid, "set_playerid")
		// required string playername = 4;
		.def(&MessageBoard::playername, "playername")
		.def<void (MessageBoard::*)(const std::string&)>(&MessageBoard::set_playername, "set_playername")
		// required int32 playerhair = 5;
		.def(&MessageBoard::playerhair, "playerhair")
		.def(&MessageBoard::set_playerhair, "set_playerhair")
		// required int32 playerlevel = 6;
		.def(&MessageBoard::playerlevel, "playerlevel")
		.def(&MessageBoard::set_playerlevel, "set_playerlevel")
		// required string replyplayer = 7;
		.def(&MessageBoard::replyplayer, "replyplayer")
		.def<void (MessageBoard::*)(const std::string&)>(&MessageBoard::set_replyplayer, "set_replyplayer")
		// required string message = 8;
		.def(&MessageBoard::message, "message")
		.def<void (MessageBoard::*)(const std::string&)>(&MessageBoard::set_message, "set_message")
		// required fixed32 date = 9;
		.def(&MessageBoard::date, "date")
		.def(&MessageBoard::set_date, "set_date")
		.def(&MessageBoard::ByteSize, "ByteSize")
		.def(&MessageBoard::SetInitialized, "SetInitialized")
		;
	return true;
}
bool MessagePlayerInfo_fflua_reg(lua_State* state)
{
//for decltype
	MessagePlayerInfo* message(nullptr);
	message;
	ff::fflua_register_t<MessagePlayerInfo, ctor()>(state, "MessagePlayerInfo", "google::protobuf::Message")
		// required fixed64 source_guid = 1;
		.def(&MessagePlayerInfo::source_guid, "source_guid")
		.def(&MessagePlayerInfo::set_source_guid, "set_source_guid")
		// required string source_name = 2;
		.def(&MessagePlayerInfo::source_name, "source_name")
		.def<void (MessagePlayerInfo::*)(const std::string&)>(&MessagePlayerInfo::set_source_name, "set_source_name")
		// required int32 source_hair = 3;
		.def(&MessagePlayerInfo::source_hair, "source_hair")
		.def(&MessagePlayerInfo::set_source_hair, "set_source_hair")
		// optional string signature = 4;
		.def(&MessagePlayerInfo::signature, "signature")
		.def<void (MessagePlayerInfo::*)(const std::string&)>(&MessagePlayerInfo::set_signature, "set_signature")
		.def(&MessagePlayerInfo::has_signature, "has_signature")
		// optional int32 init_actor_id = 5;
		.def(&MessagePlayerInfo::init_actor_id, "init_actor_id")
		.def(&MessagePlayerInfo::set_init_actor_id, "set_init_actor_id")
		.def(&MessagePlayerInfo::has_init_actor_id, "has_init_actor_id")
		// required int32 level = 6;
		.def(&MessagePlayerInfo::level, "level")
		.def(&MessagePlayerInfo::set_level, "set_level")
		// optional bool havenew = 7;
		.def(&MessagePlayerInfo::havenew, "havenew")
		.def(&MessagePlayerInfo::set_havenew, "set_havenew")
		.def(&MessagePlayerInfo::has_havenew, "has_havenew")
		// optional string guildname = 8;
		.def(&MessagePlayerInfo::guildname, "guildname")
		.def<void (MessagePlayerInfo::*)(const std::string&)>(&MessagePlayerInfo::set_guildname, "set_guildname")
		.def(&MessagePlayerInfo::has_guildname, "has_guildname")
		// optional fixed64 teamid = 9;
		.def(&MessagePlayerInfo::teamid, "teamid")
		.def(&MessagePlayerInfo::set_teamid, "set_teamid")
		.def(&MessagePlayerInfo::has_teamid, "has_teamid")
		// optional int32 online = 10;
		.def(&MessagePlayerInfo::online, "online")
		.def(&MessagePlayerInfo::set_online, "set_online")
		.def(&MessagePlayerInfo::has_online, "has_online")
		.def(&MessagePlayerInfo::ByteSize, "ByteSize")
		.def(&MessagePlayerInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool ClientFriendMessageNotify_fflua_reg(lua_State* state)
{
//for decltype
	ClientFriendMessageNotify* message(nullptr);
	message;
	ff::fflua_register_t<ClientFriendMessageNotify, ctor()>(state, "ClientFriendMessageNotify", "google::protobuf::Message")
		// repeated .Packet.MessagePlayerInfo notify = 1;
		.def(&ClientFriendMessageNotify::notify_size, "notify_size")
		.def<decltype(message->notify(0)) (ClientFriendMessageNotify::*)(int) const>(&ClientFriendMessageNotify::notify, "notify")
		.def<decltype(message->mutable_notify(0)) (ClientFriendMessageNotify::*)(int)>(&ClientFriendMessageNotify::mutable_notify, "mutable_notify")
		.def(&ClientFriendMessageNotify::add_notify, "add_notify")
		.def(&ClientFriendMessageNotify::ByteSize, "ByteSize")
		.def(&ClientFriendMessageNotify::SetInitialized, "SetInitialized")
		;
	return true;
}
bool AddClientFriendMessageNotify_fflua_reg(lua_State* state)
{
//for decltype
	AddClientFriendMessageNotify* message(nullptr);
	message;
	ff::fflua_register_t<AddClientFriendMessageNotify, ctor()>(state, "AddClientFriendMessageNotify", "google::protobuf::Message")
		// required .Packet.MessagePlayerInfo notify = 1;
		.def(&AddClientFriendMessageNotify::notify, "notify")
		.def(&AddClientFriendMessageNotify::mutable_notify, "mutable_notify")
		.def(&AddClientFriendMessageNotify::ByteSize, "ByteSize")
		.def(&AddClientFriendMessageNotify::SetInitialized, "SetInitialized")
		;
	return true;
}
bool DelClientFriendMessageNotifyRR_fflua_reg(lua_State* state)
{
//for decltype
	DelClientFriendMessageNotifyRR* message(nullptr);
	message;
	ff::fflua_register_t<DelClientFriendMessageNotifyRR, ctor()>(state, "DelClientFriendMessageNotifyRR", "google::protobuf::Message")
		// required fixed64 source_guid = 1;
		.def(&DelClientFriendMessageNotifyRR::source_guid, "source_guid")
		.def(&DelClientFriendMessageNotifyRR::set_source_guid, "set_source_guid")
		.def(&DelClientFriendMessageNotifyRR::ByteSize, "ByteSize")
		.def(&DelClientFriendMessageNotifyRR::SetInitialized, "SetInitialized")
		;
	return true;
}
bool ItemCount_fflua_reg(lua_State* state)
{
//for decltype
	ItemCount* message(nullptr);
	message;
	ff::fflua_register_t<ItemCount, ctor()>(state, "ItemCount", "google::protobuf::Message")
		// required int32 itemid = 1;
		.def(&ItemCount::itemid, "itemid")
		.def(&ItemCount::set_itemid, "set_itemid")
		// required int32 itemcount = 2;
		.def(&ItemCount::itemcount, "itemcount")
		.def(&ItemCount::set_itemcount, "set_itemcount")
		.def(&ItemCount::ByteSize, "ByteSize")
		.def(&ItemCount::SetInitialized, "SetInitialized")
		;
	return true;
}
bool MessageInfo_fflua_reg(lua_State* state)
{
//for decltype
	MessageInfo* message(nullptr);
	message;
	ff::fflua_register_t<MessageInfo, ctor()>(state, "MessageInfo", "google::protobuf::Message")
		// required fixed64 guid = 1;
		.def(&MessageInfo::guid, "guid")
		.def(&MessageInfo::set_guid, "set_guid")
		// required fixed64 owner_id = 2;
		.def(&MessageInfo::owner_id, "owner_id")
		.def(&MessageInfo::set_owner_id, "set_owner_id")
		// required fixed64 datetime = 3;
		.def(&MessageInfo::datetime, "datetime")
		.def(&MessageInfo::set_datetime, "set_datetime")
		// required fixed64 source_guid = 4;
		.def(&MessageInfo::source_guid, "source_guid")
		.def(&MessageInfo::set_source_guid, "set_source_guid")
		// required string title = 5;
		.def(&MessageInfo::title, "title")
		.def<void (MessageInfo::*)(const std::string&)>(&MessageInfo::set_title, "set_title")
		// required bytes content = 6;
		.def(&MessageInfo::content, "content")
		.def<void (MessageInfo::*)(const std::string&)>(&MessageInfo::set_content, "set_content")
		// required int32 chat_time = 7;
		.def(&MessageInfo::chat_time, "chat_time")
		.def(&MessageInfo::set_chat_time, "set_chat_time")
		// repeated .Packet.ItemCount items = 8;
		.def(&MessageInfo::items_size, "items_size")
		.def<decltype(message->items(0)) (MessageInfo::*)(int) const>(&MessageInfo::items, "items")
		.def<decltype(message->mutable_items(0)) (MessageInfo::*)(int)>(&MessageInfo::mutable_items, "mutable_items")
		.def(&MessageInfo::add_items, "add_items")
		.def(&MessageInfo::ByteSize, "ByteSize")
		.def(&MessageInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool FriendMessageInfo_fflua_reg(lua_State* state)
{
//for decltype
	FriendMessageInfo* message(nullptr);
	message;
	ff::fflua_register_t<FriendMessageInfo, ctor()>(state, "FriendMessageInfo", "google::protobuf::Message")
		// required fixed64 guid = 1;
		.def(&FriendMessageInfo::guid, "guid")
		.def(&FriendMessageInfo::set_guid, "set_guid")
		// required .Packet.FriendMessageType type = 2;
		.def(&FriendMessageInfo::type, "type")
		.def(&FriendMessageInfo::set_type, "set_type")
		// required fixed64 receive_guid = 3;
		.def(&FriendMessageInfo::receive_guid, "receive_guid")
		.def(&FriendMessageInfo::set_receive_guid, "set_receive_guid")
		// required fixed64 datetime = 4;
		.def(&FriendMessageInfo::datetime, "datetime")
		.def(&FriendMessageInfo::set_datetime, "set_datetime")
		// required fixed64 send_guid = 5;
		.def(&FriendMessageInfo::send_guid, "send_guid")
		.def(&FriendMessageInfo::set_send_guid, "set_send_guid")
		// required bytes content = 6;
		.def(&FriendMessageInfo::content, "content")
		.def<void (FriendMessageInfo::*)(const std::string&)>(&FriendMessageInfo::set_content, "set_content")
		// required int32 chat_time = 7;
		.def(&FriendMessageInfo::chat_time, "chat_time")
		.def(&FriendMessageInfo::set_chat_time, "set_chat_time")
		.def(&FriendMessageInfo::ByteSize, "ByteSize")
		.def(&FriendMessageInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool FriendInfo_fflua_reg(lua_State* state)
{
//for decltype
	FriendInfo* message(nullptr);
	message;
	ff::fflua_register_t<FriendInfo, ctor()>(state, "FriendInfo", "google::protobuf::Message")
		// required fixed64 guid = 1;
		.def(&FriendInfo::guid, "guid")
		.def(&FriendInfo::set_guid, "set_guid")
		// required int32 init_actor_id = 3;
		.def(&FriendInfo::init_actor_id, "init_actor_id")
		.def(&FriendInfo::set_init_actor_id, "set_init_actor_id")
		// required int32 hair = 4;
		.def(&FriendInfo::hair, "hair")
		.def(&FriendInfo::set_hair, "set_hair")
		// required string name = 5;
		.def(&FriendInfo::name, "name")
		.def<void (FriendInfo::*)(const std::string&)>(&FriendInfo::set_name, "set_name")
		// required int32 level = 6;
		.def(&FriendInfo::level, "level")
		.def(&FriendInfo::set_level, "set_level")
		// required string signature = 7;
		.def(&FriendInfo::signature, "signature")
		.def<void (FriendInfo::*)(const std::string&)>(&FriendInfo::set_signature, "set_signature")
		// required string guildname = 8;
		.def(&FriendInfo::guildname, "guildname")
		.def<void (FriendInfo::*)(const std::string&)>(&FriendInfo::set_guildname, "set_guildname")
		// required int32 friendvalue = 9;
		.def(&FriendInfo::friendvalue, "friendvalue")
		.def(&FriendInfo::set_friendvalue, "set_friendvalue")
		// required fixed64 teamid = 10;
		.def(&FriendInfo::teamid, "teamid")
		.def(&FriendInfo::set_teamid, "set_teamid")
		// required int32 online = 11;
		.def(&FriendInfo::online, "online")
		.def(&FriendInfo::set_online, "set_online")
		.def(&FriendInfo::ByteSize, "ByteSize")
		.def(&FriendInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool FriendInfotReply_fflua_reg(lua_State* state)
{
//for decltype
	FriendInfotReply* message(nullptr);
	message;
	ff::fflua_register_t<FriendInfotReply, ctor()>(state, "FriendInfotReply", "google::protobuf::Message")
		// required .Packet.MessagesUpdate mailmessages = 1;
		.def(&FriendInfotReply::mailmessages, "mailmessages")
		.def(&FriendInfotReply::mutable_mailmessages, "mutable_mailmessages")
		// required .Packet.FriendListUpdate friends = 3;
		.def(&FriendInfotReply::friends, "friends")
		.def(&FriendInfotReply::mutable_friends, "mutable_friends")
		// required .Packet.RecommendsUpdate recommends = 4;
		.def(&FriendInfotReply::recommends, "recommends")
		.def(&FriendInfotReply::mutable_recommends, "mutable_recommends")
		// required .Packet.ClientFriendMessageNotify notifyinfos = 5;
		.def(&FriendInfotReply::notifyinfos, "notifyinfos")
		.def(&FriendInfotReply::mutable_notifyinfos, "mutable_notifyinfos")
		// optional .Packet.ZoneInfo zoneinfo = 6;
		.def(&FriendInfotReply::zoneinfo, "zoneinfo")
		.def(&FriendInfotReply::mutable_zoneinfo, "mutable_zoneinfo")
		.def(&FriendInfotReply::has_zoneinfo, "has_zoneinfo")
		// repeated .Packet.MessageBoard msgs = 7;
		.def(&FriendInfotReply::msgs_size, "msgs_size")
		.def<decltype(message->msgs(0)) (FriendInfotReply::*)(int) const>(&FriendInfotReply::msgs, "msgs")
		.def<decltype(message->mutable_msgs(0)) (FriendInfotReply::*)(int)>(&FriendInfotReply::mutable_msgs, "mutable_msgs")
		.def(&FriendInfotReply::add_msgs, "add_msgs")
		// repeated .Packet.FriendMessageInfo offlinemsgs = 8;
		.def(&FriendInfotReply::offlinemsgs_size, "offlinemsgs_size")
		.def<decltype(message->offlinemsgs(0)) (FriendInfotReply::*)(int) const>(&FriendInfotReply::offlinemsgs, "offlinemsgs")
		.def<decltype(message->mutable_offlinemsgs(0)) (FriendInfotReply::*)(int)>(&FriendInfotReply::mutable_offlinemsgs, "mutable_offlinemsgs")
		.def(&FriendInfotReply::add_offlinemsgs, "add_offlinemsgs")
		.def(&FriendInfotReply::ByteSize, "ByteSize")
		.def(&FriendInfotReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool RecommendReq_fflua_reg(lua_State* state)
{
//for decltype
	RecommendReq* message(nullptr);
	message;
	ff::fflua_register_t<RecommendReq, ctor()>(state, "RecommendReq", "google::protobuf::Message");
	return true;
}
bool FriendListReq_fflua_reg(lua_State* state)
{
//for decltype
	FriendListReq* message(nullptr);
	message;
	ff::fflua_register_t<FriendListReq, ctor()>(state, "FriendListReq", "google::protobuf::Message");
	return true;
}
bool FindPlayerInfo_fflua_reg(lua_State* state)
{
//for decltype
	FindPlayerInfo* message(nullptr);
	message;
	ff::fflua_register_t<FindPlayerInfo, ctor()>(state, "FindPlayerInfo", "google::protobuf::Message")
		// required fixed64 guid = 1;
		.def(&FindPlayerInfo::guid, "guid")
		.def(&FindPlayerInfo::set_guid, "set_guid")
		// required string name = 2;
		.def(&FindPlayerInfo::name, "name")
		.def<void (FindPlayerInfo::*)(const std::string&)>(&FindPlayerInfo::set_name, "set_name")
		// required int32 hair = 3;
		.def(&FindPlayerInfo::hair, "hair")
		.def(&FindPlayerInfo::set_hair, "set_hair")
		// required int32 level = 4;
		.def(&FindPlayerInfo::level, "level")
		.def(&FindPlayerInfo::set_level, "set_level")
		// required int32 init_actor_id = 5;
		.def(&FindPlayerInfo::init_actor_id, "init_actor_id")
		.def(&FindPlayerInfo::set_init_actor_id, "set_init_actor_id")
		.def(&FindPlayerInfo::ByteSize, "ByteSize")
		.def(&FindPlayerInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool FindFriendByNameReq_fflua_reg(lua_State* state)
{
//for decltype
	FindFriendByNameReq* message(nullptr);
	message;
	ff::fflua_register_t<FindFriendByNameReq, ctor()>(state, "FindFriendByNameReq", "google::protobuf::Message")
		// required string name = 1;
		.def(&FindFriendByNameReq::name, "name")
		.def<void (FindFriendByNameReq::*)(const std::string&)>(&FindFriendByNameReq::set_name, "set_name")
		.def(&FindFriendByNameReq::ByteSize, "ByteSize")
		.def(&FindFriendByNameReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool FindFriendByGuidReq_fflua_reg(lua_State* state)
{
//for decltype
	FindFriendByGuidReq* message(nullptr);
	message;
	ff::fflua_register_t<FindFriendByGuidReq, ctor()>(state, "FindFriendByGuidReq", "google::protobuf::Message")
		// required fixed64 guid = 1;
		.def(&FindFriendByGuidReq::guid, "guid")
		.def(&FindFriendByGuidReq::set_guid, "set_guid")
		.def(&FindFriendByGuidReq::ByteSize, "ByteSize")
		.def(&FindFriendByGuidReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool FindFriendReply_fflua_reg(lua_State* state)
{
//for decltype
	FindFriendReply* message(nullptr);
	message;
	ff::fflua_register_t<FindFriendReply, ctor()>(state, "FindFriendReply", "google::protobuf::Message")
		// required .Packet.FindPlayerInfo info = 1;
		.def(&FindFriendReply::info, "info")
		.def(&FindFriendReply::mutable_info, "mutable_info")
		.def(&FindFriendReply::ByteSize, "ByteSize")
		.def(&FindFriendReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool FriendListUpdate_fflua_reg(lua_State* state)
{
//for decltype
	FriendListUpdate* message(nullptr);
	message;
	ff::fflua_register_t<FriendListUpdate, ctor()>(state, "FriendListUpdate", "google::protobuf::Message")
		// repeated .Packet.FriendInfo friends = 1;
		.def(&FriendListUpdate::friends_size, "friends_size")
		.def<decltype(message->friends(0)) (FriendListUpdate::*)(int) const>(&FriendListUpdate::friends, "friends")
		.def<decltype(message->mutable_friends(0)) (FriendListUpdate::*)(int)>(&FriendListUpdate::mutable_friends, "mutable_friends")
		.def(&FriendListUpdate::add_friends, "add_friends")
		.def(&FriendListUpdate::ByteSize, "ByteSize")
		.def(&FriendListUpdate::SetInitialized, "SetInitialized")
		;
	return true;
}
bool RecommendsUpdate_fflua_reg(lua_State* state)
{
//for decltype
	RecommendsUpdate* message(nullptr);
	message;
	ff::fflua_register_t<RecommendsUpdate, ctor()>(state, "RecommendsUpdate", "google::protobuf::Message")
		// repeated .Packet.FriendInfo recommends = 1;
		.def(&RecommendsUpdate::recommends_size, "recommends_size")
		.def<decltype(message->recommends(0)) (RecommendsUpdate::*)(int) const>(&RecommendsUpdate::recommends, "recommends")
		.def<decltype(message->mutable_recommends(0)) (RecommendsUpdate::*)(int)>(&RecommendsUpdate::mutable_recommends, "mutable_recommends")
		.def(&RecommendsUpdate::add_recommends, "add_recommends")
		.def(&RecommendsUpdate::ByteSize, "ByteSize")
		.def(&RecommendsUpdate::SetInitialized, "SetInitialized")
		;
	return true;
}
bool MessagesUpdate_fflua_reg(lua_State* state)
{
//for decltype
	MessagesUpdate* message(nullptr);
	message;
	ff::fflua_register_t<MessagesUpdate, ctor()>(state, "MessagesUpdate", "google::protobuf::Message")
		// repeated .Packet.MessageInfo messages = 1;
		.def(&MessagesUpdate::messages_size, "messages_size")
		.def<decltype(message->messages(0)) (MessagesUpdate::*)(int) const>(&MessagesUpdate::messages, "messages")
		.def<decltype(message->mutable_messages(0)) (MessagesUpdate::*)(int)>(&MessagesUpdate::mutable_messages, "mutable_messages")
		.def(&MessagesUpdate::add_messages, "add_messages")
		.def(&MessagesUpdate::ByteSize, "ByteSize")
		.def(&MessagesUpdate::SetInitialized, "SetInitialized")
		;
	return true;
}
bool AddFriendMessagesReply_fflua_reg(lua_State* state)
{
//for decltype
	AddFriendMessagesReply* message(nullptr);
	message;
	ff::fflua_register_t<AddFriendMessagesReply, ctor()>(state, "AddFriendMessagesReply", "google::protobuf::Message")
		// required .Packet.FriendMessageInfo messages = 1;
		.def(&AddFriendMessagesReply::messages, "messages")
		.def(&AddFriendMessagesReply::mutable_messages, "mutable_messages")
		.def(&AddFriendMessagesReply::ByteSize, "ByteSize")
		.def(&AddFriendMessagesReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool FriendMessageReq_fflua_reg(lua_State* state)
{
//for decltype
	FriendMessageReq* message(nullptr);
	message;
	ff::fflua_register_t<FriendMessageReq, ctor()>(state, "FriendMessageReq", "google::protobuf::Message")
		// required fixed64 player_guid = 1;
		.def(&FriendMessageReq::player_guid, "player_guid")
		.def(&FriendMessageReq::set_player_guid, "set_player_guid")
		// required bytes chat_message = 2;
		.def(&FriendMessageReq::chat_message, "chat_message")
		.def<void (FriendMessageReq::*)(const std::string&)>(&FriendMessageReq::set_chat_message, "set_chat_message")
		// required int32 chat_time = 3;
		.def(&FriendMessageReq::chat_time, "chat_time")
		.def(&FriendMessageReq::set_chat_time, "set_chat_time")
		.def(&FriendMessageReq::ByteSize, "ByteSize")
		.def(&FriendMessageReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool SetZoneSignatureReq_fflua_reg(lua_State* state)
{
//for decltype
	SetZoneSignatureReq* message(nullptr);
	message;
	ff::fflua_register_t<SetZoneSignatureReq, ctor()>(state, "SetZoneSignatureReq", "google::protobuf::Message")
		// required string signature = 1;
		.def(&SetZoneSignatureReq::signature, "signature")
		.def<void (SetZoneSignatureReq::*)(const std::string&)>(&SetZoneSignatureReq::set_signature, "set_signature")
		.def(&SetZoneSignatureReq::ByteSize, "ByteSize")
		.def(&SetZoneSignatureReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool SignatureUpdate_fflua_reg(lua_State* state)
{
//for decltype
	SignatureUpdate* message(nullptr);
	message;
	ff::fflua_register_t<SignatureUpdate, ctor()>(state, "SignatureUpdate", "google::protobuf::Message")
		// required string signature = 1;
		.def(&SignatureUpdate::signature, "signature")
		.def<void (SignatureUpdate::*)(const std::string&)>(&SignatureUpdate::set_signature, "set_signature")
		.def(&SignatureUpdate::ByteSize, "ByteSize")
		.def(&SignatureUpdate::SetInitialized, "SetInitialized")
		;
	return true;
}
bool AddFriendReq_fflua_reg(lua_State* state)
{
//for decltype
	AddFriendReq* message(nullptr);
	message;
	ff::fflua_register_t<AddFriendReq, ctor()>(state, "AddFriendReq", "google::protobuf::Message")
		// required fixed64 player_guid = 1;
		.def(&AddFriendReq::player_guid, "player_guid")
		.def(&AddFriendReq::set_player_guid, "set_player_guid")
		.def(&AddFriendReq::ByteSize, "ByteSize")
		.def(&AddFriendReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool DelFriendReq_fflua_reg(lua_State* state)
{
//for decltype
	DelFriendReq* message(nullptr);
	message;
	ff::fflua_register_t<DelFriendReq, ctor()>(state, "DelFriendReq", "google::protobuf::Message")
		// required fixed64 player_guid = 1;
		.def(&DelFriendReq::player_guid, "player_guid")
		.def(&DelFriendReq::set_player_guid, "set_player_guid")
		.def(&DelFriendReq::ByteSize, "ByteSize")
		.def(&DelFriendReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool AskTeamReq_fflua_reg(lua_State* state)
{
//for decltype
	AskTeamReq* message(nullptr);
	message;
	ff::fflua_register_t<AskTeamReq, ctor()>(state, "AskTeamReq", "google::protobuf::Message")
		// required fixed64 player_guid = 1;
		.def(&AskTeamReq::player_guid, "player_guid")
		.def(&AskTeamReq::set_player_guid, "set_player_guid")
		.def(&AskTeamReq::ByteSize, "ByteSize")
		.def(&AskTeamReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool AskGuildReq_fflua_reg(lua_State* state)
{
//for decltype
	AskGuildReq* message(nullptr);
	message;
	ff::fflua_register_t<AskGuildReq, ctor()>(state, "AskGuildReq", "google::protobuf::Message")
		// required fixed64 player_guid = 1;
		.def(&AskGuildReq::player_guid, "player_guid")
		.def(&AskGuildReq::set_player_guid, "set_player_guid")
		.def(&AskGuildReq::ByteSize, "ByteSize")
		.def(&AskGuildReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool SendGiftReq_fflua_reg(lua_State* state)
{
//for decltype
	SendGiftReq* message(nullptr);
	message;
	ff::fflua_register_t<SendGiftReq, ctor()>(state, "SendGiftReq", "google::protobuf::Message")
		// required fixed64 player_guid = 1;
		.def(&SendGiftReq::player_guid, "player_guid")
		.def(&SendGiftReq::set_player_guid, "set_player_guid")
		// repeated .Packet.ItemCount items = 2;
		.def(&SendGiftReq::items_size, "items_size")
		.def<decltype(message->items(0)) (SendGiftReq::*)(int) const>(&SendGiftReq::items, "items")
		.def<decltype(message->mutable_items(0)) (SendGiftReq::*)(int)>(&SendGiftReq::mutable_items, "mutable_items")
		.def(&SendGiftReq::add_items, "add_items")
		.def(&SendGiftReq::ByteSize, "ByteSize")
		.def(&SendGiftReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool ViewZoneReq_fflua_reg(lua_State* state)
{
//for decltype
	ViewZoneReq* message(nullptr);
	message;
	ff::fflua_register_t<ViewZoneReq, ctor()>(state, "ViewZoneReq", "google::protobuf::Message")
		// required fixed64 player_guid = 1;
		.def(&ViewZoneReq::player_guid, "player_guid")
		.def(&ViewZoneReq::set_player_guid, "set_player_guid")
		.def(&ViewZoneReq::ByteSize, "ByteSize")
		.def(&ViewZoneReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool ZoneBaseInfo_fflua_reg(lua_State* state)
{
//for decltype
	ZoneBaseInfo* message(nullptr);
	message;
	ff::fflua_register_t<ZoneBaseInfo, ctor()>(state, "ZoneBaseInfo", "google::protobuf::Message")
		// required fixed64 player_guid = 1;
		.def(&ZoneBaseInfo::player_guid, "player_guid")
		.def(&ZoneBaseInfo::set_player_guid, "set_player_guid")
		// required string player_name = 2;
		.def(&ZoneBaseInfo::player_name, "player_name")
		.def<void (ZoneBaseInfo::*)(const std::string&)>(&ZoneBaseInfo::set_player_name, "set_player_name")
		// required int32 player_hair = 3;
		.def(&ZoneBaseInfo::player_hair, "player_hair")
		.def(&ZoneBaseInfo::set_player_hair, "set_player_hair")
		// required int32 init_actor_id = 4;
		.def(&ZoneBaseInfo::init_actor_id, "init_actor_id")
		.def(&ZoneBaseInfo::set_init_actor_id, "set_init_actor_id")
		// required int32 level = 5;
		.def(&ZoneBaseInfo::level, "level")
		.def(&ZoneBaseInfo::set_level, "set_level")
		// required string guildname = 6;
		.def(&ZoneBaseInfo::guildname, "guildname")
		.def<void (ZoneBaseInfo::*)(const std::string&)>(&ZoneBaseInfo::set_guildname, "set_guildname")
		.def(&ZoneBaseInfo::ByteSize, "ByteSize")
		.def(&ZoneBaseInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool ViewZoneReply_fflua_reg(lua_State* state)
{
//for decltype
	ViewZoneReply* message(nullptr);
	message;
	ff::fflua_register_t<ViewZoneReply, ctor()>(state, "ViewZoneReply", "google::protobuf::Message")
		// required .Packet.ZoneBaseInfo base_info = 1;
		.def(&ViewZoneReply::base_info, "base_info")
		.def(&ViewZoneReply::mutable_base_info, "mutable_base_info")
		// repeated .Packet.EquipItem main_equips = 4;
		.def(&ViewZoneReply::main_equips_size, "main_equips_size")
		.def<decltype(message->main_equips(0)) (ViewZoneReply::*)(int) const>(&ViewZoneReply::main_equips, "main_equips")
		.def<decltype(message->mutable_main_equips(0)) (ViewZoneReply::*)(int)>(&ViewZoneReply::mutable_main_equips, "mutable_main_equips")
		.def(&ViewZoneReply::add_main_equips, "add_main_equips")
		// repeated .Packet.MessageBoard msgs = 5;
		.def(&ViewZoneReply::msgs_size, "msgs_size")
		.def<decltype(message->msgs(0)) (ViewZoneReply::*)(int) const>(&ViewZoneReply::msgs, "msgs")
		.def<decltype(message->mutable_msgs(0)) (ViewZoneReply::*)(int)>(&ViewZoneReply::mutable_msgs, "mutable_msgs")
		.def(&ViewZoneReply::add_msgs, "add_msgs")
		// required .Packet.ZoneInfo zoneinfo = 6;
		.def(&ViewZoneReply::zoneinfo, "zoneinfo")
		.def(&ViewZoneReply::mutable_zoneinfo, "mutable_zoneinfo")
		.def(&ViewZoneReply::ByteSize, "ByteSize")
		.def(&ViewZoneReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool DelMessageReq_fflua_reg(lua_State* state)
{
//for decltype
	DelMessageReq* message(nullptr);
	message;
	ff::fflua_register_t<DelMessageReq, ctor()>(state, "DelMessageReq", "google::protobuf::Message")
		// required fixed64 message_id = 1;
		.def(&DelMessageReq::message_id, "message_id")
		.def(&DelMessageReq::set_message_id, "set_message_id")
		.def(&DelMessageReq::ByteSize, "ByteSize")
		.def(&DelMessageReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool NewMessageNotify_fflua_reg(lua_State* state)
{
//for decltype
	NewMessageNotify* message(nullptr);
	message;
	ff::fflua_register_t<NewMessageNotify, ctor()>(state, "NewMessageNotify", "google::protobuf::Message");
	return true;
}
bool SignConfig_fflua_reg(lua_State* state)
{
//for decltype
	SignConfig* message(nullptr);
	message;
	ff::fflua_register_t<SignConfig, ctor()>(state, "SignConfig", "google::protobuf::Message")
		// required int32 id = 1;
		.def(&SignConfig::id, "id")
		.def(&SignConfig::set_id, "set_id")
		// required string type = 2;
		.def(&SignConfig::type, "type")
		.def<void (SignConfig::*)(const std::string&)>(&SignConfig::set_type, "set_type")
		// required string sign = 3;
		.def(&SignConfig::sign, "sign")
		.def<void (SignConfig::*)(const std::string&)>(&SignConfig::set_sign, "set_sign")
		.def(&SignConfig::ByteSize, "ByteSize")
		.def(&SignConfig::SetInitialized, "SetInitialized")
		;
	return true;
}
bool UpdateSign_fflua_reg(lua_State* state)
{
//for decltype
	UpdateSign* message(nullptr);
	message;
	ff::fflua_register_t<UpdateSign, ctor()>(state, "UpdateSign", "google::protobuf::Message")
		// repeated int32 id = 1;
		.def(&UpdateSign::id_size, "id_size")
		.def<decltype(message->id(0)) (UpdateSign::*)(int) const>(&UpdateSign::id, "id")
		.def<void(UpdateSign::*)(int, const decltype(message->id(0)))>(&UpdateSign::set_id, "set_id")
		.def(&UpdateSign::add_id, "add_id")
		.def(&UpdateSign::ByteSize, "ByteSize")
		.def(&UpdateSign::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GetMessageBoard_fflua_reg(lua_State* state)
{
//for decltype
	GetMessageBoard* message(nullptr);
	message;
	ff::fflua_register_t<GetMessageBoard, ctor()>(state, "GetMessageBoard", "google::protobuf::Message")
		// repeated .Packet.MessageBoard list = 1;
		.def(&GetMessageBoard::list_size, "list_size")
		.def<decltype(message->list(0)) (GetMessageBoard::*)(int) const>(&GetMessageBoard::list, "list")
		.def<decltype(message->mutable_list(0)) (GetMessageBoard::*)(int)>(&GetMessageBoard::mutable_list, "mutable_list")
		.def(&GetMessageBoard::add_list, "add_list")
		.def(&GetMessageBoard::ByteSize, "ByteSize")
		.def(&GetMessageBoard::SetInitialized, "SetInitialized")
		;
	return true;
}
bool AddMessageBoard_fflua_reg(lua_State* state)
{
//for decltype
	AddMessageBoard* message(nullptr);
	message;
	ff::fflua_register_t<AddMessageBoard, ctor()>(state, "AddMessageBoard", "google::protobuf::Message")
		// required .Packet.MessageBoard addmsg = 1;
		.def(&AddMessageBoard::addmsg, "addmsg")
		.def(&AddMessageBoard::mutable_addmsg, "mutable_addmsg")
		// required bool self = 2;
		.def(&AddMessageBoard::self, "self")
		.def(&AddMessageBoard::set_self, "set_self")
		.def(&AddMessageBoard::ByteSize, "ByteSize")
		.def(&AddMessageBoard::SetInitialized, "SetInitialized")
		;
	return true;
}
bool FriendMail_fflua_regist_all(lua_State* state)
{
	FriendInfotReq_fflua_reg(state);
	MessageListPlayerInfo_fflua_reg(state);
	FriendPlayer_fflua_reg(state);
	ZoneInfo_fflua_reg(state);
	MessageBoard_fflua_reg(state);
	MessagePlayerInfo_fflua_reg(state);
	ClientFriendMessageNotify_fflua_reg(state);
	AddClientFriendMessageNotify_fflua_reg(state);
	DelClientFriendMessageNotifyRR_fflua_reg(state);
	ItemCount_fflua_reg(state);
	MessageInfo_fflua_reg(state);
	FriendMessageInfo_fflua_reg(state);
	FriendInfo_fflua_reg(state);
	FriendInfotReply_fflua_reg(state);
	RecommendReq_fflua_reg(state);
	FriendListReq_fflua_reg(state);
	FindPlayerInfo_fflua_reg(state);
	FindFriendByNameReq_fflua_reg(state);
	FindFriendByGuidReq_fflua_reg(state);
	FindFriendReply_fflua_reg(state);
	FriendListUpdate_fflua_reg(state);
	RecommendsUpdate_fflua_reg(state);
	MessagesUpdate_fflua_reg(state);
	AddFriendMessagesReply_fflua_reg(state);
	FriendMessageReq_fflua_reg(state);
	SetZoneSignatureReq_fflua_reg(state);
	SignatureUpdate_fflua_reg(state);
	AddFriendReq_fflua_reg(state);
	DelFriendReq_fflua_reg(state);
	AskTeamReq_fflua_reg(state);
	AskGuildReq_fflua_reg(state);
	SendGiftReq_fflua_reg(state);
	ViewZoneReq_fflua_reg(state);
	ZoneBaseInfo_fflua_reg(state);
	ViewZoneReply_fflua_reg(state);
	DelMessageReq_fflua_reg(state);
	NewMessageNotify_fflua_reg(state);
	SignConfig_fflua_reg(state);
	UpdateSign_fflua_reg(state);
	GetMessageBoard_fflua_reg(state);
	AddMessageBoard_fflua_reg(state);
	return true;
}
}
