// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ArenaDb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ArenaDb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DB {

namespace {

const ::google::protobuf::Descriptor* ArenaUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* RepeatedArenaLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RepeatedArenaLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* RobotInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RobotInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerTrialCopy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerTrialCopy_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ArenaDb_2eproto() {
  protobuf_AddDesc_ArenaDb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ArenaDb.proto");
  GOOGLE_CHECK(file != NULL);
  ArenaUser_descriptor_ = file->message_type(0);
  static const int ArenaUser_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaUser, player_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaUser, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaUser, yesterday_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaUser, is_robot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaUser, robot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaUser, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaUser, updated_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaUser, log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaUser, last_reward_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaUser, trial_copy_),
  };
  ArenaUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaUser_descriptor_,
      ArenaUser::default_instance_,
      ArenaUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaUser));
  RepeatedArenaLog_descriptor_ = file->message_type(1);
  static const int RepeatedArenaLog_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepeatedArenaLog, logs_),
  };
  RepeatedArenaLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RepeatedArenaLog_descriptor_,
      RepeatedArenaLog::default_instance_,
      RepeatedArenaLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepeatedArenaLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepeatedArenaLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RepeatedArenaLog));
  RobotInfo_descriptor_ = file->message_type(2);
  static const int RobotInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotInfo, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotInfo, actors_),
  };
  RobotInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RobotInfo_descriptor_,
      RobotInfo::default_instance_,
      RobotInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RobotInfo));
  PlayerTrialCopy_descriptor_ = file->message_type(3);
  static const int PlayerTrialCopy_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTrialCopy, init_actor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTrialCopy, actors_),
  };
  PlayerTrialCopy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerTrialCopy_descriptor_,
      PlayerTrialCopy::default_instance_,
      PlayerTrialCopy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTrialCopy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTrialCopy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerTrialCopy));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ArenaDb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaUser_descriptor_, &ArenaUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RepeatedArenaLog_descriptor_, &RepeatedArenaLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RobotInfo_descriptor_, &RobotInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerTrialCopy_descriptor_, &PlayerTrialCopy::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ArenaDb_2eproto() {
  delete ArenaUser::default_instance_;
  delete ArenaUser_reflection_;
  delete RepeatedArenaLog::default_instance_;
  delete RepeatedArenaLog_reflection_;
  delete RobotInfo::default_instance_;
  delete RobotInfo_reflection_;
  delete PlayerTrialCopy::default_instance_;
  delete PlayerTrialCopy_reflection_;
}

void protobuf_AddDesc_ArenaDb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Packet::protobuf_AddDesc_ProtoBufOption_2eproto();
  ::Packet::protobuf_AddDesc_PlayerBasicInfo_2eproto();
  ::Packet::protobuf_AddDesc_ActorBasicInfo_2eproto();
  ::Packet::protobuf_AddDesc_ArenaMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rArenaDb.proto\022\002DB\032\024ProtoBufOption.prot"
    "o\032\025PlayerBasicInfo.proto\032\024ActorBasicInfo"
    ".proto\032\022ArenaMessage.proto\"\223\002\n\tArenaUser"
    "\022\031\n\013player_guid\030\001 \002(\006B\004\310\363\030\001\022\014\n\004rank\030\002 \002("
    "\005\022\026\n\016yesterday_rank\030\003 \002(\005\022\020\n\010is_robot\030\004 "
    "\002(\010\022\020\n\010robot_id\030\005 \002(\005\022\r\n\005score\030\006 \002(\005\022\022\n\n"
    "updated_at\030\010 \002(\003\0221\n\003log\030\n \002(\0132\024.DB.Repea"
    "tedArenaLogB\016\342\363\030\nmediumblob\022\030\n\020last_rewa"
    "rd_time\030\013 \002(\006\0221\n\ntrial_copy\030\014 \002(\0132\023.DB.P"
    "layerTrialCopyB\010\342\363\030\004blob\"2\n\020RepeatedAren"
    "aLog\022\036\n\004logs\030\001 \003(\0132\020.Packet.ArenaLog\"[\n\t"
    "RobotInfo\022\'\n\006player\030\001 \001(\0132\027.Packet.Playe"
    "rBasicInfo\022%\n\006actors\030\002 \003(\0132\025.Packet.Acto"
    "rFullInfo\"O\n\017PlayerTrialCopy\022\025\n\rinit_act"
    "or_id\030\001 \001(\005\022%\n\006actors\030\002 \003(\0132\025.Packet.Act"
    "orFullInfo", 610);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ArenaDb.proto", &protobuf_RegisterTypes);
  ArenaUser::default_instance_ = new ArenaUser();
  RepeatedArenaLog::default_instance_ = new RepeatedArenaLog();
  RobotInfo::default_instance_ = new RobotInfo();
  PlayerTrialCopy::default_instance_ = new PlayerTrialCopy();
  ArenaUser::default_instance_->InitAsDefaultInstance();
  RepeatedArenaLog::default_instance_->InitAsDefaultInstance();
  RobotInfo::default_instance_->InitAsDefaultInstance();
  PlayerTrialCopy::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ArenaDb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ArenaDb_2eproto {
  StaticDescriptorInitializer_ArenaDb_2eproto() {
    protobuf_AddDesc_ArenaDb_2eproto();
  }
} static_descriptor_initializer_ArenaDb_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ArenaUser::kPlayerGuidFieldNumber;
const int ArenaUser::kRankFieldNumber;
const int ArenaUser::kYesterdayRankFieldNumber;
const int ArenaUser::kIsRobotFieldNumber;
const int ArenaUser::kRobotIdFieldNumber;
const int ArenaUser::kScoreFieldNumber;
const int ArenaUser::kUpdatedAtFieldNumber;
const int ArenaUser::kLogFieldNumber;
const int ArenaUser::kLastRewardTimeFieldNumber;
const int ArenaUser::kTrialCopyFieldNumber;
#endif  // !_MSC_VER

ArenaUser::ArenaUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaUser::InitAsDefaultInstance() {
  log_ = const_cast< ::DB::RepeatedArenaLog*>(&::DB::RepeatedArenaLog::default_instance());
  trial_copy_ = const_cast< ::DB::PlayerTrialCopy*>(&::DB::PlayerTrialCopy::default_instance());
}

ArenaUser::ArenaUser(const ArenaUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaUser::SharedCtor() {
  _cached_size_ = 0;
  player_guid_ = GOOGLE_ULONGLONG(0);
  rank_ = 0;
  yesterday_rank_ = 0;
  is_robot_ = false;
  robot_id_ = 0;
  score_ = 0;
  updated_at_ = GOOGLE_LONGLONG(0);
  log_ = NULL;
  last_reward_time_ = GOOGLE_ULONGLONG(0);
  trial_copy_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaUser::~ArenaUser() {
  SharedDtor();
}

void ArenaUser::SharedDtor() {
  if (this != default_instance_) {
    delete log_;
    delete trial_copy_;
  }
}

void ArenaUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaUser_descriptor_;
}

const ArenaUser& ArenaUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaDb_2eproto();
  return *default_instance_;
}

ArenaUser* ArenaUser::default_instance_ = NULL;

ArenaUser* ArenaUser::New() const {
  return new ArenaUser;
}

void ArenaUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_guid_ = GOOGLE_ULONGLONG(0);
    rank_ = 0;
    yesterday_rank_ = 0;
    is_robot_ = false;
    robot_id_ = 0;
    score_ = 0;
    updated_at_ = GOOGLE_LONGLONG(0);
    if (has_log()) {
      if (log_ != NULL) log_->::DB::RepeatedArenaLog::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    last_reward_time_ = GOOGLE_ULONGLONG(0);
    if (has_trial_copy()) {
      if (trial_copy_ != NULL) trial_copy_->::DB::PlayerTrialCopy::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ArenaUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 player_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &player_guid_)));
          set_has_player_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // required int32 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_yesterday_rank;
        break;
      }

      // required int32 yesterday_rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yesterday_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yesterday_rank_)));
          set_has_yesterday_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_robot;
        break;
      }

      // required bool is_robot = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_robot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_robot_)));
          set_has_is_robot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_robot_id;
        break;
      }

      // required int32 robot_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robot_id_)));
          set_has_robot_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_score;
        break;
      }

      // required int32 score = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_updated_at;
        break;
      }

      // required int64 updated_at = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_updated_at:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updated_at_)));
          set_has_updated_at();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_log;
        break;
      }

      // required .DB.RepeatedArenaLog log = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_last_reward_time;
        break;
      }

      // required fixed64 last_reward_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_last_reward_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &last_reward_time_)));
          set_has_last_reward_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_trial_copy;
        break;
      }

      // required .DB.PlayerTrialCopy trial_copy = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trial_copy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trial_copy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ArenaUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 player_guid = 1;
  if (has_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->player_guid(), output);
  }

  // required int32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }

  // required int32 yesterday_rank = 3;
  if (has_yesterday_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->yesterday_rank(), output);
  }

  // required bool is_robot = 4;
  if (has_is_robot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_robot(), output);
  }

  // required int32 robot_id = 5;
  if (has_robot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->robot_id(), output);
  }

  // required int32 score = 6;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->score(), output);
  }

  // required int64 updated_at = 8;
  if (has_updated_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->updated_at(), output);
  }

  // required .DB.RepeatedArenaLog log = 10;
  if (has_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->log(), output);
  }

  // required fixed64 last_reward_time = 11;
  if (has_last_reward_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(11, this->last_reward_time(), output);
  }

  // required .DB.PlayerTrialCopy trial_copy = 12;
  if (has_trial_copy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->trial_copy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 player_guid = 1;
  if (has_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->player_guid(), target);
  }

  // required int32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank(), target);
  }

  // required int32 yesterday_rank = 3;
  if (has_yesterday_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->yesterday_rank(), target);
  }

  // required bool is_robot = 4;
  if (has_is_robot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_robot(), target);
  }

  // required int32 robot_id = 5;
  if (has_robot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->robot_id(), target);
  }

  // required int32 score = 6;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->score(), target);
  }

  // required int64 updated_at = 8;
  if (has_updated_at()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->updated_at(), target);
  }

  // required .DB.RepeatedArenaLog log = 10;
  if (has_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->log(), target);
  }

  // required fixed64 last_reward_time = 11;
  if (has_last_reward_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(11, this->last_reward_time(), target);
  }

  // required .DB.PlayerTrialCopy trial_copy = 12;
  if (has_trial_copy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->trial_copy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 player_guid = 1;
    if (has_player_guid()) {
      total_size += 1 + 8;
    }

    // required int32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // required int32 yesterday_rank = 3;
    if (has_yesterday_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yesterday_rank());
    }

    // required bool is_robot = 4;
    if (has_is_robot()) {
      total_size += 1 + 1;
    }

    // required int32 robot_id = 5;
    if (has_robot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robot_id());
    }

    // required int32 score = 6;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // required int64 updated_at = 8;
    if (has_updated_at()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updated_at());
    }

    // required .DB.RepeatedArenaLog log = 10;
    if (has_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->log());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required fixed64 last_reward_time = 11;
    if (has_last_reward_time()) {
      total_size += 1 + 8;
    }

    // required .DB.PlayerTrialCopy trial_copy = 12;
    if (has_trial_copy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trial_copy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ArenaUser::MergeFrom(const ArenaUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_guid()) {
      set_player_guid(from.player_guid());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_yesterday_rank()) {
      set_yesterday_rank(from.yesterday_rank());
    }
    if (from.has_is_robot()) {
      set_is_robot(from.is_robot());
    }
    if (from.has_robot_id()) {
      set_robot_id(from.robot_id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_updated_at()) {
      set_updated_at(from.updated_at());
    }
    if (from.has_log()) {
      mutable_log()->::DB::RepeatedArenaLog::MergeFrom(from.log());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_last_reward_time()) {
      set_last_reward_time(from.last_reward_time());
    }
    if (from.has_trial_copy()) {
      mutable_trial_copy()->::DB::PlayerTrialCopy::MergeFrom(from.trial_copy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ArenaUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ArenaUser::CopyFrom(const ArenaUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ArenaUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  if (has_log()) {
    if (!this->log().IsInitialized()) return false;
  }
  if (has_trial_copy()) {
    if (!this->trial_copy().IsInitialized()) return false;
  }
  return true;
}

void ArenaUser::SetInitialized() {
  _has_bits_[0] |= 0x000003ff;

  if (has_log()) {
    this->mutable_log()->SetInitialized();
  }
  if (has_trial_copy()) {
    this->mutable_trial_copy()->SetInitialized();
  }
  return;
}

void ArenaUser::Swap(ArenaUser* other) {
  if (other != this) {
    std::swap(player_guid_, other->player_guid_);
    std::swap(rank_, other->rank_);
    std::swap(yesterday_rank_, other->yesterday_rank_);
    std::swap(is_robot_, other->is_robot_);
    std::swap(robot_id_, other->robot_id_);
    std::swap(score_, other->score_);
    std::swap(updated_at_, other->updated_at_);
    std::swap(log_, other->log_);
    std::swap(last_reward_time_, other->last_reward_time_);
    std::swap(trial_copy_, other->trial_copy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ArenaUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaUser_descriptor_;
  metadata.reflection = ArenaUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RepeatedArenaLog::kLogsFieldNumber;
#endif  // !_MSC_VER

RepeatedArenaLog::RepeatedArenaLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RepeatedArenaLog::InitAsDefaultInstance() {
}

RepeatedArenaLog::RepeatedArenaLog(const RepeatedArenaLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RepeatedArenaLog::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RepeatedArenaLog::~RepeatedArenaLog() {
  SharedDtor();
}

void RepeatedArenaLog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RepeatedArenaLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RepeatedArenaLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RepeatedArenaLog_descriptor_;
}

const RepeatedArenaLog& RepeatedArenaLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaDb_2eproto();
  return *default_instance_;
}

RepeatedArenaLog* RepeatedArenaLog::default_instance_ = NULL;

RepeatedArenaLog* RepeatedArenaLog::New() const {
  return new RepeatedArenaLog;
}

void RepeatedArenaLog::Clear() {
  logs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool RepeatedArenaLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.ArenaLog logs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_logs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_logs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void RepeatedArenaLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.ArenaLog logs = 1;
  for (int i = 0; i < this->logs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->logs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RepeatedArenaLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.ArenaLog logs = 1;
  for (int i = 0; i < this->logs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->logs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RepeatedArenaLog::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.ArenaLog logs = 1;
  total_size += 1 * this->logs_size();
  for (int i = 0; i < this->logs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->logs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RepeatedArenaLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RepeatedArenaLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RepeatedArenaLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void RepeatedArenaLog::MergeFrom(const RepeatedArenaLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  logs_.MergeFrom(from.logs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void RepeatedArenaLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void RepeatedArenaLog::CopyFrom(const RepeatedArenaLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool RepeatedArenaLog::IsInitialized() const {

  for (int i = 0; i < logs_size(); i++) {
    if (!this->logs(i).IsInitialized()) return false;
  }
  return true;
}

void RepeatedArenaLog::SetInitialized() {

  for (int i = 0; i < logs_size(); i++) {
    this->mutable_logs(i)->SetInitialized();
  }
  return;
}

void RepeatedArenaLog::Swap(RepeatedArenaLog* other) {
  if (other != this) {
    logs_.Swap(&other->logs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata RepeatedArenaLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RepeatedArenaLog_descriptor_;
  metadata.reflection = RepeatedArenaLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RobotInfo::kPlayerFieldNumber;
const int RobotInfo::kActorsFieldNumber;
#endif  // !_MSC_VER

RobotInfo::RobotInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RobotInfo::InitAsDefaultInstance() {
  player_ = const_cast< ::Packet::PlayerBasicInfo*>(&::Packet::PlayerBasicInfo::default_instance());
}

RobotInfo::RobotInfo(const RobotInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RobotInfo::SharedCtor() {
  _cached_size_ = 0;
  player_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RobotInfo::~RobotInfo() {
  SharedDtor();
}

void RobotInfo::SharedDtor() {
  if (this != default_instance_) {
    delete player_;
  }
}

void RobotInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotInfo_descriptor_;
}

const RobotInfo& RobotInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaDb_2eproto();
  return *default_instance_;
}

RobotInfo* RobotInfo::default_instance_ = NULL;

RobotInfo* RobotInfo::New() const {
  return new RobotInfo;
}

void RobotInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player()) {
      if (player_ != NULL) player_->::Packet::PlayerBasicInfo::Clear();
    }
  }
  actors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool RobotInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Packet.PlayerBasicInfo player = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_actors;
        break;
      }

      // repeated .Packet.ActorFullInfo actors = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_actors;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void RobotInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Packet.PlayerBasicInfo player = 1;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player(), output);
  }

  // repeated .Packet.ActorFullInfo actors = 2;
  for (int i = 0; i < this->actors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->actors(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RobotInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Packet.PlayerBasicInfo player = 1;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player(), target);
  }

  // repeated .Packet.ActorFullInfo actors = 2;
  for (int i = 0; i < this->actors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->actors(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RobotInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Packet.PlayerBasicInfo player = 1;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player());
    }

  }
  // repeated .Packet.ActorFullInfo actors = 2;
  total_size += 1 * this->actors_size();
  for (int i = 0; i < this->actors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actors(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RobotInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RobotInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void RobotInfo::MergeFrom(const RobotInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  actors_.MergeFrom(from.actors_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player()) {
      mutable_player()->::Packet::PlayerBasicInfo::MergeFrom(from.player());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void RobotInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void RobotInfo::CopyFrom(const RobotInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool RobotInfo::IsInitialized() const {

  if (has_player()) {
    if (!this->player().IsInitialized()) return false;
  }
  for (int i = 0; i < actors_size(); i++) {
    if (!this->actors(i).IsInitialized()) return false;
  }
  return true;
}

void RobotInfo::SetInitialized() {

  if (has_player()) {
    this->mutable_player()->SetInitialized();
  }
  for (int i = 0; i < actors_size(); i++) {
    this->mutable_actors(i)->SetInitialized();
  }
  return;
}

void RobotInfo::Swap(RobotInfo* other) {
  if (other != this) {
    std::swap(player_, other->player_);
    actors_.Swap(&other->actors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata RobotInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RobotInfo_descriptor_;
  metadata.reflection = RobotInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerTrialCopy::kInitActorIdFieldNumber;
const int PlayerTrialCopy::kActorsFieldNumber;
#endif  // !_MSC_VER

PlayerTrialCopy::PlayerTrialCopy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerTrialCopy::InitAsDefaultInstance() {
}

PlayerTrialCopy::PlayerTrialCopy(const PlayerTrialCopy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerTrialCopy::SharedCtor() {
  _cached_size_ = 0;
  init_actor_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerTrialCopy::~PlayerTrialCopy() {
  SharedDtor();
}

void PlayerTrialCopy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerTrialCopy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerTrialCopy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerTrialCopy_descriptor_;
}

const PlayerTrialCopy& PlayerTrialCopy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaDb_2eproto();
  return *default_instance_;
}

PlayerTrialCopy* PlayerTrialCopy::default_instance_ = NULL;

PlayerTrialCopy* PlayerTrialCopy::New() const {
  return new PlayerTrialCopy;
}

void PlayerTrialCopy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    init_actor_id_ = 0;
  }
  actors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerTrialCopy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 init_actor_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &init_actor_id_)));
          set_has_init_actor_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_actors;
        break;
      }

      // repeated .Packet.ActorFullInfo actors = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_actors;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerTrialCopy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 init_actor_id = 1;
  if (has_init_actor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->init_actor_id(), output);
  }

  // repeated .Packet.ActorFullInfo actors = 2;
  for (int i = 0; i < this->actors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->actors(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerTrialCopy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 init_actor_id = 1;
  if (has_init_actor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->init_actor_id(), target);
  }

  // repeated .Packet.ActorFullInfo actors = 2;
  for (int i = 0; i < this->actors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->actors(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerTrialCopy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 init_actor_id = 1;
    if (has_init_actor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->init_actor_id());
    }

  }
  // repeated .Packet.ActorFullInfo actors = 2;
  total_size += 1 * this->actors_size();
  for (int i = 0; i < this->actors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actors(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerTrialCopy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerTrialCopy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerTrialCopy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerTrialCopy::MergeFrom(const PlayerTrialCopy& from) {
  GOOGLE_CHECK_NE(&from, this);
  actors_.MergeFrom(from.actors_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_init_actor_id()) {
      set_init_actor_id(from.init_actor_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerTrialCopy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerTrialCopy::CopyFrom(const PlayerTrialCopy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerTrialCopy::IsInitialized() const {

  for (int i = 0; i < actors_size(); i++) {
    if (!this->actors(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerTrialCopy::SetInitialized() {

  for (int i = 0; i < actors_size(); i++) {
    this->mutable_actors(i)->SetInitialized();
  }
  return;
}

void PlayerTrialCopy::Swap(PlayerTrialCopy* other) {
  if (other != this) {
    std::swap(init_actor_id_, other->init_actor_id_);
    actors_.Swap(&other->actors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerTrialCopy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerTrialCopy_descriptor_;
  metadata.reflection = PlayerTrialCopy_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DB

// @@protoc_insertion_point(global_scope)
