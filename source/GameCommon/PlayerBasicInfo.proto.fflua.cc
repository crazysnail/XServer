// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlayerBasicInfo.proto
#include "PlayerBasicInfo.pb.h"
#include "PlayerBasicInfo.proto.fflua.h"
namespace Packet {
bool PlayerToken_fflua_reg(lua_State* state)
{
//for decltype
	PlayerToken* message(nullptr);
	message;
	ff::fflua_register_t<PlayerToken, ctor()>(state, "PlayerToken", "google::protobuf::Message")
		// required int32 crystal = 1;
		.def(&PlayerToken::crystal, "crystal")
		.def(&PlayerToken::set_crystal, "set_crystal")
		// required int32 gold = 2;
		.def(&PlayerToken::gold, "gold")
		.def(&PlayerToken::set_gold, "set_gold")
		// required int32 honor = 3;
		.def(&PlayerToken::honor, "honor")
		.def(&PlayerToken::set_honor, "set_honor")
		// required int32 reward = 4;
		.def(&PlayerToken::reward, "reward")
		.def(&PlayerToken::set_reward, "set_reward")
		// required int32 dayvalue = 5;
		.def(&PlayerToken::dayvalue, "dayvalue")
		.def(&PlayerToken::set_dayvalue, "set_dayvalue")
		// required int32 bank_gold = 6;
		.def(&PlayerToken::bank_gold, "bank_gold")
		.def(&PlayerToken::set_bank_gold, "set_bank_gold")
		// required int32 exp_point = 7;
		.def(&PlayerToken::exp_point, "exp_point")
		.def(&PlayerToken::set_exp_point, "set_exp_point")
		// required int32 cold_exp_point = 8;
		.def(&PlayerToken::cold_exp_point, "cold_exp_point")
		.def(&PlayerToken::set_cold_exp_point, "set_cold_exp_point")
		// required int32 lawful = 9;
		.def(&PlayerToken::lawful, "lawful")
		.def(&PlayerToken::set_lawful, "set_lawful")
		.def(&PlayerToken::ByteSize, "ByteSize")
		.def(&PlayerToken::SetInitialized, "SetInitialized")
		;
	return true;
}
bool HookOption_fflua_reg(lua_State* state)
{
//for decltype
	HookOption* message(nullptr);
	message;
	ff::fflua_register_t<HookOption, ctor()>(state, "HookOption", "google::protobuf::Message")
		// required int32 auto_equip_durable = 1 [default = 50];
		.def(&HookOption::auto_equip_durable, "auto_equip_durable")
		.def(&HookOption::set_auto_equip_durable, "set_auto_equip_durable")
		// required int32 auto_potion_id = 2 [default = 20122001];
		.def(&HookOption::auto_potion_id, "auto_potion_id")
		.def(&HookOption::set_auto_potion_id, "set_auto_potion_id")
		// required int32 auto_potion_hp = 3 [default = 30];
		.def(&HookOption::auto_potion_hp, "auto_potion_hp")
		.def(&HookOption::set_auto_potion_hp, "set_auto_potion_hp")
		// required int32 auto_buy_count = 4 [default = 10];
		.def(&HookOption::auto_buy_count, "auto_buy_count")
		.def(&HookOption::set_auto_buy_count, "set_auto_buy_count")
		// required bool auto_split_green = 5 [default = false];
		.def(&HookOption::auto_split_green, "auto_split_green")
		.def(&HookOption::set_auto_split_green, "set_auto_split_green")
		// required bool auto_split_blue = 6 [default = false];
		.def(&HookOption::auto_split_blue, "auto_split_blue")
		.def(&HookOption::set_auto_split_blue, "set_auto_split_blue")
		// required bool auto_refix = 7 [default = true];
		.def(&HookOption::auto_refix, "auto_refix")
		.def(&HookOption::set_auto_refix, "set_auto_refix")
		// required bool auto_use_potion = 8 [default = false];
		.def(&HookOption::auto_use_potion, "auto_use_potion")
		.def(&HookOption::set_auto_use_potion, "set_auto_use_potion")
		// required bool auto_buy_potion = 9 [default = false];
		.def(&HookOption::auto_buy_potion, "auto_buy_potion")
		.def(&HookOption::set_auto_buy_potion, "set_auto_buy_potion")
		.def(&HookOption::ByteSize, "ByteSize")
		.def(&HookOption::SetInitialized, "SetInitialized")
		;
	return true;
}
bool PlayerSetting_fflua_reg(lua_State* state)
{
//for decltype
	PlayerSetting* message(nullptr);
	message;
	ff::fflua_register_t<PlayerSetting, ctor()>(state, "PlayerSetting", "google::protobuf::Message")
		// required fixed64 guid = 1;
		.def(&PlayerSetting::guid, "guid")
		.def(&PlayerSetting::set_guid, "set_guid")
		// required int32 ignore_add_friend = 2;
		.def(&PlayerSetting::ignore_add_friend, "ignore_add_friend")
		.def(&PlayerSetting::set_ignore_add_friend, "set_ignore_add_friend")
		// required int32 reject_fight = 3;
		.def(&PlayerSetting::reject_fight, "reject_fight")
		.def(&PlayerSetting::set_reject_fight, "set_reject_fight")
		.def(&PlayerSetting::ByteSize, "ByteSize")
		.def(&PlayerSetting::SetInitialized, "SetInitialized")
		;
	return true;
}
bool PlayerOperateInfo_fflua_reg(lua_State* state)
{
//for decltype
	PlayerOperateInfo* message(nullptr);
	message;
	ff::fflua_register_t<PlayerOperateInfo, ctor()>(state, "PlayerOperateInfo", "google::protobuf::Message")
		// required fixed64 guid = 1;
		.def(&PlayerOperateInfo::guid, "guid")
		.def(&PlayerOperateInfo::set_guid, "set_guid")
		// required string name = 2;
		.def(&PlayerOperateInfo::name, "name")
		.def<void (PlayerOperateInfo::*)(const std::string&)>(&PlayerOperateInfo::set_name, "set_name")
		// required int32 level = 3;
		.def(&PlayerOperateInfo::level, "level")
		.def(&PlayerOperateInfo::set_level, "set_level")
		// required int32 hair = 4;
		.def(&PlayerOperateInfo::hair, "hair")
		.def(&PlayerOperateInfo::set_hair, "set_hair")
		// required int32 init_actor_id = 5;
		.def(&PlayerOperateInfo::init_actor_id, "init_actor_id")
		.def(&PlayerOperateInfo::set_init_actor_id, "set_init_actor_id")
		// required fixed64 guildid = 6;
		.def(&PlayerOperateInfo::guildid, "guildid")
		.def(&PlayerOperateInfo::set_guildid, "set_guildid")
		// optional string guildname = 7;
		.def(&PlayerOperateInfo::guildname, "guildname")
		.def<void (PlayerOperateInfo::*)(const std::string&)>(&PlayerOperateInfo::set_guildname, "set_guildname")
		.def(&PlayerOperateInfo::has_guildname, "has_guildname")
		// optional .Packet.GuildPosition guildposition = 8;
		.def(&PlayerOperateInfo::guildposition, "guildposition")
		.def(&PlayerOperateInfo::set_guildposition, "set_guildposition")
		.def(&PlayerOperateInfo::has_guildposition, "has_guildposition")
		// required fixed64 teamid = 9;
		.def(&PlayerOperateInfo::teamid, "teamid")
		.def(&PlayerOperateInfo::set_teamid, "set_teamid")
		.def(&PlayerOperateInfo::ByteSize, "ByteSize")
		.def(&PlayerOperateInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool PlayerOperateInfoReq_fflua_reg(lua_State* state)
{
//for decltype
	PlayerOperateInfoReq* message(nullptr);
	message;
	ff::fflua_register_t<PlayerOperateInfoReq, ctor()>(state, "PlayerOperateInfoReq", "google::protobuf::Message")
		// required fixed64 guid = 1;
		.def(&PlayerOperateInfoReq::guid, "guid")
		.def(&PlayerOperateInfoReq::set_guid, "set_guid")
		.def(&PlayerOperateInfoReq::ByteSize, "ByteSize")
		.def(&PlayerOperateInfoReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool PlayerOperateInfoReply_fflua_reg(lua_State* state)
{
//for decltype
	PlayerOperateInfoReply* message(nullptr);
	message;
	ff::fflua_register_t<PlayerOperateInfoReply, ctor()>(state, "PlayerOperateInfoReply", "google::protobuf::Message")
		// required .Packet.PlayerOperateInfo optinfo = 1;
		.def(&PlayerOperateInfoReply::optinfo, "optinfo")
		.def(&PlayerOperateInfoReply::mutable_optinfo, "mutable_optinfo")
		.def(&PlayerOperateInfoReply::ByteSize, "ByteSize")
		.def(&PlayerOperateInfoReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool PlayerBasicInfo_fflua_reg(lua_State* state)
{
//for decltype
	PlayerBasicInfo* message(nullptr);
	message;
	ff::fflua_register_t<PlayerBasicInfo, ctor()>(state, "PlayerBasicInfo", "google::protobuf::Message")
		// required fixed64 guid = 1;
		.def(&PlayerBasicInfo::guid, "guid")
		.def(&PlayerBasicInfo::set_guid, "set_guid")
		// required int32 level = 2;
		.def(&PlayerBasicInfo::level, "level")
		.def(&PlayerBasicInfo::set_level, "set_level")
		// required string name = 3;
		.def(&PlayerBasicInfo::name, "name")
		.def<void (PlayerBasicInfo::*)(const std::string&)>(&PlayerBasicInfo::set_name, "set_name")
		// required int32 scene_id = 4;
		.def(&PlayerBasicInfo::scene_id, "scene_id")
		.def(&PlayerBasicInfo::set_scene_id, "set_scene_id")
		// required .Packet.Position scene_pos = 5;
		.def(&PlayerBasicInfo::scene_pos, "scene_pos")
		.def(&PlayerBasicInfo::mutable_scene_pos, "mutable_scene_pos")
		// required .Packet.PlayerSceneStatus player_status = 6;
		.def(&PlayerBasicInfo::player_status, "player_status")
		.def(&PlayerBasicInfo::set_player_status, "set_player_status")
		// required float direction = 7;
		.def(&PlayerBasicInfo::direction, "direction")
		.def(&PlayerBasicInfo::set_direction, "set_direction")
		// required fixed32 move_speed = 8;
		.def(&PlayerBasicInfo::move_speed, "move_speed")
		.def(&PlayerBasicInfo::set_move_speed, "set_move_speed")
		// required int32 init_actor_id = 9;
		.def(&PlayerBasicInfo::init_actor_id, "init_actor_id")
		.def(&PlayerBasicInfo::set_init_actor_id, "set_init_actor_id")
		// required string icon = 10;
		.def(&PlayerBasicInfo::icon, "icon")
		.def<void (PlayerBasicInfo::*)(const std::string&)>(&PlayerBasicInfo::set_icon, "set_icon")
		// required fixed64 guildid = 11;
		.def(&PlayerBasicInfo::guildid, "guildid")
		.def(&PlayerBasicInfo::set_guildid, "set_guildid")
		// required string guildname = 12;
		.def(&PlayerBasicInfo::guildname, "guildname")
		.def<void (PlayerBasicInfo::*)(const std::string&)>(&PlayerBasicInfo::set_guildname, "set_guildname")
		// required .Packet.Camp camp = 13;
		.def(&PlayerBasicInfo::camp, "camp")
		.def(&PlayerBasicInfo::set_camp, "set_camp")
		// required int32 mount_id = 15;
		.def(&PlayerBasicInfo::mount_id, "mount_id")
		.def(&PlayerBasicInfo::set_mount_id, "set_mount_id")
		// required int32 battle_score = 16;
		.def(&PlayerBasicInfo::battle_score, "battle_score")
		.def(&PlayerBasicInfo::set_battle_score, "set_battle_score")
		// required int32 hair = 17;
		.def(&PlayerBasicInfo::hair, "hair")
		.def(&PlayerBasicInfo::set_hair, "set_hair")
		// required int32 master_level = 18;
		.def(&PlayerBasicInfo::master_level, "master_level")
		.def(&PlayerBasicInfo::set_master_level, "set_master_level")
		.def(&PlayerBasicInfo::ByteSize, "ByteSize")
		.def(&PlayerBasicInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool PlayerDBInfo_fflua_reg(lua_State* state)
{
//for decltype
	PlayerDBInfo* message(nullptr);
	message;
	ff::fflua_register_t<PlayerDBInfo, ctor()>(state, "PlayerDBInfo", "google::protobuf::Message")
		// required fixed64 guid = 1;
		.def(&PlayerDBInfo::guid, "guid")
		.def(&PlayerDBInfo::set_guid, "set_guid")
		// required fixed64 account_guid = 2;
		.def(&PlayerDBInfo::account_guid, "account_guid")
		.def(&PlayerDBInfo::set_account_guid, "set_account_guid")
		// required .Packet.PlayerBasicInfo basic_info = 3;
		.def(&PlayerDBInfo::basic_info, "basic_info")
		.def(&PlayerDBInfo::mutable_basic_info, "mutable_basic_info")
		// repeated fixed64 lackeys = 4;
		.def(&PlayerDBInfo::lackeys_size, "lackeys_size")
		.def<decltype(message->lackeys(0)) (PlayerDBInfo::*)(int) const>(&PlayerDBInfo::lackeys, "lackeys")
		.def<void(PlayerDBInfo::*)(int, const decltype(message->lackeys(0)))>(&PlayerDBInfo::set_lackeys, "set_lackeys")
		.def(&PlayerDBInfo::add_lackeys, "add_lackeys")
		// required string text_answers = 5;
		.def(&PlayerDBInfo::text_answers, "text_answers")
		.def<void (PlayerDBInfo::*)(const std::string&)>(&PlayerDBInfo::set_text_answers, "set_text_answers")
		// required string pic_answers = 6;
		.def(&PlayerDBInfo::pic_answers, "pic_answers")
		.def<void (PlayerDBInfo::*)(const std::string&)>(&PlayerDBInfo::set_pic_answers, "set_pic_answers")
		// required .Packet.PlayerToken token_data = 7;
		.def(&PlayerDBInfo::token_data, "token_data")
		.def(&PlayerDBInfo::mutable_token_data, "mutable_token_data")
		// required .Packet.HookOption hook_option = 8;
		.def(&PlayerDBInfo::hook_option, "hook_option")
		.def(&PlayerDBInfo::mutable_hook_option, "mutable_hook_option")
		// required bool inited = 9;
		.def(&PlayerDBInfo::inited, "inited")
		.def(&PlayerDBInfo::set_inited, "set_inited")
		// required int32 hook_stage_tracker = 10;
		.def(&PlayerDBInfo::hook_stage_tracker, "hook_stage_tracker")
		.def(&PlayerDBInfo::set_hook_stage_tracker, "set_hook_stage_tracker")
		// required int32 last_hook_stage_id = 11;
		.def(&PlayerDBInfo::last_hook_stage_id, "last_hook_stage_id")
		.def(&PlayerDBInfo::set_last_hook_stage_id, "set_last_hook_stage_id")
		// required uint32 last_logout_time = 12;
		.def(&PlayerDBInfo::last_logout_time, "last_logout_time")
		.def(&PlayerDBInfo::set_last_logout_time, "set_last_logout_time")
		// required uint32 create_time = 13;
		.def(&PlayerDBInfo::create_time, "create_time")
		.def(&PlayerDBInfo::set_create_time, "set_create_time")
		// required uint32 charge_all = 14;
		.def(&PlayerDBInfo::charge_all, "charge_all")
		.def(&PlayerDBInfo::set_charge_all, "set_charge_all")
		// required uint32 refresh_time = 15;
		.def(&PlayerDBInfo::refresh_time, "refresh_time")
		.def(&PlayerDBInfo::set_refresh_time, "set_refresh_time")
		.def(&PlayerDBInfo::ByteSize, "ByteSize")
		.def(&PlayerDBInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool PlayerSpeedChanged_fflua_reg(lua_State* state)
{
//for decltype
	PlayerSpeedChanged* message(nullptr);
	message;
	ff::fflua_register_t<PlayerSpeedChanged, ctor()>(state, "PlayerSpeedChanged", "google::protobuf::Message")
		// required fixed64 guid = 1;
		.def(&PlayerSpeedChanged::guid, "guid")
		.def(&PlayerSpeedChanged::set_guid, "set_guid")
		// required fixed32 move_speed = 2;
		.def(&PlayerSpeedChanged::move_speed, "move_speed")
		.def(&PlayerSpeedChanged::set_move_speed, "set_move_speed")
		.def(&PlayerSpeedChanged::ByteSize, "ByteSize")
		.def(&PlayerSpeedChanged::SetInitialized, "SetInitialized")
		;
	return true;
}
bool ServerTime_fflua_reg(lua_State* state)
{
//for decltype
	ServerTime* message(nullptr);
	message;
	ff::fflua_register_t<ServerTime, ctor()>(state, "ServerTime", "google::protobuf::Message")
		// required fixed64 time = 1;
		.def(&ServerTime::time, "time")
		.def(&ServerTime::set_time, "set_time")
		.def(&ServerTime::ByteSize, "ByteSize")
		.def(&ServerTime::SetInitialized, "SetInitialized")
		;
	return true;
}
bool PlayerBasicInfo_fflua_regist_all(lua_State* state)
{
	PlayerToken_fflua_reg(state);
	HookOption_fflua_reg(state);
	PlayerSetting_fflua_reg(state);
	PlayerOperateInfo_fflua_reg(state);
	PlayerOperateInfoReq_fflua_reg(state);
	PlayerOperateInfoReply_fflua_reg(state);
	PlayerBasicInfo_fflua_reg(state);
	PlayerDBInfo_fflua_reg(state);
	PlayerSpeedChanged_fflua_reg(state);
	ServerTime_fflua_reg(state);
	return true;
}
}
