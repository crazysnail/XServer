// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActorConfig.proto

#ifndef PROTOBUF_ActorConfig_2eproto__INCLUDED
#define PROTOBUF_ActorConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "AllPacketEnum.pb.h"
#include "AllConfigEnum.pb.h"
#include "ProtoBufOption.pb.h"
// @@protoc_insertion_point(includes)

namespace Config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ActorConfig_2eproto();
void protobuf_AssignDesc_ActorConfig_2eproto();
void protobuf_ShutdownFile_ActorConfig_2eproto();

class LevelConfig;
class LackeysConfig;
class OneKeyEquip;
class OneKeyConfig;

// ===================================================================

class LevelConfig : public ::google::protobuf::Message {
 public:
  LevelConfig();
  virtual ~LevelConfig();

  LevelConfig(const LevelConfig& from);

  inline LevelConfig& operator=(const LevelConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LevelConfig& default_instance();

  void Swap(LevelConfig* other);

  // implements Message ----------------------------------------------

  LevelConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LevelConfig& from);
  void MergeFrom(const LevelConfig& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required int32 main_actor_exp = 2;
  inline bool has_main_actor_exp() const;
  inline void clear_main_actor_exp();
  static const int kMainActorExpFieldNumber = 2;
  inline ::google::protobuf::int32 main_actor_exp() const;
  inline void set_main_actor_exp(::google::protobuf::int32 value);

  // required int32 hero_actor_exp = 3;
  inline bool has_hero_actor_exp() const;
  inline void clear_hero_actor_exp();
  static const int kHeroActorExpFieldNumber = 3;
  inline ::google::protobuf::int32 hero_actor_exp() const;
  inline void set_hero_actor_exp(::google::protobuf::int32 value);

  // required int32 burning_exp = 4;
  inline bool has_burning_exp() const;
  inline void clear_burning_exp();
  static const int kBurningExpFieldNumber = 4;
  inline ::google::protobuf::int32 burning_exp() const;
  inline void set_burning_exp(::google::protobuf::int32 value);

  // required int32 burning_gold = 5;
  inline bool has_burning_gold() const;
  inline void clear_burning_gold();
  static const int kBurningGoldFieldNumber = 5;
  inline ::google::protobuf::int32 burning_gold() const;
  inline void set_burning_gold(::google::protobuf::int32 value);

  // required int32 skyfall_exp = 6;
  inline bool has_skyfall_exp() const;
  inline void clear_skyfall_exp();
  static const int kSkyfallExpFieldNumber = 6;
  inline ::google::protobuf::int32 skyfall_exp() const;
  inline void set_skyfall_exp(::google::protobuf::int32 value);

  // required int32 skyfall_gold = 7;
  inline bool has_skyfall_gold() const;
  inline void clear_skyfall_gold();
  static const int kSkyfallGoldFieldNumber = 7;
  inline ::google::protobuf::int32 skyfall_gold() const;
  inline void set_skyfall_gold(::google::protobuf::int32 value);

  // required int32 light_exp = 8;
  inline bool has_light_exp() const;
  inline void clear_light_exp();
  static const int kLightExpFieldNumber = 8;
  inline ::google::protobuf::int32 light_exp() const;
  inline void set_light_exp(::google::protobuf::int32 value);

  // required int32 light_gold = 9;
  inline bool has_light_gold() const;
  inline void clear_light_gold();
  static const int kLightGoldFieldNumber = 9;
  inline ::google::protobuf::int32 light_gold() const;
  inline void set_light_gold(::google::protobuf::int32 value);

  // required int32 three_5_exp = 10;
  inline bool has_three_5_exp() const;
  inline void clear_three_5_exp();
  static const int kThree5ExpFieldNumber = 10;
  inline ::google::protobuf::int32 three_5_exp() const;
  inline void set_three_5_exp(::google::protobuf::int32 value);

  // required int32 three_6_exp = 11;
  inline bool has_three_6_exp() const;
  inline void clear_three_6_exp();
  static const int kThree6ExpFieldNumber = 11;
  inline ::google::protobuf::int32 three_6_exp() const;
  inline void set_three_6_exp(::google::protobuf::int32 value);

  // required int32 three_7_exp = 12;
  inline bool has_three_7_exp() const;
  inline void clear_three_7_exp();
  static const int kThree7ExpFieldNumber = 12;
  inline ::google::protobuf::int32 three_7_exp() const;
  inline void set_three_7_exp(::google::protobuf::int32 value);

  // required int32 three_8_exp = 13;
  inline bool has_three_8_exp() const;
  inline void clear_three_8_exp();
  static const int kThree8ExpFieldNumber = 13;
  inline ::google::protobuf::int32 three_8_exp() const;
  inline void set_three_8_exp(::google::protobuf::int32 value);

  // required int32 three_9_exp = 14;
  inline bool has_three_9_exp() const;
  inline void clear_three_9_exp();
  static const int kThree9ExpFieldNumber = 14;
  inline ::google::protobuf::int32 three_9_exp() const;
  inline void set_three_9_exp(::google::protobuf::int32 value);

  // required int32 three_5_gold = 15;
  inline bool has_three_5_gold() const;
  inline void clear_three_5_gold();
  static const int kThree5GoldFieldNumber = 15;
  inline ::google::protobuf::int32 three_5_gold() const;
  inline void set_three_5_gold(::google::protobuf::int32 value);

  // required int32 three_6_gold = 16;
  inline bool has_three_6_gold() const;
  inline void clear_three_6_gold();
  static const int kThree6GoldFieldNumber = 16;
  inline ::google::protobuf::int32 three_6_gold() const;
  inline void set_three_6_gold(::google::protobuf::int32 value);

  // required int32 three_7_gold = 17;
  inline bool has_three_7_gold() const;
  inline void clear_three_7_gold();
  static const int kThree7GoldFieldNumber = 17;
  inline ::google::protobuf::int32 three_7_gold() const;
  inline void set_three_7_gold(::google::protobuf::int32 value);

  // required int32 three_8_gold = 18;
  inline bool has_three_8_gold() const;
  inline void clear_three_8_gold();
  static const int kThree8GoldFieldNumber = 18;
  inline ::google::protobuf::int32 three_8_gold() const;
  inline void set_three_8_gold(::google::protobuf::int32 value);

  // required int32 three_9_gold = 19;
  inline bool has_three_9_gold() const;
  inline void clear_three_9_gold();
  static const int kThree9GoldFieldNumber = 19;
  inline ::google::protobuf::int32 three_9_gold() const;
  inline void set_three_9_gold(::google::protobuf::int32 value);

  // required int32 goblin_exp = 20;
  inline bool has_goblin_exp() const;
  inline void clear_goblin_exp();
  static const int kGoblinExpFieldNumber = 20;
  inline ::google::protobuf::int32 goblin_exp() const;
  inline void set_goblin_exp(::google::protobuf::int32 value);

  // required int32 goblin_gold = 21;
  inline bool has_goblin_gold() const;
  inline void clear_goblin_gold();
  static const int kGoblinGoldFieldNumber = 21;
  inline ::google::protobuf::int32 goblin_gold() const;
  inline void set_goblin_gold(::google::protobuf::int32 value);

  // required int32 server_level_day = 22;
  inline bool has_server_level_day() const;
  inline void clear_server_level_day();
  static const int kServerLevelDayFieldNumber = 22;
  inline ::google::protobuf::int32 server_level_day() const;
  inline void set_server_level_day(::google::protobuf::int32 value);

  // required int32 treasure_exp = 23;
  inline bool has_treasure_exp() const;
  inline void clear_treasure_exp();
  static const int kTreasureExpFieldNumber = 23;
  inline ::google::protobuf::int32 treasure_exp() const;
  inline void set_treasure_exp(::google::protobuf::int32 value);

  // required int32 treasure_gold = 24;
  inline bool has_treasure_gold() const;
  inline void clear_treasure_gold();
  static const int kTreasureGoldFieldNumber = 24;
  inline ::google::protobuf::int32 treasure_gold() const;
  inline void set_treasure_gold(::google::protobuf::int32 value);

  // repeated int32 trial_field_hp = 25;
  inline int trial_field_hp_size() const;
  inline void clear_trial_field_hp();
  static const int kTrialFieldHpFieldNumber = 25;
  inline ::google::protobuf::int32 trial_field_hp(int index) const;
  inline void set_trial_field_hp(int index, ::google::protobuf::int32 value);
  inline void add_trial_field_hp(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      trial_field_hp() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_trial_field_hp();

  // required int32 reward_exp = 26;
  inline bool has_reward_exp() const;
  inline void clear_reward_exp();
  static const int kRewardExpFieldNumber = 26;
  inline ::google::protobuf::int32 reward_exp() const;
  inline void set_reward_exp(::google::protobuf::int32 value);

  // required int32 reward_gold = 27;
  inline bool has_reward_gold() const;
  inline void clear_reward_gold();
  static const int kRewardGoldFieldNumber = 27;
  inline ::google::protobuf::int32 reward_gold() const;
  inline void set_reward_gold(::google::protobuf::int32 value);

  // required int32 hell_box_gold = 28;
  inline bool has_hell_box_gold() const;
  inline void clear_hell_box_gold();
  static const int kHellBoxGoldFieldNumber = 28;
  inline ::google::protobuf::int32 hell_box_gold() const;
  inline void set_hell_box_gold(::google::protobuf::int32 value);

  // required int32 daykill_exp = 29;
  inline bool has_daykill_exp() const;
  inline void clear_daykill_exp();
  static const int kDaykillExpFieldNumber = 29;
  inline ::google::protobuf::int32 daykill_exp() const;
  inline void set_daykill_exp(::google::protobuf::int32 value);

  // required int32 blood_exp = 30;
  inline bool has_blood_exp() const;
  inline void clear_blood_exp();
  static const int kBloodExpFieldNumber = 30;
  inline ::google::protobuf::int32 blood_exp() const;
  inline void set_blood_exp(::google::protobuf::int32 value);

  // required int32 blood_gold = 31;
  inline bool has_blood_gold() const;
  inline void clear_blood_gold();
  static const int kBloodGoldFieldNumber = 31;
  inline ::google::protobuf::int32 blood_gold() const;
  inline void set_blood_gold(::google::protobuf::int32 value);

  // repeated int32 blood_potion1 = 32;
  inline int blood_potion1_size() const;
  inline void clear_blood_potion1();
  static const int kBloodPotion1FieldNumber = 32;
  inline ::google::protobuf::int32 blood_potion1(int index) const;
  inline void set_blood_potion1(int index, ::google::protobuf::int32 value);
  inline void add_blood_potion1(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      blood_potion1() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_blood_potion1();

  // required int32 blood_potion2 = 33;
  inline bool has_blood_potion2() const;
  inline void clear_blood_potion2();
  static const int kBloodPotion2FieldNumber = 33;
  inline ::google::protobuf::int32 blood_potion2() const;
  inline void set_blood_potion2(::google::protobuf::int32 value);

  // required int32 blood_potion3 = 34;
  inline bool has_blood_potion3() const;
  inline void clear_blood_potion3();
  static const int kBloodPotion3FieldNumber = 34;
  inline ::google::protobuf::int32 blood_potion3() const;
  inline void set_blood_potion3(::google::protobuf::int32 value);

  // required int32 black_exp = 35;
  inline bool has_black_exp() const;
  inline void clear_black_exp();
  static const int kBlackExpFieldNumber = 35;
  inline ::google::protobuf::int32 black_exp() const;
  inline void set_black_exp(::google::protobuf::int32 value);

  // required int32 black_gold = 36;
  inline bool has_black_gold() const;
  inline void clear_black_gold();
  static const int kBlackGoldFieldNumber = 36;
  inline ::google::protobuf::int32 black_gold() const;
  inline void set_black_gold(::google::protobuf::int32 value);

  // required int32 text_answer_exp = 37;
  inline bool has_text_answer_exp() const;
  inline void clear_text_answer_exp();
  static const int kTextAnswerExpFieldNumber = 37;
  inline ::google::protobuf::int32 text_answer_exp() const;
  inline void set_text_answer_exp(::google::protobuf::int32 value);

  // required int32 text_answer_gold = 38;
  inline bool has_text_answer_gold() const;
  inline void clear_text_answer_gold();
  static const int kTextAnswerGoldFieldNumber = 38;
  inline ::google::protobuf::int32 text_answer_gold() const;
  inline void set_text_answer_gold(::google::protobuf::int32 value);

  // required int32 pic_answer_exp = 39;
  inline bool has_pic_answer_exp() const;
  inline void clear_pic_answer_exp();
  static const int kPicAnswerExpFieldNumber = 39;
  inline ::google::protobuf::int32 pic_answer_exp() const;
  inline void set_pic_answer_exp(::google::protobuf::int32 value);

  // required int32 pic_answer_gold = 40;
  inline bool has_pic_answer_gold() const;
  inline void clear_pic_answer_gold();
  static const int kPicAnswerGoldFieldNumber = 40;
  inline ::google::protobuf::int32 pic_answer_gold() const;
  inline void set_pic_answer_gold(::google::protobuf::int32 value);

  // required int32 arena_exp = 41;
  inline bool has_arena_exp() const;
  inline void clear_arena_exp();
  static const int kArenaExpFieldNumber = 41;
  inline ::google::protobuf::int32 arena_exp() const;
  inline void set_arena_exp(::google::protobuf::int32 value);

  // required int32 arena_gold = 42;
  inline bool has_arena_gold() const;
  inline void clear_arena_gold();
  static const int kArenaGoldFieldNumber = 42;
  inline ::google::protobuf::int32 arena_gold() const;
  inline void set_arena_gold(::google::protobuf::int32 value);

  // required int32 arena_win_honor = 43;
  inline bool has_arena_win_honor() const;
  inline void clear_arena_win_honor();
  static const int kArenaWinHonorFieldNumber = 43;
  inline ::google::protobuf::int32 arena_win_honor() const;
  inline void set_arena_win_honor(::google::protobuf::int32 value);

  // required int32 arena_lose_honor = 44;
  inline bool has_arena_lose_honor() const;
  inline void clear_arena_lose_honor();
  static const int kArenaLoseHonorFieldNumber = 44;
  inline ::google::protobuf::int32 arena_lose_honor() const;
  inline void set_arena_lose_honor(::google::protobuf::int32 value);

  // required int32 guild_exp = 45;
  inline bool has_guild_exp() const;
  inline void clear_guild_exp();
  static const int kGuildExpFieldNumber = 45;
  inline ::google::protobuf::int32 guild_exp() const;
  inline void set_guild_exp(::google::protobuf::int32 value);

  // required int32 guild_gold = 46;
  inline bool has_guild_gold() const;
  inline void clear_guild_gold();
  static const int kGuildGoldFieldNumber = 46;
  inline ::google::protobuf::int32 guild_gold() const;
  inline void set_guild_gold(::google::protobuf::int32 value);

  // required int32 guildbattle_min_exp = 47;
  inline bool has_guildbattle_min_exp() const;
  inline void clear_guildbattle_min_exp();
  static const int kGuildbattleMinExpFieldNumber = 47;
  inline ::google::protobuf::int32 guildbattle_min_exp() const;
  inline void set_guildbattle_min_exp(::google::protobuf::int32 value);

  // required int32 guildbattle_battle_exp = 48;
  inline bool has_guildbattle_battle_exp() const;
  inline void clear_guildbattle_battle_exp();
  static const int kGuildbattleBattleExpFieldNumber = 48;
  inline ::google::protobuf::int32 guildbattle_battle_exp() const;
  inline void set_guildbattle_battle_exp(::google::protobuf::int32 value);

  // required int32 guildbattle_win_exp = 49;
  inline bool has_guildbattle_win_exp() const;
  inline void clear_guildbattle_win_exp();
  static const int kGuildbattleWinExpFieldNumber = 49;
  inline ::google::protobuf::int32 guildbattle_win_exp() const;
  inline void set_guildbattle_win_exp(::google::protobuf::int32 value);

  // required int32 guildbattle_lost_exp = 50;
  inline bool has_guildbattle_lost_exp() const;
  inline void clear_guildbattle_lost_exp();
  static const int kGuildbattleLostExpFieldNumber = 50;
  inline ::google::protobuf::int32 guildbattle_lost_exp() const;
  inline void set_guildbattle_lost_exp(::google::protobuf::int32 value);

  // required int32 guildbattle_battle_gold = 51;
  inline bool has_guildbattle_battle_gold() const;
  inline void clear_guildbattle_battle_gold();
  static const int kGuildbattleBattleGoldFieldNumber = 51;
  inline ::google::protobuf::int32 guildbattle_battle_gold() const;
  inline void set_guildbattle_battle_gold(::google::protobuf::int32 value);

  // required int32 miss_gold = 52;
  inline bool has_miss_gold() const;
  inline void clear_miss_gold();
  static const int kMissGoldFieldNumber = 52;
  inline ::google::protobuf::int32 miss_gold() const;
  inline void set_miss_gold(::google::protobuf::int32 value);

  // required int32 miss_crystal = 53;
  inline bool has_miss_crystal() const;
  inline void clear_miss_crystal();
  static const int kMissCrystalFieldNumber = 53;
  inline ::google::protobuf::int32 miss_crystal() const;
  inline void set_miss_crystal(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Config.LevelConfig)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_main_actor_exp();
  inline void clear_has_main_actor_exp();
  inline void set_has_hero_actor_exp();
  inline void clear_has_hero_actor_exp();
  inline void set_has_burning_exp();
  inline void clear_has_burning_exp();
  inline void set_has_burning_gold();
  inline void clear_has_burning_gold();
  inline void set_has_skyfall_exp();
  inline void clear_has_skyfall_exp();
  inline void set_has_skyfall_gold();
  inline void clear_has_skyfall_gold();
  inline void set_has_light_exp();
  inline void clear_has_light_exp();
  inline void set_has_light_gold();
  inline void clear_has_light_gold();
  inline void set_has_three_5_exp();
  inline void clear_has_three_5_exp();
  inline void set_has_three_6_exp();
  inline void clear_has_three_6_exp();
  inline void set_has_three_7_exp();
  inline void clear_has_three_7_exp();
  inline void set_has_three_8_exp();
  inline void clear_has_three_8_exp();
  inline void set_has_three_9_exp();
  inline void clear_has_three_9_exp();
  inline void set_has_three_5_gold();
  inline void clear_has_three_5_gold();
  inline void set_has_three_6_gold();
  inline void clear_has_three_6_gold();
  inline void set_has_three_7_gold();
  inline void clear_has_three_7_gold();
  inline void set_has_three_8_gold();
  inline void clear_has_three_8_gold();
  inline void set_has_three_9_gold();
  inline void clear_has_three_9_gold();
  inline void set_has_goblin_exp();
  inline void clear_has_goblin_exp();
  inline void set_has_goblin_gold();
  inline void clear_has_goblin_gold();
  inline void set_has_server_level_day();
  inline void clear_has_server_level_day();
  inline void set_has_treasure_exp();
  inline void clear_has_treasure_exp();
  inline void set_has_treasure_gold();
  inline void clear_has_treasure_gold();
  inline void set_has_reward_exp();
  inline void clear_has_reward_exp();
  inline void set_has_reward_gold();
  inline void clear_has_reward_gold();
  inline void set_has_hell_box_gold();
  inline void clear_has_hell_box_gold();
  inline void set_has_daykill_exp();
  inline void clear_has_daykill_exp();
  inline void set_has_blood_exp();
  inline void clear_has_blood_exp();
  inline void set_has_blood_gold();
  inline void clear_has_blood_gold();
  inline void set_has_blood_potion2();
  inline void clear_has_blood_potion2();
  inline void set_has_blood_potion3();
  inline void clear_has_blood_potion3();
  inline void set_has_black_exp();
  inline void clear_has_black_exp();
  inline void set_has_black_gold();
  inline void clear_has_black_gold();
  inline void set_has_text_answer_exp();
  inline void clear_has_text_answer_exp();
  inline void set_has_text_answer_gold();
  inline void clear_has_text_answer_gold();
  inline void set_has_pic_answer_exp();
  inline void clear_has_pic_answer_exp();
  inline void set_has_pic_answer_gold();
  inline void clear_has_pic_answer_gold();
  inline void set_has_arena_exp();
  inline void clear_has_arena_exp();
  inline void set_has_arena_gold();
  inline void clear_has_arena_gold();
  inline void set_has_arena_win_honor();
  inline void clear_has_arena_win_honor();
  inline void set_has_arena_lose_honor();
  inline void clear_has_arena_lose_honor();
  inline void set_has_guild_exp();
  inline void clear_has_guild_exp();
  inline void set_has_guild_gold();
  inline void clear_has_guild_gold();
  inline void set_has_guildbattle_min_exp();
  inline void clear_has_guildbattle_min_exp();
  inline void set_has_guildbattle_battle_exp();
  inline void clear_has_guildbattle_battle_exp();
  inline void set_has_guildbattle_win_exp();
  inline void clear_has_guildbattle_win_exp();
  inline void set_has_guildbattle_lost_exp();
  inline void clear_has_guildbattle_lost_exp();
  inline void set_has_guildbattle_battle_gold();
  inline void clear_has_guildbattle_battle_gold();
  inline void set_has_miss_gold();
  inline void clear_has_miss_gold();
  inline void set_has_miss_crystal();
  inline void clear_has_miss_crystal();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 main_actor_exp_;
  ::google::protobuf::int32 hero_actor_exp_;
  ::google::protobuf::int32 burning_exp_;
  ::google::protobuf::int32 burning_gold_;
  ::google::protobuf::int32 skyfall_exp_;
  ::google::protobuf::int32 skyfall_gold_;
  ::google::protobuf::int32 light_exp_;
  ::google::protobuf::int32 light_gold_;
  ::google::protobuf::int32 three_5_exp_;
  ::google::protobuf::int32 three_6_exp_;
  ::google::protobuf::int32 three_7_exp_;
  ::google::protobuf::int32 three_8_exp_;
  ::google::protobuf::int32 three_9_exp_;
  ::google::protobuf::int32 three_5_gold_;
  ::google::protobuf::int32 three_6_gold_;
  ::google::protobuf::int32 three_7_gold_;
  ::google::protobuf::int32 three_8_gold_;
  ::google::protobuf::int32 three_9_gold_;
  ::google::protobuf::int32 goblin_exp_;
  ::google::protobuf::int32 goblin_gold_;
  ::google::protobuf::int32 server_level_day_;
  ::google::protobuf::int32 treasure_exp_;
  ::google::protobuf::int32 treasure_gold_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > trial_field_hp_;
  ::google::protobuf::int32 reward_exp_;
  ::google::protobuf::int32 reward_gold_;
  ::google::protobuf::int32 hell_box_gold_;
  ::google::protobuf::int32 daykill_exp_;
  ::google::protobuf::int32 blood_exp_;
  ::google::protobuf::int32 blood_gold_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > blood_potion1_;
  ::google::protobuf::int32 blood_potion2_;
  ::google::protobuf::int32 blood_potion3_;
  ::google::protobuf::int32 black_exp_;
  ::google::protobuf::int32 black_gold_;
  ::google::protobuf::int32 text_answer_exp_;
  ::google::protobuf::int32 text_answer_gold_;
  ::google::protobuf::int32 pic_answer_exp_;
  ::google::protobuf::int32 pic_answer_gold_;
  ::google::protobuf::int32 arena_exp_;
  ::google::protobuf::int32 arena_gold_;
  ::google::protobuf::int32 arena_win_honor_;
  ::google::protobuf::int32 arena_lose_honor_;
  ::google::protobuf::int32 guild_exp_;
  ::google::protobuf::int32 guild_gold_;
  ::google::protobuf::int32 guildbattle_min_exp_;
  ::google::protobuf::int32 guildbattle_battle_exp_;
  ::google::protobuf::int32 guildbattle_win_exp_;
  ::google::protobuf::int32 guildbattle_lost_exp_;
  ::google::protobuf::int32 guildbattle_battle_gold_;
  ::google::protobuf::int32 miss_gold_;
  ::google::protobuf::int32 miss_crystal_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(53 + 31) / 32];

  friend void  protobuf_AddDesc_ActorConfig_2eproto();
  friend void protobuf_AssignDesc_ActorConfig_2eproto();
  friend void protobuf_ShutdownFile_ActorConfig_2eproto();

  void InitAsDefaultInstance();
  static LevelConfig* default_instance_;
};
// -------------------------------------------------------------------

class LackeysConfig : public ::google::protobuf::Message {
 public:
  LackeysConfig();
  virtual ~LackeysConfig();

  LackeysConfig(const LackeysConfig& from);

  inline LackeysConfig& operator=(const LackeysConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LackeysConfig& default_instance();

  void Swap(LackeysConfig* other);

  // implements Message ----------------------------------------------

  LackeysConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LackeysConfig& from);
  void MergeFrom(const LackeysConfig& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required string attribute1 = 2;
  inline bool has_attribute1() const;
  inline void clear_attribute1();
  static const int kAttribute1FieldNumber = 2;
  inline const ::std::string& attribute1() const;
  inline void set_attribute1(const ::std::string& value);
  inline void set_attribute1(const char* value);
  inline void set_attribute1(const char* value, size_t size);
  inline ::std::string* mutable_attribute1();
  inline ::std::string* release_attribute1();
  inline void set_allocated_attribute1(::std::string* attribute1);

  // required string attribute2 = 3;
  inline bool has_attribute2() const;
  inline void clear_attribute2();
  static const int kAttribute2FieldNumber = 3;
  inline const ::std::string& attribute2() const;
  inline void set_attribute2(const ::std::string& value);
  inline void set_attribute2(const char* value);
  inline void set_attribute2(const char* value, size_t size);
  inline ::std::string* mutable_attribute2();
  inline ::std::string* release_attribute2();
  inline void set_allocated_attribute2(::std::string* attribute2);

  // required int32 value = 4;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Config.LackeysConfig)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_attribute1();
  inline void clear_has_attribute1();
  inline void set_has_attribute2();
  inline void clear_has_attribute2();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* attribute1_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 value_;
  ::std::string* attribute2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ActorConfig_2eproto();
  friend void protobuf_AssignDesc_ActorConfig_2eproto();
  friend void protobuf_ShutdownFile_ActorConfig_2eproto();

  void InitAsDefaultInstance();
  static LackeysConfig* default_instance_;
};
// -------------------------------------------------------------------

class OneKeyEquip : public ::google::protobuf::Message {
 public:
  OneKeyEquip();
  virtual ~OneKeyEquip();

  OneKeyEquip(const OneKeyEquip& from);

  inline OneKeyEquip& operator=(const OneKeyEquip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OneKeyEquip& default_instance();

  void Swap(OneKeyEquip* other);

  // implements Message ----------------------------------------------

  OneKeyEquip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OneKeyEquip& from);
  void MergeFrom(const OneKeyEquip& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 gem0 = 2;
  inline bool has_gem0() const;
  inline void clear_gem0();
  static const int kGem0FieldNumber = 2;
  inline ::google::protobuf::int32 gem0() const;
  inline void set_gem0(::google::protobuf::int32 value);

  // required int32 gem1 = 3;
  inline bool has_gem1() const;
  inline void clear_gem1();
  static const int kGem1FieldNumber = 3;
  inline ::google::protobuf::int32 gem1() const;
  inline void set_gem1(::google::protobuf::int32 value);

  // required int32 gem2 = 4;
  inline bool has_gem2() const;
  inline void clear_gem2();
  static const int kGem2FieldNumber = 4;
  inline ::google::protobuf::int32 gem2() const;
  inline void set_gem2(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Config.OneKeyEquip)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_gem0();
  inline void clear_has_gem0();
  inline void set_has_gem1();
  inline void clear_has_gem1();
  inline void set_has_gem2();
  inline void clear_has_gem2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 gem0_;
  ::google::protobuf::int32 gem1_;
  ::google::protobuf::int32 gem2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ActorConfig_2eproto();
  friend void protobuf_AssignDesc_ActorConfig_2eproto();
  friend void protobuf_ShutdownFile_ActorConfig_2eproto();

  void InitAsDefaultInstance();
  static OneKeyEquip* default_instance_;
};
// -------------------------------------------------------------------

class OneKeyConfig : public ::google::protobuf::Message {
 public:
  OneKeyConfig();
  virtual ~OneKeyConfig();

  OneKeyConfig(const OneKeyConfig& from);

  inline OneKeyConfig& operator=(const OneKeyConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OneKeyConfig& default_instance();

  void Swap(OneKeyConfig* other);

  // implements Message ----------------------------------------------

  OneKeyConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OneKeyConfig& from);
  void MergeFrom(const OneKeyConfig& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::int32 hero_id() const;
  inline void set_hero_id(::google::protobuf::int32 value);

  // required string display_name = 3;
  inline bool has_display_name() const;
  inline void clear_display_name();
  static const int kDisplayNameFieldNumber = 3;
  inline const ::std::string& display_name() const;
  inline void set_display_name(const ::std::string& value);
  inline void set_display_name(const char* value);
  inline void set_display_name(const char* value, size_t size);
  inline ::std::string* mutable_display_name();
  inline ::std::string* release_display_name();
  inline void set_allocated_display_name(::std::string* display_name);

  // required string icon = 4;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 4;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // required int32 hair = 5;
  inline bool has_hair() const;
  inline void clear_hair();
  static const int kHairFieldNumber = 5;
  inline ::google::protobuf::int32 hair() const;
  inline void set_hair(::google::protobuf::int32 value);

  // required int32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required int32 equip_level = 7;
  inline bool has_equip_level() const;
  inline void clear_equip_level();
  static const int kEquipLevelFieldNumber = 7;
  inline ::google::protobuf::int32 equip_level() const;
  inline void set_equip_level(::google::protobuf::int32 value);

  // required int32 star = 8;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 8;
  inline ::google::protobuf::int32 star() const;
  inline void set_star(::google::protobuf::int32 value);

  // required int32 color = 9;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 9;
  inline ::google::protobuf::int32 color() const;
  inline void set_color(::google::protobuf::int32 value);

  // required int32 skill_level = 10;
  inline bool has_skill_level() const;
  inline void clear_skill_level();
  static const int kSkillLevelFieldNumber = 10;
  inline ::google::protobuf::int32 skill_level() const;
  inline void set_skill_level(::google::protobuf::int32 value);

  // repeated .Config.OneKeyEquip equips = 11;
  inline int equips_size() const;
  inline void clear_equips();
  static const int kEquipsFieldNumber = 11;
  inline const ::Config::OneKeyEquip& equips(int index) const;
  inline ::Config::OneKeyEquip* mutable_equips(int index);
  inline ::Config::OneKeyEquip* add_equips();
  inline const ::google::protobuf::RepeatedPtrField< ::Config::OneKeyEquip >&
      equips() const;
  inline ::google::protobuf::RepeatedPtrField< ::Config::OneKeyEquip >*
      mutable_equips();

  // @@protoc_insertion_point(class_scope:Config.OneKeyConfig)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_display_name();
  inline void clear_has_display_name();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_hair();
  inline void clear_has_hair();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_equip_level();
  inline void clear_has_equip_level();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_skill_level();
  inline void clear_has_skill_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 hero_id_;
  ::std::string* display_name_;
  ::std::string* icon_;
  ::google::protobuf::int32 hair_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 equip_level_;
  ::google::protobuf::int32 star_;
  ::google::protobuf::int32 color_;
  ::google::protobuf::int32 skill_level_;
  ::google::protobuf::RepeatedPtrField< ::Config::OneKeyEquip > equips_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_ActorConfig_2eproto();
  friend void protobuf_AssignDesc_ActorConfig_2eproto();
  friend void protobuf_ShutdownFile_ActorConfig_2eproto();

  void InitAsDefaultInstance();
  static OneKeyConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// LevelConfig

// required int32 level = 1;
inline bool LevelConfig::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LevelConfig::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LevelConfig::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LevelConfig::clear_level() {
  level_ = 0;
  clear_has_level();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::level() const {
  return level_;
}
inline void LevelConfig::set_level(::google::protobuf::int32 value) {
  SetDirty();
  set_has_level();
  level_ = value;
}

// required int32 main_actor_exp = 2;
inline bool LevelConfig::has_main_actor_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LevelConfig::set_has_main_actor_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LevelConfig::clear_has_main_actor_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LevelConfig::clear_main_actor_exp() {
  main_actor_exp_ = 0;
  clear_has_main_actor_exp();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::main_actor_exp() const {
  return main_actor_exp_;
}
inline void LevelConfig::set_main_actor_exp(::google::protobuf::int32 value) {
  SetDirty();
  set_has_main_actor_exp();
  main_actor_exp_ = value;
}

// required int32 hero_actor_exp = 3;
inline bool LevelConfig::has_hero_actor_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LevelConfig::set_has_hero_actor_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LevelConfig::clear_has_hero_actor_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LevelConfig::clear_hero_actor_exp() {
  hero_actor_exp_ = 0;
  clear_has_hero_actor_exp();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::hero_actor_exp() const {
  return hero_actor_exp_;
}
inline void LevelConfig::set_hero_actor_exp(::google::protobuf::int32 value) {
  SetDirty();
  set_has_hero_actor_exp();
  hero_actor_exp_ = value;
}

// required int32 burning_exp = 4;
inline bool LevelConfig::has_burning_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LevelConfig::set_has_burning_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LevelConfig::clear_has_burning_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LevelConfig::clear_burning_exp() {
  burning_exp_ = 0;
  clear_has_burning_exp();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::burning_exp() const {
  return burning_exp_;
}
inline void LevelConfig::set_burning_exp(::google::protobuf::int32 value) {
  SetDirty();
  set_has_burning_exp();
  burning_exp_ = value;
}

// required int32 burning_gold = 5;
inline bool LevelConfig::has_burning_gold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LevelConfig::set_has_burning_gold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LevelConfig::clear_has_burning_gold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LevelConfig::clear_burning_gold() {
  burning_gold_ = 0;
  clear_has_burning_gold();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::burning_gold() const {
  return burning_gold_;
}
inline void LevelConfig::set_burning_gold(::google::protobuf::int32 value) {
  SetDirty();
  set_has_burning_gold();
  burning_gold_ = value;
}

// required int32 skyfall_exp = 6;
inline bool LevelConfig::has_skyfall_exp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LevelConfig::set_has_skyfall_exp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LevelConfig::clear_has_skyfall_exp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LevelConfig::clear_skyfall_exp() {
  skyfall_exp_ = 0;
  clear_has_skyfall_exp();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::skyfall_exp() const {
  return skyfall_exp_;
}
inline void LevelConfig::set_skyfall_exp(::google::protobuf::int32 value) {
  SetDirty();
  set_has_skyfall_exp();
  skyfall_exp_ = value;
}

// required int32 skyfall_gold = 7;
inline bool LevelConfig::has_skyfall_gold() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LevelConfig::set_has_skyfall_gold() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LevelConfig::clear_has_skyfall_gold() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LevelConfig::clear_skyfall_gold() {
  skyfall_gold_ = 0;
  clear_has_skyfall_gold();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::skyfall_gold() const {
  return skyfall_gold_;
}
inline void LevelConfig::set_skyfall_gold(::google::protobuf::int32 value) {
  SetDirty();
  set_has_skyfall_gold();
  skyfall_gold_ = value;
}

// required int32 light_exp = 8;
inline bool LevelConfig::has_light_exp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LevelConfig::set_has_light_exp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LevelConfig::clear_has_light_exp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LevelConfig::clear_light_exp() {
  light_exp_ = 0;
  clear_has_light_exp();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::light_exp() const {
  return light_exp_;
}
inline void LevelConfig::set_light_exp(::google::protobuf::int32 value) {
  SetDirty();
  set_has_light_exp();
  light_exp_ = value;
}

// required int32 light_gold = 9;
inline bool LevelConfig::has_light_gold() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LevelConfig::set_has_light_gold() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LevelConfig::clear_has_light_gold() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LevelConfig::clear_light_gold() {
  light_gold_ = 0;
  clear_has_light_gold();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::light_gold() const {
  return light_gold_;
}
inline void LevelConfig::set_light_gold(::google::protobuf::int32 value) {
  SetDirty();
  set_has_light_gold();
  light_gold_ = value;
}

// required int32 three_5_exp = 10;
inline bool LevelConfig::has_three_5_exp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LevelConfig::set_has_three_5_exp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LevelConfig::clear_has_three_5_exp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LevelConfig::clear_three_5_exp() {
  three_5_exp_ = 0;
  clear_has_three_5_exp();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::three_5_exp() const {
  return three_5_exp_;
}
inline void LevelConfig::set_three_5_exp(::google::protobuf::int32 value) {
  SetDirty();
  set_has_three_5_exp();
  three_5_exp_ = value;
}

// required int32 three_6_exp = 11;
inline bool LevelConfig::has_three_6_exp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LevelConfig::set_has_three_6_exp() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LevelConfig::clear_has_three_6_exp() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LevelConfig::clear_three_6_exp() {
  three_6_exp_ = 0;
  clear_has_three_6_exp();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::three_6_exp() const {
  return three_6_exp_;
}
inline void LevelConfig::set_three_6_exp(::google::protobuf::int32 value) {
  SetDirty();
  set_has_three_6_exp();
  three_6_exp_ = value;
}

// required int32 three_7_exp = 12;
inline bool LevelConfig::has_three_7_exp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LevelConfig::set_has_three_7_exp() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LevelConfig::clear_has_three_7_exp() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LevelConfig::clear_three_7_exp() {
  three_7_exp_ = 0;
  clear_has_three_7_exp();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::three_7_exp() const {
  return three_7_exp_;
}
inline void LevelConfig::set_three_7_exp(::google::protobuf::int32 value) {
  SetDirty();
  set_has_three_7_exp();
  three_7_exp_ = value;
}

// required int32 three_8_exp = 13;
inline bool LevelConfig::has_three_8_exp() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LevelConfig::set_has_three_8_exp() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LevelConfig::clear_has_three_8_exp() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LevelConfig::clear_three_8_exp() {
  three_8_exp_ = 0;
  clear_has_three_8_exp();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::three_8_exp() const {
  return three_8_exp_;
}
inline void LevelConfig::set_three_8_exp(::google::protobuf::int32 value) {
  SetDirty();
  set_has_three_8_exp();
  three_8_exp_ = value;
}

// required int32 three_9_exp = 14;
inline bool LevelConfig::has_three_9_exp() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LevelConfig::set_has_three_9_exp() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LevelConfig::clear_has_three_9_exp() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LevelConfig::clear_three_9_exp() {
  three_9_exp_ = 0;
  clear_has_three_9_exp();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::three_9_exp() const {
  return three_9_exp_;
}
inline void LevelConfig::set_three_9_exp(::google::protobuf::int32 value) {
  SetDirty();
  set_has_three_9_exp();
  three_9_exp_ = value;
}

// required int32 three_5_gold = 15;
inline bool LevelConfig::has_three_5_gold() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LevelConfig::set_has_three_5_gold() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LevelConfig::clear_has_three_5_gold() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LevelConfig::clear_three_5_gold() {
  three_5_gold_ = 0;
  clear_has_three_5_gold();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::three_5_gold() const {
  return three_5_gold_;
}
inline void LevelConfig::set_three_5_gold(::google::protobuf::int32 value) {
  SetDirty();
  set_has_three_5_gold();
  three_5_gold_ = value;
}

// required int32 three_6_gold = 16;
inline bool LevelConfig::has_three_6_gold() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void LevelConfig::set_has_three_6_gold() {
  _has_bits_[0] |= 0x00008000u;
}
inline void LevelConfig::clear_has_three_6_gold() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void LevelConfig::clear_three_6_gold() {
  three_6_gold_ = 0;
  clear_has_three_6_gold();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::three_6_gold() const {
  return three_6_gold_;
}
inline void LevelConfig::set_three_6_gold(::google::protobuf::int32 value) {
  SetDirty();
  set_has_three_6_gold();
  three_6_gold_ = value;
}

// required int32 three_7_gold = 17;
inline bool LevelConfig::has_three_7_gold() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void LevelConfig::set_has_three_7_gold() {
  _has_bits_[0] |= 0x00010000u;
}
inline void LevelConfig::clear_has_three_7_gold() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void LevelConfig::clear_three_7_gold() {
  three_7_gold_ = 0;
  clear_has_three_7_gold();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::three_7_gold() const {
  return three_7_gold_;
}
inline void LevelConfig::set_three_7_gold(::google::protobuf::int32 value) {
  SetDirty();
  set_has_three_7_gold();
  three_7_gold_ = value;
}

// required int32 three_8_gold = 18;
inline bool LevelConfig::has_three_8_gold() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void LevelConfig::set_has_three_8_gold() {
  _has_bits_[0] |= 0x00020000u;
}
inline void LevelConfig::clear_has_three_8_gold() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void LevelConfig::clear_three_8_gold() {
  three_8_gold_ = 0;
  clear_has_three_8_gold();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::three_8_gold() const {
  return three_8_gold_;
}
inline void LevelConfig::set_three_8_gold(::google::protobuf::int32 value) {
  SetDirty();
  set_has_three_8_gold();
  three_8_gold_ = value;
}

// required int32 three_9_gold = 19;
inline bool LevelConfig::has_three_9_gold() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void LevelConfig::set_has_three_9_gold() {
  _has_bits_[0] |= 0x00040000u;
}
inline void LevelConfig::clear_has_three_9_gold() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void LevelConfig::clear_three_9_gold() {
  three_9_gold_ = 0;
  clear_has_three_9_gold();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::three_9_gold() const {
  return three_9_gold_;
}
inline void LevelConfig::set_three_9_gold(::google::protobuf::int32 value) {
  SetDirty();
  set_has_three_9_gold();
  three_9_gold_ = value;
}

// required int32 goblin_exp = 20;
inline bool LevelConfig::has_goblin_exp() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void LevelConfig::set_has_goblin_exp() {
  _has_bits_[0] |= 0x00080000u;
}
inline void LevelConfig::clear_has_goblin_exp() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void LevelConfig::clear_goblin_exp() {
  goblin_exp_ = 0;
  clear_has_goblin_exp();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::goblin_exp() const {
  return goblin_exp_;
}
inline void LevelConfig::set_goblin_exp(::google::protobuf::int32 value) {
  SetDirty();
  set_has_goblin_exp();
  goblin_exp_ = value;
}

// required int32 goblin_gold = 21;
inline bool LevelConfig::has_goblin_gold() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void LevelConfig::set_has_goblin_gold() {
  _has_bits_[0] |= 0x00100000u;
}
inline void LevelConfig::clear_has_goblin_gold() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void LevelConfig::clear_goblin_gold() {
  goblin_gold_ = 0;
  clear_has_goblin_gold();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::goblin_gold() const {
  return goblin_gold_;
}
inline void LevelConfig::set_goblin_gold(::google::protobuf::int32 value) {
  SetDirty();
  set_has_goblin_gold();
  goblin_gold_ = value;
}

// required int32 server_level_day = 22;
inline bool LevelConfig::has_server_level_day() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void LevelConfig::set_has_server_level_day() {
  _has_bits_[0] |= 0x00200000u;
}
inline void LevelConfig::clear_has_server_level_day() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void LevelConfig::clear_server_level_day() {
  server_level_day_ = 0;
  clear_has_server_level_day();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::server_level_day() const {
  return server_level_day_;
}
inline void LevelConfig::set_server_level_day(::google::protobuf::int32 value) {
  SetDirty();
  set_has_server_level_day();
  server_level_day_ = value;
}

// required int32 treasure_exp = 23;
inline bool LevelConfig::has_treasure_exp() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void LevelConfig::set_has_treasure_exp() {
  _has_bits_[0] |= 0x00400000u;
}
inline void LevelConfig::clear_has_treasure_exp() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void LevelConfig::clear_treasure_exp() {
  treasure_exp_ = 0;
  clear_has_treasure_exp();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::treasure_exp() const {
  return treasure_exp_;
}
inline void LevelConfig::set_treasure_exp(::google::protobuf::int32 value) {
  SetDirty();
  set_has_treasure_exp();
  treasure_exp_ = value;
}

// required int32 treasure_gold = 24;
inline bool LevelConfig::has_treasure_gold() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void LevelConfig::set_has_treasure_gold() {
  _has_bits_[0] |= 0x00800000u;
}
inline void LevelConfig::clear_has_treasure_gold() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void LevelConfig::clear_treasure_gold() {
  treasure_gold_ = 0;
  clear_has_treasure_gold();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::treasure_gold() const {
  return treasure_gold_;
}
inline void LevelConfig::set_treasure_gold(::google::protobuf::int32 value) {
  SetDirty();
  set_has_treasure_gold();
  treasure_gold_ = value;
}

// repeated int32 trial_field_hp = 25;
inline int LevelConfig::trial_field_hp_size() const {
  return trial_field_hp_.size();
}
inline void LevelConfig::clear_trial_field_hp() {
  trial_field_hp_.Clear();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::trial_field_hp(int index) const {
  return trial_field_hp_.Get(index);
}
inline void LevelConfig::set_trial_field_hp(int index, ::google::protobuf::int32 value) {
  SetDirty();
  trial_field_hp_.Set(index, value);
}
inline void LevelConfig::add_trial_field_hp(::google::protobuf::int32 value) {
  SetDirty();
  trial_field_hp_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
LevelConfig::trial_field_hp() const {
  return trial_field_hp_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
LevelConfig::mutable_trial_field_hp() {
  SetDirty();
  return &trial_field_hp_;
}

// required int32 reward_exp = 26;
inline bool LevelConfig::has_reward_exp() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void LevelConfig::set_has_reward_exp() {
  _has_bits_[0] |= 0x02000000u;
}
inline void LevelConfig::clear_has_reward_exp() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void LevelConfig::clear_reward_exp() {
  reward_exp_ = 0;
  clear_has_reward_exp();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::reward_exp() const {
  return reward_exp_;
}
inline void LevelConfig::set_reward_exp(::google::protobuf::int32 value) {
  SetDirty();
  set_has_reward_exp();
  reward_exp_ = value;
}

// required int32 reward_gold = 27;
inline bool LevelConfig::has_reward_gold() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void LevelConfig::set_has_reward_gold() {
  _has_bits_[0] |= 0x04000000u;
}
inline void LevelConfig::clear_has_reward_gold() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void LevelConfig::clear_reward_gold() {
  reward_gold_ = 0;
  clear_has_reward_gold();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::reward_gold() const {
  return reward_gold_;
}
inline void LevelConfig::set_reward_gold(::google::protobuf::int32 value) {
  SetDirty();
  set_has_reward_gold();
  reward_gold_ = value;
}

// required int32 hell_box_gold = 28;
inline bool LevelConfig::has_hell_box_gold() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void LevelConfig::set_has_hell_box_gold() {
  _has_bits_[0] |= 0x08000000u;
}
inline void LevelConfig::clear_has_hell_box_gold() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void LevelConfig::clear_hell_box_gold() {
  hell_box_gold_ = 0;
  clear_has_hell_box_gold();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::hell_box_gold() const {
  return hell_box_gold_;
}
inline void LevelConfig::set_hell_box_gold(::google::protobuf::int32 value) {
  SetDirty();
  set_has_hell_box_gold();
  hell_box_gold_ = value;
}

// required int32 daykill_exp = 29;
inline bool LevelConfig::has_daykill_exp() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void LevelConfig::set_has_daykill_exp() {
  _has_bits_[0] |= 0x10000000u;
}
inline void LevelConfig::clear_has_daykill_exp() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void LevelConfig::clear_daykill_exp() {
  daykill_exp_ = 0;
  clear_has_daykill_exp();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::daykill_exp() const {
  return daykill_exp_;
}
inline void LevelConfig::set_daykill_exp(::google::protobuf::int32 value) {
  SetDirty();
  set_has_daykill_exp();
  daykill_exp_ = value;
}

// required int32 blood_exp = 30;
inline bool LevelConfig::has_blood_exp() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void LevelConfig::set_has_blood_exp() {
  _has_bits_[0] |= 0x20000000u;
}
inline void LevelConfig::clear_has_blood_exp() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void LevelConfig::clear_blood_exp() {
  blood_exp_ = 0;
  clear_has_blood_exp();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::blood_exp() const {
  return blood_exp_;
}
inline void LevelConfig::set_blood_exp(::google::protobuf::int32 value) {
  SetDirty();
  set_has_blood_exp();
  blood_exp_ = value;
}

// required int32 blood_gold = 31;
inline bool LevelConfig::has_blood_gold() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void LevelConfig::set_has_blood_gold() {
  _has_bits_[0] |= 0x40000000u;
}
inline void LevelConfig::clear_has_blood_gold() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void LevelConfig::clear_blood_gold() {
  blood_gold_ = 0;
  clear_has_blood_gold();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::blood_gold() const {
  return blood_gold_;
}
inline void LevelConfig::set_blood_gold(::google::protobuf::int32 value) {
  SetDirty();
  set_has_blood_gold();
  blood_gold_ = value;
}

// repeated int32 blood_potion1 = 32;
inline int LevelConfig::blood_potion1_size() const {
  return blood_potion1_.size();
}
inline void LevelConfig::clear_blood_potion1() {
  blood_potion1_.Clear();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::blood_potion1(int index) const {
  return blood_potion1_.Get(index);
}
inline void LevelConfig::set_blood_potion1(int index, ::google::protobuf::int32 value) {
  SetDirty();
  blood_potion1_.Set(index, value);
}
inline void LevelConfig::add_blood_potion1(::google::protobuf::int32 value) {
  SetDirty();
  blood_potion1_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
LevelConfig::blood_potion1() const {
  return blood_potion1_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
LevelConfig::mutable_blood_potion1() {
  SetDirty();
  return &blood_potion1_;
}

// required int32 blood_potion2 = 33;
inline bool LevelConfig::has_blood_potion2() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void LevelConfig::set_has_blood_potion2() {
  _has_bits_[1] |= 0x00000001u;
}
inline void LevelConfig::clear_has_blood_potion2() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void LevelConfig::clear_blood_potion2() {
  blood_potion2_ = 0;
  clear_has_blood_potion2();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::blood_potion2() const {
  return blood_potion2_;
}
inline void LevelConfig::set_blood_potion2(::google::protobuf::int32 value) {
  SetDirty();
  set_has_blood_potion2();
  blood_potion2_ = value;
}

// required int32 blood_potion3 = 34;
inline bool LevelConfig::has_blood_potion3() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void LevelConfig::set_has_blood_potion3() {
  _has_bits_[1] |= 0x00000002u;
}
inline void LevelConfig::clear_has_blood_potion3() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void LevelConfig::clear_blood_potion3() {
  blood_potion3_ = 0;
  clear_has_blood_potion3();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::blood_potion3() const {
  return blood_potion3_;
}
inline void LevelConfig::set_blood_potion3(::google::protobuf::int32 value) {
  SetDirty();
  set_has_blood_potion3();
  blood_potion3_ = value;
}

// required int32 black_exp = 35;
inline bool LevelConfig::has_black_exp() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void LevelConfig::set_has_black_exp() {
  _has_bits_[1] |= 0x00000004u;
}
inline void LevelConfig::clear_has_black_exp() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void LevelConfig::clear_black_exp() {
  black_exp_ = 0;
  clear_has_black_exp();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::black_exp() const {
  return black_exp_;
}
inline void LevelConfig::set_black_exp(::google::protobuf::int32 value) {
  SetDirty();
  set_has_black_exp();
  black_exp_ = value;
}

// required int32 black_gold = 36;
inline bool LevelConfig::has_black_gold() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void LevelConfig::set_has_black_gold() {
  _has_bits_[1] |= 0x00000008u;
}
inline void LevelConfig::clear_has_black_gold() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void LevelConfig::clear_black_gold() {
  black_gold_ = 0;
  clear_has_black_gold();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::black_gold() const {
  return black_gold_;
}
inline void LevelConfig::set_black_gold(::google::protobuf::int32 value) {
  SetDirty();
  set_has_black_gold();
  black_gold_ = value;
}

// required int32 text_answer_exp = 37;
inline bool LevelConfig::has_text_answer_exp() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void LevelConfig::set_has_text_answer_exp() {
  _has_bits_[1] |= 0x00000010u;
}
inline void LevelConfig::clear_has_text_answer_exp() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void LevelConfig::clear_text_answer_exp() {
  text_answer_exp_ = 0;
  clear_has_text_answer_exp();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::text_answer_exp() const {
  return text_answer_exp_;
}
inline void LevelConfig::set_text_answer_exp(::google::protobuf::int32 value) {
  SetDirty();
  set_has_text_answer_exp();
  text_answer_exp_ = value;
}

// required int32 text_answer_gold = 38;
inline bool LevelConfig::has_text_answer_gold() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void LevelConfig::set_has_text_answer_gold() {
  _has_bits_[1] |= 0x00000020u;
}
inline void LevelConfig::clear_has_text_answer_gold() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void LevelConfig::clear_text_answer_gold() {
  text_answer_gold_ = 0;
  clear_has_text_answer_gold();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::text_answer_gold() const {
  return text_answer_gold_;
}
inline void LevelConfig::set_text_answer_gold(::google::protobuf::int32 value) {
  SetDirty();
  set_has_text_answer_gold();
  text_answer_gold_ = value;
}

// required int32 pic_answer_exp = 39;
inline bool LevelConfig::has_pic_answer_exp() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void LevelConfig::set_has_pic_answer_exp() {
  _has_bits_[1] |= 0x00000040u;
}
inline void LevelConfig::clear_has_pic_answer_exp() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void LevelConfig::clear_pic_answer_exp() {
  pic_answer_exp_ = 0;
  clear_has_pic_answer_exp();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::pic_answer_exp() const {
  return pic_answer_exp_;
}
inline void LevelConfig::set_pic_answer_exp(::google::protobuf::int32 value) {
  SetDirty();
  set_has_pic_answer_exp();
  pic_answer_exp_ = value;
}

// required int32 pic_answer_gold = 40;
inline bool LevelConfig::has_pic_answer_gold() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void LevelConfig::set_has_pic_answer_gold() {
  _has_bits_[1] |= 0x00000080u;
}
inline void LevelConfig::clear_has_pic_answer_gold() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void LevelConfig::clear_pic_answer_gold() {
  pic_answer_gold_ = 0;
  clear_has_pic_answer_gold();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::pic_answer_gold() const {
  return pic_answer_gold_;
}
inline void LevelConfig::set_pic_answer_gold(::google::protobuf::int32 value) {
  SetDirty();
  set_has_pic_answer_gold();
  pic_answer_gold_ = value;
}

// required int32 arena_exp = 41;
inline bool LevelConfig::has_arena_exp() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void LevelConfig::set_has_arena_exp() {
  _has_bits_[1] |= 0x00000100u;
}
inline void LevelConfig::clear_has_arena_exp() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void LevelConfig::clear_arena_exp() {
  arena_exp_ = 0;
  clear_has_arena_exp();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::arena_exp() const {
  return arena_exp_;
}
inline void LevelConfig::set_arena_exp(::google::protobuf::int32 value) {
  SetDirty();
  set_has_arena_exp();
  arena_exp_ = value;
}

// required int32 arena_gold = 42;
inline bool LevelConfig::has_arena_gold() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void LevelConfig::set_has_arena_gold() {
  _has_bits_[1] |= 0x00000200u;
}
inline void LevelConfig::clear_has_arena_gold() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void LevelConfig::clear_arena_gold() {
  arena_gold_ = 0;
  clear_has_arena_gold();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::arena_gold() const {
  return arena_gold_;
}
inline void LevelConfig::set_arena_gold(::google::protobuf::int32 value) {
  SetDirty();
  set_has_arena_gold();
  arena_gold_ = value;
}

// required int32 arena_win_honor = 43;
inline bool LevelConfig::has_arena_win_honor() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void LevelConfig::set_has_arena_win_honor() {
  _has_bits_[1] |= 0x00000400u;
}
inline void LevelConfig::clear_has_arena_win_honor() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void LevelConfig::clear_arena_win_honor() {
  arena_win_honor_ = 0;
  clear_has_arena_win_honor();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::arena_win_honor() const {
  return arena_win_honor_;
}
inline void LevelConfig::set_arena_win_honor(::google::protobuf::int32 value) {
  SetDirty();
  set_has_arena_win_honor();
  arena_win_honor_ = value;
}

// required int32 arena_lose_honor = 44;
inline bool LevelConfig::has_arena_lose_honor() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void LevelConfig::set_has_arena_lose_honor() {
  _has_bits_[1] |= 0x00000800u;
}
inline void LevelConfig::clear_has_arena_lose_honor() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void LevelConfig::clear_arena_lose_honor() {
  arena_lose_honor_ = 0;
  clear_has_arena_lose_honor();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::arena_lose_honor() const {
  return arena_lose_honor_;
}
inline void LevelConfig::set_arena_lose_honor(::google::protobuf::int32 value) {
  SetDirty();
  set_has_arena_lose_honor();
  arena_lose_honor_ = value;
}

// required int32 guild_exp = 45;
inline bool LevelConfig::has_guild_exp() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void LevelConfig::set_has_guild_exp() {
  _has_bits_[1] |= 0x00001000u;
}
inline void LevelConfig::clear_has_guild_exp() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void LevelConfig::clear_guild_exp() {
  guild_exp_ = 0;
  clear_has_guild_exp();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::guild_exp() const {
  return guild_exp_;
}
inline void LevelConfig::set_guild_exp(::google::protobuf::int32 value) {
  SetDirty();
  set_has_guild_exp();
  guild_exp_ = value;
}

// required int32 guild_gold = 46;
inline bool LevelConfig::has_guild_gold() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void LevelConfig::set_has_guild_gold() {
  _has_bits_[1] |= 0x00002000u;
}
inline void LevelConfig::clear_has_guild_gold() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void LevelConfig::clear_guild_gold() {
  guild_gold_ = 0;
  clear_has_guild_gold();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::guild_gold() const {
  return guild_gold_;
}
inline void LevelConfig::set_guild_gold(::google::protobuf::int32 value) {
  SetDirty();
  set_has_guild_gold();
  guild_gold_ = value;
}

// required int32 guildbattle_min_exp = 47;
inline bool LevelConfig::has_guildbattle_min_exp() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void LevelConfig::set_has_guildbattle_min_exp() {
  _has_bits_[1] |= 0x00004000u;
}
inline void LevelConfig::clear_has_guildbattle_min_exp() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void LevelConfig::clear_guildbattle_min_exp() {
  guildbattle_min_exp_ = 0;
  clear_has_guildbattle_min_exp();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::guildbattle_min_exp() const {
  return guildbattle_min_exp_;
}
inline void LevelConfig::set_guildbattle_min_exp(::google::protobuf::int32 value) {
  SetDirty();
  set_has_guildbattle_min_exp();
  guildbattle_min_exp_ = value;
}

// required int32 guildbattle_battle_exp = 48;
inline bool LevelConfig::has_guildbattle_battle_exp() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void LevelConfig::set_has_guildbattle_battle_exp() {
  _has_bits_[1] |= 0x00008000u;
}
inline void LevelConfig::clear_has_guildbattle_battle_exp() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void LevelConfig::clear_guildbattle_battle_exp() {
  guildbattle_battle_exp_ = 0;
  clear_has_guildbattle_battle_exp();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::guildbattle_battle_exp() const {
  return guildbattle_battle_exp_;
}
inline void LevelConfig::set_guildbattle_battle_exp(::google::protobuf::int32 value) {
  SetDirty();
  set_has_guildbattle_battle_exp();
  guildbattle_battle_exp_ = value;
}

// required int32 guildbattle_win_exp = 49;
inline bool LevelConfig::has_guildbattle_win_exp() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void LevelConfig::set_has_guildbattle_win_exp() {
  _has_bits_[1] |= 0x00010000u;
}
inline void LevelConfig::clear_has_guildbattle_win_exp() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void LevelConfig::clear_guildbattle_win_exp() {
  guildbattle_win_exp_ = 0;
  clear_has_guildbattle_win_exp();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::guildbattle_win_exp() const {
  return guildbattle_win_exp_;
}
inline void LevelConfig::set_guildbattle_win_exp(::google::protobuf::int32 value) {
  SetDirty();
  set_has_guildbattle_win_exp();
  guildbattle_win_exp_ = value;
}

// required int32 guildbattle_lost_exp = 50;
inline bool LevelConfig::has_guildbattle_lost_exp() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void LevelConfig::set_has_guildbattle_lost_exp() {
  _has_bits_[1] |= 0x00020000u;
}
inline void LevelConfig::clear_has_guildbattle_lost_exp() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void LevelConfig::clear_guildbattle_lost_exp() {
  guildbattle_lost_exp_ = 0;
  clear_has_guildbattle_lost_exp();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::guildbattle_lost_exp() const {
  return guildbattle_lost_exp_;
}
inline void LevelConfig::set_guildbattle_lost_exp(::google::protobuf::int32 value) {
  SetDirty();
  set_has_guildbattle_lost_exp();
  guildbattle_lost_exp_ = value;
}

// required int32 guildbattle_battle_gold = 51;
inline bool LevelConfig::has_guildbattle_battle_gold() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void LevelConfig::set_has_guildbattle_battle_gold() {
  _has_bits_[1] |= 0x00040000u;
}
inline void LevelConfig::clear_has_guildbattle_battle_gold() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void LevelConfig::clear_guildbattle_battle_gold() {
  guildbattle_battle_gold_ = 0;
  clear_has_guildbattle_battle_gold();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::guildbattle_battle_gold() const {
  return guildbattle_battle_gold_;
}
inline void LevelConfig::set_guildbattle_battle_gold(::google::protobuf::int32 value) {
  SetDirty();
  set_has_guildbattle_battle_gold();
  guildbattle_battle_gold_ = value;
}

// required int32 miss_gold = 52;
inline bool LevelConfig::has_miss_gold() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void LevelConfig::set_has_miss_gold() {
  _has_bits_[1] |= 0x00080000u;
}
inline void LevelConfig::clear_has_miss_gold() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void LevelConfig::clear_miss_gold() {
  miss_gold_ = 0;
  clear_has_miss_gold();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::miss_gold() const {
  return miss_gold_;
}
inline void LevelConfig::set_miss_gold(::google::protobuf::int32 value) {
  SetDirty();
  set_has_miss_gold();
  miss_gold_ = value;
}

// required int32 miss_crystal = 53;
inline bool LevelConfig::has_miss_crystal() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void LevelConfig::set_has_miss_crystal() {
  _has_bits_[1] |= 0x00100000u;
}
inline void LevelConfig::clear_has_miss_crystal() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void LevelConfig::clear_miss_crystal() {
  miss_crystal_ = 0;
  clear_has_miss_crystal();
  SetDirty();
}
inline ::google::protobuf::int32 LevelConfig::miss_crystal() const {
  return miss_crystal_;
}
inline void LevelConfig::set_miss_crystal(::google::protobuf::int32 value) {
  SetDirty();
  set_has_miss_crystal();
  miss_crystal_ = value;
}

// -------------------------------------------------------------------

// LackeysConfig

// required int32 index = 1;
inline bool LackeysConfig::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LackeysConfig::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LackeysConfig::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LackeysConfig::clear_index() {
  index_ = 0;
  clear_has_index();
  SetDirty();
}
inline ::google::protobuf::int32 LackeysConfig::index() const {
  return index_;
}
inline void LackeysConfig::set_index(::google::protobuf::int32 value) {
  SetDirty();
  set_has_index();
  index_ = value;
}

// required string attribute1 = 2;
inline bool LackeysConfig::has_attribute1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LackeysConfig::set_has_attribute1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LackeysConfig::clear_has_attribute1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LackeysConfig::clear_attribute1() {
  if (attribute1_ != &::google::protobuf::internal::kEmptyString) {
    attribute1_->clear();
  }
  clear_has_attribute1();
  SetDirty();
}
inline const ::std::string& LackeysConfig::attribute1() const {
  return *attribute1_;
}
inline void LackeysConfig::set_attribute1(const ::std::string& value) {
  SetDirty();
  set_has_attribute1();
  if (attribute1_ == &::google::protobuf::internal::kEmptyString) {
    attribute1_ = new ::std::string;
  }
  attribute1_->assign(value);
}
inline void LackeysConfig::set_attribute1(const char* value) {
  SetDirty();
  set_has_attribute1();
  if (attribute1_ == &::google::protobuf::internal::kEmptyString) {
    attribute1_ = new ::std::string;
  }
  attribute1_->assign(value);
}
inline void LackeysConfig::set_attribute1(const char* value, size_t size) {
  SetDirty();
  set_has_attribute1();
  if (attribute1_ == &::google::protobuf::internal::kEmptyString) {
    attribute1_ = new ::std::string;
  }
  attribute1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LackeysConfig::mutable_attribute1() {
  SetDirty();
  set_has_attribute1();
  if (attribute1_ == &::google::protobuf::internal::kEmptyString) {
    attribute1_ = new ::std::string;
  }
  return attribute1_;
}
inline ::std::string* LackeysConfig::release_attribute1() {
  SetDirty();
  clear_has_attribute1();
  if (attribute1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attribute1_;
    attribute1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LackeysConfig::set_allocated_attribute1(::std::string* attribute1) {
  SetDirty();
  if (attribute1_ != &::google::protobuf::internal::kEmptyString) {
    delete attribute1_;
  }
  if (attribute1) {
    set_has_attribute1();
    attribute1_ = attribute1;
  } else {
    clear_has_attribute1();
    attribute1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string attribute2 = 3;
inline bool LackeysConfig::has_attribute2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LackeysConfig::set_has_attribute2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LackeysConfig::clear_has_attribute2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LackeysConfig::clear_attribute2() {
  if (attribute2_ != &::google::protobuf::internal::kEmptyString) {
    attribute2_->clear();
  }
  clear_has_attribute2();
  SetDirty();
}
inline const ::std::string& LackeysConfig::attribute2() const {
  return *attribute2_;
}
inline void LackeysConfig::set_attribute2(const ::std::string& value) {
  SetDirty();
  set_has_attribute2();
  if (attribute2_ == &::google::protobuf::internal::kEmptyString) {
    attribute2_ = new ::std::string;
  }
  attribute2_->assign(value);
}
inline void LackeysConfig::set_attribute2(const char* value) {
  SetDirty();
  set_has_attribute2();
  if (attribute2_ == &::google::protobuf::internal::kEmptyString) {
    attribute2_ = new ::std::string;
  }
  attribute2_->assign(value);
}
inline void LackeysConfig::set_attribute2(const char* value, size_t size) {
  SetDirty();
  set_has_attribute2();
  if (attribute2_ == &::google::protobuf::internal::kEmptyString) {
    attribute2_ = new ::std::string;
  }
  attribute2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LackeysConfig::mutable_attribute2() {
  SetDirty();
  set_has_attribute2();
  if (attribute2_ == &::google::protobuf::internal::kEmptyString) {
    attribute2_ = new ::std::string;
  }
  return attribute2_;
}
inline ::std::string* LackeysConfig::release_attribute2() {
  SetDirty();
  clear_has_attribute2();
  if (attribute2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attribute2_;
    attribute2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LackeysConfig::set_allocated_attribute2(::std::string* attribute2) {
  SetDirty();
  if (attribute2_ != &::google::protobuf::internal::kEmptyString) {
    delete attribute2_;
  }
  if (attribute2) {
    set_has_attribute2();
    attribute2_ = attribute2;
  } else {
    clear_has_attribute2();
    attribute2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 value = 4;
inline bool LackeysConfig::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LackeysConfig::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LackeysConfig::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LackeysConfig::clear_value() {
  value_ = 0;
  clear_has_value();
  SetDirty();
}
inline ::google::protobuf::int32 LackeysConfig::value() const {
  return value_;
}
inline void LackeysConfig::set_value(::google::protobuf::int32 value) {
  SetDirty();
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// OneKeyEquip

// required int32 id = 1;
inline bool OneKeyEquip::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OneKeyEquip::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OneKeyEquip::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OneKeyEquip::clear_id() {
  id_ = 0;
  clear_has_id();
  SetDirty();
}
inline ::google::protobuf::int32 OneKeyEquip::id() const {
  return id_;
}
inline void OneKeyEquip::set_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_id();
  id_ = value;
}

// required int32 gem0 = 2;
inline bool OneKeyEquip::has_gem0() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OneKeyEquip::set_has_gem0() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OneKeyEquip::clear_has_gem0() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OneKeyEquip::clear_gem0() {
  gem0_ = 0;
  clear_has_gem0();
  SetDirty();
}
inline ::google::protobuf::int32 OneKeyEquip::gem0() const {
  return gem0_;
}
inline void OneKeyEquip::set_gem0(::google::protobuf::int32 value) {
  SetDirty();
  set_has_gem0();
  gem0_ = value;
}

// required int32 gem1 = 3;
inline bool OneKeyEquip::has_gem1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OneKeyEquip::set_has_gem1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OneKeyEquip::clear_has_gem1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OneKeyEquip::clear_gem1() {
  gem1_ = 0;
  clear_has_gem1();
  SetDirty();
}
inline ::google::protobuf::int32 OneKeyEquip::gem1() const {
  return gem1_;
}
inline void OneKeyEquip::set_gem1(::google::protobuf::int32 value) {
  SetDirty();
  set_has_gem1();
  gem1_ = value;
}

// required int32 gem2 = 4;
inline bool OneKeyEquip::has_gem2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OneKeyEquip::set_has_gem2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OneKeyEquip::clear_has_gem2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OneKeyEquip::clear_gem2() {
  gem2_ = 0;
  clear_has_gem2();
  SetDirty();
}
inline ::google::protobuf::int32 OneKeyEquip::gem2() const {
  return gem2_;
}
inline void OneKeyEquip::set_gem2(::google::protobuf::int32 value) {
  SetDirty();
  set_has_gem2();
  gem2_ = value;
}

// -------------------------------------------------------------------

// OneKeyConfig

// required int32 id = 1;
inline bool OneKeyConfig::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OneKeyConfig::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OneKeyConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OneKeyConfig::clear_id() {
  id_ = 0;
  clear_has_id();
  SetDirty();
}
inline ::google::protobuf::int32 OneKeyConfig::id() const {
  return id_;
}
inline void OneKeyConfig::set_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_id();
  id_ = value;
}

// required int32 hero_id = 2;
inline bool OneKeyConfig::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OneKeyConfig::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OneKeyConfig::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OneKeyConfig::clear_hero_id() {
  hero_id_ = 0;
  clear_has_hero_id();
  SetDirty();
}
inline ::google::protobuf::int32 OneKeyConfig::hero_id() const {
  return hero_id_;
}
inline void OneKeyConfig::set_hero_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_hero_id();
  hero_id_ = value;
}

// required string display_name = 3;
inline bool OneKeyConfig::has_display_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OneKeyConfig::set_has_display_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OneKeyConfig::clear_has_display_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OneKeyConfig::clear_display_name() {
  if (display_name_ != &::google::protobuf::internal::kEmptyString) {
    display_name_->clear();
  }
  clear_has_display_name();
  SetDirty();
}
inline const ::std::string& OneKeyConfig::display_name() const {
  return *display_name_;
}
inline void OneKeyConfig::set_display_name(const ::std::string& value) {
  SetDirty();
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::kEmptyString) {
    display_name_ = new ::std::string;
  }
  display_name_->assign(value);
}
inline void OneKeyConfig::set_display_name(const char* value) {
  SetDirty();
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::kEmptyString) {
    display_name_ = new ::std::string;
  }
  display_name_->assign(value);
}
inline void OneKeyConfig::set_display_name(const char* value, size_t size) {
  SetDirty();
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::kEmptyString) {
    display_name_ = new ::std::string;
  }
  display_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OneKeyConfig::mutable_display_name() {
  SetDirty();
  set_has_display_name();
  if (display_name_ == &::google::protobuf::internal::kEmptyString) {
    display_name_ = new ::std::string;
  }
  return display_name_;
}
inline ::std::string* OneKeyConfig::release_display_name() {
  SetDirty();
  clear_has_display_name();
  if (display_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = display_name_;
    display_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OneKeyConfig::set_allocated_display_name(::std::string* display_name) {
  SetDirty();
  if (display_name_ != &::google::protobuf::internal::kEmptyString) {
    delete display_name_;
  }
  if (display_name) {
    set_has_display_name();
    display_name_ = display_name;
  } else {
    clear_has_display_name();
    display_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string icon = 4;
inline bool OneKeyConfig::has_icon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OneKeyConfig::set_has_icon() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OneKeyConfig::clear_has_icon() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OneKeyConfig::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
  SetDirty();
}
inline const ::std::string& OneKeyConfig::icon() const {
  return *icon_;
}
inline void OneKeyConfig::set_icon(const ::std::string& value) {
  SetDirty();
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void OneKeyConfig::set_icon(const char* value) {
  SetDirty();
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void OneKeyConfig::set_icon(const char* value, size_t size) {
  SetDirty();
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OneKeyConfig::mutable_icon() {
  SetDirty();
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* OneKeyConfig::release_icon() {
  SetDirty();
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OneKeyConfig::set_allocated_icon(::std::string* icon) {
  SetDirty();
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 hair = 5;
inline bool OneKeyConfig::has_hair() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OneKeyConfig::set_has_hair() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OneKeyConfig::clear_has_hair() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OneKeyConfig::clear_hair() {
  hair_ = 0;
  clear_has_hair();
  SetDirty();
}
inline ::google::protobuf::int32 OneKeyConfig::hair() const {
  return hair_;
}
inline void OneKeyConfig::set_hair(::google::protobuf::int32 value) {
  SetDirty();
  set_has_hair();
  hair_ = value;
}

// required int32 level = 6;
inline bool OneKeyConfig::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OneKeyConfig::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OneKeyConfig::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OneKeyConfig::clear_level() {
  level_ = 0;
  clear_has_level();
  SetDirty();
}
inline ::google::protobuf::int32 OneKeyConfig::level() const {
  return level_;
}
inline void OneKeyConfig::set_level(::google::protobuf::int32 value) {
  SetDirty();
  set_has_level();
  level_ = value;
}

// required int32 equip_level = 7;
inline bool OneKeyConfig::has_equip_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OneKeyConfig::set_has_equip_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OneKeyConfig::clear_has_equip_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OneKeyConfig::clear_equip_level() {
  equip_level_ = 0;
  clear_has_equip_level();
  SetDirty();
}
inline ::google::protobuf::int32 OneKeyConfig::equip_level() const {
  return equip_level_;
}
inline void OneKeyConfig::set_equip_level(::google::protobuf::int32 value) {
  SetDirty();
  set_has_equip_level();
  equip_level_ = value;
}

// required int32 star = 8;
inline bool OneKeyConfig::has_star() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OneKeyConfig::set_has_star() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OneKeyConfig::clear_has_star() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OneKeyConfig::clear_star() {
  star_ = 0;
  clear_has_star();
  SetDirty();
}
inline ::google::protobuf::int32 OneKeyConfig::star() const {
  return star_;
}
inline void OneKeyConfig::set_star(::google::protobuf::int32 value) {
  SetDirty();
  set_has_star();
  star_ = value;
}

// required int32 color = 9;
inline bool OneKeyConfig::has_color() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OneKeyConfig::set_has_color() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OneKeyConfig::clear_has_color() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OneKeyConfig::clear_color() {
  color_ = 0;
  clear_has_color();
  SetDirty();
}
inline ::google::protobuf::int32 OneKeyConfig::color() const {
  return color_;
}
inline void OneKeyConfig::set_color(::google::protobuf::int32 value) {
  SetDirty();
  set_has_color();
  color_ = value;
}

// required int32 skill_level = 10;
inline bool OneKeyConfig::has_skill_level() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OneKeyConfig::set_has_skill_level() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OneKeyConfig::clear_has_skill_level() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OneKeyConfig::clear_skill_level() {
  skill_level_ = 0;
  clear_has_skill_level();
  SetDirty();
}
inline ::google::protobuf::int32 OneKeyConfig::skill_level() const {
  return skill_level_;
}
inline void OneKeyConfig::set_skill_level(::google::protobuf::int32 value) {
  SetDirty();
  set_has_skill_level();
  skill_level_ = value;
}

// repeated .Config.OneKeyEquip equips = 11;
inline int OneKeyConfig::equips_size() const {
  return equips_.size();
}
inline void OneKeyConfig::clear_equips() {
  equips_.Clear();
  SetDirty();
}
inline const ::Config::OneKeyEquip& OneKeyConfig::equips(int index) const {
  return equips_.Get(index);
}
inline ::Config::OneKeyEquip* OneKeyConfig::mutable_equips(int index) {
  SetDirty();
  return equips_.Mutable(index);
}
inline ::Config::OneKeyEquip* OneKeyConfig::add_equips() {
  SetDirty();
  return equips_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Config::OneKeyEquip >&
OneKeyConfig::equips() const {
  return equips_;
}
inline ::google::protobuf::RepeatedPtrField< ::Config::OneKeyEquip >*
OneKeyConfig::mutable_equips() {
  SetDirty();
  return &equips_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ActorConfig_2eproto__INCLUDED
