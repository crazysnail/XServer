// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LimitMessage.proto

#ifndef PROTOBUF_LimitMessage_2eproto__INCLUDED
#define PROTOBUF_LimitMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Packet {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_LimitMessage_2eproto();
void protobuf_AssignDesc_LimitMessage_2eproto();
void protobuf_ShutdownFile_LimitMessage_2eproto();

class ServerFull;
class TargetSceneIsFull;

// ===================================================================

class ServerFull : public ::google::protobuf::Message {
 public:
  ServerFull();
  virtual ~ServerFull();

  ServerFull(const ServerFull& from);

  inline ServerFull& operator=(const ServerFull& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerFull& default_instance();

  void Swap(ServerFull* other);

  // implements Message ----------------------------------------------

  ServerFull* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerFull& from);
  void MergeFrom(const ServerFull& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 queue_user_count = 1;
  inline bool has_queue_user_count() const;
  inline void clear_queue_user_count();
  static const int kQueueUserCountFieldNumber = 1;
  inline ::google::protobuf::int32 queue_user_count() const;
  inline void set_queue_user_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.ServerFull)
 private:
  inline void set_has_queue_user_count();
  inline void clear_has_queue_user_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 queue_user_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_LimitMessage_2eproto();
  friend void protobuf_AssignDesc_LimitMessage_2eproto();
  friend void protobuf_ShutdownFile_LimitMessage_2eproto();

  void InitAsDefaultInstance();
  static ServerFull* default_instance_;
};
// -------------------------------------------------------------------

class TargetSceneIsFull : public ::google::protobuf::Message {
 public:
  TargetSceneIsFull();
  virtual ~TargetSceneIsFull();

  TargetSceneIsFull(const TargetSceneIsFull& from);

  inline TargetSceneIsFull& operator=(const TargetSceneIsFull& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TargetSceneIsFull& default_instance();

  void Swap(TargetSceneIsFull* other);

  // implements Message ----------------------------------------------

  TargetSceneIsFull* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TargetSceneIsFull& from);
  void MergeFrom(const TargetSceneIsFull& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 scene_id = 1;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 1;
  inline ::google::protobuf::int32 scene_id() const;
  inline void set_scene_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.TargetSceneIsFull)
 private:
  inline void set_has_scene_id();
  inline void clear_has_scene_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 scene_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_LimitMessage_2eproto();
  friend void protobuf_AssignDesc_LimitMessage_2eproto();
  friend void protobuf_ShutdownFile_LimitMessage_2eproto();

  void InitAsDefaultInstance();
  static TargetSceneIsFull* default_instance_;
};
// ===================================================================


// ===================================================================

// ServerFull

// required int32 queue_user_count = 1;
inline bool ServerFull::has_queue_user_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerFull::set_has_queue_user_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerFull::clear_has_queue_user_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerFull::clear_queue_user_count() {
  queue_user_count_ = 0;
  clear_has_queue_user_count();
  SetDirty();
}
inline ::google::protobuf::int32 ServerFull::queue_user_count() const {
  return queue_user_count_;
}
inline void ServerFull::set_queue_user_count(::google::protobuf::int32 value) {
  SetDirty();
  set_has_queue_user_count();
  queue_user_count_ = value;
}

// -------------------------------------------------------------------

// TargetSceneIsFull

// required int32 scene_id = 1;
inline bool TargetSceneIsFull::has_scene_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TargetSceneIsFull::set_has_scene_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TargetSceneIsFull::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TargetSceneIsFull::clear_scene_id() {
  scene_id_ = 0;
  clear_has_scene_id();
  SetDirty();
}
inline ::google::protobuf::int32 TargetSceneIsFull::scene_id() const {
  return scene_id_;
}
inline void TargetSceneIsFull::set_scene_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_scene_id();
  scene_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LimitMessage_2eproto__INCLUDED
