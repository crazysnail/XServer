// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GuildCapturePoint.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GuildCapturePoint.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Packet {

namespace {

const ::google::protobuf::Descriptor* HeroData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroData_reflection_ = NULL;
const ::google::protobuf::Descriptor* StrongHoldData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StrongHoldData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CapturePointDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CapturePointDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildCapturePointDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildCapturePointDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildCaptureBattleDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildCaptureBattleDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildCaptureBattleLogDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildCaptureBattleLogDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildCaptureBattleLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildCaptureBattleLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_GuildCaptureAllBattleLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_GuildCaptureAllBattleLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* CapturePotinBrief_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CapturePotinBrief_reflection_ = NULL;
const ::google::protobuf::Descriptor* CG_AllBattleLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_AllBattleLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* CG_CetCapturePointInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_CetCapturePointInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CG_PullAllCapturePoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_PullAllCapturePoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* CG_ReleaseCapturePoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_ReleaseCapturePoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_AllGuildCapturePoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_AllGuildCapturePoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* CG_PullCapturePoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_PullCapturePoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* CG_UpdateTaxRate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_UpdateTaxRate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CG_CollectGuildTax_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_CollectGuildTax_reflection_ = NULL;
const ::google::protobuf::Descriptor* GC_GuildCapturePoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GC_GuildCapturePoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* CG_StartChallengeCapturePoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_StartChallengeCapturePoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* CG_UpdateStrongHold_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CG_UpdateStrongHold_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GuildCapturePoint_2eproto() {
  protobuf_AddDesc_GuildCapturePoint_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GuildCapturePoint.proto");
  GOOGLE_CHECK(file != NULL);
  HeroData_descriptor_ = file->message_type(0);
  static const int HeroData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroData, player_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroData, actor_config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroData, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroData, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroData, hair_),
  };
  HeroData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroData_descriptor_,
      HeroData::default_instance_,
      HeroData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroData));
  StrongHoldData_descriptor_ = file->message_type(1);
  static const int StrongHoldData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrongHoldData, heros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrongHoldData, score_),
  };
  StrongHoldData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StrongHoldData_descriptor_,
      StrongHoldData::default_instance_,
      StrongHoldData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrongHoldData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrongHoldData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StrongHoldData));
  CapturePointDB_descriptor_ = file->message_type(2);
  static const int CapturePointDB_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapturePointDB, chapter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapturePointDB, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapturePointDB, capture_guild_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapturePointDB, challenger_guild_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapturePointDB, status_change_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapturePointDB, winner_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapturePointDB, log_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapturePointDB, capture_hero_datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapturePointDB, challenger_hero_datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapturePointDB, strong_hold_status_),
  };
  CapturePointDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CapturePointDB_descriptor_,
      CapturePointDB::default_instance_,
      CapturePointDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapturePointDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapturePointDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CapturePointDB));
  GuildCapturePointDB_descriptor_ = file->message_type(3);
  static const int GuildCapturePointDB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCapturePointDB, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCapturePointDB, strong_holds_),
  };
  GuildCapturePointDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildCapturePointDB_descriptor_,
      GuildCapturePointDB::default_instance_,
      GuildCapturePointDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCapturePointDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCapturePointDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildCapturePointDB));
  GuildCaptureBattleDetail_descriptor_ = file->message_type(4);
  static const int GuildCaptureBattleDetail_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCaptureBattleDetail, attacker_heros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCaptureBattleDetail, defender_heros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCaptureBattleDetail, attacker_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCaptureBattleDetail, reply_guid_),
  };
  GuildCaptureBattleDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildCaptureBattleDetail_descriptor_,
      GuildCaptureBattleDetail::default_instance_,
      GuildCaptureBattleDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCaptureBattleDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCaptureBattleDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildCaptureBattleDetail));
  GuildCaptureBattleLogDB_descriptor_ = file->message_type(5);
  static const int GuildCaptureBattleLogDB_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCaptureBattleLogDB, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCaptureBattleLogDB, attacker_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCaptureBattleLogDB, defender_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCaptureBattleLogDB, chapter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCaptureBattleLogDB, battle_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCaptureBattleLogDB, attacker_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCaptureBattleLogDB, finish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCaptureBattleLogDB, details_),
  };
  GuildCaptureBattleLogDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildCaptureBattleLogDB_descriptor_,
      GuildCaptureBattleLogDB::default_instance_,
      GuildCaptureBattleLogDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCaptureBattleLogDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCaptureBattleLogDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildCaptureBattleLogDB));
  GuildCaptureBattleLog_descriptor_ = file->message_type(6);
  static const int GuildCaptureBattleLog_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCaptureBattleLog, attacker_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCaptureBattleLog, attacker_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCaptureBattleLog, attacker_icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCaptureBattleLog, defender_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCaptureBattleLog, defender_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCaptureBattleLog, defender_icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCaptureBattleLog, attacker_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCaptureBattleLog, battle_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCaptureBattleLog, details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCaptureBattleLog, chapter_id_),
  };
  GuildCaptureBattleLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildCaptureBattleLog_descriptor_,
      GuildCaptureBattleLog::default_instance_,
      GuildCaptureBattleLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCaptureBattleLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCaptureBattleLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildCaptureBattleLog));
  GC_GuildCaptureAllBattleLog_descriptor_ = file->message_type(7);
  static const int GC_GuildCaptureAllBattleLog_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_GuildCaptureAllBattleLog, logs_),
  };
  GC_GuildCaptureAllBattleLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_GuildCaptureAllBattleLog_descriptor_,
      GC_GuildCaptureAllBattleLog::default_instance_,
      GC_GuildCaptureAllBattleLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_GuildCaptureAllBattleLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_GuildCaptureAllBattleLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_GuildCaptureAllBattleLog));
  CapturePotinBrief_descriptor_ = file->message_type(8);
  static const int CapturePotinBrief_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapturePotinBrief, chapter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapturePotinBrief, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapturePotinBrief, capture_guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapturePotinBrief, capture_guild_icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapturePotinBrief, capture_guild_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapturePotinBrief, hook_users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapturePotinBrief, tax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapturePotinBrief, tax_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapturePotinBrief, status_change_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapturePotinBrief, capture_hero_datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapturePotinBrief, challenger_hero_datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapturePotinBrief, strong_hold_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapturePotinBrief, challenger_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapturePotinBrief, challenger_icon_),
  };
  CapturePotinBrief_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CapturePotinBrief_descriptor_,
      CapturePotinBrief::default_instance_,
      CapturePotinBrief_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapturePotinBrief, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CapturePotinBrief, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CapturePotinBrief));
  CG_AllBattleLog_descriptor_ = file->message_type(9);
  static const int CG_AllBattleLog_offsets_[1] = {
  };
  CG_AllBattleLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_AllBattleLog_descriptor_,
      CG_AllBattleLog::default_instance_,
      CG_AllBattleLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_AllBattleLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_AllBattleLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_AllBattleLog));
  CG_CetCapturePointInfo_descriptor_ = file->message_type(10);
  static const int CG_CetCapturePointInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_CetCapturePointInfo, chapter_id_),
  };
  CG_CetCapturePointInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_CetCapturePointInfo_descriptor_,
      CG_CetCapturePointInfo::default_instance_,
      CG_CetCapturePointInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_CetCapturePointInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_CetCapturePointInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_CetCapturePointInfo));
  CG_PullAllCapturePoint_descriptor_ = file->message_type(11);
  static const int CG_PullAllCapturePoint_offsets_[1] = {
  };
  CG_PullAllCapturePoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_PullAllCapturePoint_descriptor_,
      CG_PullAllCapturePoint::default_instance_,
      CG_PullAllCapturePoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_PullAllCapturePoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_PullAllCapturePoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_PullAllCapturePoint));
  CG_ReleaseCapturePoint_descriptor_ = file->message_type(12);
  static const int CG_ReleaseCapturePoint_offsets_[1] = {
  };
  CG_ReleaseCapturePoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_ReleaseCapturePoint_descriptor_,
      CG_ReleaseCapturePoint::default_instance_,
      CG_ReleaseCapturePoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_ReleaseCapturePoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_ReleaseCapturePoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_ReleaseCapturePoint));
  GC_AllGuildCapturePoint_descriptor_ = file->message_type(13);
  static const int GC_AllGuildCapturePoint_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_AllGuildCapturePoint, all_points_),
  };
  GC_AllGuildCapturePoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_AllGuildCapturePoint_descriptor_,
      GC_AllGuildCapturePoint::default_instance_,
      GC_AllGuildCapturePoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_AllGuildCapturePoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_AllGuildCapturePoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_AllGuildCapturePoint));
  CG_PullCapturePoint_descriptor_ = file->message_type(14);
  static const int CG_PullCapturePoint_offsets_[1] = {
  };
  CG_PullCapturePoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_PullCapturePoint_descriptor_,
      CG_PullCapturePoint::default_instance_,
      CG_PullCapturePoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_PullCapturePoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_PullCapturePoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_PullCapturePoint));
  CG_UpdateTaxRate_descriptor_ = file->message_type(15);
  static const int CG_UpdateTaxRate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_UpdateTaxRate, rate_),
  };
  CG_UpdateTaxRate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_UpdateTaxRate_descriptor_,
      CG_UpdateTaxRate::default_instance_,
      CG_UpdateTaxRate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_UpdateTaxRate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_UpdateTaxRate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_UpdateTaxRate));
  CG_CollectGuildTax_descriptor_ = file->message_type(16);
  static const int CG_CollectGuildTax_offsets_[1] = {
  };
  CG_CollectGuildTax_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_CollectGuildTax_descriptor_,
      CG_CollectGuildTax::default_instance_,
      CG_CollectGuildTax_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_CollectGuildTax, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_CollectGuildTax, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_CollectGuildTax));
  GC_GuildCapturePoint_descriptor_ = file->message_type(17);
  static const int GC_GuildCapturePoint_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_GuildCapturePoint, chapter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_GuildCapturePoint, strong_holds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_GuildCapturePoint, hook_users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_GuildCapturePoint, tax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_GuildCapturePoint, tax_rate_),
  };
  GC_GuildCapturePoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GC_GuildCapturePoint_descriptor_,
      GC_GuildCapturePoint::default_instance_,
      GC_GuildCapturePoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_GuildCapturePoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GC_GuildCapturePoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GC_GuildCapturePoint));
  CG_StartChallengeCapturePoint_descriptor_ = file->message_type(18);
  static const int CG_StartChallengeCapturePoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_StartChallengeCapturePoint, chapter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_StartChallengeCapturePoint, target_guild_guid_),
  };
  CG_StartChallengeCapturePoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_StartChallengeCapturePoint_descriptor_,
      CG_StartChallengeCapturePoint::default_instance_,
      CG_StartChallengeCapturePoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_StartChallengeCapturePoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_StartChallengeCapturePoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_StartChallengeCapturePoint));
  CG_UpdateStrongHold_descriptor_ = file->message_type(19);
  static const int CG_UpdateStrongHold_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_UpdateStrongHold, strong_holds_),
  };
  CG_UpdateStrongHold_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CG_UpdateStrongHold_descriptor_,
      CG_UpdateStrongHold::default_instance_,
      CG_UpdateStrongHold_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_UpdateStrongHold, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CG_UpdateStrongHold, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CG_UpdateStrongHold));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GuildCapturePoint_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroData_descriptor_, &HeroData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StrongHoldData_descriptor_, &StrongHoldData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CapturePointDB_descriptor_, &CapturePointDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildCapturePointDB_descriptor_, &GuildCapturePointDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildCaptureBattleDetail_descriptor_, &GuildCaptureBattleDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildCaptureBattleLogDB_descriptor_, &GuildCaptureBattleLogDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildCaptureBattleLog_descriptor_, &GuildCaptureBattleLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_GuildCaptureAllBattleLog_descriptor_, &GC_GuildCaptureAllBattleLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CapturePotinBrief_descriptor_, &CapturePotinBrief::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_AllBattleLog_descriptor_, &CG_AllBattleLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_CetCapturePointInfo_descriptor_, &CG_CetCapturePointInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_PullAllCapturePoint_descriptor_, &CG_PullAllCapturePoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_ReleaseCapturePoint_descriptor_, &CG_ReleaseCapturePoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_AllGuildCapturePoint_descriptor_, &GC_AllGuildCapturePoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_PullCapturePoint_descriptor_, &CG_PullCapturePoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_UpdateTaxRate_descriptor_, &CG_UpdateTaxRate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_CollectGuildTax_descriptor_, &CG_CollectGuildTax::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GC_GuildCapturePoint_descriptor_, &GC_GuildCapturePoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_StartChallengeCapturePoint_descriptor_, &CG_StartChallengeCapturePoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CG_UpdateStrongHold_descriptor_, &CG_UpdateStrongHold::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GuildCapturePoint_2eproto() {
  delete HeroData::default_instance_;
  delete HeroData_reflection_;
  delete StrongHoldData::default_instance_;
  delete StrongHoldData_reflection_;
  delete CapturePointDB::default_instance_;
  delete CapturePointDB_reflection_;
  delete GuildCapturePointDB::default_instance_;
  delete GuildCapturePointDB_reflection_;
  delete GuildCaptureBattleDetail::default_instance_;
  delete GuildCaptureBattleDetail_reflection_;
  delete GuildCaptureBattleLogDB::default_instance_;
  delete GuildCaptureBattleLogDB_reflection_;
  delete GuildCaptureBattleLog::default_instance_;
  delete GuildCaptureBattleLog_reflection_;
  delete GC_GuildCaptureAllBattleLog::default_instance_;
  delete GC_GuildCaptureAllBattleLog_reflection_;
  delete CapturePotinBrief::default_instance_;
  delete CapturePotinBrief_reflection_;
  delete CG_AllBattleLog::default_instance_;
  delete CG_AllBattleLog_reflection_;
  delete CG_CetCapturePointInfo::default_instance_;
  delete CG_CetCapturePointInfo_reflection_;
  delete CG_PullAllCapturePoint::default_instance_;
  delete CG_PullAllCapturePoint_reflection_;
  delete CG_ReleaseCapturePoint::default_instance_;
  delete CG_ReleaseCapturePoint_reflection_;
  delete GC_AllGuildCapturePoint::default_instance_;
  delete GC_AllGuildCapturePoint_reflection_;
  delete CG_PullCapturePoint::default_instance_;
  delete CG_PullCapturePoint_reflection_;
  delete CG_UpdateTaxRate::default_instance_;
  delete CG_UpdateTaxRate_reflection_;
  delete CG_CollectGuildTax::default_instance_;
  delete CG_CollectGuildTax_reflection_;
  delete GC_GuildCapturePoint::default_instance_;
  delete GC_GuildCapturePoint_reflection_;
  delete CG_StartChallengeCapturePoint::default_instance_;
  delete CG_StartChallengeCapturePoint_reflection_;
  delete CG_UpdateStrongHold::default_instance_;
  delete CG_UpdateStrongHold_reflection_;
}

void protobuf_AddDesc_GuildCapturePoint_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Packet::protobuf_AddDesc_ProtoBufOption_2eproto();
  ::Packet::protobuf_AddDesc_AllPacketEnum_2eproto();
  ::Packet::protobuf_AddDesc_BattleReply_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027GuildCapturePoint.proto\022\006Packet\032\024Proto"
    "BufOption.proto\032\023AllPacketEnum.proto\032\021Ba"
    "ttleReply.proto\"\231\001\n\010HeroData\022\023\n\013player_g"
    "uid\030\001 \002(\006\022\027\n\017actor_config_id\030\002 \002(\005\022\r\n\005le"
    "vel\030\003 \002(\005\022!\n\005color\030\004 \002(\0162\022.Packet.ActorC"
    "olor\022\037\n\004star\030\005 \002(\0162\021.Packet.ActorStar\022\014\n"
    "\004hair\030\006 \002(\005\"F\n\016StrongHoldData\022%\n\005heros\030\001"
    " \003(\0132\020.Packet.HeroDataB\004\300\363\030\005\022\r\n\005score\030\002 "
    "\002(\005\"\366\002\n\016CapturePointDB\022\030\n\nchapter_id\030\001 \002"
    "(\005B\004\310\363\030\001\022%\n\006status\030\002 \002(\0162\025.Packet.Captur"
    "eStatus\022\032\n\022capture_guild_guid\030\005 \002(\006\022\035\n\025c"
    "hallenger_guild_guid\030\006 \002(\006\022\032\n\022status_cha"
    "nge_time\030\007 \002(\005\022\023\n\013winner_guid\030\010 \002(\006\022\020\n\010l"
    "og_guid\030\t \002(\006\0222\n\022capture_hero_datas\030\n \003("
    "\0132\020.Packet.HeroDataB\004\300\363\030\005\0225\n\025challenger_"
    "hero_datas\030\013 \003(\0132\020.Packet.HeroDataB\004\300\363\030\005"
    "\022:\n\022strong_hold_status\030\014 \003(\0162\030.Packet.St"
    "rongHoldStatusB\004\300\363\030\005\"W\n\023GuildCapturePoin"
    "tDB\022\014\n\004guid\030\001 \002(\006\0222\n\014strong_holds\030\002 \003(\0132"
    "\026.Packet.StrongHoldDataB\004\300\363\030\005\"\244\001\n\030GuildC"
    "aptureBattleDetail\022.\n\016attacker_heros\030\001 \003"
    "(\0132\020.Packet.HeroDataB\004\300\363\030\005\022.\n\016defender_h"
    "eros\030\002 \003(\0132\020.Packet.HeroDataB\004\300\363\030\005\022\024\n\014at"
    "tacker_win\030\003 \002(\010\022\022\n\nreply_guid\030\004 \002(\006\"\335\001\n"
    "\027GuildCaptureBattleLogDB\022\014\n\004guid\030\001 \002(\006\022\025"
    "\n\rattacker_guid\030\002 \002(\006\022\025\n\rdefender_guid\030\003"
    " \002(\006\022\022\n\nchapter_id\030\004 \002(\005\022\023\n\013battle_time\030"
    "\005 \002(\005\022\024\n\014attacker_win\030\006 \002(\010\022\016\n\006finish\030\007 "
    "\002(\010\0227\n\007details\030\010 \003(\0132 .Packet.GuildCaptu"
    "reBattleDetailB\004\300\363\030\005\"\223\002\n\025GuildCaptureBat"
    "tleLog\022\025\n\rattacker_guid\030\001 \002(\006\022\025\n\rattacke"
    "r_name\030\002 \002(\t\022\025\n\rattacker_icon\030\003 \002(\t\022\025\n\rd"
    "efender_guid\030\004 \002(\006\022\025\n\rdefender_name\030\005 \002("
    "\t\022\025\n\rdefender_icon\030\006 \002(\t\022\024\n\014attacker_win"
    "\030\007 \002(\010\022\023\n\013battle_time\030\010 \002(\005\0221\n\007details\030\t"
    " \003(\0132 .Packet.GuildCaptureBattleDetail\022\022"
    "\n\nchapter_id\030\n \002(\005\"J\n\033GC_GuildCaptureAll"
    "BattleLog\022+\n\004logs\030\001 \003(\0132\035.Packet.GuildCa"
    "ptureBattleLog\"\270\003\n\021CapturePotinBrief\022\022\n\n"
    "chapter_id\030\001 \002(\005\022%\n\006status\030\002 \002(\0162\025.Packe"
    "t.CaptureStatus\022\032\n\022capture_guild_name\030\003 "
    "\002(\t\022\032\n\022capture_guild_icon\030\004 \002(\t\022\032\n\022captu"
    "re_guild_guid\030\005 \002(\006\022\022\n\nhook_users\030\006 \002(\005\022"
    "\013\n\003tax\030\007 \002(\005\022\020\n\010tax_rate\030\010 \002(\005\022\032\n\022status"
    "_change_time\030\t \002(\005\022,\n\022capture_hero_datas"
    "\030\n \003(\0132\020.Packet.HeroData\022/\n\025challenger_h"
    "ero_datas\030\013 \003(\0132\020.Packet.HeroData\0224\n\022str"
    "ong_hold_status\030\014 \003(\0162\030.Packet.StrongHol"
    "dStatus\022\027\n\017challenger_name\030\r \001(\t\022\027\n\017chal"
    "lenger_icon\030\016 \001(\t\"\021\n\017CG_AllBattleLog\",\n\026"
    "CG_CetCapturePointInfo\022\022\n\nchapter_id\030\001 \002"
    "(\005\"\030\n\026CG_PullAllCapturePoint\"\030\n\026CG_Relea"
    "seCapturePoint\"H\n\027GC_AllGuildCapturePoin"
    "t\022-\n\nall_points\030\001 \003(\0132\031.Packet.CapturePo"
    "tinBrief\"\025\n\023CG_PullCapturePoint\" \n\020CG_Up"
    "dateTaxRate\022\014\n\004rate\030\001 \002(\005\"\024\n\022CG_CollectG"
    "uildTax\"\213\001\n\024GC_GuildCapturePoint\022\022\n\nchap"
    "ter_id\030\001 \002(\005\022,\n\014strong_holds\030\002 \003(\0132\026.Pac"
    "ket.StrongHoldData\022\022\n\nhook_users\030\003 \002(\005\022\013"
    "\n\003tax\030\004 \002(\005\022\020\n\010tax_rate\030\005 \002(\005\"N\n\035CG_Star"
    "tChallengeCapturePoint\022\022\n\nchapter_id\030\001 \002"
    "(\005\022\031\n\021target_guild_guid\030\002 \002(\005\"C\n\023CG_Upda"
    "teStrongHold\022,\n\014strong_holds\030\001 \003(\0132\026.Pac"
    "ket.StrongHoldData", 2538);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GuildCapturePoint.proto", &protobuf_RegisterTypes);
  HeroData::default_instance_ = new HeroData();
  StrongHoldData::default_instance_ = new StrongHoldData();
  CapturePointDB::default_instance_ = new CapturePointDB();
  GuildCapturePointDB::default_instance_ = new GuildCapturePointDB();
  GuildCaptureBattleDetail::default_instance_ = new GuildCaptureBattleDetail();
  GuildCaptureBattleLogDB::default_instance_ = new GuildCaptureBattleLogDB();
  GuildCaptureBattleLog::default_instance_ = new GuildCaptureBattleLog();
  GC_GuildCaptureAllBattleLog::default_instance_ = new GC_GuildCaptureAllBattleLog();
  CapturePotinBrief::default_instance_ = new CapturePotinBrief();
  CG_AllBattleLog::default_instance_ = new CG_AllBattleLog();
  CG_CetCapturePointInfo::default_instance_ = new CG_CetCapturePointInfo();
  CG_PullAllCapturePoint::default_instance_ = new CG_PullAllCapturePoint();
  CG_ReleaseCapturePoint::default_instance_ = new CG_ReleaseCapturePoint();
  GC_AllGuildCapturePoint::default_instance_ = new GC_AllGuildCapturePoint();
  CG_PullCapturePoint::default_instance_ = new CG_PullCapturePoint();
  CG_UpdateTaxRate::default_instance_ = new CG_UpdateTaxRate();
  CG_CollectGuildTax::default_instance_ = new CG_CollectGuildTax();
  GC_GuildCapturePoint::default_instance_ = new GC_GuildCapturePoint();
  CG_StartChallengeCapturePoint::default_instance_ = new CG_StartChallengeCapturePoint();
  CG_UpdateStrongHold::default_instance_ = new CG_UpdateStrongHold();
  HeroData::default_instance_->InitAsDefaultInstance();
  StrongHoldData::default_instance_->InitAsDefaultInstance();
  CapturePointDB::default_instance_->InitAsDefaultInstance();
  GuildCapturePointDB::default_instance_->InitAsDefaultInstance();
  GuildCaptureBattleDetail::default_instance_->InitAsDefaultInstance();
  GuildCaptureBattleLogDB::default_instance_->InitAsDefaultInstance();
  GuildCaptureBattleLog::default_instance_->InitAsDefaultInstance();
  GC_GuildCaptureAllBattleLog::default_instance_->InitAsDefaultInstance();
  CapturePotinBrief::default_instance_->InitAsDefaultInstance();
  CG_AllBattleLog::default_instance_->InitAsDefaultInstance();
  CG_CetCapturePointInfo::default_instance_->InitAsDefaultInstance();
  CG_PullAllCapturePoint::default_instance_->InitAsDefaultInstance();
  CG_ReleaseCapturePoint::default_instance_->InitAsDefaultInstance();
  GC_AllGuildCapturePoint::default_instance_->InitAsDefaultInstance();
  CG_PullCapturePoint::default_instance_->InitAsDefaultInstance();
  CG_UpdateTaxRate::default_instance_->InitAsDefaultInstance();
  CG_CollectGuildTax::default_instance_->InitAsDefaultInstance();
  GC_GuildCapturePoint::default_instance_->InitAsDefaultInstance();
  CG_StartChallengeCapturePoint::default_instance_->InitAsDefaultInstance();
  CG_UpdateStrongHold::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GuildCapturePoint_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GuildCapturePoint_2eproto {
  StaticDescriptorInitializer_GuildCapturePoint_2eproto() {
    protobuf_AddDesc_GuildCapturePoint_2eproto();
  }
} static_descriptor_initializer_GuildCapturePoint_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int HeroData::kPlayerGuidFieldNumber;
const int HeroData::kActorConfigIdFieldNumber;
const int HeroData::kLevelFieldNumber;
const int HeroData::kColorFieldNumber;
const int HeroData::kStarFieldNumber;
const int HeroData::kHairFieldNumber;
#endif  // !_MSC_VER

HeroData::HeroData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroData::InitAsDefaultInstance() {
}

HeroData::HeroData(const HeroData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroData::SharedCtor() {
  _cached_size_ = 0;
  player_guid_ = GOOGLE_ULONGLONG(0);
  actor_config_id_ = 0;
  level_ = 0;
  color_ = 1;
  star_ = 1;
  hair_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroData::~HeroData() {
  SharedDtor();
}

void HeroData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroData_descriptor_;
}

const HeroData& HeroData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCapturePoint_2eproto();
  return *default_instance_;
}

HeroData* HeroData::default_instance_ = NULL;

HeroData* HeroData::New() const {
  return new HeroData;
}

void HeroData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_guid_ = GOOGLE_ULONGLONG(0);
    actor_config_id_ = 0;
    level_ = 0;
    color_ = 1;
    star_ = 1;
    hair_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool HeroData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 player_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &player_guid_)));
          set_has_player_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_actor_config_id;
        break;
      }

      // required int32 actor_config_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actor_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actor_config_id_)));
          set_has_actor_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_color;
        break;
      }

      // required .Packet.ActorColor color = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::ActorColor_IsValid(value)) {
            set_color(static_cast< ::Packet::ActorColor >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_star;
        break;
      }

      // required .Packet.ActorStar star = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::ActorStar_IsValid(value)) {
            set_star(static_cast< ::Packet::ActorStar >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hair;
        break;
      }

      // required int32 hair = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hair_)));
          set_has_hair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void HeroData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 player_guid = 1;
  if (has_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->player_guid(), output);
  }

  // required int32 actor_config_id = 2;
  if (has_actor_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->actor_config_id(), output);
  }

  // required int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // required .Packet.ActorColor color = 4;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->color(), output);
  }

  // required .Packet.ActorStar star = 5;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->star(), output);
  }

  // required int32 hair = 6;
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hair(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 player_guid = 1;
  if (has_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->player_guid(), target);
  }

  // required int32 actor_config_id = 2;
  if (has_actor_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->actor_config_id(), target);
  }

  // required int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // required .Packet.ActorColor color = 4;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->color(), target);
  }

  // required .Packet.ActorStar star = 5;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->star(), target);
  }

  // required int32 hair = 6;
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hair(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 player_guid = 1;
    if (has_player_guid()) {
      total_size += 1 + 8;
    }

    // required int32 actor_config_id = 2;
    if (has_actor_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actor_config_id());
    }

    // required int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required .Packet.ActorColor color = 4;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
    }

    // required .Packet.ActorStar star = 5;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->star());
    }

    // required int32 hair = 6;
    if (has_hair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hair());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void HeroData::MergeFrom(const HeroData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_guid()) {
      set_player_guid(from.player_guid());
    }
    if (from.has_actor_config_id()) {
      set_actor_config_id(from.actor_config_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_hair()) {
      set_hair(from.hair());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void HeroData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void HeroData::CopyFrom(const HeroData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool HeroData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void HeroData::SetInitialized() {
  _has_bits_[0] |= 0x0000003f;

  return;
}

void HeroData::Swap(HeroData* other) {
  if (other != this) {
    std::swap(player_guid_, other->player_guid_);
    std::swap(actor_config_id_, other->actor_config_id_);
    std::swap(level_, other->level_);
    std::swap(color_, other->color_);
    std::swap(star_, other->star_);
    std::swap(hair_, other->hair_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata HeroData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroData_descriptor_;
  metadata.reflection = HeroData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StrongHoldData::kHerosFieldNumber;
const int StrongHoldData::kScoreFieldNumber;
#endif  // !_MSC_VER

StrongHoldData::StrongHoldData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StrongHoldData::InitAsDefaultInstance() {
}

StrongHoldData::StrongHoldData(const StrongHoldData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StrongHoldData::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StrongHoldData::~StrongHoldData() {
  SharedDtor();
}

void StrongHoldData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StrongHoldData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StrongHoldData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StrongHoldData_descriptor_;
}

const StrongHoldData& StrongHoldData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCapturePoint_2eproto();
  return *default_instance_;
}

StrongHoldData* StrongHoldData::default_instance_ = NULL;

StrongHoldData* StrongHoldData::New() const {
  return new StrongHoldData;
}

void StrongHoldData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    score_ = 0;
  }
  heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool StrongHoldData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.HeroData heros = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_heros;
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // required int32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void StrongHoldData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.HeroData heros = 1;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->heros(i), output);
  }

  // required int32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StrongHoldData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.HeroData heros = 1;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->heros(i), target);
  }

  // required int32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StrongHoldData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  // repeated .Packet.HeroData heros = 1;
  total_size += 1 * this->heros_size();
  for (int i = 0; i < this->heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heros(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StrongHoldData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StrongHoldData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StrongHoldData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void StrongHoldData::MergeFrom(const StrongHoldData& from) {
  GOOGLE_CHECK_NE(&from, this);
  heros_.MergeFrom(from.heros_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void StrongHoldData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void StrongHoldData::CopyFrom(const StrongHoldData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool StrongHoldData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < heros_size(); i++) {
    if (!this->heros(i).IsInitialized()) return false;
  }
  return true;
}

void StrongHoldData::SetInitialized() {
  _has_bits_[0] |= 0x00000002;

  for (int i = 0; i < heros_size(); i++) {
    this->mutable_heros(i)->SetInitialized();
  }
  return;
}

void StrongHoldData::Swap(StrongHoldData* other) {
  if (other != this) {
    heros_.Swap(&other->heros_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata StrongHoldData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StrongHoldData_descriptor_;
  metadata.reflection = StrongHoldData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CapturePointDB::kChapterIdFieldNumber;
const int CapturePointDB::kStatusFieldNumber;
const int CapturePointDB::kCaptureGuildGuidFieldNumber;
const int CapturePointDB::kChallengerGuildGuidFieldNumber;
const int CapturePointDB::kStatusChangeTimeFieldNumber;
const int CapturePointDB::kWinnerGuidFieldNumber;
const int CapturePointDB::kLogGuidFieldNumber;
const int CapturePointDB::kCaptureHeroDatasFieldNumber;
const int CapturePointDB::kChallengerHeroDatasFieldNumber;
const int CapturePointDB::kStrongHoldStatusFieldNumber;
#endif  // !_MSC_VER

CapturePointDB::CapturePointDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CapturePointDB::InitAsDefaultInstance() {
}

CapturePointDB::CapturePointDB(const CapturePointDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CapturePointDB::SharedCtor() {
  _cached_size_ = 0;
  chapter_id_ = 0;
  status_ = 0;
  capture_guild_guid_ = GOOGLE_ULONGLONG(0);
  challenger_guild_guid_ = GOOGLE_ULONGLONG(0);
  status_change_time_ = 0;
  winner_guid_ = GOOGLE_ULONGLONG(0);
  log_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CapturePointDB::~CapturePointDB() {
  SharedDtor();
}

void CapturePointDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CapturePointDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CapturePointDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CapturePointDB_descriptor_;
}

const CapturePointDB& CapturePointDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCapturePoint_2eproto();
  return *default_instance_;
}

CapturePointDB* CapturePointDB::default_instance_ = NULL;

CapturePointDB* CapturePointDB::New() const {
  return new CapturePointDB;
}

void CapturePointDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chapter_id_ = 0;
    status_ = 0;
    capture_guild_guid_ = GOOGLE_ULONGLONG(0);
    challenger_guild_guid_ = GOOGLE_ULONGLONG(0);
    status_change_time_ = 0;
    winner_guid_ = GOOGLE_ULONGLONG(0);
    log_guid_ = GOOGLE_ULONGLONG(0);
  }
  capture_hero_datas_.Clear();
  challenger_hero_datas_.Clear();
  strong_hold_status_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool CapturePointDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chapter_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapter_id_)));
          set_has_chapter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .Packet.CaptureStatus status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::CaptureStatus_IsValid(value)) {
            set_status(static_cast< ::Packet::CaptureStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_capture_guild_guid;
        break;
      }

      // required fixed64 capture_guild_guid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_capture_guild_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &capture_guild_guid_)));
          set_has_capture_guild_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_challenger_guild_guid;
        break;
      }

      // required fixed64 challenger_guild_guid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_challenger_guild_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &challenger_guild_guid_)));
          set_has_challenger_guild_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_status_change_time;
        break;
      }

      // required int32 status_change_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status_change_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_change_time_)));
          set_has_status_change_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_winner_guid;
        break;
      }

      // required fixed64 winner_guid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_winner_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &winner_guid_)));
          set_has_winner_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_log_guid;
        break;
      }

      // required fixed64 log_guid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_log_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &log_guid_)));
          set_has_log_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_capture_hero_datas;
        break;
      }

      // repeated .Packet.HeroData capture_hero_datas = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_capture_hero_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_capture_hero_datas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_capture_hero_datas;
        if (input->ExpectTag(90)) goto parse_challenger_hero_datas;
        break;
      }

      // repeated .Packet.HeroData challenger_hero_datas = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_challenger_hero_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_challenger_hero_datas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_challenger_hero_datas;
        if (input->ExpectTag(96)) goto parse_strong_hold_status;
        break;
      }

      // repeated .Packet.StrongHoldStatus strong_hold_status = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strong_hold_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::StrongHoldStatus_IsValid(value)) {
            add_strong_hold_status(static_cast< ::Packet::StrongHoldStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::Packet::StrongHoldStatus_IsValid,
                 this->mutable_strong_hold_status())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_strong_hold_status;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void CapturePointDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 chapter_id = 1;
  if (has_chapter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chapter_id(), output);
  }

  // required .Packet.CaptureStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // required fixed64 capture_guild_guid = 5;
  if (has_capture_guild_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->capture_guild_guid(), output);
  }

  // required fixed64 challenger_guild_guid = 6;
  if (has_challenger_guild_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->challenger_guild_guid(), output);
  }

  // required int32 status_change_time = 7;
  if (has_status_change_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->status_change_time(), output);
  }

  // required fixed64 winner_guid = 8;
  if (has_winner_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->winner_guid(), output);
  }

  // required fixed64 log_guid = 9;
  if (has_log_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(9, this->log_guid(), output);
  }

  // repeated .Packet.HeroData capture_hero_datas = 10;
  for (int i = 0; i < this->capture_hero_datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->capture_hero_datas(i), output);
  }

  // repeated .Packet.HeroData challenger_hero_datas = 11;
  for (int i = 0; i < this->challenger_hero_datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->challenger_hero_datas(i), output);
  }

  // repeated .Packet.StrongHoldStatus strong_hold_status = 12;
  for (int i = 0; i < this->strong_hold_status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->strong_hold_status(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CapturePointDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 chapter_id = 1;
  if (has_chapter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chapter_id(), target);
  }

  // required .Packet.CaptureStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // required fixed64 capture_guild_guid = 5;
  if (has_capture_guild_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->capture_guild_guid(), target);
  }

  // required fixed64 challenger_guild_guid = 6;
  if (has_challenger_guild_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->challenger_guild_guid(), target);
  }

  // required int32 status_change_time = 7;
  if (has_status_change_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->status_change_time(), target);
  }

  // required fixed64 winner_guid = 8;
  if (has_winner_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(8, this->winner_guid(), target);
  }

  // required fixed64 log_guid = 9;
  if (has_log_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(9, this->log_guid(), target);
  }

  // repeated .Packet.HeroData capture_hero_datas = 10;
  for (int i = 0; i < this->capture_hero_datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->capture_hero_datas(i), target);
  }

  // repeated .Packet.HeroData challenger_hero_datas = 11;
  for (int i = 0; i < this->challenger_hero_datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->challenger_hero_datas(i), target);
  }

  // repeated .Packet.StrongHoldStatus strong_hold_status = 12;
  for (int i = 0; i < this->strong_hold_status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->strong_hold_status(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CapturePointDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 chapter_id = 1;
    if (has_chapter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapter_id());
    }

    // required .Packet.CaptureStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required fixed64 capture_guild_guid = 5;
    if (has_capture_guild_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 challenger_guild_guid = 6;
    if (has_challenger_guild_guid()) {
      total_size += 1 + 8;
    }

    // required int32 status_change_time = 7;
    if (has_status_change_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status_change_time());
    }

    // required fixed64 winner_guid = 8;
    if (has_winner_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 log_guid = 9;
    if (has_log_guid()) {
      total_size += 1 + 8;
    }

  }
  // repeated .Packet.HeroData capture_hero_datas = 10;
  total_size += 1 * this->capture_hero_datas_size();
  for (int i = 0; i < this->capture_hero_datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->capture_hero_datas(i));
  }

  // repeated .Packet.HeroData challenger_hero_datas = 11;
  total_size += 1 * this->challenger_hero_datas_size();
  for (int i = 0; i < this->challenger_hero_datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->challenger_hero_datas(i));
  }

  // repeated .Packet.StrongHoldStatus strong_hold_status = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->strong_hold_status_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->strong_hold_status(i));
    }
    total_size += 1 * this->strong_hold_status_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CapturePointDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CapturePointDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CapturePointDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void CapturePointDB::MergeFrom(const CapturePointDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  capture_hero_datas_.MergeFrom(from.capture_hero_datas_);
  challenger_hero_datas_.MergeFrom(from.challenger_hero_datas_);
  strong_hold_status_.MergeFrom(from.strong_hold_status_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapter_id()) {
      set_chapter_id(from.chapter_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_capture_guild_guid()) {
      set_capture_guild_guid(from.capture_guild_guid());
    }
    if (from.has_challenger_guild_guid()) {
      set_challenger_guild_guid(from.challenger_guild_guid());
    }
    if (from.has_status_change_time()) {
      set_status_change_time(from.status_change_time());
    }
    if (from.has_winner_guid()) {
      set_winner_guid(from.winner_guid());
    }
    if (from.has_log_guid()) {
      set_log_guid(from.log_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void CapturePointDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void CapturePointDB::CopyFrom(const CapturePointDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool CapturePointDB::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  for (int i = 0; i < capture_hero_datas_size(); i++) {
    if (!this->capture_hero_datas(i).IsInitialized()) return false;
  }
  for (int i = 0; i < challenger_hero_datas_size(); i++) {
    if (!this->challenger_hero_datas(i).IsInitialized()) return false;
  }
  return true;
}

void CapturePointDB::SetInitialized() {
  _has_bits_[0] |= 0x0000007f;

  for (int i = 0; i < capture_hero_datas_size(); i++) {
    this->mutable_capture_hero_datas(i)->SetInitialized();
  }
  for (int i = 0; i < challenger_hero_datas_size(); i++) {
    this->mutable_challenger_hero_datas(i)->SetInitialized();
  }
  return;
}

void CapturePointDB::Swap(CapturePointDB* other) {
  if (other != this) {
    std::swap(chapter_id_, other->chapter_id_);
    std::swap(status_, other->status_);
    std::swap(capture_guild_guid_, other->capture_guild_guid_);
    std::swap(challenger_guild_guid_, other->challenger_guild_guid_);
    std::swap(status_change_time_, other->status_change_time_);
    std::swap(winner_guid_, other->winner_guid_);
    std::swap(log_guid_, other->log_guid_);
    capture_hero_datas_.Swap(&other->capture_hero_datas_);
    challenger_hero_datas_.Swap(&other->challenger_hero_datas_);
    strong_hold_status_.Swap(&other->strong_hold_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata CapturePointDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CapturePointDB_descriptor_;
  metadata.reflection = CapturePointDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildCapturePointDB::kGuidFieldNumber;
const int GuildCapturePointDB::kStrongHoldsFieldNumber;
#endif  // !_MSC_VER

GuildCapturePointDB::GuildCapturePointDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildCapturePointDB::InitAsDefaultInstance() {
}

GuildCapturePointDB::GuildCapturePointDB(const GuildCapturePointDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildCapturePointDB::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildCapturePointDB::~GuildCapturePointDB() {
  SharedDtor();
}

void GuildCapturePointDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildCapturePointDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildCapturePointDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildCapturePointDB_descriptor_;
}

const GuildCapturePointDB& GuildCapturePointDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCapturePoint_2eproto();
  return *default_instance_;
}

GuildCapturePointDB* GuildCapturePointDB::default_instance_ = NULL;

GuildCapturePointDB* GuildCapturePointDB::New() const {
  return new GuildCapturePointDB;
}

void GuildCapturePointDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
  }
  strong_holds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildCapturePointDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strong_holds;
        break;
      }

      // repeated .Packet.StrongHoldData strong_holds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strong_holds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_strong_holds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strong_holds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildCapturePointDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // repeated .Packet.StrongHoldData strong_holds = 2;
  for (int i = 0; i < this->strong_holds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->strong_holds(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildCapturePointDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // repeated .Packet.StrongHoldData strong_holds = 2;
  for (int i = 0; i < this->strong_holds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->strong_holds(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildCapturePointDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

  }
  // repeated .Packet.StrongHoldData strong_holds = 2;
  total_size += 1 * this->strong_holds_size();
  for (int i = 0; i < this->strong_holds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->strong_holds(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildCapturePointDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildCapturePointDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildCapturePointDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildCapturePointDB::MergeFrom(const GuildCapturePointDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  strong_holds_.MergeFrom(from.strong_holds_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildCapturePointDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildCapturePointDB::CopyFrom(const GuildCapturePointDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildCapturePointDB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < strong_holds_size(); i++) {
    if (!this->strong_holds(i).IsInitialized()) return false;
  }
  return true;
}

void GuildCapturePointDB::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  for (int i = 0; i < strong_holds_size(); i++) {
    this->mutable_strong_holds(i)->SetInitialized();
  }
  return;
}

void GuildCapturePointDB::Swap(GuildCapturePointDB* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    strong_holds_.Swap(&other->strong_holds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildCapturePointDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildCapturePointDB_descriptor_;
  metadata.reflection = GuildCapturePointDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildCaptureBattleDetail::kAttackerHerosFieldNumber;
const int GuildCaptureBattleDetail::kDefenderHerosFieldNumber;
const int GuildCaptureBattleDetail::kAttackerWinFieldNumber;
const int GuildCaptureBattleDetail::kReplyGuidFieldNumber;
#endif  // !_MSC_VER

GuildCaptureBattleDetail::GuildCaptureBattleDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildCaptureBattleDetail::InitAsDefaultInstance() {
}

GuildCaptureBattleDetail::GuildCaptureBattleDetail(const GuildCaptureBattleDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildCaptureBattleDetail::SharedCtor() {
  _cached_size_ = 0;
  attacker_win_ = false;
  reply_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildCaptureBattleDetail::~GuildCaptureBattleDetail() {
  SharedDtor();
}

void GuildCaptureBattleDetail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildCaptureBattleDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildCaptureBattleDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildCaptureBattleDetail_descriptor_;
}

const GuildCaptureBattleDetail& GuildCaptureBattleDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCapturePoint_2eproto();
  return *default_instance_;
}

GuildCaptureBattleDetail* GuildCaptureBattleDetail::default_instance_ = NULL;

GuildCaptureBattleDetail* GuildCaptureBattleDetail::New() const {
  return new GuildCaptureBattleDetail;
}

void GuildCaptureBattleDetail::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    attacker_win_ = false;
    reply_guid_ = GOOGLE_ULONGLONG(0);
  }
  attacker_heros_.Clear();
  defender_heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildCaptureBattleDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.HeroData attacker_heros = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attacker_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attacker_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_attacker_heros;
        if (input->ExpectTag(18)) goto parse_defender_heros;
        break;
      }

      // repeated .Packet.HeroData defender_heros = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defender_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_defender_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_defender_heros;
        if (input->ExpectTag(24)) goto parse_attacker_win;
        break;
      }

      // required bool attacker_win = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attacker_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &attacker_win_)));
          set_has_attacker_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_reply_guid;
        break;
      }

      // required fixed64 reply_guid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_reply_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &reply_guid_)));
          set_has_reply_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildCaptureBattleDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.HeroData attacker_heros = 1;
  for (int i = 0; i < this->attacker_heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attacker_heros(i), output);
  }

  // repeated .Packet.HeroData defender_heros = 2;
  for (int i = 0; i < this->defender_heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->defender_heros(i), output);
  }

  // required bool attacker_win = 3;
  if (has_attacker_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->attacker_win(), output);
  }

  // required fixed64 reply_guid = 4;
  if (has_reply_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->reply_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildCaptureBattleDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.HeroData attacker_heros = 1;
  for (int i = 0; i < this->attacker_heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attacker_heros(i), target);
  }

  // repeated .Packet.HeroData defender_heros = 2;
  for (int i = 0; i < this->defender_heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->defender_heros(i), target);
  }

  // required bool attacker_win = 3;
  if (has_attacker_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->attacker_win(), target);
  }

  // required fixed64 reply_guid = 4;
  if (has_reply_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->reply_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildCaptureBattleDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required bool attacker_win = 3;
    if (has_attacker_win()) {
      total_size += 1 + 1;
    }

    // required fixed64 reply_guid = 4;
    if (has_reply_guid()) {
      total_size += 1 + 8;
    }

  }
  // repeated .Packet.HeroData attacker_heros = 1;
  total_size += 1 * this->attacker_heros_size();
  for (int i = 0; i < this->attacker_heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attacker_heros(i));
  }

  // repeated .Packet.HeroData defender_heros = 2;
  total_size += 1 * this->defender_heros_size();
  for (int i = 0; i < this->defender_heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->defender_heros(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildCaptureBattleDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildCaptureBattleDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildCaptureBattleDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildCaptureBattleDetail::MergeFrom(const GuildCaptureBattleDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  attacker_heros_.MergeFrom(from.attacker_heros_);
  defender_heros_.MergeFrom(from.defender_heros_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_attacker_win()) {
      set_attacker_win(from.attacker_win());
    }
    if (from.has_reply_guid()) {
      set_reply_guid(from.reply_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildCaptureBattleDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildCaptureBattleDetail::CopyFrom(const GuildCaptureBattleDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildCaptureBattleDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;

  for (int i = 0; i < attacker_heros_size(); i++) {
    if (!this->attacker_heros(i).IsInitialized()) return false;
  }
  for (int i = 0; i < defender_heros_size(); i++) {
    if (!this->defender_heros(i).IsInitialized()) return false;
  }
  return true;
}

void GuildCaptureBattleDetail::SetInitialized() {
  _has_bits_[0] |= 0x0000000c;

  for (int i = 0; i < attacker_heros_size(); i++) {
    this->mutable_attacker_heros(i)->SetInitialized();
  }
  for (int i = 0; i < defender_heros_size(); i++) {
    this->mutable_defender_heros(i)->SetInitialized();
  }
  return;
}

void GuildCaptureBattleDetail::Swap(GuildCaptureBattleDetail* other) {
  if (other != this) {
    attacker_heros_.Swap(&other->attacker_heros_);
    defender_heros_.Swap(&other->defender_heros_);
    std::swap(attacker_win_, other->attacker_win_);
    std::swap(reply_guid_, other->reply_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildCaptureBattleDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildCaptureBattleDetail_descriptor_;
  metadata.reflection = GuildCaptureBattleDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildCaptureBattleLogDB::kGuidFieldNumber;
const int GuildCaptureBattleLogDB::kAttackerGuidFieldNumber;
const int GuildCaptureBattleLogDB::kDefenderGuidFieldNumber;
const int GuildCaptureBattleLogDB::kChapterIdFieldNumber;
const int GuildCaptureBattleLogDB::kBattleTimeFieldNumber;
const int GuildCaptureBattleLogDB::kAttackerWinFieldNumber;
const int GuildCaptureBattleLogDB::kFinishFieldNumber;
const int GuildCaptureBattleLogDB::kDetailsFieldNumber;
#endif  // !_MSC_VER

GuildCaptureBattleLogDB::GuildCaptureBattleLogDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildCaptureBattleLogDB::InitAsDefaultInstance() {
}

GuildCaptureBattleLogDB::GuildCaptureBattleLogDB(const GuildCaptureBattleLogDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildCaptureBattleLogDB::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  attacker_guid_ = GOOGLE_ULONGLONG(0);
  defender_guid_ = GOOGLE_ULONGLONG(0);
  chapter_id_ = 0;
  battle_time_ = 0;
  attacker_win_ = false;
  finish_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildCaptureBattleLogDB::~GuildCaptureBattleLogDB() {
  SharedDtor();
}

void GuildCaptureBattleLogDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildCaptureBattleLogDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildCaptureBattleLogDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildCaptureBattleLogDB_descriptor_;
}

const GuildCaptureBattleLogDB& GuildCaptureBattleLogDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCapturePoint_2eproto();
  return *default_instance_;
}

GuildCaptureBattleLogDB* GuildCaptureBattleLogDB::default_instance_ = NULL;

GuildCaptureBattleLogDB* GuildCaptureBattleLogDB::New() const {
  return new GuildCaptureBattleLogDB;
}

void GuildCaptureBattleLogDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    attacker_guid_ = GOOGLE_ULONGLONG(0);
    defender_guid_ = GOOGLE_ULONGLONG(0);
    chapter_id_ = 0;
    battle_time_ = 0;
    attacker_win_ = false;
    finish_ = false;
  }
  details_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildCaptureBattleLogDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_attacker_guid;
        break;
      }

      // required fixed64 attacker_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_attacker_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &attacker_guid_)));
          set_has_attacker_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_defender_guid;
        break;
      }

      // required fixed64 defender_guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_defender_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &defender_guid_)));
          set_has_defender_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_chapter_id;
        break;
      }

      // required int32 chapter_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chapter_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapter_id_)));
          set_has_chapter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_battle_time;
        break;
      }

      // required int32 battle_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_time_)));
          set_has_battle_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_attacker_win;
        break;
      }

      // required bool attacker_win = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attacker_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &attacker_win_)));
          set_has_attacker_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_finish;
        break;
      }

      // required bool finish = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finish_)));
          set_has_finish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_details;
        break;
      }

      // repeated .Packet.GuildCaptureBattleDetail details = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_details;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildCaptureBattleLogDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required fixed64 attacker_guid = 2;
  if (has_attacker_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->attacker_guid(), output);
  }

  // required fixed64 defender_guid = 3;
  if (has_defender_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->defender_guid(), output);
  }

  // required int32 chapter_id = 4;
  if (has_chapter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->chapter_id(), output);
  }

  // required int32 battle_time = 5;
  if (has_battle_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->battle_time(), output);
  }

  // required bool attacker_win = 6;
  if (has_attacker_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->attacker_win(), output);
  }

  // required bool finish = 7;
  if (has_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->finish(), output);
  }

  // repeated .Packet.GuildCaptureBattleDetail details = 8;
  for (int i = 0; i < this->details_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->details(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildCaptureBattleLogDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required fixed64 attacker_guid = 2;
  if (has_attacker_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->attacker_guid(), target);
  }

  // required fixed64 defender_guid = 3;
  if (has_defender_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->defender_guid(), target);
  }

  // required int32 chapter_id = 4;
  if (has_chapter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->chapter_id(), target);
  }

  // required int32 battle_time = 5;
  if (has_battle_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->battle_time(), target);
  }

  // required bool attacker_win = 6;
  if (has_attacker_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->attacker_win(), target);
  }

  // required bool finish = 7;
  if (has_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->finish(), target);
  }

  // repeated .Packet.GuildCaptureBattleDetail details = 8;
  for (int i = 0; i < this->details_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->details(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildCaptureBattleLogDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 attacker_guid = 2;
    if (has_attacker_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 defender_guid = 3;
    if (has_defender_guid()) {
      total_size += 1 + 8;
    }

    // required int32 chapter_id = 4;
    if (has_chapter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapter_id());
    }

    // required int32 battle_time = 5;
    if (has_battle_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_time());
    }

    // required bool attacker_win = 6;
    if (has_attacker_win()) {
      total_size += 1 + 1;
    }

    // required bool finish = 7;
    if (has_finish()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Packet.GuildCaptureBattleDetail details = 8;
  total_size += 1 * this->details_size();
  for (int i = 0; i < this->details_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->details(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildCaptureBattleLogDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildCaptureBattleLogDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildCaptureBattleLogDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildCaptureBattleLogDB::MergeFrom(const GuildCaptureBattleLogDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  details_.MergeFrom(from.details_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_attacker_guid()) {
      set_attacker_guid(from.attacker_guid());
    }
    if (from.has_defender_guid()) {
      set_defender_guid(from.defender_guid());
    }
    if (from.has_chapter_id()) {
      set_chapter_id(from.chapter_id());
    }
    if (from.has_battle_time()) {
      set_battle_time(from.battle_time());
    }
    if (from.has_attacker_win()) {
      set_attacker_win(from.attacker_win());
    }
    if (from.has_finish()) {
      set_finish(from.finish());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildCaptureBattleLogDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildCaptureBattleLogDB::CopyFrom(const GuildCaptureBattleLogDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildCaptureBattleLogDB::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  for (int i = 0; i < details_size(); i++) {
    if (!this->details(i).IsInitialized()) return false;
  }
  return true;
}

void GuildCaptureBattleLogDB::SetInitialized() {
  _has_bits_[0] |= 0x0000007f;

  for (int i = 0; i < details_size(); i++) {
    this->mutable_details(i)->SetInitialized();
  }
  return;
}

void GuildCaptureBattleLogDB::Swap(GuildCaptureBattleLogDB* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(attacker_guid_, other->attacker_guid_);
    std::swap(defender_guid_, other->defender_guid_);
    std::swap(chapter_id_, other->chapter_id_);
    std::swap(battle_time_, other->battle_time_);
    std::swap(attacker_win_, other->attacker_win_);
    std::swap(finish_, other->finish_);
    details_.Swap(&other->details_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildCaptureBattleLogDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildCaptureBattleLogDB_descriptor_;
  metadata.reflection = GuildCaptureBattleLogDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildCaptureBattleLog::kAttackerGuidFieldNumber;
const int GuildCaptureBattleLog::kAttackerNameFieldNumber;
const int GuildCaptureBattleLog::kAttackerIconFieldNumber;
const int GuildCaptureBattleLog::kDefenderGuidFieldNumber;
const int GuildCaptureBattleLog::kDefenderNameFieldNumber;
const int GuildCaptureBattleLog::kDefenderIconFieldNumber;
const int GuildCaptureBattleLog::kAttackerWinFieldNumber;
const int GuildCaptureBattleLog::kBattleTimeFieldNumber;
const int GuildCaptureBattleLog::kDetailsFieldNumber;
const int GuildCaptureBattleLog::kChapterIdFieldNumber;
#endif  // !_MSC_VER

GuildCaptureBattleLog::GuildCaptureBattleLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildCaptureBattleLog::InitAsDefaultInstance() {
}

GuildCaptureBattleLog::GuildCaptureBattleLog(const GuildCaptureBattleLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildCaptureBattleLog::SharedCtor() {
  _cached_size_ = 0;
  attacker_guid_ = GOOGLE_ULONGLONG(0);
  attacker_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attacker_icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  defender_guid_ = GOOGLE_ULONGLONG(0);
  defender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  defender_icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attacker_win_ = false;
  battle_time_ = 0;
  chapter_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildCaptureBattleLog::~GuildCaptureBattleLog() {
  SharedDtor();
}

void GuildCaptureBattleLog::SharedDtor() {
  if (attacker_name_ != &::google::protobuf::internal::kEmptyString) {
    delete attacker_name_;
  }
  if (attacker_icon_ != &::google::protobuf::internal::kEmptyString) {
    delete attacker_icon_;
  }
  if (defender_name_ != &::google::protobuf::internal::kEmptyString) {
    delete defender_name_;
  }
  if (defender_icon_ != &::google::protobuf::internal::kEmptyString) {
    delete defender_icon_;
  }
  if (this != default_instance_) {
  }
}

void GuildCaptureBattleLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildCaptureBattleLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildCaptureBattleLog_descriptor_;
}

const GuildCaptureBattleLog& GuildCaptureBattleLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCapturePoint_2eproto();
  return *default_instance_;
}

GuildCaptureBattleLog* GuildCaptureBattleLog::default_instance_ = NULL;

GuildCaptureBattleLog* GuildCaptureBattleLog::New() const {
  return new GuildCaptureBattleLog;
}

void GuildCaptureBattleLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attacker_guid_ = GOOGLE_ULONGLONG(0);
    if (has_attacker_name()) {
      if (attacker_name_ != &::google::protobuf::internal::kEmptyString) {
        attacker_name_->clear();
      }
    }
    if (has_attacker_icon()) {
      if (attacker_icon_ != &::google::protobuf::internal::kEmptyString) {
        attacker_icon_->clear();
      }
    }
    defender_guid_ = GOOGLE_ULONGLONG(0);
    if (has_defender_name()) {
      if (defender_name_ != &::google::protobuf::internal::kEmptyString) {
        defender_name_->clear();
      }
    }
    if (has_defender_icon()) {
      if (defender_icon_ != &::google::protobuf::internal::kEmptyString) {
        defender_icon_->clear();
      }
    }
    attacker_win_ = false;
    battle_time_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    chapter_id_ = 0;
  }
  details_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildCaptureBattleLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 attacker_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &attacker_guid_)));
          set_has_attacker_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attacker_name;
        break;
      }

      // required string attacker_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attacker_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attacker_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attacker_name().data(), this->attacker_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attacker_icon;
        break;
      }

      // required string attacker_icon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attacker_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attacker_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attacker_icon().data(), this->attacker_icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_defender_guid;
        break;
      }

      // required fixed64 defender_guid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_defender_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &defender_guid_)));
          set_has_defender_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_defender_name;
        break;
      }

      // required string defender_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defender_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_defender_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->defender_name().data(), this->defender_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_defender_icon;
        break;
      }

      // required string defender_icon = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defender_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_defender_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->defender_icon().data(), this->defender_icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_attacker_win;
        break;
      }

      // required bool attacker_win = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attacker_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &attacker_win_)));
          set_has_attacker_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_battle_time;
        break;
      }

      // required int32 battle_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_time_)));
          set_has_battle_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_details;
        break;
      }

      // repeated .Packet.GuildCaptureBattleDetail details = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_details;
        if (input->ExpectTag(80)) goto parse_chapter_id;
        break;
      }

      // required int32 chapter_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chapter_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapter_id_)));
          set_has_chapter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildCaptureBattleLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 attacker_guid = 1;
  if (has_attacker_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->attacker_guid(), output);
  }

  // required string attacker_name = 2;
  if (has_attacker_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attacker_name().data(), this->attacker_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->attacker_name(), output);
  }

  // required string attacker_icon = 3;
  if (has_attacker_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attacker_icon().data(), this->attacker_icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->attacker_icon(), output);
  }

  // required fixed64 defender_guid = 4;
  if (has_defender_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->defender_guid(), output);
  }

  // required string defender_name = 5;
  if (has_defender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defender_name().data(), this->defender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->defender_name(), output);
  }

  // required string defender_icon = 6;
  if (has_defender_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defender_icon().data(), this->defender_icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->defender_icon(), output);
  }

  // required bool attacker_win = 7;
  if (has_attacker_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->attacker_win(), output);
  }

  // required int32 battle_time = 8;
  if (has_battle_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->battle_time(), output);
  }

  // repeated .Packet.GuildCaptureBattleDetail details = 9;
  for (int i = 0; i < this->details_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->details(i), output);
  }

  // required int32 chapter_id = 10;
  if (has_chapter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->chapter_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildCaptureBattleLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 attacker_guid = 1;
  if (has_attacker_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->attacker_guid(), target);
  }

  // required string attacker_name = 2;
  if (has_attacker_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attacker_name().data(), this->attacker_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->attacker_name(), target);
  }

  // required string attacker_icon = 3;
  if (has_attacker_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attacker_icon().data(), this->attacker_icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->attacker_icon(), target);
  }

  // required fixed64 defender_guid = 4;
  if (has_defender_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->defender_guid(), target);
  }

  // required string defender_name = 5;
  if (has_defender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defender_name().data(), this->defender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->defender_name(), target);
  }

  // required string defender_icon = 6;
  if (has_defender_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defender_icon().data(), this->defender_icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->defender_icon(), target);
  }

  // required bool attacker_win = 7;
  if (has_attacker_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->attacker_win(), target);
  }

  // required int32 battle_time = 8;
  if (has_battle_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->battle_time(), target);
  }

  // repeated .Packet.GuildCaptureBattleDetail details = 9;
  for (int i = 0; i < this->details_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->details(i), target);
  }

  // required int32 chapter_id = 10;
  if (has_chapter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->chapter_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildCaptureBattleLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 attacker_guid = 1;
    if (has_attacker_guid()) {
      total_size += 1 + 8;
    }

    // required string attacker_name = 2;
    if (has_attacker_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attacker_name());
    }

    // required string attacker_icon = 3;
    if (has_attacker_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attacker_icon());
    }

    // required fixed64 defender_guid = 4;
    if (has_defender_guid()) {
      total_size += 1 + 8;
    }

    // required string defender_name = 5;
    if (has_defender_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->defender_name());
    }

    // required string defender_icon = 6;
    if (has_defender_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->defender_icon());
    }

    // required bool attacker_win = 7;
    if (has_attacker_win()) {
      total_size += 1 + 1;
    }

    // required int32 battle_time = 8;
    if (has_battle_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_time());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // required int32 chapter_id = 10;
    if (has_chapter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapter_id());
    }

  }
  // repeated .Packet.GuildCaptureBattleDetail details = 9;
  total_size += 1 * this->details_size();
  for (int i = 0; i < this->details_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->details(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildCaptureBattleLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildCaptureBattleLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildCaptureBattleLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildCaptureBattleLog::MergeFrom(const GuildCaptureBattleLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  details_.MergeFrom(from.details_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attacker_guid()) {
      set_attacker_guid(from.attacker_guid());
    }
    if (from.has_attacker_name()) {
      set_attacker_name(from.attacker_name());
    }
    if (from.has_attacker_icon()) {
      set_attacker_icon(from.attacker_icon());
    }
    if (from.has_defender_guid()) {
      set_defender_guid(from.defender_guid());
    }
    if (from.has_defender_name()) {
      set_defender_name(from.defender_name());
    }
    if (from.has_defender_icon()) {
      set_defender_icon(from.defender_icon());
    }
    if (from.has_attacker_win()) {
      set_attacker_win(from.attacker_win());
    }
    if (from.has_battle_time()) {
      set_battle_time(from.battle_time());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_chapter_id()) {
      set_chapter_id(from.chapter_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildCaptureBattleLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildCaptureBattleLog::CopyFrom(const GuildCaptureBattleLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildCaptureBattleLog::IsInitialized() const {
  if ((_has_bits_[0] & 0x000002ff) != 0x000002ff) return false;

  for (int i = 0; i < details_size(); i++) {
    if (!this->details(i).IsInitialized()) return false;
  }
  return true;
}

void GuildCaptureBattleLog::SetInitialized() {
  _has_bits_[0] |= 0x000002ff;

  for (int i = 0; i < details_size(); i++) {
    this->mutable_details(i)->SetInitialized();
  }
  return;
}

void GuildCaptureBattleLog::Swap(GuildCaptureBattleLog* other) {
  if (other != this) {
    std::swap(attacker_guid_, other->attacker_guid_);
    std::swap(attacker_name_, other->attacker_name_);
    std::swap(attacker_icon_, other->attacker_icon_);
    std::swap(defender_guid_, other->defender_guid_);
    std::swap(defender_name_, other->defender_name_);
    std::swap(defender_icon_, other->defender_icon_);
    std::swap(attacker_win_, other->attacker_win_);
    std::swap(battle_time_, other->battle_time_);
    details_.Swap(&other->details_);
    std::swap(chapter_id_, other->chapter_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildCaptureBattleLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildCaptureBattleLog_descriptor_;
  metadata.reflection = GuildCaptureBattleLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_GuildCaptureAllBattleLog::kLogsFieldNumber;
#endif  // !_MSC_VER

GC_GuildCaptureAllBattleLog::GC_GuildCaptureAllBattleLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_GuildCaptureAllBattleLog::InitAsDefaultInstance() {
}

GC_GuildCaptureAllBattleLog::GC_GuildCaptureAllBattleLog(const GC_GuildCaptureAllBattleLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_GuildCaptureAllBattleLog::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_GuildCaptureAllBattleLog::~GC_GuildCaptureAllBattleLog() {
  SharedDtor();
}

void GC_GuildCaptureAllBattleLog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_GuildCaptureAllBattleLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_GuildCaptureAllBattleLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_GuildCaptureAllBattleLog_descriptor_;
}

const GC_GuildCaptureAllBattleLog& GC_GuildCaptureAllBattleLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCapturePoint_2eproto();
  return *default_instance_;
}

GC_GuildCaptureAllBattleLog* GC_GuildCaptureAllBattleLog::default_instance_ = NULL;

GC_GuildCaptureAllBattleLog* GC_GuildCaptureAllBattleLog::New() const {
  return new GC_GuildCaptureAllBattleLog;
}

void GC_GuildCaptureAllBattleLog::Clear() {
  logs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GC_GuildCaptureAllBattleLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.GuildCaptureBattleLog logs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_logs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_logs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GC_GuildCaptureAllBattleLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.GuildCaptureBattleLog logs = 1;
  for (int i = 0; i < this->logs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->logs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_GuildCaptureAllBattleLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.GuildCaptureBattleLog logs = 1;
  for (int i = 0; i < this->logs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->logs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_GuildCaptureAllBattleLog::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.GuildCaptureBattleLog logs = 1;
  total_size += 1 * this->logs_size();
  for (int i = 0; i < this->logs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->logs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_GuildCaptureAllBattleLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_GuildCaptureAllBattleLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_GuildCaptureAllBattleLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GC_GuildCaptureAllBattleLog::MergeFrom(const GC_GuildCaptureAllBattleLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  logs_.MergeFrom(from.logs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GC_GuildCaptureAllBattleLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GC_GuildCaptureAllBattleLog::CopyFrom(const GC_GuildCaptureAllBattleLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GC_GuildCaptureAllBattleLog::IsInitialized() const {

  for (int i = 0; i < logs_size(); i++) {
    if (!this->logs(i).IsInitialized()) return false;
  }
  return true;
}

void GC_GuildCaptureAllBattleLog::SetInitialized() {

  for (int i = 0; i < logs_size(); i++) {
    this->mutable_logs(i)->SetInitialized();
  }
  return;
}

void GC_GuildCaptureAllBattleLog::Swap(GC_GuildCaptureAllBattleLog* other) {
  if (other != this) {
    logs_.Swap(&other->logs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GC_GuildCaptureAllBattleLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_GuildCaptureAllBattleLog_descriptor_;
  metadata.reflection = GC_GuildCaptureAllBattleLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CapturePotinBrief::kChapterIdFieldNumber;
const int CapturePotinBrief::kStatusFieldNumber;
const int CapturePotinBrief::kCaptureGuildNameFieldNumber;
const int CapturePotinBrief::kCaptureGuildIconFieldNumber;
const int CapturePotinBrief::kCaptureGuildGuidFieldNumber;
const int CapturePotinBrief::kHookUsersFieldNumber;
const int CapturePotinBrief::kTaxFieldNumber;
const int CapturePotinBrief::kTaxRateFieldNumber;
const int CapturePotinBrief::kStatusChangeTimeFieldNumber;
const int CapturePotinBrief::kCaptureHeroDatasFieldNumber;
const int CapturePotinBrief::kChallengerHeroDatasFieldNumber;
const int CapturePotinBrief::kStrongHoldStatusFieldNumber;
const int CapturePotinBrief::kChallengerNameFieldNumber;
const int CapturePotinBrief::kChallengerIconFieldNumber;
#endif  // !_MSC_VER

CapturePotinBrief::CapturePotinBrief()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CapturePotinBrief::InitAsDefaultInstance() {
}

CapturePotinBrief::CapturePotinBrief(const CapturePotinBrief& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CapturePotinBrief::SharedCtor() {
  _cached_size_ = 0;
  chapter_id_ = 0;
  status_ = 0;
  capture_guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  capture_guild_icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  capture_guild_guid_ = GOOGLE_ULONGLONG(0);
  hook_users_ = 0;
  tax_ = 0;
  tax_rate_ = 0;
  status_change_time_ = 0;
  challenger_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  challenger_icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CapturePotinBrief::~CapturePotinBrief() {
  SharedDtor();
}

void CapturePotinBrief::SharedDtor() {
  if (capture_guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete capture_guild_name_;
  }
  if (capture_guild_icon_ != &::google::protobuf::internal::kEmptyString) {
    delete capture_guild_icon_;
  }
  if (challenger_name_ != &::google::protobuf::internal::kEmptyString) {
    delete challenger_name_;
  }
  if (challenger_icon_ != &::google::protobuf::internal::kEmptyString) {
    delete challenger_icon_;
  }
  if (this != default_instance_) {
  }
}

void CapturePotinBrief::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CapturePotinBrief::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CapturePotinBrief_descriptor_;
}

const CapturePotinBrief& CapturePotinBrief::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCapturePoint_2eproto();
  return *default_instance_;
}

CapturePotinBrief* CapturePotinBrief::default_instance_ = NULL;

CapturePotinBrief* CapturePotinBrief::New() const {
  return new CapturePotinBrief;
}

void CapturePotinBrief::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chapter_id_ = 0;
    status_ = 0;
    if (has_capture_guild_name()) {
      if (capture_guild_name_ != &::google::protobuf::internal::kEmptyString) {
        capture_guild_name_->clear();
      }
    }
    if (has_capture_guild_icon()) {
      if (capture_guild_icon_ != &::google::protobuf::internal::kEmptyString) {
        capture_guild_icon_->clear();
      }
    }
    capture_guild_guid_ = GOOGLE_ULONGLONG(0);
    hook_users_ = 0;
    tax_ = 0;
    tax_rate_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    status_change_time_ = 0;
    if (has_challenger_name()) {
      if (challenger_name_ != &::google::protobuf::internal::kEmptyString) {
        challenger_name_->clear();
      }
    }
    if (has_challenger_icon()) {
      if (challenger_icon_ != &::google::protobuf::internal::kEmptyString) {
        challenger_icon_->clear();
      }
    }
  }
  capture_hero_datas_.Clear();
  challenger_hero_datas_.Clear();
  strong_hold_status_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool CapturePotinBrief::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chapter_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapter_id_)));
          set_has_chapter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .Packet.CaptureStatus status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::CaptureStatus_IsValid(value)) {
            set_status(static_cast< ::Packet::CaptureStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_capture_guild_name;
        break;
      }

      // required string capture_guild_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_capture_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_capture_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->capture_guild_name().data(), this->capture_guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_capture_guild_icon;
        break;
      }

      // required string capture_guild_icon = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_capture_guild_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_capture_guild_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->capture_guild_icon().data(), this->capture_guild_icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_capture_guild_guid;
        break;
      }

      // required fixed64 capture_guild_guid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_capture_guild_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &capture_guild_guid_)));
          set_has_capture_guild_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hook_users;
        break;
      }

      // required int32 hook_users = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hook_users:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hook_users_)));
          set_has_hook_users();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_tax;
        break;
      }

      // required int32 tax = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tax_)));
          set_has_tax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_tax_rate;
        break;
      }

      // required int32 tax_rate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tax_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tax_rate_)));
          set_has_tax_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_status_change_time;
        break;
      }

      // required int32 status_change_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status_change_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_change_time_)));
          set_has_status_change_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_capture_hero_datas;
        break;
      }

      // repeated .Packet.HeroData capture_hero_datas = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_capture_hero_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_capture_hero_datas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_capture_hero_datas;
        if (input->ExpectTag(90)) goto parse_challenger_hero_datas;
        break;
      }

      // repeated .Packet.HeroData challenger_hero_datas = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_challenger_hero_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_challenger_hero_datas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_challenger_hero_datas;
        if (input->ExpectTag(96)) goto parse_strong_hold_status;
        break;
      }

      // repeated .Packet.StrongHoldStatus strong_hold_status = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strong_hold_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::StrongHoldStatus_IsValid(value)) {
            add_strong_hold_status(static_cast< ::Packet::StrongHoldStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::Packet::StrongHoldStatus_IsValid,
                 this->mutable_strong_hold_status())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_strong_hold_status;
        if (input->ExpectTag(106)) goto parse_challenger_name;
        break;
      }

      // optional string challenger_name = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_challenger_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_challenger_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->challenger_name().data(), this->challenger_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_challenger_icon;
        break;
      }

      // optional string challenger_icon = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_challenger_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_challenger_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->challenger_icon().data(), this->challenger_icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void CapturePotinBrief::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 chapter_id = 1;
  if (has_chapter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chapter_id(), output);
  }

  // required .Packet.CaptureStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // required string capture_guild_name = 3;
  if (has_capture_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->capture_guild_name().data(), this->capture_guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->capture_guild_name(), output);
  }

  // required string capture_guild_icon = 4;
  if (has_capture_guild_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->capture_guild_icon().data(), this->capture_guild_icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->capture_guild_icon(), output);
  }

  // required fixed64 capture_guild_guid = 5;
  if (has_capture_guild_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->capture_guild_guid(), output);
  }

  // required int32 hook_users = 6;
  if (has_hook_users()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hook_users(), output);
  }

  // required int32 tax = 7;
  if (has_tax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->tax(), output);
  }

  // required int32 tax_rate = 8;
  if (has_tax_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->tax_rate(), output);
  }

  // required int32 status_change_time = 9;
  if (has_status_change_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->status_change_time(), output);
  }

  // repeated .Packet.HeroData capture_hero_datas = 10;
  for (int i = 0; i < this->capture_hero_datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->capture_hero_datas(i), output);
  }

  // repeated .Packet.HeroData challenger_hero_datas = 11;
  for (int i = 0; i < this->challenger_hero_datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->challenger_hero_datas(i), output);
  }

  // repeated .Packet.StrongHoldStatus strong_hold_status = 12;
  for (int i = 0; i < this->strong_hold_status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->strong_hold_status(i), output);
  }

  // optional string challenger_name = 13;
  if (has_challenger_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->challenger_name().data(), this->challenger_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->challenger_name(), output);
  }

  // optional string challenger_icon = 14;
  if (has_challenger_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->challenger_icon().data(), this->challenger_icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->challenger_icon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CapturePotinBrief::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 chapter_id = 1;
  if (has_chapter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chapter_id(), target);
  }

  // required .Packet.CaptureStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // required string capture_guild_name = 3;
  if (has_capture_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->capture_guild_name().data(), this->capture_guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->capture_guild_name(), target);
  }

  // required string capture_guild_icon = 4;
  if (has_capture_guild_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->capture_guild_icon().data(), this->capture_guild_icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->capture_guild_icon(), target);
  }

  // required fixed64 capture_guild_guid = 5;
  if (has_capture_guild_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->capture_guild_guid(), target);
  }

  // required int32 hook_users = 6;
  if (has_hook_users()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hook_users(), target);
  }

  // required int32 tax = 7;
  if (has_tax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->tax(), target);
  }

  // required int32 tax_rate = 8;
  if (has_tax_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->tax_rate(), target);
  }

  // required int32 status_change_time = 9;
  if (has_status_change_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->status_change_time(), target);
  }

  // repeated .Packet.HeroData capture_hero_datas = 10;
  for (int i = 0; i < this->capture_hero_datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->capture_hero_datas(i), target);
  }

  // repeated .Packet.HeroData challenger_hero_datas = 11;
  for (int i = 0; i < this->challenger_hero_datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->challenger_hero_datas(i), target);
  }

  // repeated .Packet.StrongHoldStatus strong_hold_status = 12;
  for (int i = 0; i < this->strong_hold_status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->strong_hold_status(i), target);
  }

  // optional string challenger_name = 13;
  if (has_challenger_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->challenger_name().data(), this->challenger_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->challenger_name(), target);
  }

  // optional string challenger_icon = 14;
  if (has_challenger_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->challenger_icon().data(), this->challenger_icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->challenger_icon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CapturePotinBrief::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 chapter_id = 1;
    if (has_chapter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapter_id());
    }

    // required .Packet.CaptureStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required string capture_guild_name = 3;
    if (has_capture_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->capture_guild_name());
    }

    // required string capture_guild_icon = 4;
    if (has_capture_guild_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->capture_guild_icon());
    }

    // required fixed64 capture_guild_guid = 5;
    if (has_capture_guild_guid()) {
      total_size += 1 + 8;
    }

    // required int32 hook_users = 6;
    if (has_hook_users()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hook_users());
    }

    // required int32 tax = 7;
    if (has_tax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tax());
    }

    // required int32 tax_rate = 8;
    if (has_tax_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tax_rate());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 status_change_time = 9;
    if (has_status_change_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status_change_time());
    }

    // optional string challenger_name = 13;
    if (has_challenger_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->challenger_name());
    }

    // optional string challenger_icon = 14;
    if (has_challenger_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->challenger_icon());
    }

  }
  // repeated .Packet.HeroData capture_hero_datas = 10;
  total_size += 1 * this->capture_hero_datas_size();
  for (int i = 0; i < this->capture_hero_datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->capture_hero_datas(i));
  }

  // repeated .Packet.HeroData challenger_hero_datas = 11;
  total_size += 1 * this->challenger_hero_datas_size();
  for (int i = 0; i < this->challenger_hero_datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->challenger_hero_datas(i));
  }

  // repeated .Packet.StrongHoldStatus strong_hold_status = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->strong_hold_status_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->strong_hold_status(i));
    }
    total_size += 1 * this->strong_hold_status_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CapturePotinBrief::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CapturePotinBrief* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CapturePotinBrief*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void CapturePotinBrief::MergeFrom(const CapturePotinBrief& from) {
  GOOGLE_CHECK_NE(&from, this);
  capture_hero_datas_.MergeFrom(from.capture_hero_datas_);
  challenger_hero_datas_.MergeFrom(from.challenger_hero_datas_);
  strong_hold_status_.MergeFrom(from.strong_hold_status_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapter_id()) {
      set_chapter_id(from.chapter_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_capture_guild_name()) {
      set_capture_guild_name(from.capture_guild_name());
    }
    if (from.has_capture_guild_icon()) {
      set_capture_guild_icon(from.capture_guild_icon());
    }
    if (from.has_capture_guild_guid()) {
      set_capture_guild_guid(from.capture_guild_guid());
    }
    if (from.has_hook_users()) {
      set_hook_users(from.hook_users());
    }
    if (from.has_tax()) {
      set_tax(from.tax());
    }
    if (from.has_tax_rate()) {
      set_tax_rate(from.tax_rate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_status_change_time()) {
      set_status_change_time(from.status_change_time());
    }
    if (from.has_challenger_name()) {
      set_challenger_name(from.challenger_name());
    }
    if (from.has_challenger_icon()) {
      set_challenger_icon(from.challenger_icon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void CapturePotinBrief::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void CapturePotinBrief::CopyFrom(const CapturePotinBrief& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool CapturePotinBrief::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  for (int i = 0; i < capture_hero_datas_size(); i++) {
    if (!this->capture_hero_datas(i).IsInitialized()) return false;
  }
  for (int i = 0; i < challenger_hero_datas_size(); i++) {
    if (!this->challenger_hero_datas(i).IsInitialized()) return false;
  }
  return true;
}

void CapturePotinBrief::SetInitialized() {
  _has_bits_[0] |= 0x000001ff;

  for (int i = 0; i < capture_hero_datas_size(); i++) {
    this->mutable_capture_hero_datas(i)->SetInitialized();
  }
  for (int i = 0; i < challenger_hero_datas_size(); i++) {
    this->mutable_challenger_hero_datas(i)->SetInitialized();
  }
  return;
}

void CapturePotinBrief::Swap(CapturePotinBrief* other) {
  if (other != this) {
    std::swap(chapter_id_, other->chapter_id_);
    std::swap(status_, other->status_);
    std::swap(capture_guild_name_, other->capture_guild_name_);
    std::swap(capture_guild_icon_, other->capture_guild_icon_);
    std::swap(capture_guild_guid_, other->capture_guild_guid_);
    std::swap(hook_users_, other->hook_users_);
    std::swap(tax_, other->tax_);
    std::swap(tax_rate_, other->tax_rate_);
    std::swap(status_change_time_, other->status_change_time_);
    capture_hero_datas_.Swap(&other->capture_hero_datas_);
    challenger_hero_datas_.Swap(&other->challenger_hero_datas_);
    strong_hold_status_.Swap(&other->strong_hold_status_);
    std::swap(challenger_name_, other->challenger_name_);
    std::swap(challenger_icon_, other->challenger_icon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata CapturePotinBrief::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CapturePotinBrief_descriptor_;
  metadata.reflection = CapturePotinBrief_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CG_AllBattleLog::CG_AllBattleLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_AllBattleLog::InitAsDefaultInstance() {
}

CG_AllBattleLog::CG_AllBattleLog(const CG_AllBattleLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_AllBattleLog::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_AllBattleLog::~CG_AllBattleLog() {
  SharedDtor();
}

void CG_AllBattleLog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CG_AllBattleLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_AllBattleLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_AllBattleLog_descriptor_;
}

const CG_AllBattleLog& CG_AllBattleLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCapturePoint_2eproto();
  return *default_instance_;
}

CG_AllBattleLog* CG_AllBattleLog::default_instance_ = NULL;

CG_AllBattleLog* CG_AllBattleLog::New() const {
  return new CG_AllBattleLog;
}

void CG_AllBattleLog::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool CG_AllBattleLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void CG_AllBattleLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_AllBattleLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_AllBattleLog::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_AllBattleLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_AllBattleLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_AllBattleLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void CG_AllBattleLog::MergeFrom(const CG_AllBattleLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void CG_AllBattleLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void CG_AllBattleLog::CopyFrom(const CG_AllBattleLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool CG_AllBattleLog::IsInitialized() const {

  return true;
}

void CG_AllBattleLog::SetInitialized() {

  return;
}

void CG_AllBattleLog::Swap(CG_AllBattleLog* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata CG_AllBattleLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_AllBattleLog_descriptor_;
  metadata.reflection = CG_AllBattleLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CG_CetCapturePointInfo::kChapterIdFieldNumber;
#endif  // !_MSC_VER

CG_CetCapturePointInfo::CG_CetCapturePointInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_CetCapturePointInfo::InitAsDefaultInstance() {
}

CG_CetCapturePointInfo::CG_CetCapturePointInfo(const CG_CetCapturePointInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_CetCapturePointInfo::SharedCtor() {
  _cached_size_ = 0;
  chapter_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_CetCapturePointInfo::~CG_CetCapturePointInfo() {
  SharedDtor();
}

void CG_CetCapturePointInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CG_CetCapturePointInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_CetCapturePointInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_CetCapturePointInfo_descriptor_;
}

const CG_CetCapturePointInfo& CG_CetCapturePointInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCapturePoint_2eproto();
  return *default_instance_;
}

CG_CetCapturePointInfo* CG_CetCapturePointInfo::default_instance_ = NULL;

CG_CetCapturePointInfo* CG_CetCapturePointInfo::New() const {
  return new CG_CetCapturePointInfo;
}

void CG_CetCapturePointInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chapter_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool CG_CetCapturePointInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chapter_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapter_id_)));
          set_has_chapter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void CG_CetCapturePointInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 chapter_id = 1;
  if (has_chapter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chapter_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_CetCapturePointInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 chapter_id = 1;
  if (has_chapter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chapter_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_CetCapturePointInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 chapter_id = 1;
    if (has_chapter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapter_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_CetCapturePointInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_CetCapturePointInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_CetCapturePointInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void CG_CetCapturePointInfo::MergeFrom(const CG_CetCapturePointInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapter_id()) {
      set_chapter_id(from.chapter_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void CG_CetCapturePointInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void CG_CetCapturePointInfo::CopyFrom(const CG_CetCapturePointInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool CG_CetCapturePointInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CG_CetCapturePointInfo::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void CG_CetCapturePointInfo::Swap(CG_CetCapturePointInfo* other) {
  if (other != this) {
    std::swap(chapter_id_, other->chapter_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata CG_CetCapturePointInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_CetCapturePointInfo_descriptor_;
  metadata.reflection = CG_CetCapturePointInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CG_PullAllCapturePoint::CG_PullAllCapturePoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_PullAllCapturePoint::InitAsDefaultInstance() {
}

CG_PullAllCapturePoint::CG_PullAllCapturePoint(const CG_PullAllCapturePoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_PullAllCapturePoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_PullAllCapturePoint::~CG_PullAllCapturePoint() {
  SharedDtor();
}

void CG_PullAllCapturePoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CG_PullAllCapturePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_PullAllCapturePoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_PullAllCapturePoint_descriptor_;
}

const CG_PullAllCapturePoint& CG_PullAllCapturePoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCapturePoint_2eproto();
  return *default_instance_;
}

CG_PullAllCapturePoint* CG_PullAllCapturePoint::default_instance_ = NULL;

CG_PullAllCapturePoint* CG_PullAllCapturePoint::New() const {
  return new CG_PullAllCapturePoint;
}

void CG_PullAllCapturePoint::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool CG_PullAllCapturePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void CG_PullAllCapturePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_PullAllCapturePoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_PullAllCapturePoint::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_PullAllCapturePoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_PullAllCapturePoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_PullAllCapturePoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void CG_PullAllCapturePoint::MergeFrom(const CG_PullAllCapturePoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void CG_PullAllCapturePoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void CG_PullAllCapturePoint::CopyFrom(const CG_PullAllCapturePoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool CG_PullAllCapturePoint::IsInitialized() const {

  return true;
}

void CG_PullAllCapturePoint::SetInitialized() {

  return;
}

void CG_PullAllCapturePoint::Swap(CG_PullAllCapturePoint* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata CG_PullAllCapturePoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_PullAllCapturePoint_descriptor_;
  metadata.reflection = CG_PullAllCapturePoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CG_ReleaseCapturePoint::CG_ReleaseCapturePoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_ReleaseCapturePoint::InitAsDefaultInstance() {
}

CG_ReleaseCapturePoint::CG_ReleaseCapturePoint(const CG_ReleaseCapturePoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_ReleaseCapturePoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_ReleaseCapturePoint::~CG_ReleaseCapturePoint() {
  SharedDtor();
}

void CG_ReleaseCapturePoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CG_ReleaseCapturePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_ReleaseCapturePoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_ReleaseCapturePoint_descriptor_;
}

const CG_ReleaseCapturePoint& CG_ReleaseCapturePoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCapturePoint_2eproto();
  return *default_instance_;
}

CG_ReleaseCapturePoint* CG_ReleaseCapturePoint::default_instance_ = NULL;

CG_ReleaseCapturePoint* CG_ReleaseCapturePoint::New() const {
  return new CG_ReleaseCapturePoint;
}

void CG_ReleaseCapturePoint::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool CG_ReleaseCapturePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void CG_ReleaseCapturePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_ReleaseCapturePoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_ReleaseCapturePoint::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_ReleaseCapturePoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_ReleaseCapturePoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_ReleaseCapturePoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void CG_ReleaseCapturePoint::MergeFrom(const CG_ReleaseCapturePoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void CG_ReleaseCapturePoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void CG_ReleaseCapturePoint::CopyFrom(const CG_ReleaseCapturePoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool CG_ReleaseCapturePoint::IsInitialized() const {

  return true;
}

void CG_ReleaseCapturePoint::SetInitialized() {

  return;
}

void CG_ReleaseCapturePoint::Swap(CG_ReleaseCapturePoint* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata CG_ReleaseCapturePoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_ReleaseCapturePoint_descriptor_;
  metadata.reflection = CG_ReleaseCapturePoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_AllGuildCapturePoint::kAllPointsFieldNumber;
#endif  // !_MSC_VER

GC_AllGuildCapturePoint::GC_AllGuildCapturePoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_AllGuildCapturePoint::InitAsDefaultInstance() {
}

GC_AllGuildCapturePoint::GC_AllGuildCapturePoint(const GC_AllGuildCapturePoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_AllGuildCapturePoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_AllGuildCapturePoint::~GC_AllGuildCapturePoint() {
  SharedDtor();
}

void GC_AllGuildCapturePoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_AllGuildCapturePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_AllGuildCapturePoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_AllGuildCapturePoint_descriptor_;
}

const GC_AllGuildCapturePoint& GC_AllGuildCapturePoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCapturePoint_2eproto();
  return *default_instance_;
}

GC_AllGuildCapturePoint* GC_AllGuildCapturePoint::default_instance_ = NULL;

GC_AllGuildCapturePoint* GC_AllGuildCapturePoint::New() const {
  return new GC_AllGuildCapturePoint;
}

void GC_AllGuildCapturePoint::Clear() {
  all_points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GC_AllGuildCapturePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.CapturePotinBrief all_points = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_all_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_all_points()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_all_points;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GC_AllGuildCapturePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.CapturePotinBrief all_points = 1;
  for (int i = 0; i < this->all_points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->all_points(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_AllGuildCapturePoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.CapturePotinBrief all_points = 1;
  for (int i = 0; i < this->all_points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->all_points(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_AllGuildCapturePoint::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.CapturePotinBrief all_points = 1;
  total_size += 1 * this->all_points_size();
  for (int i = 0; i < this->all_points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->all_points(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_AllGuildCapturePoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_AllGuildCapturePoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_AllGuildCapturePoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GC_AllGuildCapturePoint::MergeFrom(const GC_AllGuildCapturePoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  all_points_.MergeFrom(from.all_points_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GC_AllGuildCapturePoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GC_AllGuildCapturePoint::CopyFrom(const GC_AllGuildCapturePoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GC_AllGuildCapturePoint::IsInitialized() const {

  for (int i = 0; i < all_points_size(); i++) {
    if (!this->all_points(i).IsInitialized()) return false;
  }
  return true;
}

void GC_AllGuildCapturePoint::SetInitialized() {

  for (int i = 0; i < all_points_size(); i++) {
    this->mutable_all_points(i)->SetInitialized();
  }
  return;
}

void GC_AllGuildCapturePoint::Swap(GC_AllGuildCapturePoint* other) {
  if (other != this) {
    all_points_.Swap(&other->all_points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GC_AllGuildCapturePoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_AllGuildCapturePoint_descriptor_;
  metadata.reflection = GC_AllGuildCapturePoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CG_PullCapturePoint::CG_PullCapturePoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_PullCapturePoint::InitAsDefaultInstance() {
}

CG_PullCapturePoint::CG_PullCapturePoint(const CG_PullCapturePoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_PullCapturePoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_PullCapturePoint::~CG_PullCapturePoint() {
  SharedDtor();
}

void CG_PullCapturePoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CG_PullCapturePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_PullCapturePoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_PullCapturePoint_descriptor_;
}

const CG_PullCapturePoint& CG_PullCapturePoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCapturePoint_2eproto();
  return *default_instance_;
}

CG_PullCapturePoint* CG_PullCapturePoint::default_instance_ = NULL;

CG_PullCapturePoint* CG_PullCapturePoint::New() const {
  return new CG_PullCapturePoint;
}

void CG_PullCapturePoint::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool CG_PullCapturePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void CG_PullCapturePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_PullCapturePoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_PullCapturePoint::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_PullCapturePoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_PullCapturePoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_PullCapturePoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void CG_PullCapturePoint::MergeFrom(const CG_PullCapturePoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void CG_PullCapturePoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void CG_PullCapturePoint::CopyFrom(const CG_PullCapturePoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool CG_PullCapturePoint::IsInitialized() const {

  return true;
}

void CG_PullCapturePoint::SetInitialized() {

  return;
}

void CG_PullCapturePoint::Swap(CG_PullCapturePoint* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata CG_PullCapturePoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_PullCapturePoint_descriptor_;
  metadata.reflection = CG_PullCapturePoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CG_UpdateTaxRate::kRateFieldNumber;
#endif  // !_MSC_VER

CG_UpdateTaxRate::CG_UpdateTaxRate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_UpdateTaxRate::InitAsDefaultInstance() {
}

CG_UpdateTaxRate::CG_UpdateTaxRate(const CG_UpdateTaxRate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_UpdateTaxRate::SharedCtor() {
  _cached_size_ = 0;
  rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_UpdateTaxRate::~CG_UpdateTaxRate() {
  SharedDtor();
}

void CG_UpdateTaxRate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CG_UpdateTaxRate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_UpdateTaxRate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_UpdateTaxRate_descriptor_;
}

const CG_UpdateTaxRate& CG_UpdateTaxRate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCapturePoint_2eproto();
  return *default_instance_;
}

CG_UpdateTaxRate* CG_UpdateTaxRate::default_instance_ = NULL;

CG_UpdateTaxRate* CG_UpdateTaxRate::New() const {
  return new CG_UpdateTaxRate;
}

void CG_UpdateTaxRate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool CG_UpdateTaxRate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void CG_UpdateTaxRate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rate = 1;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_UpdateTaxRate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rate = 1;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_UpdateTaxRate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rate = 1;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_UpdateTaxRate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_UpdateTaxRate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_UpdateTaxRate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void CG_UpdateTaxRate::MergeFrom(const CG_UpdateTaxRate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rate()) {
      set_rate(from.rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void CG_UpdateTaxRate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void CG_UpdateTaxRate::CopyFrom(const CG_UpdateTaxRate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool CG_UpdateTaxRate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CG_UpdateTaxRate::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void CG_UpdateTaxRate::Swap(CG_UpdateTaxRate* other) {
  if (other != this) {
    std::swap(rate_, other->rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata CG_UpdateTaxRate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_UpdateTaxRate_descriptor_;
  metadata.reflection = CG_UpdateTaxRate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CG_CollectGuildTax::CG_CollectGuildTax()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_CollectGuildTax::InitAsDefaultInstance() {
}

CG_CollectGuildTax::CG_CollectGuildTax(const CG_CollectGuildTax& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_CollectGuildTax::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_CollectGuildTax::~CG_CollectGuildTax() {
  SharedDtor();
}

void CG_CollectGuildTax::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CG_CollectGuildTax::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_CollectGuildTax::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_CollectGuildTax_descriptor_;
}

const CG_CollectGuildTax& CG_CollectGuildTax::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCapturePoint_2eproto();
  return *default_instance_;
}

CG_CollectGuildTax* CG_CollectGuildTax::default_instance_ = NULL;

CG_CollectGuildTax* CG_CollectGuildTax::New() const {
  return new CG_CollectGuildTax;
}

void CG_CollectGuildTax::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool CG_CollectGuildTax::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void CG_CollectGuildTax::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_CollectGuildTax::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_CollectGuildTax::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_CollectGuildTax::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_CollectGuildTax* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_CollectGuildTax*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void CG_CollectGuildTax::MergeFrom(const CG_CollectGuildTax& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void CG_CollectGuildTax::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void CG_CollectGuildTax::CopyFrom(const CG_CollectGuildTax& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool CG_CollectGuildTax::IsInitialized() const {

  return true;
}

void CG_CollectGuildTax::SetInitialized() {

  return;
}

void CG_CollectGuildTax::Swap(CG_CollectGuildTax* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata CG_CollectGuildTax::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_CollectGuildTax_descriptor_;
  metadata.reflection = CG_CollectGuildTax_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GC_GuildCapturePoint::kChapterIdFieldNumber;
const int GC_GuildCapturePoint::kStrongHoldsFieldNumber;
const int GC_GuildCapturePoint::kHookUsersFieldNumber;
const int GC_GuildCapturePoint::kTaxFieldNumber;
const int GC_GuildCapturePoint::kTaxRateFieldNumber;
#endif  // !_MSC_VER

GC_GuildCapturePoint::GC_GuildCapturePoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GC_GuildCapturePoint::InitAsDefaultInstance() {
}

GC_GuildCapturePoint::GC_GuildCapturePoint(const GC_GuildCapturePoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GC_GuildCapturePoint::SharedCtor() {
  _cached_size_ = 0;
  chapter_id_ = 0;
  hook_users_ = 0;
  tax_ = 0;
  tax_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GC_GuildCapturePoint::~GC_GuildCapturePoint() {
  SharedDtor();
}

void GC_GuildCapturePoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GC_GuildCapturePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GC_GuildCapturePoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GC_GuildCapturePoint_descriptor_;
}

const GC_GuildCapturePoint& GC_GuildCapturePoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCapturePoint_2eproto();
  return *default_instance_;
}

GC_GuildCapturePoint* GC_GuildCapturePoint::default_instance_ = NULL;

GC_GuildCapturePoint* GC_GuildCapturePoint::New() const {
  return new GC_GuildCapturePoint;
}

void GC_GuildCapturePoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chapter_id_ = 0;
    hook_users_ = 0;
    tax_ = 0;
    tax_rate_ = 0;
  }
  strong_holds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GC_GuildCapturePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chapter_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapter_id_)));
          set_has_chapter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strong_holds;
        break;
      }

      // repeated .Packet.StrongHoldData strong_holds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strong_holds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_strong_holds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strong_holds;
        if (input->ExpectTag(24)) goto parse_hook_users;
        break;
      }

      // required int32 hook_users = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hook_users:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hook_users_)));
          set_has_hook_users();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tax;
        break;
      }

      // required int32 tax = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tax_)));
          set_has_tax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tax_rate;
        break;
      }

      // required int32 tax_rate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tax_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tax_rate_)));
          set_has_tax_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GC_GuildCapturePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 chapter_id = 1;
  if (has_chapter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chapter_id(), output);
  }

  // repeated .Packet.StrongHoldData strong_holds = 2;
  for (int i = 0; i < this->strong_holds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->strong_holds(i), output);
  }

  // required int32 hook_users = 3;
  if (has_hook_users()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hook_users(), output);
  }

  // required int32 tax = 4;
  if (has_tax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tax(), output);
  }

  // required int32 tax_rate = 5;
  if (has_tax_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tax_rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GC_GuildCapturePoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 chapter_id = 1;
  if (has_chapter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chapter_id(), target);
  }

  // repeated .Packet.StrongHoldData strong_holds = 2;
  for (int i = 0; i < this->strong_holds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->strong_holds(i), target);
  }

  // required int32 hook_users = 3;
  if (has_hook_users()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hook_users(), target);
  }

  // required int32 tax = 4;
  if (has_tax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tax(), target);
  }

  // required int32 tax_rate = 5;
  if (has_tax_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tax_rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GC_GuildCapturePoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 chapter_id = 1;
    if (has_chapter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapter_id());
    }

    // required int32 hook_users = 3;
    if (has_hook_users()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hook_users());
    }

    // required int32 tax = 4;
    if (has_tax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tax());
    }

    // required int32 tax_rate = 5;
    if (has_tax_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tax_rate());
    }

  }
  // repeated .Packet.StrongHoldData strong_holds = 2;
  total_size += 1 * this->strong_holds_size();
  for (int i = 0; i < this->strong_holds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->strong_holds(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GC_GuildCapturePoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GC_GuildCapturePoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GC_GuildCapturePoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GC_GuildCapturePoint::MergeFrom(const GC_GuildCapturePoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  strong_holds_.MergeFrom(from.strong_holds_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapter_id()) {
      set_chapter_id(from.chapter_id());
    }
    if (from.has_hook_users()) {
      set_hook_users(from.hook_users());
    }
    if (from.has_tax()) {
      set_tax(from.tax());
    }
    if (from.has_tax_rate()) {
      set_tax_rate(from.tax_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GC_GuildCapturePoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GC_GuildCapturePoint::CopyFrom(const GC_GuildCapturePoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GC_GuildCapturePoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;

  for (int i = 0; i < strong_holds_size(); i++) {
    if (!this->strong_holds(i).IsInitialized()) return false;
  }
  return true;
}

void GC_GuildCapturePoint::SetInitialized() {
  _has_bits_[0] |= 0x0000001d;

  for (int i = 0; i < strong_holds_size(); i++) {
    this->mutable_strong_holds(i)->SetInitialized();
  }
  return;
}

void GC_GuildCapturePoint::Swap(GC_GuildCapturePoint* other) {
  if (other != this) {
    std::swap(chapter_id_, other->chapter_id_);
    strong_holds_.Swap(&other->strong_holds_);
    std::swap(hook_users_, other->hook_users_);
    std::swap(tax_, other->tax_);
    std::swap(tax_rate_, other->tax_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GC_GuildCapturePoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GC_GuildCapturePoint_descriptor_;
  metadata.reflection = GC_GuildCapturePoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CG_StartChallengeCapturePoint::kChapterIdFieldNumber;
const int CG_StartChallengeCapturePoint::kTargetGuildGuidFieldNumber;
#endif  // !_MSC_VER

CG_StartChallengeCapturePoint::CG_StartChallengeCapturePoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_StartChallengeCapturePoint::InitAsDefaultInstance() {
}

CG_StartChallengeCapturePoint::CG_StartChallengeCapturePoint(const CG_StartChallengeCapturePoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_StartChallengeCapturePoint::SharedCtor() {
  _cached_size_ = 0;
  chapter_id_ = 0;
  target_guild_guid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_StartChallengeCapturePoint::~CG_StartChallengeCapturePoint() {
  SharedDtor();
}

void CG_StartChallengeCapturePoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CG_StartChallengeCapturePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_StartChallengeCapturePoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_StartChallengeCapturePoint_descriptor_;
}

const CG_StartChallengeCapturePoint& CG_StartChallengeCapturePoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCapturePoint_2eproto();
  return *default_instance_;
}

CG_StartChallengeCapturePoint* CG_StartChallengeCapturePoint::default_instance_ = NULL;

CG_StartChallengeCapturePoint* CG_StartChallengeCapturePoint::New() const {
  return new CG_StartChallengeCapturePoint;
}

void CG_StartChallengeCapturePoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chapter_id_ = 0;
    target_guild_guid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool CG_StartChallengeCapturePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chapter_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chapter_id_)));
          set_has_chapter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target_guild_guid;
        break;
      }

      // required int32 target_guild_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_guild_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_guild_guid_)));
          set_has_target_guild_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void CG_StartChallengeCapturePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 chapter_id = 1;
  if (has_chapter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chapter_id(), output);
  }

  // required int32 target_guild_guid = 2;
  if (has_target_guild_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->target_guild_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_StartChallengeCapturePoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 chapter_id = 1;
  if (has_chapter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chapter_id(), target);
  }

  // required int32 target_guild_guid = 2;
  if (has_target_guild_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->target_guild_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_StartChallengeCapturePoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 chapter_id = 1;
    if (has_chapter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapter_id());
    }

    // required int32 target_guild_guid = 2;
    if (has_target_guild_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_guild_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_StartChallengeCapturePoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_StartChallengeCapturePoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_StartChallengeCapturePoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void CG_StartChallengeCapturePoint::MergeFrom(const CG_StartChallengeCapturePoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapter_id()) {
      set_chapter_id(from.chapter_id());
    }
    if (from.has_target_guild_guid()) {
      set_target_guild_guid(from.target_guild_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void CG_StartChallengeCapturePoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void CG_StartChallengeCapturePoint::CopyFrom(const CG_StartChallengeCapturePoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool CG_StartChallengeCapturePoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CG_StartChallengeCapturePoint::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void CG_StartChallengeCapturePoint::Swap(CG_StartChallengeCapturePoint* other) {
  if (other != this) {
    std::swap(chapter_id_, other->chapter_id_);
    std::swap(target_guild_guid_, other->target_guild_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata CG_StartChallengeCapturePoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_StartChallengeCapturePoint_descriptor_;
  metadata.reflection = CG_StartChallengeCapturePoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CG_UpdateStrongHold::kStrongHoldsFieldNumber;
#endif  // !_MSC_VER

CG_UpdateStrongHold::CG_UpdateStrongHold()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CG_UpdateStrongHold::InitAsDefaultInstance() {
}

CG_UpdateStrongHold::CG_UpdateStrongHold(const CG_UpdateStrongHold& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CG_UpdateStrongHold::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CG_UpdateStrongHold::~CG_UpdateStrongHold() {
  SharedDtor();
}

void CG_UpdateStrongHold::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CG_UpdateStrongHold::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CG_UpdateStrongHold::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CG_UpdateStrongHold_descriptor_;
}

const CG_UpdateStrongHold& CG_UpdateStrongHold::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildCapturePoint_2eproto();
  return *default_instance_;
}

CG_UpdateStrongHold* CG_UpdateStrongHold::default_instance_ = NULL;

CG_UpdateStrongHold* CG_UpdateStrongHold::New() const {
  return new CG_UpdateStrongHold;
}

void CG_UpdateStrongHold::Clear() {
  strong_holds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool CG_UpdateStrongHold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.StrongHoldData strong_holds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strong_holds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_strong_holds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_strong_holds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void CG_UpdateStrongHold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.StrongHoldData strong_holds = 1;
  for (int i = 0; i < this->strong_holds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->strong_holds(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CG_UpdateStrongHold::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.StrongHoldData strong_holds = 1;
  for (int i = 0; i < this->strong_holds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->strong_holds(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CG_UpdateStrongHold::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.StrongHoldData strong_holds = 1;
  total_size += 1 * this->strong_holds_size();
  for (int i = 0; i < this->strong_holds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->strong_holds(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CG_UpdateStrongHold::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CG_UpdateStrongHold* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CG_UpdateStrongHold*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void CG_UpdateStrongHold::MergeFrom(const CG_UpdateStrongHold& from) {
  GOOGLE_CHECK_NE(&from, this);
  strong_holds_.MergeFrom(from.strong_holds_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void CG_UpdateStrongHold::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void CG_UpdateStrongHold::CopyFrom(const CG_UpdateStrongHold& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool CG_UpdateStrongHold::IsInitialized() const {

  for (int i = 0; i < strong_holds_size(); i++) {
    if (!this->strong_holds(i).IsInitialized()) return false;
  }
  return true;
}

void CG_UpdateStrongHold::SetInitialized() {

  for (int i = 0; i < strong_holds_size(); i++) {
    this->mutable_strong_holds(i)->SetInitialized();
  }
  return;
}

void CG_UpdateStrongHold::Swap(CG_UpdateStrongHold* other) {
  if (other != this) {
    strong_holds_.Swap(&other->strong_holds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata CG_UpdateStrongHold::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CG_UpdateStrongHold_descriptor_;
  metadata.reflection = CG_UpdateStrongHold_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

// @@protoc_insertion_point(global_scope)
