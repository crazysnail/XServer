// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MonsterConfig.proto
#include "MonsterConfig.pb.h"
#include "MonsterConfig.proto.fflua.h"
namespace Config {
bool MonsterConfig_fflua_reg(lua_State* state)
{
//for decltype
	MonsterConfig* message(nullptr);
	message;
	ff::fflua_register_t<MonsterConfig, ctor()>(state, "MonsterConfig", "google::protobuf::Message")
		// required int32 id = 1;
		.def(&MonsterConfig::id, "id")
		.def(&MonsterConfig::set_id, "set_id")
		// required float scale = 2;
		.def(&MonsterConfig::scale, "scale")
		.def(&MonsterConfig::set_scale, "set_scale")
		// required float radius = 3;
		.def(&MonsterConfig::radius, "radius")
		.def(&MonsterConfig::set_radius, "set_radius")
		// required .Config.NpcType npc_type = 4;
		.def(&MonsterConfig::npc_type, "npc_type")
		.def(&MonsterConfig::set_npc_type, "set_npc_type")
		// required .Config.MonsterType monster_type = 5;
		.def(&MonsterConfig::monster_type, "monster_type")
		.def(&MonsterConfig::set_monster_type, "set_monster_type")
		// required int32 rage_time = 6;
		.def(&MonsterConfig::rage_time, "rage_time")
		.def(&MonsterConfig::set_rage_time, "set_rage_time")
		// required int32 level = 7;
		.def(&MonsterConfig::level, "level")
		.def(&MonsterConfig::set_level, "set_level")
		// required int32 exp_drop = 8;
		.def(&MonsterConfig::exp_drop, "exp_drop")
		.def(&MonsterConfig::set_exp_drop, "set_exp_drop")
		// required int32 gold_drop = 9;
		.def(&MonsterConfig::gold_drop, "gold_drop")
		.def(&MonsterConfig::set_gold_drop, "set_gold_drop")
		// required .Packet.BattleInfo battle_info = 10;
		.def(&MonsterConfig::battle_info, "battle_info")
		.def(&MonsterConfig::mutable_battle_info, "mutable_battle_info")
		// repeated int32 skill_ids = 11;
		.def(&MonsterConfig::skill_ids_size, "skill_ids_size")
		.def<decltype(message->skill_ids(0)) (MonsterConfig::*)(int) const>(&MonsterConfig::skill_ids, "skill_ids")
		.def<void(MonsterConfig::*)(int, const decltype(message->skill_ids(0)))>(&MonsterConfig::set_skill_ids, "set_skill_ids")
		.def(&MonsterConfig::add_skill_ids, "add_skill_ids")
		// required int32 ai_strategy = 12;
		.def(&MonsterConfig::ai_strategy, "ai_strategy")
		.def(&MonsterConfig::set_ai_strategy, "set_ai_strategy")
		// required int32 client_res_id = 13;
		.def(&MonsterConfig::client_res_id, "client_res_id")
		.def(&MonsterConfig::set_client_res_id, "set_client_res_id")
		// required int32 monster_class = 14;
		.def(&MonsterConfig::monster_class, "monster_class")
		.def(&MonsterConfig::set_monster_class, "set_monster_class")
		// required int32 adapt_group = 15;
		.def(&MonsterConfig::adapt_group, "adapt_group")
		.def(&MonsterConfig::set_adapt_group, "set_adapt_group")
		// required int32 life_time = 16;
		.def(&MonsterConfig::life_time, "life_time")
		.def(&MonsterConfig::set_life_time, "set_life_time")
		.def(&MonsterConfig::ByteSize, "ByteSize")
		.def(&MonsterConfig::SetInitialized, "SetInitialized")
		;
	return true;
}
bool MonsterAttribute_fflua_reg(lua_State* state)
{
//for decltype
	MonsterAttribute* message(nullptr);
	message;
	ff::fflua_register_t<MonsterAttribute, ctor()>(state, "MonsterAttribute", "google::protobuf::Message")
		// required int32 group = 1;
		.def(&MonsterAttribute::group, "group")
		.def(&MonsterAttribute::set_group, "set_group")
		// required int32 level = 2;
		.def(&MonsterAttribute::level, "level")
		.def(&MonsterAttribute::set_level, "set_level")
		// required .Packet.BattleInfo battle_info = 3;
		.def(&MonsterAttribute::battle_info, "battle_info")
		.def(&MonsterAttribute::mutable_battle_info, "mutable_battle_info")
		.def(&MonsterAttribute::ByteSize, "ByteSize")
		.def(&MonsterAttribute::SetInitialized, "SetInitialized")
		;
	return true;
}
bool MonsterDefine_fflua_reg(lua_State* state)
{
//for decltype
	MonsterDefine* message(nullptr);
	message;
	ff::fflua_register_t<MonsterDefine, ctor()>(state, "MonsterDefine", "google::protobuf::Message")
		// required int32 id = 1;
		.def(&MonsterDefine::id, "id")
		.def(&MonsterDefine::set_id, "set_id")
		// required int32 loc = 2;
		.def(&MonsterDefine::loc, "loc")
		.def(&MonsterDefine::set_loc, "set_loc")
		.def(&MonsterDefine::ByteSize, "ByteSize")
		.def(&MonsterDefine::SetInitialized, "SetInitialized")
		;
	return true;
}
bool MonsterGroup_fflua_reg(lua_State* state)
{
//for decltype
	MonsterGroup* message(nullptr);
	message;
	ff::fflua_register_t<MonsterGroup, ctor()>(state, "MonsterGroup", "google::protobuf::Message")
		// required int32 id = 1;
		.def(&MonsterGroup::id, "id")
		.def(&MonsterGroup::set_id, "set_id")
		// required int32 mission_id = 2;
		.def(&MonsterGroup::mission_id, "mission_id")
		.def(&MonsterGroup::set_mission_id, "set_mission_id")
		// repeated .Config.MonsterDefine monsters = 4;
		.def(&MonsterGroup::monsters_size, "monsters_size")
		.def<decltype(message->monsters(0)) (MonsterGroup::*)(int) const>(&MonsterGroup::monsters, "monsters")
		.def<decltype(message->mutable_monsters(0)) (MonsterGroup::*)(int)>(&MonsterGroup::mutable_monsters, "mutable_monsters")
		.def(&MonsterGroup::add_monsters, "add_monsters")
		// repeated int32 package_id = 5;
		.def(&MonsterGroup::package_id_size, "package_id_size")
		.def<decltype(message->package_id(0)) (MonsterGroup::*)(int) const>(&MonsterGroup::package_id, "package_id")
		.def<void(MonsterGroup::*)(int, const decltype(message->package_id(0)))>(&MonsterGroup::set_package_id, "set_package_id")
		.def(&MonsterGroup::add_package_id, "add_package_id")
		// repeated int32 package_weight = 6;
		.def(&MonsterGroup::package_weight_size, "package_weight_size")
		.def<decltype(message->package_weight(0)) (MonsterGroup::*)(int) const>(&MonsterGroup::package_weight, "package_weight")
		.def<void(MonsterGroup::*)(int, const decltype(message->package_weight(0)))>(&MonsterGroup::set_package_weight, "set_package_weight")
		.def(&MonsterGroup::add_package_weight, "add_package_weight")
		.def(&MonsterGroup::ByteSize, "ByteSize")
		.def(&MonsterGroup::SetInitialized, "SetInitialized")
		;
	return true;
}
bool MonsterConfig_fflua_regist_all(lua_State* state)
{
	MonsterConfig_fflua_reg(state);
	MonsterAttribute_fflua_reg(state);
	MonsterDefine_fflua_reg(state);
	MonsterGroup_fflua_reg(state);
	return true;
}
}
