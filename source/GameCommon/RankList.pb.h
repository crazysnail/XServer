// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RankList.proto

#ifndef PROTOBUF_RankList_2eproto__INCLUDED
#define PROTOBUF_RankList_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "AllPacketEnum.pb.h"
// @@protoc_insertion_point(includes)

namespace Packet {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RankList_2eproto();
void protobuf_AssignDesc_RankList_2eproto();
void protobuf_ShutdownFile_RankList_2eproto();

class TopRankData;
class TopRankDataReq;
class TopRankDataReply;

// ===================================================================

class TopRankData : public ::google::protobuf::Message {
 public:
  TopRankData();
  virtual ~TopRankData();

  TopRankData(const TopRankData& from);

  inline TopRankData& operator=(const TopRankData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopRankData& default_instance();

  void Swap(TopRankData* other);

  // implements Message ----------------------------------------------

  TopRankData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopRankData& from);
  void MergeFrom(const TopRankData& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 playerguid = 1;
  inline bool has_playerguid() const;
  inline void clear_playerguid();
  static const int kPlayerguidFieldNumber = 1;
  inline ::google::protobuf::uint64 playerguid() const;
  inline void set_playerguid(::google::protobuf::uint64 value);

  // required string playername = 2;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayernameFieldNumber = 2;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // required int32 init_actor_id = 3;
  inline bool has_init_actor_id() const;
  inline void clear_init_actor_id();
  static const int kInitActorIdFieldNumber = 3;
  inline ::google::protobuf::int32 init_actor_id() const;
  inline void set_init_actor_id(::google::protobuf::int32 value);

  // required int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // repeated int32 value = 5;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 5;
  inline ::google::protobuf::int32 value(int index) const;
  inline void set_value(int index, ::google::protobuf::int32 value);
  inline void add_value(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:Packet.TopRankData)
 private:
  inline void set_has_playerguid();
  inline void clear_has_playerguid();
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_init_actor_id();
  inline void clear_has_init_actor_id();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 playerguid_;
  ::std::string* playername_;
  ::google::protobuf::int32 init_actor_id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_RankList_2eproto();
  friend void protobuf_AssignDesc_RankList_2eproto();
  friend void protobuf_ShutdownFile_RankList_2eproto();

  void InitAsDefaultInstance();
  static TopRankData* default_instance_;
};
// -------------------------------------------------------------------

class TopRankDataReq : public ::google::protobuf::Message {
 public:
  TopRankDataReq();
  virtual ~TopRankDataReq();

  TopRankDataReq(const TopRankDataReq& from);

  inline TopRankDataReq& operator=(const TopRankDataReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopRankDataReq& default_instance();

  void Swap(TopRankDataReq* other);

  // implements Message ----------------------------------------------

  TopRankDataReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopRankDataReq& from);
  void MergeFrom(const TopRankDataReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Packet.RankGroup group = 1;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 1;
  inline ::Packet::RankGroup group() const;
  inline void set_group(::Packet::RankGroup value);

  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.TopRankDataReq)
 private:
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int group_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_RankList_2eproto();
  friend void protobuf_AssignDesc_RankList_2eproto();
  friend void protobuf_ShutdownFile_RankList_2eproto();

  void InitAsDefaultInstance();
  static TopRankDataReq* default_instance_;
};
// -------------------------------------------------------------------

class TopRankDataReply : public ::google::protobuf::Message {
 public:
  TopRankDataReply();
  virtual ~TopRankDataReply();

  TopRankDataReply(const TopRankDataReply& from);

  inline TopRankDataReply& operator=(const TopRankDataReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopRankDataReply& default_instance();

  void Swap(TopRankDataReply* other);

  // implements Message ----------------------------------------------

  TopRankDataReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopRankDataReply& from);
  void MergeFrom(const TopRankDataReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Packet.TopRankData list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::Packet::TopRankData& list(int index) const;
  inline ::Packet::TopRankData* mutable_list(int index);
  inline ::Packet::TopRankData* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::TopRankData >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::TopRankData >*
      mutable_list();

  // required int32 refreshtime = 2;
  inline bool has_refreshtime() const;
  inline void clear_refreshtime();
  static const int kRefreshtimeFieldNumber = 2;
  inline ::google::protobuf::int32 refreshtime() const;
  inline void set_refreshtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.TopRankDataReply)
 private:
  inline void set_has_refreshtime();
  inline void clear_has_refreshtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::TopRankData > list_;
  ::google::protobuf::int32 refreshtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_RankList_2eproto();
  friend void protobuf_AssignDesc_RankList_2eproto();
  friend void protobuf_ShutdownFile_RankList_2eproto();

  void InitAsDefaultInstance();
  static TopRankDataReply* default_instance_;
};
// ===================================================================


// ===================================================================

// TopRankData

// required fixed64 playerguid = 1;
inline bool TopRankData::has_playerguid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TopRankData::set_has_playerguid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TopRankData::clear_has_playerguid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TopRankData::clear_playerguid() {
  playerguid_ = GOOGLE_ULONGLONG(0);
  clear_has_playerguid();
  SetDirty();
}
inline ::google::protobuf::uint64 TopRankData::playerguid() const {
  return playerguid_;
}
inline void TopRankData::set_playerguid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_playerguid();
  playerguid_ = value;
}

// required string playername = 2;
inline bool TopRankData::has_playername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TopRankData::set_has_playername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TopRankData::clear_has_playername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TopRankData::clear_playername() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    playername_->clear();
  }
  clear_has_playername();
  SetDirty();
}
inline const ::std::string& TopRankData::playername() const {
  return *playername_;
}
inline void TopRankData::set_playername(const ::std::string& value) {
  SetDirty();
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void TopRankData::set_playername(const char* value) {
  SetDirty();
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void TopRankData::set_playername(const char* value, size_t size) {
  SetDirty();
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TopRankData::mutable_playername() {
  SetDirty();
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  return playername_;
}
inline ::std::string* TopRankData::release_playername() {
  SetDirty();
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TopRankData::set_allocated_playername(::std::string* playername) {
  SetDirty();
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 init_actor_id = 3;
inline bool TopRankData::has_init_actor_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TopRankData::set_has_init_actor_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TopRankData::clear_has_init_actor_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TopRankData::clear_init_actor_id() {
  init_actor_id_ = 0;
  clear_has_init_actor_id();
  SetDirty();
}
inline ::google::protobuf::int32 TopRankData::init_actor_id() const {
  return init_actor_id_;
}
inline void TopRankData::set_init_actor_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_init_actor_id();
  init_actor_id_ = value;
}

// required int32 level = 4;
inline bool TopRankData::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TopRankData::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TopRankData::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TopRankData::clear_level() {
  level_ = 0;
  clear_has_level();
  SetDirty();
}
inline ::google::protobuf::int32 TopRankData::level() const {
  return level_;
}
inline void TopRankData::set_level(::google::protobuf::int32 value) {
  SetDirty();
  set_has_level();
  level_ = value;
}

// repeated int32 value = 5;
inline int TopRankData::value_size() const {
  return value_.size();
}
inline void TopRankData::clear_value() {
  value_.Clear();
  SetDirty();
}
inline ::google::protobuf::int32 TopRankData::value(int index) const {
  return value_.Get(index);
}
inline void TopRankData::set_value(int index, ::google::protobuf::int32 value) {
  SetDirty();
  value_.Set(index, value);
}
inline void TopRankData::add_value(::google::protobuf::int32 value) {
  SetDirty();
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TopRankData::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TopRankData::mutable_value() {
  SetDirty();
  return &value_;
}

// -------------------------------------------------------------------

// TopRankDataReq

// required .Packet.RankGroup group = 1;
inline bool TopRankDataReq::has_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TopRankDataReq::set_has_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TopRankDataReq::clear_has_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TopRankDataReq::clear_group() {
  group_ = 1;
  clear_has_group();
  SetDirty();
}
inline ::Packet::RankGroup TopRankDataReq::group() const {
  return static_cast< ::Packet::RankGroup >(group_);
}
inline void TopRankDataReq::set_group(::Packet::RankGroup value) {
  assert(::Packet::RankGroup_IsValid(value));
  SetDirty();
  set_has_group();
  group_ = value;
}

// required int32 type = 2;
inline bool TopRankDataReq::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TopRankDataReq::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TopRankDataReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TopRankDataReq::clear_type() {
  type_ = 0;
  clear_has_type();
  SetDirty();
}
inline ::google::protobuf::int32 TopRankDataReq::type() const {
  return type_;
}
inline void TopRankDataReq::set_type(::google::protobuf::int32 value) {
  SetDirty();
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// TopRankDataReply

// repeated .Packet.TopRankData list = 1;
inline int TopRankDataReply::list_size() const {
  return list_.size();
}
inline void TopRankDataReply::clear_list() {
  list_.Clear();
  SetDirty();
}
inline const ::Packet::TopRankData& TopRankDataReply::list(int index) const {
  return list_.Get(index);
}
inline ::Packet::TopRankData* TopRankDataReply::mutable_list(int index) {
  SetDirty();
  return list_.Mutable(index);
}
inline ::Packet::TopRankData* TopRankDataReply::add_list() {
  SetDirty();
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::TopRankData >&
TopRankDataReply::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::TopRankData >*
TopRankDataReply::mutable_list() {
  SetDirty();
  return &list_;
}

// required int32 refreshtime = 2;
inline bool TopRankDataReply::has_refreshtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TopRankDataReply::set_has_refreshtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TopRankDataReply::clear_has_refreshtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TopRankDataReply::clear_refreshtime() {
  refreshtime_ = 0;
  clear_has_refreshtime();
  SetDirty();
}
inline ::google::protobuf::int32 TopRankDataReply::refreshtime() const {
  return refreshtime_;
}
inline void TopRankDataReply::set_refreshtime(::google::protobuf::int32 value) {
  SetDirty();
  set_has_refreshtime();
  refreshtime_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RankList_2eproto__INCLUDED
