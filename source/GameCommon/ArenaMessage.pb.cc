// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ArenaMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ArenaMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Packet {

namespace {

const ::google::protobuf::Descriptor* ArenaMainData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaMainData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaPlayerDataChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaPlayerDataChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaChallengePlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaChallengePlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaPanelOpen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaPanelOpen_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaRefreshTarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaRefreshTarget_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaPanelClose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaPanelClose_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaBuyChallengeCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaBuyChallengeCount_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ArenaMessage_2eproto() {
  protobuf_AddDesc_ArenaMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ArenaMessage.proto");
  GOOGLE_CHECK(file != NULL);
  ArenaMainData_descriptor_ = file->message_type(0);
  static const int ArenaMainData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaMainData, targets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaMainData, my_self_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaMainData, logs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaMainData, last_reload_tick_),
  };
  ArenaMainData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaMainData_descriptor_,
      ArenaMainData::default_instance_,
      ArenaMainData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaMainData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaMainData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaMainData));
  ArenaPlayer_descriptor_ = file->message_type(1);
  static const int ArenaPlayer_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayer, player_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayer, actors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayer, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayer, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayer, yesterday_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayer, in_battle_),
  };
  ArenaPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaPlayer_descriptor_,
      ArenaPlayer::default_instance_,
      ArenaPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaPlayer));
  ArenaPlayerInfo_descriptor_ = file->message_type(2);
  static const int ArenaPlayerInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayerInfo, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayerInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayerInfo, score_),
  };
  ArenaPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaPlayerInfo_descriptor_,
      ArenaPlayerInfo::default_instance_,
      ArenaPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaPlayerInfo));
  ArenaLog_descriptor_ = file->message_type(3);
  static const int ArenaLog_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaLog, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaLog, replay_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaLog, win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaLog, rank_change_),
  };
  ArenaLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaLog_descriptor_,
      ArenaLog::default_instance_,
      ArenaLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaLog));
  ArenaPlayerDataChange_descriptor_ = file->message_type(4);
  static const int ArenaPlayerDataChange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayerDataChange, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayerDataChange, player_),
  };
  ArenaPlayerDataChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaPlayerDataChange_descriptor_,
      ArenaPlayerDataChange::default_instance_,
      ArenaPlayerDataChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayerDataChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPlayerDataChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaPlayerDataChange));
  ArenaChallengePlayer_descriptor_ = file->message_type(5);
  static const int ArenaChallengePlayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChallengePlayer, target_guid_),
  };
  ArenaChallengePlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaChallengePlayer_descriptor_,
      ArenaChallengePlayer::default_instance_,
      ArenaChallengePlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChallengePlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChallengePlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaChallengePlayer));
  ArenaPanelOpen_descriptor_ = file->message_type(6);
  static const int ArenaPanelOpen_offsets_[1] = {
  };
  ArenaPanelOpen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaPanelOpen_descriptor_,
      ArenaPanelOpen::default_instance_,
      ArenaPanelOpen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPanelOpen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPanelOpen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaPanelOpen));
  ArenaRefreshTarget_descriptor_ = file->message_type(7);
  static const int ArenaRefreshTarget_offsets_[1] = {
  };
  ArenaRefreshTarget_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaRefreshTarget_descriptor_,
      ArenaRefreshTarget::default_instance_,
      ArenaRefreshTarget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRefreshTarget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRefreshTarget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaRefreshTarget));
  ArenaPanelClose_descriptor_ = file->message_type(8);
  static const int ArenaPanelClose_offsets_[1] = {
  };
  ArenaPanelClose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaPanelClose_descriptor_,
      ArenaPanelClose::default_instance_,
      ArenaPanelClose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPanelClose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaPanelClose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaPanelClose));
  ArenaBuyChallengeCount_descriptor_ = file->message_type(9);
  static const int ArenaBuyChallengeCount_offsets_[1] = {
  };
  ArenaBuyChallengeCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaBuyChallengeCount_descriptor_,
      ArenaBuyChallengeCount::default_instance_,
      ArenaBuyChallengeCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaBuyChallengeCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaBuyChallengeCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaBuyChallengeCount));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ArenaMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaMainData_descriptor_, &ArenaMainData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaPlayer_descriptor_, &ArenaPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaPlayerInfo_descriptor_, &ArenaPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaLog_descriptor_, &ArenaLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaPlayerDataChange_descriptor_, &ArenaPlayerDataChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaChallengePlayer_descriptor_, &ArenaChallengePlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaPanelOpen_descriptor_, &ArenaPanelOpen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaRefreshTarget_descriptor_, &ArenaRefreshTarget::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaPanelClose_descriptor_, &ArenaPanelClose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaBuyChallengeCount_descriptor_, &ArenaBuyChallengeCount::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ArenaMessage_2eproto() {
  delete ArenaMainData::default_instance_;
  delete ArenaMainData_reflection_;
  delete ArenaPlayer::default_instance_;
  delete ArenaPlayer_reflection_;
  delete ArenaPlayerInfo::default_instance_;
  delete ArenaPlayerInfo_reflection_;
  delete ArenaLog::default_instance_;
  delete ArenaLog_reflection_;
  delete ArenaPlayerDataChange::default_instance_;
  delete ArenaPlayerDataChange_reflection_;
  delete ArenaChallengePlayer::default_instance_;
  delete ArenaChallengePlayer_reflection_;
  delete ArenaPanelOpen::default_instance_;
  delete ArenaPanelOpen_reflection_;
  delete ArenaRefreshTarget::default_instance_;
  delete ArenaRefreshTarget_reflection_;
  delete ArenaPanelClose::default_instance_;
  delete ArenaPanelClose_reflection_;
  delete ArenaBuyChallengeCount::default_instance_;
  delete ArenaBuyChallengeCount_reflection_;
}

void protobuf_AddDesc_ArenaMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Packet::protobuf_AddDesc_ProtoBufOption_2eproto();
  ::Packet::protobuf_AddDesc_PlayerBasicInfo_2eproto();
  ::Packet::protobuf_AddDesc_ActorBasicInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ArenaMessage.proto\022\006Packet\032\024ProtoBufOp"
    "tion.proto\032\025PlayerBasicInfo.proto\032\024Actor"
    "BasicInfo.proto\"\225\001\n\rArenaMainData\022$\n\007tar"
    "gets\030\001 \003(\0132\023.Packet.ArenaPlayer\022$\n\007my_se"
    "lf\030\002 \002(\0132\023.Packet.ArenaPlayer\022\036\n\004logs\030\003 "
    "\003(\0132\020.Packet.ArenaLog\022\030\n\020last_reload_tic"
    "k\030\004 \002(\006\"\251\001\n\013ArenaPlayer\022,\n\013player_info\030\001"
    " \002(\0132\027.Packet.ArenaPlayerInfo\022%\n\006actors\030"
    "\002 \003(\0132\025.Packet.ActorFullInfo\022\014\n\004guid\030\003 \002"
    "(\006\022\014\n\004rank\030\004 \002(\005\022\026\n\016yesterday_rank\030\005 \002(\005"
    "\022\021\n\tin_battle\030\006 \002(\005\"K\n\017ArenaPlayerInfo\022\014"
    "\n\004icon\030\001 \002(\t\022\r\n\005level\030\002 \002(\005\022\014\n\004name\030\003 \002("
    "\t\022\r\n\005score\030\004 \002(\005\"f\n\010ArenaLog\022#\n\006player\030\001"
    " \002(\0132\023.Packet.ArenaPlayer\022\023\n\013replay_guid"
    "\030\002 \002(\006\022\013\n\003win\030\003 \002(\010\022\023\n\013rank_change\030\004 \002(\005"
    "\"J\n\025ArenaPlayerDataChange\022\014\n\004guid\030\001 \002(\006\022"
    "#\n\006player\030\002 \002(\0132\023.Packet.ArenaPlayer\"+\n\024"
    "ArenaChallengePlayer\022\023\n\013target_guid\030\001 \002("
    "\006\"\020\n\016ArenaPanelOpen\"\024\n\022ArenaRefreshTarge"
    "t\"\021\n\017ArenaPanelClose\"\030\n\026ArenaBuyChalleng"
    "eCount", 806);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ArenaMessage.proto", &protobuf_RegisterTypes);
  ArenaMainData::default_instance_ = new ArenaMainData();
  ArenaPlayer::default_instance_ = new ArenaPlayer();
  ArenaPlayerInfo::default_instance_ = new ArenaPlayerInfo();
  ArenaLog::default_instance_ = new ArenaLog();
  ArenaPlayerDataChange::default_instance_ = new ArenaPlayerDataChange();
  ArenaChallengePlayer::default_instance_ = new ArenaChallengePlayer();
  ArenaPanelOpen::default_instance_ = new ArenaPanelOpen();
  ArenaRefreshTarget::default_instance_ = new ArenaRefreshTarget();
  ArenaPanelClose::default_instance_ = new ArenaPanelClose();
  ArenaBuyChallengeCount::default_instance_ = new ArenaBuyChallengeCount();
  ArenaMainData::default_instance_->InitAsDefaultInstance();
  ArenaPlayer::default_instance_->InitAsDefaultInstance();
  ArenaPlayerInfo::default_instance_->InitAsDefaultInstance();
  ArenaLog::default_instance_->InitAsDefaultInstance();
  ArenaPlayerDataChange::default_instance_->InitAsDefaultInstance();
  ArenaChallengePlayer::default_instance_->InitAsDefaultInstance();
  ArenaPanelOpen::default_instance_->InitAsDefaultInstance();
  ArenaRefreshTarget::default_instance_->InitAsDefaultInstance();
  ArenaPanelClose::default_instance_->InitAsDefaultInstance();
  ArenaBuyChallengeCount::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ArenaMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ArenaMessage_2eproto {
  StaticDescriptorInitializer_ArenaMessage_2eproto() {
    protobuf_AddDesc_ArenaMessage_2eproto();
  }
} static_descriptor_initializer_ArenaMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ArenaMainData::kTargetsFieldNumber;
const int ArenaMainData::kMySelfFieldNumber;
const int ArenaMainData::kLogsFieldNumber;
const int ArenaMainData::kLastReloadTickFieldNumber;
#endif  // !_MSC_VER

ArenaMainData::ArenaMainData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaMainData::InitAsDefaultInstance() {
  my_self_ = const_cast< ::Packet::ArenaPlayer*>(&::Packet::ArenaPlayer::default_instance());
}

ArenaMainData::ArenaMainData(const ArenaMainData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaMainData::SharedCtor() {
  _cached_size_ = 0;
  my_self_ = NULL;
  last_reload_tick_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaMainData::~ArenaMainData() {
  SharedDtor();
}

void ArenaMainData::SharedDtor() {
  if (this != default_instance_) {
    delete my_self_;
  }
}

void ArenaMainData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaMainData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaMainData_descriptor_;
}

const ArenaMainData& ArenaMainData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaMessage_2eproto();
  return *default_instance_;
}

ArenaMainData* ArenaMainData::default_instance_ = NULL;

ArenaMainData* ArenaMainData::New() const {
  return new ArenaMainData;
}

void ArenaMainData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_my_self()) {
      if (my_self_ != NULL) my_self_->::Packet::ArenaPlayer::Clear();
    }
    last_reload_tick_ = GOOGLE_ULONGLONG(0);
  }
  targets_.Clear();
  logs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ArenaMainData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.ArenaPlayer targets = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_targets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_targets;
        if (input->ExpectTag(18)) goto parse_my_self;
        break;
      }

      // required .Packet.ArenaPlayer my_self = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_my_self:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_my_self()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_logs;
        break;
      }

      // repeated .Packet.ArenaLog logs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_logs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_logs;
        if (input->ExpectTag(33)) goto parse_last_reload_tick;
        break;
      }

      // required fixed64 last_reload_tick = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_last_reload_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &last_reload_tick_)));
          set_has_last_reload_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ArenaMainData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.ArenaPlayer targets = 1;
  for (int i = 0; i < this->targets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->targets(i), output);
  }

  // required .Packet.ArenaPlayer my_self = 2;
  if (has_my_self()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->my_self(), output);
  }

  // repeated .Packet.ArenaLog logs = 3;
  for (int i = 0; i < this->logs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->logs(i), output);
  }

  // required fixed64 last_reload_tick = 4;
  if (has_last_reload_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->last_reload_tick(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaMainData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.ArenaPlayer targets = 1;
  for (int i = 0; i < this->targets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->targets(i), target);
  }

  // required .Packet.ArenaPlayer my_self = 2;
  if (has_my_self()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->my_self(), target);
  }

  // repeated .Packet.ArenaLog logs = 3;
  for (int i = 0; i < this->logs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->logs(i), target);
  }

  // required fixed64 last_reload_tick = 4;
  if (has_last_reload_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->last_reload_tick(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaMainData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .Packet.ArenaPlayer my_self = 2;
    if (has_my_self()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->my_self());
    }

    // required fixed64 last_reload_tick = 4;
    if (has_last_reload_tick()) {
      total_size += 1 + 8;
    }

  }
  // repeated .Packet.ArenaPlayer targets = 1;
  total_size += 1 * this->targets_size();
  for (int i = 0; i < this->targets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->targets(i));
  }

  // repeated .Packet.ArenaLog logs = 3;
  total_size += 1 * this->logs_size();
  for (int i = 0; i < this->logs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->logs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaMainData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaMainData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaMainData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ArenaMainData::MergeFrom(const ArenaMainData& from) {
  GOOGLE_CHECK_NE(&from, this);
  targets_.MergeFrom(from.targets_);
  logs_.MergeFrom(from.logs_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_my_self()) {
      mutable_my_self()->::Packet::ArenaPlayer::MergeFrom(from.my_self());
    }
    if (from.has_last_reload_tick()) {
      set_last_reload_tick(from.last_reload_tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ArenaMainData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ArenaMainData::CopyFrom(const ArenaMainData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ArenaMainData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000a) != 0x0000000a) return false;

  for (int i = 0; i < targets_size(); i++) {
    if (!this->targets(i).IsInitialized()) return false;
  }
  if (has_my_self()) {
    if (!this->my_self().IsInitialized()) return false;
  }
  for (int i = 0; i < logs_size(); i++) {
    if (!this->logs(i).IsInitialized()) return false;
  }
  return true;
}

void ArenaMainData::SetInitialized() {
  _has_bits_[0] |= 0x0000000a;

  for (int i = 0; i < targets_size(); i++) {
    this->mutable_targets(i)->SetInitialized();
  }
  if (has_my_self()) {
    this->mutable_my_self()->SetInitialized();
  }
  for (int i = 0; i < logs_size(); i++) {
    this->mutable_logs(i)->SetInitialized();
  }
  return;
}

void ArenaMainData::Swap(ArenaMainData* other) {
  if (other != this) {
    targets_.Swap(&other->targets_);
    std::swap(my_self_, other->my_self_);
    logs_.Swap(&other->logs_);
    std::swap(last_reload_tick_, other->last_reload_tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ArenaMainData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaMainData_descriptor_;
  metadata.reflection = ArenaMainData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaPlayer::kPlayerInfoFieldNumber;
const int ArenaPlayer::kActorsFieldNumber;
const int ArenaPlayer::kGuidFieldNumber;
const int ArenaPlayer::kRankFieldNumber;
const int ArenaPlayer::kYesterdayRankFieldNumber;
const int ArenaPlayer::kInBattleFieldNumber;
#endif  // !_MSC_VER

ArenaPlayer::ArenaPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaPlayer::InitAsDefaultInstance() {
  player_info_ = const_cast< ::Packet::ArenaPlayerInfo*>(&::Packet::ArenaPlayerInfo::default_instance());
}

ArenaPlayer::ArenaPlayer(const ArenaPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaPlayer::SharedCtor() {
  _cached_size_ = 0;
  player_info_ = NULL;
  guid_ = GOOGLE_ULONGLONG(0);
  rank_ = 0;
  yesterday_rank_ = 0;
  in_battle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaPlayer::~ArenaPlayer() {
  SharedDtor();
}

void ArenaPlayer::SharedDtor() {
  if (this != default_instance_) {
    delete player_info_;
  }
}

void ArenaPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaPlayer_descriptor_;
}

const ArenaPlayer& ArenaPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaMessage_2eproto();
  return *default_instance_;
}

ArenaPlayer* ArenaPlayer::default_instance_ = NULL;

ArenaPlayer* ArenaPlayer::New() const {
  return new ArenaPlayer;
}

void ArenaPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_info()) {
      if (player_info_ != NULL) player_info_->::Packet::ArenaPlayerInfo::Clear();
    }
    guid_ = GOOGLE_ULONGLONG(0);
    rank_ = 0;
    yesterday_rank_ = 0;
    in_battle_ = 0;
  }
  actors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ArenaPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.ArenaPlayerInfo player_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_actors;
        break;
      }

      // repeated .Packet.ActorFullInfo actors = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_actors;
        if (input->ExpectTag(25)) goto parse_guid;
        break;
      }

      // required fixed64 guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rank;
        break;
      }

      // required int32 rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_yesterday_rank;
        break;
      }

      // required int32 yesterday_rank = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yesterday_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yesterday_rank_)));
          set_has_yesterday_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_in_battle;
        break;
      }

      // required int32 in_battle = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_battle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &in_battle_)));
          set_has_in_battle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ArenaPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.ArenaPlayerInfo player_info = 1;
  if (has_player_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_info(), output);
  }

  // repeated .Packet.ActorFullInfo actors = 2;
  for (int i = 0; i < this->actors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->actors(i), output);
  }

  // required fixed64 guid = 3;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->guid(), output);
  }

  // required int32 rank = 4;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rank(), output);
  }

  // required int32 yesterday_rank = 5;
  if (has_yesterday_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->yesterday_rank(), output);
  }

  // required int32 in_battle = 6;
  if (has_in_battle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->in_battle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.ArenaPlayerInfo player_info = 1;
  if (has_player_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_info(), target);
  }

  // repeated .Packet.ActorFullInfo actors = 2;
  for (int i = 0; i < this->actors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->actors(i), target);
  }

  // required fixed64 guid = 3;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->guid(), target);
  }

  // required int32 rank = 4;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rank(), target);
  }

  // required int32 yesterday_rank = 5;
  if (has_yesterday_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->yesterday_rank(), target);
  }

  // required int32 in_battle = 6;
  if (has_in_battle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->in_battle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.ArenaPlayerInfo player_info = 1;
    if (has_player_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_info());
    }

    // required fixed64 guid = 3;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required int32 rank = 4;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // required int32 yesterday_rank = 5;
    if (has_yesterday_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yesterday_rank());
    }

    // required int32 in_battle = 6;
    if (has_in_battle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->in_battle());
    }

  }
  // repeated .Packet.ActorFullInfo actors = 2;
  total_size += 1 * this->actors_size();
  for (int i = 0; i < this->actors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actors(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ArenaPlayer::MergeFrom(const ArenaPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  actors_.MergeFrom(from.actors_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_info()) {
      mutable_player_info()->::Packet::ArenaPlayerInfo::MergeFrom(from.player_info());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_yesterday_rank()) {
      set_yesterday_rank(from.yesterday_rank());
    }
    if (from.has_in_battle()) {
      set_in_battle(from.in_battle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ArenaPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ArenaPlayer::CopyFrom(const ArenaPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ArenaPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003d) != 0x0000003d) return false;

  if (has_player_info()) {
    if (!this->player_info().IsInitialized()) return false;
  }
  for (int i = 0; i < actors_size(); i++) {
    if (!this->actors(i).IsInitialized()) return false;
  }
  return true;
}

void ArenaPlayer::SetInitialized() {
  _has_bits_[0] |= 0x0000003d;

  if (has_player_info()) {
    this->mutable_player_info()->SetInitialized();
  }
  for (int i = 0; i < actors_size(); i++) {
    this->mutable_actors(i)->SetInitialized();
  }
  return;
}

void ArenaPlayer::Swap(ArenaPlayer* other) {
  if (other != this) {
    std::swap(player_info_, other->player_info_);
    actors_.Swap(&other->actors_);
    std::swap(guid_, other->guid_);
    std::swap(rank_, other->rank_);
    std::swap(yesterday_rank_, other->yesterday_rank_);
    std::swap(in_battle_, other->in_battle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ArenaPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaPlayer_descriptor_;
  metadata.reflection = ArenaPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaPlayerInfo::kIconFieldNumber;
const int ArenaPlayerInfo::kLevelFieldNumber;
const int ArenaPlayerInfo::kNameFieldNumber;
const int ArenaPlayerInfo::kScoreFieldNumber;
#endif  // !_MSC_VER

ArenaPlayerInfo::ArenaPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaPlayerInfo::InitAsDefaultInstance() {
}

ArenaPlayerInfo::ArenaPlayerInfo(const ArenaPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaPlayerInfo::~ArenaPlayerInfo() {
  SharedDtor();
}

void ArenaPlayerInfo::SharedDtor() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ArenaPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaPlayerInfo_descriptor_;
}

const ArenaPlayerInfo& ArenaPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaMessage_2eproto();
  return *default_instance_;
}

ArenaPlayerInfo* ArenaPlayerInfo::default_instance_ = NULL;

ArenaPlayerInfo* ArenaPlayerInfo::New() const {
  return new ArenaPlayerInfo;
}

void ArenaPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    level_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ArenaPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string icon = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // required int32 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ArenaPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string icon = 1;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->icon(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required int32 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string icon = 1;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->icon(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required int32 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string icon = 1;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ArenaPlayerInfo::MergeFrom(const ArenaPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ArenaPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ArenaPlayerInfo::CopyFrom(const ArenaPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ArenaPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ArenaPlayerInfo::SetInitialized() {
  _has_bits_[0] |= 0x0000000f;

  return;
}

void ArenaPlayerInfo::Swap(ArenaPlayerInfo* other) {
  if (other != this) {
    std::swap(icon_, other->icon_);
    std::swap(level_, other->level_);
    std::swap(name_, other->name_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ArenaPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaPlayerInfo_descriptor_;
  metadata.reflection = ArenaPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaLog::kPlayerFieldNumber;
const int ArenaLog::kReplayGuidFieldNumber;
const int ArenaLog::kWinFieldNumber;
const int ArenaLog::kRankChangeFieldNumber;
#endif  // !_MSC_VER

ArenaLog::ArenaLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaLog::InitAsDefaultInstance() {
  player_ = const_cast< ::Packet::ArenaPlayer*>(&::Packet::ArenaPlayer::default_instance());
}

ArenaLog::ArenaLog(const ArenaLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaLog::SharedCtor() {
  _cached_size_ = 0;
  player_ = NULL;
  replay_guid_ = GOOGLE_ULONGLONG(0);
  win_ = false;
  rank_change_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaLog::~ArenaLog() {
  SharedDtor();
}

void ArenaLog::SharedDtor() {
  if (this != default_instance_) {
    delete player_;
  }
}

void ArenaLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaLog_descriptor_;
}

const ArenaLog& ArenaLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaMessage_2eproto();
  return *default_instance_;
}

ArenaLog* ArenaLog::default_instance_ = NULL;

ArenaLog* ArenaLog::New() const {
  return new ArenaLog;
}

void ArenaLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player()) {
      if (player_ != NULL) player_->::Packet::ArenaPlayer::Clear();
    }
    replay_guid_ = GOOGLE_ULONGLONG(0);
    win_ = false;
    rank_change_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ArenaLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.ArenaPlayer player = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_replay_guid;
        break;
      }

      // required fixed64 replay_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_replay_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &replay_guid_)));
          set_has_replay_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_win;
        break;
      }

      // required bool win = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rank_change;
        break;
      }

      // required int32 rank_change = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_change_)));
          set_has_rank_change();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ArenaLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.ArenaPlayer player = 1;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player(), output);
  }

  // required fixed64 replay_guid = 2;
  if (has_replay_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->replay_guid(), output);
  }

  // required bool win = 3;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->win(), output);
  }

  // required int32 rank_change = 4;
  if (has_rank_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rank_change(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.ArenaPlayer player = 1;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player(), target);
  }

  // required fixed64 replay_guid = 2;
  if (has_replay_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->replay_guid(), target);
  }

  // required bool win = 3;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->win(), target);
  }

  // required int32 rank_change = 4;
  if (has_rank_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rank_change(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.ArenaPlayer player = 1;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player());
    }

    // required fixed64 replay_guid = 2;
    if (has_replay_guid()) {
      total_size += 1 + 8;
    }

    // required bool win = 3;
    if (has_win()) {
      total_size += 1 + 1;
    }

    // required int32 rank_change = 4;
    if (has_rank_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_change());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ArenaLog::MergeFrom(const ArenaLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player()) {
      mutable_player()->::Packet::ArenaPlayer::MergeFrom(from.player());
    }
    if (from.has_replay_guid()) {
      set_replay_guid(from.replay_guid());
    }
    if (from.has_win()) {
      set_win(from.win());
    }
    if (from.has_rank_change()) {
      set_rank_change(from.rank_change());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ArenaLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ArenaLog::CopyFrom(const ArenaLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ArenaLog::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_player()) {
    if (!this->player().IsInitialized()) return false;
  }
  return true;
}

void ArenaLog::SetInitialized() {
  _has_bits_[0] |= 0x0000000f;

  if (has_player()) {
    this->mutable_player()->SetInitialized();
  }
  return;
}

void ArenaLog::Swap(ArenaLog* other) {
  if (other != this) {
    std::swap(player_, other->player_);
    std::swap(replay_guid_, other->replay_guid_);
    std::swap(win_, other->win_);
    std::swap(rank_change_, other->rank_change_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ArenaLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaLog_descriptor_;
  metadata.reflection = ArenaLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaPlayerDataChange::kGuidFieldNumber;
const int ArenaPlayerDataChange::kPlayerFieldNumber;
#endif  // !_MSC_VER

ArenaPlayerDataChange::ArenaPlayerDataChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaPlayerDataChange::InitAsDefaultInstance() {
  player_ = const_cast< ::Packet::ArenaPlayer*>(&::Packet::ArenaPlayer::default_instance());
}

ArenaPlayerDataChange::ArenaPlayerDataChange(const ArenaPlayerDataChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaPlayerDataChange::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  player_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaPlayerDataChange::~ArenaPlayerDataChange() {
  SharedDtor();
}

void ArenaPlayerDataChange::SharedDtor() {
  if (this != default_instance_) {
    delete player_;
  }
}

void ArenaPlayerDataChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaPlayerDataChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaPlayerDataChange_descriptor_;
}

const ArenaPlayerDataChange& ArenaPlayerDataChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaMessage_2eproto();
  return *default_instance_;
}

ArenaPlayerDataChange* ArenaPlayerDataChange::default_instance_ = NULL;

ArenaPlayerDataChange* ArenaPlayerDataChange::New() const {
  return new ArenaPlayerDataChange;
}

void ArenaPlayerDataChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    if (has_player()) {
      if (player_ != NULL) player_->::Packet::ArenaPlayer::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ArenaPlayerDataChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player;
        break;
      }

      // required .Packet.ArenaPlayer player = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ArenaPlayerDataChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required .Packet.ArenaPlayer player = 2;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaPlayerDataChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required .Packet.ArenaPlayer player = 2;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaPlayerDataChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required .Packet.ArenaPlayer player = 2;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaPlayerDataChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaPlayerDataChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaPlayerDataChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ArenaPlayerDataChange::MergeFrom(const ArenaPlayerDataChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_player()) {
      mutable_player()->::Packet::ArenaPlayer::MergeFrom(from.player());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ArenaPlayerDataChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ArenaPlayerDataChange::CopyFrom(const ArenaPlayerDataChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ArenaPlayerDataChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_player()) {
    if (!this->player().IsInitialized()) return false;
  }
  return true;
}

void ArenaPlayerDataChange::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  if (has_player()) {
    this->mutable_player()->SetInitialized();
  }
  return;
}

void ArenaPlayerDataChange::Swap(ArenaPlayerDataChange* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(player_, other->player_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ArenaPlayerDataChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaPlayerDataChange_descriptor_;
  metadata.reflection = ArenaPlayerDataChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaChallengePlayer::kTargetGuidFieldNumber;
#endif  // !_MSC_VER

ArenaChallengePlayer::ArenaChallengePlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaChallengePlayer::InitAsDefaultInstance() {
}

ArenaChallengePlayer::ArenaChallengePlayer(const ArenaChallengePlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaChallengePlayer::SharedCtor() {
  _cached_size_ = 0;
  target_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaChallengePlayer::~ArenaChallengePlayer() {
  SharedDtor();
}

void ArenaChallengePlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaChallengePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaChallengePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaChallengePlayer_descriptor_;
}

const ArenaChallengePlayer& ArenaChallengePlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaMessage_2eproto();
  return *default_instance_;
}

ArenaChallengePlayer* ArenaChallengePlayer::default_instance_ = NULL;

ArenaChallengePlayer* ArenaChallengePlayer::New() const {
  return new ArenaChallengePlayer;
}

void ArenaChallengePlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    target_guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ArenaChallengePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 target_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &target_guid_)));
          set_has_target_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ArenaChallengePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 target_guid = 1;
  if (has_target_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->target_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaChallengePlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 target_guid = 1;
  if (has_target_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->target_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaChallengePlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 target_guid = 1;
    if (has_target_guid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaChallengePlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaChallengePlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaChallengePlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ArenaChallengePlayer::MergeFrom(const ArenaChallengePlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_guid()) {
      set_target_guid(from.target_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ArenaChallengePlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ArenaChallengePlayer::CopyFrom(const ArenaChallengePlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ArenaChallengePlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ArenaChallengePlayer::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void ArenaChallengePlayer::Swap(ArenaChallengePlayer* other) {
  if (other != this) {
    std::swap(target_guid_, other->target_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ArenaChallengePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaChallengePlayer_descriptor_;
  metadata.reflection = ArenaChallengePlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ArenaPanelOpen::ArenaPanelOpen()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaPanelOpen::InitAsDefaultInstance() {
}

ArenaPanelOpen::ArenaPanelOpen(const ArenaPanelOpen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaPanelOpen::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaPanelOpen::~ArenaPanelOpen() {
  SharedDtor();
}

void ArenaPanelOpen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaPanelOpen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaPanelOpen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaPanelOpen_descriptor_;
}

const ArenaPanelOpen& ArenaPanelOpen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaMessage_2eproto();
  return *default_instance_;
}

ArenaPanelOpen* ArenaPanelOpen::default_instance_ = NULL;

ArenaPanelOpen* ArenaPanelOpen::New() const {
  return new ArenaPanelOpen;
}

void ArenaPanelOpen::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ArenaPanelOpen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void ArenaPanelOpen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaPanelOpen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaPanelOpen::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaPanelOpen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaPanelOpen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaPanelOpen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ArenaPanelOpen::MergeFrom(const ArenaPanelOpen& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ArenaPanelOpen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ArenaPanelOpen::CopyFrom(const ArenaPanelOpen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ArenaPanelOpen::IsInitialized() const {

  return true;
}

void ArenaPanelOpen::SetInitialized() {

  return;
}

void ArenaPanelOpen::Swap(ArenaPanelOpen* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ArenaPanelOpen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaPanelOpen_descriptor_;
  metadata.reflection = ArenaPanelOpen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ArenaRefreshTarget::ArenaRefreshTarget()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaRefreshTarget::InitAsDefaultInstance() {
}

ArenaRefreshTarget::ArenaRefreshTarget(const ArenaRefreshTarget& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaRefreshTarget::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaRefreshTarget::~ArenaRefreshTarget() {
  SharedDtor();
}

void ArenaRefreshTarget::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaRefreshTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaRefreshTarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaRefreshTarget_descriptor_;
}

const ArenaRefreshTarget& ArenaRefreshTarget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaMessage_2eproto();
  return *default_instance_;
}

ArenaRefreshTarget* ArenaRefreshTarget::default_instance_ = NULL;

ArenaRefreshTarget* ArenaRefreshTarget::New() const {
  return new ArenaRefreshTarget;
}

void ArenaRefreshTarget::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ArenaRefreshTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void ArenaRefreshTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaRefreshTarget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaRefreshTarget::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaRefreshTarget::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaRefreshTarget* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaRefreshTarget*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ArenaRefreshTarget::MergeFrom(const ArenaRefreshTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ArenaRefreshTarget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ArenaRefreshTarget::CopyFrom(const ArenaRefreshTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ArenaRefreshTarget::IsInitialized() const {

  return true;
}

void ArenaRefreshTarget::SetInitialized() {

  return;
}

void ArenaRefreshTarget::Swap(ArenaRefreshTarget* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ArenaRefreshTarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaRefreshTarget_descriptor_;
  metadata.reflection = ArenaRefreshTarget_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ArenaPanelClose::ArenaPanelClose()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaPanelClose::InitAsDefaultInstance() {
}

ArenaPanelClose::ArenaPanelClose(const ArenaPanelClose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaPanelClose::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaPanelClose::~ArenaPanelClose() {
  SharedDtor();
}

void ArenaPanelClose::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaPanelClose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaPanelClose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaPanelClose_descriptor_;
}

const ArenaPanelClose& ArenaPanelClose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaMessage_2eproto();
  return *default_instance_;
}

ArenaPanelClose* ArenaPanelClose::default_instance_ = NULL;

ArenaPanelClose* ArenaPanelClose::New() const {
  return new ArenaPanelClose;
}

void ArenaPanelClose::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ArenaPanelClose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void ArenaPanelClose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaPanelClose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaPanelClose::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaPanelClose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaPanelClose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaPanelClose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ArenaPanelClose::MergeFrom(const ArenaPanelClose& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ArenaPanelClose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ArenaPanelClose::CopyFrom(const ArenaPanelClose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ArenaPanelClose::IsInitialized() const {

  return true;
}

void ArenaPanelClose::SetInitialized() {

  return;
}

void ArenaPanelClose::Swap(ArenaPanelClose* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ArenaPanelClose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaPanelClose_descriptor_;
  metadata.reflection = ArenaPanelClose_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ArenaBuyChallengeCount::ArenaBuyChallengeCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaBuyChallengeCount::InitAsDefaultInstance() {
}

ArenaBuyChallengeCount::ArenaBuyChallengeCount(const ArenaBuyChallengeCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaBuyChallengeCount::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaBuyChallengeCount::~ArenaBuyChallengeCount() {
  SharedDtor();
}

void ArenaBuyChallengeCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaBuyChallengeCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaBuyChallengeCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaBuyChallengeCount_descriptor_;
}

const ArenaBuyChallengeCount& ArenaBuyChallengeCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaMessage_2eproto();
  return *default_instance_;
}

ArenaBuyChallengeCount* ArenaBuyChallengeCount::default_instance_ = NULL;

ArenaBuyChallengeCount* ArenaBuyChallengeCount::New() const {
  return new ArenaBuyChallengeCount;
}

void ArenaBuyChallengeCount::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ArenaBuyChallengeCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void ArenaBuyChallengeCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaBuyChallengeCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaBuyChallengeCount::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaBuyChallengeCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaBuyChallengeCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaBuyChallengeCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ArenaBuyChallengeCount::MergeFrom(const ArenaBuyChallengeCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ArenaBuyChallengeCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ArenaBuyChallengeCount::CopyFrom(const ArenaBuyChallengeCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ArenaBuyChallengeCount::IsInitialized() const {

  return true;
}

void ArenaBuyChallengeCount::SetInitialized() {

  return;
}

void ArenaBuyChallengeCount::Swap(ArenaBuyChallengeCount* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ArenaBuyChallengeCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaBuyChallengeCount_descriptor_;
  metadata.reflection = ArenaBuyChallengeCount_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

// @@protoc_insertion_point(global_scope)
