// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneCommon.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SceneCommon.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Packet {

namespace {

const ::google::protobuf::Descriptor* CommonRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommonReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommonResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SceneCommon_2eproto() {
  protobuf_AddDesc_SceneCommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SceneCommon.proto");
  GOOGLE_CHECK(file != NULL);
  CommonRequest_descriptor_ = file->message_type(0);
  static const int CommonRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRequest, request_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRequest, int32_params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRequest, int64_params_),
  };
  CommonRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommonRequest_descriptor_,
      CommonRequest::default_instance_,
      CommonRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommonRequest));
  CommonReply_descriptor_ = file->message_type(1);
  static const int CommonReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonReply, reply_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonReply, int32_params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonReply, int64_params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonReply, string_params_),
  };
  CommonReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommonReply_descriptor_,
      CommonReply::default_instance_,
      CommonReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommonReply));
  CommonResult_descriptor_ = file->message_type(2);
  static const int CommonResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonResult, option_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonResult, code_),
  };
  CommonResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommonResult_descriptor_,
      CommonResult::default_instance_,
      CommonResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommonResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SceneCommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommonRequest_descriptor_, &CommonRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommonReply_descriptor_, &CommonReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommonResult_descriptor_, &CommonResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SceneCommon_2eproto() {
  delete CommonRequest::default_instance_;
  delete CommonRequest_reflection_;
  delete CommonReply::default_instance_;
  delete CommonReply_reflection_;
  delete CommonResult::default_instance_;
  delete CommonResult_reflection_;
}

void protobuf_AddDesc_SceneCommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Packet::protobuf_AddDesc_AllPacketEnum_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021SceneCommon.proto\022\006Packet\032\023AllPacketEn"
    "um.proto\"Q\n\rCommonRequest\022\024\n\014request_nam"
    "e\030\001 \002(\t\022\024\n\014int32_params\030\002 \003(\005\022\024\n\014int64_p"
    "arams\030\003 \003(\006\"d\n\013CommonReply\022\022\n\nreply_name"
    "\030\001 \002(\t\022\024\n\014int32_params\030\002 \003(\005\022\024\n\014int64_pa"
    "rams\030\003 \003(\006\022\025\n\rstring_params\030\004 \003(\t\"V\n\014Com"
    "monResult\022$\n\006option\030\001 \002(\0162\024.Packet.Resul"
    "tOption\022 \n\004code\030\002 \002(\0162\022.Packet.ResultCod"
    "e", 321);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SceneCommon.proto", &protobuf_RegisterTypes);
  CommonRequest::default_instance_ = new CommonRequest();
  CommonReply::default_instance_ = new CommonReply();
  CommonResult::default_instance_ = new CommonResult();
  CommonRequest::default_instance_->InitAsDefaultInstance();
  CommonReply::default_instance_->InitAsDefaultInstance();
  CommonResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SceneCommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SceneCommon_2eproto {
  StaticDescriptorInitializer_SceneCommon_2eproto() {
    protobuf_AddDesc_SceneCommon_2eproto();
  }
} static_descriptor_initializer_SceneCommon_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CommonRequest::kRequestNameFieldNumber;
const int CommonRequest::kInt32ParamsFieldNumber;
const int CommonRequest::kInt64ParamsFieldNumber;
#endif  // !_MSC_VER

CommonRequest::CommonRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommonRequest::InitAsDefaultInstance() {
}

CommonRequest::CommonRequest(const CommonRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommonRequest::SharedCtor() {
  _cached_size_ = 0;
  request_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonRequest::~CommonRequest() {
  SharedDtor();
}

void CommonRequest::SharedDtor() {
  if (request_name_ != &::google::protobuf::internal::kEmptyString) {
    delete request_name_;
  }
  if (this != default_instance_) {
  }
}

void CommonRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonRequest_descriptor_;
}

const CommonRequest& CommonRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneCommon_2eproto();
  return *default_instance_;
}

CommonRequest* CommonRequest::default_instance_ = NULL;

CommonRequest* CommonRequest::New() const {
  return new CommonRequest;
}

void CommonRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request_name()) {
      if (request_name_ != &::google::protobuf::internal::kEmptyString) {
        request_name_->clear();
      }
    }
  }
  int32_params_.Clear();
  int64_params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool CommonRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string request_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->request_name().data(), this->request_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_int32_params;
        break;
      }

      // repeated int32 int32_params = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int32_params:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_int32_params())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_int32_params())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_int32_params;
        if (input->ExpectTag(25)) goto parse_int64_params;
        break;
      }

      // repeated fixed64 int64_params = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_int64_params:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 25, input, this->mutable_int64_params())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_int64_params())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_int64_params;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void CommonRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string request_name = 1;
  if (has_request_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_name().data(), this->request_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->request_name(), output);
  }

  // repeated int32 int32_params = 2;
  for (int i = 0; i < this->int32_params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->int32_params(i), output);
  }

  // repeated fixed64 int64_params = 3;
  for (int i = 0; i < this->int64_params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      3, this->int64_params(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommonRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string request_name = 1;
  if (has_request_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_name().data(), this->request_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_name(), target);
  }

  // repeated int32 int32_params = 2;
  for (int i = 0; i < this->int32_params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->int32_params(i), target);
  }

  // repeated fixed64 int64_params = 3;
  for (int i = 0; i < this->int64_params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(3, this->int64_params(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommonRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string request_name = 1;
    if (has_request_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_name());
    }

  }
  // repeated int32 int32_params = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->int32_params_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->int32_params(i));
    }
    total_size += 1 * this->int32_params_size() + data_size;
  }

  // repeated fixed64 int64_params = 3;
  {
    int data_size = 0;
    data_size = 8 * this->int64_params_size();
    total_size += 1 * this->int64_params_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommonRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommonRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void CommonRequest::MergeFrom(const CommonRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  int32_params_.MergeFrom(from.int32_params_);
  int64_params_.MergeFrom(from.int64_params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_name()) {
      set_request_name(from.request_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void CommonRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void CommonRequest::CopyFrom(const CommonRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool CommonRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CommonRequest::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void CommonRequest::Swap(CommonRequest* other) {
  if (other != this) {
    std::swap(request_name_, other->request_name_);
    int32_params_.Swap(&other->int32_params_);
    int64_params_.Swap(&other->int64_params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata CommonRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonRequest_descriptor_;
  metadata.reflection = CommonRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommonReply::kReplyNameFieldNumber;
const int CommonReply::kInt32ParamsFieldNumber;
const int CommonReply::kInt64ParamsFieldNumber;
const int CommonReply::kStringParamsFieldNumber;
#endif  // !_MSC_VER

CommonReply::CommonReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommonReply::InitAsDefaultInstance() {
}

CommonReply::CommonReply(const CommonReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommonReply::SharedCtor() {
  _cached_size_ = 0;
  reply_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonReply::~CommonReply() {
  SharedDtor();
}

void CommonReply::SharedDtor() {
  if (reply_name_ != &::google::protobuf::internal::kEmptyString) {
    delete reply_name_;
  }
  if (this != default_instance_) {
  }
}

void CommonReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonReply_descriptor_;
}

const CommonReply& CommonReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneCommon_2eproto();
  return *default_instance_;
}

CommonReply* CommonReply::default_instance_ = NULL;

CommonReply* CommonReply::New() const {
  return new CommonReply;
}

void CommonReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_reply_name()) {
      if (reply_name_ != &::google::protobuf::internal::kEmptyString) {
        reply_name_->clear();
      }
    }
  }
  int32_params_.Clear();
  int64_params_.Clear();
  string_params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool CommonReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string reply_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reply_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reply_name().data(), this->reply_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_int32_params;
        break;
      }

      // repeated int32 int32_params = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int32_params:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_int32_params())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_int32_params())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_int32_params;
        if (input->ExpectTag(25)) goto parse_int64_params;
        break;
      }

      // repeated fixed64 int64_params = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_int64_params:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 25, input, this->mutable_int64_params())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_int64_params())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_int64_params;
        if (input->ExpectTag(34)) goto parse_string_params;
        break;
      }

      // repeated string string_params = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_string_params()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->string_params(this->string_params_size() - 1).data(),
            this->string_params(this->string_params_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_string_params;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void CommonReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string reply_name = 1;
  if (has_reply_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reply_name().data(), this->reply_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->reply_name(), output);
  }

  // repeated int32 int32_params = 2;
  for (int i = 0; i < this->int32_params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->int32_params(i), output);
  }

  // repeated fixed64 int64_params = 3;
  for (int i = 0; i < this->int64_params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      3, this->int64_params(i), output);
  }

  // repeated string string_params = 4;
  for (int i = 0; i < this->string_params_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->string_params(i).data(), this->string_params(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->string_params(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommonReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string reply_name = 1;
  if (has_reply_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reply_name().data(), this->reply_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reply_name(), target);
  }

  // repeated int32 int32_params = 2;
  for (int i = 0; i < this->int32_params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->int32_params(i), target);
  }

  // repeated fixed64 int64_params = 3;
  for (int i = 0; i < this->int64_params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(3, this->int64_params(i), target);
  }

  // repeated string string_params = 4;
  for (int i = 0; i < this->string_params_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_params(i).data(), this->string_params(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->string_params(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommonReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string reply_name = 1;
    if (has_reply_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reply_name());
    }

  }
  // repeated int32 int32_params = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->int32_params_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->int32_params(i));
    }
    total_size += 1 * this->int32_params_size() + data_size;
  }

  // repeated fixed64 int64_params = 3;
  {
    int data_size = 0;
    data_size = 8 * this->int64_params_size();
    total_size += 1 * this->int64_params_size() + data_size;
  }

  // repeated string string_params = 4;
  total_size += 1 * this->string_params_size();
  for (int i = 0; i < this->string_params_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->string_params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommonReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommonReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void CommonReply::MergeFrom(const CommonReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  int32_params_.MergeFrom(from.int32_params_);
  int64_params_.MergeFrom(from.int64_params_);
  string_params_.MergeFrom(from.string_params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply_name()) {
      set_reply_name(from.reply_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void CommonReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void CommonReply::CopyFrom(const CommonReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool CommonReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CommonReply::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void CommonReply::Swap(CommonReply* other) {
  if (other != this) {
    std::swap(reply_name_, other->reply_name_);
    int32_params_.Swap(&other->int32_params_);
    int64_params_.Swap(&other->int64_params_);
    string_params_.Swap(&other->string_params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata CommonReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonReply_descriptor_;
  metadata.reflection = CommonReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommonResult::kOptionFieldNumber;
const int CommonResult::kCodeFieldNumber;
#endif  // !_MSC_VER

CommonResult::CommonResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommonResult::InitAsDefaultInstance() {
}

CommonResult::CommonResult(const CommonResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommonResult::SharedCtor() {
  _cached_size_ = 0;
  option_ = -1;
  code_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonResult::~CommonResult() {
  SharedDtor();
}

void CommonResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommonResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonResult_descriptor_;
}

const CommonResult& CommonResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneCommon_2eproto();
  return *default_instance_;
}

CommonResult* CommonResult::default_instance_ = NULL;

CommonResult* CommonResult::New() const {
  return new CommonResult;
}

void CommonResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    option_ = -1;
    code_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool CommonResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.ResultOption option = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::ResultOption_IsValid(value)) {
            set_option(static_cast< ::Packet::ResultOption >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // required .Packet.ResultCode code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::ResultCode_IsValid(value)) {
            set_code(static_cast< ::Packet::ResultCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void CommonResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.ResultOption option = 1;
  if (has_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->option(), output);
  }

  // required .Packet.ResultCode code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommonResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.ResultOption option = 1;
  if (has_option()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->option(), target);
  }

  // required .Packet.ResultCode code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommonResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.ResultOption option = 1;
    if (has_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->option());
    }

    // required .Packet.ResultCode code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommonResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommonResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void CommonResult::MergeFrom(const CommonResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_option()) {
      set_option(from.option());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void CommonResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void CommonResult::CopyFrom(const CommonResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool CommonResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CommonResult::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void CommonResult::Swap(CommonResult* other) {
  if (other != this) {
    std::swap(option_, other->option_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata CommonResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonResult_descriptor_;
  metadata.reflection = CommonResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

// @@protoc_insertion_point(global_scope)
