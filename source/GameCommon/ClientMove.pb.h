// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientMove.proto

#ifndef PROTOBUF_ClientMove_2eproto__INCLUDED
#define PROTOBUF_ClientMove_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Base.pb.h"
#include "AllPacketEnum.pb.h"
#include "PlayerBasicInfo.pb.h"
#include "ItemAndEquip.pb.h"
// @@protoc_insertion_point(includes)

namespace Packet {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ClientMove_2eproto();
void protobuf_AssignDesc_ClientMove_2eproto();
void protobuf_ShutdownFile_ClientMove_2eproto();

class ClientClickMove;
class ClientPlayerMove;
class ClientPlayerStop;
class TeamMemberInfo;
class PlayerTeamData;
class PlayerRunTimeStatus;
class PlayerRunTimeStatusNotify;
class ScenePlayerInfo;
class ScenePlayerList;
class PlayerSceneInfoReq;
class PlayerSceneInfoReply;
class ScenePlayerExit;
class PlayerLeaveZone;

// ===================================================================

class ClientClickMove : public ::google::protobuf::Message {
 public:
  ClientClickMove();
  virtual ~ClientClickMove();

  ClientClickMove(const ClientClickMove& from);

  inline ClientClickMove& operator=(const ClientClickMove& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientClickMove& default_instance();

  void Swap(ClientClickMove* other);

  // implements Message ----------------------------------------------

  ClientClickMove* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientClickMove& from);
  void MergeFrom(const ClientClickMove& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // optional .Packet.Position star_pos = 2;
  inline bool has_star_pos() const;
  inline void clear_star_pos();
  static const int kStarPosFieldNumber = 2;
  inline const ::Packet::Position& star_pos() const;
  inline ::Packet::Position* mutable_star_pos();
  inline ::Packet::Position* release_star_pos();
  inline void set_allocated_star_pos(::Packet::Position* star_pos);

  // repeated .Packet.Position sub_positions = 3;
  inline int sub_positions_size() const;
  inline void clear_sub_positions();
  static const int kSubPositionsFieldNumber = 3;
  inline const ::Packet::Position& sub_positions(int index) const;
  inline ::Packet::Position* mutable_sub_positions(int index);
  inline ::Packet::Position* add_sub_positions();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::Position >&
      sub_positions() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::Position >*
      mutable_sub_positions();

  // optional int32 sub_position_index = 4;
  inline bool has_sub_position_index() const;
  inline void clear_sub_position_index();
  static const int kSubPositionIndexFieldNumber = 4;
  inline ::google::protobuf::int32 sub_position_index() const;
  inline void set_sub_position_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.ClientClickMove)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_star_pos();
  inline void clear_has_star_pos();
  inline void set_has_sub_position_index();
  inline void clear_has_sub_position_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::Packet::Position* star_pos_;
  ::google::protobuf::RepeatedPtrField< ::Packet::Position > sub_positions_;
  ::google::protobuf::int32 sub_position_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ClientMove_2eproto();
  friend void protobuf_AssignDesc_ClientMove_2eproto();
  friend void protobuf_ShutdownFile_ClientMove_2eproto();

  void InitAsDefaultInstance();
  static ClientClickMove* default_instance_;
};
// -------------------------------------------------------------------

class ClientPlayerMove : public ::google::protobuf::Message {
 public:
  ClientPlayerMove();
  virtual ~ClientPlayerMove();

  ClientPlayerMove(const ClientPlayerMove& from);

  inline ClientPlayerMove& operator=(const ClientPlayerMove& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientPlayerMove& default_instance();

  void Swap(ClientPlayerMove* other);

  // implements Message ----------------------------------------------

  ClientPlayerMove* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientPlayerMove& from);
  void MergeFrom(const ClientPlayerMove& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // required float direction = 2;
  inline bool has_direction() const;
  inline void clear_direction();
  static const int kDirectionFieldNumber = 2;
  inline float direction() const;
  inline void set_direction(float value);

  // required fixed32 move_speed = 3;
  inline bool has_move_speed() const;
  inline void clear_move_speed();
  static const int kMoveSpeedFieldNumber = 3;
  inline ::google::protobuf::uint32 move_speed() const;
  inline void set_move_speed(::google::protobuf::uint32 value);

  // required fixed32 move_time = 4;
  inline bool has_move_time() const;
  inline void clear_move_time();
  static const int kMoveTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 move_time() const;
  inline void set_move_time(::google::protobuf::uint32 value);

  // required .Packet.Position old_pos = 5;
  inline bool has_old_pos() const;
  inline void clear_old_pos();
  static const int kOldPosFieldNumber = 5;
  inline const ::Packet::Position& old_pos() const;
  inline ::Packet::Position* mutable_old_pos();
  inline ::Packet::Position* release_old_pos();
  inline void set_allocated_old_pos(::Packet::Position* old_pos);

  // required .Packet.Position new_pos = 6;
  inline bool has_new_pos() const;
  inline void clear_new_pos();
  static const int kNewPosFieldNumber = 6;
  inline const ::Packet::Position& new_pos() const;
  inline ::Packet::Position* mutable_new_pos();
  inline ::Packet::Position* release_new_pos();
  inline void set_allocated_new_pos(::Packet::Position* new_pos);

  // optional bool follow = 7;
  inline bool has_follow() const;
  inline void clear_follow();
  static const int kFollowFieldNumber = 7;
  inline bool follow() const;
  inline void set_follow(bool value);

  // @@protoc_insertion_point(class_scope:Packet.ClientPlayerMove)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_direction();
  inline void clear_has_direction();
  inline void set_has_move_speed();
  inline void clear_has_move_speed();
  inline void set_has_move_time();
  inline void clear_has_move_time();
  inline void set_has_old_pos();
  inline void clear_has_old_pos();
  inline void set_has_new_pos();
  inline void clear_has_new_pos();
  inline void set_has_follow();
  inline void clear_has_follow();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  float direction_;
  ::google::protobuf::uint32 move_speed_;
  ::Packet::Position* old_pos_;
  ::google::protobuf::uint32 move_time_;
  bool follow_;
  ::Packet::Position* new_pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_ClientMove_2eproto();
  friend void protobuf_AssignDesc_ClientMove_2eproto();
  friend void protobuf_ShutdownFile_ClientMove_2eproto();

  void InitAsDefaultInstance();
  static ClientPlayerMove* default_instance_;
};
// -------------------------------------------------------------------

class ClientPlayerStop : public ::google::protobuf::Message {
 public:
  ClientPlayerStop();
  virtual ~ClientPlayerStop();

  ClientPlayerStop(const ClientPlayerStop& from);

  inline ClientPlayerStop& operator=(const ClientPlayerStop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientPlayerStop& default_instance();

  void Swap(ClientPlayerStop* other);

  // implements Message ----------------------------------------------

  ClientPlayerStop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientPlayerStop& from);
  void MergeFrom(const ClientPlayerStop& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // optional .Packet.Position old_pos = 2;
  inline bool has_old_pos() const;
  inline void clear_old_pos();
  static const int kOldPosFieldNumber = 2;
  inline const ::Packet::Position& old_pos() const;
  inline ::Packet::Position* mutable_old_pos();
  inline ::Packet::Position* release_old_pos();
  inline void set_allocated_old_pos(::Packet::Position* old_pos);

  // required float direction = 3;
  inline bool has_direction() const;
  inline void clear_direction();
  static const int kDirectionFieldNumber = 3;
  inline float direction() const;
  inline void set_direction(float value);

  // required .Packet.Position stop_pos = 4;
  inline bool has_stop_pos() const;
  inline void clear_stop_pos();
  static const int kStopPosFieldNumber = 4;
  inline const ::Packet::Position& stop_pos() const;
  inline ::Packet::Position* mutable_stop_pos();
  inline ::Packet::Position* release_stop_pos();
  inline void set_allocated_stop_pos(::Packet::Position* stop_pos);

  // optional bool follow = 5;
  inline bool has_follow() const;
  inline void clear_follow();
  static const int kFollowFieldNumber = 5;
  inline bool follow() const;
  inline void set_follow(bool value);

  // @@protoc_insertion_point(class_scope:Packet.ClientPlayerStop)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_old_pos();
  inline void clear_has_old_pos();
  inline void set_has_direction();
  inline void clear_has_direction();
  inline void set_has_stop_pos();
  inline void clear_has_stop_pos();
  inline void set_has_follow();
  inline void clear_has_follow();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::Packet::Position* old_pos_;
  ::Packet::Position* stop_pos_;
  float direction_;
  bool follow_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ClientMove_2eproto();
  friend void protobuf_AssignDesc_ClientMove_2eproto();
  friend void protobuf_ShutdownFile_ClientMove_2eproto();

  void InitAsDefaultInstance();
  static ClientPlayerStop* default_instance_;
};
// -------------------------------------------------------------------

class TeamMemberInfo : public ::google::protobuf::Message {
 public:
  TeamMemberInfo();
  virtual ~TeamMemberInfo();

  TeamMemberInfo(const TeamMemberInfo& from);

  inline TeamMemberInfo& operator=(const TeamMemberInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamMemberInfo& default_instance();

  void Swap(TeamMemberInfo* other);

  // implements Message ----------------------------------------------

  TeamMemberInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamMemberInfo& from);
  void MergeFrom(const TeamMemberInfo& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 memberid = 1;
  inline bool has_memberid() const;
  inline void clear_memberid();
  static const int kMemberidFieldNumber = 1;
  inline ::google::protobuf::uint64 memberid() const;
  inline void set_memberid(::google::protobuf::uint64 value);

  // required .Packet.PlayerTeamStatus teamstatus = 2;
  inline bool has_teamstatus() const;
  inline void clear_teamstatus();
  static const int kTeamstatusFieldNumber = 2;
  inline ::Packet::PlayerTeamStatus teamstatus() const;
  inline void set_teamstatus(::Packet::PlayerTeamStatus value);

  // @@protoc_insertion_point(class_scope:Packet.TeamMemberInfo)
 private:
  inline void set_has_memberid();
  inline void clear_has_memberid();
  inline void set_has_teamstatus();
  inline void clear_has_teamstatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 memberid_;
  int teamstatus_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ClientMove_2eproto();
  friend void protobuf_AssignDesc_ClientMove_2eproto();
  friend void protobuf_ShutdownFile_ClientMove_2eproto();

  void InitAsDefaultInstance();
  static TeamMemberInfo* default_instance_;
};
// -------------------------------------------------------------------

class PlayerTeamData : public ::google::protobuf::Message {
 public:
  PlayerTeamData();
  virtual ~PlayerTeamData();

  PlayerTeamData(const PlayerTeamData& from);

  inline PlayerTeamData& operator=(const PlayerTeamData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerTeamData& default_instance();

  void Swap(PlayerTeamData* other);

  // implements Message ----------------------------------------------

  PlayerTeamData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerTeamData& from);
  void MergeFrom(const PlayerTeamData& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 teamid = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 1;
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // required fixed64 leaderid = 3;
  inline bool has_leaderid() const;
  inline void clear_leaderid();
  static const int kLeaderidFieldNumber = 3;
  inline ::google::protobuf::uint64 leaderid() const;
  inline void set_leaderid(::google::protobuf::uint64 value);

  // required .Packet.ArrangeType arrangetype = 4;
  inline bool has_arrangetype() const;
  inline void clear_arrangetype();
  static const int kArrangetypeFieldNumber = 4;
  inline ::Packet::ArrangeType arrangetype() const;
  inline void set_arrangetype(::Packet::ArrangeType value);

  // required bool group = 5;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 5;
  inline bool group() const;
  inline void set_group(bool value);

  // repeated .Packet.TeamMemberInfo member = 6;
  inline int member_size() const;
  inline void clear_member();
  static const int kMemberFieldNumber = 6;
  inline const ::Packet::TeamMemberInfo& member(int index) const;
  inline ::Packet::TeamMemberInfo* mutable_member(int index);
  inline ::Packet::TeamMemberInfo* add_member();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::TeamMemberInfo >&
      member() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::TeamMemberInfo >*
      mutable_member();

  // optional bool robot_team = 7;
  inline bool has_robot_team() const;
  inline void clear_robot_team();
  static const int kRobotTeamFieldNumber = 7;
  inline bool robot_team() const;
  inline void set_robot_team(bool value);

  // @@protoc_insertion_point(class_scope:Packet.PlayerTeamData)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_leaderid();
  inline void clear_has_leaderid();
  inline void set_has_arrangetype();
  inline void clear_has_arrangetype();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_robot_team();
  inline void clear_has_robot_team();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 teamid_;
  ::google::protobuf::uint64 leaderid_;
  int arrangetype_;
  bool group_;
  bool robot_team_;
  ::google::protobuf::RepeatedPtrField< ::Packet::TeamMemberInfo > member_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_ClientMove_2eproto();
  friend void protobuf_AssignDesc_ClientMove_2eproto();
  friend void protobuf_ShutdownFile_ClientMove_2eproto();

  void InitAsDefaultInstance();
  static PlayerTeamData* default_instance_;
};
// -------------------------------------------------------------------

class PlayerRunTimeStatus : public ::google::protobuf::Message {
 public:
  PlayerRunTimeStatus();
  virtual ~PlayerRunTimeStatus();

  PlayerRunTimeStatus(const PlayerRunTimeStatus& from);

  inline PlayerRunTimeStatus& operator=(const PlayerRunTimeStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerRunTimeStatus& default_instance();

  void Swap(PlayerRunTimeStatus* other);

  // implements Message ----------------------------------------------

  PlayerRunTimeStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerRunTimeStatus& from);
  void MergeFrom(const PlayerRunTimeStatus& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool on_hook = 1;
  inline bool has_on_hook() const;
  inline void clear_on_hook();
  static const int kOnHookFieldNumber = 1;
  inline bool on_hook() const;
  inline void set_on_hook(bool value);

  // required bool in_battle = 2;
  inline bool has_in_battle() const;
  inline void clear_in_battle();
  static const int kInBattleFieldNumber = 2;
  inline bool in_battle() const;
  inline void set_in_battle(bool value);

  // required .Packet.PlayerTeamData team = 3;
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 3;
  inline const ::Packet::PlayerTeamData& team() const;
  inline ::Packet::PlayerTeamData* mutable_team();
  inline ::Packet::PlayerTeamData* release_team();
  inline void set_allocated_team(::Packet::PlayerTeamData* team);

  // required .Packet.GuildPosition guildposition = 4;
  inline bool has_guildposition() const;
  inline void clear_guildposition();
  static const int kGuildpositionFieldNumber = 4;
  inline ::Packet::GuildPosition guildposition() const;
  inline void set_guildposition(::Packet::GuildPosition value);

  // @@protoc_insertion_point(class_scope:Packet.PlayerRunTimeStatus)
 private:
  inline void set_has_on_hook();
  inline void clear_has_on_hook();
  inline void set_has_in_battle();
  inline void clear_has_in_battle();
  inline void set_has_team();
  inline void clear_has_team();
  inline void set_has_guildposition();
  inline void clear_has_guildposition();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool on_hook_;
  bool in_battle_;
  int guildposition_;
  ::Packet::PlayerTeamData* team_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ClientMove_2eproto();
  friend void protobuf_AssignDesc_ClientMove_2eproto();
  friend void protobuf_ShutdownFile_ClientMove_2eproto();

  void InitAsDefaultInstance();
  static PlayerRunTimeStatus* default_instance_;
};
// -------------------------------------------------------------------

class PlayerRunTimeStatusNotify : public ::google::protobuf::Message {
 public:
  PlayerRunTimeStatusNotify();
  virtual ~PlayerRunTimeStatusNotify();

  PlayerRunTimeStatusNotify(const PlayerRunTimeStatusNotify& from);

  inline PlayerRunTimeStatusNotify& operator=(const PlayerRunTimeStatusNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerRunTimeStatusNotify& default_instance();

  void Swap(PlayerRunTimeStatusNotify* other);

  // implements Message ----------------------------------------------

  PlayerRunTimeStatusNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerRunTimeStatusNotify& from);
  void MergeFrom(const PlayerRunTimeStatusNotify& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // required .Packet.PlayerRunTimeStatus status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline const ::Packet::PlayerRunTimeStatus& status() const;
  inline ::Packet::PlayerRunTimeStatus* mutable_status();
  inline ::Packet::PlayerRunTimeStatus* release_status();
  inline void set_allocated_status(::Packet::PlayerRunTimeStatus* status);

  // @@protoc_insertion_point(class_scope:Packet.PlayerRunTimeStatusNotify)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::Packet::PlayerRunTimeStatus* status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ClientMove_2eproto();
  friend void protobuf_AssignDesc_ClientMove_2eproto();
  friend void protobuf_ShutdownFile_ClientMove_2eproto();

  void InitAsDefaultInstance();
  static PlayerRunTimeStatusNotify* default_instance_;
};
// -------------------------------------------------------------------

class ScenePlayerInfo : public ::google::protobuf::Message {
 public:
  ScenePlayerInfo();
  virtual ~ScenePlayerInfo();

  ScenePlayerInfo(const ScenePlayerInfo& from);

  inline ScenePlayerInfo& operator=(const ScenePlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScenePlayerInfo& default_instance();

  void Swap(ScenePlayerInfo* other);

  // implements Message ----------------------------------------------

  ScenePlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScenePlayerInfo& from);
  void MergeFrom(const ScenePlayerInfo& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Packet.PlayerBasicInfo basic_info = 1;
  inline bool has_basic_info() const;
  inline void clear_basic_info();
  static const int kBasicInfoFieldNumber = 1;
  inline const ::Packet::PlayerBasicInfo& basic_info() const;
  inline ::Packet::PlayerBasicInfo* mutable_basic_info();
  inline ::Packet::PlayerBasicInfo* release_basic_info();
  inline void set_allocated_basic_info(::Packet::PlayerBasicInfo* basic_info);

  // repeated .Packet.EquipItem main_equips = 2;
  inline int main_equips_size() const;
  inline void clear_main_equips();
  static const int kMainEquipsFieldNumber = 2;
  inline const ::Packet::EquipItem& main_equips(int index) const;
  inline ::Packet::EquipItem* mutable_main_equips(int index);
  inline ::Packet::EquipItem* add_main_equips();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::EquipItem >&
      main_equips() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::EquipItem >*
      mutable_main_equips();

  // optional .Packet.PlayerRunTimeStatus runtime_status = 3;
  inline bool has_runtime_status() const;
  inline void clear_runtime_status();
  static const int kRuntimeStatusFieldNumber = 3;
  inline const ::Packet::PlayerRunTimeStatus& runtime_status() const;
  inline ::Packet::PlayerRunTimeStatus* mutable_runtime_status();
  inline ::Packet::PlayerRunTimeStatus* release_runtime_status();
  inline void set_allocated_runtime_status(::Packet::PlayerRunTimeStatus* runtime_status);

  // @@protoc_insertion_point(class_scope:Packet.ScenePlayerInfo)
 private:
  inline void set_has_basic_info();
  inline void clear_has_basic_info();
  inline void set_has_runtime_status();
  inline void clear_has_runtime_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Packet::PlayerBasicInfo* basic_info_;
  ::google::protobuf::RepeatedPtrField< ::Packet::EquipItem > main_equips_;
  ::Packet::PlayerRunTimeStatus* runtime_status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ClientMove_2eproto();
  friend void protobuf_AssignDesc_ClientMove_2eproto();
  friend void protobuf_ShutdownFile_ClientMove_2eproto();

  void InitAsDefaultInstance();
  static ScenePlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class ScenePlayerList : public ::google::protobuf::Message {
 public:
  ScenePlayerList();
  virtual ~ScenePlayerList();

  ScenePlayerList(const ScenePlayerList& from);

  inline ScenePlayerList& operator=(const ScenePlayerList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScenePlayerList& default_instance();

  void Swap(ScenePlayerList* other);

  // implements Message ----------------------------------------------

  ScenePlayerList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScenePlayerList& from);
  void MergeFrom(const ScenePlayerList& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Packet.ScenePlayerInfo player_list = 1;
  inline int player_list_size() const;
  inline void clear_player_list();
  static const int kPlayerListFieldNumber = 1;
  inline const ::Packet::ScenePlayerInfo& player_list(int index) const;
  inline ::Packet::ScenePlayerInfo* mutable_player_list(int index);
  inline ::Packet::ScenePlayerInfo* add_player_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::ScenePlayerInfo >&
      player_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::ScenePlayerInfo >*
      mutable_player_list();

  // @@protoc_insertion_point(class_scope:Packet.ScenePlayerList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::ScenePlayerInfo > player_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientMove_2eproto();
  friend void protobuf_AssignDesc_ClientMove_2eproto();
  friend void protobuf_ShutdownFile_ClientMove_2eproto();

  void InitAsDefaultInstance();
  static ScenePlayerList* default_instance_;
};
// -------------------------------------------------------------------

class PlayerSceneInfoReq : public ::google::protobuf::Message {
 public:
  PlayerSceneInfoReq();
  virtual ~PlayerSceneInfoReq();

  PlayerSceneInfoReq(const PlayerSceneInfoReq& from);

  inline PlayerSceneInfoReq& operator=(const PlayerSceneInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerSceneInfoReq& default_instance();

  void Swap(PlayerSceneInfoReq* other);

  // implements Message ----------------------------------------------

  PlayerSceneInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerSceneInfoReq& from);
  void MergeFrom(const PlayerSceneInfoReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Packet.PlayerSceneInfoReq)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientMove_2eproto();
  friend void protobuf_AssignDesc_ClientMove_2eproto();
  friend void protobuf_ShutdownFile_ClientMove_2eproto();

  void InitAsDefaultInstance();
  static PlayerSceneInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class PlayerSceneInfoReply : public ::google::protobuf::Message {
 public:
  PlayerSceneInfoReply();
  virtual ~PlayerSceneInfoReply();

  PlayerSceneInfoReply(const PlayerSceneInfoReply& from);

  inline PlayerSceneInfoReply& operator=(const PlayerSceneInfoReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerSceneInfoReply& default_instance();

  void Swap(PlayerSceneInfoReply* other);

  // implements Message ----------------------------------------------

  PlayerSceneInfoReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerSceneInfoReply& from);
  void MergeFrom(const PlayerSceneInfoReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Packet.ScenePlayerInfo optinfo = 1;
  inline bool has_optinfo() const;
  inline void clear_optinfo();
  static const int kOptinfoFieldNumber = 1;
  inline const ::Packet::ScenePlayerInfo& optinfo() const;
  inline ::Packet::ScenePlayerInfo* mutable_optinfo();
  inline ::Packet::ScenePlayerInfo* release_optinfo();
  inline void set_allocated_optinfo(::Packet::ScenePlayerInfo* optinfo);

  // @@protoc_insertion_point(class_scope:Packet.PlayerSceneInfoReply)
 private:
  inline void set_has_optinfo();
  inline void clear_has_optinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Packet::ScenePlayerInfo* optinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientMove_2eproto();
  friend void protobuf_AssignDesc_ClientMove_2eproto();
  friend void protobuf_ShutdownFile_ClientMove_2eproto();

  void InitAsDefaultInstance();
  static PlayerSceneInfoReply* default_instance_;
};
// -------------------------------------------------------------------

class ScenePlayerExit : public ::google::protobuf::Message {
 public:
  ScenePlayerExit();
  virtual ~ScenePlayerExit();

  ScenePlayerExit(const ScenePlayerExit& from);

  inline ScenePlayerExit& operator=(const ScenePlayerExit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScenePlayerExit& default_instance();

  void Swap(ScenePlayerExit* other);

  // implements Message ----------------------------------------------

  ScenePlayerExit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScenePlayerExit& from);
  void MergeFrom(const ScenePlayerExit& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // required int32 scene_id = 2;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 2;
  inline ::google::protobuf::int32 scene_id() const;
  inline void set_scene_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.ScenePlayerExit)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::google::protobuf::int32 scene_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ClientMove_2eproto();
  friend void protobuf_AssignDesc_ClientMove_2eproto();
  friend void protobuf_ShutdownFile_ClientMove_2eproto();

  void InitAsDefaultInstance();
  static ScenePlayerExit* default_instance_;
};
// -------------------------------------------------------------------

class PlayerLeaveZone : public ::google::protobuf::Message {
 public:
  PlayerLeaveZone();
  virtual ~PlayerLeaveZone();

  PlayerLeaveZone(const PlayerLeaveZone& from);

  inline PlayerLeaveZone& operator=(const PlayerLeaveZone& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerLeaveZone& default_instance();

  void Swap(PlayerLeaveZone* other);

  // implements Message ----------------------------------------------

  PlayerLeaveZone* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerLeaveZone& from);
  void MergeFrom(const PlayerLeaveZone& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Packet.PlayerLeaveZone)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientMove_2eproto();
  friend void protobuf_AssignDesc_ClientMove_2eproto();
  friend void protobuf_ShutdownFile_ClientMove_2eproto();

  void InitAsDefaultInstance();
  static PlayerLeaveZone* default_instance_;
};
// ===================================================================


// ===================================================================

// ClientClickMove

// required fixed64 guid = 1;
inline bool ClientClickMove::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientClickMove::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientClickMove::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientClickMove::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 ClientClickMove::guid() const {
  return guid_;
}
inline void ClientClickMove::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// optional .Packet.Position star_pos = 2;
inline bool ClientClickMove::has_star_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientClickMove::set_has_star_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientClickMove::clear_has_star_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientClickMove::clear_star_pos() {
  if (star_pos_ != NULL) star_pos_->::Packet::Position::Clear();
  clear_has_star_pos();
  SetDirty();
}
inline const ::Packet::Position& ClientClickMove::star_pos() const {
  return star_pos_ != NULL ? *star_pos_ : *default_instance_->star_pos_;
}
inline ::Packet::Position* ClientClickMove::mutable_star_pos() {
  SetDirty();
  set_has_star_pos();
  if (star_pos_ == NULL) star_pos_ = new ::Packet::Position;
  return star_pos_;
}
inline ::Packet::Position* ClientClickMove::release_star_pos() {
  SetDirty();
  clear_has_star_pos();
  ::Packet::Position* temp = star_pos_;
  star_pos_ = NULL;
  return temp;
}
inline void ClientClickMove::set_allocated_star_pos(::Packet::Position* star_pos) {
  SetDirty();
  delete star_pos_;
  star_pos_ = star_pos;
  if (star_pos) {
    set_has_star_pos();
  } else {
    clear_has_star_pos();
  }
}

// repeated .Packet.Position sub_positions = 3;
inline int ClientClickMove::sub_positions_size() const {
  return sub_positions_.size();
}
inline void ClientClickMove::clear_sub_positions() {
  sub_positions_.Clear();
  SetDirty();
}
inline const ::Packet::Position& ClientClickMove::sub_positions(int index) const {
  return sub_positions_.Get(index);
}
inline ::Packet::Position* ClientClickMove::mutable_sub_positions(int index) {
  SetDirty();
  return sub_positions_.Mutable(index);
}
inline ::Packet::Position* ClientClickMove::add_sub_positions() {
  SetDirty();
  return sub_positions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::Position >&
ClientClickMove::sub_positions() const {
  return sub_positions_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::Position >*
ClientClickMove::mutable_sub_positions() {
  SetDirty();
  return &sub_positions_;
}

// optional int32 sub_position_index = 4;
inline bool ClientClickMove::has_sub_position_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClientClickMove::set_has_sub_position_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClientClickMove::clear_has_sub_position_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClientClickMove::clear_sub_position_index() {
  sub_position_index_ = 0;
  clear_has_sub_position_index();
  SetDirty();
}
inline ::google::protobuf::int32 ClientClickMove::sub_position_index() const {
  return sub_position_index_;
}
inline void ClientClickMove::set_sub_position_index(::google::protobuf::int32 value) {
  SetDirty();
  set_has_sub_position_index();
  sub_position_index_ = value;
}

// -------------------------------------------------------------------

// ClientPlayerMove

// optional fixed64 guid = 1;
inline bool ClientPlayerMove::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientPlayerMove::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientPlayerMove::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientPlayerMove::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 ClientPlayerMove::guid() const {
  return guid_;
}
inline void ClientPlayerMove::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// required float direction = 2;
inline bool ClientPlayerMove::has_direction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientPlayerMove::set_has_direction() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientPlayerMove::clear_has_direction() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientPlayerMove::clear_direction() {
  direction_ = 0;
  clear_has_direction();
  SetDirty();
}
inline float ClientPlayerMove::direction() const {
  return direction_;
}
inline void ClientPlayerMove::set_direction(float value) {
  SetDirty();
  set_has_direction();
  direction_ = value;
}

// required fixed32 move_speed = 3;
inline bool ClientPlayerMove::has_move_speed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientPlayerMove::set_has_move_speed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientPlayerMove::clear_has_move_speed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientPlayerMove::clear_move_speed() {
  move_speed_ = 0u;
  clear_has_move_speed();
  SetDirty();
}
inline ::google::protobuf::uint32 ClientPlayerMove::move_speed() const {
  return move_speed_;
}
inline void ClientPlayerMove::set_move_speed(::google::protobuf::uint32 value) {
  SetDirty();
  set_has_move_speed();
  move_speed_ = value;
}

// required fixed32 move_time = 4;
inline bool ClientPlayerMove::has_move_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClientPlayerMove::set_has_move_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClientPlayerMove::clear_has_move_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClientPlayerMove::clear_move_time() {
  move_time_ = 0u;
  clear_has_move_time();
  SetDirty();
}
inline ::google::protobuf::uint32 ClientPlayerMove::move_time() const {
  return move_time_;
}
inline void ClientPlayerMove::set_move_time(::google::protobuf::uint32 value) {
  SetDirty();
  set_has_move_time();
  move_time_ = value;
}

// required .Packet.Position old_pos = 5;
inline bool ClientPlayerMove::has_old_pos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClientPlayerMove::set_has_old_pos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClientPlayerMove::clear_has_old_pos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClientPlayerMove::clear_old_pos() {
  if (old_pos_ != NULL) old_pos_->::Packet::Position::Clear();
  clear_has_old_pos();
  SetDirty();
}
inline const ::Packet::Position& ClientPlayerMove::old_pos() const {
  return old_pos_ != NULL ? *old_pos_ : *default_instance_->old_pos_;
}
inline ::Packet::Position* ClientPlayerMove::mutable_old_pos() {
  SetDirty();
  set_has_old_pos();
  if (old_pos_ == NULL) old_pos_ = new ::Packet::Position;
  return old_pos_;
}
inline ::Packet::Position* ClientPlayerMove::release_old_pos() {
  SetDirty();
  clear_has_old_pos();
  ::Packet::Position* temp = old_pos_;
  old_pos_ = NULL;
  return temp;
}
inline void ClientPlayerMove::set_allocated_old_pos(::Packet::Position* old_pos) {
  SetDirty();
  delete old_pos_;
  old_pos_ = old_pos;
  if (old_pos) {
    set_has_old_pos();
  } else {
    clear_has_old_pos();
  }
}

// required .Packet.Position new_pos = 6;
inline bool ClientPlayerMove::has_new_pos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ClientPlayerMove::set_has_new_pos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ClientPlayerMove::clear_has_new_pos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ClientPlayerMove::clear_new_pos() {
  if (new_pos_ != NULL) new_pos_->::Packet::Position::Clear();
  clear_has_new_pos();
  SetDirty();
}
inline const ::Packet::Position& ClientPlayerMove::new_pos() const {
  return new_pos_ != NULL ? *new_pos_ : *default_instance_->new_pos_;
}
inline ::Packet::Position* ClientPlayerMove::mutable_new_pos() {
  SetDirty();
  set_has_new_pos();
  if (new_pos_ == NULL) new_pos_ = new ::Packet::Position;
  return new_pos_;
}
inline ::Packet::Position* ClientPlayerMove::release_new_pos() {
  SetDirty();
  clear_has_new_pos();
  ::Packet::Position* temp = new_pos_;
  new_pos_ = NULL;
  return temp;
}
inline void ClientPlayerMove::set_allocated_new_pos(::Packet::Position* new_pos) {
  SetDirty();
  delete new_pos_;
  new_pos_ = new_pos;
  if (new_pos) {
    set_has_new_pos();
  } else {
    clear_has_new_pos();
  }
}

// optional bool follow = 7;
inline bool ClientPlayerMove::has_follow() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ClientPlayerMove::set_has_follow() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ClientPlayerMove::clear_has_follow() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ClientPlayerMove::clear_follow() {
  follow_ = false;
  clear_has_follow();
  SetDirty();
}
inline bool ClientPlayerMove::follow() const {
  return follow_;
}
inline void ClientPlayerMove::set_follow(bool value) {
  SetDirty();
  set_has_follow();
  follow_ = value;
}

// -------------------------------------------------------------------

// ClientPlayerStop

// optional fixed64 guid = 1;
inline bool ClientPlayerStop::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientPlayerStop::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientPlayerStop::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientPlayerStop::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 ClientPlayerStop::guid() const {
  return guid_;
}
inline void ClientPlayerStop::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// optional .Packet.Position old_pos = 2;
inline bool ClientPlayerStop::has_old_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientPlayerStop::set_has_old_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientPlayerStop::clear_has_old_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientPlayerStop::clear_old_pos() {
  if (old_pos_ != NULL) old_pos_->::Packet::Position::Clear();
  clear_has_old_pos();
  SetDirty();
}
inline const ::Packet::Position& ClientPlayerStop::old_pos() const {
  return old_pos_ != NULL ? *old_pos_ : *default_instance_->old_pos_;
}
inline ::Packet::Position* ClientPlayerStop::mutable_old_pos() {
  SetDirty();
  set_has_old_pos();
  if (old_pos_ == NULL) old_pos_ = new ::Packet::Position;
  return old_pos_;
}
inline ::Packet::Position* ClientPlayerStop::release_old_pos() {
  SetDirty();
  clear_has_old_pos();
  ::Packet::Position* temp = old_pos_;
  old_pos_ = NULL;
  return temp;
}
inline void ClientPlayerStop::set_allocated_old_pos(::Packet::Position* old_pos) {
  SetDirty();
  delete old_pos_;
  old_pos_ = old_pos;
  if (old_pos) {
    set_has_old_pos();
  } else {
    clear_has_old_pos();
  }
}

// required float direction = 3;
inline bool ClientPlayerStop::has_direction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientPlayerStop::set_has_direction() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientPlayerStop::clear_has_direction() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientPlayerStop::clear_direction() {
  direction_ = 0;
  clear_has_direction();
  SetDirty();
}
inline float ClientPlayerStop::direction() const {
  return direction_;
}
inline void ClientPlayerStop::set_direction(float value) {
  SetDirty();
  set_has_direction();
  direction_ = value;
}

// required .Packet.Position stop_pos = 4;
inline bool ClientPlayerStop::has_stop_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClientPlayerStop::set_has_stop_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClientPlayerStop::clear_has_stop_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClientPlayerStop::clear_stop_pos() {
  if (stop_pos_ != NULL) stop_pos_->::Packet::Position::Clear();
  clear_has_stop_pos();
  SetDirty();
}
inline const ::Packet::Position& ClientPlayerStop::stop_pos() const {
  return stop_pos_ != NULL ? *stop_pos_ : *default_instance_->stop_pos_;
}
inline ::Packet::Position* ClientPlayerStop::mutable_stop_pos() {
  SetDirty();
  set_has_stop_pos();
  if (stop_pos_ == NULL) stop_pos_ = new ::Packet::Position;
  return stop_pos_;
}
inline ::Packet::Position* ClientPlayerStop::release_stop_pos() {
  SetDirty();
  clear_has_stop_pos();
  ::Packet::Position* temp = stop_pos_;
  stop_pos_ = NULL;
  return temp;
}
inline void ClientPlayerStop::set_allocated_stop_pos(::Packet::Position* stop_pos) {
  SetDirty();
  delete stop_pos_;
  stop_pos_ = stop_pos;
  if (stop_pos) {
    set_has_stop_pos();
  } else {
    clear_has_stop_pos();
  }
}

// optional bool follow = 5;
inline bool ClientPlayerStop::has_follow() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClientPlayerStop::set_has_follow() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClientPlayerStop::clear_has_follow() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClientPlayerStop::clear_follow() {
  follow_ = false;
  clear_has_follow();
  SetDirty();
}
inline bool ClientPlayerStop::follow() const {
  return follow_;
}
inline void ClientPlayerStop::set_follow(bool value) {
  SetDirty();
  set_has_follow();
  follow_ = value;
}

// -------------------------------------------------------------------

// TeamMemberInfo

// required fixed64 memberid = 1;
inline bool TeamMemberInfo::has_memberid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamMemberInfo::set_has_memberid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamMemberInfo::clear_has_memberid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamMemberInfo::clear_memberid() {
  memberid_ = GOOGLE_ULONGLONG(0);
  clear_has_memberid();
  SetDirty();
}
inline ::google::protobuf::uint64 TeamMemberInfo::memberid() const {
  return memberid_;
}
inline void TeamMemberInfo::set_memberid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_memberid();
  memberid_ = value;
}

// required .Packet.PlayerTeamStatus teamstatus = 2;
inline bool TeamMemberInfo::has_teamstatus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamMemberInfo::set_has_teamstatus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamMemberInfo::clear_has_teamstatus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamMemberInfo::clear_teamstatus() {
  teamstatus_ = 0;
  clear_has_teamstatus();
  SetDirty();
}
inline ::Packet::PlayerTeamStatus TeamMemberInfo::teamstatus() const {
  return static_cast< ::Packet::PlayerTeamStatus >(teamstatus_);
}
inline void TeamMemberInfo::set_teamstatus(::Packet::PlayerTeamStatus value) {
  assert(::Packet::PlayerTeamStatus_IsValid(value));
  SetDirty();
  set_has_teamstatus();
  teamstatus_ = value;
}

// -------------------------------------------------------------------

// PlayerTeamData

// required fixed64 teamid = 1;
inline bool PlayerTeamData::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerTeamData::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerTeamData::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerTeamData::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
  SetDirty();
}
inline ::google::protobuf::uint64 PlayerTeamData::teamid() const {
  return teamid_;
}
inline void PlayerTeamData::set_teamid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_teamid();
  teamid_ = value;
}

// required fixed64 leaderid = 3;
inline bool PlayerTeamData::has_leaderid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerTeamData::set_has_leaderid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerTeamData::clear_has_leaderid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerTeamData::clear_leaderid() {
  leaderid_ = GOOGLE_ULONGLONG(0);
  clear_has_leaderid();
  SetDirty();
}
inline ::google::protobuf::uint64 PlayerTeamData::leaderid() const {
  return leaderid_;
}
inline void PlayerTeamData::set_leaderid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_leaderid();
  leaderid_ = value;
}

// required .Packet.ArrangeType arrangetype = 4;
inline bool PlayerTeamData::has_arrangetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerTeamData::set_has_arrangetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerTeamData::clear_has_arrangetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerTeamData::clear_arrangetype() {
  arrangetype_ = -1;
  clear_has_arrangetype();
  SetDirty();
}
inline ::Packet::ArrangeType PlayerTeamData::arrangetype() const {
  return static_cast< ::Packet::ArrangeType >(arrangetype_);
}
inline void PlayerTeamData::set_arrangetype(::Packet::ArrangeType value) {
  assert(::Packet::ArrangeType_IsValid(value));
  SetDirty();
  set_has_arrangetype();
  arrangetype_ = value;
}

// required bool group = 5;
inline bool PlayerTeamData::has_group() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerTeamData::set_has_group() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerTeamData::clear_has_group() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerTeamData::clear_group() {
  group_ = false;
  clear_has_group();
  SetDirty();
}
inline bool PlayerTeamData::group() const {
  return group_;
}
inline void PlayerTeamData::set_group(bool value) {
  SetDirty();
  set_has_group();
  group_ = value;
}

// repeated .Packet.TeamMemberInfo member = 6;
inline int PlayerTeamData::member_size() const {
  return member_.size();
}
inline void PlayerTeamData::clear_member() {
  member_.Clear();
  SetDirty();
}
inline const ::Packet::TeamMemberInfo& PlayerTeamData::member(int index) const {
  return member_.Get(index);
}
inline ::Packet::TeamMemberInfo* PlayerTeamData::mutable_member(int index) {
  SetDirty();
  return member_.Mutable(index);
}
inline ::Packet::TeamMemberInfo* PlayerTeamData::add_member() {
  SetDirty();
  return member_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::TeamMemberInfo >&
PlayerTeamData::member() const {
  return member_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::TeamMemberInfo >*
PlayerTeamData::mutable_member() {
  SetDirty();
  return &member_;
}

// optional bool robot_team = 7;
inline bool PlayerTeamData::has_robot_team() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerTeamData::set_has_robot_team() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerTeamData::clear_has_robot_team() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerTeamData::clear_robot_team() {
  robot_team_ = false;
  clear_has_robot_team();
  SetDirty();
}
inline bool PlayerTeamData::robot_team() const {
  return robot_team_;
}
inline void PlayerTeamData::set_robot_team(bool value) {
  SetDirty();
  set_has_robot_team();
  robot_team_ = value;
}

// -------------------------------------------------------------------

// PlayerRunTimeStatus

// required bool on_hook = 1;
inline bool PlayerRunTimeStatus::has_on_hook() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerRunTimeStatus::set_has_on_hook() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerRunTimeStatus::clear_has_on_hook() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerRunTimeStatus::clear_on_hook() {
  on_hook_ = false;
  clear_has_on_hook();
  SetDirty();
}
inline bool PlayerRunTimeStatus::on_hook() const {
  return on_hook_;
}
inline void PlayerRunTimeStatus::set_on_hook(bool value) {
  SetDirty();
  set_has_on_hook();
  on_hook_ = value;
}

// required bool in_battle = 2;
inline bool PlayerRunTimeStatus::has_in_battle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerRunTimeStatus::set_has_in_battle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerRunTimeStatus::clear_has_in_battle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerRunTimeStatus::clear_in_battle() {
  in_battle_ = false;
  clear_has_in_battle();
  SetDirty();
}
inline bool PlayerRunTimeStatus::in_battle() const {
  return in_battle_;
}
inline void PlayerRunTimeStatus::set_in_battle(bool value) {
  SetDirty();
  set_has_in_battle();
  in_battle_ = value;
}

// required .Packet.PlayerTeamData team = 3;
inline bool PlayerRunTimeStatus::has_team() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerRunTimeStatus::set_has_team() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerRunTimeStatus::clear_has_team() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerRunTimeStatus::clear_team() {
  if (team_ != NULL) team_->::Packet::PlayerTeamData::Clear();
  clear_has_team();
  SetDirty();
}
inline const ::Packet::PlayerTeamData& PlayerRunTimeStatus::team() const {
  return team_ != NULL ? *team_ : *default_instance_->team_;
}
inline ::Packet::PlayerTeamData* PlayerRunTimeStatus::mutable_team() {
  SetDirty();
  set_has_team();
  if (team_ == NULL) team_ = new ::Packet::PlayerTeamData;
  return team_;
}
inline ::Packet::PlayerTeamData* PlayerRunTimeStatus::release_team() {
  SetDirty();
  clear_has_team();
  ::Packet::PlayerTeamData* temp = team_;
  team_ = NULL;
  return temp;
}
inline void PlayerRunTimeStatus::set_allocated_team(::Packet::PlayerTeamData* team) {
  SetDirty();
  delete team_;
  team_ = team;
  if (team) {
    set_has_team();
  } else {
    clear_has_team();
  }
}

// required .Packet.GuildPosition guildposition = 4;
inline bool PlayerRunTimeStatus::has_guildposition() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerRunTimeStatus::set_has_guildposition() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerRunTimeStatus::clear_has_guildposition() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerRunTimeStatus::clear_guildposition() {
  guildposition_ = 0;
  clear_has_guildposition();
  SetDirty();
}
inline ::Packet::GuildPosition PlayerRunTimeStatus::guildposition() const {
  return static_cast< ::Packet::GuildPosition >(guildposition_);
}
inline void PlayerRunTimeStatus::set_guildposition(::Packet::GuildPosition value) {
  assert(::Packet::GuildPosition_IsValid(value));
  SetDirty();
  set_has_guildposition();
  guildposition_ = value;
}

// -------------------------------------------------------------------

// PlayerRunTimeStatusNotify

// required fixed64 guid = 1;
inline bool PlayerRunTimeStatusNotify::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerRunTimeStatusNotify::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerRunTimeStatusNotify::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerRunTimeStatusNotify::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 PlayerRunTimeStatusNotify::guid() const {
  return guid_;
}
inline void PlayerRunTimeStatusNotify::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// required .Packet.PlayerRunTimeStatus status = 2;
inline bool PlayerRunTimeStatusNotify::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerRunTimeStatusNotify::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerRunTimeStatusNotify::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerRunTimeStatusNotify::clear_status() {
  if (status_ != NULL) status_->::Packet::PlayerRunTimeStatus::Clear();
  clear_has_status();
  SetDirty();
}
inline const ::Packet::PlayerRunTimeStatus& PlayerRunTimeStatusNotify::status() const {
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::Packet::PlayerRunTimeStatus* PlayerRunTimeStatusNotify::mutable_status() {
  SetDirty();
  set_has_status();
  if (status_ == NULL) status_ = new ::Packet::PlayerRunTimeStatus;
  return status_;
}
inline ::Packet::PlayerRunTimeStatus* PlayerRunTimeStatusNotify::release_status() {
  SetDirty();
  clear_has_status();
  ::Packet::PlayerRunTimeStatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline void PlayerRunTimeStatusNotify::set_allocated_status(::Packet::PlayerRunTimeStatus* status) {
  SetDirty();
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
}

// -------------------------------------------------------------------

// ScenePlayerInfo

// required .Packet.PlayerBasicInfo basic_info = 1;
inline bool ScenePlayerInfo::has_basic_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScenePlayerInfo::set_has_basic_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScenePlayerInfo::clear_has_basic_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScenePlayerInfo::clear_basic_info() {
  if (basic_info_ != NULL) basic_info_->::Packet::PlayerBasicInfo::Clear();
  clear_has_basic_info();
  SetDirty();
}
inline const ::Packet::PlayerBasicInfo& ScenePlayerInfo::basic_info() const {
  return basic_info_ != NULL ? *basic_info_ : *default_instance_->basic_info_;
}
inline ::Packet::PlayerBasicInfo* ScenePlayerInfo::mutable_basic_info() {
  SetDirty();
  set_has_basic_info();
  if (basic_info_ == NULL) basic_info_ = new ::Packet::PlayerBasicInfo;
  return basic_info_;
}
inline ::Packet::PlayerBasicInfo* ScenePlayerInfo::release_basic_info() {
  SetDirty();
  clear_has_basic_info();
  ::Packet::PlayerBasicInfo* temp = basic_info_;
  basic_info_ = NULL;
  return temp;
}
inline void ScenePlayerInfo::set_allocated_basic_info(::Packet::PlayerBasicInfo* basic_info) {
  SetDirty();
  delete basic_info_;
  basic_info_ = basic_info;
  if (basic_info) {
    set_has_basic_info();
  } else {
    clear_has_basic_info();
  }
}

// repeated .Packet.EquipItem main_equips = 2;
inline int ScenePlayerInfo::main_equips_size() const {
  return main_equips_.size();
}
inline void ScenePlayerInfo::clear_main_equips() {
  main_equips_.Clear();
  SetDirty();
}
inline const ::Packet::EquipItem& ScenePlayerInfo::main_equips(int index) const {
  return main_equips_.Get(index);
}
inline ::Packet::EquipItem* ScenePlayerInfo::mutable_main_equips(int index) {
  SetDirty();
  return main_equips_.Mutable(index);
}
inline ::Packet::EquipItem* ScenePlayerInfo::add_main_equips() {
  SetDirty();
  return main_equips_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::EquipItem >&
ScenePlayerInfo::main_equips() const {
  return main_equips_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::EquipItem >*
ScenePlayerInfo::mutable_main_equips() {
  SetDirty();
  return &main_equips_;
}

// optional .Packet.PlayerRunTimeStatus runtime_status = 3;
inline bool ScenePlayerInfo::has_runtime_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScenePlayerInfo::set_has_runtime_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScenePlayerInfo::clear_has_runtime_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScenePlayerInfo::clear_runtime_status() {
  if (runtime_status_ != NULL) runtime_status_->::Packet::PlayerRunTimeStatus::Clear();
  clear_has_runtime_status();
  SetDirty();
}
inline const ::Packet::PlayerRunTimeStatus& ScenePlayerInfo::runtime_status() const {
  return runtime_status_ != NULL ? *runtime_status_ : *default_instance_->runtime_status_;
}
inline ::Packet::PlayerRunTimeStatus* ScenePlayerInfo::mutable_runtime_status() {
  SetDirty();
  set_has_runtime_status();
  if (runtime_status_ == NULL) runtime_status_ = new ::Packet::PlayerRunTimeStatus;
  return runtime_status_;
}
inline ::Packet::PlayerRunTimeStatus* ScenePlayerInfo::release_runtime_status() {
  SetDirty();
  clear_has_runtime_status();
  ::Packet::PlayerRunTimeStatus* temp = runtime_status_;
  runtime_status_ = NULL;
  return temp;
}
inline void ScenePlayerInfo::set_allocated_runtime_status(::Packet::PlayerRunTimeStatus* runtime_status) {
  SetDirty();
  delete runtime_status_;
  runtime_status_ = runtime_status;
  if (runtime_status) {
    set_has_runtime_status();
  } else {
    clear_has_runtime_status();
  }
}

// -------------------------------------------------------------------

// ScenePlayerList

// repeated .Packet.ScenePlayerInfo player_list = 1;
inline int ScenePlayerList::player_list_size() const {
  return player_list_.size();
}
inline void ScenePlayerList::clear_player_list() {
  player_list_.Clear();
  SetDirty();
}
inline const ::Packet::ScenePlayerInfo& ScenePlayerList::player_list(int index) const {
  return player_list_.Get(index);
}
inline ::Packet::ScenePlayerInfo* ScenePlayerList::mutable_player_list(int index) {
  SetDirty();
  return player_list_.Mutable(index);
}
inline ::Packet::ScenePlayerInfo* ScenePlayerList::add_player_list() {
  SetDirty();
  return player_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::ScenePlayerInfo >&
ScenePlayerList::player_list() const {
  return player_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::ScenePlayerInfo >*
ScenePlayerList::mutable_player_list() {
  SetDirty();
  return &player_list_;
}

// -------------------------------------------------------------------

// PlayerSceneInfoReq

// required fixed64 guid = 1;
inline bool PlayerSceneInfoReq::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerSceneInfoReq::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerSceneInfoReq::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerSceneInfoReq::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 PlayerSceneInfoReq::guid() const {
  return guid_;
}
inline void PlayerSceneInfoReq::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// -------------------------------------------------------------------

// PlayerSceneInfoReply

// required .Packet.ScenePlayerInfo optinfo = 1;
inline bool PlayerSceneInfoReply::has_optinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerSceneInfoReply::set_has_optinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerSceneInfoReply::clear_has_optinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerSceneInfoReply::clear_optinfo() {
  if (optinfo_ != NULL) optinfo_->::Packet::ScenePlayerInfo::Clear();
  clear_has_optinfo();
  SetDirty();
}
inline const ::Packet::ScenePlayerInfo& PlayerSceneInfoReply::optinfo() const {
  return optinfo_ != NULL ? *optinfo_ : *default_instance_->optinfo_;
}
inline ::Packet::ScenePlayerInfo* PlayerSceneInfoReply::mutable_optinfo() {
  SetDirty();
  set_has_optinfo();
  if (optinfo_ == NULL) optinfo_ = new ::Packet::ScenePlayerInfo;
  return optinfo_;
}
inline ::Packet::ScenePlayerInfo* PlayerSceneInfoReply::release_optinfo() {
  SetDirty();
  clear_has_optinfo();
  ::Packet::ScenePlayerInfo* temp = optinfo_;
  optinfo_ = NULL;
  return temp;
}
inline void PlayerSceneInfoReply::set_allocated_optinfo(::Packet::ScenePlayerInfo* optinfo) {
  SetDirty();
  delete optinfo_;
  optinfo_ = optinfo;
  if (optinfo) {
    set_has_optinfo();
  } else {
    clear_has_optinfo();
  }
}

// -------------------------------------------------------------------

// ScenePlayerExit

// required fixed64 guid = 1;
inline bool ScenePlayerExit::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScenePlayerExit::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScenePlayerExit::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScenePlayerExit::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 ScenePlayerExit::guid() const {
  return guid_;
}
inline void ScenePlayerExit::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// required int32 scene_id = 2;
inline bool ScenePlayerExit::has_scene_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScenePlayerExit::set_has_scene_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScenePlayerExit::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScenePlayerExit::clear_scene_id() {
  scene_id_ = 0;
  clear_has_scene_id();
  SetDirty();
}
inline ::google::protobuf::int32 ScenePlayerExit::scene_id() const {
  return scene_id_;
}
inline void ScenePlayerExit::set_scene_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_scene_id();
  scene_id_ = value;
}

// -------------------------------------------------------------------

// PlayerLeaveZone

// required fixed64 guid = 1;
inline bool PlayerLeaveZone::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerLeaveZone::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerLeaveZone::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerLeaveZone::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 PlayerLeaveZone::guid() const {
  return guid_;
}
inline void PlayerLeaveZone::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ClientMove_2eproto__INCLUDED
