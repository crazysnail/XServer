// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActorBasicInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ActorBasicInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Packet {

namespace {

const ::google::protobuf::Descriptor* ActorList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorFullInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorFullInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorListReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorListReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewActorNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewActorNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorBasicInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorBasicInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorFormationPull_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorFormationPull_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorFormation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorFormation_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorFormationAll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorFormationAll_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetActorFightReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetActorFightReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorLevelAndExpUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorLevelAndExpUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorBattleInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorBattleInfoNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorSkillRefresh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorSkillRefresh_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReNameRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReNameRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorSkill_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ActorBasicInfo_2eproto() {
  protobuf_AddDesc_ActorBasicInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ActorBasicInfo.proto");
  GOOGLE_CHECK(file != NULL);
  ActorList_descriptor_ = file->message_type(0);
  static const int ActorList_offsets_[1] = {
  };
  ActorList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorList_descriptor_,
      ActorList::default_instance_,
      ActorList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorList));
  ActorFullInfo_descriptor_ = file->message_type(1);
  static const int ActorFullInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorFullInfo, actor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorFullInfo, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorFullInfo, skills_),
  };
  ActorFullInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorFullInfo_descriptor_,
      ActorFullInfo::default_instance_,
      ActorFullInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorFullInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorFullInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorFullInfo));
  ActorListReply_descriptor_ = file->message_type(2);
  static const int ActorListReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorListReply, actors_),
  };
  ActorListReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorListReply_descriptor_,
      ActorListReply::default_instance_,
      ActorListReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorListReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorListReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorListReply));
  NewActorNotify_descriptor_ = file->message_type(3);
  static const int NewActorNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewActorNotify, actor_lsit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewActorNotify, source_),
  };
  NewActorNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewActorNotify_descriptor_,
      NewActorNotify::default_instance_,
      NewActorNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewActorNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewActorNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewActorNotify));
  ActorBasicInfo_descriptor_ = file->message_type(4);
  static const int ActorBasicInfo_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBasicInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBasicInfo, player_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBasicInfo, race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBasicInfo, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBasicInfo, talent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBasicInfo, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBasicInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBasicInfo, battle_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBasicInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBasicInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBasicInfo, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBasicInfo, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBasicInfo, level_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBasicInfo, exp_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBasicInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBasicInfo, client_res_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBasicInfo, battle_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBasicInfo, actor_config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBasicInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBasicInfo, last_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBasicInfo, hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBasicInfo, gem_master_lv_),
  };
  ActorBasicInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorBasicInfo_descriptor_,
      ActorBasicInfo::default_instance_,
      ActorBasicInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBasicInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBasicInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorBasicInfo));
  ActorFormationPull_descriptor_ = file->message_type(5);
  static const int ActorFormationPull_offsets_[1] = {
  };
  ActorFormationPull_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorFormationPull_descriptor_,
      ActorFormationPull::default_instance_,
      ActorFormationPull_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorFormationPull, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorFormationPull, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorFormationPull));
  ActorFormation_descriptor_ = file->message_type(6);
  static const int ActorFormation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorFormation, player_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorFormation, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorFormation, actor_guids_),
  };
  ActorFormation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorFormation_descriptor_,
      ActorFormation::default_instance_,
      ActorFormation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorFormation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorFormation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorFormation));
  ActorFormationAll_descriptor_ = file->message_type(7);
  static const int ActorFormationAll_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorFormationAll, all_formations_),
  };
  ActorFormationAll_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorFormationAll_descriptor_,
      ActorFormationAll::default_instance_,
      ActorFormationAll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorFormationAll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorFormationAll, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorFormationAll));
  SetActorFightReq_descriptor_ = file->message_type(8);
  static const int SetActorFightReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetActorFightReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetActorFightReq, guids_),
  };
  SetActorFightReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetActorFightReq_descriptor_,
      SetActorFightReq::default_instance_,
      SetActorFightReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetActorFightReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetActorFightReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetActorFightReq));
  ActorLevelAndExpUpdate_descriptor_ = file->message_type(9);
  static const int ActorLevelAndExpUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorLevelAndExpUpdate, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorLevelAndExpUpdate, new_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorLevelAndExpUpdate, new_exp_),
  };
  ActorLevelAndExpUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorLevelAndExpUpdate_descriptor_,
      ActorLevelAndExpUpdate::default_instance_,
      ActorLevelAndExpUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorLevelAndExpUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorLevelAndExpUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorLevelAndExpUpdate));
  ActorBattleInfoNotify_descriptor_ = file->message_type(10);
  static const int ActorBattleInfoNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBattleInfoNotify, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBattleInfoNotify, battle_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBattleInfoNotify, score_),
  };
  ActorBattleInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorBattleInfoNotify_descriptor_,
      ActorBattleInfoNotify::default_instance_,
      ActorBattleInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBattleInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBattleInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorBattleInfoNotify));
  ActorSkillRefresh_descriptor_ = file->message_type(11);
  static const int ActorSkillRefresh_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorSkillRefresh, actor_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorSkillRefresh, skills_),
  };
  ActorSkillRefresh_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorSkillRefresh_descriptor_,
      ActorSkillRefresh::default_instance_,
      ActorSkillRefresh_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorSkillRefresh, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorSkillRefresh, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorSkillRefresh));
  ReNameRequest_descriptor_ = file->message_type(12);
  static const int ReNameRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReNameRequest, name_),
  };
  ReNameRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReNameRequest_descriptor_,
      ReNameRequest::default_instance_,
      ReNameRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReNameRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReNameRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReNameRequest));
  ActorSkill_descriptor_ = file->message_type(13);
  static const int ActorSkill_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorSkill, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorSkill, actor_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorSkill, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorSkill, skill_level_),
  };
  ActorSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorSkill_descriptor_,
      ActorSkill::default_instance_,
      ActorSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorSkill));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ActorBasicInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorList_descriptor_, &ActorList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorFullInfo_descriptor_, &ActorFullInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorListReply_descriptor_, &ActorListReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewActorNotify_descriptor_, &NewActorNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorBasicInfo_descriptor_, &ActorBasicInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorFormationPull_descriptor_, &ActorFormationPull::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorFormation_descriptor_, &ActorFormation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorFormationAll_descriptor_, &ActorFormationAll::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetActorFightReq_descriptor_, &SetActorFightReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorLevelAndExpUpdate_descriptor_, &ActorLevelAndExpUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorBattleInfoNotify_descriptor_, &ActorBattleInfoNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorSkillRefresh_descriptor_, &ActorSkillRefresh::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReNameRequest_descriptor_, &ReNameRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorSkill_descriptor_, &ActorSkill::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ActorBasicInfo_2eproto() {
  delete ActorList::default_instance_;
  delete ActorList_reflection_;
  delete ActorFullInfo::default_instance_;
  delete ActorFullInfo_reflection_;
  delete ActorListReply::default_instance_;
  delete ActorListReply_reflection_;
  delete NewActorNotify::default_instance_;
  delete NewActorNotify_reflection_;
  delete ActorBasicInfo::default_instance_;
  delete ActorBasicInfo_reflection_;
  delete ActorFormationPull::default_instance_;
  delete ActorFormationPull_reflection_;
  delete ActorFormation::default_instance_;
  delete ActorFormation_reflection_;
  delete ActorFormationAll::default_instance_;
  delete ActorFormationAll_reflection_;
  delete SetActorFightReq::default_instance_;
  delete SetActorFightReq_reflection_;
  delete ActorLevelAndExpUpdate::default_instance_;
  delete ActorLevelAndExpUpdate_reflection_;
  delete ActorBattleInfoNotify::default_instance_;
  delete ActorBattleInfoNotify_reflection_;
  delete ActorSkillRefresh::default_instance_;
  delete ActorSkillRefresh_reflection_;
  delete ReNameRequest::default_instance_;
  delete ReNameRequest_reflection_;
  delete ActorSkill::default_instance_;
  delete ActorSkill_reflection_;
}

void protobuf_AddDesc_ActorBasicInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Packet::protobuf_AddDesc_AllPacketEnum_2eproto();
  ::Packet::protobuf_AddDesc_ProtoBufOption_2eproto();
  ::Packet::protobuf_AddDesc_PlayerBasicInfo_2eproto();
  ::Packet::protobuf_AddDesc_BattleInfo_2eproto();
  ::Packet::protobuf_AddDesc_ItemAndEquip_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024ActorBasicInfo.proto\022\006Packet\032\023AllPacke"
    "tEnum.proto\032\024ProtoBufOption.proto\032\025Playe"
    "rBasicInfo.proto\032\020BattleInfo.proto\032\022Item"
    "AndEquip.proto\"\013\n\tActorList\"}\n\rActorFull"
    "Info\022%\n\005actor\030\001 \002(\0132\026.Packet.ActorBasicI"
    "nfo\022!\n\006equips\030\002 \003(\0132\021.Packet.EquipItem\022\""
    "\n\006skills\030\003 \003(\0132\022.Packet.ActorSkill\"7\n\016Ac"
    "torListReply\022%\n\006actors\030\001 \003(\0132\025.Packet.Ac"
    "torFullInfo\"K\n\016NewActorNotify\022)\n\nactor_l"
    "sit\030\001 \003(\0132\025.Packet.ActorFullInfo\022\016\n\006sour"
    "ce\030\002 \002(\t\"\271\004\n\016ActorBasicInfo\022\014\n\004guid\030\001 \002("
    "\006\022\023\n\013player_guid\030\002 \002(\006\022\032\n\004race\030\003 \002(\0162\014.P"
    "acket.Race\022\'\n\nprofession\030\004 \002(\0162\023.Packet."
    "Professions\022\036\n\006talent\030\005 \002(\0162\016.Packet.Tal"
    "ent\022\036\n\006gender\030\006 \002(\0162\016.Packet.Gender\022\r\n\005l"
    "evel\030\007 \002(\005\022\'\n\013battle_info\030\010 \002(\0132\022.Packet"
    ".BattleInfo\022\037\n\004type\030\t \002(\0162\021.Packet.Actor"
    "Type\022\013\n\003exp\030\n \002(\005\022\037\n\004star\030\013 \002(\0162\021.Packet"
    ".ActorStar\022!\n\005color\030\014 \002(\0162\022.Packet.Actor"
    "Color\022\017\n\007level_2\030\r \002(\005\022\r\n\005exp_2\030\016 \002(\005\022\014\n"
    "\004name\030\017 \002(\t\022\025\n\rclient_res_id\030\020 \002(\005\022,\n\013ba"
    "ttle_type\030\021 \002(\0162\027.Packet.ActorBattleType"
    "\022\027\n\017actor_config_id\030\022 \002(\005\022\r\n\005score\030\024 \002(\005"
    "\022\025\n\007last_hp\030\025 \003(\005B\004\300\363\030\005\022\014\n\004hair\030\026 \002(\005\022\025\n"
    "\rgem_master_lv\030\027 \002(\005\"\024\n\022ActorFormationPu"
    "ll\"w\n\016ActorFormation\022\031\n\013player_guid\030\001 \002("
    "\006B\004\310\363\030\001\022/\n\004type\030\002 \002(\0162\033.Packet.ActorFigt"
    "hFormationB\004\310\363\030\001\022\031\n\013actor_guids\030\003 \003(\006B\004\300"
    "\363\030\005\"C\n\021ActorFormationAll\022.\n\016all_formatio"
    "ns\030\001 \003(\0132\026.Packet.ActorFormation\"L\n\020SetA"
    "ctorFightReq\022)\n\004type\030\001 \002(\0162\033.Packet.Acto"
    "rFigthFormation\022\r\n\005guids\030\002 \003(\006\"J\n\026ActorL"
    "evelAndExpUpdate\022\014\n\004guid\030\001 \002(\006\022\021\n\tnew_le"
    "vel\030\002 \002(\005\022\017\n\007new_exp\030\003 \002(\005\"]\n\025ActorBattl"
    "eInfoNotify\022\014\n\004guid\030\001 \002(\006\022\'\n\013battle_info"
    "\030\002 \002(\0132\022.Packet.BattleInfo\022\r\n\005score\030\003 \002("
    "\005\"K\n\021ActorSkillRefresh\022\022\n\nactor_guid\030\001 \002"
    "(\006\022\"\n\006skills\030\002 \003(\0132\022.Packet.ActorSkill\"\035"
    "\n\rReNameRequest\022\014\n\004name\030\001 \002(\t\"U\n\nActorSk"
    "ill\022\014\n\004guid\030\001 \002(\006\022\022\n\nactor_guid\030\002 \002(\006\022\020\n"
    "\010skill_id\030\003 \002(\005\022\023\n\013skill_level\030\004 \002(\005", 1636);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ActorBasicInfo.proto", &protobuf_RegisterTypes);
  ActorList::default_instance_ = new ActorList();
  ActorFullInfo::default_instance_ = new ActorFullInfo();
  ActorListReply::default_instance_ = new ActorListReply();
  NewActorNotify::default_instance_ = new NewActorNotify();
  ActorBasicInfo::default_instance_ = new ActorBasicInfo();
  ActorFormationPull::default_instance_ = new ActorFormationPull();
  ActorFormation::default_instance_ = new ActorFormation();
  ActorFormationAll::default_instance_ = new ActorFormationAll();
  SetActorFightReq::default_instance_ = new SetActorFightReq();
  ActorLevelAndExpUpdate::default_instance_ = new ActorLevelAndExpUpdate();
  ActorBattleInfoNotify::default_instance_ = new ActorBattleInfoNotify();
  ActorSkillRefresh::default_instance_ = new ActorSkillRefresh();
  ReNameRequest::default_instance_ = new ReNameRequest();
  ActorSkill::default_instance_ = new ActorSkill();
  ActorList::default_instance_->InitAsDefaultInstance();
  ActorFullInfo::default_instance_->InitAsDefaultInstance();
  ActorListReply::default_instance_->InitAsDefaultInstance();
  NewActorNotify::default_instance_->InitAsDefaultInstance();
  ActorBasicInfo::default_instance_->InitAsDefaultInstance();
  ActorFormationPull::default_instance_->InitAsDefaultInstance();
  ActorFormation::default_instance_->InitAsDefaultInstance();
  ActorFormationAll::default_instance_->InitAsDefaultInstance();
  SetActorFightReq::default_instance_->InitAsDefaultInstance();
  ActorLevelAndExpUpdate::default_instance_->InitAsDefaultInstance();
  ActorBattleInfoNotify::default_instance_->InitAsDefaultInstance();
  ActorSkillRefresh::default_instance_->InitAsDefaultInstance();
  ReNameRequest::default_instance_->InitAsDefaultInstance();
  ActorSkill::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ActorBasicInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ActorBasicInfo_2eproto {
  StaticDescriptorInitializer_ActorBasicInfo_2eproto() {
    protobuf_AddDesc_ActorBasicInfo_2eproto();
  }
} static_descriptor_initializer_ActorBasicInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ActorList::ActorList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActorList::InitAsDefaultInstance() {
}

ActorList::ActorList(const ActorList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActorList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorList::~ActorList() {
  SharedDtor();
}

void ActorList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActorList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorList_descriptor_;
}

const ActorList& ActorList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActorBasicInfo_2eproto();
  return *default_instance_;
}

ActorList* ActorList::default_instance_ = NULL;

ActorList* ActorList::New() const {
  return new ActorList;
}

void ActorList::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ActorList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void ActorList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActorList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActorList::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ActorList::MergeFrom(const ActorList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ActorList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ActorList::CopyFrom(const ActorList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ActorList::IsInitialized() const {

  return true;
}

void ActorList::SetInitialized() {

  return;
}

void ActorList::Swap(ActorList* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ActorList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorList_descriptor_;
  metadata.reflection = ActorList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActorFullInfo::kActorFieldNumber;
const int ActorFullInfo::kEquipsFieldNumber;
const int ActorFullInfo::kSkillsFieldNumber;
#endif  // !_MSC_VER

ActorFullInfo::ActorFullInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActorFullInfo::InitAsDefaultInstance() {
  actor_ = const_cast< ::Packet::ActorBasicInfo*>(&::Packet::ActorBasicInfo::default_instance());
}

ActorFullInfo::ActorFullInfo(const ActorFullInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActorFullInfo::SharedCtor() {
  _cached_size_ = 0;
  actor_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorFullInfo::~ActorFullInfo() {
  SharedDtor();
}

void ActorFullInfo::SharedDtor() {
  if (this != default_instance_) {
    delete actor_;
  }
}

void ActorFullInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorFullInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorFullInfo_descriptor_;
}

const ActorFullInfo& ActorFullInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActorBasicInfo_2eproto();
  return *default_instance_;
}

ActorFullInfo* ActorFullInfo::default_instance_ = NULL;

ActorFullInfo* ActorFullInfo::New() const {
  return new ActorFullInfo;
}

void ActorFullInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_actor()) {
      if (actor_ != NULL) actor_->::Packet::ActorBasicInfo::Clear();
    }
  }
  equips_.Clear();
  skills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ActorFullInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.ActorBasicInfo actor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_actor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equips;
        break;
      }

      // repeated .Packet.EquipItem equips = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equips;
        if (input->ExpectTag(26)) goto parse_skills;
        break;
      }

      // repeated .Packet.ActorSkill skills = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_skills;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ActorFullInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.ActorBasicInfo actor = 1;
  if (has_actor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->actor(), output);
  }

  // repeated .Packet.EquipItem equips = 2;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equips(i), output);
  }

  // repeated .Packet.ActorSkill skills = 3;
  for (int i = 0; i < this->skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->skills(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActorFullInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.ActorBasicInfo actor = 1;
  if (has_actor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->actor(), target);
  }

  // repeated .Packet.EquipItem equips = 2;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equips(i), target);
  }

  // repeated .Packet.ActorSkill skills = 3;
  for (int i = 0; i < this->skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->skills(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActorFullInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.ActorBasicInfo actor = 1;
    if (has_actor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->actor());
    }

  }
  // repeated .Packet.EquipItem equips = 2;
  total_size += 1 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }

  // repeated .Packet.ActorSkill skills = 3;
  total_size += 1 * this->skills_size();
  for (int i = 0; i < this->skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skills(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorFullInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorFullInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorFullInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ActorFullInfo::MergeFrom(const ActorFullInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  equips_.MergeFrom(from.equips_);
  skills_.MergeFrom(from.skills_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actor()) {
      mutable_actor()->::Packet::ActorBasicInfo::MergeFrom(from.actor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ActorFullInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ActorFullInfo::CopyFrom(const ActorFullInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ActorFullInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_actor()) {
    if (!this->actor().IsInitialized()) return false;
  }
  for (int i = 0; i < equips_size(); i++) {
    if (!this->equips(i).IsInitialized()) return false;
  }
  for (int i = 0; i < skills_size(); i++) {
    if (!this->skills(i).IsInitialized()) return false;
  }
  return true;
}

void ActorFullInfo::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  if (has_actor()) {
    this->mutable_actor()->SetInitialized();
  }
  for (int i = 0; i < equips_size(); i++) {
    this->mutable_equips(i)->SetInitialized();
  }
  for (int i = 0; i < skills_size(); i++) {
    this->mutable_skills(i)->SetInitialized();
  }
  return;
}

void ActorFullInfo::Swap(ActorFullInfo* other) {
  if (other != this) {
    std::swap(actor_, other->actor_);
    equips_.Swap(&other->equips_);
    skills_.Swap(&other->skills_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ActorFullInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorFullInfo_descriptor_;
  metadata.reflection = ActorFullInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActorListReply::kActorsFieldNumber;
#endif  // !_MSC_VER

ActorListReply::ActorListReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActorListReply::InitAsDefaultInstance() {
}

ActorListReply::ActorListReply(const ActorListReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActorListReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorListReply::~ActorListReply() {
  SharedDtor();
}

void ActorListReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActorListReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorListReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorListReply_descriptor_;
}

const ActorListReply& ActorListReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActorBasicInfo_2eproto();
  return *default_instance_;
}

ActorListReply* ActorListReply::default_instance_ = NULL;

ActorListReply* ActorListReply::New() const {
  return new ActorListReply;
}

void ActorListReply::Clear() {
  actors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ActorListReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.ActorFullInfo actors = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_actors;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ActorListReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.ActorFullInfo actors = 1;
  for (int i = 0; i < this->actors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->actors(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActorListReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.ActorFullInfo actors = 1;
  for (int i = 0; i < this->actors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->actors(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActorListReply::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.ActorFullInfo actors = 1;
  total_size += 1 * this->actors_size();
  for (int i = 0; i < this->actors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actors(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorListReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorListReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorListReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ActorListReply::MergeFrom(const ActorListReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  actors_.MergeFrom(from.actors_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ActorListReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ActorListReply::CopyFrom(const ActorListReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ActorListReply::IsInitialized() const {

  for (int i = 0; i < actors_size(); i++) {
    if (!this->actors(i).IsInitialized()) return false;
  }
  return true;
}

void ActorListReply::SetInitialized() {

  for (int i = 0; i < actors_size(); i++) {
    this->mutable_actors(i)->SetInitialized();
  }
  return;
}

void ActorListReply::Swap(ActorListReply* other) {
  if (other != this) {
    actors_.Swap(&other->actors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ActorListReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorListReply_descriptor_;
  metadata.reflection = ActorListReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewActorNotify::kActorLsitFieldNumber;
const int NewActorNotify::kSourceFieldNumber;
#endif  // !_MSC_VER

NewActorNotify::NewActorNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NewActorNotify::InitAsDefaultInstance() {
}

NewActorNotify::NewActorNotify(const NewActorNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NewActorNotify::SharedCtor() {
  _cached_size_ = 0;
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewActorNotify::~NewActorNotify() {
  SharedDtor();
}

void NewActorNotify::SharedDtor() {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    delete source_;
  }
  if (this != default_instance_) {
  }
}

void NewActorNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewActorNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewActorNotify_descriptor_;
}

const NewActorNotify& NewActorNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActorBasicInfo_2eproto();
  return *default_instance_;
}

NewActorNotify* NewActorNotify::default_instance_ = NULL;

NewActorNotify* NewActorNotify::New() const {
  return new NewActorNotify;
}

void NewActorNotify::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::kEmptyString) {
        source_->clear();
      }
    }
  }
  actor_lsit_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool NewActorNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.ActorFullInfo actor_lsit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actor_lsit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actor_lsit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_actor_lsit;
        if (input->ExpectTag(18)) goto parse_source;
        break;
      }

      // required string source = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void NewActorNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.ActorFullInfo actor_lsit = 1;
  for (int i = 0; i < this->actor_lsit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->actor_lsit(i), output);
  }

  // required string source = 2;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->source(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NewActorNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.ActorFullInfo actor_lsit = 1;
  for (int i = 0; i < this->actor_lsit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->actor_lsit(i), target);
  }

  // required string source = 2;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->source(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NewActorNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required string source = 2;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

  }
  // repeated .Packet.ActorFullInfo actor_lsit = 1;
  total_size += 1 * this->actor_lsit_size();
  for (int i = 0; i < this->actor_lsit_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actor_lsit(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewActorNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewActorNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewActorNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void NewActorNotify::MergeFrom(const NewActorNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  actor_lsit_.MergeFrom(from.actor_lsit_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_source()) {
      set_source(from.source());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void NewActorNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void NewActorNotify::CopyFrom(const NewActorNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool NewActorNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < actor_lsit_size(); i++) {
    if (!this->actor_lsit(i).IsInitialized()) return false;
  }
  return true;
}

void NewActorNotify::SetInitialized() {
  _has_bits_[0] |= 0x00000002;

  for (int i = 0; i < actor_lsit_size(); i++) {
    this->mutable_actor_lsit(i)->SetInitialized();
  }
  return;
}

void NewActorNotify::Swap(NewActorNotify* other) {
  if (other != this) {
    actor_lsit_.Swap(&other->actor_lsit_);
    std::swap(source_, other->source_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata NewActorNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewActorNotify_descriptor_;
  metadata.reflection = NewActorNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActorBasicInfo::kGuidFieldNumber;
const int ActorBasicInfo::kPlayerGuidFieldNumber;
const int ActorBasicInfo::kRaceFieldNumber;
const int ActorBasicInfo::kProfessionFieldNumber;
const int ActorBasicInfo::kTalentFieldNumber;
const int ActorBasicInfo::kGenderFieldNumber;
const int ActorBasicInfo::kLevelFieldNumber;
const int ActorBasicInfo::kBattleInfoFieldNumber;
const int ActorBasicInfo::kTypeFieldNumber;
const int ActorBasicInfo::kExpFieldNumber;
const int ActorBasicInfo::kStarFieldNumber;
const int ActorBasicInfo::kColorFieldNumber;
const int ActorBasicInfo::kLevel2FieldNumber;
const int ActorBasicInfo::kExp2FieldNumber;
const int ActorBasicInfo::kNameFieldNumber;
const int ActorBasicInfo::kClientResIdFieldNumber;
const int ActorBasicInfo::kBattleTypeFieldNumber;
const int ActorBasicInfo::kActorConfigIdFieldNumber;
const int ActorBasicInfo::kScoreFieldNumber;
const int ActorBasicInfo::kLastHpFieldNumber;
const int ActorBasicInfo::kHairFieldNumber;
const int ActorBasicInfo::kGemMasterLvFieldNumber;
#endif  // !_MSC_VER

ActorBasicInfo::ActorBasicInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActorBasicInfo::InitAsDefaultInstance() {
  battle_info_ = const_cast< ::Packet::BattleInfo*>(&::Packet::BattleInfo::default_instance());
}

ActorBasicInfo::ActorBasicInfo(const ActorBasicInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActorBasicInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  player_guid_ = GOOGLE_ULONGLONG(0);
  race_ = 0;
  profession_ = 0;
  talent_ = 0;
  gender_ = 1;
  level_ = 0;
  battle_info_ = NULL;
  type_ = 1;
  exp_ = 0;
  star_ = 1;
  color_ = 1;
  level_2_ = 0;
  exp_2_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  client_res_id_ = 0;
  battle_type_ = 1;
  actor_config_id_ = 0;
  score_ = 0;
  hair_ = 0;
  gem_master_lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorBasicInfo::~ActorBasicInfo() {
  SharedDtor();
}

void ActorBasicInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete battle_info_;
  }
}

void ActorBasicInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorBasicInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorBasicInfo_descriptor_;
}

const ActorBasicInfo& ActorBasicInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActorBasicInfo_2eproto();
  return *default_instance_;
}

ActorBasicInfo* ActorBasicInfo::default_instance_ = NULL;

ActorBasicInfo* ActorBasicInfo::New() const {
  return new ActorBasicInfo;
}

void ActorBasicInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    player_guid_ = GOOGLE_ULONGLONG(0);
    race_ = 0;
    profession_ = 0;
    talent_ = 0;
    gender_ = 1;
    level_ = 0;
    if (has_battle_info()) {
      if (battle_info_ != NULL) battle_info_->::Packet::BattleInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    type_ = 1;
    exp_ = 0;
    star_ = 1;
    color_ = 1;
    level_2_ = 0;
    exp_2_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    client_res_id_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    battle_type_ = 1;
    actor_config_id_ = 0;
    score_ = 0;
    hair_ = 0;
    gem_master_lv_ = 0;
  }
  last_hp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ActorBasicInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_player_guid;
        break;
      }

      // required fixed64 player_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_player_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &player_guid_)));
          set_has_player_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_race;
        break;
      }

      // required .Packet.Race race = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_race:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::Race_IsValid(value)) {
            set_race(static_cast< ::Packet::Race >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_profession;
        break;
      }

      // required .Packet.Professions profession = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::Professions_IsValid(value)) {
            set_profession(static_cast< ::Packet::Professions >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_talent;
        break;
      }

      // required .Packet.Talent talent = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_talent:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::Talent_IsValid(value)) {
            set_talent(static_cast< ::Packet::Talent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gender;
        break;
      }

      // required .Packet.Gender gender = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::Gender_IsValid(value)) {
            set_gender(static_cast< ::Packet::Gender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // required int32 level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_battle_info;
        break;
      }

      // required .Packet.BattleInfo battle_info = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_type;
        break;
      }

      // required .Packet.ActorType type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::ActorType_IsValid(value)) {
            set_type(static_cast< ::Packet::ActorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_exp;
        break;
      }

      // required int32 exp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_star;
        break;
      }

      // required .Packet.ActorStar star = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::ActorStar_IsValid(value)) {
            set_star(static_cast< ::Packet::ActorStar >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_color;
        break;
      }

      // required .Packet.ActorColor color = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::ActorColor_IsValid(value)) {
            set_color(static_cast< ::Packet::ActorColor >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_level_2;
        break;
      }

      // required int32 level_2 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_2_)));
          set_has_level_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_exp_2;
        break;
      }

      // required int32 exp_2 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_2_)));
          set_has_exp_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_name;
        break;
      }

      // required string name = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_client_res_id;
        break;
      }

      // required int32 client_res_id = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_res_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_res_id_)));
          set_has_client_res_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_battle_type;
        break;
      }

      // required .Packet.ActorBattleType battle_type = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::ActorBattleType_IsValid(value)) {
            set_battle_type(static_cast< ::Packet::ActorBattleType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_actor_config_id;
        break;
      }

      // required int32 actor_config_id = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actor_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actor_config_id_)));
          set_has_actor_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_score;
        break;
      }

      // required int32 score = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_last_hp;
        break;
      }

      // repeated int32 last_hp = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 168, input, this->mutable_last_hp())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_last_hp())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_last_hp;
        if (input->ExpectTag(176)) goto parse_hair;
        break;
      }

      // required int32 hair = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hair_)));
          set_has_hair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_gem_master_lv;
        break;
      }

      // required int32 gem_master_lv = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem_master_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gem_master_lv_)));
          set_has_gem_master_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ActorBasicInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required fixed64 player_guid = 2;
  if (has_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->player_guid(), output);
  }

  // required .Packet.Race race = 3;
  if (has_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->race(), output);
  }

  // required .Packet.Professions profession = 4;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->profession(), output);
  }

  // required .Packet.Talent talent = 5;
  if (has_talent()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->talent(), output);
  }

  // required .Packet.Gender gender = 6;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->gender(), output);
  }

  // required int32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->level(), output);
  }

  // required .Packet.BattleInfo battle_info = 8;
  if (has_battle_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->battle_info(), output);
  }

  // required .Packet.ActorType type = 9;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->type(), output);
  }

  // required int32 exp = 10;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->exp(), output);
  }

  // required .Packet.ActorStar star = 11;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->star(), output);
  }

  // required .Packet.ActorColor color = 12;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->color(), output);
  }

  // required int32 level_2 = 13;
  if (has_level_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->level_2(), output);
  }

  // required int32 exp_2 = 14;
  if (has_exp_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->exp_2(), output);
  }

  // required string name = 15;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->name(), output);
  }

  // required int32 client_res_id = 16;
  if (has_client_res_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->client_res_id(), output);
  }

  // required .Packet.ActorBattleType battle_type = 17;
  if (has_battle_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->battle_type(), output);
  }

  // required int32 actor_config_id = 18;
  if (has_actor_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->actor_config_id(), output);
  }

  // required int32 score = 20;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->score(), output);
  }

  // repeated int32 last_hp = 21;
  for (int i = 0; i < this->last_hp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      21, this->last_hp(i), output);
  }

  // required int32 hair = 22;
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->hair(), output);
  }

  // required int32 gem_master_lv = 23;
  if (has_gem_master_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->gem_master_lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActorBasicInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required fixed64 player_guid = 2;
  if (has_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->player_guid(), target);
  }

  // required .Packet.Race race = 3;
  if (has_race()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->race(), target);
  }

  // required .Packet.Professions profession = 4;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->profession(), target);
  }

  // required .Packet.Talent talent = 5;
  if (has_talent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->talent(), target);
  }

  // required .Packet.Gender gender = 6;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->gender(), target);
  }

  // required int32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->level(), target);
  }

  // required .Packet.BattleInfo battle_info = 8;
  if (has_battle_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->battle_info(), target);
  }

  // required .Packet.ActorType type = 9;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->type(), target);
  }

  // required int32 exp = 10;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->exp(), target);
  }

  // required .Packet.ActorStar star = 11;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->star(), target);
  }

  // required .Packet.ActorColor color = 12;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->color(), target);
  }

  // required int32 level_2 = 13;
  if (has_level_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->level_2(), target);
  }

  // required int32 exp_2 = 14;
  if (has_exp_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->exp_2(), target);
  }

  // required string name = 15;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->name(), target);
  }

  // required int32 client_res_id = 16;
  if (has_client_res_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->client_res_id(), target);
  }

  // required .Packet.ActorBattleType battle_type = 17;
  if (has_battle_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->battle_type(), target);
  }

  // required int32 actor_config_id = 18;
  if (has_actor_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->actor_config_id(), target);
  }

  // required int32 score = 20;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->score(), target);
  }

  // repeated int32 last_hp = 21;
  for (int i = 0; i < this->last_hp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(21, this->last_hp(i), target);
  }

  // required int32 hair = 22;
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->hair(), target);
  }

  // required int32 gem_master_lv = 23;
  if (has_gem_master_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->gem_master_lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActorBasicInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 player_guid = 2;
    if (has_player_guid()) {
      total_size += 1 + 8;
    }

    // required .Packet.Race race = 3;
    if (has_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->race());
    }

    // required .Packet.Professions profession = 4;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->profession());
    }

    // required .Packet.Talent talent = 5;
    if (has_talent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->talent());
    }

    // required .Packet.Gender gender = 6;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }

    // required int32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required .Packet.BattleInfo battle_info = 8;
    if (has_battle_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_info());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .Packet.ActorType type = 9;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 exp = 10;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // required .Packet.ActorStar star = 11;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->star());
    }

    // required .Packet.ActorColor color = 12;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
    }

    // required int32 level_2 = 13;
    if (has_level_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level_2());
    }

    // required int32 exp_2 = 14;
    if (has_exp_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp_2());
    }

    // required string name = 15;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 client_res_id = 16;
    if (has_client_res_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_res_id());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required .Packet.ActorBattleType battle_type = 17;
    if (has_battle_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->battle_type());
    }

    // required int32 actor_config_id = 18;
    if (has_actor_config_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actor_config_id());
    }

    // required int32 score = 20;
    if (has_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // required int32 hair = 22;
    if (has_hair()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hair());
    }

    // required int32 gem_master_lv = 23;
    if (has_gem_master_lv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gem_master_lv());
    }

  }
  // repeated int32 last_hp = 21;
  {
    int data_size = 0;
    for (int i = 0; i < this->last_hp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->last_hp(i));
    }
    total_size += 2 * this->last_hp_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorBasicInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorBasicInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorBasicInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ActorBasicInfo::MergeFrom(const ActorBasicInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  last_hp_.MergeFrom(from.last_hp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_player_guid()) {
      set_player_guid(from.player_guid());
    }
    if (from.has_race()) {
      set_race(from.race());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_talent()) {
      set_talent(from.talent());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_battle_info()) {
      mutable_battle_info()->::Packet::BattleInfo::MergeFrom(from.battle_info());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_level_2()) {
      set_level_2(from.level_2());
    }
    if (from.has_exp_2()) {
      set_exp_2(from.exp_2());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_client_res_id()) {
      set_client_res_id(from.client_res_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_battle_type()) {
      set_battle_type(from.battle_type());
    }
    if (from.has_actor_config_id()) {
      set_actor_config_id(from.actor_config_id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_hair()) {
      set_hair(from.hair());
    }
    if (from.has_gem_master_lv()) {
      set_gem_master_lv(from.gem_master_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ActorBasicInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ActorBasicInfo::CopyFrom(const ActorBasicInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ActorBasicInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0037ffff) != 0x0037ffff) return false;

  if (has_battle_info()) {
    if (!this->battle_info().IsInitialized()) return false;
  }
  return true;
}

void ActorBasicInfo::SetInitialized() {
  _has_bits_[0] |= 0x0037ffff;

  if (has_battle_info()) {
    this->mutable_battle_info()->SetInitialized();
  }
  return;
}

void ActorBasicInfo::Swap(ActorBasicInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(player_guid_, other->player_guid_);
    std::swap(race_, other->race_);
    std::swap(profession_, other->profession_);
    std::swap(talent_, other->talent_);
    std::swap(gender_, other->gender_);
    std::swap(level_, other->level_);
    std::swap(battle_info_, other->battle_info_);
    std::swap(type_, other->type_);
    std::swap(exp_, other->exp_);
    std::swap(star_, other->star_);
    std::swap(color_, other->color_);
    std::swap(level_2_, other->level_2_);
    std::swap(exp_2_, other->exp_2_);
    std::swap(name_, other->name_);
    std::swap(client_res_id_, other->client_res_id_);
    std::swap(battle_type_, other->battle_type_);
    std::swap(actor_config_id_, other->actor_config_id_);
    std::swap(score_, other->score_);
    last_hp_.Swap(&other->last_hp_);
    std::swap(hair_, other->hair_);
    std::swap(gem_master_lv_, other->gem_master_lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ActorBasicInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorBasicInfo_descriptor_;
  metadata.reflection = ActorBasicInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ActorFormationPull::ActorFormationPull()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActorFormationPull::InitAsDefaultInstance() {
}

ActorFormationPull::ActorFormationPull(const ActorFormationPull& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActorFormationPull::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorFormationPull::~ActorFormationPull() {
  SharedDtor();
}

void ActorFormationPull::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActorFormationPull::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorFormationPull::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorFormationPull_descriptor_;
}

const ActorFormationPull& ActorFormationPull::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActorBasicInfo_2eproto();
  return *default_instance_;
}

ActorFormationPull* ActorFormationPull::default_instance_ = NULL;

ActorFormationPull* ActorFormationPull::New() const {
  return new ActorFormationPull;
}

void ActorFormationPull::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ActorFormationPull::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void ActorFormationPull::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActorFormationPull::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActorFormationPull::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorFormationPull::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorFormationPull* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorFormationPull*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ActorFormationPull::MergeFrom(const ActorFormationPull& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ActorFormationPull::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ActorFormationPull::CopyFrom(const ActorFormationPull& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ActorFormationPull::IsInitialized() const {

  return true;
}

void ActorFormationPull::SetInitialized() {

  return;
}

void ActorFormationPull::Swap(ActorFormationPull* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ActorFormationPull::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorFormationPull_descriptor_;
  metadata.reflection = ActorFormationPull_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActorFormation::kPlayerGuidFieldNumber;
const int ActorFormation::kTypeFieldNumber;
const int ActorFormation::kActorGuidsFieldNumber;
#endif  // !_MSC_VER

ActorFormation::ActorFormation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActorFormation::InitAsDefaultInstance() {
}

ActorFormation::ActorFormation(const ActorFormation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActorFormation::SharedCtor() {
  _cached_size_ = 0;
  player_guid_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorFormation::~ActorFormation() {
  SharedDtor();
}

void ActorFormation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActorFormation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorFormation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorFormation_descriptor_;
}

const ActorFormation& ActorFormation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActorBasicInfo_2eproto();
  return *default_instance_;
}

ActorFormation* ActorFormation::default_instance_ = NULL;

ActorFormation* ActorFormation::New() const {
  return new ActorFormation;
}

void ActorFormation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_guid_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
  }
  actor_guids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ActorFormation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 player_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &player_guid_)));
          set_has_player_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .Packet.ActorFigthFormation type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::ActorFigthFormation_IsValid(value)) {
            set_type(static_cast< ::Packet::ActorFigthFormation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_actor_guids;
        break;
      }

      // repeated fixed64 actor_guids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_actor_guids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 25, input, this->mutable_actor_guids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_actor_guids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_actor_guids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ActorFormation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 player_guid = 1;
  if (has_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->player_guid(), output);
  }

  // required .Packet.ActorFigthFormation type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // repeated fixed64 actor_guids = 3;
  for (int i = 0; i < this->actor_guids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      3, this->actor_guids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActorFormation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 player_guid = 1;
  if (has_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->player_guid(), target);
  }

  // required .Packet.ActorFigthFormation type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // repeated fixed64 actor_guids = 3;
  for (int i = 0; i < this->actor_guids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(3, this->actor_guids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActorFormation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 player_guid = 1;
    if (has_player_guid()) {
      total_size += 1 + 8;
    }

    // required .Packet.ActorFigthFormation type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated fixed64 actor_guids = 3;
  {
    int data_size = 0;
    data_size = 8 * this->actor_guids_size();
    total_size += 1 * this->actor_guids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorFormation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorFormation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorFormation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ActorFormation::MergeFrom(const ActorFormation& from) {
  GOOGLE_CHECK_NE(&from, this);
  actor_guids_.MergeFrom(from.actor_guids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_guid()) {
      set_player_guid(from.player_guid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ActorFormation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ActorFormation::CopyFrom(const ActorFormation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ActorFormation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ActorFormation::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void ActorFormation::Swap(ActorFormation* other) {
  if (other != this) {
    std::swap(player_guid_, other->player_guid_);
    std::swap(type_, other->type_);
    actor_guids_.Swap(&other->actor_guids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ActorFormation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorFormation_descriptor_;
  metadata.reflection = ActorFormation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActorFormationAll::kAllFormationsFieldNumber;
#endif  // !_MSC_VER

ActorFormationAll::ActorFormationAll()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActorFormationAll::InitAsDefaultInstance() {
}

ActorFormationAll::ActorFormationAll(const ActorFormationAll& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActorFormationAll::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorFormationAll::~ActorFormationAll() {
  SharedDtor();
}

void ActorFormationAll::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActorFormationAll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorFormationAll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorFormationAll_descriptor_;
}

const ActorFormationAll& ActorFormationAll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActorBasicInfo_2eproto();
  return *default_instance_;
}

ActorFormationAll* ActorFormationAll::default_instance_ = NULL;

ActorFormationAll* ActorFormationAll::New() const {
  return new ActorFormationAll;
}

void ActorFormationAll::Clear() {
  all_formations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ActorFormationAll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.ActorFormation all_formations = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_all_formations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_all_formations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_all_formations;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ActorFormationAll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.ActorFormation all_formations = 1;
  for (int i = 0; i < this->all_formations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->all_formations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActorFormationAll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.ActorFormation all_formations = 1;
  for (int i = 0; i < this->all_formations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->all_formations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActorFormationAll::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.ActorFormation all_formations = 1;
  total_size += 1 * this->all_formations_size();
  for (int i = 0; i < this->all_formations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->all_formations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorFormationAll::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorFormationAll* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorFormationAll*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ActorFormationAll::MergeFrom(const ActorFormationAll& from) {
  GOOGLE_CHECK_NE(&from, this);
  all_formations_.MergeFrom(from.all_formations_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ActorFormationAll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ActorFormationAll::CopyFrom(const ActorFormationAll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ActorFormationAll::IsInitialized() const {

  for (int i = 0; i < all_formations_size(); i++) {
    if (!this->all_formations(i).IsInitialized()) return false;
  }
  return true;
}

void ActorFormationAll::SetInitialized() {

  for (int i = 0; i < all_formations_size(); i++) {
    this->mutable_all_formations(i)->SetInitialized();
  }
  return;
}

void ActorFormationAll::Swap(ActorFormationAll* other) {
  if (other != this) {
    all_formations_.Swap(&other->all_formations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ActorFormationAll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorFormationAll_descriptor_;
  metadata.reflection = ActorFormationAll_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetActorFightReq::kTypeFieldNumber;
const int SetActorFightReq::kGuidsFieldNumber;
#endif  // !_MSC_VER

SetActorFightReq::SetActorFightReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetActorFightReq::InitAsDefaultInstance() {
}

SetActorFightReq::SetActorFightReq(const SetActorFightReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetActorFightReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetActorFightReq::~SetActorFightReq() {
  SharedDtor();
}

void SetActorFightReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetActorFightReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetActorFightReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetActorFightReq_descriptor_;
}

const SetActorFightReq& SetActorFightReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActorBasicInfo_2eproto();
  return *default_instance_;
}

SetActorFightReq* SetActorFightReq::default_instance_ = NULL;

SetActorFightReq* SetActorFightReq::New() const {
  return new SetActorFightReq;
}

void SetActorFightReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  guids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SetActorFightReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.ActorFigthFormation type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::ActorFigthFormation_IsValid(value)) {
            set_type(static_cast< ::Packet::ActorFigthFormation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_guids;
        break;
      }

      // repeated fixed64 guids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_guids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17, input, this->mutable_guids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_guids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_guids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SetActorFightReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.ActorFigthFormation type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated fixed64 guids = 2;
  for (int i = 0; i < this->guids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->guids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetActorFightReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.ActorFigthFormation type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated fixed64 guids = 2;
  for (int i = 0; i < this->guids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(2, this->guids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetActorFightReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.ActorFigthFormation type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated fixed64 guids = 2;
  {
    int data_size = 0;
    data_size = 8 * this->guids_size();
    total_size += 1 * this->guids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetActorFightReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetActorFightReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetActorFightReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SetActorFightReq::MergeFrom(const SetActorFightReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  guids_.MergeFrom(from.guids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SetActorFightReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SetActorFightReq::CopyFrom(const SetActorFightReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SetActorFightReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetActorFightReq::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void SetActorFightReq::Swap(SetActorFightReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    guids_.Swap(&other->guids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SetActorFightReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetActorFightReq_descriptor_;
  metadata.reflection = SetActorFightReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActorLevelAndExpUpdate::kGuidFieldNumber;
const int ActorLevelAndExpUpdate::kNewLevelFieldNumber;
const int ActorLevelAndExpUpdate::kNewExpFieldNumber;
#endif  // !_MSC_VER

ActorLevelAndExpUpdate::ActorLevelAndExpUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActorLevelAndExpUpdate::InitAsDefaultInstance() {
}

ActorLevelAndExpUpdate::ActorLevelAndExpUpdate(const ActorLevelAndExpUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActorLevelAndExpUpdate::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  new_level_ = 0;
  new_exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorLevelAndExpUpdate::~ActorLevelAndExpUpdate() {
  SharedDtor();
}

void ActorLevelAndExpUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActorLevelAndExpUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorLevelAndExpUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorLevelAndExpUpdate_descriptor_;
}

const ActorLevelAndExpUpdate& ActorLevelAndExpUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActorBasicInfo_2eproto();
  return *default_instance_;
}

ActorLevelAndExpUpdate* ActorLevelAndExpUpdate::default_instance_ = NULL;

ActorLevelAndExpUpdate* ActorLevelAndExpUpdate::New() const {
  return new ActorLevelAndExpUpdate;
}

void ActorLevelAndExpUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    new_level_ = 0;
    new_exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ActorLevelAndExpUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_new_level;
        break;
      }

      // required int32 new_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_level_)));
          set_has_new_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_new_exp;
        break;
      }

      // required int32 new_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_exp_)));
          set_has_new_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ActorLevelAndExpUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required int32 new_level = 2;
  if (has_new_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->new_level(), output);
  }

  // required int32 new_exp = 3;
  if (has_new_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->new_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActorLevelAndExpUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required int32 new_level = 2;
  if (has_new_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->new_level(), target);
  }

  // required int32 new_exp = 3;
  if (has_new_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->new_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActorLevelAndExpUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required int32 new_level = 2;
    if (has_new_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_level());
    }

    // required int32 new_exp = 3;
    if (has_new_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorLevelAndExpUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorLevelAndExpUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorLevelAndExpUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ActorLevelAndExpUpdate::MergeFrom(const ActorLevelAndExpUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_new_level()) {
      set_new_level(from.new_level());
    }
    if (from.has_new_exp()) {
      set_new_exp(from.new_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ActorLevelAndExpUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ActorLevelAndExpUpdate::CopyFrom(const ActorLevelAndExpUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ActorLevelAndExpUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ActorLevelAndExpUpdate::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  return;
}

void ActorLevelAndExpUpdate::Swap(ActorLevelAndExpUpdate* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(new_level_, other->new_level_);
    std::swap(new_exp_, other->new_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ActorLevelAndExpUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorLevelAndExpUpdate_descriptor_;
  metadata.reflection = ActorLevelAndExpUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActorBattleInfoNotify::kGuidFieldNumber;
const int ActorBattleInfoNotify::kBattleInfoFieldNumber;
const int ActorBattleInfoNotify::kScoreFieldNumber;
#endif  // !_MSC_VER

ActorBattleInfoNotify::ActorBattleInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActorBattleInfoNotify::InitAsDefaultInstance() {
  battle_info_ = const_cast< ::Packet::BattleInfo*>(&::Packet::BattleInfo::default_instance());
}

ActorBattleInfoNotify::ActorBattleInfoNotify(const ActorBattleInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActorBattleInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  battle_info_ = NULL;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorBattleInfoNotify::~ActorBattleInfoNotify() {
  SharedDtor();
}

void ActorBattleInfoNotify::SharedDtor() {
  if (this != default_instance_) {
    delete battle_info_;
  }
}

void ActorBattleInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorBattleInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorBattleInfoNotify_descriptor_;
}

const ActorBattleInfoNotify& ActorBattleInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActorBasicInfo_2eproto();
  return *default_instance_;
}

ActorBattleInfoNotify* ActorBattleInfoNotify::default_instance_ = NULL;

ActorBattleInfoNotify* ActorBattleInfoNotify::New() const {
  return new ActorBattleInfoNotify;
}

void ActorBattleInfoNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    if (has_battle_info()) {
      if (battle_info_ != NULL) battle_info_->::Packet::BattleInfo::Clear();
    }
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ActorBattleInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_battle_info;
        break;
      }

      // required .Packet.BattleInfo battle_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // required int32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ActorBattleInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required .Packet.BattleInfo battle_info = 2;
  if (has_battle_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battle_info(), output);
  }

  // required int32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActorBattleInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required .Packet.BattleInfo battle_info = 2;
  if (has_battle_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battle_info(), target);
  }

  // required int32 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActorBattleInfoNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required .Packet.BattleInfo battle_info = 2;
    if (has_battle_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_info());
    }

    // required int32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorBattleInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorBattleInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorBattleInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ActorBattleInfoNotify::MergeFrom(const ActorBattleInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_battle_info()) {
      mutable_battle_info()->::Packet::BattleInfo::MergeFrom(from.battle_info());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ActorBattleInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ActorBattleInfoNotify::CopyFrom(const ActorBattleInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ActorBattleInfoNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_battle_info()) {
    if (!this->battle_info().IsInitialized()) return false;
  }
  return true;
}

void ActorBattleInfoNotify::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  if (has_battle_info()) {
    this->mutable_battle_info()->SetInitialized();
  }
  return;
}

void ActorBattleInfoNotify::Swap(ActorBattleInfoNotify* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(battle_info_, other->battle_info_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ActorBattleInfoNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorBattleInfoNotify_descriptor_;
  metadata.reflection = ActorBattleInfoNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActorSkillRefresh::kActorGuidFieldNumber;
const int ActorSkillRefresh::kSkillsFieldNumber;
#endif  // !_MSC_VER

ActorSkillRefresh::ActorSkillRefresh()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActorSkillRefresh::InitAsDefaultInstance() {
}

ActorSkillRefresh::ActorSkillRefresh(const ActorSkillRefresh& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActorSkillRefresh::SharedCtor() {
  _cached_size_ = 0;
  actor_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorSkillRefresh::~ActorSkillRefresh() {
  SharedDtor();
}

void ActorSkillRefresh::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActorSkillRefresh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorSkillRefresh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorSkillRefresh_descriptor_;
}

const ActorSkillRefresh& ActorSkillRefresh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActorBasicInfo_2eproto();
  return *default_instance_;
}

ActorSkillRefresh* ActorSkillRefresh::default_instance_ = NULL;

ActorSkillRefresh* ActorSkillRefresh::New() const {
  return new ActorSkillRefresh;
}

void ActorSkillRefresh::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    actor_guid_ = GOOGLE_ULONGLONG(0);
  }
  skills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ActorSkillRefresh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 actor_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &actor_guid_)));
          set_has_actor_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skills;
        break;
      }

      // repeated .Packet.ActorSkill skills = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skills;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ActorSkillRefresh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 actor_guid = 1;
  if (has_actor_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->actor_guid(), output);
  }

  // repeated .Packet.ActorSkill skills = 2;
  for (int i = 0; i < this->skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->skills(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActorSkillRefresh::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 actor_guid = 1;
  if (has_actor_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->actor_guid(), target);
  }

  // repeated .Packet.ActorSkill skills = 2;
  for (int i = 0; i < this->skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->skills(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActorSkillRefresh::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 actor_guid = 1;
    if (has_actor_guid()) {
      total_size += 1 + 8;
    }

  }
  // repeated .Packet.ActorSkill skills = 2;
  total_size += 1 * this->skills_size();
  for (int i = 0; i < this->skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skills(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorSkillRefresh::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorSkillRefresh* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorSkillRefresh*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ActorSkillRefresh::MergeFrom(const ActorSkillRefresh& from) {
  GOOGLE_CHECK_NE(&from, this);
  skills_.MergeFrom(from.skills_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actor_guid()) {
      set_actor_guid(from.actor_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ActorSkillRefresh::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ActorSkillRefresh::CopyFrom(const ActorSkillRefresh& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ActorSkillRefresh::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < skills_size(); i++) {
    if (!this->skills(i).IsInitialized()) return false;
  }
  return true;
}

void ActorSkillRefresh::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  for (int i = 0; i < skills_size(); i++) {
    this->mutable_skills(i)->SetInitialized();
  }
  return;
}

void ActorSkillRefresh::Swap(ActorSkillRefresh* other) {
  if (other != this) {
    std::swap(actor_guid_, other->actor_guid_);
    skills_.Swap(&other->skills_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ActorSkillRefresh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorSkillRefresh_descriptor_;
  metadata.reflection = ActorSkillRefresh_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReNameRequest::kNameFieldNumber;
#endif  // !_MSC_VER

ReNameRequest::ReNameRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReNameRequest::InitAsDefaultInstance() {
}

ReNameRequest::ReNameRequest(const ReNameRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReNameRequest::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReNameRequest::~ReNameRequest() {
  SharedDtor();
}

void ReNameRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ReNameRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReNameRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReNameRequest_descriptor_;
}

const ReNameRequest& ReNameRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActorBasicInfo_2eproto();
  return *default_instance_;
}

ReNameRequest* ReNameRequest::default_instance_ = NULL;

ReNameRequest* ReNameRequest::New() const {
  return new ReNameRequest;
}

void ReNameRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ReNameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ReNameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReNameRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReNameRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReNameRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReNameRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReNameRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ReNameRequest::MergeFrom(const ReNameRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ReNameRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ReNameRequest::CopyFrom(const ReNameRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ReNameRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReNameRequest::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void ReNameRequest::Swap(ReNameRequest* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ReNameRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReNameRequest_descriptor_;
  metadata.reflection = ReNameRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActorSkill::kGuidFieldNumber;
const int ActorSkill::kActorGuidFieldNumber;
const int ActorSkill::kSkillIdFieldNumber;
const int ActorSkill::kSkillLevelFieldNumber;
#endif  // !_MSC_VER

ActorSkill::ActorSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActorSkill::InitAsDefaultInstance() {
}

ActorSkill::ActorSkill(const ActorSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActorSkill::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  actor_guid_ = GOOGLE_ULONGLONG(0);
  skill_id_ = 0;
  skill_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorSkill::~ActorSkill() {
  SharedDtor();
}

void ActorSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActorSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorSkill_descriptor_;
}

const ActorSkill& ActorSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActorBasicInfo_2eproto();
  return *default_instance_;
}

ActorSkill* ActorSkill::default_instance_ = NULL;

ActorSkill* ActorSkill::New() const {
  return new ActorSkill;
}

void ActorSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    actor_guid_ = GOOGLE_ULONGLONG(0);
    skill_id_ = 0;
    skill_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ActorSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_actor_guid;
        break;
      }

      // required fixed64 actor_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_actor_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &actor_guid_)));
          set_has_actor_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skill_id;
        break;
      }

      // required int32 skill_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skill_level;
        break;
      }

      // required int32 skill_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ActorSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required fixed64 actor_guid = 2;
  if (has_actor_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->actor_guid(), output);
  }

  // required int32 skill_id = 3;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skill_id(), output);
  }

  // required int32 skill_level = 4;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->skill_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActorSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required fixed64 actor_guid = 2;
  if (has_actor_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->actor_guid(), target);
  }

  // required int32 skill_id = 3;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skill_id(), target);
  }

  // required int32 skill_level = 4;
  if (has_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->skill_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActorSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 actor_guid = 2;
    if (has_actor_guid()) {
      total_size += 1 + 8;
    }

    // required int32 skill_id = 3;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }

    // required int32 skill_level = 4;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ActorSkill::MergeFrom(const ActorSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_actor_guid()) {
      set_actor_guid(from.actor_guid());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ActorSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ActorSkill::CopyFrom(const ActorSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ActorSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ActorSkill::SetInitialized() {
  _has_bits_[0] |= 0x0000000f;

  return;
}

void ActorSkill::Swap(ActorSkill* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(actor_guid_, other->actor_guid_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ActorSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorSkill_descriptor_;
  metadata.reflection = ActorSkill_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

// @@protoc_insertion_point(global_scope)
