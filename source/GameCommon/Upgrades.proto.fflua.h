// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Upgrades.proto

#ifndef PROTOBUF_Upgrades_2eproto_2efflua_2eh__INCLUDED
#define PROTOBUF_Upgrades_2eproto_2efflua_2eh__INCLUDED

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include<lua/fflua_register.h>

#include "ActorBasicInfo.proto.fflua.h"
#include "AllPacketEnum.proto.fflua.h"
#include "Upgrades.pb.h"
namespace ff{
//UpgradeItemInfo
//UpgradeInfo
//UpgradeColorReq
//UpgradeColorReply
//UpgradeLevelReq
//UpgradeLevelReply
template<>
struct basetype_ptr_traits_t<::Packet::UpgradeLevelReply::Result>
{
	typedef int32_t arg_type_t;
};

template<>
struct p_t<::Packet::UpgradeLevelReply::Result>
{
	static ::Packet::UpgradeLevelReply::Result r(int32_t a) { return (::Packet::UpgradeLevelReply::Result)a; }
};
//UpgradeStarReq
//UpgradeStarReply
template<>
struct basetype_ptr_traits_t<::Packet::UpgradeStarReply::Result>
{
	typedef int32_t arg_type_t;
};

template<>
struct p_t<::Packet::UpgradeStarReply::Result>
{
	static ::Packet::UpgradeStarReply::Result r(int32_t a) { return (::Packet::UpgradeStarReply::Result)a; }
};
//UpgradeSkillReq
//EnhenceEquipReq
//AddEnchantSlotReq
//EnchantEquipReq
//BatchEnchantEquipReq
//EnchantPreviewEle
//EnchantPreview
//BatchEnchantEquipReply
//BatchEnchantEquipConfirmReq
//BatchEnchantEquipConfirmReply
template<>
struct basetype_ptr_traits_t<::Packet::BatchEnchantEquipConfirmReply::Result>
{
	typedef int32_t arg_type_t;
};

template<>
struct p_t<::Packet::BatchEnchantEquipConfirmReply::Result>
{
	static ::Packet::BatchEnchantEquipConfirmReply::Result r(int32_t a) { return (::Packet::BatchEnchantEquipConfirmReply::Result)a; }
};
//InsetEquipReq
//TakeOutGemReq
//EquipInheritReq
//FixEquipReq
//GemFusionReq
//CG_GemFusion
//DismantleEquipReq
//EquipMagicalReq
}
namespace Packet {
bool UpgradeItemInfo_fflua_reg(lua_State* state);
bool UpgradeInfo_fflua_reg(lua_State* state);
bool UpgradeColorReq_fflua_reg(lua_State* state);
bool UpgradeColorReply_fflua_reg(lua_State* state);
bool UpgradeLevelReq_fflua_reg(lua_State* state);
bool UpgradeLevelReply_fflua_reg(lua_State* state);
bool UpgradeStarReq_fflua_reg(lua_State* state);
bool UpgradeStarReply_fflua_reg(lua_State* state);
bool UpgradeSkillReq_fflua_reg(lua_State* state);
bool EnhenceEquipReq_fflua_reg(lua_State* state);
bool AddEnchantSlotReq_fflua_reg(lua_State* state);
bool EnchantEquipReq_fflua_reg(lua_State* state);
bool BatchEnchantEquipReq_fflua_reg(lua_State* state);
bool EnchantPreviewEle_fflua_reg(lua_State* state);
bool EnchantPreview_fflua_reg(lua_State* state);
bool BatchEnchantEquipReply_fflua_reg(lua_State* state);
bool BatchEnchantEquipConfirmReq_fflua_reg(lua_State* state);
bool BatchEnchantEquipConfirmReply_fflua_reg(lua_State* state);
bool InsetEquipReq_fflua_reg(lua_State* state);
bool TakeOutGemReq_fflua_reg(lua_State* state);
bool EquipInheritReq_fflua_reg(lua_State* state);
bool FixEquipReq_fflua_reg(lua_State* state);
bool GemFusionReq_fflua_reg(lua_State* state);
bool CG_GemFusion_fflua_reg(lua_State* state);
bool DismantleEquipReq_fflua_reg(lua_State* state);
bool EquipMagicalReq_fflua_reg(lua_State* state);
bool Upgrades_fflua_regist_all(lua_State* state);
}
#endif //PROTOBUF_Upgrades_2eproto_2efflua_2eh__INCLUDED
