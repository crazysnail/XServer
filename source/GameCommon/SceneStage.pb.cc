// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneStage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SceneStage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Packet {

namespace {

const ::google::protobuf::Descriptor* GetSceneStageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSceneStageInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SceneStageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneStageInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* HookRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HookRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* HookRankUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HookRankUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* CaptureStage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CaptureStage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CaptureStageToScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CaptureStageToScene_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateStageTax_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateStageTax_reflection_ = NULL;
const ::google::protobuf::Descriptor* CollectAllTax_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CollectAllTax_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuardStageSuccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuardStageSuccess_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleFormation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleFormation_reflection_ = NULL;
const ::google::protobuf::Descriptor* Challengers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Challengers_reflection_ = NULL;
const ::google::protobuf::Descriptor* SceneStageCaptain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneStageCaptain_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerStages_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerStages_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerStageDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerStageDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerStage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerStage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RTHC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RTHC_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResetRealTimeHookEfficient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResetRealTimeHookEfficient_reflection_ = NULL;
const ::google::protobuf::Descriptor* RealTimeHookEfficient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RealTimeHookEfficient_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SceneStage_2eproto() {
  protobuf_AddDesc_SceneStage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SceneStage.proto");
  GOOGLE_CHECK(file != NULL);
  GetSceneStageInfo_descriptor_ = file->message_type(0);
  static const int GetSceneStageInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSceneStageInfo, stage_ids_),
  };
  GetSceneStageInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSceneStageInfo_descriptor_,
      GetSceneStageInfo::default_instance_,
      GetSceneStageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSceneStageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSceneStageInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSceneStageInfo));
  SceneStageInfo_descriptor_ = file->message_type(1);
  static const int SceneStageInfo_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageInfo, stage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageInfo, tax_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageInfo, tax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageInfo, captain_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageInfo, captain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageInfo, fast_time_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageInfo, fast_formation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageInfo, best_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageInfo, best_formation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageInfo, challengers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageInfo, guild_tax_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageInfo, guild_tax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageInfo, ranks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageInfo, tax_broadcasted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageInfo, guild_tax_broadcasted_),
  };
  SceneStageInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SceneStageInfo_descriptor_,
      SceneStageInfo::default_instance_,
      SceneStageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SceneStageInfo));
  HookRank_descriptor_ = file->message_type(2);
  static const int HookRank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HookRank, users_),
  };
  HookRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HookRank_descriptor_,
      HookRank::default_instance_,
      HookRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HookRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HookRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HookRank));
  HookRankUser_descriptor_ = file->message_type(3);
  static const int HookRankUser_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HookRankUser, player_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HookRankUser, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HookRankUser, seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HookRankUser, income_per_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HookRankUser, exp_pre_min_),
  };
  HookRankUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HookRankUser_descriptor_,
      HookRankUser::default_instance_,
      HookRankUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HookRankUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HookRankUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HookRankUser));
  CaptureStage_descriptor_ = file->message_type(4);
  static const int CaptureStage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureStage, stage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureStage, battle_group_id_),
  };
  CaptureStage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CaptureStage_descriptor_,
      CaptureStage::default_instance_,
      CaptureStage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureStage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureStage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CaptureStage));
  CaptureStageToScene_descriptor_ = file->message_type(5);
  static const int CaptureStageToScene_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureStageToScene, client_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureStageToScene, actors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureStageToScene, boss_group_id_),
  };
  CaptureStageToScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CaptureStageToScene_descriptor_,
      CaptureStageToScene::default_instance_,
      CaptureStageToScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureStageToScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaptureStageToScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CaptureStageToScene));
  UpdateStageTax_descriptor_ = file->message_type(6);
  static const int UpdateStageTax_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStageTax, stage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStageTax, new_tax_),
  };
  UpdateStageTax_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateStageTax_descriptor_,
      UpdateStageTax::default_instance_,
      UpdateStageTax_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStageTax, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStageTax, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateStageTax));
  CollectAllTax_descriptor_ = file->message_type(7);
  static const int CollectAllTax_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectAllTax, stage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectAllTax, tax_),
  };
  CollectAllTax_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CollectAllTax_descriptor_,
      CollectAllTax::default_instance_,
      CollectAllTax_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectAllTax, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectAllTax, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CollectAllTax));
  GuardStageSuccess_descriptor_ = file->message_type(8);
  static const int GuardStageSuccess_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuardStageSuccess, stage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuardStageSuccess, name_),
  };
  GuardStageSuccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuardStageSuccess_descriptor_,
      GuardStageSuccess::default_instance_,
      GuardStageSuccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuardStageSuccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuardStageSuccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuardStageSuccess));
  BattleFormation_descriptor_ = file->message_type(9);
  static const int BattleFormation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFormation, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFormation, actors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFormation, player_guid_),
  };
  BattleFormation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleFormation_descriptor_,
      BattleFormation::default_instance_,
      BattleFormation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFormation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFormation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleFormation));
  Challengers_descriptor_ = file->message_type(10);
  static const int Challengers_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Challengers, names_),
  };
  Challengers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Challengers_descriptor_,
      Challengers::default_instance_,
      Challengers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Challengers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Challengers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Challengers));
  SceneStageCaptain_descriptor_ = file->message_type(11);
  static const int SceneStageCaptain_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageCaptain, player_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageCaptain, actors_),
  };
  SceneStageCaptain_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SceneStageCaptain_descriptor_,
      SceneStageCaptain::default_instance_,
      SceneStageCaptain_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageCaptain, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageCaptain, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SceneStageCaptain));
  PlayerStages_descriptor_ = file->message_type(12);
  static const int PlayerStages_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStages, player_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStages, current_stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStages, stages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStages, configs_),
  };
  PlayerStages_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerStages_descriptor_,
      PlayerStages::default_instance_,
      PlayerStages_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStages, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStages, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerStages));
  PlayerStageDB_descriptor_ = file->message_type(13);
  static const int PlayerStageDB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStageDB, player_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStageDB, current_stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStageDB, configs_),
  };
  PlayerStageDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerStageDB_descriptor_,
      PlayerStageDB::default_instance_,
      PlayerStageDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStageDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStageDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerStageDB));
  PlayerStage_descriptor_ = file->message_type(14);
  static const int PlayerStage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStage, player_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStage, raid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStage, boss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStage, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStage, den_),
  };
  PlayerStage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerStage_descriptor_,
      PlayerStage::default_instance_,
      PlayerStage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerStage));
  RTHC_descriptor_ = file->message_type(15);
  static const int RTHC_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTHC, stage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTHC, total_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTHC, hook_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTHC, relate_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTHC, calc_done_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTHC, wave_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTHC, wave_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTHC, wave_mill_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTHC, dead_mill_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTHC, wave_kill_),
  };
  RTHC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RTHC_descriptor_,
      RTHC::default_instance_,
      RTHC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTHC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTHC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RTHC));
  ResetRealTimeHookEfficient_descriptor_ = file->message_type(16);
  static const int ResetRealTimeHookEfficient_offsets_[1] = {
  };
  ResetRealTimeHookEfficient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResetRealTimeHookEfficient_descriptor_,
      ResetRealTimeHookEfficient::default_instance_,
      ResetRealTimeHookEfficient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetRealTimeHookEfficient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetRealTimeHookEfficient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResetRealTimeHookEfficient));
  RealTimeHookEfficient_descriptor_ = file->message_type(17);
  static const int RealTimeHookEfficient_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeHookEfficient, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeHookEfficient, item_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeHookEfficient, item_counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeHookEfficient, up_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeHookEfficient, off_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeHookEfficient, level_up_need_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeHookEfficient, total_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeHookEfficient, total_exp_extra_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeHookEfficient, total_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeHookEfficient, battle_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeHookEfficient, battle_time_costs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeHookEfficient, monster_kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeHookEfficient, dead_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeHookEfficient, boss_stage_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeHookEfficient, boss_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeHookEfficient, green_equip_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeHookEfficient, green_equip_dismantle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeHookEfficient, blue_equip_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeHookEfficient, blue_equip_count_dismantle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeHookEfficient, purple_equip_count_),
  };
  RealTimeHookEfficient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RealTimeHookEfficient_descriptor_,
      RealTimeHookEfficient::default_instance_,
      RealTimeHookEfficient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeHookEfficient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealTimeHookEfficient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RealTimeHookEfficient));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SceneStage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSceneStageInfo_descriptor_, &GetSceneStageInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SceneStageInfo_descriptor_, &SceneStageInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HookRank_descriptor_, &HookRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HookRankUser_descriptor_, &HookRankUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CaptureStage_descriptor_, &CaptureStage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CaptureStageToScene_descriptor_, &CaptureStageToScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateStageTax_descriptor_, &UpdateStageTax::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CollectAllTax_descriptor_, &CollectAllTax::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuardStageSuccess_descriptor_, &GuardStageSuccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleFormation_descriptor_, &BattleFormation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Challengers_descriptor_, &Challengers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SceneStageCaptain_descriptor_, &SceneStageCaptain::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerStages_descriptor_, &PlayerStages::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerStageDB_descriptor_, &PlayerStageDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerStage_descriptor_, &PlayerStage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RTHC_descriptor_, &RTHC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResetRealTimeHookEfficient_descriptor_, &ResetRealTimeHookEfficient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RealTimeHookEfficient_descriptor_, &RealTimeHookEfficient::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SceneStage_2eproto() {
  delete GetSceneStageInfo::default_instance_;
  delete GetSceneStageInfo_reflection_;
  delete SceneStageInfo::default_instance_;
  delete SceneStageInfo_reflection_;
  delete HookRank::default_instance_;
  delete HookRank_reflection_;
  delete HookRankUser::default_instance_;
  delete HookRankUser_reflection_;
  delete CaptureStage::default_instance_;
  delete CaptureStage_reflection_;
  delete CaptureStageToScene::default_instance_;
  delete CaptureStageToScene_reflection_;
  delete UpdateStageTax::default_instance_;
  delete UpdateStageTax_reflection_;
  delete CollectAllTax::default_instance_;
  delete CollectAllTax_reflection_;
  delete GuardStageSuccess::default_instance_;
  delete GuardStageSuccess_reflection_;
  delete BattleFormation::default_instance_;
  delete BattleFormation_reflection_;
  delete Challengers::default_instance_;
  delete Challengers_reflection_;
  delete SceneStageCaptain::default_instance_;
  delete SceneStageCaptain_reflection_;
  delete PlayerStages::default_instance_;
  delete PlayerStages_reflection_;
  delete PlayerStageDB::default_instance_;
  delete PlayerStageDB_reflection_;
  delete PlayerStage::default_instance_;
  delete PlayerStage_reflection_;
  delete RTHC::default_instance_;
  delete RTHC_reflection_;
  delete ResetRealTimeHookEfficient::default_instance_;
  delete ResetRealTimeHookEfficient_reflection_;
  delete RealTimeHookEfficient::default_instance_;
  delete RealTimeHookEfficient_reflection_;
}

void protobuf_AddDesc_SceneStage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Packet::protobuf_AddDesc_ProtoBufOption_2eproto();
  ::Packet::protobuf_AddDesc_ClientMove_2eproto();
  ::Packet::protobuf_AddDesc_ActorBasicInfo_2eproto();
  ::Packet::protobuf_AddDesc_PlayerBasicInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020SceneStage.proto\022\006Packet\032\024ProtoBufOpti"
    "on.proto\032\020ClientMove.proto\032\024ActorBasicIn"
    "fo.proto\032\025PlayerBasicInfo.proto\"&\n\021GetSc"
    "eneStageInfo\022\021\n\tstage_ids\030\001 \003(\005\"\343\003\n\016Scen"
    "eStageInfo\022\026\n\010stage_id\030\002 \002(\005B\004\310\363\030\001\022\020\n\010ta"
    "x_rate\030\003 \002(\005\022\013\n\003tax\030\004 \002(\005\022\024\n\014captain_gui"
    "d\030\005 \002(\006\0224\n\007captain\030\006 \002(\0132\031.Packet.SceneS"
    "tageCaptainB\010\342\363\030\004blob\022\026\n\016fast_time_cost\030"
    "\010 \002(\005\0229\n\016fast_formation\030\t \002(\0132\027.Packet.B"
    "attleFormationB\010\342\363\030\004blob\022\022\n\nbest_score\030\n"
    " \002(\005\0229\n\016best_formation\030\013 \002(\0132\027.Packet.Ba"
    "ttleFormationB\010\342\363\030\004blob\022(\n\013challengers\030\014"
    " \002(\0132\023.Packet.Challengers\022\026\n\016guild_tax_r"
    "ate\030\r \002(\005\022\021\n\tguild_tax\030\016 \002(\005\022\037\n\005ranks\030\017 "
    "\001(\0132\020.Packet.HookRank\022\027\n\017tax_broadcasted"
    "\030\020 \001(\010\022\035\n\025guild_tax_broadcasted\030\021 \001(\010\"/\n"
    "\010HookRank\022#\n\005users\030\001 \003(\0132\024.Packet.HookRa"
    "nkUser\"o\n\014HookRankUser\022\023\n\013player_guid\030\001 "
    "\002(\006\022\014\n\004name\030\002 \002(\t\022\017\n\007seconds\030\003 \002(\005\022\026\n\016in"
    "come_per_min\030\004 \002(\005\022\023\n\013exp_pre_min\030\005 \002(\005\""
    "9\n\014CaptureStage\022\020\n\010stage_id\030\001 \002(\005\022\027\n\017bat"
    "tle_group_id\030\002 \002(\005\"}\n\023CaptureStageToScen"
    "e\022(\n\nclient_req\030\001 \002(\0132\024.Packet.CaptureSt"
    "age\022%\n\006actors\030\002 \003(\0132\025.Packet.ActorFullIn"
    "fo\022\025\n\rboss_group_id\030\003 \002(\005\"3\n\016UpdateStage"
    "Tax\022\020\n\010stage_id\030\001 \002(\005\022\017\n\007new_tax\030\002 \002(\005\"."
    "\n\rCollectAllTax\022\020\n\010stage_id\030\001 \002(\005\022\013\n\003tax"
    "\030\002 \001(\005\"3\n\021GuardStageSuccess\022\020\n\010stage_id\030"
    "\001 \002(\005\022\014\n\004name\030\002 \002(\t\"b\n\017BattleFormation\022\023"
    "\n\013player_name\030\001 \001(\t\022%\n\006actors\030\002 \003(\0132\025.Pa"
    "cket.ActorFullInfo\022\023\n\013player_guid\030\003 \001(\006\""
    "\034\n\013Challengers\022\r\n\005names\030\001 \003(\t\"h\n\021SceneSt"
    "ageCaptain\022,\n\013player_info\030\001 \001(\0132\027.Packet"
    ".PlayerBasicInfo\022%\n\006actors\030\002 \003(\0132\025.Packe"
    "t.ActorFullInfo\"~\n\014PlayerStages\022\023\n\013playe"
    "r_guid\030\001 \002(\006\022\025\n\rcurrent_stage\030\002 \002(\005\022#\n\006s"
    "tages\030\003 \003(\0132\023.Packet.PlayerStage\022\035\n\007conf"
    "igs\030\004 \003(\0132\014.Packet.RTHC\"f\n\rPlayerStageDB"
    "\022\031\n\013player_guid\030\001 \002(\006B\004\310\363\030\001\022\025\n\rcurrent_s"
    "tage\030\002 \002(\005\022#\n\007configs\030\003 \003(\0132\014.Packet.RTH"
    "CB\004\300\363\030\003\"\241\001\n\013PlayerStage\022\031\n\013player_guid\030\001"
    " \002(\006B\004\310\363\030\001\022\020\n\002id\030\002 \002(\005B\004\310\363\030\001\022\014\n\004raid\030\003 \002"
    "(\010\022\035\n\004boss\030\004 \002(\005B\017\342\363\030\013smallint(4)\022\033\n\003num"
    "\030\005 \002(\005B\016\342\363\030\ntinyint(4)\022\033\n\003den\030\006 \002(\005B\016\342\363\030"
    "\ntinyint(4)\"\316\001\n\004RTHC\022\020\n\010stage_id\030\001 \002(\005\022\022"
    "\n\ntotal_time\030\002 \002(\006\022\021\n\thook_time\030\013 \002(\006\022\024\n"
    "\014relate_score\030\t \002(\005\022\021\n\tcalc_done\030\n \002(\010\022\020"
    "\n\010wave_exp\030\014 \002(\005\022\021\n\twave_gold\030\r \002(\005\022\025\n\rw"
    "ave_mill_sec\030\016 \002(\006\022\025\n\rdead_mill_sec\030\017 \002("
    "\006\022\021\n\twave_kill\030\020 \002(\005\"\034\n\032ResetRealTimeHoo"
    "kEfficient\"\373\003\n\025RealTimeHookEfficient\022\034\n\006"
    "config\030\001 \002(\0132\014.Packet.RTHC\022\020\n\010item_ids\030\002"
    " \003(\005\022\023\n\013item_counts\030\003 \003(\005\022\020\n\010up_level\030\004 "
    "\002(\005\022\020\n\010off_time\030\005 \002(\006\022\035\n\025level_up_need_s"
    "econds\030\006 \002(\005\022\021\n\ttotal_exp\030\007 \002(\005\022\027\n\017total"
    "_exp_extra\030\024 \002(\005\022\022\n\ntotal_gold\030\010 \002(\005\022\024\n\014"
    "battle_times\030\t \002(\005\022\031\n\021battle_time_costs\030"
    "\023 \002(\005\022\025\n\rmonster_kills\030\n \002(\005\022\022\n\ndead_tim"
    "es\030\013 \002(\005\022\026\n\016boss_stage_ids\030\014 \003(\005\022\022\n\nboss"
    "_count\030\r \003(\005\022\031\n\021green_equip_count\030\016 \002(\005\022"
    "\035\n\025green_equip_dismantle\030\017 \002(\005\022\030\n\020blue_e"
    "quip_count\030\020 \002(\005\022\"\n\032blue_equip_count_dis"
    "mantle\030\021 \002(\005\022\032\n\022purple_equip_count\030\022 \002(\005", 2520);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SceneStage.proto", &protobuf_RegisterTypes);
  GetSceneStageInfo::default_instance_ = new GetSceneStageInfo();
  SceneStageInfo::default_instance_ = new SceneStageInfo();
  HookRank::default_instance_ = new HookRank();
  HookRankUser::default_instance_ = new HookRankUser();
  CaptureStage::default_instance_ = new CaptureStage();
  CaptureStageToScene::default_instance_ = new CaptureStageToScene();
  UpdateStageTax::default_instance_ = new UpdateStageTax();
  CollectAllTax::default_instance_ = new CollectAllTax();
  GuardStageSuccess::default_instance_ = new GuardStageSuccess();
  BattleFormation::default_instance_ = new BattleFormation();
  Challengers::default_instance_ = new Challengers();
  SceneStageCaptain::default_instance_ = new SceneStageCaptain();
  PlayerStages::default_instance_ = new PlayerStages();
  PlayerStageDB::default_instance_ = new PlayerStageDB();
  PlayerStage::default_instance_ = new PlayerStage();
  RTHC::default_instance_ = new RTHC();
  ResetRealTimeHookEfficient::default_instance_ = new ResetRealTimeHookEfficient();
  RealTimeHookEfficient::default_instance_ = new RealTimeHookEfficient();
  GetSceneStageInfo::default_instance_->InitAsDefaultInstance();
  SceneStageInfo::default_instance_->InitAsDefaultInstance();
  HookRank::default_instance_->InitAsDefaultInstance();
  HookRankUser::default_instance_->InitAsDefaultInstance();
  CaptureStage::default_instance_->InitAsDefaultInstance();
  CaptureStageToScene::default_instance_->InitAsDefaultInstance();
  UpdateStageTax::default_instance_->InitAsDefaultInstance();
  CollectAllTax::default_instance_->InitAsDefaultInstance();
  GuardStageSuccess::default_instance_->InitAsDefaultInstance();
  BattleFormation::default_instance_->InitAsDefaultInstance();
  Challengers::default_instance_->InitAsDefaultInstance();
  SceneStageCaptain::default_instance_->InitAsDefaultInstance();
  PlayerStages::default_instance_->InitAsDefaultInstance();
  PlayerStageDB::default_instance_->InitAsDefaultInstance();
  PlayerStage::default_instance_->InitAsDefaultInstance();
  RTHC::default_instance_->InitAsDefaultInstance();
  ResetRealTimeHookEfficient::default_instance_->InitAsDefaultInstance();
  RealTimeHookEfficient::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SceneStage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SceneStage_2eproto {
  StaticDescriptorInitializer_SceneStage_2eproto() {
    protobuf_AddDesc_SceneStage_2eproto();
  }
} static_descriptor_initializer_SceneStage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GetSceneStageInfo::kStageIdsFieldNumber;
#endif  // !_MSC_VER

GetSceneStageInfo::GetSceneStageInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSceneStageInfo::InitAsDefaultInstance() {
}

GetSceneStageInfo::GetSceneStageInfo(const GetSceneStageInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSceneStageInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSceneStageInfo::~GetSceneStageInfo() {
  SharedDtor();
}

void GetSceneStageInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSceneStageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSceneStageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSceneStageInfo_descriptor_;
}

const GetSceneStageInfo& GetSceneStageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneStage_2eproto();
  return *default_instance_;
}

GetSceneStageInfo* GetSceneStageInfo::default_instance_ = NULL;

GetSceneStageInfo* GetSceneStageInfo::New() const {
  return new GetSceneStageInfo;
}

void GetSceneStageInfo::Clear() {
  stage_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GetSceneStageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 stage_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_stage_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stage_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_stage_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GetSceneStageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 stage_ids = 1;
  for (int i = 0; i < this->stage_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->stage_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSceneStageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 stage_ids = 1;
  for (int i = 0; i < this->stage_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->stage_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSceneStageInfo::ByteSize() const {
  int total_size = 0;

  // repeated int32 stage_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->stage_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->stage_ids(i));
    }
    total_size += 1 * this->stage_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSceneStageInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSceneStageInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSceneStageInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GetSceneStageInfo::MergeFrom(const GetSceneStageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  stage_ids_.MergeFrom(from.stage_ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GetSceneStageInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GetSceneStageInfo::CopyFrom(const GetSceneStageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GetSceneStageInfo::IsInitialized() const {

  return true;
}

void GetSceneStageInfo::SetInitialized() {

  return;
}

void GetSceneStageInfo::Swap(GetSceneStageInfo* other) {
  if (other != this) {
    stage_ids_.Swap(&other->stage_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GetSceneStageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSceneStageInfo_descriptor_;
  metadata.reflection = GetSceneStageInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SceneStageInfo::kStageIdFieldNumber;
const int SceneStageInfo::kTaxRateFieldNumber;
const int SceneStageInfo::kTaxFieldNumber;
const int SceneStageInfo::kCaptainGuidFieldNumber;
const int SceneStageInfo::kCaptainFieldNumber;
const int SceneStageInfo::kFastTimeCostFieldNumber;
const int SceneStageInfo::kFastFormationFieldNumber;
const int SceneStageInfo::kBestScoreFieldNumber;
const int SceneStageInfo::kBestFormationFieldNumber;
const int SceneStageInfo::kChallengersFieldNumber;
const int SceneStageInfo::kGuildTaxRateFieldNumber;
const int SceneStageInfo::kGuildTaxFieldNumber;
const int SceneStageInfo::kRanksFieldNumber;
const int SceneStageInfo::kTaxBroadcastedFieldNumber;
const int SceneStageInfo::kGuildTaxBroadcastedFieldNumber;
#endif  // !_MSC_VER

SceneStageInfo::SceneStageInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SceneStageInfo::InitAsDefaultInstance() {
  captain_ = const_cast< ::Packet::SceneStageCaptain*>(&::Packet::SceneStageCaptain::default_instance());
  fast_formation_ = const_cast< ::Packet::BattleFormation*>(&::Packet::BattleFormation::default_instance());
  best_formation_ = const_cast< ::Packet::BattleFormation*>(&::Packet::BattleFormation::default_instance());
  challengers_ = const_cast< ::Packet::Challengers*>(&::Packet::Challengers::default_instance());
  ranks_ = const_cast< ::Packet::HookRank*>(&::Packet::HookRank::default_instance());
}

SceneStageInfo::SceneStageInfo(const SceneStageInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SceneStageInfo::SharedCtor() {
  _cached_size_ = 0;
  stage_id_ = 0;
  tax_rate_ = 0;
  tax_ = 0;
  captain_guid_ = GOOGLE_ULONGLONG(0);
  captain_ = NULL;
  fast_time_cost_ = 0;
  fast_formation_ = NULL;
  best_score_ = 0;
  best_formation_ = NULL;
  challengers_ = NULL;
  guild_tax_rate_ = 0;
  guild_tax_ = 0;
  ranks_ = NULL;
  tax_broadcasted_ = false;
  guild_tax_broadcasted_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneStageInfo::~SceneStageInfo() {
  SharedDtor();
}

void SceneStageInfo::SharedDtor() {
  if (this != default_instance_) {
    delete captain_;
    delete fast_formation_;
    delete best_formation_;
    delete challengers_;
    delete ranks_;
  }
}

void SceneStageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneStageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneStageInfo_descriptor_;
}

const SceneStageInfo& SceneStageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneStage_2eproto();
  return *default_instance_;
}

SceneStageInfo* SceneStageInfo::default_instance_ = NULL;

SceneStageInfo* SceneStageInfo::New() const {
  return new SceneStageInfo;
}

void SceneStageInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stage_id_ = 0;
    tax_rate_ = 0;
    tax_ = 0;
    captain_guid_ = GOOGLE_ULONGLONG(0);
    if (has_captain()) {
      if (captain_ != NULL) captain_->::Packet::SceneStageCaptain::Clear();
    }
    fast_time_cost_ = 0;
    if (has_fast_formation()) {
      if (fast_formation_ != NULL) fast_formation_->::Packet::BattleFormation::Clear();
    }
    best_score_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_best_formation()) {
      if (best_formation_ != NULL) best_formation_->::Packet::BattleFormation::Clear();
    }
    if (has_challengers()) {
      if (challengers_ != NULL) challengers_->::Packet::Challengers::Clear();
    }
    guild_tax_rate_ = 0;
    guild_tax_ = 0;
    if (has_ranks()) {
      if (ranks_ != NULL) ranks_->::Packet::HookRank::Clear();
    }
    tax_broadcasted_ = false;
    guild_tax_broadcasted_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SceneStageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 stage_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_id_)));
          set_has_stage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tax_rate;
        break;
      }

      // required int32 tax_rate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tax_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tax_rate_)));
          set_has_tax_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tax;
        break;
      }

      // required int32 tax = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tax_)));
          set_has_tax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_captain_guid;
        break;
      }

      // required fixed64 captain_guid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_captain_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &captain_guid_)));
          set_has_captain_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_captain;
        break;
      }

      // required .Packet.SceneStageCaptain captain = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_captain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_captain()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fast_time_cost;
        break;
      }

      // required int32 fast_time_cost = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fast_time_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fast_time_cost_)));
          set_has_fast_time_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_fast_formation;
        break;
      }

      // required .Packet.BattleFormation fast_formation = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fast_formation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fast_formation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_best_score;
        break;
      }

      // required int32 best_score = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_best_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &best_score_)));
          set_has_best_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_best_formation;
        break;
      }

      // required .Packet.BattleFormation best_formation = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_best_formation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_best_formation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_challengers;
        break;
      }

      // required .Packet.Challengers challengers = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_challengers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_challengers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_guild_tax_rate;
        break;
      }

      // required int32 guild_tax_rate = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_tax_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_tax_rate_)));
          set_has_guild_tax_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_guild_tax;
        break;
      }

      // required int32 guild_tax = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_tax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_tax_)));
          set_has_guild_tax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_ranks;
        break;
      }

      // optional .Packet.HookRank ranks = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ranks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ranks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_tax_broadcasted;
        break;
      }

      // optional bool tax_broadcasted = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tax_broadcasted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tax_broadcasted_)));
          set_has_tax_broadcasted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_guild_tax_broadcasted;
        break;
      }

      // optional bool guild_tax_broadcasted = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_tax_broadcasted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &guild_tax_broadcasted_)));
          set_has_guild_tax_broadcasted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SceneStageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 stage_id = 2;
  if (has_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stage_id(), output);
  }

  // required int32 tax_rate = 3;
  if (has_tax_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tax_rate(), output);
  }

  // required int32 tax = 4;
  if (has_tax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tax(), output);
  }

  // required fixed64 captain_guid = 5;
  if (has_captain_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->captain_guid(), output);
  }

  // required .Packet.SceneStageCaptain captain = 6;
  if (has_captain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->captain(), output);
  }

  // required int32 fast_time_cost = 8;
  if (has_fast_time_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->fast_time_cost(), output);
  }

  // required .Packet.BattleFormation fast_formation = 9;
  if (has_fast_formation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->fast_formation(), output);
  }

  // required int32 best_score = 10;
  if (has_best_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->best_score(), output);
  }

  // required .Packet.BattleFormation best_formation = 11;
  if (has_best_formation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->best_formation(), output);
  }

  // required .Packet.Challengers challengers = 12;
  if (has_challengers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->challengers(), output);
  }

  // required int32 guild_tax_rate = 13;
  if (has_guild_tax_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->guild_tax_rate(), output);
  }

  // required int32 guild_tax = 14;
  if (has_guild_tax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->guild_tax(), output);
  }

  // optional .Packet.HookRank ranks = 15;
  if (has_ranks()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->ranks(), output);
  }

  // optional bool tax_broadcasted = 16;
  if (has_tax_broadcasted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->tax_broadcasted(), output);
  }

  // optional bool guild_tax_broadcasted = 17;
  if (has_guild_tax_broadcasted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->guild_tax_broadcasted(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SceneStageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 stage_id = 2;
  if (has_stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stage_id(), target);
  }

  // required int32 tax_rate = 3;
  if (has_tax_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tax_rate(), target);
  }

  // required int32 tax = 4;
  if (has_tax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tax(), target);
  }

  // required fixed64 captain_guid = 5;
  if (has_captain_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->captain_guid(), target);
  }

  // required .Packet.SceneStageCaptain captain = 6;
  if (has_captain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->captain(), target);
  }

  // required int32 fast_time_cost = 8;
  if (has_fast_time_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->fast_time_cost(), target);
  }

  // required .Packet.BattleFormation fast_formation = 9;
  if (has_fast_formation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->fast_formation(), target);
  }

  // required int32 best_score = 10;
  if (has_best_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->best_score(), target);
  }

  // required .Packet.BattleFormation best_formation = 11;
  if (has_best_formation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->best_formation(), target);
  }

  // required .Packet.Challengers challengers = 12;
  if (has_challengers()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->challengers(), target);
  }

  // required int32 guild_tax_rate = 13;
  if (has_guild_tax_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->guild_tax_rate(), target);
  }

  // required int32 guild_tax = 14;
  if (has_guild_tax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->guild_tax(), target);
  }

  // optional .Packet.HookRank ranks = 15;
  if (has_ranks()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->ranks(), target);
  }

  // optional bool tax_broadcasted = 16;
  if (has_tax_broadcasted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->tax_broadcasted(), target);
  }

  // optional bool guild_tax_broadcasted = 17;
  if (has_guild_tax_broadcasted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->guild_tax_broadcasted(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SceneStageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 stage_id = 2;
    if (has_stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage_id());
    }

    // required int32 tax_rate = 3;
    if (has_tax_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tax_rate());
    }

    // required int32 tax = 4;
    if (has_tax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tax());
    }

    // required fixed64 captain_guid = 5;
    if (has_captain_guid()) {
      total_size += 1 + 8;
    }

    // required .Packet.SceneStageCaptain captain = 6;
    if (has_captain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->captain());
    }

    // required int32 fast_time_cost = 8;
    if (has_fast_time_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fast_time_cost());
    }

    // required .Packet.BattleFormation fast_formation = 9;
    if (has_fast_formation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fast_formation());
    }

    // required int32 best_score = 10;
    if (has_best_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->best_score());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .Packet.BattleFormation best_formation = 11;
    if (has_best_formation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->best_formation());
    }

    // required .Packet.Challengers challengers = 12;
    if (has_challengers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->challengers());
    }

    // required int32 guild_tax_rate = 13;
    if (has_guild_tax_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_tax_rate());
    }

    // required int32 guild_tax = 14;
    if (has_guild_tax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_tax());
    }

    // optional .Packet.HookRank ranks = 15;
    if (has_ranks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ranks());
    }

    // optional bool tax_broadcasted = 16;
    if (has_tax_broadcasted()) {
      total_size += 2 + 1;
    }

    // optional bool guild_tax_broadcasted = 17;
    if (has_guild_tax_broadcasted()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneStageInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SceneStageInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SceneStageInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SceneStageInfo::MergeFrom(const SceneStageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage_id()) {
      set_stage_id(from.stage_id());
    }
    if (from.has_tax_rate()) {
      set_tax_rate(from.tax_rate());
    }
    if (from.has_tax()) {
      set_tax(from.tax());
    }
    if (from.has_captain_guid()) {
      set_captain_guid(from.captain_guid());
    }
    if (from.has_captain()) {
      mutable_captain()->::Packet::SceneStageCaptain::MergeFrom(from.captain());
    }
    if (from.has_fast_time_cost()) {
      set_fast_time_cost(from.fast_time_cost());
    }
    if (from.has_fast_formation()) {
      mutable_fast_formation()->::Packet::BattleFormation::MergeFrom(from.fast_formation());
    }
    if (from.has_best_score()) {
      set_best_score(from.best_score());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_best_formation()) {
      mutable_best_formation()->::Packet::BattleFormation::MergeFrom(from.best_formation());
    }
    if (from.has_challengers()) {
      mutable_challengers()->::Packet::Challengers::MergeFrom(from.challengers());
    }
    if (from.has_guild_tax_rate()) {
      set_guild_tax_rate(from.guild_tax_rate());
    }
    if (from.has_guild_tax()) {
      set_guild_tax(from.guild_tax());
    }
    if (from.has_ranks()) {
      mutable_ranks()->::Packet::HookRank::MergeFrom(from.ranks());
    }
    if (from.has_tax_broadcasted()) {
      set_tax_broadcasted(from.tax_broadcasted());
    }
    if (from.has_guild_tax_broadcasted()) {
      set_guild_tax_broadcasted(from.guild_tax_broadcasted());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SceneStageInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SceneStageInfo::CopyFrom(const SceneStageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SceneStageInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  if (has_captain()) {
    if (!this->captain().IsInitialized()) return false;
  }
  if (has_fast_formation()) {
    if (!this->fast_formation().IsInitialized()) return false;
  }
  if (has_best_formation()) {
    if (!this->best_formation().IsInitialized()) return false;
  }
  if (has_ranks()) {
    if (!this->ranks().IsInitialized()) return false;
  }
  return true;
}

void SceneStageInfo::SetInitialized() {
  _has_bits_[0] |= 0x00000fff;

  if (has_captain()) {
    this->mutable_captain()->SetInitialized();
  }
  if (has_fast_formation()) {
    this->mutable_fast_formation()->SetInitialized();
  }
  if (has_best_formation()) {
    this->mutable_best_formation()->SetInitialized();
  }
  if (has_ranks()) {
    this->mutable_ranks()->SetInitialized();
  }
  return;
}

void SceneStageInfo::Swap(SceneStageInfo* other) {
  if (other != this) {
    std::swap(stage_id_, other->stage_id_);
    std::swap(tax_rate_, other->tax_rate_);
    std::swap(tax_, other->tax_);
    std::swap(captain_guid_, other->captain_guid_);
    std::swap(captain_, other->captain_);
    std::swap(fast_time_cost_, other->fast_time_cost_);
    std::swap(fast_formation_, other->fast_formation_);
    std::swap(best_score_, other->best_score_);
    std::swap(best_formation_, other->best_formation_);
    std::swap(challengers_, other->challengers_);
    std::swap(guild_tax_rate_, other->guild_tax_rate_);
    std::swap(guild_tax_, other->guild_tax_);
    std::swap(ranks_, other->ranks_);
    std::swap(tax_broadcasted_, other->tax_broadcasted_);
    std::swap(guild_tax_broadcasted_, other->guild_tax_broadcasted_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SceneStageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneStageInfo_descriptor_;
  metadata.reflection = SceneStageInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HookRank::kUsersFieldNumber;
#endif  // !_MSC_VER

HookRank::HookRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HookRank::InitAsDefaultInstance() {
}

HookRank::HookRank(const HookRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HookRank::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HookRank::~HookRank() {
  SharedDtor();
}

void HookRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HookRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HookRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HookRank_descriptor_;
}

const HookRank& HookRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneStage_2eproto();
  return *default_instance_;
}

HookRank* HookRank::default_instance_ = NULL;

HookRank* HookRank::New() const {
  return new HookRank;
}

void HookRank::Clear() {
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool HookRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.HookRankUser users = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_users;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void HookRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.HookRankUser users = 1;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->users(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HookRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.HookRankUser users = 1;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->users(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HookRank::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.HookRankUser users = 1;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HookRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HookRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HookRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void HookRank::MergeFrom(const HookRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void HookRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void HookRank::CopyFrom(const HookRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool HookRank::IsInitialized() const {

  for (int i = 0; i < users_size(); i++) {
    if (!this->users(i).IsInitialized()) return false;
  }
  return true;
}

void HookRank::SetInitialized() {

  for (int i = 0; i < users_size(); i++) {
    this->mutable_users(i)->SetInitialized();
  }
  return;
}

void HookRank::Swap(HookRank* other) {
  if (other != this) {
    users_.Swap(&other->users_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata HookRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HookRank_descriptor_;
  metadata.reflection = HookRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HookRankUser::kPlayerGuidFieldNumber;
const int HookRankUser::kNameFieldNumber;
const int HookRankUser::kSecondsFieldNumber;
const int HookRankUser::kIncomePerMinFieldNumber;
const int HookRankUser::kExpPreMinFieldNumber;
#endif  // !_MSC_VER

HookRankUser::HookRankUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HookRankUser::InitAsDefaultInstance() {
}

HookRankUser::HookRankUser(const HookRankUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HookRankUser::SharedCtor() {
  _cached_size_ = 0;
  player_guid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seconds_ = 0;
  income_per_min_ = 0;
  exp_pre_min_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HookRankUser::~HookRankUser() {
  SharedDtor();
}

void HookRankUser::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void HookRankUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HookRankUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HookRankUser_descriptor_;
}

const HookRankUser& HookRankUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneStage_2eproto();
  return *default_instance_;
}

HookRankUser* HookRankUser::default_instance_ = NULL;

HookRankUser* HookRankUser::New() const {
  return new HookRankUser;
}

void HookRankUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_guid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    seconds_ = 0;
    income_per_min_ = 0;
    exp_pre_min_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool HookRankUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 player_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &player_guid_)));
          set_has_player_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seconds;
        break;
      }

      // required int32 seconds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seconds_)));
          set_has_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_income_per_min;
        break;
      }

      // required int32 income_per_min = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_income_per_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &income_per_min_)));
          set_has_income_per_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_exp_pre_min;
        break;
      }

      // required int32 exp_pre_min = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp_pre_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_pre_min_)));
          set_has_exp_pre_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void HookRankUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 player_guid = 1;
  if (has_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->player_guid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required int32 seconds = 3;
  if (has_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seconds(), output);
  }

  // required int32 income_per_min = 4;
  if (has_income_per_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->income_per_min(), output);
  }

  // required int32 exp_pre_min = 5;
  if (has_exp_pre_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->exp_pre_min(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HookRankUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 player_guid = 1;
  if (has_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->player_guid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required int32 seconds = 3;
  if (has_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seconds(), target);
  }

  // required int32 income_per_min = 4;
  if (has_income_per_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->income_per_min(), target);
  }

  // required int32 exp_pre_min = 5;
  if (has_exp_pre_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->exp_pre_min(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HookRankUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 player_guid = 1;
    if (has_player_guid()) {
      total_size += 1 + 8;
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 seconds = 3;
    if (has_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seconds());
    }

    // required int32 income_per_min = 4;
    if (has_income_per_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->income_per_min());
    }

    // required int32 exp_pre_min = 5;
    if (has_exp_pre_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp_pre_min());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HookRankUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HookRankUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HookRankUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void HookRankUser::MergeFrom(const HookRankUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_guid()) {
      set_player_guid(from.player_guid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_seconds()) {
      set_seconds(from.seconds());
    }
    if (from.has_income_per_min()) {
      set_income_per_min(from.income_per_min());
    }
    if (from.has_exp_pre_min()) {
      set_exp_pre_min(from.exp_pre_min());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void HookRankUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void HookRankUser::CopyFrom(const HookRankUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool HookRankUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void HookRankUser::SetInitialized() {
  _has_bits_[0] |= 0x0000001f;

  return;
}

void HookRankUser::Swap(HookRankUser* other) {
  if (other != this) {
    std::swap(player_guid_, other->player_guid_);
    std::swap(name_, other->name_);
    std::swap(seconds_, other->seconds_);
    std::swap(income_per_min_, other->income_per_min_);
    std::swap(exp_pre_min_, other->exp_pre_min_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata HookRankUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HookRankUser_descriptor_;
  metadata.reflection = HookRankUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CaptureStage::kStageIdFieldNumber;
const int CaptureStage::kBattleGroupIdFieldNumber;
#endif  // !_MSC_VER

CaptureStage::CaptureStage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CaptureStage::InitAsDefaultInstance() {
}

CaptureStage::CaptureStage(const CaptureStage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CaptureStage::SharedCtor() {
  _cached_size_ = 0;
  stage_id_ = 0;
  battle_group_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CaptureStage::~CaptureStage() {
  SharedDtor();
}

void CaptureStage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CaptureStage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CaptureStage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaptureStage_descriptor_;
}

const CaptureStage& CaptureStage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneStage_2eproto();
  return *default_instance_;
}

CaptureStage* CaptureStage::default_instance_ = NULL;

CaptureStage* CaptureStage::New() const {
  return new CaptureStage;
}

void CaptureStage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stage_id_ = 0;
    battle_group_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool CaptureStage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 stage_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_id_)));
          set_has_stage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_group_id;
        break;
      }

      // required int32 battle_group_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_group_id_)));
          set_has_battle_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void CaptureStage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 stage_id = 1;
  if (has_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stage_id(), output);
  }

  // required int32 battle_group_id = 2;
  if (has_battle_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->battle_group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CaptureStage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 stage_id = 1;
  if (has_stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stage_id(), target);
  }

  // required int32 battle_group_id = 2;
  if (has_battle_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->battle_group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CaptureStage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 stage_id = 1;
    if (has_stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage_id());
    }

    // required int32 battle_group_id = 2;
    if (has_battle_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CaptureStage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CaptureStage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CaptureStage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void CaptureStage::MergeFrom(const CaptureStage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage_id()) {
      set_stage_id(from.stage_id());
    }
    if (from.has_battle_group_id()) {
      set_battle_group_id(from.battle_group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void CaptureStage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void CaptureStage::CopyFrom(const CaptureStage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool CaptureStage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CaptureStage::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void CaptureStage::Swap(CaptureStage* other) {
  if (other != this) {
    std::swap(stage_id_, other->stage_id_);
    std::swap(battle_group_id_, other->battle_group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata CaptureStage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CaptureStage_descriptor_;
  metadata.reflection = CaptureStage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CaptureStageToScene::kClientReqFieldNumber;
const int CaptureStageToScene::kActorsFieldNumber;
const int CaptureStageToScene::kBossGroupIdFieldNumber;
#endif  // !_MSC_VER

CaptureStageToScene::CaptureStageToScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CaptureStageToScene::InitAsDefaultInstance() {
  client_req_ = const_cast< ::Packet::CaptureStage*>(&::Packet::CaptureStage::default_instance());
}

CaptureStageToScene::CaptureStageToScene(const CaptureStageToScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CaptureStageToScene::SharedCtor() {
  _cached_size_ = 0;
  client_req_ = NULL;
  boss_group_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CaptureStageToScene::~CaptureStageToScene() {
  SharedDtor();
}

void CaptureStageToScene::SharedDtor() {
  if (this != default_instance_) {
    delete client_req_;
  }
}

void CaptureStageToScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CaptureStageToScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaptureStageToScene_descriptor_;
}

const CaptureStageToScene& CaptureStageToScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneStage_2eproto();
  return *default_instance_;
}

CaptureStageToScene* CaptureStageToScene::default_instance_ = NULL;

CaptureStageToScene* CaptureStageToScene::New() const {
  return new CaptureStageToScene;
}

void CaptureStageToScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_client_req()) {
      if (client_req_ != NULL) client_req_->::Packet::CaptureStage::Clear();
    }
    boss_group_id_ = 0;
  }
  actors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool CaptureStageToScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.CaptureStage client_req = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_actors;
        break;
      }

      // repeated .Packet.ActorFullInfo actors = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_actors;
        if (input->ExpectTag(24)) goto parse_boss_group_id;
        break;
      }

      // required int32 boss_group_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boss_group_id_)));
          set_has_boss_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void CaptureStageToScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.CaptureStage client_req = 1;
  if (has_client_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->client_req(), output);
  }

  // repeated .Packet.ActorFullInfo actors = 2;
  for (int i = 0; i < this->actors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->actors(i), output);
  }

  // required int32 boss_group_id = 3;
  if (has_boss_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->boss_group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CaptureStageToScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.CaptureStage client_req = 1;
  if (has_client_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->client_req(), target);
  }

  // repeated .Packet.ActorFullInfo actors = 2;
  for (int i = 0; i < this->actors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->actors(i), target);
  }

  // required int32 boss_group_id = 3;
  if (has_boss_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->boss_group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CaptureStageToScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.CaptureStage client_req = 1;
    if (has_client_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->client_req());
    }

    // required int32 boss_group_id = 3;
    if (has_boss_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boss_group_id());
    }

  }
  // repeated .Packet.ActorFullInfo actors = 2;
  total_size += 1 * this->actors_size();
  for (int i = 0; i < this->actors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actors(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CaptureStageToScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CaptureStageToScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CaptureStageToScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void CaptureStageToScene::MergeFrom(const CaptureStageToScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  actors_.MergeFrom(from.actors_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_req()) {
      mutable_client_req()->::Packet::CaptureStage::MergeFrom(from.client_req());
    }
    if (from.has_boss_group_id()) {
      set_boss_group_id(from.boss_group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void CaptureStageToScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void CaptureStageToScene::CopyFrom(const CaptureStageToScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool CaptureStageToScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_client_req()) {
    if (!this->client_req().IsInitialized()) return false;
  }
  for (int i = 0; i < actors_size(); i++) {
    if (!this->actors(i).IsInitialized()) return false;
  }
  return true;
}

void CaptureStageToScene::SetInitialized() {
  _has_bits_[0] |= 0x00000005;

  if (has_client_req()) {
    this->mutable_client_req()->SetInitialized();
  }
  for (int i = 0; i < actors_size(); i++) {
    this->mutable_actors(i)->SetInitialized();
  }
  return;
}

void CaptureStageToScene::Swap(CaptureStageToScene* other) {
  if (other != this) {
    std::swap(client_req_, other->client_req_);
    actors_.Swap(&other->actors_);
    std::swap(boss_group_id_, other->boss_group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata CaptureStageToScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CaptureStageToScene_descriptor_;
  metadata.reflection = CaptureStageToScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateStageTax::kStageIdFieldNumber;
const int UpdateStageTax::kNewTaxFieldNumber;
#endif  // !_MSC_VER

UpdateStageTax::UpdateStageTax()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateStageTax::InitAsDefaultInstance() {
}

UpdateStageTax::UpdateStageTax(const UpdateStageTax& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateStageTax::SharedCtor() {
  _cached_size_ = 0;
  stage_id_ = 0;
  new_tax_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateStageTax::~UpdateStageTax() {
  SharedDtor();
}

void UpdateStageTax::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateStageTax::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateStageTax::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateStageTax_descriptor_;
}

const UpdateStageTax& UpdateStageTax::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneStage_2eproto();
  return *default_instance_;
}

UpdateStageTax* UpdateStageTax::default_instance_ = NULL;

UpdateStageTax* UpdateStageTax::New() const {
  return new UpdateStageTax;
}

void UpdateStageTax::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stage_id_ = 0;
    new_tax_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool UpdateStageTax::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 stage_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_id_)));
          set_has_stage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_new_tax;
        break;
      }

      // required int32 new_tax = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_tax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_tax_)));
          set_has_new_tax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void UpdateStageTax::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 stage_id = 1;
  if (has_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stage_id(), output);
  }

  // required int32 new_tax = 2;
  if (has_new_tax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->new_tax(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateStageTax::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 stage_id = 1;
  if (has_stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stage_id(), target);
  }

  // required int32 new_tax = 2;
  if (has_new_tax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->new_tax(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateStageTax::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 stage_id = 1;
    if (has_stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage_id());
    }

    // required int32 new_tax = 2;
    if (has_new_tax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_tax());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateStageTax::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateStageTax* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateStageTax*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void UpdateStageTax::MergeFrom(const UpdateStageTax& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage_id()) {
      set_stage_id(from.stage_id());
    }
    if (from.has_new_tax()) {
      set_new_tax(from.new_tax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void UpdateStageTax::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void UpdateStageTax::CopyFrom(const UpdateStageTax& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool UpdateStageTax::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UpdateStageTax::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void UpdateStageTax::Swap(UpdateStageTax* other) {
  if (other != this) {
    std::swap(stage_id_, other->stage_id_);
    std::swap(new_tax_, other->new_tax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata UpdateStageTax::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateStageTax_descriptor_;
  metadata.reflection = UpdateStageTax_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CollectAllTax::kStageIdFieldNumber;
const int CollectAllTax::kTaxFieldNumber;
#endif  // !_MSC_VER

CollectAllTax::CollectAllTax()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CollectAllTax::InitAsDefaultInstance() {
}

CollectAllTax::CollectAllTax(const CollectAllTax& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CollectAllTax::SharedCtor() {
  _cached_size_ = 0;
  stage_id_ = 0;
  tax_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CollectAllTax::~CollectAllTax() {
  SharedDtor();
}

void CollectAllTax::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CollectAllTax::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CollectAllTax::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CollectAllTax_descriptor_;
}

const CollectAllTax& CollectAllTax::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneStage_2eproto();
  return *default_instance_;
}

CollectAllTax* CollectAllTax::default_instance_ = NULL;

CollectAllTax* CollectAllTax::New() const {
  return new CollectAllTax;
}

void CollectAllTax::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stage_id_ = 0;
    tax_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool CollectAllTax::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 stage_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_id_)));
          set_has_stage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tax;
        break;
      }

      // optional int32 tax = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tax_)));
          set_has_tax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void CollectAllTax::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 stage_id = 1;
  if (has_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stage_id(), output);
  }

  // optional int32 tax = 2;
  if (has_tax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tax(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CollectAllTax::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 stage_id = 1;
  if (has_stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stage_id(), target);
  }

  // optional int32 tax = 2;
  if (has_tax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tax(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CollectAllTax::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 stage_id = 1;
    if (has_stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage_id());
    }

    // optional int32 tax = 2;
    if (has_tax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tax());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CollectAllTax::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CollectAllTax* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CollectAllTax*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void CollectAllTax::MergeFrom(const CollectAllTax& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage_id()) {
      set_stage_id(from.stage_id());
    }
    if (from.has_tax()) {
      set_tax(from.tax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void CollectAllTax::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void CollectAllTax::CopyFrom(const CollectAllTax& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool CollectAllTax::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CollectAllTax::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void CollectAllTax::Swap(CollectAllTax* other) {
  if (other != this) {
    std::swap(stage_id_, other->stage_id_);
    std::swap(tax_, other->tax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata CollectAllTax::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CollectAllTax_descriptor_;
  metadata.reflection = CollectAllTax_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuardStageSuccess::kStageIdFieldNumber;
const int GuardStageSuccess::kNameFieldNumber;
#endif  // !_MSC_VER

GuardStageSuccess::GuardStageSuccess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuardStageSuccess::InitAsDefaultInstance() {
}

GuardStageSuccess::GuardStageSuccess(const GuardStageSuccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuardStageSuccess::SharedCtor() {
  _cached_size_ = 0;
  stage_id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuardStageSuccess::~GuardStageSuccess() {
  SharedDtor();
}

void GuardStageSuccess::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GuardStageSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuardStageSuccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuardStageSuccess_descriptor_;
}

const GuardStageSuccess& GuardStageSuccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneStage_2eproto();
  return *default_instance_;
}

GuardStageSuccess* GuardStageSuccess::default_instance_ = NULL;

GuardStageSuccess* GuardStageSuccess::New() const {
  return new GuardStageSuccess;
}

void GuardStageSuccess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stage_id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuardStageSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 stage_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_id_)));
          set_has_stage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuardStageSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 stage_id = 1;
  if (has_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stage_id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuardStageSuccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 stage_id = 1;
  if (has_stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stage_id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuardStageSuccess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 stage_id = 1;
    if (has_stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage_id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuardStageSuccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuardStageSuccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuardStageSuccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuardStageSuccess::MergeFrom(const GuardStageSuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage_id()) {
      set_stage_id(from.stage_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuardStageSuccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuardStageSuccess::CopyFrom(const GuardStageSuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuardStageSuccess::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GuardStageSuccess::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void GuardStageSuccess::Swap(GuardStageSuccess* other) {
  if (other != this) {
    std::swap(stage_id_, other->stage_id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuardStageSuccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuardStageSuccess_descriptor_;
  metadata.reflection = GuardStageSuccess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleFormation::kPlayerNameFieldNumber;
const int BattleFormation::kActorsFieldNumber;
const int BattleFormation::kPlayerGuidFieldNumber;
#endif  // !_MSC_VER

BattleFormation::BattleFormation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleFormation::InitAsDefaultInstance() {
}

BattleFormation::BattleFormation(const BattleFormation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleFormation::SharedCtor() {
  _cached_size_ = 0;
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleFormation::~BattleFormation() {
  SharedDtor();
}

void BattleFormation::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (this != default_instance_) {
  }
}

void BattleFormation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleFormation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleFormation_descriptor_;
}

const BattleFormation& BattleFormation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneStage_2eproto();
  return *default_instance_;
}

BattleFormation* BattleFormation::default_instance_ = NULL;

BattleFormation* BattleFormation::New() const {
  return new BattleFormation;
}

void BattleFormation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    player_guid_ = GOOGLE_ULONGLONG(0);
  }
  actors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool BattleFormation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string player_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_actors;
        break;
      }

      // repeated .Packet.ActorFullInfo actors = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_actors;
        if (input->ExpectTag(25)) goto parse_player_guid;
        break;
      }

      // optional fixed64 player_guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_player_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &player_guid_)));
          set_has_player_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void BattleFormation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string player_name = 1;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->player_name(), output);
  }

  // repeated .Packet.ActorFullInfo actors = 2;
  for (int i = 0; i < this->actors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->actors(i), output);
  }

  // optional fixed64 player_guid = 3;
  if (has_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->player_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleFormation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string player_name = 1;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->player_name(), target);
  }

  // repeated .Packet.ActorFullInfo actors = 2;
  for (int i = 0; i < this->actors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->actors(i), target);
  }

  // optional fixed64 player_guid = 3;
  if (has_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->player_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleFormation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string player_name = 1;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional fixed64 player_guid = 3;
    if (has_player_guid()) {
      total_size += 1 + 8;
    }

  }
  // repeated .Packet.ActorFullInfo actors = 2;
  total_size += 1 * this->actors_size();
  for (int i = 0; i < this->actors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actors(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleFormation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleFormation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleFormation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void BattleFormation::MergeFrom(const BattleFormation& from) {
  GOOGLE_CHECK_NE(&from, this);
  actors_.MergeFrom(from.actors_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_player_guid()) {
      set_player_guid(from.player_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void BattleFormation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void BattleFormation::CopyFrom(const BattleFormation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool BattleFormation::IsInitialized() const {

  for (int i = 0; i < actors_size(); i++) {
    if (!this->actors(i).IsInitialized()) return false;
  }
  return true;
}

void BattleFormation::SetInitialized() {

  for (int i = 0; i < actors_size(); i++) {
    this->mutable_actors(i)->SetInitialized();
  }
  return;
}

void BattleFormation::Swap(BattleFormation* other) {
  if (other != this) {
    std::swap(player_name_, other->player_name_);
    actors_.Swap(&other->actors_);
    std::swap(player_guid_, other->player_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata BattleFormation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleFormation_descriptor_;
  metadata.reflection = BattleFormation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Challengers::kNamesFieldNumber;
#endif  // !_MSC_VER

Challengers::Challengers()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Challengers::InitAsDefaultInstance() {
}

Challengers::Challengers(const Challengers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Challengers::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Challengers::~Challengers() {
  SharedDtor();
}

void Challengers::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Challengers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Challengers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Challengers_descriptor_;
}

const Challengers& Challengers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneStage_2eproto();
  return *default_instance_;
}

Challengers* Challengers::default_instance_ = NULL;

Challengers* Challengers::New() const {
  return new Challengers;
}

void Challengers::Clear() {
  names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool Challengers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string names = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->names(this->names_size() - 1).data(),
            this->names(this->names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_names;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void Challengers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string names = 1;
  for (int i = 0; i < this->names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->names(i).data(), this->names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->names(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Challengers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string names = 1;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->names(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Challengers::ByteSize() const {
  int total_size = 0;

  // repeated string names = 1;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Challengers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Challengers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Challengers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void Challengers::MergeFrom(const Challengers& from) {
  GOOGLE_CHECK_NE(&from, this);
  names_.MergeFrom(from.names_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void Challengers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void Challengers::CopyFrom(const Challengers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool Challengers::IsInitialized() const {

  return true;
}

void Challengers::SetInitialized() {

  return;
}

void Challengers::Swap(Challengers* other) {
  if (other != this) {
    names_.Swap(&other->names_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata Challengers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Challengers_descriptor_;
  metadata.reflection = Challengers_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SceneStageCaptain::kPlayerInfoFieldNumber;
const int SceneStageCaptain::kActorsFieldNumber;
#endif  // !_MSC_VER

SceneStageCaptain::SceneStageCaptain()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SceneStageCaptain::InitAsDefaultInstance() {
  player_info_ = const_cast< ::Packet::PlayerBasicInfo*>(&::Packet::PlayerBasicInfo::default_instance());
}

SceneStageCaptain::SceneStageCaptain(const SceneStageCaptain& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SceneStageCaptain::SharedCtor() {
  _cached_size_ = 0;
  player_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneStageCaptain::~SceneStageCaptain() {
  SharedDtor();
}

void SceneStageCaptain::SharedDtor() {
  if (this != default_instance_) {
    delete player_info_;
  }
}

void SceneStageCaptain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneStageCaptain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneStageCaptain_descriptor_;
}

const SceneStageCaptain& SceneStageCaptain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneStage_2eproto();
  return *default_instance_;
}

SceneStageCaptain* SceneStageCaptain::default_instance_ = NULL;

SceneStageCaptain* SceneStageCaptain::New() const {
  return new SceneStageCaptain;
}

void SceneStageCaptain::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_info()) {
      if (player_info_ != NULL) player_info_->::Packet::PlayerBasicInfo::Clear();
    }
  }
  actors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SceneStageCaptain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Packet.PlayerBasicInfo player_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_actors;
        break;
      }

      // repeated .Packet.ActorFullInfo actors = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_actors;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SceneStageCaptain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Packet.PlayerBasicInfo player_info = 1;
  if (has_player_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_info(), output);
  }

  // repeated .Packet.ActorFullInfo actors = 2;
  for (int i = 0; i < this->actors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->actors(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SceneStageCaptain::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Packet.PlayerBasicInfo player_info = 1;
  if (has_player_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_info(), target);
  }

  // repeated .Packet.ActorFullInfo actors = 2;
  for (int i = 0; i < this->actors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->actors(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SceneStageCaptain::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Packet.PlayerBasicInfo player_info = 1;
    if (has_player_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_info());
    }

  }
  // repeated .Packet.ActorFullInfo actors = 2;
  total_size += 1 * this->actors_size();
  for (int i = 0; i < this->actors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actors(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneStageCaptain::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SceneStageCaptain* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SceneStageCaptain*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SceneStageCaptain::MergeFrom(const SceneStageCaptain& from) {
  GOOGLE_CHECK_NE(&from, this);
  actors_.MergeFrom(from.actors_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_info()) {
      mutable_player_info()->::Packet::PlayerBasicInfo::MergeFrom(from.player_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SceneStageCaptain::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SceneStageCaptain::CopyFrom(const SceneStageCaptain& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SceneStageCaptain::IsInitialized() const {

  if (has_player_info()) {
    if (!this->player_info().IsInitialized()) return false;
  }
  for (int i = 0; i < actors_size(); i++) {
    if (!this->actors(i).IsInitialized()) return false;
  }
  return true;
}

void SceneStageCaptain::SetInitialized() {

  if (has_player_info()) {
    this->mutable_player_info()->SetInitialized();
  }
  for (int i = 0; i < actors_size(); i++) {
    this->mutable_actors(i)->SetInitialized();
  }
  return;
}

void SceneStageCaptain::Swap(SceneStageCaptain* other) {
  if (other != this) {
    std::swap(player_info_, other->player_info_);
    actors_.Swap(&other->actors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SceneStageCaptain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneStageCaptain_descriptor_;
  metadata.reflection = SceneStageCaptain_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerStages::kPlayerGuidFieldNumber;
const int PlayerStages::kCurrentStageFieldNumber;
const int PlayerStages::kStagesFieldNumber;
const int PlayerStages::kConfigsFieldNumber;
#endif  // !_MSC_VER

PlayerStages::PlayerStages()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerStages::InitAsDefaultInstance() {
}

PlayerStages::PlayerStages(const PlayerStages& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerStages::SharedCtor() {
  _cached_size_ = 0;
  player_guid_ = GOOGLE_ULONGLONG(0);
  current_stage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerStages::~PlayerStages() {
  SharedDtor();
}

void PlayerStages::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerStages::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerStages::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerStages_descriptor_;
}

const PlayerStages& PlayerStages::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneStage_2eproto();
  return *default_instance_;
}

PlayerStages* PlayerStages::default_instance_ = NULL;

PlayerStages* PlayerStages::New() const {
  return new PlayerStages;
}

void PlayerStages::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_guid_ = GOOGLE_ULONGLONG(0);
    current_stage_ = 0;
  }
  stages_.Clear();
  configs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerStages::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 player_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &player_guid_)));
          set_has_player_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_current_stage;
        break;
      }

      // required int32 current_stage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_stage_)));
          set_has_current_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stages;
        break;
      }

      // repeated .Packet.PlayerStage stages = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stages;
        if (input->ExpectTag(34)) goto parse_configs;
        break;
      }

      // repeated .Packet.RTHC configs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_configs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_configs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_configs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerStages::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 player_guid = 1;
  if (has_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->player_guid(), output);
  }

  // required int32 current_stage = 2;
  if (has_current_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->current_stage(), output);
  }

  // repeated .Packet.PlayerStage stages = 3;
  for (int i = 0; i < this->stages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stages(i), output);
  }

  // repeated .Packet.RTHC configs = 4;
  for (int i = 0; i < this->configs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->configs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerStages::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 player_guid = 1;
  if (has_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->player_guid(), target);
  }

  // required int32 current_stage = 2;
  if (has_current_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->current_stage(), target);
  }

  // repeated .Packet.PlayerStage stages = 3;
  for (int i = 0; i < this->stages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stages(i), target);
  }

  // repeated .Packet.RTHC configs = 4;
  for (int i = 0; i < this->configs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->configs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerStages::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 player_guid = 1;
    if (has_player_guid()) {
      total_size += 1 + 8;
    }

    // required int32 current_stage = 2;
    if (has_current_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_stage());
    }

  }
  // repeated .Packet.PlayerStage stages = 3;
  total_size += 1 * this->stages_size();
  for (int i = 0; i < this->stages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stages(i));
  }

  // repeated .Packet.RTHC configs = 4;
  total_size += 1 * this->configs_size();
  for (int i = 0; i < this->configs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->configs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerStages::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerStages* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerStages*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerStages::MergeFrom(const PlayerStages& from) {
  GOOGLE_CHECK_NE(&from, this);
  stages_.MergeFrom(from.stages_);
  configs_.MergeFrom(from.configs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_guid()) {
      set_player_guid(from.player_guid());
    }
    if (from.has_current_stage()) {
      set_current_stage(from.current_stage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerStages::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerStages::CopyFrom(const PlayerStages& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerStages::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < stages_size(); i++) {
    if (!this->stages(i).IsInitialized()) return false;
  }
  for (int i = 0; i < configs_size(); i++) {
    if (!this->configs(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerStages::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  for (int i = 0; i < stages_size(); i++) {
    this->mutable_stages(i)->SetInitialized();
  }
  for (int i = 0; i < configs_size(); i++) {
    this->mutable_configs(i)->SetInitialized();
  }
  return;
}

void PlayerStages::Swap(PlayerStages* other) {
  if (other != this) {
    std::swap(player_guid_, other->player_guid_);
    std::swap(current_stage_, other->current_stage_);
    stages_.Swap(&other->stages_);
    configs_.Swap(&other->configs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerStages::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerStages_descriptor_;
  metadata.reflection = PlayerStages_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerStageDB::kPlayerGuidFieldNumber;
const int PlayerStageDB::kCurrentStageFieldNumber;
const int PlayerStageDB::kConfigsFieldNumber;
#endif  // !_MSC_VER

PlayerStageDB::PlayerStageDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerStageDB::InitAsDefaultInstance() {
}

PlayerStageDB::PlayerStageDB(const PlayerStageDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerStageDB::SharedCtor() {
  _cached_size_ = 0;
  player_guid_ = GOOGLE_ULONGLONG(0);
  current_stage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerStageDB::~PlayerStageDB() {
  SharedDtor();
}

void PlayerStageDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerStageDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerStageDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerStageDB_descriptor_;
}

const PlayerStageDB& PlayerStageDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneStage_2eproto();
  return *default_instance_;
}

PlayerStageDB* PlayerStageDB::default_instance_ = NULL;

PlayerStageDB* PlayerStageDB::New() const {
  return new PlayerStageDB;
}

void PlayerStageDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_guid_ = GOOGLE_ULONGLONG(0);
    current_stage_ = 0;
  }
  configs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerStageDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 player_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &player_guid_)));
          set_has_player_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_current_stage;
        break;
      }

      // required int32 current_stage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_stage_)));
          set_has_current_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_configs;
        break;
      }

      // repeated .Packet.RTHC configs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_configs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_configs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_configs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerStageDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 player_guid = 1;
  if (has_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->player_guid(), output);
  }

  // required int32 current_stage = 2;
  if (has_current_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->current_stage(), output);
  }

  // repeated .Packet.RTHC configs = 3;
  for (int i = 0; i < this->configs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->configs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerStageDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 player_guid = 1;
  if (has_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->player_guid(), target);
  }

  // required int32 current_stage = 2;
  if (has_current_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->current_stage(), target);
  }

  // repeated .Packet.RTHC configs = 3;
  for (int i = 0; i < this->configs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->configs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerStageDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 player_guid = 1;
    if (has_player_guid()) {
      total_size += 1 + 8;
    }

    // required int32 current_stage = 2;
    if (has_current_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_stage());
    }

  }
  // repeated .Packet.RTHC configs = 3;
  total_size += 1 * this->configs_size();
  for (int i = 0; i < this->configs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->configs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerStageDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerStageDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerStageDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerStageDB::MergeFrom(const PlayerStageDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  configs_.MergeFrom(from.configs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_guid()) {
      set_player_guid(from.player_guid());
    }
    if (from.has_current_stage()) {
      set_current_stage(from.current_stage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerStageDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerStageDB::CopyFrom(const PlayerStageDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerStageDB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < configs_size(); i++) {
    if (!this->configs(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerStageDB::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  for (int i = 0; i < configs_size(); i++) {
    this->mutable_configs(i)->SetInitialized();
  }
  return;
}

void PlayerStageDB::Swap(PlayerStageDB* other) {
  if (other != this) {
    std::swap(player_guid_, other->player_guid_);
    std::swap(current_stage_, other->current_stage_);
    configs_.Swap(&other->configs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerStageDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerStageDB_descriptor_;
  metadata.reflection = PlayerStageDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerStage::kPlayerGuidFieldNumber;
const int PlayerStage::kIdFieldNumber;
const int PlayerStage::kRaidFieldNumber;
const int PlayerStage::kBossFieldNumber;
const int PlayerStage::kNumFieldNumber;
const int PlayerStage::kDenFieldNumber;
#endif  // !_MSC_VER

PlayerStage::PlayerStage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerStage::InitAsDefaultInstance() {
}

PlayerStage::PlayerStage(const PlayerStage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerStage::SharedCtor() {
  _cached_size_ = 0;
  player_guid_ = GOOGLE_ULONGLONG(0);
  id_ = 0;
  raid_ = false;
  boss_ = 0;
  num_ = 0;
  den_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerStage::~PlayerStage() {
  SharedDtor();
}

void PlayerStage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerStage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerStage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerStage_descriptor_;
}

const PlayerStage& PlayerStage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneStage_2eproto();
  return *default_instance_;
}

PlayerStage* PlayerStage::default_instance_ = NULL;

PlayerStage* PlayerStage::New() const {
  return new PlayerStage;
}

void PlayerStage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_guid_ = GOOGLE_ULONGLONG(0);
    id_ = 0;
    raid_ = false;
    boss_ = 0;
    num_ = 0;
    den_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerStage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 player_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &player_guid_)));
          set_has_player_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_raid;
        break;
      }

      // required bool raid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &raid_)));
          set_has_raid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_boss;
        break;
      }

      // required int32 boss = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boss_)));
          set_has_boss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_num;
        break;
      }

      // required int32 num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_den;
        break;
      }

      // required int32 den = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_den:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &den_)));
          set_has_den();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerStage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 player_guid = 1;
  if (has_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->player_guid(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // required bool raid = 3;
  if (has_raid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->raid(), output);
  }

  // required int32 boss = 4;
  if (has_boss()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->boss(), output);
  }

  // required int32 num = 5;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->num(), output);
  }

  // required int32 den = 6;
  if (has_den()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->den(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerStage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 player_guid = 1;
  if (has_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->player_guid(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // required bool raid = 3;
  if (has_raid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->raid(), target);
  }

  // required int32 boss = 4;
  if (has_boss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->boss(), target);
  }

  // required int32 num = 5;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->num(), target);
  }

  // required int32 den = 6;
  if (has_den()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->den(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerStage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 player_guid = 1;
    if (has_player_guid()) {
      total_size += 1 + 8;
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required bool raid = 3;
    if (has_raid()) {
      total_size += 1 + 1;
    }

    // required int32 boss = 4;
    if (has_boss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boss());
    }

    // required int32 num = 5;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // required int32 den = 6;
    if (has_den()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->den());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerStage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerStage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerStage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerStage::MergeFrom(const PlayerStage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_guid()) {
      set_player_guid(from.player_guid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_raid()) {
      set_raid(from.raid());
    }
    if (from.has_boss()) {
      set_boss(from.boss());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_den()) {
      set_den(from.den());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerStage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerStage::CopyFrom(const PlayerStage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerStage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void PlayerStage::SetInitialized() {
  _has_bits_[0] |= 0x0000003f;

  return;
}

void PlayerStage::Swap(PlayerStage* other) {
  if (other != this) {
    std::swap(player_guid_, other->player_guid_);
    std::swap(id_, other->id_);
    std::swap(raid_, other->raid_);
    std::swap(boss_, other->boss_);
    std::swap(num_, other->num_);
    std::swap(den_, other->den_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerStage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerStage_descriptor_;
  metadata.reflection = PlayerStage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RTHC::kStageIdFieldNumber;
const int RTHC::kTotalTimeFieldNumber;
const int RTHC::kHookTimeFieldNumber;
const int RTHC::kRelateScoreFieldNumber;
const int RTHC::kCalcDoneFieldNumber;
const int RTHC::kWaveExpFieldNumber;
const int RTHC::kWaveGoldFieldNumber;
const int RTHC::kWaveMillSecFieldNumber;
const int RTHC::kDeadMillSecFieldNumber;
const int RTHC::kWaveKillFieldNumber;
#endif  // !_MSC_VER

RTHC::RTHC()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RTHC::InitAsDefaultInstance() {
}

RTHC::RTHC(const RTHC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RTHC::SharedCtor() {
  _cached_size_ = 0;
  stage_id_ = 0;
  total_time_ = GOOGLE_ULONGLONG(0);
  hook_time_ = GOOGLE_ULONGLONG(0);
  relate_score_ = 0;
  calc_done_ = false;
  wave_exp_ = 0;
  wave_gold_ = 0;
  wave_mill_sec_ = GOOGLE_ULONGLONG(0);
  dead_mill_sec_ = GOOGLE_ULONGLONG(0);
  wave_kill_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RTHC::~RTHC() {
  SharedDtor();
}

void RTHC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RTHC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RTHC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RTHC_descriptor_;
}

const RTHC& RTHC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneStage_2eproto();
  return *default_instance_;
}

RTHC* RTHC::default_instance_ = NULL;

RTHC* RTHC::New() const {
  return new RTHC;
}

void RTHC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stage_id_ = 0;
    total_time_ = GOOGLE_ULONGLONG(0);
    hook_time_ = GOOGLE_ULONGLONG(0);
    relate_score_ = 0;
    calc_done_ = false;
    wave_exp_ = 0;
    wave_gold_ = 0;
    wave_mill_sec_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    dead_mill_sec_ = GOOGLE_ULONGLONG(0);
    wave_kill_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool RTHC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 stage_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_id_)));
          set_has_stage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_total_time;
        break;
      }

      // required fixed64 total_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_total_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &total_time_)));
          set_has_total_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_relate_score;
        break;
      }

      // required int32 relate_score = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relate_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &relate_score_)));
          set_has_relate_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_calc_done;
        break;
      }

      // required bool calc_done = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_calc_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &calc_done_)));
          set_has_calc_done();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_hook_time;
        break;
      }

      // required fixed64 hook_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_hook_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &hook_time_)));
          set_has_hook_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_wave_exp;
        break;
      }

      // required int32 wave_exp = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wave_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wave_exp_)));
          set_has_wave_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_wave_gold;
        break;
      }

      // required int32 wave_gold = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wave_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wave_gold_)));
          set_has_wave_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_wave_mill_sec;
        break;
      }

      // required fixed64 wave_mill_sec = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_wave_mill_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &wave_mill_sec_)));
          set_has_wave_mill_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_dead_mill_sec;
        break;
      }

      // required fixed64 dead_mill_sec = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dead_mill_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &dead_mill_sec_)));
          set_has_dead_mill_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_wave_kill;
        break;
      }

      // required int32 wave_kill = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wave_kill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wave_kill_)));
          set_has_wave_kill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void RTHC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 stage_id = 1;
  if (has_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stage_id(), output);
  }

  // required fixed64 total_time = 2;
  if (has_total_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->total_time(), output);
  }

  // required int32 relate_score = 9;
  if (has_relate_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->relate_score(), output);
  }

  // required bool calc_done = 10;
  if (has_calc_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->calc_done(), output);
  }

  // required fixed64 hook_time = 11;
  if (has_hook_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(11, this->hook_time(), output);
  }

  // required int32 wave_exp = 12;
  if (has_wave_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->wave_exp(), output);
  }

  // required int32 wave_gold = 13;
  if (has_wave_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->wave_gold(), output);
  }

  // required fixed64 wave_mill_sec = 14;
  if (has_wave_mill_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(14, this->wave_mill_sec(), output);
  }

  // required fixed64 dead_mill_sec = 15;
  if (has_dead_mill_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(15, this->dead_mill_sec(), output);
  }

  // required int32 wave_kill = 16;
  if (has_wave_kill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->wave_kill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RTHC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 stage_id = 1;
  if (has_stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stage_id(), target);
  }

  // required fixed64 total_time = 2;
  if (has_total_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->total_time(), target);
  }

  // required int32 relate_score = 9;
  if (has_relate_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->relate_score(), target);
  }

  // required bool calc_done = 10;
  if (has_calc_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->calc_done(), target);
  }

  // required fixed64 hook_time = 11;
  if (has_hook_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(11, this->hook_time(), target);
  }

  // required int32 wave_exp = 12;
  if (has_wave_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->wave_exp(), target);
  }

  // required int32 wave_gold = 13;
  if (has_wave_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->wave_gold(), target);
  }

  // required fixed64 wave_mill_sec = 14;
  if (has_wave_mill_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(14, this->wave_mill_sec(), target);
  }

  // required fixed64 dead_mill_sec = 15;
  if (has_dead_mill_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(15, this->dead_mill_sec(), target);
  }

  // required int32 wave_kill = 16;
  if (has_wave_kill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->wave_kill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RTHC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 stage_id = 1;
    if (has_stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage_id());
    }

    // required fixed64 total_time = 2;
    if (has_total_time()) {
      total_size += 1 + 8;
    }

    // required fixed64 hook_time = 11;
    if (has_hook_time()) {
      total_size += 1 + 8;
    }

    // required int32 relate_score = 9;
    if (has_relate_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->relate_score());
    }

    // required bool calc_done = 10;
    if (has_calc_done()) {
      total_size += 1 + 1;
    }

    // required int32 wave_exp = 12;
    if (has_wave_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wave_exp());
    }

    // required int32 wave_gold = 13;
    if (has_wave_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wave_gold());
    }

    // required fixed64 wave_mill_sec = 14;
    if (has_wave_mill_sec()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required fixed64 dead_mill_sec = 15;
    if (has_dead_mill_sec()) {
      total_size += 1 + 8;
    }

    // required int32 wave_kill = 16;
    if (has_wave_kill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wave_kill());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RTHC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RTHC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RTHC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void RTHC::MergeFrom(const RTHC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage_id()) {
      set_stage_id(from.stage_id());
    }
    if (from.has_total_time()) {
      set_total_time(from.total_time());
    }
    if (from.has_hook_time()) {
      set_hook_time(from.hook_time());
    }
    if (from.has_relate_score()) {
      set_relate_score(from.relate_score());
    }
    if (from.has_calc_done()) {
      set_calc_done(from.calc_done());
    }
    if (from.has_wave_exp()) {
      set_wave_exp(from.wave_exp());
    }
    if (from.has_wave_gold()) {
      set_wave_gold(from.wave_gold());
    }
    if (from.has_wave_mill_sec()) {
      set_wave_mill_sec(from.wave_mill_sec());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dead_mill_sec()) {
      set_dead_mill_sec(from.dead_mill_sec());
    }
    if (from.has_wave_kill()) {
      set_wave_kill(from.wave_kill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void RTHC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void RTHC::CopyFrom(const RTHC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool RTHC::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void RTHC::SetInitialized() {
  _has_bits_[0] |= 0x000003ff;

  return;
}

void RTHC::Swap(RTHC* other) {
  if (other != this) {
    std::swap(stage_id_, other->stage_id_);
    std::swap(total_time_, other->total_time_);
    std::swap(hook_time_, other->hook_time_);
    std::swap(relate_score_, other->relate_score_);
    std::swap(calc_done_, other->calc_done_);
    std::swap(wave_exp_, other->wave_exp_);
    std::swap(wave_gold_, other->wave_gold_);
    std::swap(wave_mill_sec_, other->wave_mill_sec_);
    std::swap(dead_mill_sec_, other->dead_mill_sec_);
    std::swap(wave_kill_, other->wave_kill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata RTHC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RTHC_descriptor_;
  metadata.reflection = RTHC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ResetRealTimeHookEfficient::ResetRealTimeHookEfficient()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResetRealTimeHookEfficient::InitAsDefaultInstance() {
}

ResetRealTimeHookEfficient::ResetRealTimeHookEfficient(const ResetRealTimeHookEfficient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResetRealTimeHookEfficient::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResetRealTimeHookEfficient::~ResetRealTimeHookEfficient() {
  SharedDtor();
}

void ResetRealTimeHookEfficient::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResetRealTimeHookEfficient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetRealTimeHookEfficient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResetRealTimeHookEfficient_descriptor_;
}

const ResetRealTimeHookEfficient& ResetRealTimeHookEfficient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneStage_2eproto();
  return *default_instance_;
}

ResetRealTimeHookEfficient* ResetRealTimeHookEfficient::default_instance_ = NULL;

ResetRealTimeHookEfficient* ResetRealTimeHookEfficient::New() const {
  return new ResetRealTimeHookEfficient;
}

void ResetRealTimeHookEfficient::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ResetRealTimeHookEfficient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void ResetRealTimeHookEfficient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResetRealTimeHookEfficient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResetRealTimeHookEfficient::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetRealTimeHookEfficient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResetRealTimeHookEfficient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResetRealTimeHookEfficient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ResetRealTimeHookEfficient::MergeFrom(const ResetRealTimeHookEfficient& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ResetRealTimeHookEfficient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ResetRealTimeHookEfficient::CopyFrom(const ResetRealTimeHookEfficient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ResetRealTimeHookEfficient::IsInitialized() const {

  return true;
}

void ResetRealTimeHookEfficient::SetInitialized() {

  return;
}

void ResetRealTimeHookEfficient::Swap(ResetRealTimeHookEfficient* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ResetRealTimeHookEfficient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResetRealTimeHookEfficient_descriptor_;
  metadata.reflection = ResetRealTimeHookEfficient_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RealTimeHookEfficient::kConfigFieldNumber;
const int RealTimeHookEfficient::kItemIdsFieldNumber;
const int RealTimeHookEfficient::kItemCountsFieldNumber;
const int RealTimeHookEfficient::kUpLevelFieldNumber;
const int RealTimeHookEfficient::kOffTimeFieldNumber;
const int RealTimeHookEfficient::kLevelUpNeedSecondsFieldNumber;
const int RealTimeHookEfficient::kTotalExpFieldNumber;
const int RealTimeHookEfficient::kTotalExpExtraFieldNumber;
const int RealTimeHookEfficient::kTotalGoldFieldNumber;
const int RealTimeHookEfficient::kBattleTimesFieldNumber;
const int RealTimeHookEfficient::kBattleTimeCostsFieldNumber;
const int RealTimeHookEfficient::kMonsterKillsFieldNumber;
const int RealTimeHookEfficient::kDeadTimesFieldNumber;
const int RealTimeHookEfficient::kBossStageIdsFieldNumber;
const int RealTimeHookEfficient::kBossCountFieldNumber;
const int RealTimeHookEfficient::kGreenEquipCountFieldNumber;
const int RealTimeHookEfficient::kGreenEquipDismantleFieldNumber;
const int RealTimeHookEfficient::kBlueEquipCountFieldNumber;
const int RealTimeHookEfficient::kBlueEquipCountDismantleFieldNumber;
const int RealTimeHookEfficient::kPurpleEquipCountFieldNumber;
#endif  // !_MSC_VER

RealTimeHookEfficient::RealTimeHookEfficient()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RealTimeHookEfficient::InitAsDefaultInstance() {
  config_ = const_cast< ::Packet::RTHC*>(&::Packet::RTHC::default_instance());
}

RealTimeHookEfficient::RealTimeHookEfficient(const RealTimeHookEfficient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RealTimeHookEfficient::SharedCtor() {
  _cached_size_ = 0;
  config_ = NULL;
  up_level_ = 0;
  off_time_ = GOOGLE_ULONGLONG(0);
  level_up_need_seconds_ = 0;
  total_exp_ = 0;
  total_exp_extra_ = 0;
  total_gold_ = 0;
  battle_times_ = 0;
  battle_time_costs_ = 0;
  monster_kills_ = 0;
  dead_times_ = 0;
  green_equip_count_ = 0;
  green_equip_dismantle_ = 0;
  blue_equip_count_ = 0;
  blue_equip_count_dismantle_ = 0;
  purple_equip_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RealTimeHookEfficient::~RealTimeHookEfficient() {
  SharedDtor();
}

void RealTimeHookEfficient::SharedDtor() {
  if (this != default_instance_) {
    delete config_;
  }
}

void RealTimeHookEfficient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RealTimeHookEfficient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RealTimeHookEfficient_descriptor_;
}

const RealTimeHookEfficient& RealTimeHookEfficient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneStage_2eproto();
  return *default_instance_;
}

RealTimeHookEfficient* RealTimeHookEfficient::default_instance_ = NULL;

RealTimeHookEfficient* RealTimeHookEfficient::New() const {
  return new RealTimeHookEfficient;
}

void RealTimeHookEfficient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_config()) {
      if (config_ != NULL) config_->::Packet::RTHC::Clear();
    }
    up_level_ = 0;
    off_time_ = GOOGLE_ULONGLONG(0);
    level_up_need_seconds_ = 0;
    total_exp_ = 0;
    total_exp_extra_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    total_gold_ = 0;
    battle_times_ = 0;
    battle_time_costs_ = 0;
    monster_kills_ = 0;
    dead_times_ = 0;
    green_equip_count_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    green_equip_dismantle_ = 0;
    blue_equip_count_ = 0;
    blue_equip_count_dismantle_ = 0;
    purple_equip_count_ = 0;
  }
  item_ids_.Clear();
  item_counts_.Clear();
  boss_stage_ids_.Clear();
  boss_count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool RealTimeHookEfficient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.RTHC config = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_ids;
        break;
      }

      // repeated int32 item_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_item_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_ids;
        if (input->ExpectTag(24)) goto parse_item_counts;
        break;
      }

      // repeated int32 item_counts = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_item_counts())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item_counts())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_counts;
        if (input->ExpectTag(32)) goto parse_up_level;
        break;
      }

      // required int32 up_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_up_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &up_level_)));
          set_has_up_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_off_time;
        break;
      }

      // required fixed64 off_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_off_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &off_time_)));
          set_has_off_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level_up_need_seconds;
        break;
      }

      // required int32 level_up_need_seconds = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level_up_need_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_up_need_seconds_)));
          set_has_level_up_need_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_total_exp;
        break;
      }

      // required int32 total_exp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_exp_)));
          set_has_total_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_total_gold;
        break;
      }

      // required int32 total_gold = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_gold_)));
          set_has_total_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_battle_times;
        break;
      }

      // required int32 battle_times = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_times_)));
          set_has_battle_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_monster_kills;
        break;
      }

      // required int32 monster_kills = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monster_kills_)));
          set_has_monster_kills();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_dead_times;
        break;
      }

      // required int32 dead_times = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dead_times_)));
          set_has_dead_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_boss_stage_ids;
        break;
      }

      // repeated int32 boss_stage_ids = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_stage_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_boss_stage_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_boss_stage_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_boss_stage_ids;
        if (input->ExpectTag(104)) goto parse_boss_count;
        break;
      }

      // repeated int32 boss_count = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 104, input, this->mutable_boss_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_boss_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_boss_count;
        if (input->ExpectTag(112)) goto parse_green_equip_count;
        break;
      }

      // required int32 green_equip_count = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_green_equip_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &green_equip_count_)));
          set_has_green_equip_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_green_equip_dismantle;
        break;
      }

      // required int32 green_equip_dismantle = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_green_equip_dismantle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &green_equip_dismantle_)));
          set_has_green_equip_dismantle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_blue_equip_count;
        break;
      }

      // required int32 blue_equip_count = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blue_equip_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blue_equip_count_)));
          set_has_blue_equip_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_blue_equip_count_dismantle;
        break;
      }

      // required int32 blue_equip_count_dismantle = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blue_equip_count_dismantle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blue_equip_count_dismantle_)));
          set_has_blue_equip_count_dismantle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_purple_equip_count;
        break;
      }

      // required int32 purple_equip_count = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_purple_equip_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &purple_equip_count_)));
          set_has_purple_equip_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_battle_time_costs;
        break;
      }

      // required int32 battle_time_costs = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_time_costs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_time_costs_)));
          set_has_battle_time_costs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_total_exp_extra;
        break;
      }

      // required int32 total_exp_extra = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_exp_extra:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_exp_extra_)));
          set_has_total_exp_extra();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void RealTimeHookEfficient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.RTHC config = 1;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->config(), output);
  }

  // repeated int32 item_ids = 2;
  for (int i = 0; i < this->item_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->item_ids(i), output);
  }

  // repeated int32 item_counts = 3;
  for (int i = 0; i < this->item_counts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->item_counts(i), output);
  }

  // required int32 up_level = 4;
  if (has_up_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->up_level(), output);
  }

  // required fixed64 off_time = 5;
  if (has_off_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->off_time(), output);
  }

  // required int32 level_up_need_seconds = 6;
  if (has_level_up_need_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level_up_need_seconds(), output);
  }

  // required int32 total_exp = 7;
  if (has_total_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->total_exp(), output);
  }

  // required int32 total_gold = 8;
  if (has_total_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->total_gold(), output);
  }

  // required int32 battle_times = 9;
  if (has_battle_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->battle_times(), output);
  }

  // required int32 monster_kills = 10;
  if (has_monster_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->monster_kills(), output);
  }

  // required int32 dead_times = 11;
  if (has_dead_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->dead_times(), output);
  }

  // repeated int32 boss_stage_ids = 12;
  for (int i = 0; i < this->boss_stage_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->boss_stage_ids(i), output);
  }

  // repeated int32 boss_count = 13;
  for (int i = 0; i < this->boss_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      13, this->boss_count(i), output);
  }

  // required int32 green_equip_count = 14;
  if (has_green_equip_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->green_equip_count(), output);
  }

  // required int32 green_equip_dismantle = 15;
  if (has_green_equip_dismantle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->green_equip_dismantle(), output);
  }

  // required int32 blue_equip_count = 16;
  if (has_blue_equip_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->blue_equip_count(), output);
  }

  // required int32 blue_equip_count_dismantle = 17;
  if (has_blue_equip_count_dismantle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->blue_equip_count_dismantle(), output);
  }

  // required int32 purple_equip_count = 18;
  if (has_purple_equip_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->purple_equip_count(), output);
  }

  // required int32 battle_time_costs = 19;
  if (has_battle_time_costs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->battle_time_costs(), output);
  }

  // required int32 total_exp_extra = 20;
  if (has_total_exp_extra()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->total_exp_extra(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RealTimeHookEfficient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.RTHC config = 1;
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->config(), target);
  }

  // repeated int32 item_ids = 2;
  for (int i = 0; i < this->item_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->item_ids(i), target);
  }

  // repeated int32 item_counts = 3;
  for (int i = 0; i < this->item_counts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->item_counts(i), target);
  }

  // required int32 up_level = 4;
  if (has_up_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->up_level(), target);
  }

  // required fixed64 off_time = 5;
  if (has_off_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->off_time(), target);
  }

  // required int32 level_up_need_seconds = 6;
  if (has_level_up_need_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level_up_need_seconds(), target);
  }

  // required int32 total_exp = 7;
  if (has_total_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->total_exp(), target);
  }

  // required int32 total_gold = 8;
  if (has_total_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->total_gold(), target);
  }

  // required int32 battle_times = 9;
  if (has_battle_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->battle_times(), target);
  }

  // required int32 monster_kills = 10;
  if (has_monster_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->monster_kills(), target);
  }

  // required int32 dead_times = 11;
  if (has_dead_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->dead_times(), target);
  }

  // repeated int32 boss_stage_ids = 12;
  for (int i = 0; i < this->boss_stage_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->boss_stage_ids(i), target);
  }

  // repeated int32 boss_count = 13;
  for (int i = 0; i < this->boss_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(13, this->boss_count(i), target);
  }

  // required int32 green_equip_count = 14;
  if (has_green_equip_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->green_equip_count(), target);
  }

  // required int32 green_equip_dismantle = 15;
  if (has_green_equip_dismantle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->green_equip_dismantle(), target);
  }

  // required int32 blue_equip_count = 16;
  if (has_blue_equip_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->blue_equip_count(), target);
  }

  // required int32 blue_equip_count_dismantle = 17;
  if (has_blue_equip_count_dismantle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->blue_equip_count_dismantle(), target);
  }

  // required int32 purple_equip_count = 18;
  if (has_purple_equip_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->purple_equip_count(), target);
  }

  // required int32 battle_time_costs = 19;
  if (has_battle_time_costs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->battle_time_costs(), target);
  }

  // required int32 total_exp_extra = 20;
  if (has_total_exp_extra()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->total_exp_extra(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RealTimeHookEfficient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.RTHC config = 1;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config());
    }

    // required int32 up_level = 4;
    if (has_up_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->up_level());
    }

    // required fixed64 off_time = 5;
    if (has_off_time()) {
      total_size += 1 + 8;
    }

    // required int32 level_up_need_seconds = 6;
    if (has_level_up_need_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level_up_need_seconds());
    }

    // required int32 total_exp = 7;
    if (has_total_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_exp());
    }

    // required int32 total_exp_extra = 20;
    if (has_total_exp_extra()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_exp_extra());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 total_gold = 8;
    if (has_total_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_gold());
    }

    // required int32 battle_times = 9;
    if (has_battle_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_times());
    }

    // required int32 battle_time_costs = 19;
    if (has_battle_time_costs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_time_costs());
    }

    // required int32 monster_kills = 10;
    if (has_monster_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monster_kills());
    }

    // required int32 dead_times = 11;
    if (has_dead_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dead_times());
    }

    // required int32 green_equip_count = 14;
    if (has_green_equip_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->green_equip_count());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 green_equip_dismantle = 15;
    if (has_green_equip_dismantle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->green_equip_dismantle());
    }

    // required int32 blue_equip_count = 16;
    if (has_blue_equip_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blue_equip_count());
    }

    // required int32 blue_equip_count_dismantle = 17;
    if (has_blue_equip_count_dismantle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blue_equip_count_dismantle());
    }

    // required int32 purple_equip_count = 18;
    if (has_purple_equip_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->purple_equip_count());
    }

  }
  // repeated int32 item_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item_ids(i));
    }
    total_size += 1 * this->item_ids_size() + data_size;
  }

  // repeated int32 item_counts = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_counts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item_counts(i));
    }
    total_size += 1 * this->item_counts_size() + data_size;
  }

  // repeated int32 boss_stage_ids = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->boss_stage_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->boss_stage_ids(i));
    }
    total_size += 1 * this->boss_stage_ids_size() + data_size;
  }

  // repeated int32 boss_count = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->boss_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->boss_count(i));
    }
    total_size += 1 * this->boss_count_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RealTimeHookEfficient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RealTimeHookEfficient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RealTimeHookEfficient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void RealTimeHookEfficient::MergeFrom(const RealTimeHookEfficient& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_ids_.MergeFrom(from.item_ids_);
  item_counts_.MergeFrom(from.item_counts_);
  boss_stage_ids_.MergeFrom(from.boss_stage_ids_);
  boss_count_.MergeFrom(from.boss_count_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_config()) {
      mutable_config()->::Packet::RTHC::MergeFrom(from.config());
    }
    if (from.has_up_level()) {
      set_up_level(from.up_level());
    }
    if (from.has_off_time()) {
      set_off_time(from.off_time());
    }
    if (from.has_level_up_need_seconds()) {
      set_level_up_need_seconds(from.level_up_need_seconds());
    }
    if (from.has_total_exp()) {
      set_total_exp(from.total_exp());
    }
    if (from.has_total_exp_extra()) {
      set_total_exp_extra(from.total_exp_extra());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_total_gold()) {
      set_total_gold(from.total_gold());
    }
    if (from.has_battle_times()) {
      set_battle_times(from.battle_times());
    }
    if (from.has_battle_time_costs()) {
      set_battle_time_costs(from.battle_time_costs());
    }
    if (from.has_monster_kills()) {
      set_monster_kills(from.monster_kills());
    }
    if (from.has_dead_times()) {
      set_dead_times(from.dead_times());
    }
    if (from.has_green_equip_count()) {
      set_green_equip_count(from.green_equip_count());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_green_equip_dismantle()) {
      set_green_equip_dismantle(from.green_equip_dismantle());
    }
    if (from.has_blue_equip_count()) {
      set_blue_equip_count(from.blue_equip_count());
    }
    if (from.has_blue_equip_count_dismantle()) {
      set_blue_equip_count_dismantle(from.blue_equip_count_dismantle());
    }
    if (from.has_purple_equip_count()) {
      set_purple_equip_count(from.purple_equip_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void RealTimeHookEfficient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void RealTimeHookEfficient::CopyFrom(const RealTimeHookEfficient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool RealTimeHookEfficient::IsInitialized() const {
  if ((_has_bits_[0] & 0x000f9ff9) != 0x000f9ff9) return false;

  if (has_config()) {
    if (!this->config().IsInitialized()) return false;
  }
  return true;
}

void RealTimeHookEfficient::SetInitialized() {
  _has_bits_[0] |= 0x000f9ff9;

  if (has_config()) {
    this->mutable_config()->SetInitialized();
  }
  return;
}

void RealTimeHookEfficient::Swap(RealTimeHookEfficient* other) {
  if (other != this) {
    std::swap(config_, other->config_);
    item_ids_.Swap(&other->item_ids_);
    item_counts_.Swap(&other->item_counts_);
    std::swap(up_level_, other->up_level_);
    std::swap(off_time_, other->off_time_);
    std::swap(level_up_need_seconds_, other->level_up_need_seconds_);
    std::swap(total_exp_, other->total_exp_);
    std::swap(total_exp_extra_, other->total_exp_extra_);
    std::swap(total_gold_, other->total_gold_);
    std::swap(battle_times_, other->battle_times_);
    std::swap(battle_time_costs_, other->battle_time_costs_);
    std::swap(monster_kills_, other->monster_kills_);
    std::swap(dead_times_, other->dead_times_);
    boss_stage_ids_.Swap(&other->boss_stage_ids_);
    boss_count_.Swap(&other->boss_count_);
    std::swap(green_equip_count_, other->green_equip_count_);
    std::swap(green_equip_dismantle_, other->green_equip_dismantle_);
    std::swap(blue_equip_count_, other->blue_equip_count_);
    std::swap(blue_equip_count_dismantle_, other->blue_equip_count_dismantle_);
    std::swap(purple_equip_count_, other->purple_equip_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata RealTimeHookEfficient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RealTimeHookEfficient_descriptor_;
  metadata.reflection = RealTimeHookEfficient_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

// @@protoc_insertion_point(global_scope)
