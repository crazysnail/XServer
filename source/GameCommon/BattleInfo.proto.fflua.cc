// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BattleInfo.proto
#include "BattleInfo.pb.h"
#include "BattleInfo.proto.fflua.h"
namespace Packet {
bool BattleInfo_fflua_reg(lua_State* state)
{
//for decltype
	BattleInfo* message(nullptr);
	message;
	ff::fflua_register_t<BattleInfo, ctor()>(state, "BattleInfo", "google::protobuf::Message")
		// required int32 endurance = 1;
		.def(&BattleInfo::endurance, "endurance")
		.def(&BattleInfo::set_endurance, "set_endurance")
		// required int32 physical_strength = 2;
		.def(&BattleInfo::physical_strength, "physical_strength")
		.def(&BattleInfo::set_physical_strength, "set_physical_strength")
		// required int32 agile = 3;
		.def(&BattleInfo::agile, "agile")
		.def(&BattleInfo::set_agile, "set_agile")
		// required int32 intelligence = 4;
		.def(&BattleInfo::intelligence, "intelligence")
		.def(&BattleInfo::set_intelligence, "set_intelligence")
		// required int32 spirit = 5;
		.def(&BattleInfo::spirit, "spirit")
		.def(&BattleInfo::set_spirit, "set_spirit")
		// required int32 hp = 6;
		.def(&BattleInfo::hp, "hp")
		.def(&BattleInfo::set_hp, "set_hp")
		// required int32 physical_attack = 7;
		.def(&BattleInfo::physical_attack, "physical_attack")
		.def(&BattleInfo::set_physical_attack, "set_physical_attack")
		// required int32 physical_armor = 8;
		.def(&BattleInfo::physical_armor, "physical_armor")
		.def(&BattleInfo::set_physical_armor, "set_physical_armor")
		// required int32 magic_attack = 9;
		.def(&BattleInfo::magic_attack, "magic_attack")
		.def(&BattleInfo::set_magic_attack, "set_magic_attack")
		// required int32 magic_armor = 10;
		.def(&BattleInfo::magic_armor, "magic_armor")
		.def(&BattleInfo::set_magic_armor, "set_magic_armor")
		// required int32 accurate = 11;
		.def(&BattleInfo::accurate, "accurate")
		.def(&BattleInfo::set_accurate, "set_accurate")
		// required int32 dodge = 12;
		.def(&BattleInfo::dodge, "dodge")
		.def(&BattleInfo::set_dodge, "set_dodge")
		// required int32 critical = 13;
		.def(&BattleInfo::critical, "critical")
		.def(&BattleInfo::set_critical, "set_critical")
		// required int32 toughness = 14;
		.def(&BattleInfo::toughness, "toughness")
		.def(&BattleInfo::set_toughness, "set_toughness")
		// required int32 move_speed = 15;
		.def(&BattleInfo::move_speed, "move_speed")
		.def(&BattleInfo::set_move_speed, "set_move_speed")
		// required int32 attack_speed = 16;
		.def(&BattleInfo::attack_speed, "attack_speed")
		.def(&BattleInfo::set_attack_speed, "set_attack_speed")
		// required int32 skill = 17;
		.def(&BattleInfo::skill, "skill")
		.def(&BattleInfo::set_skill, "set_skill")
		// optional int32 percent_hp = 18;
		.def(&BattleInfo::percent_hp, "percent_hp")
		.def(&BattleInfo::set_percent_hp, "set_percent_hp")
		.def(&BattleInfo::has_percent_hp, "has_percent_hp")
		// optional int32 percent_physical_attack = 19;
		.def(&BattleInfo::percent_physical_attack, "percent_physical_attack")
		.def(&BattleInfo::set_percent_physical_attack, "set_percent_physical_attack")
		.def(&BattleInfo::has_percent_physical_attack, "has_percent_physical_attack")
		// optional int32 percent_physical_armor = 20;
		.def(&BattleInfo::percent_physical_armor, "percent_physical_armor")
		.def(&BattleInfo::set_percent_physical_armor, "set_percent_physical_armor")
		.def(&BattleInfo::has_percent_physical_armor, "has_percent_physical_armor")
		// optional int32 percent_magic_attack = 21;
		.def(&BattleInfo::percent_magic_attack, "percent_magic_attack")
		.def(&BattleInfo::set_percent_magic_attack, "set_percent_magic_attack")
		.def(&BattleInfo::has_percent_magic_attack, "has_percent_magic_attack")
		// optional int32 percent_magic_armor = 22;
		.def(&BattleInfo::percent_magic_armor, "percent_magic_armor")
		.def(&BattleInfo::set_percent_magic_armor, "set_percent_magic_armor")
		.def(&BattleInfo::has_percent_magic_armor, "has_percent_magic_armor")
		.def(&BattleInfo::ByteSize, "ByteSize")
		.def(&BattleInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool BattleInfo_fflua_regist_all(lua_State* state)
{
	BattleInfo_fflua_reg(state);
	return true;
}
}
