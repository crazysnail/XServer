// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActivityConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ActivityConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Config {

namespace {

const ::google::protobuf::Descriptor* ActivityTimes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityTimes_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* TextAnswerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TextAnswerConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* PicAnswerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PicAnswerConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ActivityConfig_2eproto() {
  protobuf_AddDesc_ActivityConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ActivityConfig.proto");
  GOOGLE_CHECK(file != NULL);
  ActivityTimes_descriptor_ = file->message_type(0);
  static const int ActivityTimes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityTimes, begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityTimes, end_time_),
  };
  ActivityTimes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityTimes_descriptor_,
      ActivityTimes::default_instance_,
      ActivityTimes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityTimes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityTimes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityTimes));
  ActivityConfig_descriptor_ = file->message_type(1);
  static const int ActivityConfig_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, reward_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, token_day_once_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, open_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, close_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, begin_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, people_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, switch_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, display_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, week_day_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, during_week_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, limit_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, day_begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, day_end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, pre_notify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, notify_text_),
  };
  ActivityConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityConfig_descriptor_,
      ActivityConfig::default_instance_,
      ActivityConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityConfig));
  TextAnswerConfig_descriptor_ = file->message_type(2);
  static const int TextAnswerConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextAnswerConfig, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextAnswerConfig, option_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextAnswerConfig, weight_),
  };
  TextAnswerConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TextAnswerConfig_descriptor_,
      TextAnswerConfig::default_instance_,
      TextAnswerConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextAnswerConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextAnswerConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TextAnswerConfig));
  PicAnswerConfig_descriptor_ = file->message_type(3);
  static const int PicAnswerConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PicAnswerConfig, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PicAnswerConfig, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PicAnswerConfig, option_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PicAnswerConfig, weight_),
  };
  PicAnswerConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PicAnswerConfig_descriptor_,
      PicAnswerConfig::default_instance_,
      PicAnswerConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PicAnswerConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PicAnswerConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PicAnswerConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ActivityConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityTimes_descriptor_, &ActivityTimes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityConfig_descriptor_, &ActivityConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TextAnswerConfig_descriptor_, &TextAnswerConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PicAnswerConfig_descriptor_, &PicAnswerConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ActivityConfig_2eproto() {
  delete ActivityTimes::default_instance_;
  delete ActivityTimes_reflection_;
  delete ActivityConfig::default_instance_;
  delete ActivityConfig_reflection_;
  delete TextAnswerConfig::default_instance_;
  delete TextAnswerConfig_reflection_;
  delete PicAnswerConfig::default_instance_;
  delete PicAnswerConfig_reflection_;
}

void protobuf_AddDesc_ActivityConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Config::protobuf_AddDesc_AllConfigEnum_2eproto();
  ::Packet::protobuf_AddDesc_ProtoBufOption_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024ActivityConfig.proto\022\006Config\032\023AllConfi"
    "gEnum.proto\032\024ProtoBufOption.proto\"5\n\rAct"
    "ivityTimes\022\022\n\nbegin_time\030\001 \002(\005\022\020\n\010end_ti"
    "me\030\002 \002(\005\"\254\003\n\016ActivityConfig\022\n\n\002id\030\001 \002(\005\022"
    "$\n\005group\030\002 \002(\0162\025.Config.ActivityGroup\022\024\n"
    "\014reward_count\030\003 \002(\005\022\026\n\016token_day_once\030\004 "
    "\002(\005\022\022\n\nopen_level\030\005 \002(\005\022\023\n\013close_level\030\006"
    " \002(\005\022\022\n\nbegin_date\030\007 \002(\005\022\020\n\010end_date\030\010 \002"
    "(\005\022\024\n\014people_count\030\t \002(\005\022\023\n\013switch_open\030"
    "\n \002(\005\022\025\n\rdisplay_times\030\013 \002(\005\022\025\n\rweek_day"
    "_flag\030\014 \002(\t\022\030\n\020during_week_flag\030\r \002(\t\022\023\n"
    "\013limit_times\030\016 \002(\005\022\026\n\016day_begin_time\030\017 \002"
    "(\t\022\024\n\014day_end_time\030\020 \002(\t\022\014\n\004name\030\021 \002(\t\022\022"
    "\n\npre_notify\030\022 \002(\005\022\023\n\013notify_text\030\023 \002(\t\""
    "G\n\020TextAnswerConfig\022\r\n\005index\030\001 \002(\005\022\024\n\006op"
    "tion\030\002 \003(\tB\004\300\363\030\004\022\016\n\006weight\030\003 \002(\005\"U\n\017PicA"
    "nswerConfig\022\r\n\005index\030\001 \002(\005\022\r\n\005group\030\002 \002("
    "\005\022\024\n\006option\030\003 \003(\005B\004\300\363\030\003\022\016\n\006weight\030\004 \002(\005", 719);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ActivityConfig.proto", &protobuf_RegisterTypes);
  ActivityTimes::default_instance_ = new ActivityTimes();
  ActivityConfig::default_instance_ = new ActivityConfig();
  TextAnswerConfig::default_instance_ = new TextAnswerConfig();
  PicAnswerConfig::default_instance_ = new PicAnswerConfig();
  ActivityTimes::default_instance_->InitAsDefaultInstance();
  ActivityConfig::default_instance_->InitAsDefaultInstance();
  TextAnswerConfig::default_instance_->InitAsDefaultInstance();
  PicAnswerConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ActivityConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ActivityConfig_2eproto {
  StaticDescriptorInitializer_ActivityConfig_2eproto() {
    protobuf_AddDesc_ActivityConfig_2eproto();
  }
} static_descriptor_initializer_ActivityConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ActivityTimes::kBeginTimeFieldNumber;
const int ActivityTimes::kEndTimeFieldNumber;
#endif  // !_MSC_VER

ActivityTimes::ActivityTimes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityTimes::InitAsDefaultInstance() {
}

ActivityTimes::ActivityTimes(const ActivityTimes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityTimes::SharedCtor() {
  _cached_size_ = 0;
  begin_time_ = 0;
  end_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityTimes::~ActivityTimes() {
  SharedDtor();
}

void ActivityTimes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityTimes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityTimes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityTimes_descriptor_;
}

const ActivityTimes& ActivityTimes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityConfig_2eproto();
  return *default_instance_;
}

ActivityTimes* ActivityTimes::default_instance_ = NULL;

ActivityTimes* ActivityTimes::New() const {
  return new ActivityTimes;
}

void ActivityTimes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    begin_time_ = 0;
    end_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ActivityTimes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 begin_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_end_time;
        break;
      }

      // required int32 end_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ActivityTimes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 begin_time = 1;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->begin_time(), output);
  }

  // required int32 end_time = 2;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityTimes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 begin_time = 1;
  if (has_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->begin_time(), target);
  }

  // required int32 end_time = 2;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityTimes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 begin_time = 1;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->begin_time());
    }

    // required int32 end_time = 2;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityTimes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityTimes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityTimes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ActivityTimes::MergeFrom(const ActivityTimes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ActivityTimes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ActivityTimes::CopyFrom(const ActivityTimes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ActivityTimes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ActivityTimes::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void ActivityTimes::Swap(ActivityTimes* other) {
  if (other != this) {
    std::swap(begin_time_, other->begin_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ActivityTimes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityTimes_descriptor_;
  metadata.reflection = ActivityTimes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityConfig::kIdFieldNumber;
const int ActivityConfig::kGroupFieldNumber;
const int ActivityConfig::kRewardCountFieldNumber;
const int ActivityConfig::kTokenDayOnceFieldNumber;
const int ActivityConfig::kOpenLevelFieldNumber;
const int ActivityConfig::kCloseLevelFieldNumber;
const int ActivityConfig::kBeginDateFieldNumber;
const int ActivityConfig::kEndDateFieldNumber;
const int ActivityConfig::kPeopleCountFieldNumber;
const int ActivityConfig::kSwitchOpenFieldNumber;
const int ActivityConfig::kDisplayTimesFieldNumber;
const int ActivityConfig::kWeekDayFlagFieldNumber;
const int ActivityConfig::kDuringWeekFlagFieldNumber;
const int ActivityConfig::kLimitTimesFieldNumber;
const int ActivityConfig::kDayBeginTimeFieldNumber;
const int ActivityConfig::kDayEndTimeFieldNumber;
const int ActivityConfig::kNameFieldNumber;
const int ActivityConfig::kPreNotifyFieldNumber;
const int ActivityConfig::kNotifyTextFieldNumber;
#endif  // !_MSC_VER

ActivityConfig::ActivityConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityConfig::InitAsDefaultInstance() {
}

ActivityConfig::ActivityConfig(const ActivityConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityConfig::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  group_ = 0;
  reward_count_ = 0;
  token_day_once_ = 0;
  open_level_ = 0;
  close_level_ = 0;
  begin_date_ = 0;
  end_date_ = 0;
  people_count_ = 0;
  switch_open_ = 0;
  display_times_ = 0;
  week_day_flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  during_week_flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  limit_times_ = 0;
  day_begin_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  day_end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pre_notify_ = 0;
  notify_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityConfig::~ActivityConfig() {
  SharedDtor();
}

void ActivityConfig::SharedDtor() {
  if (week_day_flag_ != &::google::protobuf::internal::kEmptyString) {
    delete week_day_flag_;
  }
  if (during_week_flag_ != &::google::protobuf::internal::kEmptyString) {
    delete during_week_flag_;
  }
  if (day_begin_time_ != &::google::protobuf::internal::kEmptyString) {
    delete day_begin_time_;
  }
  if (day_end_time_ != &::google::protobuf::internal::kEmptyString) {
    delete day_end_time_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (notify_text_ != &::google::protobuf::internal::kEmptyString) {
    delete notify_text_;
  }
  if (this != default_instance_) {
  }
}

void ActivityConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityConfig_descriptor_;
}

const ActivityConfig& ActivityConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityConfig_2eproto();
  return *default_instance_;
}

ActivityConfig* ActivityConfig::default_instance_ = NULL;

ActivityConfig* ActivityConfig::New() const {
  return new ActivityConfig;
}

void ActivityConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    group_ = 0;
    reward_count_ = 0;
    token_day_once_ = 0;
    open_level_ = 0;
    close_level_ = 0;
    begin_date_ = 0;
    end_date_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    people_count_ = 0;
    switch_open_ = 0;
    display_times_ = 0;
    if (has_week_day_flag()) {
      if (week_day_flag_ != &::google::protobuf::internal::kEmptyString) {
        week_day_flag_->clear();
      }
    }
    if (has_during_week_flag()) {
      if (during_week_flag_ != &::google::protobuf::internal::kEmptyString) {
        during_week_flag_->clear();
      }
    }
    limit_times_ = 0;
    if (has_day_begin_time()) {
      if (day_begin_time_ != &::google::protobuf::internal::kEmptyString) {
        day_begin_time_->clear();
      }
    }
    if (has_day_end_time()) {
      if (day_end_time_ != &::google::protobuf::internal::kEmptyString) {
        day_end_time_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    pre_notify_ = 0;
    if (has_notify_text()) {
      if (notify_text_ != &::google::protobuf::internal::kEmptyString) {
        notify_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ActivityConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_group;
        break;
      }

      // required .Config.ActivityGroup group = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Config::ActivityGroup_IsValid(value)) {
            set_group(static_cast< ::Config::ActivityGroup >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reward_count;
        break;
      }

      // required int32 reward_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_count_)));
          set_has_reward_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_token_day_once;
        break;
      }

      // required int32 token_day_once = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token_day_once:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &token_day_once_)));
          set_has_token_day_once();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_open_level;
        break;
      }

      // required int32 open_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_level_)));
          set_has_open_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_close_level;
        break;
      }

      // required int32 close_level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_close_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &close_level_)));
          set_has_close_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_begin_date;
        break;
      }

      // required int32 begin_date = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begin_date_)));
          set_has_begin_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_end_date;
        break;
      }

      // required int32 end_date = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_date_)));
          set_has_end_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_people_count;
        break;
      }

      // required int32 people_count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_people_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &people_count_)));
          set_has_people_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_switch_open;
        break;
      }

      // required int32 switch_open = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_switch_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &switch_open_)));
          set_has_switch_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_display_times;
        break;
      }

      // required int32 display_times = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_display_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &display_times_)));
          set_has_display_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_week_day_flag;
        break;
      }

      // required string week_day_flag = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_week_day_flag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_week_day_flag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->week_day_flag().data(), this->week_day_flag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_during_week_flag;
        break;
      }

      // required string during_week_flag = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_during_week_flag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_during_week_flag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->during_week_flag().data(), this->during_week_flag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_limit_times;
        break;
      }

      // required int32 limit_times = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_times_)));
          set_has_limit_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_day_begin_time;
        break;
      }

      // required string day_begin_time = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_day_begin_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_day_begin_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->day_begin_time().data(), this->day_begin_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_day_end_time;
        break;
      }

      // required string day_end_time = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_day_end_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_day_end_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->day_end_time().data(), this->day_end_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_name;
        break;
      }

      // required string name = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_pre_notify;
        break;
      }

      // required int32 pre_notify = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pre_notify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pre_notify_)));
          set_has_pre_notify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_notify_text;
        break;
      }

      // required string notify_text = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notify_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notify_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notify_text().data(), this->notify_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ActivityConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .Config.ActivityGroup group = 2;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->group(), output);
  }

  // required int32 reward_count = 3;
  if (has_reward_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reward_count(), output);
  }

  // required int32 token_day_once = 4;
  if (has_token_day_once()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->token_day_once(), output);
  }

  // required int32 open_level = 5;
  if (has_open_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->open_level(), output);
  }

  // required int32 close_level = 6;
  if (has_close_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->close_level(), output);
  }

  // required int32 begin_date = 7;
  if (has_begin_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->begin_date(), output);
  }

  // required int32 end_date = 8;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->end_date(), output);
  }

  // required int32 people_count = 9;
  if (has_people_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->people_count(), output);
  }

  // required int32 switch_open = 10;
  if (has_switch_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->switch_open(), output);
  }

  // required int32 display_times = 11;
  if (has_display_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->display_times(), output);
  }

  // required string week_day_flag = 12;
  if (has_week_day_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->week_day_flag().data(), this->week_day_flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->week_day_flag(), output);
  }

  // required string during_week_flag = 13;
  if (has_during_week_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->during_week_flag().data(), this->during_week_flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->during_week_flag(), output);
  }

  // required int32 limit_times = 14;
  if (has_limit_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->limit_times(), output);
  }

  // required string day_begin_time = 15;
  if (has_day_begin_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->day_begin_time().data(), this->day_begin_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->day_begin_time(), output);
  }

  // required string day_end_time = 16;
  if (has_day_end_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->day_end_time().data(), this->day_end_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->day_end_time(), output);
  }

  // required string name = 17;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->name(), output);
  }

  // required int32 pre_notify = 18;
  if (has_pre_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->pre_notify(), output);
  }

  // required string notify_text = 19;
  if (has_notify_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notify_text().data(), this->notify_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->notify_text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .Config.ActivityGroup group = 2;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->group(), target);
  }

  // required int32 reward_count = 3;
  if (has_reward_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reward_count(), target);
  }

  // required int32 token_day_once = 4;
  if (has_token_day_once()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->token_day_once(), target);
  }

  // required int32 open_level = 5;
  if (has_open_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->open_level(), target);
  }

  // required int32 close_level = 6;
  if (has_close_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->close_level(), target);
  }

  // required int32 begin_date = 7;
  if (has_begin_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->begin_date(), target);
  }

  // required int32 end_date = 8;
  if (has_end_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->end_date(), target);
  }

  // required int32 people_count = 9;
  if (has_people_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->people_count(), target);
  }

  // required int32 switch_open = 10;
  if (has_switch_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->switch_open(), target);
  }

  // required int32 display_times = 11;
  if (has_display_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->display_times(), target);
  }

  // required string week_day_flag = 12;
  if (has_week_day_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->week_day_flag().data(), this->week_day_flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->week_day_flag(), target);
  }

  // required string during_week_flag = 13;
  if (has_during_week_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->during_week_flag().data(), this->during_week_flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->during_week_flag(), target);
  }

  // required int32 limit_times = 14;
  if (has_limit_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->limit_times(), target);
  }

  // required string day_begin_time = 15;
  if (has_day_begin_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->day_begin_time().data(), this->day_begin_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->day_begin_time(), target);
  }

  // required string day_end_time = 16;
  if (has_day_end_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->day_end_time().data(), this->day_end_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->day_end_time(), target);
  }

  // required string name = 17;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->name(), target);
  }

  // required int32 pre_notify = 18;
  if (has_pre_notify()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->pre_notify(), target);
  }

  // required string notify_text = 19;
  if (has_notify_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notify_text().data(), this->notify_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->notify_text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required .Config.ActivityGroup group = 2;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->group());
    }

    // required int32 reward_count = 3;
    if (has_reward_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_count());
    }

    // required int32 token_day_once = 4;
    if (has_token_day_once()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->token_day_once());
    }

    // required int32 open_level = 5;
    if (has_open_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open_level());
    }

    // required int32 close_level = 6;
    if (has_close_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->close_level());
    }

    // required int32 begin_date = 7;
    if (has_begin_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->begin_date());
    }

    // required int32 end_date = 8;
    if (has_end_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_date());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 people_count = 9;
    if (has_people_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->people_count());
    }

    // required int32 switch_open = 10;
    if (has_switch_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->switch_open());
    }

    // required int32 display_times = 11;
    if (has_display_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->display_times());
    }

    // required string week_day_flag = 12;
    if (has_week_day_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->week_day_flag());
    }

    // required string during_week_flag = 13;
    if (has_during_week_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->during_week_flag());
    }

    // required int32 limit_times = 14;
    if (has_limit_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit_times());
    }

    // required string day_begin_time = 15;
    if (has_day_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->day_begin_time());
    }

    // required string day_end_time = 16;
    if (has_day_end_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->day_end_time());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required string name = 17;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 pre_notify = 18;
    if (has_pre_notify()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pre_notify());
    }

    // required string notify_text = 19;
    if (has_notify_text()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notify_text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ActivityConfig::MergeFrom(const ActivityConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_reward_count()) {
      set_reward_count(from.reward_count());
    }
    if (from.has_token_day_once()) {
      set_token_day_once(from.token_day_once());
    }
    if (from.has_open_level()) {
      set_open_level(from.open_level());
    }
    if (from.has_close_level()) {
      set_close_level(from.close_level());
    }
    if (from.has_begin_date()) {
      set_begin_date(from.begin_date());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_people_count()) {
      set_people_count(from.people_count());
    }
    if (from.has_switch_open()) {
      set_switch_open(from.switch_open());
    }
    if (from.has_display_times()) {
      set_display_times(from.display_times());
    }
    if (from.has_week_day_flag()) {
      set_week_day_flag(from.week_day_flag());
    }
    if (from.has_during_week_flag()) {
      set_during_week_flag(from.during_week_flag());
    }
    if (from.has_limit_times()) {
      set_limit_times(from.limit_times());
    }
    if (from.has_day_begin_time()) {
      set_day_begin_time(from.day_begin_time());
    }
    if (from.has_day_end_time()) {
      set_day_end_time(from.day_end_time());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pre_notify()) {
      set_pre_notify(from.pre_notify());
    }
    if (from.has_notify_text()) {
      set_notify_text(from.notify_text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ActivityConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ActivityConfig::CopyFrom(const ActivityConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ActivityConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x0007ffff) != 0x0007ffff) return false;

  return true;
}

void ActivityConfig::SetInitialized() {
  _has_bits_[0] |= 0x0007ffff;

  return;
}

void ActivityConfig::Swap(ActivityConfig* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(group_, other->group_);
    std::swap(reward_count_, other->reward_count_);
    std::swap(token_day_once_, other->token_day_once_);
    std::swap(open_level_, other->open_level_);
    std::swap(close_level_, other->close_level_);
    std::swap(begin_date_, other->begin_date_);
    std::swap(end_date_, other->end_date_);
    std::swap(people_count_, other->people_count_);
    std::swap(switch_open_, other->switch_open_);
    std::swap(display_times_, other->display_times_);
    std::swap(week_day_flag_, other->week_day_flag_);
    std::swap(during_week_flag_, other->during_week_flag_);
    std::swap(limit_times_, other->limit_times_);
    std::swap(day_begin_time_, other->day_begin_time_);
    std::swap(day_end_time_, other->day_end_time_);
    std::swap(name_, other->name_);
    std::swap(pre_notify_, other->pre_notify_);
    std::swap(notify_text_, other->notify_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ActivityConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityConfig_descriptor_;
  metadata.reflection = ActivityConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TextAnswerConfig::kIndexFieldNumber;
const int TextAnswerConfig::kOptionFieldNumber;
const int TextAnswerConfig::kWeightFieldNumber;
#endif  // !_MSC_VER

TextAnswerConfig::TextAnswerConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TextAnswerConfig::InitAsDefaultInstance() {
}

TextAnswerConfig::TextAnswerConfig(const TextAnswerConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TextAnswerConfig::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  weight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TextAnswerConfig::~TextAnswerConfig() {
  SharedDtor();
}

void TextAnswerConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TextAnswerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TextAnswerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TextAnswerConfig_descriptor_;
}

const TextAnswerConfig& TextAnswerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityConfig_2eproto();
  return *default_instance_;
}

TextAnswerConfig* TextAnswerConfig::default_instance_ = NULL;

TextAnswerConfig* TextAnswerConfig::New() const {
  return new TextAnswerConfig;
}

void TextAnswerConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    weight_ = 0;
  }
  option_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool TextAnswerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_option;
        break;
      }

      // repeated string option = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_option:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_option()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->option(this->option_size() - 1).data(),
            this->option(this->option_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_option;
        if (input->ExpectTag(24)) goto parse_weight;
        break;
      }

      // required int32 weight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void TextAnswerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // repeated string option = 2;
  for (int i = 0; i < this->option_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->option(i).data(), this->option(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->option(i), output);
  }

  // required int32 weight = 3;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->weight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TextAnswerConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // repeated string option = 2;
  for (int i = 0; i < this->option_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->option(i).data(), this->option(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->option(i), target);
  }

  // required int32 weight = 3;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->weight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TextAnswerConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 weight = 3;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weight());
    }

  }
  // repeated string option = 2;
  total_size += 1 * this->option_size();
  for (int i = 0; i < this->option_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->option(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextAnswerConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TextAnswerConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TextAnswerConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void TextAnswerConfig::MergeFrom(const TextAnswerConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  option_.MergeFrom(from.option_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void TextAnswerConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void TextAnswerConfig::CopyFrom(const TextAnswerConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool TextAnswerConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void TextAnswerConfig::SetInitialized() {
  _has_bits_[0] |= 0x00000005;

  return;
}

void TextAnswerConfig::Swap(TextAnswerConfig* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    option_.Swap(&other->option_);
    std::swap(weight_, other->weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata TextAnswerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TextAnswerConfig_descriptor_;
  metadata.reflection = TextAnswerConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PicAnswerConfig::kIndexFieldNumber;
const int PicAnswerConfig::kGroupFieldNumber;
const int PicAnswerConfig::kOptionFieldNumber;
const int PicAnswerConfig::kWeightFieldNumber;
#endif  // !_MSC_VER

PicAnswerConfig::PicAnswerConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PicAnswerConfig::InitAsDefaultInstance() {
}

PicAnswerConfig::PicAnswerConfig(const PicAnswerConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PicAnswerConfig::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  group_ = 0;
  weight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PicAnswerConfig::~PicAnswerConfig() {
  SharedDtor();
}

void PicAnswerConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PicAnswerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PicAnswerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PicAnswerConfig_descriptor_;
}

const PicAnswerConfig& PicAnswerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityConfig_2eproto();
  return *default_instance_;
}

PicAnswerConfig* PicAnswerConfig::default_instance_ = NULL;

PicAnswerConfig* PicAnswerConfig::New() const {
  return new PicAnswerConfig;
}

void PicAnswerConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    group_ = 0;
    weight_ = 0;
  }
  option_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PicAnswerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_group;
        break;
      }

      // required int32 group = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_option;
        break;
      }

      // repeated int32 option = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_option:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_option())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_option())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_option;
        if (input->ExpectTag(32)) goto parse_weight;
        break;
      }

      // required int32 weight = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PicAnswerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required int32 group = 2;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->group(), output);
  }

  // repeated int32 option = 3;
  for (int i = 0; i < this->option_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->option(i), output);
  }

  // required int32 weight = 4;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->weight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PicAnswerConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required int32 group = 2;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->group(), target);
  }

  // repeated int32 option = 3;
  for (int i = 0; i < this->option_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->option(i), target);
  }

  // required int32 weight = 4;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->weight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PicAnswerConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 group = 2;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group());
    }

    // required int32 weight = 4;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weight());
    }

  }
  // repeated int32 option = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->option_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->option(i));
    }
    total_size += 1 * this->option_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PicAnswerConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PicAnswerConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PicAnswerConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PicAnswerConfig::MergeFrom(const PicAnswerConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  option_.MergeFrom(from.option_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PicAnswerConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PicAnswerConfig::CopyFrom(const PicAnswerConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PicAnswerConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void PicAnswerConfig::SetInitialized() {
  _has_bits_[0] |= 0x0000000b;

  return;
}

void PicAnswerConfig::Swap(PicAnswerConfig* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(group_, other->group_);
    option_.Swap(&other->option_);
    std::swap(weight_, other->weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PicAnswerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PicAnswerConfig_descriptor_;
  metadata.reflection = PicAnswerConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config

// @@protoc_insertion_point(global_scope)
