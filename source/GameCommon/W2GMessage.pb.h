// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: W2GMessage.proto

#ifndef PROTOBUF_W2GMessage_2eproto__INCLUDED
#define PROTOBUF_W2GMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Packet {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_W2GMessage_2eproto();
void protobuf_AssignDesc_W2GMessage_2eproto();
void protobuf_ShutdownFile_W2GMessage_2eproto();

class PostData;
class HttpData;

// ===================================================================

class PostData : public ::google::protobuf::Message {
 public:
  PostData();
  virtual ~PostData();

  PostData(const PostData& from);

  inline PostData& operator=(const PostData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PostData& default_instance();

  void Swap(PostData* other);

  // implements Message ----------------------------------------------

  PostData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PostData& from);
  void MergeFrom(const PostData& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:Packet.PostData)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_W2GMessage_2eproto();
  friend void protobuf_AssignDesc_W2GMessage_2eproto();
  friend void protobuf_ShutdownFile_W2GMessage_2eproto();

  void InitAsDefaultInstance();
  static PostData* default_instance_;
};
// -------------------------------------------------------------------

class HttpData : public ::google::protobuf::Message {
 public:
  HttpData();
  virtual ~HttpData();

  HttpData(const HttpData& from);

  inline HttpData& operator=(const HttpData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpData& default_instance();

  void Swap(HttpData* other);

  // implements Message ----------------------------------------------

  HttpData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HttpData& from);
  void MergeFrom(const HttpData& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string url = 1;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 1;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // required bool head_length = 2;
  inline bool has_head_length() const;
  inline void clear_head_length();
  static const int kHeadLengthFieldNumber = 2;
  inline bool head_length() const;
  inline void set_head_length(bool value);

  // required int32 length = 3;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 3;
  inline ::google::protobuf::int32 length() const;
  inline void set_length(::google::protobuf::int32 value);

  // repeated .Packet.PostData post = 4;
  inline int post_size() const;
  inline void clear_post();
  static const int kPostFieldNumber = 4;
  inline const ::Packet::PostData& post(int index) const;
  inline ::Packet::PostData* mutable_post(int index);
  inline ::Packet::PostData* add_post();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::PostData >&
      post() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::PostData >*
      mutable_post();

  // required bool post_finish = 5;
  inline bool has_post_finish() const;
  inline void clear_post_finish();
  static const int kPostFinishFieldNumber = 5;
  inline bool post_finish() const;
  inline void set_post_finish(bool value);

  // @@protoc_insertion_point(class_scope:Packet.HttpData)
 private:
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_head_length();
  inline void clear_has_head_length();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_post_finish();
  inline void clear_has_post_finish();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* url_;
  ::google::protobuf::int32 length_;
  bool head_length_;
  bool post_finish_;
  ::google::protobuf::RepeatedPtrField< ::Packet::PostData > post_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_W2GMessage_2eproto();
  friend void protobuf_AssignDesc_W2GMessage_2eproto();
  friend void protobuf_ShutdownFile_W2GMessage_2eproto();

  void InitAsDefaultInstance();
  static HttpData* default_instance_;
};
// ===================================================================


// ===================================================================

// PostData

// required string key = 1;
inline bool PostData::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PostData::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PostData::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PostData::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
  SetDirty();
}
inline const ::std::string& PostData::key() const {
  return *key_;
}
inline void PostData::set_key(const ::std::string& value) {
  SetDirty();
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void PostData::set_key(const char* value) {
  SetDirty();
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void PostData::set_key(const char* value, size_t size) {
  SetDirty();
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PostData::mutable_key() {
  SetDirty();
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* PostData::release_key() {
  SetDirty();
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PostData::set_allocated_key(::std::string* key) {
  SetDirty();
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string value = 2;
inline bool PostData::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PostData::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PostData::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PostData::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
  SetDirty();
}
inline const ::std::string& PostData::value() const {
  return *value_;
}
inline void PostData::set_value(const ::std::string& value) {
  SetDirty();
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void PostData::set_value(const char* value) {
  SetDirty();
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void PostData::set_value(const char* value, size_t size) {
  SetDirty();
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PostData::mutable_value() {
  SetDirty();
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* PostData::release_value() {
  SetDirty();
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PostData::set_allocated_value(::std::string* value) {
  SetDirty();
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// HttpData

// required string url = 1;
inline bool HttpData::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HttpData::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HttpData::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HttpData::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
  SetDirty();
}
inline const ::std::string& HttpData::url() const {
  return *url_;
}
inline void HttpData::set_url(const ::std::string& value) {
  SetDirty();
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void HttpData::set_url(const char* value) {
  SetDirty();
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void HttpData::set_url(const char* value, size_t size) {
  SetDirty();
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HttpData::mutable_url() {
  SetDirty();
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* HttpData::release_url() {
  SetDirty();
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HttpData::set_allocated_url(::std::string* url) {
  SetDirty();
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool head_length = 2;
inline bool HttpData::has_head_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HttpData::set_has_head_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HttpData::clear_has_head_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HttpData::clear_head_length() {
  head_length_ = false;
  clear_has_head_length();
  SetDirty();
}
inline bool HttpData::head_length() const {
  return head_length_;
}
inline void HttpData::set_head_length(bool value) {
  SetDirty();
  set_has_head_length();
  head_length_ = value;
}

// required int32 length = 3;
inline bool HttpData::has_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HttpData::set_has_length() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HttpData::clear_has_length() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HttpData::clear_length() {
  length_ = 0;
  clear_has_length();
  SetDirty();
}
inline ::google::protobuf::int32 HttpData::length() const {
  return length_;
}
inline void HttpData::set_length(::google::protobuf::int32 value) {
  SetDirty();
  set_has_length();
  length_ = value;
}

// repeated .Packet.PostData post = 4;
inline int HttpData::post_size() const {
  return post_.size();
}
inline void HttpData::clear_post() {
  post_.Clear();
  SetDirty();
}
inline const ::Packet::PostData& HttpData::post(int index) const {
  return post_.Get(index);
}
inline ::Packet::PostData* HttpData::mutable_post(int index) {
  SetDirty();
  return post_.Mutable(index);
}
inline ::Packet::PostData* HttpData::add_post() {
  SetDirty();
  return post_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::PostData >&
HttpData::post() const {
  return post_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::PostData >*
HttpData::mutable_post() {
  SetDirty();
  return &post_;
}

// required bool post_finish = 5;
inline bool HttpData::has_post_finish() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HttpData::set_has_post_finish() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HttpData::clear_has_post_finish() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HttpData::clear_post_finish() {
  post_finish_ = false;
  clear_has_post_finish();
  SetDirty();
}
inline bool HttpData::post_finish() const {
  return post_finish_;
}
inline void HttpData::set_post_finish(bool value) {
  SetDirty();
  set_has_post_finish();
  post_finish_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_W2GMessage_2eproto__INCLUDED
