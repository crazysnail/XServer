// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MissionConfig.proto
#include "MissionConfig.pb.h"
#include "MissionConfig.proto.fflua.h"
namespace Config {
bool MissionConfig_fflua_reg(lua_State* state)
{
//for decltype
	MissionConfig* message(nullptr);
	message;
	ff::fflua_register_t<MissionConfig, ctor()>(state, "MissionConfig", "google::protobuf::Message")
		// required int32 id = 1;
		.def(&MissionConfig::id, "id")
		.def(&MissionConfig::set_id, "set_id")
		// repeated int32 pre_id = 2;
		.def(&MissionConfig::pre_id_size, "pre_id_size")
		.def<decltype(message->pre_id(0)) (MissionConfig::*)(int) const>(&MissionConfig::pre_id, "pre_id")
		.def<void(MissionConfig::*)(int, const decltype(message->pre_id(0)))>(&MissionConfig::set_pre_id, "set_pre_id")
		.def(&MissionConfig::add_pre_id, "add_pre_id")
		// required .Config.FinishType finish_type = 3;
		.def(&MissionConfig::finish_type, "finish_type")
		.def(&MissionConfig::set_finish_type, "set_finish_type")
		// required .Config.MissionType type = 4;
		.def(&MissionConfig::type, "type")
		.def(&MissionConfig::set_type, "set_type")
		// required int32 group = 5;
		.def(&MissionConfig::group, "group")
		.def(&MissionConfig::set_group, "set_group")
		// required int32 open_level = 6;
		.def(&MissionConfig::open_level, "open_level")
		.def(&MissionConfig::set_open_level, "set_open_level")
		// required int32 count_limit = 7;
		.def(&MissionConfig::count_limit, "count_limit")
		.def(&MissionConfig::set_count_limit, "set_count_limit")
		// required int32 adapt_level = 8;
		.def(&MissionConfig::adapt_level, "adapt_level")
		.def(&MissionConfig::set_adapt_level, "set_adapt_level")
		// required int32 circle = 9;
		.def(&MissionConfig::circle, "circle")
		.def(&MissionConfig::set_circle, "set_circle")
		// required int32 rate = 10;
		.def(&MissionConfig::rate, "rate")
		.def(&MissionConfig::set_rate, "set_rate")
		// required int32 can_drop = 11;
		.def(&MissionConfig::can_drop, "can_drop")
		.def(&MissionConfig::set_can_drop, "set_can_drop")
		// repeated int32 param = 12;
		.def(&MissionConfig::param_size, "param_size")
		.def<decltype(message->param(0)) (MissionConfig::*)(int) const>(&MissionConfig::param, "param")
		.def<void(MissionConfig::*)(int, const decltype(message->param(0)))>(&MissionConfig::set_param, "set_param")
		.def(&MissionConfig::add_param, "add_param")
		// required int32 exp = 13;
		.def(&MissionConfig::exp, "exp")
		.def(&MissionConfig::set_exp, "set_exp")
		// required float exp_rate = 14;
		.def(&MissionConfig::exp_rate, "exp_rate")
		.def(&MissionConfig::set_exp_rate, "set_exp_rate")
		// required int32 gold = 15;
		.def(&MissionConfig::gold, "gold")
		.def(&MissionConfig::set_gold, "set_gold")
		// required float gold_rate = 16;
		.def(&MissionConfig::gold_rate, "gold_rate")
		.def(&MissionConfig::set_gold_rate, "set_gold_rate")
		// required int32 package_id = 17;
		.def(&MissionConfig::package_id, "package_id")
		.def(&MissionConfig::set_package_id, "set_package_id")
		// required int32 publish_npc_id = 18;
		.def(&MissionConfig::publish_npc_id, "publish_npc_id")
		.def(&MissionConfig::set_publish_npc_id, "set_publish_npc_id")
		// required int32 commit_npc_id = 19;
		.def(&MissionConfig::commit_npc_id, "commit_npc_id")
		.def(&MissionConfig::set_commit_npc_id, "set_commit_npc_id")
		// required int32 other_npc_group = 20;
		.def(&MissionConfig::other_npc_group, "other_npc_group")
		.def(&MissionConfig::set_other_npc_group, "set_other_npc_group")
		// required int32 roll_drop = 21;
		.def(&MissionConfig::roll_drop, "roll_drop")
		.def(&MissionConfig::set_roll_drop, "set_roll_drop")
		// required int32 is_open = 22;
		.def(&MissionConfig::is_open, "is_open")
		.def(&MissionConfig::set_is_open, "set_is_open")
		.def(&MissionConfig::ByteSize, "ByteSize")
		.def(&MissionConfig::SetInitialized, "SetInitialized")
		;
	return true;
}
bool MissionExConfig_fflua_reg(lua_State* state)
{
//for decltype
	MissionExConfig* message(nullptr);
	message;
	ff::fflua_register_t<MissionExConfig, ctor()>(state, "MissionExConfig", "google::protobuf::Message")
		// required int32 index = 1;
		.def(&MissionExConfig::index, "index")
		.def(&MissionExConfig::set_index, "set_index")
		// required .Config.SubFinishType sub_type = 2;
		.def(&MissionExConfig::sub_type, "sub_type")
		.def(&MissionExConfig::set_sub_type, "set_sub_type")
		// repeated int32 monster = 3;
		.def(&MissionExConfig::monster_size, "monster_size")
		.def<decltype(message->monster(0)) (MissionExConfig::*)(int) const>(&MissionExConfig::monster, "monster")
		.def<void(MissionExConfig::*)(int, const decltype(message->monster(0)))>(&MissionExConfig::set_monster, "set_monster")
		.def(&MissionExConfig::add_monster, "add_monster")
		// repeated int32 item = 4;
		.def(&MissionExConfig::item_size, "item_size")
		.def<decltype(message->item(0)) (MissionExConfig::*)(int) const>(&MissionExConfig::item, "item")
		.def<void(MissionExConfig::*)(int, const decltype(message->item(0)))>(&MissionExConfig::set_item, "set_item")
		.def(&MissionExConfig::add_item, "add_item")
		// repeated int32 rate = 5;
		.def(&MissionExConfig::rate_size, "rate_size")
		.def<decltype(message->rate(0)) (MissionExConfig::*)(int) const>(&MissionExConfig::rate, "rate")
		.def<void(MissionExConfig::*)(int, const decltype(message->rate(0)))>(&MissionExConfig::set_rate, "set_rate")
		.def(&MissionExConfig::add_rate, "add_rate")
		// repeated int32 count = 6;
		.def(&MissionExConfig::count_size, "count_size")
		.def<decltype(message->count(0)) (MissionExConfig::*)(int) const>(&MissionExConfig::count, "count")
		.def<void(MissionExConfig::*)(int, const decltype(message->count(0)))>(&MissionExConfig::set_count, "set_count")
		.def(&MissionExConfig::add_count, "add_count")
		// required int32 pos_param = 7;
		.def(&MissionExConfig::pos_param, "pos_param")
		.def(&MissionExConfig::set_pos_param, "set_pos_param")
		.def(&MissionExConfig::ByteSize, "ByteSize")
		.def(&MissionExConfig::SetInitialized, "SetInitialized")
		;
	return true;
}
bool TargetConfig_fflua_reg(lua_State* state)
{
//for decltype
	TargetConfig* message(nullptr);
	message;
	ff::fflua_register_t<TargetConfig, ctor()>(state, "TargetConfig", "google::protobuf::Message")
		// required int32 index = 1;
		.def(&TargetConfig::index, "index")
		.def(&TargetConfig::set_index, "set_index")
		// required int32 min_level = 2;
		.def(&TargetConfig::min_level, "min_level")
		.def(&TargetConfig::set_min_level, "set_min_level")
		// required int32 max_level = 3;
		.def(&TargetConfig::max_level, "max_level")
		.def(&TargetConfig::set_max_level, "set_max_level")
		// required int32 switch_open = 4;
		.def(&TargetConfig::switch_open, "switch_open")
		.def(&TargetConfig::set_switch_open, "set_switch_open")
		// required .Config.TargetFinishType finish_type = 5;
		.def(&TargetConfig::finish_type, "finish_type")
		.def(&TargetConfig::set_finish_type, "set_finish_type")
		// required int32 camp = 6;
		.def(&TargetConfig::camp, "camp")
		.def(&TargetConfig::set_camp, "set_camp")
		// repeated int32 param = 7;
		.def(&TargetConfig::param_size, "param_size")
		.def<decltype(message->param(0)) (TargetConfig::*)(int) const>(&TargetConfig::param, "param")
		.def<void(TargetConfig::*)(int, const decltype(message->param(0)))>(&TargetConfig::set_param, "set_param")
		.def(&TargetConfig::add_param, "add_param")
		// repeated int32 reward_item = 8;
		.def(&TargetConfig::reward_item_size, "reward_item_size")
		.def<decltype(message->reward_item(0)) (TargetConfig::*)(int) const>(&TargetConfig::reward_item, "reward_item")
		.def<void(TargetConfig::*)(int, const decltype(message->reward_item(0)))>(&TargetConfig::set_reward_item, "set_reward_item")
		.def(&TargetConfig::add_reward_item, "add_reward_item")
		// repeated int32 count = 9;
		.def(&TargetConfig::count_size, "count_size")
		.def<decltype(message->count(0)) (TargetConfig::*)(int) const>(&TargetConfig::count, "count")
		.def<void(TargetConfig::*)(int, const decltype(message->count(0)))>(&TargetConfig::set_count, "set_count")
		.def(&TargetConfig::add_count, "add_count")
		// optional int32 group = 10;
		.def(&TargetConfig::group, "group")
		.def(&TargetConfig::set_group, "set_group")
		.def(&TargetConfig::has_group, "has_group")
		.def(&TargetConfig::ByteSize, "ByteSize")
		.def(&TargetConfig::SetInitialized, "SetInitialized")
		;
	return true;
}
bool StoryStageConfig_fflua_reg(lua_State* state)
{
//for decltype
	StoryStageConfig* message(nullptr);
	message;
	ff::fflua_register_t<StoryStageConfig, ctor()>(state, "StoryStageConfig", "google::protobuf::Message")
		// required int32 mission_id = 1;
		.def(&StoryStageConfig::mission_id, "mission_id")
		.def(&StoryStageConfig::set_mission_id, "set_mission_id")
		// required int32 stage_index = 2;
		.def(&StoryStageConfig::stage_index, "stage_index")
		.def(&StoryStageConfig::set_stage_index, "set_stage_index")
		// required int32 event_type_1 = 3;
		.def(&StoryStageConfig::event_type_1, "event_type_1")
		.def(&StoryStageConfig::set_event_type_1, "set_event_type_1")
		// required int32 npc_id_1 = 4;
		.def(&StoryStageConfig::npc_id_1, "npc_id_1")
		.def(&StoryStageConfig::set_npc_id_1, "set_npc_id_1")
		// required int32 npc_side_1 = 5;
		.def(&StoryStageConfig::npc_side_1, "npc_side_1")
		.def(&StoryStageConfig::set_npc_side_1, "set_npc_side_1")
		// required int32 npc_pos_1 = 6;
		.def(&StoryStageConfig::npc_pos_1, "npc_pos_1")
		.def(&StoryStageConfig::set_npc_pos_1, "set_npc_pos_1")
		// required int32 npc_id_2 = 7;
		.def(&StoryStageConfig::npc_id_2, "npc_id_2")
		.def(&StoryStageConfig::set_npc_id_2, "set_npc_id_2")
		// required int32 npc_side_2 = 8;
		.def(&StoryStageConfig::npc_side_2, "npc_side_2")
		.def(&StoryStageConfig::set_npc_side_2, "set_npc_side_2")
		// required int32 npc_pos_2 = 9;
		.def(&StoryStageConfig::npc_pos_2, "npc_pos_2")
		.def(&StoryStageConfig::set_npc_pos_2, "set_npc_pos_2")
		.def(&StoryStageConfig::ByteSize, "ByteSize")
		.def(&StoryStageConfig::SetInitialized, "SetInitialized")
		;
	return true;
}
bool MissionConfig_fflua_regist_all(lua_State* state)
{
	MissionConfig_fflua_reg(state);
	MissionExConfig_fflua_reg(state);
	TargetConfig_fflua_reg(state);
	StoryStageConfig_fflua_reg(state);
	return true;
}
}
