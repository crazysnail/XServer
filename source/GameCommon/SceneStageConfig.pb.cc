// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneStageConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SceneStageConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Config {

namespace {

const ::google::protobuf::Descriptor* SceneStageConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneStageConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SceneStageConfig_2eproto() {
  protobuf_AddDesc_SceneStageConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SceneStageConfig.proto");
  GOOGLE_CHECK(file != NULL);
  SceneStageConfig_descriptor_ = file->message_type(0);
  static const int SceneStageConfig_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageConfig, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageConfig, min_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageConfig, pre_stages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageConfig, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageConfig, rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageConfig, refresh_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageConfig, raid_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageConfig, rush_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageConfig, normal_monsters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageConfig, bosses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageConfig, guard_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageConfig, first_drop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageConfig, camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageConfig, can_captrue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageConfig, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageConfig, can_guild_capture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageConfig, guild_capture_boss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageConfig, monster_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageConfig, max_exp_pre_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageConfig, max_gold_pre_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageConfig, avg_run_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageConfig, avg_fight_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageConfig, tax_broadcast_mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageConfig, guild_tax_broadcat_mark_),
  };
  SceneStageConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SceneStageConfig_descriptor_,
      SceneStageConfig::default_instance_,
      SceneStageConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStageConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SceneStageConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SceneStageConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SceneStageConfig_descriptor_, &SceneStageConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SceneStageConfig_2eproto() {
  delete SceneStageConfig::default_instance_;
  delete SceneStageConfig_reflection_;
}

void protobuf_AddDesc_SceneStageConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026SceneStageConfig.proto\022\006Config\"\236\004\n\020Sce"
    "neStageConfig\022\n\n\002id\030\001 \002(\005\022\014\n\004name\030\002 \002(\t\022"
    "\021\n\tmin_level\030\003 \002(\005\022\022\n\npre_stages\030\004 \003(\005\022\020"
    "\n\010scene_id\030\005 \002(\005\022\017\n\007rewards\030\006 \002(\t\022\024\n\014ref"
    "resh_time\030\007 \002(\005\022\022\n\nraid_count\030\010 \002(\005\022\022\n\nr"
    "ush_count\030\t \002(\005\022\027\n\017normal_monsters\030\n \003(\005"
    "\022\016\n\006bosses\030\013 \003(\005\022\020\n\010guard_id\030\014 \002(\005\022\022\n\nfi"
    "rst_drop\030\r \002(\005\022\014\n\004camp\030\016 \002(\005\022\023\n\013can_capt"
    "rue\030\017 \002(\005\022\r\n\005group\030\020 \002(\005\022\031\n\021can_guild_ca"
    "pture\030\021 \002(\005\022\032\n\022guild_capture_boss\030\022 \002(\005\022"
    "\022\n\nmonster_id\030\023 \002(\005\022\027\n\017max_exp_pre_min\030\024"
    " \002(\005\022\030\n\020max_gold_pre_min\030\025 \002(\005\022\024\n\014avg_ru"
    "n_time\030\026 \002(\005\022\026\n\016avg_fight_time\030\027 \002(\005\022\032\n\022"
    "tax_broadcast_mark\030\030 \002(\005\022\037\n\027guild_tax_br"
    "oadcat_mark\030\031 \002(\005", 577);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SceneStageConfig.proto", &protobuf_RegisterTypes);
  SceneStageConfig::default_instance_ = new SceneStageConfig();
  SceneStageConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SceneStageConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SceneStageConfig_2eproto {
  StaticDescriptorInitializer_SceneStageConfig_2eproto() {
    protobuf_AddDesc_SceneStageConfig_2eproto();
  }
} static_descriptor_initializer_SceneStageConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SceneStageConfig::kIdFieldNumber;
const int SceneStageConfig::kNameFieldNumber;
const int SceneStageConfig::kMinLevelFieldNumber;
const int SceneStageConfig::kPreStagesFieldNumber;
const int SceneStageConfig::kSceneIdFieldNumber;
const int SceneStageConfig::kRewardsFieldNumber;
const int SceneStageConfig::kRefreshTimeFieldNumber;
const int SceneStageConfig::kRaidCountFieldNumber;
const int SceneStageConfig::kRushCountFieldNumber;
const int SceneStageConfig::kNormalMonstersFieldNumber;
const int SceneStageConfig::kBossesFieldNumber;
const int SceneStageConfig::kGuardIdFieldNumber;
const int SceneStageConfig::kFirstDropFieldNumber;
const int SceneStageConfig::kCampFieldNumber;
const int SceneStageConfig::kCanCaptrueFieldNumber;
const int SceneStageConfig::kGroupFieldNumber;
const int SceneStageConfig::kCanGuildCaptureFieldNumber;
const int SceneStageConfig::kGuildCaptureBossFieldNumber;
const int SceneStageConfig::kMonsterIdFieldNumber;
const int SceneStageConfig::kMaxExpPreMinFieldNumber;
const int SceneStageConfig::kMaxGoldPreMinFieldNumber;
const int SceneStageConfig::kAvgRunTimeFieldNumber;
const int SceneStageConfig::kAvgFightTimeFieldNumber;
const int SceneStageConfig::kTaxBroadcastMarkFieldNumber;
const int SceneStageConfig::kGuildTaxBroadcatMarkFieldNumber;
#endif  // !_MSC_VER

SceneStageConfig::SceneStageConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SceneStageConfig::InitAsDefaultInstance() {
}

SceneStageConfig::SceneStageConfig(const SceneStageConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SceneStageConfig::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  min_level_ = 0;
  scene_id_ = 0;
  rewards_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  refresh_time_ = 0;
  raid_count_ = 0;
  rush_count_ = 0;
  guard_id_ = 0;
  first_drop_ = 0;
  camp_ = 0;
  can_captrue_ = 0;
  group_ = 0;
  can_guild_capture_ = 0;
  guild_capture_boss_ = 0;
  monster_id_ = 0;
  max_exp_pre_min_ = 0;
  max_gold_pre_min_ = 0;
  avg_run_time_ = 0;
  avg_fight_time_ = 0;
  tax_broadcast_mark_ = 0;
  guild_tax_broadcat_mark_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneStageConfig::~SceneStageConfig() {
  SharedDtor();
}

void SceneStageConfig::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (rewards_ != &::google::protobuf::internal::kEmptyString) {
    delete rewards_;
  }
  if (this != default_instance_) {
  }
}

void SceneStageConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneStageConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneStageConfig_descriptor_;
}

const SceneStageConfig& SceneStageConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneStageConfig_2eproto();
  return *default_instance_;
}

SceneStageConfig* SceneStageConfig::default_instance_ = NULL;

SceneStageConfig* SceneStageConfig::New() const {
  return new SceneStageConfig;
}

void SceneStageConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    min_level_ = 0;
    scene_id_ = 0;
    if (has_rewards()) {
      if (rewards_ != &::google::protobuf::internal::kEmptyString) {
        rewards_->clear();
      }
    }
    refresh_time_ = 0;
    raid_count_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    rush_count_ = 0;
    guard_id_ = 0;
    first_drop_ = 0;
    camp_ = 0;
    can_captrue_ = 0;
    group_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    can_guild_capture_ = 0;
    guild_capture_boss_ = 0;
    monster_id_ = 0;
    max_exp_pre_min_ = 0;
    max_gold_pre_min_ = 0;
    avg_run_time_ = 0;
    avg_fight_time_ = 0;
    tax_broadcast_mark_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    guild_tax_broadcat_mark_ = 0;
  }
  pre_stages_.Clear();
  normal_monsters_.Clear();
  bosses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SceneStageConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_min_level;
        break;
      }

      // required int32 min_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_level_)));
          set_has_min_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pre_stages;
        break;
      }

      // repeated int32 pre_stages = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pre_stages:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_pre_stages())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pre_stages())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pre_stages;
        if (input->ExpectTag(40)) goto parse_scene_id;
        break;
      }

      // required int32 scene_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_rewards;
        break;
      }

      // required string rewards = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rewards()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rewards().data(), this->rewards().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_refresh_time;
        break;
      }

      // required int32 refresh_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refresh_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refresh_time_)));
          set_has_refresh_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_raid_count;
        break;
      }

      // required int32 raid_count = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raid_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &raid_count_)));
          set_has_raid_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_rush_count;
        break;
      }

      // required int32 rush_count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rush_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rush_count_)));
          set_has_rush_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_normal_monsters;
        break;
      }

      // repeated int32 normal_monsters = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_normal_monsters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_normal_monsters())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_normal_monsters())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_normal_monsters;
        if (input->ExpectTag(88)) goto parse_bosses;
        break;
      }

      // repeated int32 bosses = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bosses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_bosses())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bosses())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_bosses;
        if (input->ExpectTag(96)) goto parse_guard_id;
        break;
      }

      // required int32 guard_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guard_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guard_id_)));
          set_has_guard_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_first_drop;
        break;
      }

      // required int32 first_drop = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_drop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_drop_)));
          set_has_first_drop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_camp;
        break;
      }

      // required int32 camp = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_)));
          set_has_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_can_captrue;
        break;
      }

      // required int32 can_captrue = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_captrue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_captrue_)));
          set_has_can_captrue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_group;
        break;
      }

      // required int32 group = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_can_guild_capture;
        break;
      }

      // required int32 can_guild_capture = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_guild_capture:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_guild_capture_)));
          set_has_can_guild_capture();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_guild_capture_boss;
        break;
      }

      // required int32 guild_capture_boss = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_capture_boss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_capture_boss_)));
          set_has_guild_capture_boss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_monster_id;
        break;
      }

      // required int32 monster_id = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monster_id_)));
          set_has_monster_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_max_exp_pre_min;
        break;
      }

      // required int32 max_exp_pre_min = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_exp_pre_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_exp_pre_min_)));
          set_has_max_exp_pre_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_max_gold_pre_min;
        break;
      }

      // required int32 max_gold_pre_min = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_gold_pre_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_gold_pre_min_)));
          set_has_max_gold_pre_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_avg_run_time;
        break;
      }

      // required int32 avg_run_time = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avg_run_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avg_run_time_)));
          set_has_avg_run_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_avg_fight_time;
        break;
      }

      // required int32 avg_fight_time = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avg_fight_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avg_fight_time_)));
          set_has_avg_fight_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_tax_broadcast_mark;
        break;
      }

      // required int32 tax_broadcast_mark = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tax_broadcast_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tax_broadcast_mark_)));
          set_has_tax_broadcast_mark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_guild_tax_broadcat_mark;
        break;
      }

      // required int32 guild_tax_broadcat_mark = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_tax_broadcat_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_tax_broadcat_mark_)));
          set_has_guild_tax_broadcat_mark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SceneStageConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required int32 min_level = 3;
  if (has_min_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->min_level(), output);
  }

  // repeated int32 pre_stages = 4;
  for (int i = 0; i < this->pre_stages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->pre_stages(i), output);
  }

  // required int32 scene_id = 5;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->scene_id(), output);
  }

  // required string rewards = 6;
  if (has_rewards()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rewards().data(), this->rewards().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->rewards(), output);
  }

  // required int32 refresh_time = 7;
  if (has_refresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->refresh_time(), output);
  }

  // required int32 raid_count = 8;
  if (has_raid_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->raid_count(), output);
  }

  // required int32 rush_count = 9;
  if (has_rush_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->rush_count(), output);
  }

  // repeated int32 normal_monsters = 10;
  for (int i = 0; i < this->normal_monsters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->normal_monsters(i), output);
  }

  // repeated int32 bosses = 11;
  for (int i = 0; i < this->bosses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->bosses(i), output);
  }

  // required int32 guard_id = 12;
  if (has_guard_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->guard_id(), output);
  }

  // required int32 first_drop = 13;
  if (has_first_drop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->first_drop(), output);
  }

  // required int32 camp = 14;
  if (has_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->camp(), output);
  }

  // required int32 can_captrue = 15;
  if (has_can_captrue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->can_captrue(), output);
  }

  // required int32 group = 16;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->group(), output);
  }

  // required int32 can_guild_capture = 17;
  if (has_can_guild_capture()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->can_guild_capture(), output);
  }

  // required int32 guild_capture_boss = 18;
  if (has_guild_capture_boss()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->guild_capture_boss(), output);
  }

  // required int32 monster_id = 19;
  if (has_monster_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->monster_id(), output);
  }

  // required int32 max_exp_pre_min = 20;
  if (has_max_exp_pre_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->max_exp_pre_min(), output);
  }

  // required int32 max_gold_pre_min = 21;
  if (has_max_gold_pre_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->max_gold_pre_min(), output);
  }

  // required int32 avg_run_time = 22;
  if (has_avg_run_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->avg_run_time(), output);
  }

  // required int32 avg_fight_time = 23;
  if (has_avg_fight_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->avg_fight_time(), output);
  }

  // required int32 tax_broadcast_mark = 24;
  if (has_tax_broadcast_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->tax_broadcast_mark(), output);
  }

  // required int32 guild_tax_broadcat_mark = 25;
  if (has_guild_tax_broadcat_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->guild_tax_broadcat_mark(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SceneStageConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required int32 min_level = 3;
  if (has_min_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->min_level(), target);
  }

  // repeated int32 pre_stages = 4;
  for (int i = 0; i < this->pre_stages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->pre_stages(i), target);
  }

  // required int32 scene_id = 5;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->scene_id(), target);
  }

  // required string rewards = 6;
  if (has_rewards()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rewards().data(), this->rewards().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->rewards(), target);
  }

  // required int32 refresh_time = 7;
  if (has_refresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->refresh_time(), target);
  }

  // required int32 raid_count = 8;
  if (has_raid_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->raid_count(), target);
  }

  // required int32 rush_count = 9;
  if (has_rush_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->rush_count(), target);
  }

  // repeated int32 normal_monsters = 10;
  for (int i = 0; i < this->normal_monsters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->normal_monsters(i), target);
  }

  // repeated int32 bosses = 11;
  for (int i = 0; i < this->bosses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->bosses(i), target);
  }

  // required int32 guard_id = 12;
  if (has_guard_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->guard_id(), target);
  }

  // required int32 first_drop = 13;
  if (has_first_drop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->first_drop(), target);
  }

  // required int32 camp = 14;
  if (has_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->camp(), target);
  }

  // required int32 can_captrue = 15;
  if (has_can_captrue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->can_captrue(), target);
  }

  // required int32 group = 16;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->group(), target);
  }

  // required int32 can_guild_capture = 17;
  if (has_can_guild_capture()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->can_guild_capture(), target);
  }

  // required int32 guild_capture_boss = 18;
  if (has_guild_capture_boss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->guild_capture_boss(), target);
  }

  // required int32 monster_id = 19;
  if (has_monster_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->monster_id(), target);
  }

  // required int32 max_exp_pre_min = 20;
  if (has_max_exp_pre_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->max_exp_pre_min(), target);
  }

  // required int32 max_gold_pre_min = 21;
  if (has_max_gold_pre_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->max_gold_pre_min(), target);
  }

  // required int32 avg_run_time = 22;
  if (has_avg_run_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->avg_run_time(), target);
  }

  // required int32 avg_fight_time = 23;
  if (has_avg_fight_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->avg_fight_time(), target);
  }

  // required int32 tax_broadcast_mark = 24;
  if (has_tax_broadcast_mark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->tax_broadcast_mark(), target);
  }

  // required int32 guild_tax_broadcat_mark = 25;
  if (has_guild_tax_broadcat_mark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->guild_tax_broadcat_mark(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SceneStageConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 min_level = 3;
    if (has_min_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_level());
    }

    // required int32 scene_id = 5;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }

    // required string rewards = 6;
    if (has_rewards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rewards());
    }

    // required int32 refresh_time = 7;
    if (has_refresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refresh_time());
    }

    // required int32 raid_count = 8;
    if (has_raid_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->raid_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 rush_count = 9;
    if (has_rush_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rush_count());
    }

    // required int32 guard_id = 12;
    if (has_guard_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guard_id());
    }

    // required int32 first_drop = 13;
    if (has_first_drop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->first_drop());
    }

    // required int32 camp = 14;
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp());
    }

    // required int32 can_captrue = 15;
    if (has_can_captrue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_captrue());
    }

    // required int32 group = 16;
    if (has_group()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 can_guild_capture = 17;
    if (has_can_guild_capture()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_guild_capture());
    }

    // required int32 guild_capture_boss = 18;
    if (has_guild_capture_boss()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_capture_boss());
    }

    // required int32 monster_id = 19;
    if (has_monster_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monster_id());
    }

    // required int32 max_exp_pre_min = 20;
    if (has_max_exp_pre_min()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_exp_pre_min());
    }

    // required int32 max_gold_pre_min = 21;
    if (has_max_gold_pre_min()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_gold_pre_min());
    }

    // required int32 avg_run_time = 22;
    if (has_avg_run_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avg_run_time());
    }

    // required int32 avg_fight_time = 23;
    if (has_avg_fight_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avg_fight_time());
    }

    // required int32 tax_broadcast_mark = 24;
    if (has_tax_broadcast_mark()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tax_broadcast_mark());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required int32 guild_tax_broadcat_mark = 25;
    if (has_guild_tax_broadcat_mark()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_tax_broadcat_mark());
    }

  }
  // repeated int32 pre_stages = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->pre_stages_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pre_stages(i));
    }
    total_size += 1 * this->pre_stages_size() + data_size;
  }

  // repeated int32 normal_monsters = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->normal_monsters_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->normal_monsters(i));
    }
    total_size += 1 * this->normal_monsters_size() + data_size;
  }

  // repeated int32 bosses = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->bosses_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bosses(i));
    }
    total_size += 1 * this->bosses_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneStageConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SceneStageConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SceneStageConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SceneStageConfig::MergeFrom(const SceneStageConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  pre_stages_.MergeFrom(from.pre_stages_);
  normal_monsters_.MergeFrom(from.normal_monsters_);
  bosses_.MergeFrom(from.bosses_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_min_level()) {
      set_min_level(from.min_level());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_rewards()) {
      set_rewards(from.rewards());
    }
    if (from.has_refresh_time()) {
      set_refresh_time(from.refresh_time());
    }
    if (from.has_raid_count()) {
      set_raid_count(from.raid_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rush_count()) {
      set_rush_count(from.rush_count());
    }
    if (from.has_guard_id()) {
      set_guard_id(from.guard_id());
    }
    if (from.has_first_drop()) {
      set_first_drop(from.first_drop());
    }
    if (from.has_camp()) {
      set_camp(from.camp());
    }
    if (from.has_can_captrue()) {
      set_can_captrue(from.can_captrue());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_can_guild_capture()) {
      set_can_guild_capture(from.can_guild_capture());
    }
    if (from.has_guild_capture_boss()) {
      set_guild_capture_boss(from.guild_capture_boss());
    }
    if (from.has_monster_id()) {
      set_monster_id(from.monster_id());
    }
    if (from.has_max_exp_pre_min()) {
      set_max_exp_pre_min(from.max_exp_pre_min());
    }
    if (from.has_max_gold_pre_min()) {
      set_max_gold_pre_min(from.max_gold_pre_min());
    }
    if (from.has_avg_run_time()) {
      set_avg_run_time(from.avg_run_time());
    }
    if (from.has_avg_fight_time()) {
      set_avg_fight_time(from.avg_fight_time());
    }
    if (from.has_tax_broadcast_mark()) {
      set_tax_broadcast_mark(from.tax_broadcast_mark());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_guild_tax_broadcat_mark()) {
      set_guild_tax_broadcat_mark(from.guild_tax_broadcat_mark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SceneStageConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SceneStageConfig::CopyFrom(const SceneStageConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SceneStageConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x01fff9f7) != 0x01fff9f7) return false;

  return true;
}

void SceneStageConfig::SetInitialized() {
  _has_bits_[0] |= 0x01fff9f7;

  return;
}

void SceneStageConfig::Swap(SceneStageConfig* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(min_level_, other->min_level_);
    pre_stages_.Swap(&other->pre_stages_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(rewards_, other->rewards_);
    std::swap(refresh_time_, other->refresh_time_);
    std::swap(raid_count_, other->raid_count_);
    std::swap(rush_count_, other->rush_count_);
    normal_monsters_.Swap(&other->normal_monsters_);
    bosses_.Swap(&other->bosses_);
    std::swap(guard_id_, other->guard_id_);
    std::swap(first_drop_, other->first_drop_);
    std::swap(camp_, other->camp_);
    std::swap(can_captrue_, other->can_captrue_);
    std::swap(group_, other->group_);
    std::swap(can_guild_capture_, other->can_guild_capture_);
    std::swap(guild_capture_boss_, other->guild_capture_boss_);
    std::swap(monster_id_, other->monster_id_);
    std::swap(max_exp_pre_min_, other->max_exp_pre_min_);
    std::swap(max_gold_pre_min_, other->max_gold_pre_min_);
    std::swap(avg_run_time_, other->avg_run_time_);
    std::swap(avg_fight_time_, other->avg_fight_time_);
    std::swap(tax_broadcast_mark_, other->tax_broadcast_mark_);
    std::swap(guild_tax_broadcat_mark_, other->guild_tax_broadcat_mark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SceneStageConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneStageConfig_descriptor_;
  metadata.reflection = SceneStageConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config

// @@protoc_insertion_point(global_scope)
