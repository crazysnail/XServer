// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ItemAndEquip.proto
#include "ItemAndEquip.pb.h"
#include "ItemAndEquip.proto.fflua.h"
namespace Packet {
bool Container_fflua_reg(lua_State* state)
{
//for decltype
	Container* message(nullptr);
	message;
	ff::fflua_register_t<Container, ctor()>(state, "Container", "google::protobuf::Message")
		// required fixed64 guid = 1;
		.def(&Container::guid, "guid")
		.def(&Container::set_guid, "set_guid")
		// required fixed64 player_guid = 2;
		.def(&Container::player_guid, "player_guid")
		.def(&Container::set_player_guid, "set_player_guid")
		// required int32 max_block = 3;
		.def(&Container::max_block, "max_block")
		.def(&Container::set_max_block, "set_max_block")
		// required int32 crystal_opened_block = 4;
		.def(&Container::crystal_opened_block, "crystal_opened_block")
		.def(&Container::set_crystal_opened_block, "set_crystal_opened_block")
		// required int32 item_opened_block = 5;
		.def(&Container::item_opened_block, "item_opened_block")
		.def(&Container::set_item_opened_block, "set_item_opened_block")
		// required .Packet.ContainerType type = 6;
		.def(&Container::type, "type")
		.def(&Container::set_type, "set_type")
		.def(&Container::ByteSize, "ByteSize")
		.def(&Container::SetInitialized, "SetInitialized")
		;
	return true;
}
bool NormalItem_fflua_reg(lua_State* state)
{
//for decltype
	NormalItem* message(nullptr);
	message;
	ff::fflua_register_t<NormalItem, ctor()>(state, "NormalItem", "google::protobuf::Message")
		// required fixed64 guid = 1;
		.def(&NormalItem::guid, "guid")
		.def(&NormalItem::set_guid, "set_guid")
		// required fixed64 container_guid = 2;
		.def(&NormalItem::container_guid, "container_guid")
		.def(&NormalItem::set_container_guid, "set_container_guid")
		// required int32 config_id = 3;
		.def(&NormalItem::config_id, "config_id")
		.def(&NormalItem::set_config_id, "set_config_id")
		// required int32 count = 4;
		.def(&NormalItem::count, "count")
		.def(&NormalItem::set_count, "set_count")
		// required int32 param = 5;
		.def(&NormalItem::param, "param")
		.def(&NormalItem::set_param, "set_param")
		// required int32 cool_down = 6;
		.def(&NormalItem::cool_down, "cool_down")
		.def(&NormalItem::set_cool_down, "set_cool_down")
		// required int32 life_time = 7;
		.def(&NormalItem::life_time, "life_time")
		.def(&NormalItem::set_life_time, "set_life_time")
		// required int32 lock_flag = 8 [default = 0];
		.def(&NormalItem::lock_flag, "lock_flag")
		.def(&NormalItem::set_lock_flag, "set_lock_flag")
		.def(&NormalItem::ByteSize, "ByteSize")
		.def(&NormalItem::SetInitialized, "SetInitialized")
		;
	return true;
}
bool EquipItem_fflua_reg(lua_State* state)
{
//for decltype
	EquipItem* message(nullptr);
	message;
	ff::fflua_register_t<EquipItem, ctor()>(state, "EquipItem", "google::protobuf::Message")
		// required fixed64 guid = 1;
		.def(&EquipItem::guid, "guid")
		.def(&EquipItem::set_guid, "set_guid")
		// required fixed64 container_guid = 2;
		.def(&EquipItem::container_guid, "container_guid")
		.def(&EquipItem::set_container_guid, "set_container_guid")
		// required int32 config_id = 3;
		.def(&EquipItem::config_id, "config_id")
		.def(&EquipItem::set_config_id, "set_config_id")
		// required float durable = 4;
		.def(&EquipItem::durable, "durable")
		.def(&EquipItem::set_durable, "set_durable")
		// required int32 enhence_level = 5;
		.def(&EquipItem::enhence_level, "enhence_level")
		.def(&EquipItem::set_enhence_level, "set_enhence_level")
		// repeated .Packet.EquipItem.EquipEnchant enchants = 6;
		.def(&EquipItem::enchants_size, "enchants_size")
		.def<decltype(message->enchants(0)) (EquipItem::*)(int) const>(&EquipItem::enchants, "enchants")
		.def<decltype(message->mutable_enchants(0)) (EquipItem::*)(int)>(&EquipItem::mutable_enchants, "mutable_enchants")
		.def(&EquipItem::add_enchants, "add_enchants")
		// repeated int32 gems = 7;
		.def(&EquipItem::gems_size, "gems_size")
		.def<decltype(message->gems(0)) (EquipItem::*)(int) const>(&EquipItem::gems, "gems")
		.def<void(EquipItem::*)(int, const decltype(message->gems(0)))>(&EquipItem::set_gems, "set_gems")
		.def(&EquipItem::add_gems, "add_gems")
		// required fixed64 actor_guid = 8;
		.def(&EquipItem::actor_guid, "actor_guid")
		.def(&EquipItem::set_actor_guid, "set_actor_guid")
		// required .Config.EquipmentSlot slot = 9;
		.def(&EquipItem::slot, "slot")
		.def(&EquipItem::set_slot, "set_slot")
		// required int32 magical_res_id = 10 [default = -1];
		.def(&EquipItem::magical_res_id, "magical_res_id")
		.def(&EquipItem::set_magical_res_id, "set_magical_res_id")
		// required int32 lock_flag = 11 [default = 0];
		.def(&EquipItem::lock_flag, "lock_flag")
		.def(&EquipItem::set_lock_flag, "set_lock_flag")
		// required fixed64 bind_actor_guid = 12;
		.def(&EquipItem::bind_actor_guid, "bind_actor_guid")
		.def(&EquipItem::set_bind_actor_guid, "set_bind_actor_guid")
		// required int32 score = 13;
		.def(&EquipItem::score, "score")
		.def(&EquipItem::set_score, "set_score")
		.def(&EquipItem::ByteSize, "ByteSize")
		.def(&EquipItem::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GemItem_fflua_reg(lua_State* state)
{
//for decltype
	GemItem* message(nullptr);
	message;
	ff::fflua_register_t<GemItem, ctor()>(state, "GemItem", "google::protobuf::Message")
		// required fixed64 guid = 1;
		.def(&GemItem::guid, "guid")
		.def(&GemItem::set_guid, "set_guid")
		// required fixed64 container_guid = 2;
		.def(&GemItem::container_guid, "container_guid")
		.def(&GemItem::set_container_guid, "set_container_guid")
		// required int32 config_id = 3;
		.def(&GemItem::config_id, "config_id")
		.def(&GemItem::set_config_id, "set_config_id")
		// required fixed64 equip_guid = 4;
		.def(&GemItem::equip_guid, "equip_guid")
		.def(&GemItem::set_equip_guid, "set_equip_guid")
		// required int32 count = 5;
		.def(&GemItem::count, "count")
		.def(&GemItem::set_count, "set_count")
		// required int32 lock_flag = 6 [default = 0];
		.def(&GemItem::lock_flag, "lock_flag")
		.def(&GemItem::set_lock_flag, "set_lock_flag")
		.def(&GemItem::ByteSize, "ByteSize")
		.def(&GemItem::SetInitialized, "SetInitialized")
		;
	return true;
}
bool ClientItemInfo_fflua_reg(lua_State* state)
{
//for decltype
	ClientItemInfo* message(nullptr);
	message;
	ff::fflua_register_t<ClientItemInfo, ctor()>(state, "ClientItemInfo", "google::protobuf::Message")
		// optional .Packet.EquipItem equip_item = 1;
		.def(&ClientItemInfo::equip_item, "equip_item")
		.def(&ClientItemInfo::mutable_equip_item, "mutable_equip_item")
		.def(&ClientItemInfo::has_equip_item, "has_equip_item")
		// optional .Packet.NormalItem normal_item = 2;
		.def(&ClientItemInfo::normal_item, "normal_item")
		.def(&ClientItemInfo::mutable_normal_item, "mutable_normal_item")
		.def(&ClientItemInfo::has_normal_item, "has_normal_item")
		// optional .Packet.GemItem gem_item = 3;
		.def(&ClientItemInfo::gem_item, "gem_item")
		.def(&ClientItemInfo::mutable_gem_item, "mutable_gem_item")
		.def(&ClientItemInfo::has_gem_item, "has_gem_item")
		.def(&ClientItemInfo::ByteSize, "ByteSize")
		.def(&ClientItemInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool MessageHyperItemInfo_fflua_reg(lua_State* state)
{
//for decltype
	MessageHyperItemInfo* message(nullptr);
	message;
	ff::fflua_register_t<MessageHyperItemInfo, ctor()>(state, "MessageHyperItemInfo", "google::protobuf::Message")
		// repeated .Packet.ClientItemInfo iteminfo = 1;
		.def(&MessageHyperItemInfo::iteminfo_size, "iteminfo_size")
		.def<decltype(message->iteminfo(0)) (MessageHyperItemInfo::*)(int) const>(&MessageHyperItemInfo::iteminfo, "iteminfo")
		.def<decltype(message->mutable_iteminfo(0)) (MessageHyperItemInfo::*)(int)>(&MessageHyperItemInfo::mutable_iteminfo, "mutable_iteminfo")
		.def(&MessageHyperItemInfo::add_iteminfo, "add_iteminfo")
		.def(&MessageHyperItemInfo::ByteSize, "ByteSize")
		.def(&MessageHyperItemInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool PlayerContainerRequest_fflua_reg(lua_State* state)
{
//for decltype
	PlayerContainerRequest* message(nullptr);
	message;
	ff::fflua_register_t<PlayerContainerRequest, ctor()>(state, "PlayerContainerRequest", "google::protobuf::Message")
		// required .Packet.ContainerType container_type = 1;
		.def(&PlayerContainerRequest::container_type, "container_type")
		.def(&PlayerContainerRequest::set_container_type, "set_container_type")
		.def(&PlayerContainerRequest::ByteSize, "ByteSize")
		.def(&PlayerContainerRequest::SetInitialized, "SetInitialized")
		;
	return true;
}
bool PlayerContainerReply_fflua_reg(lua_State* state)
{
//for decltype
	PlayerContainerReply* message(nullptr);
	message;
	ff::fflua_register_t<PlayerContainerReply, ctor()>(state, "PlayerContainerReply", "google::protobuf::Message")
		// required .Packet.ContainerType container_type = 1;
		.def(&PlayerContainerReply::container_type, "container_type")
		.def(&PlayerContainerReply::set_container_type, "set_container_type")
		// repeated .Packet.ClientItemInfo items = 2;
		.def(&PlayerContainerReply::items_size, "items_size")
		.def<decltype(message->items(0)) (PlayerContainerReply::*)(int) const>(&PlayerContainerReply::items, "items")
		.def<decltype(message->mutable_items(0)) (PlayerContainerReply::*)(int)>(&PlayerContainerReply::mutable_items, "mutable_items")
		.def(&PlayerContainerReply::add_items, "add_items")
		// required int32 max_block = 3;
		.def(&PlayerContainerReply::max_block, "max_block")
		.def(&PlayerContainerReply::set_max_block, "set_max_block")
		.def(&PlayerContainerReply::ByteSize, "ByteSize")
		.def(&PlayerContainerReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool PlayerContainerAddItemNotify_fflua_reg(lua_State* state)
{
//for decltype
	PlayerContainerAddItemNotify* message(nullptr);
	message;
	ff::fflua_register_t<PlayerContainerAddItemNotify, ctor()>(state, "PlayerContainerAddItemNotify", "google::protobuf::Message")
		// required .Packet.ContainerType container_type = 1;
		.def(&PlayerContainerAddItemNotify::container_type, "container_type")
		.def(&PlayerContainerAddItemNotify::set_container_type, "set_container_type")
		// repeated .Packet.ClientItemInfo items = 2;
		.def(&PlayerContainerAddItemNotify::items_size, "items_size")
		.def<decltype(message->items(0)) (PlayerContainerAddItemNotify::*)(int) const>(&PlayerContainerAddItemNotify::items, "items")
		.def<decltype(message->mutable_items(0)) (PlayerContainerAddItemNotify::*)(int)>(&PlayerContainerAddItemNotify::mutable_items, "mutable_items")
		.def(&PlayerContainerAddItemNotify::add_items, "add_items")
		.def(&PlayerContainerAddItemNotify::ByteSize, "ByteSize")
		.def(&PlayerContainerAddItemNotify::SetInitialized, "SetInitialized")
		;
	return true;
}
bool PlayerContainerDelItemNotify_fflua_reg(lua_State* state)
{
//for decltype
	PlayerContainerDelItemNotify* message(nullptr);
	message;
	ff::fflua_register_t<PlayerContainerDelItemNotify, ctor()>(state, "PlayerContainerDelItemNotify", "google::protobuf::Message")
		// required .Packet.ContainerType container_type = 1;
		.def(&PlayerContainerDelItemNotify::container_type, "container_type")
		.def(&PlayerContainerDelItemNotify::set_container_type, "set_container_type")
		// repeated fixed64 guids = 2;
		.def(&PlayerContainerDelItemNotify::guids_size, "guids_size")
		.def<decltype(message->guids(0)) (PlayerContainerDelItemNotify::*)(int) const>(&PlayerContainerDelItemNotify::guids, "guids")
		.def<void(PlayerContainerDelItemNotify::*)(int, const decltype(message->guids(0)))>(&PlayerContainerDelItemNotify::set_guids, "set_guids")
		.def(&PlayerContainerDelItemNotify::add_guids, "add_guids")
		.def(&PlayerContainerDelItemNotify::ByteSize, "ByteSize")
		.def(&PlayerContainerDelItemNotify::SetInitialized, "SetInitialized")
		;
	return true;
}
bool PlayerContainerRefreshItemNotify_fflua_reg(lua_State* state)
{
//for decltype
	PlayerContainerRefreshItemNotify* message(nullptr);
	message;
	ff::fflua_register_t<PlayerContainerRefreshItemNotify, ctor()>(state, "PlayerContainerRefreshItemNotify", "google::protobuf::Message")
		// required .Packet.ContainerType container_type = 1;
		.def(&PlayerContainerRefreshItemNotify::container_type, "container_type")
		.def(&PlayerContainerRefreshItemNotify::set_container_type, "set_container_type")
		// repeated .Packet.ClientItemInfo items = 2;
		.def(&PlayerContainerRefreshItemNotify::items_size, "items_size")
		.def<decltype(message->items(0)) (PlayerContainerRefreshItemNotify::*)(int) const>(&PlayerContainerRefreshItemNotify::items, "items")
		.def<decltype(message->mutable_items(0)) (PlayerContainerRefreshItemNotify::*)(int)>(&PlayerContainerRefreshItemNotify::mutable_items, "mutable_items")
		.def(&PlayerContainerRefreshItemNotify::add_items, "add_items")
		// optional .Packet.ResultOption option = 3;
		.def(&PlayerContainerRefreshItemNotify::option, "option")
		.def(&PlayerContainerRefreshItemNotify::set_option, "set_option")
		.def(&PlayerContainerRefreshItemNotify::has_option, "has_option")
		.def(&PlayerContainerRefreshItemNotify::ByteSize, "ByteSize")
		.def(&PlayerContainerRefreshItemNotify::SetInitialized, "SetInitialized")
		;
	return true;
}
bool ActorAddEquipRequest_fflua_reg(lua_State* state)
{
//for decltype
	ActorAddEquipRequest* message(nullptr);
	message;
	ff::fflua_register_t<ActorAddEquipRequest, ctor()>(state, "ActorAddEquipRequest", "google::protobuf::Message")
		// required fixed64 actor_guid = 1;
		.def(&ActorAddEquipRequest::actor_guid, "actor_guid")
		.def(&ActorAddEquipRequest::set_actor_guid, "set_actor_guid")
		// repeated fixed64 equip_guid = 2;
		.def(&ActorAddEquipRequest::equip_guid_size, "equip_guid_size")
		.def<decltype(message->equip_guid(0)) (ActorAddEquipRequest::*)(int) const>(&ActorAddEquipRequest::equip_guid, "equip_guid")
		.def<void(ActorAddEquipRequest::*)(int, const decltype(message->equip_guid(0)))>(&ActorAddEquipRequest::set_equip_guid, "set_equip_guid")
		.def(&ActorAddEquipRequest::add_equip_guid, "add_equip_guid")
		// repeated .Config.EquipmentSlot slot = 3;
		.def(&ActorAddEquipRequest::slot_size, "slot_size")
		.def<decltype(message->slot(0)) (ActorAddEquipRequest::*)(int) const>(&ActorAddEquipRequest::slot, "slot")
		.def(&ActorAddEquipRequest::set_slot, "set_slot")
		.def(&ActorAddEquipRequest::add_slot, "add_slot")
		// repeated bool inherit = 4;
		.def(&ActorAddEquipRequest::inherit_size, "inherit_size")
		.def<decltype(message->inherit(0)) (ActorAddEquipRequest::*)(int) const>(&ActorAddEquipRequest::inherit, "inherit")
		.def<void(ActorAddEquipRequest::*)(int, const decltype(message->inherit(0)))>(&ActorAddEquipRequest::set_inherit, "set_inherit")
		.def(&ActorAddEquipRequest::add_inherit, "add_inherit")
		.def(&ActorAddEquipRequest::ByteSize, "ByteSize")
		.def(&ActorAddEquipRequest::SetInitialized, "SetInitialized")
		;
	return true;
}
bool ActorDelEquipRequest_fflua_reg(lua_State* state)
{
//for decltype
	ActorDelEquipRequest* message(nullptr);
	message;
	ff::fflua_register_t<ActorDelEquipRequest, ctor()>(state, "ActorDelEquipRequest", "google::protobuf::Message")
		// required fixed64 equip_guid = 1;
		.def(&ActorDelEquipRequest::equip_guid, "equip_guid")
		.def(&ActorDelEquipRequest::set_equip_guid, "set_equip_guid")
		.def(&ActorDelEquipRequest::ByteSize, "ByteSize")
		.def(&ActorDelEquipRequest::SetInitialized, "SetInitialized")
		;
	return true;
}
bool Market_fflua_reg(lua_State* state)
{
//for decltype
	Market* message(nullptr);
	message;
	ff::fflua_register_t<Market, ctor()>(state, "Market", "google::protobuf::Message")
		// required fixed64 guid = 1;
		.def(&Market::guid, "guid")
		.def(&Market::set_guid, "set_guid")
		// required fixed64 player_guid = 2;
		.def(&Market::player_guid, "player_guid")
		.def(&Market::set_player_guid, "set_player_guid")
		// required fixed64 refresh_cd = 3;
		.def(&Market::refresh_cd, "refresh_cd")
		.def(&Market::set_refresh_cd, "set_refresh_cd")
		// required .Config.MarketType market_type = 4;
		.def(&Market::market_type, "market_type")
		.def(&Market::set_market_type, "set_market_type")
		// required string market_items = 5;
		.def(&Market::market_items, "market_items")
		.def<void (Market::*)(const std::string&)>(&Market::set_market_items, "set_market_items")
		// required string buys_count = 6;
		.def(&Market::buys_count, "buys_count")
		.def<void (Market::*)(const std::string&)>(&Market::set_buys_count, "set_buys_count")
		.def(&Market::ByteSize, "ByteSize")
		.def(&Market::SetInitialized, "SetInitialized")
		;
	return true;
}
bool PlayerMarketReply_fflua_reg(lua_State* state)
{
//for decltype
	PlayerMarketReply* message(nullptr);
	message;
	ff::fflua_register_t<PlayerMarketReply, ctor()>(state, "PlayerMarketReply", "google::protobuf::Message")
		// required .Config.MarketType market_type = 1;
		.def(&PlayerMarketReply::market_type, "market_type")
		.def(&PlayerMarketReply::set_market_type, "set_market_type")
		// repeated int32 market_items = 2;
		.def(&PlayerMarketReply::market_items_size, "market_items_size")
		.def<decltype(message->market_items(0)) (PlayerMarketReply::*)(int) const>(&PlayerMarketReply::market_items, "market_items")
		.def<void(PlayerMarketReply::*)(int, const decltype(message->market_items(0)))>(&PlayerMarketReply::set_market_items, "set_market_items")
		.def(&PlayerMarketReply::add_market_items, "add_market_items")
		// repeated int32 buy_counts = 3;
		.def(&PlayerMarketReply::buy_counts_size, "buy_counts_size")
		.def<decltype(message->buy_counts(0)) (PlayerMarketReply::*)(int) const>(&PlayerMarketReply::buy_counts, "buy_counts")
		.def<void(PlayerMarketReply::*)(int, const decltype(message->buy_counts(0)))>(&PlayerMarketReply::set_buy_counts, "set_buy_counts")
		.def(&PlayerMarketReply::add_buy_counts, "add_buy_counts")
		// required fixed64 refresh_cd = 4;
		.def(&PlayerMarketReply::refresh_cd, "refresh_cd")
		.def(&PlayerMarketReply::set_refresh_cd, "set_refresh_cd")
		.def(&PlayerMarketReply::ByteSize, "ByteSize")
		.def(&PlayerMarketReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool UpdatePlayerMarketItem_fflua_reg(lua_State* state)
{
//for decltype
	UpdatePlayerMarketItem* message(nullptr);
	message;
	ff::fflua_register_t<UpdatePlayerMarketItem, ctor()>(state, "UpdatePlayerMarketItem", "google::protobuf::Message")
		// required .Config.MarketType market_type = 1;
		.def(&UpdatePlayerMarketItem::market_type, "market_type")
		.def(&UpdatePlayerMarketItem::set_market_type, "set_market_type")
		// required int32 market_item_id = 2;
		.def(&UpdatePlayerMarketItem::market_item_id, "market_item_id")
		.def(&UpdatePlayerMarketItem::set_market_item_id, "set_market_item_id")
		// required int32 buy_count = 3;
		.def(&UpdatePlayerMarketItem::buy_count, "buy_count")
		.def(&UpdatePlayerMarketItem::set_buy_count, "set_buy_count")
		.def(&UpdatePlayerMarketItem::ByteSize, "ByteSize")
		.def(&UpdatePlayerMarketItem::SetInitialized, "SetInitialized")
		;
	return true;
}
bool UpdateArrangeInfoReply_fflua_reg(lua_State* state)
{
//for decltype
	UpdateArrangeInfoReply* message(nullptr);
	message;
	ff::fflua_register_t<UpdateArrangeInfoReply, ctor()>(state, "UpdateArrangeInfoReply", "google::protobuf::Message")
		// repeated fixed64 items = 1;
		.def(&UpdateArrangeInfoReply::items_size, "items_size")
		.def<decltype(message->items(0)) (UpdateArrangeInfoReply::*)(int) const>(&UpdateArrangeInfoReply::items, "items")
		.def<void(UpdateArrangeInfoReply::*)(int, const decltype(message->items(0)))>(&UpdateArrangeInfoReply::set_items, "set_items")
		.def(&UpdateArrangeInfoReply::add_items, "add_items")
		// repeated fixed64 players = 2;
		.def(&UpdateArrangeInfoReply::players_size, "players_size")
		.def<decltype(message->players(0)) (UpdateArrangeInfoReply::*)(int) const>(&UpdateArrangeInfoReply::players, "players")
		.def<void(UpdateArrangeInfoReply::*)(int, const decltype(message->players(0)))>(&UpdateArrangeInfoReply::set_players, "set_players")
		.def(&UpdateArrangeInfoReply::add_players, "add_players")
		// required int32 second = 3;
		.def(&UpdateArrangeInfoReply::second, "second")
		.def(&UpdateArrangeInfoReply::set_second, "set_second")
		// required .Packet.ArrangeType at_type = 4;
		.def(&UpdateArrangeInfoReply::at_type, "at_type")
		.def(&UpdateArrangeInfoReply::set_at_type, "set_at_type")
		.def(&UpdateArrangeInfoReply::ByteSize, "ByteSize")
		.def(&UpdateArrangeInfoReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool MoveItemRequest_fflua_reg(lua_State* state)
{
//for decltype
	MoveItemRequest* message(nullptr);
	message;
	ff::fflua_register_t<MoveItemRequest, ctor()>(state, "MoveItemRequest", "google::protobuf::Message")
		// required .Packet.ContainerType src_container = 1;
		.def(&MoveItemRequest::src_container, "src_container")
		.def(&MoveItemRequest::set_src_container, "set_src_container")
		// required .Packet.ContainerType des_container = 2;
		.def(&MoveItemRequest::des_container, "des_container")
		.def(&MoveItemRequest::set_des_container, "set_des_container")
		// required fixed64 item_guid = 3;
		.def(&MoveItemRequest::item_guid, "item_guid")
		.def(&MoveItemRequest::set_item_guid, "set_item_guid")
		.def(&MoveItemRequest::ByteSize, "ByteSize")
		.def(&MoveItemRequest::SetInitialized, "SetInitialized")
		;
	return true;
}
bool ExtendContainerRequest_fflua_reg(lua_State* state)
{
//for decltype
	ExtendContainerRequest* message(nullptr);
	message;
	ff::fflua_register_t<ExtendContainerRequest, ctor()>(state, "ExtendContainerRequest", "google::protobuf::Message")
		// required .Packet.ContainerType src_container = 1;
		.def(&ExtendContainerRequest::src_container, "src_container")
		.def(&ExtendContainerRequest::set_src_container, "set_src_container")
		// required int32 count = 2;
		.def(&ExtendContainerRequest::count, "count")
		.def(&ExtendContainerRequest::set_count, "set_count")
		.def(&ExtendContainerRequest::ByteSize, "ByteSize")
		.def(&ExtendContainerRequest::SetInitialized, "SetInitialized")
		;
	return true;
}
bool NotifyItemItem_fflua_reg(lua_State* state)
{
//for decltype
	NotifyItemItem* message(nullptr);
	message;
	ff::fflua_register_t<NotifyItemItem, ctor()>(state, "NotifyItemItem", "google::protobuf::Message")
		// required int32 config_id = 1;
		.def(&NotifyItemItem::config_id, "config_id")
		.def(&NotifyItemItem::set_config_id, "set_config_id")
		// required int32 amount = 2;
		.def(&NotifyItemItem::amount, "amount")
		.def(&NotifyItemItem::set_amount, "set_amount")
		// required int32 ud = 3;
		.def(&NotifyItemItem::ud, "ud")
		.def(&NotifyItemItem::set_ud, "set_ud")
		.def(&NotifyItemItem::ByteSize, "ByteSize")
		.def(&NotifyItemItem::SetInitialized, "SetInitialized")
		;
	return true;
}
bool StatisticsResult_fflua_reg(lua_State* state)
{
//for decltype
	StatisticsResult* message(nullptr);
	message;
	ff::fflua_register_t<StatisticsResult, ctor()>(state, "StatisticsResult", "google::protobuf::Message")
		// repeated .Packet.NotifyItemItem item = 1;
		.def(&StatisticsResult::item_size, "item_size")
		.def<decltype(message->item(0)) (StatisticsResult::*)(int) const>(&StatisticsResult::item, "item")
		.def<decltype(message->mutable_item(0)) (StatisticsResult::*)(int)>(&StatisticsResult::mutable_item, "mutable_item")
		.def(&StatisticsResult::add_item, "add_item")
		// required int32 statistics = 2;
		.def(&StatisticsResult::statistics, "statistics")
		.def(&StatisticsResult::set_statistics, "set_statistics")
		.def(&StatisticsResult::ByteSize, "ByteSize")
		.def(&StatisticsResult::SetInitialized, "SetInitialized")
		;
	return true;
}
bool NotifyItemList_fflua_reg(lua_State* state)
{
//for decltype
	NotifyItemList* message(nullptr);
	message;
	ff::fflua_register_t<NotifyItemList, ctor()>(state, "NotifyItemList", "google::protobuf::Message")
		// repeated .Packet.NotifyItemItem item = 1;
		.def(&NotifyItemList::item_size, "item_size")
		.def<decltype(message->item(0)) (NotifyItemList::*)(int) const>(&NotifyItemList::item, "item")
		.def<decltype(message->mutable_item(0)) (NotifyItemList::*)(int)>(&NotifyItemList::mutable_item, "mutable_item")
		.def(&NotifyItemList::add_item, "add_item")
		// required .Config.ItemAddLogType add_type = 2;
		.def(&NotifyItemList::add_type, "add_type")
		.def(&NotifyItemList::set_add_type, "set_add_type")
		// required fixed64 source_id = 3;
		.def(&NotifyItemList::source_id, "source_id")
		.def(&NotifyItemList::set_source_id, "set_source_id")
		.def(&NotifyItemList::ByteSize, "ByteSize")
		.def(&NotifyItemList::SetInitialized, "SetInitialized")
		;
	return true;
}
bool ItemAndEquip_fflua_regist_all(lua_State* state)
{
	Container_fflua_reg(state);
	NormalItem_fflua_reg(state);
	EquipItem_fflua_reg(state);
	GemItem_fflua_reg(state);
	ClientItemInfo_fflua_reg(state);
	MessageHyperItemInfo_fflua_reg(state);
	PlayerContainerRequest_fflua_reg(state);
	PlayerContainerReply_fflua_reg(state);
	PlayerContainerAddItemNotify_fflua_reg(state);
	PlayerContainerDelItemNotify_fflua_reg(state);
	PlayerContainerRefreshItemNotify_fflua_reg(state);
	ActorAddEquipRequest_fflua_reg(state);
	ActorDelEquipRequest_fflua_reg(state);
	Market_fflua_reg(state);
	PlayerMarketReply_fflua_reg(state);
	UpdatePlayerMarketItem_fflua_reg(state);
	UpdateArrangeInfoReply_fflua_reg(state);
	MoveItemRequest_fflua_reg(state);
	ExtendContainerRequest_fflua_reg(state);
	NotifyItemItem_fflua_reg(state);
	StatisticsResult_fflua_reg(state);
	NotifyItemList_fflua_reg(state);
	return true;
}
}
