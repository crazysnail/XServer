// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HeroFragment.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "HeroFragment.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Packet {

namespace {

const ::google::protobuf::Descriptor* FragmentToHeroReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FragmentToHeroReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FragmentToHeroReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FragmentToHeroReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FragmentToHeroReply_Result_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_HeroFragment_2eproto() {
  protobuf_AddDesc_HeroFragment_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "HeroFragment.proto");
  GOOGLE_CHECK(file != NULL);
  FragmentToHeroReq_descriptor_ = file->message_type(0);
  static const int FragmentToHeroReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FragmentToHeroReq, item_guid_),
  };
  FragmentToHeroReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FragmentToHeroReq_descriptor_,
      FragmentToHeroReq::default_instance_,
      FragmentToHeroReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FragmentToHeroReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FragmentToHeroReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FragmentToHeroReq));
  FragmentToHeroReply_descriptor_ = file->message_type(1);
  static const int FragmentToHeroReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FragmentToHeroReply, req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FragmentToHeroReply, result_),
  };
  FragmentToHeroReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FragmentToHeroReply_descriptor_,
      FragmentToHeroReply::default_instance_,
      FragmentToHeroReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FragmentToHeroReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FragmentToHeroReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FragmentToHeroReply));
  FragmentToHeroReply_Result_descriptor_ = FragmentToHeroReply_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_HeroFragment_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FragmentToHeroReq_descriptor_, &FragmentToHeroReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FragmentToHeroReply_descriptor_, &FragmentToHeroReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_HeroFragment_2eproto() {
  delete FragmentToHeroReq::default_instance_;
  delete FragmentToHeroReq_reflection_;
  delete FragmentToHeroReply::default_instance_;
  delete FragmentToHeroReply_reflection_;
}

void protobuf_AddDesc_HeroFragment_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022HeroFragment.proto\022\006Packet\"&\n\021Fragment"
    "ToHeroReq\022\021\n\titem_guid\030\001 \002(\006\"\276\001\n\023Fragmen"
    "tToHeroReply\022&\n\003req\030\001 \002(\0132\031.Packet.Fragm"
    "entToHeroReq\0222\n\006result\030\002 \002(\0162\".Packet.Fr"
    "agmentToHeroReply.Result\"K\n\006Result\022\013\n\007SU"
    "CCESS\020\001\022\027\n\023NOT_ENOUGH_FRAGMENT\020\002\022\033\n\027ALRE"
    "ADY_OWN_TARGET_HERO\020\003", 261);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "HeroFragment.proto", &protobuf_RegisterTypes);
  FragmentToHeroReq::default_instance_ = new FragmentToHeroReq();
  FragmentToHeroReply::default_instance_ = new FragmentToHeroReply();
  FragmentToHeroReq::default_instance_->InitAsDefaultInstance();
  FragmentToHeroReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_HeroFragment_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_HeroFragment_2eproto {
  StaticDescriptorInitializer_HeroFragment_2eproto() {
    protobuf_AddDesc_HeroFragment_2eproto();
  }
} static_descriptor_initializer_HeroFragment_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FragmentToHeroReq::kItemGuidFieldNumber;
#endif  // !_MSC_VER

FragmentToHeroReq::FragmentToHeroReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FragmentToHeroReq::InitAsDefaultInstance() {
}

FragmentToHeroReq::FragmentToHeroReq(const FragmentToHeroReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FragmentToHeroReq::SharedCtor() {
  _cached_size_ = 0;
  item_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FragmentToHeroReq::~FragmentToHeroReq() {
  SharedDtor();
}

void FragmentToHeroReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FragmentToHeroReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FragmentToHeroReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FragmentToHeroReq_descriptor_;
}

const FragmentToHeroReq& FragmentToHeroReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HeroFragment_2eproto();
  return *default_instance_;
}

FragmentToHeroReq* FragmentToHeroReq::default_instance_ = NULL;

FragmentToHeroReq* FragmentToHeroReq::New() const {
  return new FragmentToHeroReq;
}

void FragmentToHeroReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool FragmentToHeroReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 item_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &item_guid_)));
          set_has_item_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void FragmentToHeroReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 item_guid = 1;
  if (has_item_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->item_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FragmentToHeroReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 item_guid = 1;
  if (has_item_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->item_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FragmentToHeroReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 item_guid = 1;
    if (has_item_guid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FragmentToHeroReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FragmentToHeroReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FragmentToHeroReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void FragmentToHeroReq::MergeFrom(const FragmentToHeroReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_guid()) {
      set_item_guid(from.item_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void FragmentToHeroReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void FragmentToHeroReq::CopyFrom(const FragmentToHeroReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool FragmentToHeroReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FragmentToHeroReq::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void FragmentToHeroReq::Swap(FragmentToHeroReq* other) {
  if (other != this) {
    std::swap(item_guid_, other->item_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata FragmentToHeroReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FragmentToHeroReq_descriptor_;
  metadata.reflection = FragmentToHeroReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* FragmentToHeroReply_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FragmentToHeroReply_Result_descriptor_;
}
bool FragmentToHeroReply_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FragmentToHeroReply_Result FragmentToHeroReply::SUCCESS;
const FragmentToHeroReply_Result FragmentToHeroReply::NOT_ENOUGH_FRAGMENT;
const FragmentToHeroReply_Result FragmentToHeroReply::ALREADY_OWN_TARGET_HERO;
const FragmentToHeroReply_Result FragmentToHeroReply::Result_MIN;
const FragmentToHeroReply_Result FragmentToHeroReply::Result_MAX;
const int FragmentToHeroReply::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FragmentToHeroReply::kReqFieldNumber;
const int FragmentToHeroReply::kResultFieldNumber;
#endif  // !_MSC_VER

FragmentToHeroReply::FragmentToHeroReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FragmentToHeroReply::InitAsDefaultInstance() {
  req_ = const_cast< ::Packet::FragmentToHeroReq*>(&::Packet::FragmentToHeroReq::default_instance());
}

FragmentToHeroReply::FragmentToHeroReply(const FragmentToHeroReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FragmentToHeroReply::SharedCtor() {
  _cached_size_ = 0;
  req_ = NULL;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FragmentToHeroReply::~FragmentToHeroReply() {
  SharedDtor();
}

void FragmentToHeroReply::SharedDtor() {
  if (this != default_instance_) {
    delete req_;
  }
}

void FragmentToHeroReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FragmentToHeroReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FragmentToHeroReply_descriptor_;
}

const FragmentToHeroReply& FragmentToHeroReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HeroFragment_2eproto();
  return *default_instance_;
}

FragmentToHeroReply* FragmentToHeroReply::default_instance_ = NULL;

FragmentToHeroReply* FragmentToHeroReply::New() const {
  return new FragmentToHeroReply;
}

void FragmentToHeroReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_req()) {
      if (req_ != NULL) req_->::Packet::FragmentToHeroReq::Clear();
    }
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool FragmentToHeroReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.FragmentToHeroReq req = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .Packet.FragmentToHeroReply.Result result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::FragmentToHeroReply_Result_IsValid(value)) {
            set_result(static_cast< ::Packet::FragmentToHeroReply_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void FragmentToHeroReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.FragmentToHeroReq req = 1;
  if (has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->req(), output);
  }

  // required .Packet.FragmentToHeroReply.Result result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FragmentToHeroReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.FragmentToHeroReq req = 1;
  if (has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->req(), target);
  }

  // required .Packet.FragmentToHeroReply.Result result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FragmentToHeroReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.FragmentToHeroReq req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->req());
    }

    // required .Packet.FragmentToHeroReply.Result result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FragmentToHeroReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FragmentToHeroReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FragmentToHeroReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void FragmentToHeroReply::MergeFrom(const FragmentToHeroReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req()) {
      mutable_req()->::Packet::FragmentToHeroReq::MergeFrom(from.req());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void FragmentToHeroReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void FragmentToHeroReply::CopyFrom(const FragmentToHeroReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool FragmentToHeroReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_req()) {
    if (!this->req().IsInitialized()) return false;
  }
  return true;
}

void FragmentToHeroReply::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  if (has_req()) {
    this->mutable_req()->SetInitialized();
  }
  return;
}

void FragmentToHeroReply::Swap(FragmentToHeroReply* other) {
  if (other != this) {
    std::swap(req_, other->req_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata FragmentToHeroReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FragmentToHeroReply_descriptor_;
  metadata.reflection = FragmentToHeroReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

// @@protoc_insertion_point(global_scope)
