// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MissionConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MissionConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Config {

namespace {

const ::google::protobuf::Descriptor* MissionConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MissionConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* MissionExConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MissionExConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* TargetConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TargetConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoryStageConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoryStageConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MissionConfig_2eproto() {
  protobuf_AddDesc_MissionConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MissionConfig.proto");
  GOOGLE_CHECK(file != NULL);
  MissionConfig_descriptor_ = file->message_type(0);
  static const int MissionConfig_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionConfig, pre_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionConfig, finish_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionConfig, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionConfig, open_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionConfig, count_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionConfig, adapt_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionConfig, circle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionConfig, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionConfig, can_drop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionConfig, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionConfig, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionConfig, exp_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionConfig, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionConfig, gold_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionConfig, package_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionConfig, publish_npc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionConfig, commit_npc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionConfig, other_npc_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionConfig, roll_drop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionConfig, is_open_),
  };
  MissionConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MissionConfig_descriptor_,
      MissionConfig::default_instance_,
      MissionConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MissionConfig));
  MissionExConfig_descriptor_ = file->message_type(1);
  static const int MissionExConfig_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionExConfig, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionExConfig, sub_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionExConfig, monster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionExConfig, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionExConfig, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionExConfig, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionExConfig, pos_param_),
  };
  MissionExConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MissionExConfig_descriptor_,
      MissionExConfig::default_instance_,
      MissionExConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionExConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionExConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MissionExConfig));
  TargetConfig_descriptor_ = file->message_type(2);
  static const int TargetConfig_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetConfig, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetConfig, min_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetConfig, max_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetConfig, switch_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetConfig, finish_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetConfig, camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetConfig, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetConfig, reward_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetConfig, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetConfig, group_),
  };
  TargetConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TargetConfig_descriptor_,
      TargetConfig::default_instance_,
      TargetConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TargetConfig));
  StoryStageConfig_descriptor_ = file->message_type(3);
  static const int StoryStageConfig_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryStageConfig, mission_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryStageConfig, stage_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryStageConfig, event_type_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryStageConfig, npc_id_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryStageConfig, npc_side_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryStageConfig, npc_pos_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryStageConfig, npc_id_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryStageConfig, npc_side_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryStageConfig, npc_pos_2_),
  };
  StoryStageConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoryStageConfig_descriptor_,
      StoryStageConfig::default_instance_,
      StoryStageConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryStageConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoryStageConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoryStageConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MissionConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MissionConfig_descriptor_, &MissionConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MissionExConfig_descriptor_, &MissionExConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TargetConfig_descriptor_, &TargetConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoryStageConfig_descriptor_, &StoryStageConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MissionConfig_2eproto() {
  delete MissionConfig::default_instance_;
  delete MissionConfig_reflection_;
  delete MissionExConfig::default_instance_;
  delete MissionExConfig_reflection_;
  delete TargetConfig::default_instance_;
  delete TargetConfig_reflection_;
  delete StoryStageConfig::default_instance_;
  delete StoryStageConfig_reflection_;
}

void protobuf_AddDesc_MissionConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Config::protobuf_AddDesc_AllConfigEnum_2eproto();
  ::Packet::protobuf_AddDesc_ProtoBufOption_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023MissionConfig.proto\022\006Config\032\023AllConfig"
    "Enum.proto\032\024ProtoBufOption.proto\"\317\003\n\rMis"
    "sionConfig\022\n\n\002id\030\001 \002(\005\022\024\n\006pre_id\030\002 \003(\005B\004"
    "\300\363\030\004\022\'\n\013finish_type\030\003 \002(\0162\022.Config.Finis"
    "hType\022!\n\004type\030\004 \002(\0162\023.Config.MissionType"
    "\022\r\n\005group\030\005 \002(\005\022\022\n\nopen_level\030\006 \002(\005\022\023\n\013c"
    "ount_limit\030\007 \002(\005\022\023\n\013adapt_level\030\010 \002(\005\022\016\n"
    "\006circle\030\t \002(\005\022\014\n\004rate\030\n \002(\005\022\020\n\010can_drop\030"
    "\013 \002(\005\022\023\n\005param\030\014 \003(\005B\004\300\363\030\004\022\013\n\003exp\030\r \002(\005\022"
    "\020\n\010exp_rate\030\016 \002(\002\022\014\n\004gold\030\017 \002(\005\022\021\n\tgold_"
    "rate\030\020 \002(\002\022\022\n\npackage_id\030\021 \002(\005\022\026\n\016publis"
    "h_npc_id\030\022 \002(\005\022\025\n\rcommit_npc_id\030\023 \002(\005\022\027\n"
    "\017other_npc_group\030\024 \002(\005\022\021\n\troll_drop\030\025 \002("
    "\005\022\017\n\007is_open\030\026 \002(\005\"\260\001\n\017MissionExConfig\022\r"
    "\n\005index\030\001 \002(\005\022\'\n\010sub_type\030\002 \002(\0162\025.Config"
    ".SubFinishType\022\025\n\007monster\030\003 \003(\005B\004\300\363\030\004\022\022\n"
    "\004item\030\004 \003(\005B\004\300\363\030\004\022\022\n\004rate\030\005 \003(\005B\004\300\363\030\004\022\023\n"
    "\005count\030\006 \003(\005B\004\300\363\030\004\022\021\n\tpos_param\030\007 \002(\005\"\351\001"
    "\n\014TargetConfig\022\r\n\005index\030\001 \002(\005\022\021\n\tmin_lev"
    "el\030\002 \002(\005\022\021\n\tmax_level\030\003 \002(\005\022\023\n\013switch_op"
    "en\030\004 \002(\005\022-\n\013finish_type\030\005 \002(\0162\030.Config.T"
    "argetFinishType\022\014\n\004camp\030\006 \002(\005\022\023\n\005param\030\007"
    " \003(\005B\004\300\363\030\003\022\031\n\013reward_item\030\010 \003(\005B\004\300\363\030\004\022\023\n"
    "\005count\030\t \003(\005B\004\300\363\030\004\022\r\n\005group\030\n \001(\005\"\303\001\n\020St"
    "oryStageConfig\022\022\n\nmission_id\030\001 \002(\005\022\023\n\013st"
    "age_index\030\002 \002(\005\022\024\n\014event_type_1\030\003 \002(\005\022\020\n"
    "\010npc_id_1\030\004 \002(\005\022\022\n\nnpc_side_1\030\005 \002(\005\022\021\n\tn"
    "pc_pos_1\030\006 \002(\005\022\020\n\010npc_id_2\030\007 \002(\005\022\022\n\nnpc_"
    "side_2\030\010 \002(\005\022\021\n\tnpc_pos_2\030\t \002(\005", 1151);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MissionConfig.proto", &protobuf_RegisterTypes);
  MissionConfig::default_instance_ = new MissionConfig();
  MissionExConfig::default_instance_ = new MissionExConfig();
  TargetConfig::default_instance_ = new TargetConfig();
  StoryStageConfig::default_instance_ = new StoryStageConfig();
  MissionConfig::default_instance_->InitAsDefaultInstance();
  MissionExConfig::default_instance_->InitAsDefaultInstance();
  TargetConfig::default_instance_->InitAsDefaultInstance();
  StoryStageConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MissionConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MissionConfig_2eproto {
  StaticDescriptorInitializer_MissionConfig_2eproto() {
    protobuf_AddDesc_MissionConfig_2eproto();
  }
} static_descriptor_initializer_MissionConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MissionConfig::kIdFieldNumber;
const int MissionConfig::kPreIdFieldNumber;
const int MissionConfig::kFinishTypeFieldNumber;
const int MissionConfig::kTypeFieldNumber;
const int MissionConfig::kGroupFieldNumber;
const int MissionConfig::kOpenLevelFieldNumber;
const int MissionConfig::kCountLimitFieldNumber;
const int MissionConfig::kAdaptLevelFieldNumber;
const int MissionConfig::kCircleFieldNumber;
const int MissionConfig::kRateFieldNumber;
const int MissionConfig::kCanDropFieldNumber;
const int MissionConfig::kParamFieldNumber;
const int MissionConfig::kExpFieldNumber;
const int MissionConfig::kExpRateFieldNumber;
const int MissionConfig::kGoldFieldNumber;
const int MissionConfig::kGoldRateFieldNumber;
const int MissionConfig::kPackageIdFieldNumber;
const int MissionConfig::kPublishNpcIdFieldNumber;
const int MissionConfig::kCommitNpcIdFieldNumber;
const int MissionConfig::kOtherNpcGroupFieldNumber;
const int MissionConfig::kRollDropFieldNumber;
const int MissionConfig::kIsOpenFieldNumber;
#endif  // !_MSC_VER

MissionConfig::MissionConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MissionConfig::InitAsDefaultInstance() {
}

MissionConfig::MissionConfig(const MissionConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MissionConfig::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  finish_type_ = -1;
  type_ = -1;
  group_ = 0;
  open_level_ = 0;
  count_limit_ = 0;
  adapt_level_ = 0;
  circle_ = 0;
  rate_ = 0;
  can_drop_ = 0;
  exp_ = 0;
  exp_rate_ = 0;
  gold_ = 0;
  gold_rate_ = 0;
  package_id_ = 0;
  publish_npc_id_ = 0;
  commit_npc_id_ = 0;
  other_npc_group_ = 0;
  roll_drop_ = 0;
  is_open_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MissionConfig::~MissionConfig() {
  SharedDtor();
}

void MissionConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MissionConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissionConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionConfig_descriptor_;
}

const MissionConfig& MissionConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MissionConfig_2eproto();
  return *default_instance_;
}

MissionConfig* MissionConfig::default_instance_ = NULL;

MissionConfig* MissionConfig::New() const {
  return new MissionConfig;
}

void MissionConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    finish_type_ = -1;
    type_ = -1;
    group_ = 0;
    open_level_ = 0;
    count_limit_ = 0;
    adapt_level_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    circle_ = 0;
    rate_ = 0;
    can_drop_ = 0;
    exp_ = 0;
    exp_rate_ = 0;
    gold_ = 0;
    gold_rate_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    package_id_ = 0;
    publish_npc_id_ = 0;
    commit_npc_id_ = 0;
    other_npc_group_ = 0;
    roll_drop_ = 0;
    is_open_ = 0;
  }
  pre_id_.Clear();
  param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool MissionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pre_id;
        break;
      }

      // repeated int32 pre_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pre_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_pre_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pre_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pre_id;
        if (input->ExpectTag(24)) goto parse_finish_type;
        break;
      }

      // required .Config.FinishType finish_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Config::FinishType_IsValid(value)) {
            set_finish_type(static_cast< ::Config::FinishType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required .Config.MissionType type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Config::MissionType_IsValid(value)) {
            set_type(static_cast< ::Config::MissionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_group;
        break;
      }

      // required int32 group = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_open_level;
        break;
      }

      // required int32 open_level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_level_)));
          set_has_open_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_count_limit;
        break;
      }

      // required int32 count_limit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_limit_)));
          set_has_count_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_adapt_level;
        break;
      }

      // required int32 adapt_level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adapt_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adapt_level_)));
          set_has_adapt_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_circle;
        break;
      }

      // required int32 circle = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_circle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &circle_)));
          set_has_circle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_rate;
        break;
      }

      // required int32 rate = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_can_drop;
        break;
      }

      // required int32 can_drop = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_drop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_drop_)));
          set_has_can_drop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_param;
        break;
      }

      // repeated int32 param = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_param())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_param())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_param;
        if (input->ExpectTag(104)) goto parse_exp;
        break;
      }

      // required int32 exp = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_exp_rate;
        break;
      }

      // required float exp_rate = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_exp_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &exp_rate_)));
          set_has_exp_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_gold;
        break;
      }

      // required int32 gold = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_gold_rate;
        break;
      }

      // required float gold_rate = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gold_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gold_rate_)));
          set_has_gold_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_package_id;
        break;
      }

      // required int32 package_id = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_package_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &package_id_)));
          set_has_package_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_publish_npc_id;
        break;
      }

      // required int32 publish_npc_id = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_publish_npc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &publish_npc_id_)));
          set_has_publish_npc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_commit_npc_id;
        break;
      }

      // required int32 commit_npc_id = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commit_npc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &commit_npc_id_)));
          set_has_commit_npc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_other_npc_group;
        break;
      }

      // required int32 other_npc_group = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_other_npc_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &other_npc_group_)));
          set_has_other_npc_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_roll_drop;
        break;
      }

      // required int32 roll_drop = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roll_drop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roll_drop_)));
          set_has_roll_drop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_is_open;
        break;
      }

      // required int32 is_open = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_open_)));
          set_has_is_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void MissionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated int32 pre_id = 2;
  for (int i = 0; i < this->pre_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->pre_id(i), output);
  }

  // required .Config.FinishType finish_type = 3;
  if (has_finish_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->finish_type(), output);
  }

  // required .Config.MissionType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // required int32 group = 5;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->group(), output);
  }

  // required int32 open_level = 6;
  if (has_open_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->open_level(), output);
  }

  // required int32 count_limit = 7;
  if (has_count_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->count_limit(), output);
  }

  // required int32 adapt_level = 8;
  if (has_adapt_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->adapt_level(), output);
  }

  // required int32 circle = 9;
  if (has_circle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->circle(), output);
  }

  // required int32 rate = 10;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->rate(), output);
  }

  // required int32 can_drop = 11;
  if (has_can_drop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->can_drop(), output);
  }

  // repeated int32 param = 12;
  for (int i = 0; i < this->param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->param(i), output);
  }

  // required int32 exp = 13;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->exp(), output);
  }

  // required float exp_rate = 14;
  if (has_exp_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->exp_rate(), output);
  }

  // required int32 gold = 15;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->gold(), output);
  }

  // required float gold_rate = 16;
  if (has_gold_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->gold_rate(), output);
  }

  // required int32 package_id = 17;
  if (has_package_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->package_id(), output);
  }

  // required int32 publish_npc_id = 18;
  if (has_publish_npc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->publish_npc_id(), output);
  }

  // required int32 commit_npc_id = 19;
  if (has_commit_npc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->commit_npc_id(), output);
  }

  // required int32 other_npc_group = 20;
  if (has_other_npc_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->other_npc_group(), output);
  }

  // required int32 roll_drop = 21;
  if (has_roll_drop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->roll_drop(), output);
  }

  // required int32 is_open = 22;
  if (has_is_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->is_open(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MissionConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated int32 pre_id = 2;
  for (int i = 0; i < this->pre_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->pre_id(i), target);
  }

  // required .Config.FinishType finish_type = 3;
  if (has_finish_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->finish_type(), target);
  }

  // required .Config.MissionType type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // required int32 group = 5;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->group(), target);
  }

  // required int32 open_level = 6;
  if (has_open_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->open_level(), target);
  }

  // required int32 count_limit = 7;
  if (has_count_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->count_limit(), target);
  }

  // required int32 adapt_level = 8;
  if (has_adapt_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->adapt_level(), target);
  }

  // required int32 circle = 9;
  if (has_circle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->circle(), target);
  }

  // required int32 rate = 10;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->rate(), target);
  }

  // required int32 can_drop = 11;
  if (has_can_drop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->can_drop(), target);
  }

  // repeated int32 param = 12;
  for (int i = 0; i < this->param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->param(i), target);
  }

  // required int32 exp = 13;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->exp(), target);
  }

  // required float exp_rate = 14;
  if (has_exp_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->exp_rate(), target);
  }

  // required int32 gold = 15;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->gold(), target);
  }

  // required float gold_rate = 16;
  if (has_gold_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->gold_rate(), target);
  }

  // required int32 package_id = 17;
  if (has_package_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->package_id(), target);
  }

  // required int32 publish_npc_id = 18;
  if (has_publish_npc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->publish_npc_id(), target);
  }

  // required int32 commit_npc_id = 19;
  if (has_commit_npc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->commit_npc_id(), target);
  }

  // required int32 other_npc_group = 20;
  if (has_other_npc_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->other_npc_group(), target);
  }

  // required int32 roll_drop = 21;
  if (has_roll_drop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->roll_drop(), target);
  }

  // required int32 is_open = 22;
  if (has_is_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->is_open(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MissionConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required .Config.FinishType finish_type = 3;
    if (has_finish_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->finish_type());
    }

    // required .Config.MissionType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 group = 5;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group());
    }

    // required int32 open_level = 6;
    if (has_open_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open_level());
    }

    // required int32 count_limit = 7;
    if (has_count_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_limit());
    }

    // required int32 adapt_level = 8;
    if (has_adapt_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adapt_level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 circle = 9;
    if (has_circle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->circle());
    }

    // required int32 rate = 10;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate());
    }

    // required int32 can_drop = 11;
    if (has_can_drop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_drop());
    }

    // required int32 exp = 13;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // required float exp_rate = 14;
    if (has_exp_rate()) {
      total_size += 1 + 4;
    }

    // required int32 gold = 15;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // required float gold_rate = 16;
    if (has_gold_rate()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 package_id = 17;
    if (has_package_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->package_id());
    }

    // required int32 publish_npc_id = 18;
    if (has_publish_npc_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->publish_npc_id());
    }

    // required int32 commit_npc_id = 19;
    if (has_commit_npc_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->commit_npc_id());
    }

    // required int32 other_npc_group = 20;
    if (has_other_npc_group()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->other_npc_group());
    }

    // required int32 roll_drop = 21;
    if (has_roll_drop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roll_drop());
    }

    // required int32 is_open = 22;
    if (has_is_open()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_open());
    }

  }
  // repeated int32 pre_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->pre_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pre_id(i));
    }
    total_size += 1 * this->pre_id_size() + data_size;
  }

  // repeated int32 param = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->param_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->param(i));
    }
    total_size += 1 * this->param_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MissionConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MissionConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void MissionConfig::MergeFrom(const MissionConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  pre_id_.MergeFrom(from.pre_id_);
  param_.MergeFrom(from.param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_finish_type()) {
      set_finish_type(from.finish_type());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_open_level()) {
      set_open_level(from.open_level());
    }
    if (from.has_count_limit()) {
      set_count_limit(from.count_limit());
    }
    if (from.has_adapt_level()) {
      set_adapt_level(from.adapt_level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_circle()) {
      set_circle(from.circle());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_can_drop()) {
      set_can_drop(from.can_drop());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_exp_rate()) {
      set_exp_rate(from.exp_rate());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_gold_rate()) {
      set_gold_rate(from.gold_rate());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_package_id()) {
      set_package_id(from.package_id());
    }
    if (from.has_publish_npc_id()) {
      set_publish_npc_id(from.publish_npc_id());
    }
    if (from.has_commit_npc_id()) {
      set_commit_npc_id(from.commit_npc_id());
    }
    if (from.has_other_npc_group()) {
      set_other_npc_group(from.other_npc_group());
    }
    if (from.has_roll_drop()) {
      set_roll_drop(from.roll_drop());
    }
    if (from.has_is_open()) {
      set_is_open(from.is_open());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void MissionConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void MissionConfig::CopyFrom(const MissionConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool MissionConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x003ff7fd) != 0x003ff7fd) return false;

  return true;
}

void MissionConfig::SetInitialized() {
  _has_bits_[0] |= 0x003ff7fd;

  return;
}

void MissionConfig::Swap(MissionConfig* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    pre_id_.Swap(&other->pre_id_);
    std::swap(finish_type_, other->finish_type_);
    std::swap(type_, other->type_);
    std::swap(group_, other->group_);
    std::swap(open_level_, other->open_level_);
    std::swap(count_limit_, other->count_limit_);
    std::swap(adapt_level_, other->adapt_level_);
    std::swap(circle_, other->circle_);
    std::swap(rate_, other->rate_);
    std::swap(can_drop_, other->can_drop_);
    param_.Swap(&other->param_);
    std::swap(exp_, other->exp_);
    std::swap(exp_rate_, other->exp_rate_);
    std::swap(gold_, other->gold_);
    std::swap(gold_rate_, other->gold_rate_);
    std::swap(package_id_, other->package_id_);
    std::swap(publish_npc_id_, other->publish_npc_id_);
    std::swap(commit_npc_id_, other->commit_npc_id_);
    std::swap(other_npc_group_, other->other_npc_group_);
    std::swap(roll_drop_, other->roll_drop_);
    std::swap(is_open_, other->is_open_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata MissionConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MissionConfig_descriptor_;
  metadata.reflection = MissionConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MissionExConfig::kIndexFieldNumber;
const int MissionExConfig::kSubTypeFieldNumber;
const int MissionExConfig::kMonsterFieldNumber;
const int MissionExConfig::kItemFieldNumber;
const int MissionExConfig::kRateFieldNumber;
const int MissionExConfig::kCountFieldNumber;
const int MissionExConfig::kPosParamFieldNumber;
#endif  // !_MSC_VER

MissionExConfig::MissionExConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MissionExConfig::InitAsDefaultInstance() {
}

MissionExConfig::MissionExConfig(const MissionExConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MissionExConfig::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  sub_type_ = -1;
  pos_param_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MissionExConfig::~MissionExConfig() {
  SharedDtor();
}

void MissionExConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MissionExConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissionExConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionExConfig_descriptor_;
}

const MissionExConfig& MissionExConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MissionConfig_2eproto();
  return *default_instance_;
}

MissionExConfig* MissionExConfig::default_instance_ = NULL;

MissionExConfig* MissionExConfig::New() const {
  return new MissionExConfig;
}

void MissionExConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    sub_type_ = -1;
    pos_param_ = 0;
  }
  monster_.Clear();
  item_.Clear();
  rate_.Clear();
  count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool MissionExConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sub_type;
        break;
      }

      // required .Config.SubFinishType sub_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Config::SubFinishType_IsValid(value)) {
            set_sub_type(static_cast< ::Config::SubFinishType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_monster;
        break;
      }

      // repeated int32 monster = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_monster())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_monster())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_monster;
        if (input->ExpectTag(32)) goto parse_item;
        break;
      }

      // repeated int32 item = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_item())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item;
        if (input->ExpectTag(40)) goto parse_rate;
        break;
      }

      // repeated int32 rate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_rate())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rate())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rate;
        if (input->ExpectTag(48)) goto parse_count;
        break;
      }

      // repeated int32 count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_count;
        if (input->ExpectTag(56)) goto parse_pos_param;
        break;
      }

      // required int32 pos_param = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_param_)));
          set_has_pos_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void MissionExConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required .Config.SubFinishType sub_type = 2;
  if (has_sub_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->sub_type(), output);
  }

  // repeated int32 monster = 3;
  for (int i = 0; i < this->monster_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->monster(i), output);
  }

  // repeated int32 item = 4;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->item(i), output);
  }

  // repeated int32 rate = 5;
  for (int i = 0; i < this->rate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->rate(i), output);
  }

  // repeated int32 count = 6;
  for (int i = 0; i < this->count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->count(i), output);
  }

  // required int32 pos_param = 7;
  if (has_pos_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->pos_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MissionExConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required .Config.SubFinishType sub_type = 2;
  if (has_sub_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->sub_type(), target);
  }

  // repeated int32 monster = 3;
  for (int i = 0; i < this->monster_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->monster(i), target);
  }

  // repeated int32 item = 4;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->item(i), target);
  }

  // repeated int32 rate = 5;
  for (int i = 0; i < this->rate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->rate(i), target);
  }

  // repeated int32 count = 6;
  for (int i = 0; i < this->count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->count(i), target);
  }

  // required int32 pos_param = 7;
  if (has_pos_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->pos_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MissionExConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required .Config.SubFinishType sub_type = 2;
    if (has_sub_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sub_type());
    }

    // required int32 pos_param = 7;
    if (has_pos_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_param());
    }

  }
  // repeated int32 monster = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->monster_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->monster(i));
    }
    total_size += 1 * this->monster_size() + data_size;
  }

  // repeated int32 item = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item(i));
    }
    total_size += 1 * this->item_size() + data_size;
  }

  // repeated int32 rate = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->rate_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->rate(i));
    }
    total_size += 1 * this->rate_size() + data_size;
  }

  // repeated int32 count = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->count(i));
    }
    total_size += 1 * this->count_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionExConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MissionExConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MissionExConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void MissionExConfig::MergeFrom(const MissionExConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  monster_.MergeFrom(from.monster_);
  item_.MergeFrom(from.item_);
  rate_.MergeFrom(from.rate_);
  count_.MergeFrom(from.count_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_sub_type()) {
      set_sub_type(from.sub_type());
    }
    if (from.has_pos_param()) {
      set_pos_param(from.pos_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void MissionExConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void MissionExConfig::CopyFrom(const MissionExConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool MissionExConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000043) != 0x00000043) return false;

  return true;
}

void MissionExConfig::SetInitialized() {
  _has_bits_[0] |= 0x00000043;

  return;
}

void MissionExConfig::Swap(MissionExConfig* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(sub_type_, other->sub_type_);
    monster_.Swap(&other->monster_);
    item_.Swap(&other->item_);
    rate_.Swap(&other->rate_);
    count_.Swap(&other->count_);
    std::swap(pos_param_, other->pos_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata MissionExConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MissionExConfig_descriptor_;
  metadata.reflection = MissionExConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TargetConfig::kIndexFieldNumber;
const int TargetConfig::kMinLevelFieldNumber;
const int TargetConfig::kMaxLevelFieldNumber;
const int TargetConfig::kSwitchOpenFieldNumber;
const int TargetConfig::kFinishTypeFieldNumber;
const int TargetConfig::kCampFieldNumber;
const int TargetConfig::kParamFieldNumber;
const int TargetConfig::kRewardItemFieldNumber;
const int TargetConfig::kCountFieldNumber;
const int TargetConfig::kGroupFieldNumber;
#endif  // !_MSC_VER

TargetConfig::TargetConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TargetConfig::InitAsDefaultInstance() {
}

TargetConfig::TargetConfig(const TargetConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TargetConfig::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  min_level_ = 0;
  max_level_ = 0;
  switch_open_ = 0;
  finish_type_ = -1;
  camp_ = 0;
  group_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TargetConfig::~TargetConfig() {
  SharedDtor();
}

void TargetConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TargetConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetConfig_descriptor_;
}

const TargetConfig& TargetConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MissionConfig_2eproto();
  return *default_instance_;
}

TargetConfig* TargetConfig::default_instance_ = NULL;

TargetConfig* TargetConfig::New() const {
  return new TargetConfig;
}

void TargetConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    min_level_ = 0;
    max_level_ = 0;
    switch_open_ = 0;
    finish_type_ = -1;
    camp_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    group_ = 0;
  }
  param_.Clear();
  reward_item_.Clear();
  count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool TargetConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_min_level;
        break;
      }

      // required int32 min_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_level_)));
          set_has_min_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_level;
        break;
      }

      // required int32 max_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_level_)));
          set_has_max_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_switch_open;
        break;
      }

      // required int32 switch_open = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_switch_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &switch_open_)));
          set_has_switch_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_finish_type;
        break;
      }

      // required .Config.TargetFinishType finish_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Config::TargetFinishType_IsValid(value)) {
            set_finish_type(static_cast< ::Config::TargetFinishType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_camp;
        break;
      }

      // required int32 camp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_)));
          set_has_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_param;
        break;
      }

      // repeated int32 param = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_param())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_param())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_param;
        if (input->ExpectTag(64)) goto parse_reward_item;
        break;
      }

      // repeated int32 reward_item = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_reward_item())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_reward_item())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_reward_item;
        if (input->ExpectTag(72)) goto parse_count;
        break;
      }

      // repeated int32 count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_count;
        if (input->ExpectTag(80)) goto parse_group;
        break;
      }

      // optional int32 group = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void TargetConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required int32 min_level = 2;
  if (has_min_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->min_level(), output);
  }

  // required int32 max_level = 3;
  if (has_max_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_level(), output);
  }

  // required int32 switch_open = 4;
  if (has_switch_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->switch_open(), output);
  }

  // required .Config.TargetFinishType finish_type = 5;
  if (has_finish_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->finish_type(), output);
  }

  // required int32 camp = 6;
  if (has_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->camp(), output);
  }

  // repeated int32 param = 7;
  for (int i = 0; i < this->param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->param(i), output);
  }

  // repeated int32 reward_item = 8;
  for (int i = 0; i < this->reward_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->reward_item(i), output);
  }

  // repeated int32 count = 9;
  for (int i = 0; i < this->count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->count(i), output);
  }

  // optional int32 group = 10;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->group(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TargetConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required int32 min_level = 2;
  if (has_min_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->min_level(), target);
  }

  // required int32 max_level = 3;
  if (has_max_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_level(), target);
  }

  // required int32 switch_open = 4;
  if (has_switch_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->switch_open(), target);
  }

  // required .Config.TargetFinishType finish_type = 5;
  if (has_finish_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->finish_type(), target);
  }

  // required int32 camp = 6;
  if (has_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->camp(), target);
  }

  // repeated int32 param = 7;
  for (int i = 0; i < this->param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->param(i), target);
  }

  // repeated int32 reward_item = 8;
  for (int i = 0; i < this->reward_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->reward_item(i), target);
  }

  // repeated int32 count = 9;
  for (int i = 0; i < this->count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->count(i), target);
  }

  // optional int32 group = 10;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->group(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TargetConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 min_level = 2;
    if (has_min_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_level());
    }

    // required int32 max_level = 3;
    if (has_max_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_level());
    }

    // required int32 switch_open = 4;
    if (has_switch_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->switch_open());
    }

    // required .Config.TargetFinishType finish_type = 5;
    if (has_finish_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->finish_type());
    }

    // required int32 camp = 6;
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 group = 10;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group());
    }

  }
  // repeated int32 param = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->param_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->param(i));
    }
    total_size += 1 * this->param_size() + data_size;
  }

  // repeated int32 reward_item = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->reward_item_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->reward_item(i));
    }
    total_size += 1 * this->reward_item_size() + data_size;
  }

  // repeated int32 count = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->count(i));
    }
    total_size += 1 * this->count_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TargetConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TargetConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void TargetConfig::MergeFrom(const TargetConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  param_.MergeFrom(from.param_);
  reward_item_.MergeFrom(from.reward_item_);
  count_.MergeFrom(from.count_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_min_level()) {
      set_min_level(from.min_level());
    }
    if (from.has_max_level()) {
      set_max_level(from.max_level());
    }
    if (from.has_switch_open()) {
      set_switch_open(from.switch_open());
    }
    if (from.has_finish_type()) {
      set_finish_type(from.finish_type());
    }
    if (from.has_camp()) {
      set_camp(from.camp());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_group()) {
      set_group(from.group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void TargetConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void TargetConfig::CopyFrom(const TargetConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool TargetConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void TargetConfig::SetInitialized() {
  _has_bits_[0] |= 0x0000003f;

  return;
}

void TargetConfig::Swap(TargetConfig* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(min_level_, other->min_level_);
    std::swap(max_level_, other->max_level_);
    std::swap(switch_open_, other->switch_open_);
    std::swap(finish_type_, other->finish_type_);
    std::swap(camp_, other->camp_);
    param_.Swap(&other->param_);
    reward_item_.Swap(&other->reward_item_);
    count_.Swap(&other->count_);
    std::swap(group_, other->group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata TargetConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TargetConfig_descriptor_;
  metadata.reflection = TargetConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoryStageConfig::kMissionIdFieldNumber;
const int StoryStageConfig::kStageIndexFieldNumber;
const int StoryStageConfig::kEventType1FieldNumber;
const int StoryStageConfig::kNpcId1FieldNumber;
const int StoryStageConfig::kNpcSide1FieldNumber;
const int StoryStageConfig::kNpcPos1FieldNumber;
const int StoryStageConfig::kNpcId2FieldNumber;
const int StoryStageConfig::kNpcSide2FieldNumber;
const int StoryStageConfig::kNpcPos2FieldNumber;
#endif  // !_MSC_VER

StoryStageConfig::StoryStageConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoryStageConfig::InitAsDefaultInstance() {
}

StoryStageConfig::StoryStageConfig(const StoryStageConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoryStageConfig::SharedCtor() {
  _cached_size_ = 0;
  mission_id_ = 0;
  stage_index_ = 0;
  event_type_1_ = 0;
  npc_id_1_ = 0;
  npc_side_1_ = 0;
  npc_pos_1_ = 0;
  npc_id_2_ = 0;
  npc_side_2_ = 0;
  npc_pos_2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoryStageConfig::~StoryStageConfig() {
  SharedDtor();
}

void StoryStageConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StoryStageConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoryStageConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoryStageConfig_descriptor_;
}

const StoryStageConfig& StoryStageConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MissionConfig_2eproto();
  return *default_instance_;
}

StoryStageConfig* StoryStageConfig::default_instance_ = NULL;

StoryStageConfig* StoryStageConfig::New() const {
  return new StoryStageConfig;
}

void StoryStageConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mission_id_ = 0;
    stage_index_ = 0;
    event_type_1_ = 0;
    npc_id_1_ = 0;
    npc_side_1_ = 0;
    npc_pos_1_ = 0;
    npc_id_2_ = 0;
    npc_side_2_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    npc_pos_2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool StoryStageConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mission_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mission_id_)));
          set_has_mission_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stage_index;
        break;
      }

      // required int32 stage_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_index_)));
          set_has_stage_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_event_type_1;
        break;
      }

      // required int32 event_type_1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_type_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_type_1_)));
          set_has_event_type_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_npc_id_1;
        break;
      }

      // required int32 npc_id_1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_id_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_id_1_)));
          set_has_npc_id_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_npc_side_1;
        break;
      }

      // required int32 npc_side_1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_side_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_side_1_)));
          set_has_npc_side_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_npc_pos_1;
        break;
      }

      // required int32 npc_pos_1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_pos_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_pos_1_)));
          set_has_npc_pos_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_npc_id_2;
        break;
      }

      // required int32 npc_id_2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_id_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_id_2_)));
          set_has_npc_id_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_npc_side_2;
        break;
      }

      // required int32 npc_side_2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_side_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_side_2_)));
          set_has_npc_side_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_npc_pos_2;
        break;
      }

      // required int32 npc_pos_2 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_pos_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_pos_2_)));
          set_has_npc_pos_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void StoryStageConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mission_id = 1;
  if (has_mission_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mission_id(), output);
  }

  // required int32 stage_index = 2;
  if (has_stage_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stage_index(), output);
  }

  // required int32 event_type_1 = 3;
  if (has_event_type_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->event_type_1(), output);
  }

  // required int32 npc_id_1 = 4;
  if (has_npc_id_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->npc_id_1(), output);
  }

  // required int32 npc_side_1 = 5;
  if (has_npc_side_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->npc_side_1(), output);
  }

  // required int32 npc_pos_1 = 6;
  if (has_npc_pos_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->npc_pos_1(), output);
  }

  // required int32 npc_id_2 = 7;
  if (has_npc_id_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->npc_id_2(), output);
  }

  // required int32 npc_side_2 = 8;
  if (has_npc_side_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->npc_side_2(), output);
  }

  // required int32 npc_pos_2 = 9;
  if (has_npc_pos_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->npc_pos_2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoryStageConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mission_id = 1;
  if (has_mission_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mission_id(), target);
  }

  // required int32 stage_index = 2;
  if (has_stage_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stage_index(), target);
  }

  // required int32 event_type_1 = 3;
  if (has_event_type_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->event_type_1(), target);
  }

  // required int32 npc_id_1 = 4;
  if (has_npc_id_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->npc_id_1(), target);
  }

  // required int32 npc_side_1 = 5;
  if (has_npc_side_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->npc_side_1(), target);
  }

  // required int32 npc_pos_1 = 6;
  if (has_npc_pos_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->npc_pos_1(), target);
  }

  // required int32 npc_id_2 = 7;
  if (has_npc_id_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->npc_id_2(), target);
  }

  // required int32 npc_side_2 = 8;
  if (has_npc_side_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->npc_side_2(), target);
  }

  // required int32 npc_pos_2 = 9;
  if (has_npc_pos_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->npc_pos_2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoryStageConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mission_id = 1;
    if (has_mission_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mission_id());
    }

    // required int32 stage_index = 2;
    if (has_stage_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage_index());
    }

    // required int32 event_type_1 = 3;
    if (has_event_type_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_type_1());
    }

    // required int32 npc_id_1 = 4;
    if (has_npc_id_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_id_1());
    }

    // required int32 npc_side_1 = 5;
    if (has_npc_side_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_side_1());
    }

    // required int32 npc_pos_1 = 6;
    if (has_npc_pos_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_pos_1());
    }

    // required int32 npc_id_2 = 7;
    if (has_npc_id_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_id_2());
    }

    // required int32 npc_side_2 = 8;
    if (has_npc_side_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_side_2());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 npc_pos_2 = 9;
    if (has_npc_pos_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_pos_2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoryStageConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoryStageConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoryStageConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void StoryStageConfig::MergeFrom(const StoryStageConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mission_id()) {
      set_mission_id(from.mission_id());
    }
    if (from.has_stage_index()) {
      set_stage_index(from.stage_index());
    }
    if (from.has_event_type_1()) {
      set_event_type_1(from.event_type_1());
    }
    if (from.has_npc_id_1()) {
      set_npc_id_1(from.npc_id_1());
    }
    if (from.has_npc_side_1()) {
      set_npc_side_1(from.npc_side_1());
    }
    if (from.has_npc_pos_1()) {
      set_npc_pos_1(from.npc_pos_1());
    }
    if (from.has_npc_id_2()) {
      set_npc_id_2(from.npc_id_2());
    }
    if (from.has_npc_side_2()) {
      set_npc_side_2(from.npc_side_2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_npc_pos_2()) {
      set_npc_pos_2(from.npc_pos_2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void StoryStageConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void StoryStageConfig::CopyFrom(const StoryStageConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool StoryStageConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void StoryStageConfig::SetInitialized() {
  _has_bits_[0] |= 0x000001ff;

  return;
}

void StoryStageConfig::Swap(StoryStageConfig* other) {
  if (other != this) {
    std::swap(mission_id_, other->mission_id_);
    std::swap(stage_index_, other->stage_index_);
    std::swap(event_type_1_, other->event_type_1_);
    std::swap(npc_id_1_, other->npc_id_1_);
    std::swap(npc_side_1_, other->npc_side_1_);
    std::swap(npc_pos_1_, other->npc_pos_1_);
    std::swap(npc_id_2_, other->npc_id_2_);
    std::swap(npc_side_2_, other->npc_side_2_);
    std::swap(npc_pos_2_, other->npc_pos_2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata StoryStageConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoryStageConfig_descriptor_;
  metadata.reflection = StoryStageConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config

// @@protoc_insertion_point(global_scope)
