// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActorConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ActorConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Config {

namespace {

const ::google::protobuf::Descriptor* LevelConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LevelConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* LackeysConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LackeysConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneKeyEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneKeyEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneKeyConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneKeyConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ActorConfig_2eproto() {
  protobuf_AddDesc_ActorConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ActorConfig.proto");
  GOOGLE_CHECK(file != NULL);
  LevelConfig_descriptor_ = file->message_type(0);
  static const int LevelConfig_offsets_[53] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, main_actor_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, hero_actor_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, burning_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, burning_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, skyfall_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, skyfall_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, light_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, light_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, three_5_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, three_6_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, three_7_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, three_8_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, three_9_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, three_5_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, three_6_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, three_7_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, three_8_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, three_9_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, goblin_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, goblin_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, server_level_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, treasure_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, treasure_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, trial_field_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, reward_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, reward_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, hell_box_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, daykill_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, blood_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, blood_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, blood_potion1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, blood_potion2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, blood_potion3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, black_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, black_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, text_answer_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, text_answer_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, pic_answer_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, pic_answer_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, arena_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, arena_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, arena_win_honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, arena_lose_honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, guild_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, guild_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, guildbattle_min_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, guildbattle_battle_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, guildbattle_win_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, guildbattle_lost_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, guildbattle_battle_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, miss_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, miss_crystal_),
  };
  LevelConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LevelConfig_descriptor_,
      LevelConfig::default_instance_,
      LevelConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LevelConfig));
  LackeysConfig_descriptor_ = file->message_type(1);
  static const int LackeysConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LackeysConfig, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LackeysConfig, attribute1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LackeysConfig, attribute2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LackeysConfig, value_),
  };
  LackeysConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LackeysConfig_descriptor_,
      LackeysConfig::default_instance_,
      LackeysConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LackeysConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LackeysConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LackeysConfig));
  OneKeyEquip_descriptor_ = file->message_type(2);
  static const int OneKeyEquip_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyEquip, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyEquip, gem0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyEquip, gem1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyEquip, gem2_),
  };
  OneKeyEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OneKeyEquip_descriptor_,
      OneKeyEquip::default_instance_,
      OneKeyEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OneKeyEquip));
  OneKeyConfig_descriptor_ = file->message_type(3);
  static const int OneKeyConfig_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyConfig, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyConfig, display_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyConfig, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyConfig, hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyConfig, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyConfig, equip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyConfig, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyConfig, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyConfig, skill_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyConfig, equips_),
  };
  OneKeyConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OneKeyConfig_descriptor_,
      OneKeyConfig::default_instance_,
      OneKeyConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OneKeyConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ActorConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LevelConfig_descriptor_, &LevelConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LackeysConfig_descriptor_, &LackeysConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OneKeyEquip_descriptor_, &OneKeyEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OneKeyConfig_descriptor_, &OneKeyConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ActorConfig_2eproto() {
  delete LevelConfig::default_instance_;
  delete LevelConfig_reflection_;
  delete LackeysConfig::default_instance_;
  delete LackeysConfig_reflection_;
  delete OneKeyEquip::default_instance_;
  delete OneKeyEquip_reflection_;
  delete OneKeyConfig::default_instance_;
  delete OneKeyConfig_reflection_;
}

void protobuf_AddDesc_ActorConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Packet::protobuf_AddDesc_AllPacketEnum_2eproto();
  ::Config::protobuf_AddDesc_AllConfigEnum_2eproto();
  ::Packet::protobuf_AddDesc_ProtoBufOption_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021ActorConfig.proto\022\006Config\032\023AllPacketEn"
    "um.proto\032\023AllConfigEnum.proto\032\024ProtoBufO"
    "ption.proto\"\267\t\n\013LevelConfig\022\r\n\005level\030\001 \002"
    "(\005\022\026\n\016main_actor_exp\030\002 \002(\005\022\026\n\016hero_actor"
    "_exp\030\003 \002(\005\022\023\n\013burning_exp\030\004 \002(\005\022\024\n\014burni"
    "ng_gold\030\005 \002(\005\022\023\n\013skyfall_exp\030\006 \002(\005\022\024\n\014sk"
    "yfall_gold\030\007 \002(\005\022\021\n\tlight_exp\030\010 \002(\005\022\022\n\nl"
    "ight_gold\030\t \002(\005\022\023\n\013three_5_exp\030\n \002(\005\022\023\n\013"
    "three_6_exp\030\013 \002(\005\022\023\n\013three_7_exp\030\014 \002(\005\022\023"
    "\n\013three_8_exp\030\r \002(\005\022\023\n\013three_9_exp\030\016 \002(\005"
    "\022\024\n\014three_5_gold\030\017 \002(\005\022\024\n\014three_6_gold\030\020"
    " \002(\005\022\024\n\014three_7_gold\030\021 \002(\005\022\024\n\014three_8_go"
    "ld\030\022 \002(\005\022\024\n\014three_9_gold\030\023 \002(\005\022\022\n\ngoblin"
    "_exp\030\024 \002(\005\022\023\n\013goblin_gold\030\025 \002(\005\022\030\n\020serve"
    "r_level_day\030\026 \002(\005\022\024\n\014treasure_exp\030\027 \002(\005\022"
    "\025\n\rtreasure_gold\030\030 \002(\005\022\026\n\016trial_field_hp"
    "\030\031 \003(\005\022\022\n\nreward_exp\030\032 \002(\005\022\023\n\013reward_gol"
    "d\030\033 \002(\005\022\025\n\rhell_box_gold\030\034 \002(\005\022\023\n\013daykil"
    "l_exp\030\035 \002(\005\022\021\n\tblood_exp\030\036 \002(\005\022\022\n\nblood_"
    "gold\030\037 \002(\005\022\025\n\rblood_potion1\030  \003(\005\022\025\n\rblo"
    "od_potion2\030! \002(\005\022\025\n\rblood_potion3\030\" \002(\005\022"
    "\021\n\tblack_exp\030# \002(\005\022\022\n\nblack_gold\030$ \002(\005\022\027"
    "\n\017text_answer_exp\030% \002(\005\022\030\n\020text_answer_g"
    "old\030& \002(\005\022\026\n\016pic_answer_exp\030\' \002(\005\022\027\n\017pic"
    "_answer_gold\030( \002(\005\022\021\n\tarena_exp\030) \002(\005\022\022\n"
    "\narena_gold\030* \002(\005\022\027\n\017arena_win_honor\030+ \002"
    "(\005\022\030\n\020arena_lose_honor\030, \002(\005\022\021\n\tguild_ex"
    "p\030- \002(\005\022\022\n\nguild_gold\030. \002(\005\022\033\n\023guildbatt"
    "le_min_exp\030/ \002(\005\022\036\n\026guildbattle_battle_e"
    "xp\0300 \002(\005\022\033\n\023guildbattle_win_exp\0301 \002(\005\022\034\n"
    "\024guildbattle_lost_exp\0302 \002(\005\022\037\n\027guildbatt"
    "le_battle_gold\0303 \002(\005\022\021\n\tmiss_gold\0304 \002(\005\022"
    "\024\n\014miss_crystal\0305 \002(\005\"U\n\rLackeysConfig\022\r"
    "\n\005index\030\001 \002(\005\022\022\n\nattribute1\030\002 \002(\t\022\022\n\natt"
    "ribute2\030\003 \002(\t\022\r\n\005value\030\004 \002(\005\"C\n\013OneKeyEq"
    "uip\022\n\n\002id\030\001 \002(\005\022\014\n\004gem0\030\002 \002(\005\022\014\n\004gem1\030\003 "
    "\002(\005\022\014\n\004gem2\030\004 \002(\005\"\336\001\n\014OneKeyConfig\022\n\n\002id"
    "\030\001 \002(\005\022\017\n\007hero_id\030\002 \002(\005\022\024\n\014display_name\030"
    "\003 \002(\t\022\014\n\004icon\030\004 \002(\t\022\014\n\004hair\030\005 \002(\005\022\r\n\005lev"
    "el\030\006 \002(\005\022\023\n\013equip_level\030\007 \002(\005\022\014\n\004star\030\010 "
    "\002(\005\022\r\n\005color\030\t \002(\005\022\023\n\013skill_level\030\n \002(\005\022"
    ")\n\006equips\030\013 \003(\0132\023.Config.OneKeyEquipB\004\300\363"
    "\030\014", 1682);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ActorConfig.proto", &protobuf_RegisterTypes);
  LevelConfig::default_instance_ = new LevelConfig();
  LackeysConfig::default_instance_ = new LackeysConfig();
  OneKeyEquip::default_instance_ = new OneKeyEquip();
  OneKeyConfig::default_instance_ = new OneKeyConfig();
  LevelConfig::default_instance_->InitAsDefaultInstance();
  LackeysConfig::default_instance_->InitAsDefaultInstance();
  OneKeyEquip::default_instance_->InitAsDefaultInstance();
  OneKeyConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ActorConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ActorConfig_2eproto {
  StaticDescriptorInitializer_ActorConfig_2eproto() {
    protobuf_AddDesc_ActorConfig_2eproto();
  }
} static_descriptor_initializer_ActorConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LevelConfig::kLevelFieldNumber;
const int LevelConfig::kMainActorExpFieldNumber;
const int LevelConfig::kHeroActorExpFieldNumber;
const int LevelConfig::kBurningExpFieldNumber;
const int LevelConfig::kBurningGoldFieldNumber;
const int LevelConfig::kSkyfallExpFieldNumber;
const int LevelConfig::kSkyfallGoldFieldNumber;
const int LevelConfig::kLightExpFieldNumber;
const int LevelConfig::kLightGoldFieldNumber;
const int LevelConfig::kThree5ExpFieldNumber;
const int LevelConfig::kThree6ExpFieldNumber;
const int LevelConfig::kThree7ExpFieldNumber;
const int LevelConfig::kThree8ExpFieldNumber;
const int LevelConfig::kThree9ExpFieldNumber;
const int LevelConfig::kThree5GoldFieldNumber;
const int LevelConfig::kThree6GoldFieldNumber;
const int LevelConfig::kThree7GoldFieldNumber;
const int LevelConfig::kThree8GoldFieldNumber;
const int LevelConfig::kThree9GoldFieldNumber;
const int LevelConfig::kGoblinExpFieldNumber;
const int LevelConfig::kGoblinGoldFieldNumber;
const int LevelConfig::kServerLevelDayFieldNumber;
const int LevelConfig::kTreasureExpFieldNumber;
const int LevelConfig::kTreasureGoldFieldNumber;
const int LevelConfig::kTrialFieldHpFieldNumber;
const int LevelConfig::kRewardExpFieldNumber;
const int LevelConfig::kRewardGoldFieldNumber;
const int LevelConfig::kHellBoxGoldFieldNumber;
const int LevelConfig::kDaykillExpFieldNumber;
const int LevelConfig::kBloodExpFieldNumber;
const int LevelConfig::kBloodGoldFieldNumber;
const int LevelConfig::kBloodPotion1FieldNumber;
const int LevelConfig::kBloodPotion2FieldNumber;
const int LevelConfig::kBloodPotion3FieldNumber;
const int LevelConfig::kBlackExpFieldNumber;
const int LevelConfig::kBlackGoldFieldNumber;
const int LevelConfig::kTextAnswerExpFieldNumber;
const int LevelConfig::kTextAnswerGoldFieldNumber;
const int LevelConfig::kPicAnswerExpFieldNumber;
const int LevelConfig::kPicAnswerGoldFieldNumber;
const int LevelConfig::kArenaExpFieldNumber;
const int LevelConfig::kArenaGoldFieldNumber;
const int LevelConfig::kArenaWinHonorFieldNumber;
const int LevelConfig::kArenaLoseHonorFieldNumber;
const int LevelConfig::kGuildExpFieldNumber;
const int LevelConfig::kGuildGoldFieldNumber;
const int LevelConfig::kGuildbattleMinExpFieldNumber;
const int LevelConfig::kGuildbattleBattleExpFieldNumber;
const int LevelConfig::kGuildbattleWinExpFieldNumber;
const int LevelConfig::kGuildbattleLostExpFieldNumber;
const int LevelConfig::kGuildbattleBattleGoldFieldNumber;
const int LevelConfig::kMissGoldFieldNumber;
const int LevelConfig::kMissCrystalFieldNumber;
#endif  // !_MSC_VER

LevelConfig::LevelConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LevelConfig::InitAsDefaultInstance() {
}

LevelConfig::LevelConfig(const LevelConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LevelConfig::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  main_actor_exp_ = 0;
  hero_actor_exp_ = 0;
  burning_exp_ = 0;
  burning_gold_ = 0;
  skyfall_exp_ = 0;
  skyfall_gold_ = 0;
  light_exp_ = 0;
  light_gold_ = 0;
  three_5_exp_ = 0;
  three_6_exp_ = 0;
  three_7_exp_ = 0;
  three_8_exp_ = 0;
  three_9_exp_ = 0;
  three_5_gold_ = 0;
  three_6_gold_ = 0;
  three_7_gold_ = 0;
  three_8_gold_ = 0;
  three_9_gold_ = 0;
  goblin_exp_ = 0;
  goblin_gold_ = 0;
  server_level_day_ = 0;
  treasure_exp_ = 0;
  treasure_gold_ = 0;
  reward_exp_ = 0;
  reward_gold_ = 0;
  hell_box_gold_ = 0;
  daykill_exp_ = 0;
  blood_exp_ = 0;
  blood_gold_ = 0;
  blood_potion2_ = 0;
  blood_potion3_ = 0;
  black_exp_ = 0;
  black_gold_ = 0;
  text_answer_exp_ = 0;
  text_answer_gold_ = 0;
  pic_answer_exp_ = 0;
  pic_answer_gold_ = 0;
  arena_exp_ = 0;
  arena_gold_ = 0;
  arena_win_honor_ = 0;
  arena_lose_honor_ = 0;
  guild_exp_ = 0;
  guild_gold_ = 0;
  guildbattle_min_exp_ = 0;
  guildbattle_battle_exp_ = 0;
  guildbattle_win_exp_ = 0;
  guildbattle_lost_exp_ = 0;
  guildbattle_battle_gold_ = 0;
  miss_gold_ = 0;
  miss_crystal_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LevelConfig::~LevelConfig() {
  SharedDtor();
}

void LevelConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LevelConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LevelConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LevelConfig_descriptor_;
}

const LevelConfig& LevelConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActorConfig_2eproto();
  return *default_instance_;
}

LevelConfig* LevelConfig::default_instance_ = NULL;

LevelConfig* LevelConfig::New() const {
  return new LevelConfig;
}

void LevelConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    main_actor_exp_ = 0;
    hero_actor_exp_ = 0;
    burning_exp_ = 0;
    burning_gold_ = 0;
    skyfall_exp_ = 0;
    skyfall_gold_ = 0;
    light_exp_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    light_gold_ = 0;
    three_5_exp_ = 0;
    three_6_exp_ = 0;
    three_7_exp_ = 0;
    three_8_exp_ = 0;
    three_9_exp_ = 0;
    three_5_gold_ = 0;
    three_6_gold_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    three_7_gold_ = 0;
    three_8_gold_ = 0;
    three_9_gold_ = 0;
    goblin_exp_ = 0;
    goblin_gold_ = 0;
    server_level_day_ = 0;
    treasure_exp_ = 0;
    treasure_gold_ = 0;
  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    reward_exp_ = 0;
    reward_gold_ = 0;
    hell_box_gold_ = 0;
    daykill_exp_ = 0;
    blood_exp_ = 0;
    blood_gold_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    blood_potion2_ = 0;
    blood_potion3_ = 0;
    black_exp_ = 0;
    black_gold_ = 0;
    text_answer_exp_ = 0;
    text_answer_gold_ = 0;
    pic_answer_exp_ = 0;
    pic_answer_gold_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    arena_exp_ = 0;
    arena_gold_ = 0;
    arena_win_honor_ = 0;
    arena_lose_honor_ = 0;
    guild_exp_ = 0;
    guild_gold_ = 0;
    guildbattle_min_exp_ = 0;
    guildbattle_battle_exp_ = 0;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    guildbattle_win_exp_ = 0;
    guildbattle_lost_exp_ = 0;
    guildbattle_battle_gold_ = 0;
    miss_gold_ = 0;
    miss_crystal_ = 0;
  }
  trial_field_hp_.Clear();
  blood_potion1_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool LevelConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_main_actor_exp;
        break;
      }

      // required int32 main_actor_exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_main_actor_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &main_actor_exp_)));
          set_has_main_actor_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hero_actor_exp;
        break;
      }

      // required int32 hero_actor_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_actor_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_actor_exp_)));
          set_has_hero_actor_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_burning_exp;
        break;
      }

      // required int32 burning_exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_burning_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &burning_exp_)));
          set_has_burning_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_burning_gold;
        break;
      }

      // required int32 burning_gold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_burning_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &burning_gold_)));
          set_has_burning_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_skyfall_exp;
        break;
      }

      // required int32 skyfall_exp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skyfall_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skyfall_exp_)));
          set_has_skyfall_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_skyfall_gold;
        break;
      }

      // required int32 skyfall_gold = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skyfall_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skyfall_gold_)));
          set_has_skyfall_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_light_exp;
        break;
      }

      // required int32 light_exp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_light_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &light_exp_)));
          set_has_light_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_light_gold;
        break;
      }

      // required int32 light_gold = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_light_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &light_gold_)));
          set_has_light_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_three_5_exp;
        break;
      }

      // required int32 three_5_exp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_three_5_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &three_5_exp_)));
          set_has_three_5_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_three_6_exp;
        break;
      }

      // required int32 three_6_exp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_three_6_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &three_6_exp_)));
          set_has_three_6_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_three_7_exp;
        break;
      }

      // required int32 three_7_exp = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_three_7_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &three_7_exp_)));
          set_has_three_7_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_three_8_exp;
        break;
      }

      // required int32 three_8_exp = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_three_8_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &three_8_exp_)));
          set_has_three_8_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_three_9_exp;
        break;
      }

      // required int32 three_9_exp = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_three_9_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &three_9_exp_)));
          set_has_three_9_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_three_5_gold;
        break;
      }

      // required int32 three_5_gold = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_three_5_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &three_5_gold_)));
          set_has_three_5_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_three_6_gold;
        break;
      }

      // required int32 three_6_gold = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_three_6_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &three_6_gold_)));
          set_has_three_6_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_three_7_gold;
        break;
      }

      // required int32 three_7_gold = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_three_7_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &three_7_gold_)));
          set_has_three_7_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_three_8_gold;
        break;
      }

      // required int32 three_8_gold = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_three_8_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &three_8_gold_)));
          set_has_three_8_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_three_9_gold;
        break;
      }

      // required int32 three_9_gold = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_three_9_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &three_9_gold_)));
          set_has_three_9_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_goblin_exp;
        break;
      }

      // required int32 goblin_exp = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goblin_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goblin_exp_)));
          set_has_goblin_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_goblin_gold;
        break;
      }

      // required int32 goblin_gold = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goblin_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goblin_gold_)));
          set_has_goblin_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_server_level_day;
        break;
      }

      // required int32 server_level_day = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_level_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_level_day_)));
          set_has_server_level_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_treasure_exp;
        break;
      }

      // required int32 treasure_exp = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_treasure_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasure_exp_)));
          set_has_treasure_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_treasure_gold;
        break;
      }

      // required int32 treasure_gold = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_treasure_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasure_gold_)));
          set_has_treasure_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_trial_field_hp;
        break;
      }

      // repeated int32 trial_field_hp = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trial_field_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 200, input, this->mutable_trial_field_hp())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_trial_field_hp())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_trial_field_hp;
        if (input->ExpectTag(208)) goto parse_reward_exp;
        break;
      }

      // required int32 reward_exp = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_exp_)));
          set_has_reward_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_reward_gold;
        break;
      }

      // required int32 reward_gold = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_gold_)));
          set_has_reward_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_hell_box_gold;
        break;
      }

      // required int32 hell_box_gold = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hell_box_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hell_box_gold_)));
          set_has_hell_box_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_daykill_exp;
        break;
      }

      // required int32 daykill_exp = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daykill_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daykill_exp_)));
          set_has_daykill_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_blood_exp;
        break;
      }

      // required int32 blood_exp = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blood_exp_)));
          set_has_blood_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_blood_gold;
        break;
      }

      // required int32 blood_gold = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blood_gold_)));
          set_has_blood_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_blood_potion1;
        break;
      }

      // repeated int32 blood_potion1 = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood_potion1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 256, input, this->mutable_blood_potion1())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_blood_potion1())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_blood_potion1;
        if (input->ExpectTag(264)) goto parse_blood_potion2;
        break;
      }

      // required int32 blood_potion2 = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood_potion2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blood_potion2_)));
          set_has_blood_potion2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_blood_potion3;
        break;
      }

      // required int32 blood_potion3 = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood_potion3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blood_potion3_)));
          set_has_blood_potion3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_black_exp;
        break;
      }

      // required int32 black_exp = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_black_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &black_exp_)));
          set_has_black_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_black_gold;
        break;
      }

      // required int32 black_gold = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_black_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &black_gold_)));
          set_has_black_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_text_answer_exp;
        break;
      }

      // required int32 text_answer_exp = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_text_answer_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &text_answer_exp_)));
          set_has_text_answer_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_text_answer_gold;
        break;
      }

      // required int32 text_answer_gold = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_text_answer_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &text_answer_gold_)));
          set_has_text_answer_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_pic_answer_exp;
        break;
      }

      // required int32 pic_answer_exp = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pic_answer_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pic_answer_exp_)));
          set_has_pic_answer_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_pic_answer_gold;
        break;
      }

      // required int32 pic_answer_gold = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pic_answer_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pic_answer_gold_)));
          set_has_pic_answer_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_arena_exp;
        break;
      }

      // required int32 arena_exp = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arena_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arena_exp_)));
          set_has_arena_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_arena_gold;
        break;
      }

      // required int32 arena_gold = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arena_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arena_gold_)));
          set_has_arena_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_arena_win_honor;
        break;
      }

      // required int32 arena_win_honor = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arena_win_honor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arena_win_honor_)));
          set_has_arena_win_honor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_arena_lose_honor;
        break;
      }

      // required int32 arena_lose_honor = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arena_lose_honor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arena_lose_honor_)));
          set_has_arena_lose_honor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_guild_exp;
        break;
      }

      // required int32 guild_exp = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_exp_)));
          set_has_guild_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_guild_gold;
        break;
      }

      // required int32 guild_gold = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_gold_)));
          set_has_guild_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_guildbattle_min_exp;
        break;
      }

      // required int32 guildbattle_min_exp = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildbattle_min_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildbattle_min_exp_)));
          set_has_guildbattle_min_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_guildbattle_battle_exp;
        break;
      }

      // required int32 guildbattle_battle_exp = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildbattle_battle_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildbattle_battle_exp_)));
          set_has_guildbattle_battle_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_guildbattle_win_exp;
        break;
      }

      // required int32 guildbattle_win_exp = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildbattle_win_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildbattle_win_exp_)));
          set_has_guildbattle_win_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_guildbattle_lost_exp;
        break;
      }

      // required int32 guildbattle_lost_exp = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildbattle_lost_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildbattle_lost_exp_)));
          set_has_guildbattle_lost_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_guildbattle_battle_gold;
        break;
      }

      // required int32 guildbattle_battle_gold = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildbattle_battle_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildbattle_battle_gold_)));
          set_has_guildbattle_battle_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_miss_gold;
        break;
      }

      // required int32 miss_gold = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_miss_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &miss_gold_)));
          set_has_miss_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_miss_crystal;
        break;
      }

      // required int32 miss_crystal = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_miss_crystal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &miss_crystal_)));
          set_has_miss_crystal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void LevelConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // required int32 main_actor_exp = 2;
  if (has_main_actor_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->main_actor_exp(), output);
  }

  // required int32 hero_actor_exp = 3;
  if (has_hero_actor_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hero_actor_exp(), output);
  }

  // required int32 burning_exp = 4;
  if (has_burning_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->burning_exp(), output);
  }

  // required int32 burning_gold = 5;
  if (has_burning_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->burning_gold(), output);
  }

  // required int32 skyfall_exp = 6;
  if (has_skyfall_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->skyfall_exp(), output);
  }

  // required int32 skyfall_gold = 7;
  if (has_skyfall_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->skyfall_gold(), output);
  }

  // required int32 light_exp = 8;
  if (has_light_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->light_exp(), output);
  }

  // required int32 light_gold = 9;
  if (has_light_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->light_gold(), output);
  }

  // required int32 three_5_exp = 10;
  if (has_three_5_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->three_5_exp(), output);
  }

  // required int32 three_6_exp = 11;
  if (has_three_6_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->three_6_exp(), output);
  }

  // required int32 three_7_exp = 12;
  if (has_three_7_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->three_7_exp(), output);
  }

  // required int32 three_8_exp = 13;
  if (has_three_8_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->three_8_exp(), output);
  }

  // required int32 three_9_exp = 14;
  if (has_three_9_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->three_9_exp(), output);
  }

  // required int32 three_5_gold = 15;
  if (has_three_5_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->three_5_gold(), output);
  }

  // required int32 three_6_gold = 16;
  if (has_three_6_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->three_6_gold(), output);
  }

  // required int32 three_7_gold = 17;
  if (has_three_7_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->three_7_gold(), output);
  }

  // required int32 three_8_gold = 18;
  if (has_three_8_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->three_8_gold(), output);
  }

  // required int32 three_9_gold = 19;
  if (has_three_9_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->three_9_gold(), output);
  }

  // required int32 goblin_exp = 20;
  if (has_goblin_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->goblin_exp(), output);
  }

  // required int32 goblin_gold = 21;
  if (has_goblin_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->goblin_gold(), output);
  }

  // required int32 server_level_day = 22;
  if (has_server_level_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->server_level_day(), output);
  }

  // required int32 treasure_exp = 23;
  if (has_treasure_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->treasure_exp(), output);
  }

  // required int32 treasure_gold = 24;
  if (has_treasure_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->treasure_gold(), output);
  }

  // repeated int32 trial_field_hp = 25;
  for (int i = 0; i < this->trial_field_hp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      25, this->trial_field_hp(i), output);
  }

  // required int32 reward_exp = 26;
  if (has_reward_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->reward_exp(), output);
  }

  // required int32 reward_gold = 27;
  if (has_reward_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->reward_gold(), output);
  }

  // required int32 hell_box_gold = 28;
  if (has_hell_box_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->hell_box_gold(), output);
  }

  // required int32 daykill_exp = 29;
  if (has_daykill_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->daykill_exp(), output);
  }

  // required int32 blood_exp = 30;
  if (has_blood_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->blood_exp(), output);
  }

  // required int32 blood_gold = 31;
  if (has_blood_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->blood_gold(), output);
  }

  // repeated int32 blood_potion1 = 32;
  for (int i = 0; i < this->blood_potion1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      32, this->blood_potion1(i), output);
  }

  // required int32 blood_potion2 = 33;
  if (has_blood_potion2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->blood_potion2(), output);
  }

  // required int32 blood_potion3 = 34;
  if (has_blood_potion3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->blood_potion3(), output);
  }

  // required int32 black_exp = 35;
  if (has_black_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->black_exp(), output);
  }

  // required int32 black_gold = 36;
  if (has_black_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->black_gold(), output);
  }

  // required int32 text_answer_exp = 37;
  if (has_text_answer_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->text_answer_exp(), output);
  }

  // required int32 text_answer_gold = 38;
  if (has_text_answer_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->text_answer_gold(), output);
  }

  // required int32 pic_answer_exp = 39;
  if (has_pic_answer_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->pic_answer_exp(), output);
  }

  // required int32 pic_answer_gold = 40;
  if (has_pic_answer_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->pic_answer_gold(), output);
  }

  // required int32 arena_exp = 41;
  if (has_arena_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->arena_exp(), output);
  }

  // required int32 arena_gold = 42;
  if (has_arena_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->arena_gold(), output);
  }

  // required int32 arena_win_honor = 43;
  if (has_arena_win_honor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->arena_win_honor(), output);
  }

  // required int32 arena_lose_honor = 44;
  if (has_arena_lose_honor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->arena_lose_honor(), output);
  }

  // required int32 guild_exp = 45;
  if (has_guild_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->guild_exp(), output);
  }

  // required int32 guild_gold = 46;
  if (has_guild_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->guild_gold(), output);
  }

  // required int32 guildbattle_min_exp = 47;
  if (has_guildbattle_min_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(47, this->guildbattle_min_exp(), output);
  }

  // required int32 guildbattle_battle_exp = 48;
  if (has_guildbattle_battle_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->guildbattle_battle_exp(), output);
  }

  // required int32 guildbattle_win_exp = 49;
  if (has_guildbattle_win_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(49, this->guildbattle_win_exp(), output);
  }

  // required int32 guildbattle_lost_exp = 50;
  if (has_guildbattle_lost_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->guildbattle_lost_exp(), output);
  }

  // required int32 guildbattle_battle_gold = 51;
  if (has_guildbattle_battle_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->guildbattle_battle_gold(), output);
  }

  // required int32 miss_gold = 52;
  if (has_miss_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->miss_gold(), output);
  }

  // required int32 miss_crystal = 53;
  if (has_miss_crystal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(53, this->miss_crystal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LevelConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // required int32 main_actor_exp = 2;
  if (has_main_actor_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->main_actor_exp(), target);
  }

  // required int32 hero_actor_exp = 3;
  if (has_hero_actor_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hero_actor_exp(), target);
  }

  // required int32 burning_exp = 4;
  if (has_burning_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->burning_exp(), target);
  }

  // required int32 burning_gold = 5;
  if (has_burning_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->burning_gold(), target);
  }

  // required int32 skyfall_exp = 6;
  if (has_skyfall_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->skyfall_exp(), target);
  }

  // required int32 skyfall_gold = 7;
  if (has_skyfall_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->skyfall_gold(), target);
  }

  // required int32 light_exp = 8;
  if (has_light_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->light_exp(), target);
  }

  // required int32 light_gold = 9;
  if (has_light_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->light_gold(), target);
  }

  // required int32 three_5_exp = 10;
  if (has_three_5_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->three_5_exp(), target);
  }

  // required int32 three_6_exp = 11;
  if (has_three_6_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->three_6_exp(), target);
  }

  // required int32 three_7_exp = 12;
  if (has_three_7_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->three_7_exp(), target);
  }

  // required int32 three_8_exp = 13;
  if (has_three_8_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->three_8_exp(), target);
  }

  // required int32 three_9_exp = 14;
  if (has_three_9_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->three_9_exp(), target);
  }

  // required int32 three_5_gold = 15;
  if (has_three_5_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->three_5_gold(), target);
  }

  // required int32 three_6_gold = 16;
  if (has_three_6_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->three_6_gold(), target);
  }

  // required int32 three_7_gold = 17;
  if (has_three_7_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->three_7_gold(), target);
  }

  // required int32 three_8_gold = 18;
  if (has_three_8_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->three_8_gold(), target);
  }

  // required int32 three_9_gold = 19;
  if (has_three_9_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->three_9_gold(), target);
  }

  // required int32 goblin_exp = 20;
  if (has_goblin_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->goblin_exp(), target);
  }

  // required int32 goblin_gold = 21;
  if (has_goblin_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->goblin_gold(), target);
  }

  // required int32 server_level_day = 22;
  if (has_server_level_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->server_level_day(), target);
  }

  // required int32 treasure_exp = 23;
  if (has_treasure_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->treasure_exp(), target);
  }

  // required int32 treasure_gold = 24;
  if (has_treasure_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->treasure_gold(), target);
  }

  // repeated int32 trial_field_hp = 25;
  for (int i = 0; i < this->trial_field_hp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(25, this->trial_field_hp(i), target);
  }

  // required int32 reward_exp = 26;
  if (has_reward_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->reward_exp(), target);
  }

  // required int32 reward_gold = 27;
  if (has_reward_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->reward_gold(), target);
  }

  // required int32 hell_box_gold = 28;
  if (has_hell_box_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->hell_box_gold(), target);
  }

  // required int32 daykill_exp = 29;
  if (has_daykill_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->daykill_exp(), target);
  }

  // required int32 blood_exp = 30;
  if (has_blood_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->blood_exp(), target);
  }

  // required int32 blood_gold = 31;
  if (has_blood_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->blood_gold(), target);
  }

  // repeated int32 blood_potion1 = 32;
  for (int i = 0; i < this->blood_potion1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(32, this->blood_potion1(i), target);
  }

  // required int32 blood_potion2 = 33;
  if (has_blood_potion2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->blood_potion2(), target);
  }

  // required int32 blood_potion3 = 34;
  if (has_blood_potion3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->blood_potion3(), target);
  }

  // required int32 black_exp = 35;
  if (has_black_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->black_exp(), target);
  }

  // required int32 black_gold = 36;
  if (has_black_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->black_gold(), target);
  }

  // required int32 text_answer_exp = 37;
  if (has_text_answer_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->text_answer_exp(), target);
  }

  // required int32 text_answer_gold = 38;
  if (has_text_answer_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->text_answer_gold(), target);
  }

  // required int32 pic_answer_exp = 39;
  if (has_pic_answer_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->pic_answer_exp(), target);
  }

  // required int32 pic_answer_gold = 40;
  if (has_pic_answer_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->pic_answer_gold(), target);
  }

  // required int32 arena_exp = 41;
  if (has_arena_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->arena_exp(), target);
  }

  // required int32 arena_gold = 42;
  if (has_arena_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->arena_gold(), target);
  }

  // required int32 arena_win_honor = 43;
  if (has_arena_win_honor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->arena_win_honor(), target);
  }

  // required int32 arena_lose_honor = 44;
  if (has_arena_lose_honor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->arena_lose_honor(), target);
  }

  // required int32 guild_exp = 45;
  if (has_guild_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->guild_exp(), target);
  }

  // required int32 guild_gold = 46;
  if (has_guild_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(46, this->guild_gold(), target);
  }

  // required int32 guildbattle_min_exp = 47;
  if (has_guildbattle_min_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(47, this->guildbattle_min_exp(), target);
  }

  // required int32 guildbattle_battle_exp = 48;
  if (has_guildbattle_battle_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(48, this->guildbattle_battle_exp(), target);
  }

  // required int32 guildbattle_win_exp = 49;
  if (has_guildbattle_win_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(49, this->guildbattle_win_exp(), target);
  }

  // required int32 guildbattle_lost_exp = 50;
  if (has_guildbattle_lost_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->guildbattle_lost_exp(), target);
  }

  // required int32 guildbattle_battle_gold = 51;
  if (has_guildbattle_battle_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->guildbattle_battle_gold(), target);
  }

  // required int32 miss_gold = 52;
  if (has_miss_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->miss_gold(), target);
  }

  // required int32 miss_crystal = 53;
  if (has_miss_crystal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(53, this->miss_crystal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LevelConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 main_actor_exp = 2;
    if (has_main_actor_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->main_actor_exp());
    }

    // required int32 hero_actor_exp = 3;
    if (has_hero_actor_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_actor_exp());
    }

    // required int32 burning_exp = 4;
    if (has_burning_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->burning_exp());
    }

    // required int32 burning_gold = 5;
    if (has_burning_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->burning_gold());
    }

    // required int32 skyfall_exp = 6;
    if (has_skyfall_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skyfall_exp());
    }

    // required int32 skyfall_gold = 7;
    if (has_skyfall_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skyfall_gold());
    }

    // required int32 light_exp = 8;
    if (has_light_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->light_exp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 light_gold = 9;
    if (has_light_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->light_gold());
    }

    // required int32 three_5_exp = 10;
    if (has_three_5_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->three_5_exp());
    }

    // required int32 three_6_exp = 11;
    if (has_three_6_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->three_6_exp());
    }

    // required int32 three_7_exp = 12;
    if (has_three_7_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->three_7_exp());
    }

    // required int32 three_8_exp = 13;
    if (has_three_8_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->three_8_exp());
    }

    // required int32 three_9_exp = 14;
    if (has_three_9_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->three_9_exp());
    }

    // required int32 three_5_gold = 15;
    if (has_three_5_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->three_5_gold());
    }

    // required int32 three_6_gold = 16;
    if (has_three_6_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->three_6_gold());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 three_7_gold = 17;
    if (has_three_7_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->three_7_gold());
    }

    // required int32 three_8_gold = 18;
    if (has_three_8_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->three_8_gold());
    }

    // required int32 three_9_gold = 19;
    if (has_three_9_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->three_9_gold());
    }

    // required int32 goblin_exp = 20;
    if (has_goblin_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goblin_exp());
    }

    // required int32 goblin_gold = 21;
    if (has_goblin_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goblin_gold());
    }

    // required int32 server_level_day = 22;
    if (has_server_level_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_level_day());
    }

    // required int32 treasure_exp = 23;
    if (has_treasure_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasure_exp());
    }

    // required int32 treasure_gold = 24;
    if (has_treasure_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasure_gold());
    }

  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    // required int32 reward_exp = 26;
    if (has_reward_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_exp());
    }

    // required int32 reward_gold = 27;
    if (has_reward_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_gold());
    }

    // required int32 hell_box_gold = 28;
    if (has_hell_box_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hell_box_gold());
    }

    // required int32 daykill_exp = 29;
    if (has_daykill_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daykill_exp());
    }

    // required int32 blood_exp = 30;
    if (has_blood_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blood_exp());
    }

    // required int32 blood_gold = 31;
    if (has_blood_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blood_gold());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required int32 blood_potion2 = 33;
    if (has_blood_potion2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blood_potion2());
    }

    // required int32 blood_potion3 = 34;
    if (has_blood_potion3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blood_potion3());
    }

    // required int32 black_exp = 35;
    if (has_black_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->black_exp());
    }

    // required int32 black_gold = 36;
    if (has_black_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->black_gold());
    }

    // required int32 text_answer_exp = 37;
    if (has_text_answer_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->text_answer_exp());
    }

    // required int32 text_answer_gold = 38;
    if (has_text_answer_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->text_answer_gold());
    }

    // required int32 pic_answer_exp = 39;
    if (has_pic_answer_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pic_answer_exp());
    }

    // required int32 pic_answer_gold = 40;
    if (has_pic_answer_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pic_answer_gold());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // required int32 arena_exp = 41;
    if (has_arena_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arena_exp());
    }

    // required int32 arena_gold = 42;
    if (has_arena_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arena_gold());
    }

    // required int32 arena_win_honor = 43;
    if (has_arena_win_honor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arena_win_honor());
    }

    // required int32 arena_lose_honor = 44;
    if (has_arena_lose_honor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arena_lose_honor());
    }

    // required int32 guild_exp = 45;
    if (has_guild_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_exp());
    }

    // required int32 guild_gold = 46;
    if (has_guild_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_gold());
    }

    // required int32 guildbattle_min_exp = 47;
    if (has_guildbattle_min_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildbattle_min_exp());
    }

    // required int32 guildbattle_battle_exp = 48;
    if (has_guildbattle_battle_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildbattle_battle_exp());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // required int32 guildbattle_win_exp = 49;
    if (has_guildbattle_win_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildbattle_win_exp());
    }

    // required int32 guildbattle_lost_exp = 50;
    if (has_guildbattle_lost_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildbattle_lost_exp());
    }

    // required int32 guildbattle_battle_gold = 51;
    if (has_guildbattle_battle_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildbattle_battle_gold());
    }

    // required int32 miss_gold = 52;
    if (has_miss_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->miss_gold());
    }

    // required int32 miss_crystal = 53;
    if (has_miss_crystal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->miss_crystal());
    }

  }
  // repeated int32 trial_field_hp = 25;
  {
    int data_size = 0;
    for (int i = 0; i < this->trial_field_hp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->trial_field_hp(i));
    }
    total_size += 2 * this->trial_field_hp_size() + data_size;
  }

  // repeated int32 blood_potion1 = 32;
  {
    int data_size = 0;
    for (int i = 0; i < this->blood_potion1_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->blood_potion1(i));
    }
    total_size += 2 * this->blood_potion1_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevelConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LevelConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LevelConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void LevelConfig::MergeFrom(const LevelConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  trial_field_hp_.MergeFrom(from.trial_field_hp_);
  blood_potion1_.MergeFrom(from.blood_potion1_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_main_actor_exp()) {
      set_main_actor_exp(from.main_actor_exp());
    }
    if (from.has_hero_actor_exp()) {
      set_hero_actor_exp(from.hero_actor_exp());
    }
    if (from.has_burning_exp()) {
      set_burning_exp(from.burning_exp());
    }
    if (from.has_burning_gold()) {
      set_burning_gold(from.burning_gold());
    }
    if (from.has_skyfall_exp()) {
      set_skyfall_exp(from.skyfall_exp());
    }
    if (from.has_skyfall_gold()) {
      set_skyfall_gold(from.skyfall_gold());
    }
    if (from.has_light_exp()) {
      set_light_exp(from.light_exp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_light_gold()) {
      set_light_gold(from.light_gold());
    }
    if (from.has_three_5_exp()) {
      set_three_5_exp(from.three_5_exp());
    }
    if (from.has_three_6_exp()) {
      set_three_6_exp(from.three_6_exp());
    }
    if (from.has_three_7_exp()) {
      set_three_7_exp(from.three_7_exp());
    }
    if (from.has_three_8_exp()) {
      set_three_8_exp(from.three_8_exp());
    }
    if (from.has_three_9_exp()) {
      set_three_9_exp(from.three_9_exp());
    }
    if (from.has_three_5_gold()) {
      set_three_5_gold(from.three_5_gold());
    }
    if (from.has_three_6_gold()) {
      set_three_6_gold(from.three_6_gold());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_three_7_gold()) {
      set_three_7_gold(from.three_7_gold());
    }
    if (from.has_three_8_gold()) {
      set_three_8_gold(from.three_8_gold());
    }
    if (from.has_three_9_gold()) {
      set_three_9_gold(from.three_9_gold());
    }
    if (from.has_goblin_exp()) {
      set_goblin_exp(from.goblin_exp());
    }
    if (from.has_goblin_gold()) {
      set_goblin_gold(from.goblin_gold());
    }
    if (from.has_server_level_day()) {
      set_server_level_day(from.server_level_day());
    }
    if (from.has_treasure_exp()) {
      set_treasure_exp(from.treasure_exp());
    }
    if (from.has_treasure_gold()) {
      set_treasure_gold(from.treasure_gold());
    }
  }
  if (from._has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (from.has_reward_exp()) {
      set_reward_exp(from.reward_exp());
    }
    if (from.has_reward_gold()) {
      set_reward_gold(from.reward_gold());
    }
    if (from.has_hell_box_gold()) {
      set_hell_box_gold(from.hell_box_gold());
    }
    if (from.has_daykill_exp()) {
      set_daykill_exp(from.daykill_exp());
    }
    if (from.has_blood_exp()) {
      set_blood_exp(from.blood_exp());
    }
    if (from.has_blood_gold()) {
      set_blood_gold(from.blood_gold());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_blood_potion2()) {
      set_blood_potion2(from.blood_potion2());
    }
    if (from.has_blood_potion3()) {
      set_blood_potion3(from.blood_potion3());
    }
    if (from.has_black_exp()) {
      set_black_exp(from.black_exp());
    }
    if (from.has_black_gold()) {
      set_black_gold(from.black_gold());
    }
    if (from.has_text_answer_exp()) {
      set_text_answer_exp(from.text_answer_exp());
    }
    if (from.has_text_answer_gold()) {
      set_text_answer_gold(from.text_answer_gold());
    }
    if (from.has_pic_answer_exp()) {
      set_pic_answer_exp(from.pic_answer_exp());
    }
    if (from.has_pic_answer_gold()) {
      set_pic_answer_gold(from.pic_answer_gold());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_arena_exp()) {
      set_arena_exp(from.arena_exp());
    }
    if (from.has_arena_gold()) {
      set_arena_gold(from.arena_gold());
    }
    if (from.has_arena_win_honor()) {
      set_arena_win_honor(from.arena_win_honor());
    }
    if (from.has_arena_lose_honor()) {
      set_arena_lose_honor(from.arena_lose_honor());
    }
    if (from.has_guild_exp()) {
      set_guild_exp(from.guild_exp());
    }
    if (from.has_guild_gold()) {
      set_guild_gold(from.guild_gold());
    }
    if (from.has_guildbattle_min_exp()) {
      set_guildbattle_min_exp(from.guildbattle_min_exp());
    }
    if (from.has_guildbattle_battle_exp()) {
      set_guildbattle_battle_exp(from.guildbattle_battle_exp());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_guildbattle_win_exp()) {
      set_guildbattle_win_exp(from.guildbattle_win_exp());
    }
    if (from.has_guildbattle_lost_exp()) {
      set_guildbattle_lost_exp(from.guildbattle_lost_exp());
    }
    if (from.has_guildbattle_battle_gold()) {
      set_guildbattle_battle_gold(from.guildbattle_battle_gold());
    }
    if (from.has_miss_gold()) {
      set_miss_gold(from.miss_gold());
    }
    if (from.has_miss_crystal()) {
      set_miss_crystal(from.miss_crystal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void LevelConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void LevelConfig::CopyFrom(const LevelConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool LevelConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x7effffff) != 0x7effffff) return false;
  if ((_has_bits_[1] & 0x001fffff) != 0x001fffff) return false;

  return true;
}

void LevelConfig::SetInitialized() {
  _has_bits_[0] |= 0x7effffff;
  _has_bits_[1] |= 0x001fffff;

  return;
}

void LevelConfig::Swap(LevelConfig* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(main_actor_exp_, other->main_actor_exp_);
    std::swap(hero_actor_exp_, other->hero_actor_exp_);
    std::swap(burning_exp_, other->burning_exp_);
    std::swap(burning_gold_, other->burning_gold_);
    std::swap(skyfall_exp_, other->skyfall_exp_);
    std::swap(skyfall_gold_, other->skyfall_gold_);
    std::swap(light_exp_, other->light_exp_);
    std::swap(light_gold_, other->light_gold_);
    std::swap(three_5_exp_, other->three_5_exp_);
    std::swap(three_6_exp_, other->three_6_exp_);
    std::swap(three_7_exp_, other->three_7_exp_);
    std::swap(three_8_exp_, other->three_8_exp_);
    std::swap(three_9_exp_, other->three_9_exp_);
    std::swap(three_5_gold_, other->three_5_gold_);
    std::swap(three_6_gold_, other->three_6_gold_);
    std::swap(three_7_gold_, other->three_7_gold_);
    std::swap(three_8_gold_, other->three_8_gold_);
    std::swap(three_9_gold_, other->three_9_gold_);
    std::swap(goblin_exp_, other->goblin_exp_);
    std::swap(goblin_gold_, other->goblin_gold_);
    std::swap(server_level_day_, other->server_level_day_);
    std::swap(treasure_exp_, other->treasure_exp_);
    std::swap(treasure_gold_, other->treasure_gold_);
    trial_field_hp_.Swap(&other->trial_field_hp_);
    std::swap(reward_exp_, other->reward_exp_);
    std::swap(reward_gold_, other->reward_gold_);
    std::swap(hell_box_gold_, other->hell_box_gold_);
    std::swap(daykill_exp_, other->daykill_exp_);
    std::swap(blood_exp_, other->blood_exp_);
    std::swap(blood_gold_, other->blood_gold_);
    blood_potion1_.Swap(&other->blood_potion1_);
    std::swap(blood_potion2_, other->blood_potion2_);
    std::swap(blood_potion3_, other->blood_potion3_);
    std::swap(black_exp_, other->black_exp_);
    std::swap(black_gold_, other->black_gold_);
    std::swap(text_answer_exp_, other->text_answer_exp_);
    std::swap(text_answer_gold_, other->text_answer_gold_);
    std::swap(pic_answer_exp_, other->pic_answer_exp_);
    std::swap(pic_answer_gold_, other->pic_answer_gold_);
    std::swap(arena_exp_, other->arena_exp_);
    std::swap(arena_gold_, other->arena_gold_);
    std::swap(arena_win_honor_, other->arena_win_honor_);
    std::swap(arena_lose_honor_, other->arena_lose_honor_);
    std::swap(guild_exp_, other->guild_exp_);
    std::swap(guild_gold_, other->guild_gold_);
    std::swap(guildbattle_min_exp_, other->guildbattle_min_exp_);
    std::swap(guildbattle_battle_exp_, other->guildbattle_battle_exp_);
    std::swap(guildbattle_win_exp_, other->guildbattle_win_exp_);
    std::swap(guildbattle_lost_exp_, other->guildbattle_lost_exp_);
    std::swap(guildbattle_battle_gold_, other->guildbattle_battle_gold_);
    std::swap(miss_gold_, other->miss_gold_);
    std::swap(miss_crystal_, other->miss_crystal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata LevelConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LevelConfig_descriptor_;
  metadata.reflection = LevelConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LackeysConfig::kIndexFieldNumber;
const int LackeysConfig::kAttribute1FieldNumber;
const int LackeysConfig::kAttribute2FieldNumber;
const int LackeysConfig::kValueFieldNumber;
#endif  // !_MSC_VER

LackeysConfig::LackeysConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LackeysConfig::InitAsDefaultInstance() {
}

LackeysConfig::LackeysConfig(const LackeysConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LackeysConfig::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  attribute1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attribute2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LackeysConfig::~LackeysConfig() {
  SharedDtor();
}

void LackeysConfig::SharedDtor() {
  if (attribute1_ != &::google::protobuf::internal::kEmptyString) {
    delete attribute1_;
  }
  if (attribute2_ != &::google::protobuf::internal::kEmptyString) {
    delete attribute2_;
  }
  if (this != default_instance_) {
  }
}

void LackeysConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LackeysConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LackeysConfig_descriptor_;
}

const LackeysConfig& LackeysConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActorConfig_2eproto();
  return *default_instance_;
}

LackeysConfig* LackeysConfig::default_instance_ = NULL;

LackeysConfig* LackeysConfig::New() const {
  return new LackeysConfig;
}

void LackeysConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    if (has_attribute1()) {
      if (attribute1_ != &::google::protobuf::internal::kEmptyString) {
        attribute1_->clear();
      }
    }
    if (has_attribute2()) {
      if (attribute2_ != &::google::protobuf::internal::kEmptyString) {
        attribute2_->clear();
      }
    }
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool LackeysConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attribute1;
        break;
      }

      // required string attribute1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attribute1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attribute1().data(), this->attribute1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute2;
        break;
      }

      // required string attribute2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attribute2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attribute2().data(), this->attribute2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_value;
        break;
      }

      // required int32 value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void LackeysConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required string attribute1 = 2;
  if (has_attribute1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attribute1().data(), this->attribute1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->attribute1(), output);
  }

  // required string attribute2 = 3;
  if (has_attribute2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attribute2().data(), this->attribute2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->attribute2(), output);
  }

  // required int32 value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LackeysConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required string attribute1 = 2;
  if (has_attribute1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attribute1().data(), this->attribute1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->attribute1(), target);
  }

  // required string attribute2 = 3;
  if (has_attribute2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attribute2().data(), this->attribute2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->attribute2(), target);
  }

  // required int32 value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LackeysConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required string attribute1 = 2;
    if (has_attribute1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attribute1());
    }

    // required string attribute2 = 3;
    if (has_attribute2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attribute2());
    }

    // required int32 value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LackeysConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LackeysConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LackeysConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void LackeysConfig::MergeFrom(const LackeysConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_attribute1()) {
      set_attribute1(from.attribute1());
    }
    if (from.has_attribute2()) {
      set_attribute2(from.attribute2());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void LackeysConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void LackeysConfig::CopyFrom(const LackeysConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool LackeysConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void LackeysConfig::SetInitialized() {
  _has_bits_[0] |= 0x0000000f;

  return;
}

void LackeysConfig::Swap(LackeysConfig* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(attribute1_, other->attribute1_);
    std::swap(attribute2_, other->attribute2_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata LackeysConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LackeysConfig_descriptor_;
  metadata.reflection = LackeysConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OneKeyEquip::kIdFieldNumber;
const int OneKeyEquip::kGem0FieldNumber;
const int OneKeyEquip::kGem1FieldNumber;
const int OneKeyEquip::kGem2FieldNumber;
#endif  // !_MSC_VER

OneKeyEquip::OneKeyEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OneKeyEquip::InitAsDefaultInstance() {
}

OneKeyEquip::OneKeyEquip(const OneKeyEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OneKeyEquip::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  gem0_ = 0;
  gem1_ = 0;
  gem2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneKeyEquip::~OneKeyEquip() {
  SharedDtor();
}

void OneKeyEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OneKeyEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneKeyEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneKeyEquip_descriptor_;
}

const OneKeyEquip& OneKeyEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActorConfig_2eproto();
  return *default_instance_;
}

OneKeyEquip* OneKeyEquip::default_instance_ = NULL;

OneKeyEquip* OneKeyEquip::New() const {
  return new OneKeyEquip;
}

void OneKeyEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    gem0_ = 0;
    gem1_ = 0;
    gem2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool OneKeyEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gem0;
        break;
      }

      // required int32 gem0 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gem0_)));
          set_has_gem0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gem1;
        break;
      }

      // required int32 gem1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gem1_)));
          set_has_gem1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gem2;
        break;
      }

      // required int32 gem2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gem2_)));
          set_has_gem2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void OneKeyEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 gem0 = 2;
  if (has_gem0()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gem0(), output);
  }

  // required int32 gem1 = 3;
  if (has_gem1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gem1(), output);
  }

  // required int32 gem2 = 4;
  if (has_gem2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gem2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OneKeyEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 gem0 = 2;
  if (has_gem0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gem0(), target);
  }

  // required int32 gem1 = 3;
  if (has_gem1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gem1(), target);
  }

  // required int32 gem2 = 4;
  if (has_gem2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gem2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OneKeyEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 gem0 = 2;
    if (has_gem0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gem0());
    }

    // required int32 gem1 = 3;
    if (has_gem1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gem1());
    }

    // required int32 gem2 = 4;
    if (has_gem2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gem2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneKeyEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OneKeyEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OneKeyEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void OneKeyEquip::MergeFrom(const OneKeyEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_gem0()) {
      set_gem0(from.gem0());
    }
    if (from.has_gem1()) {
      set_gem1(from.gem1());
    }
    if (from.has_gem2()) {
      set_gem2(from.gem2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void OneKeyEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void OneKeyEquip::CopyFrom(const OneKeyEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool OneKeyEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void OneKeyEquip::SetInitialized() {
  _has_bits_[0] |= 0x0000000f;

  return;
}

void OneKeyEquip::Swap(OneKeyEquip* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(gem0_, other->gem0_);
    std::swap(gem1_, other->gem1_);
    std::swap(gem2_, other->gem2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata OneKeyEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneKeyEquip_descriptor_;
  metadata.reflection = OneKeyEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OneKeyConfig::kIdFieldNumber;
const int OneKeyConfig::kHeroIdFieldNumber;
const int OneKeyConfig::kDisplayNameFieldNumber;
const int OneKeyConfig::kIconFieldNumber;
const int OneKeyConfig::kHairFieldNumber;
const int OneKeyConfig::kLevelFieldNumber;
const int OneKeyConfig::kEquipLevelFieldNumber;
const int OneKeyConfig::kStarFieldNumber;
const int OneKeyConfig::kColorFieldNumber;
const int OneKeyConfig::kSkillLevelFieldNumber;
const int OneKeyConfig::kEquipsFieldNumber;
#endif  // !_MSC_VER

OneKeyConfig::OneKeyConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OneKeyConfig::InitAsDefaultInstance() {
}

OneKeyConfig::OneKeyConfig(const OneKeyConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OneKeyConfig::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  hero_id_ = 0;
  display_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hair_ = 0;
  level_ = 0;
  equip_level_ = 0;
  star_ = 0;
  color_ = 0;
  skill_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneKeyConfig::~OneKeyConfig() {
  SharedDtor();
}

void OneKeyConfig::SharedDtor() {
  if (display_name_ != &::google::protobuf::internal::kEmptyString) {
    delete display_name_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (this != default_instance_) {
  }
}

void OneKeyConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneKeyConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneKeyConfig_descriptor_;
}

const OneKeyConfig& OneKeyConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActorConfig_2eproto();
  return *default_instance_;
}

OneKeyConfig* OneKeyConfig::default_instance_ = NULL;

OneKeyConfig* OneKeyConfig::New() const {
  return new OneKeyConfig;
}

void OneKeyConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    hero_id_ = 0;
    if (has_display_name()) {
      if (display_name_ != &::google::protobuf::internal::kEmptyString) {
        display_name_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    hair_ = 0;
    level_ = 0;
    equip_level_ = 0;
    star_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    color_ = 0;
    skill_level_ = 0;
  }
  equips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool OneKeyConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // required int32 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_display_name;
        break;
      }

      // required string display_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_display_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->display_name().data(), this->display_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_icon;
        break;
      }

      // required string icon = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hair;
        break;
      }

      // required int32 hair = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hair_)));
          set_has_hair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // required int32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_equip_level;
        break;
      }

      // required int32 equip_level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_level_)));
          set_has_equip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_star;
        break;
      }

      // required int32 star = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_color;
        break;
      }

      // required int32 color = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_skill_level;
        break;
      }

      // required int32 skill_level = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_equips;
        break;
      }

      // repeated .Config.OneKeyEquip equips = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_equips;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void OneKeyConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hero_id(), output);
  }

  // required string display_name = 3;
  if (has_display_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->display_name(), output);
  }

  // required string icon = 4;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->icon(), output);
  }

  // required int32 hair = 5;
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hair(), output);
  }

  // required int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }

  // required int32 equip_level = 7;
  if (has_equip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->equip_level(), output);
  }

  // required int32 star = 8;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->star(), output);
  }

  // required int32 color = 9;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->color(), output);
  }

  // required int32 skill_level = 10;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->skill_level(), output);
  }

  // repeated .Config.OneKeyEquip equips = 11;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->equips(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OneKeyConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hero_id(), target);
  }

  // required string display_name = 3;
  if (has_display_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->display_name(), target);
  }

  // required string icon = 4;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->icon(), target);
  }

  // required int32 hair = 5;
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hair(), target);
  }

  // required int32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }

  // required int32 equip_level = 7;
  if (has_equip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->equip_level(), target);
  }

  // required int32 star = 8;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->star(), target);
  }

  // required int32 color = 9;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->color(), target);
  }

  // required int32 skill_level = 10;
  if (has_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->skill_level(), target);
  }

  // repeated .Config.OneKeyEquip equips = 11;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->equips(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OneKeyConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_id());
    }

    // required string display_name = 3;
    if (has_display_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->display_name());
    }

    // required string icon = 4;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // required int32 hair = 5;
    if (has_hair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hair());
    }

    // required int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 equip_level = 7;
    if (has_equip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_level());
    }

    // required int32 star = 8;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 color = 9;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }

    // required int32 skill_level = 10;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_level());
    }

  }
  // repeated .Config.OneKeyEquip equips = 11;
  total_size += 1 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneKeyConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OneKeyConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OneKeyConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void OneKeyConfig::MergeFrom(const OneKeyConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  equips_.MergeFrom(from.equips_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_display_name()) {
      set_display_name(from.display_name());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_hair()) {
      set_hair(from.hair());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_equip_level()) {
      set_equip_level(from.equip_level());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void OneKeyConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void OneKeyConfig::CopyFrom(const OneKeyConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool OneKeyConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  for (int i = 0; i < equips_size(); i++) {
    if (!this->equips(i).IsInitialized()) return false;
  }
  return true;
}

void OneKeyConfig::SetInitialized() {
  _has_bits_[0] |= 0x000003ff;

  for (int i = 0; i < equips_size(); i++) {
    this->mutable_equips(i)->SetInitialized();
  }
  return;
}

void OneKeyConfig::Swap(OneKeyConfig* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(display_name_, other->display_name_);
    std::swap(icon_, other->icon_);
    std::swap(hair_, other->hair_);
    std::swap(level_, other->level_);
    std::swap(equip_level_, other->equip_level_);
    std::swap(star_, other->star_);
    std::swap(color_, other->color_);
    std::swap(skill_level_, other->skill_level_);
    equips_.Swap(&other->equips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata OneKeyConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneKeyConfig_descriptor_;
  metadata.reflection = OneKeyConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config

// @@protoc_insertion_point(global_scope)
