// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DrawCard.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DrawCard.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Config {

namespace {

const ::google::protobuf::Descriptor* DrawCardConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DrawCardConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DrawCard_2eproto() {
  protobuf_AddDesc_DrawCard_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DrawCard.proto");
  GOOGLE_CHECK(file != NULL);
  DrawCardConfig_descriptor_ = file->message_type(0);
  static const int DrawCardConfig_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawCardConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawCardConfig, draw_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawCardConfig, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawCardConfig, item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawCardConfig, item_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawCardConfig, in_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawCardConfig, out_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawCardConfig, switch_open_),
  };
  DrawCardConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DrawCardConfig_descriptor_,
      DrawCardConfig::default_instance_,
      DrawCardConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawCardConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawCardConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DrawCardConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DrawCard_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DrawCardConfig_descriptor_, &DrawCardConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DrawCard_2eproto() {
  delete DrawCardConfig::default_instance_;
  delete DrawCardConfig_reflection_;
}

void protobuf_AddDesc_DrawCard_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Config::protobuf_AddDesc_AllConfigEnum_2eproto();
  ::Packet::protobuf_AddDesc_AllPacketEnum_2eproto();
  ::Packet::protobuf_AddDesc_PlayerBasicInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016DrawCard.proto\022\006Config\032\023AllConfigEnum."
    "proto\032\023AllPacketEnum.proto\032\025PlayerBasicI"
    "nfo.proto\"\244\001\n\016DrawCardConfig\022\n\n\002id\030\001 \002(\005"
    "\022\022\n\ndraw_group\030\003 \002(\005\022\017\n\007item_id\030\004 \002(\005\022\022\n"
    "\nitem_count\030\005 \002(\005\022\023\n\013item_weight\030\006 \002(\005\022\020"
    "\n\010in_level\030\007 \002(\005\022\021\n\tout_level\030\010 \002(\005\022\023\n\013s"
    "witch_open\030\t \002(\005", 256);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DrawCard.proto", &protobuf_RegisterTypes);
  DrawCardConfig::default_instance_ = new DrawCardConfig();
  DrawCardConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DrawCard_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DrawCard_2eproto {
  StaticDescriptorInitializer_DrawCard_2eproto() {
    protobuf_AddDesc_DrawCard_2eproto();
  }
} static_descriptor_initializer_DrawCard_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DrawCardConfig::kIdFieldNumber;
const int DrawCardConfig::kDrawGroupFieldNumber;
const int DrawCardConfig::kItemIdFieldNumber;
const int DrawCardConfig::kItemCountFieldNumber;
const int DrawCardConfig::kItemWeightFieldNumber;
const int DrawCardConfig::kInLevelFieldNumber;
const int DrawCardConfig::kOutLevelFieldNumber;
const int DrawCardConfig::kSwitchOpenFieldNumber;
#endif  // !_MSC_VER

DrawCardConfig::DrawCardConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DrawCardConfig::InitAsDefaultInstance() {
}

DrawCardConfig::DrawCardConfig(const DrawCardConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DrawCardConfig::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  draw_group_ = 0;
  item_id_ = 0;
  item_count_ = 0;
  item_weight_ = 0;
  in_level_ = 0;
  out_level_ = 0;
  switch_open_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DrawCardConfig::~DrawCardConfig() {
  SharedDtor();
}

void DrawCardConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DrawCardConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DrawCardConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DrawCardConfig_descriptor_;
}

const DrawCardConfig& DrawCardConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DrawCard_2eproto();
  return *default_instance_;
}

DrawCardConfig* DrawCardConfig::default_instance_ = NULL;

DrawCardConfig* DrawCardConfig::New() const {
  return new DrawCardConfig;
}

void DrawCardConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    draw_group_ = 0;
    item_id_ = 0;
    item_count_ = 0;
    item_weight_ = 0;
    in_level_ = 0;
    out_level_ = 0;
    switch_open_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool DrawCardConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_draw_group;
        break;
      }

      // required int32 draw_group = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_draw_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &draw_group_)));
          set_has_draw_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_id;
        break;
      }

      // required int32 item_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_item_count;
        break;
      }

      // required int32 item_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_item_weight;
        break;
      }

      // required int32 item_weight = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_weight_)));
          set_has_item_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_in_level;
        break;
      }

      // required int32 in_level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &in_level_)));
          set_has_in_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_out_level;
        break;
      }

      // required int32 out_level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &out_level_)));
          set_has_out_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_switch_open;
        break;
      }

      // required int32 switch_open = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_switch_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &switch_open_)));
          set_has_switch_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void DrawCardConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 draw_group = 3;
  if (has_draw_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->draw_group(), output);
  }

  // required int32 item_id = 4;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->item_id(), output);
  }

  // required int32 item_count = 5;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->item_count(), output);
  }

  // required int32 item_weight = 6;
  if (has_item_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->item_weight(), output);
  }

  // required int32 in_level = 7;
  if (has_in_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->in_level(), output);
  }

  // required int32 out_level = 8;
  if (has_out_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->out_level(), output);
  }

  // required int32 switch_open = 9;
  if (has_switch_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->switch_open(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DrawCardConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 draw_group = 3;
  if (has_draw_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->draw_group(), target);
  }

  // required int32 item_id = 4;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->item_id(), target);
  }

  // required int32 item_count = 5;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->item_count(), target);
  }

  // required int32 item_weight = 6;
  if (has_item_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->item_weight(), target);
  }

  // required int32 in_level = 7;
  if (has_in_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->in_level(), target);
  }

  // required int32 out_level = 8;
  if (has_out_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->out_level(), target);
  }

  // required int32 switch_open = 9;
  if (has_switch_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->switch_open(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DrawCardConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 draw_group = 3;
    if (has_draw_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->draw_group());
    }

    // required int32 item_id = 4;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

    // required int32 item_count = 5;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_count());
    }

    // required int32 item_weight = 6;
    if (has_item_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_weight());
    }

    // required int32 in_level = 7;
    if (has_in_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->in_level());
    }

    // required int32 out_level = 8;
    if (has_out_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->out_level());
    }

    // required int32 switch_open = 9;
    if (has_switch_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->switch_open());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DrawCardConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DrawCardConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DrawCardConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void DrawCardConfig::MergeFrom(const DrawCardConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_draw_group()) {
      set_draw_group(from.draw_group());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
    if (from.has_item_weight()) {
      set_item_weight(from.item_weight());
    }
    if (from.has_in_level()) {
      set_in_level(from.in_level());
    }
    if (from.has_out_level()) {
      set_out_level(from.out_level());
    }
    if (from.has_switch_open()) {
      set_switch_open(from.switch_open());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void DrawCardConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void DrawCardConfig::CopyFrom(const DrawCardConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool DrawCardConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void DrawCardConfig::SetInitialized() {
  _has_bits_[0] |= 0x000000ff;

  return;
}

void DrawCardConfig::Swap(DrawCardConfig* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(draw_group_, other->draw_group_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_count_, other->item_count_);
    std::swap(item_weight_, other->item_weight_);
    std::swap(in_level_, other->in_level_);
    std::swap(out_level_, other->out_level_);
    std::swap(switch_open_, other->switch_open_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata DrawCardConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DrawCardConfig_descriptor_;
  metadata.reflection = DrawCardConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config

// @@protoc_insertion_point(global_scope)
