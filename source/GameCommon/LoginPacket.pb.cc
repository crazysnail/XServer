// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LoginPacket.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LoginPacket.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Packet {

namespace {

const ::google::protobuf::Descriptor* AccountNameVerify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountNameVerify_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountNameVerifyReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountNameVerifyReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AccountNameVerifyReply_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AccountRegist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountRegist_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountRegistReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountRegistReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AccountRegistReply_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LoginReply_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AccountPlayerList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountPlayerList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountModel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountModel_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountPlayerListReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountPlayerListReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_LoginPacket_2eproto() {
  protobuf_AddDesc_LoginPacket_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "LoginPacket.proto");
  GOOGLE_CHECK(file != NULL);
  AccountNameVerify_descriptor_ = file->message_type(0);
  static const int AccountNameVerify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountNameVerify, userid_),
  };
  AccountNameVerify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountNameVerify_descriptor_,
      AccountNameVerify::default_instance_,
      AccountNameVerify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountNameVerify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountNameVerify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountNameVerify));
  AccountNameVerifyReply_descriptor_ = file->message_type(1);
  static const int AccountNameVerifyReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountNameVerifyReply, requset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountNameVerifyReply, result_),
  };
  AccountNameVerifyReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountNameVerifyReply_descriptor_,
      AccountNameVerifyReply::default_instance_,
      AccountNameVerifyReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountNameVerifyReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountNameVerifyReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountNameVerifyReply));
  AccountNameVerifyReply_Result_descriptor_ = AccountNameVerifyReply_descriptor_->enum_type(0);
  AccountRegist_descriptor_ = file->message_type(2);
  static const int AccountRegist_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRegist, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRegist, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRegist, udid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRegist, partnerid_),
  };
  AccountRegist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountRegist_descriptor_,
      AccountRegist::default_instance_,
      AccountRegist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRegist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRegist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountRegist));
  AccountRegistReply_descriptor_ = file->message_type(3);
  static const int AccountRegistReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRegistReply, requset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRegistReply, result_),
  };
  AccountRegistReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountRegistReply_descriptor_,
      AccountRegistReply::default_instance_,
      AccountRegistReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRegistReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRegistReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountRegistReply));
  AccountRegistReply_Result_descriptor_ = AccountRegistReply_descriptor_->enum_type(0);
  LoginRequest_descriptor_ = file->message_type(4);
  static const int LoginRequest_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, loginkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, partnerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, device_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, udid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, osversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, login_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, gameversionid_),
  };
  LoginRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRequest_descriptor_,
      LoginRequest::default_instance_,
      LoginRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRequest));
  LoginReply_descriptor_ = file->message_type(5);
  static const int LoginReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReply, version_),
  };
  LoginReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginReply_descriptor_,
      LoginReply::default_instance_,
      LoginReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginReply));
  LoginReply_Result_descriptor_ = LoginReply_descriptor_->enum_type(0);
  AccountPlayerList_descriptor_ = file->message_type(6);
  static const int AccountPlayerList_offsets_[1] = {
  };
  AccountPlayerList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountPlayerList_descriptor_,
      AccountPlayerList::default_instance_,
      AccountPlayerList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountPlayerList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountPlayerList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountPlayerList));
  AccountModel_descriptor_ = file->message_type(7);
  static const int AccountModel_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountModel, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountModel, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountModel, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountModel, account_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountModel, udid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountModel, partnerid_),
  };
  AccountModel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountModel_descriptor_,
      AccountModel::default_instance_,
      AccountModel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountModel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountModel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountModel));
  AccountPlayerListReply_descriptor_ = file->message_type(8);
  static const int AccountPlayerListReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountPlayerListReply, player_list_),
  };
  AccountPlayerListReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountPlayerListReply_descriptor_,
      AccountPlayerListReply::default_instance_,
      AccountPlayerListReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountPlayerListReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountPlayerListReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountPlayerListReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_LoginPacket_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountNameVerify_descriptor_, &AccountNameVerify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountNameVerifyReply_descriptor_, &AccountNameVerifyReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountRegist_descriptor_, &AccountRegist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountRegistReply_descriptor_, &AccountRegistReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRequest_descriptor_, &LoginRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginReply_descriptor_, &LoginReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountPlayerList_descriptor_, &AccountPlayerList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountModel_descriptor_, &AccountModel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountPlayerListReply_descriptor_, &AccountPlayerListReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_LoginPacket_2eproto() {
  delete AccountNameVerify::default_instance_;
  delete AccountNameVerify_reflection_;
  delete AccountNameVerifyReply::default_instance_;
  delete AccountNameVerifyReply_reflection_;
  delete AccountRegist::default_instance_;
  delete AccountRegist_reflection_;
  delete AccountRegistReply::default_instance_;
  delete AccountRegistReply_reflection_;
  delete LoginRequest::default_instance_;
  delete LoginRequest_reflection_;
  delete LoginReply::default_instance_;
  delete LoginReply_reflection_;
  delete AccountPlayerList::default_instance_;
  delete AccountPlayerList_reflection_;
  delete AccountModel::default_instance_;
  delete AccountModel_reflection_;
  delete AccountPlayerListReply::default_instance_;
  delete AccountPlayerListReply_reflection_;
}

void protobuf_AddDesc_LoginPacket_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Packet::protobuf_AddDesc_AllPacketEnum_2eproto();
  ::Packet::protobuf_AddDesc_PlayerBasicInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021LoginPacket.proto\022\006Packet\032\023AllPacketEn"
    "um.proto\032\025PlayerBasicInfo.proto\"#\n\021Accou"
    "ntNameVerify\022\016\n\006userid\030\001 \002(\t\"\257\001\n\026Account"
    "NameVerifyReply\022*\n\007requset\030\001 \002(\0132\031.Packe"
    "t.AccountNameVerify\0225\n\006result\030\002 \002(\0162%.Pa"
    "cket.AccountNameVerifyReply.Result\"2\n\006Re"
    "sult\022\013\n\007SUCCESS\020\000\022\016\n\nDUPLICATED\020\001\022\013\n\007UNK"
    "NOWN\020\002\"R\n\rAccountRegist\022\016\n\006userid\030\001 \002(\t\022"
    "\020\n\010password\030\002 \002(\t\022\014\n\004udid\030\003 \002(\t\022\021\n\tpartn"
    "erid\030\004 \002(\005\"\330\001\n\022AccountRegistReply\022&\n\007req"
    "uset\030\001 \002(\0132\025.Packet.AccountRegist\0221\n\006res"
    "ult\030\002 \002(\0162!.Packet.AccountRegistReply.Re"
    "sult\"g\n\006Result\022\013\n\007SUCCESS\020\000\022\016\n\nDUPLICATE"
    "D\020\001\022\032\n\026ACCOUNT_LENGTH_INVALID\020\002\022\027\n\023PASSW"
    "ORD_TOW_SIMPLE\020\003\022\013\n\007UNKNOWN\020\004\"\350\001\n\014LoginR"
    "equest\022\017\n\007version\030\001 \002(\t\022\016\n\006userid\030\002 \002(\t\022"
    "\020\n\010password\030\003 \002(\t\022!\n\004type\030\004 \002(\0162\023.Packet"
    ".AccountType\022\020\n\010loginkey\030\005 \002(\t\022\021\n\tpartne"
    "rid\030\006 \002(\005\022\023\n\013device_type\030\007 \002(\t\022\014\n\004udid\030\010"
    " \002(\t\022\021\n\tosversion\030\t \002(\t\022\020\n\010login_ip\030\n \002("
    "\t\022\025\n\rgameversionid\030\013 \002(\005\"\275\001\n\nLoginReply\022"
    ")\n\006result\030\001 \002(\0162\031.Packet.LoginReply.Resu"
    "lt\022\017\n\007version\030\002 \001(\t\"s\n\006Result\022\013\n\007SUCCESS"
    "\020\000\022\024\n\020WRONG_LOGIN_TYPE\020\001\022\022\n\016WRONG_PASSWO"
    "RD\020\002\022\020\n\014WRONG_STATUS\020\003\022\023\n\017NO_SUCH_ACCOUN"
    "T\020\004\022\013\n\007UNKNOWN\020\005\"\023\n\021AccountPlayerList\"\212\001"
    "\n\014AccountModel\022\014\n\004guid\030\001 \002(\006\022\016\n\006userid\030\002"
    " \002(\t\022\020\n\010password\030\003 \002(\t\022)\n\014account_type\030\004"
    " \002(\0162\023.Packet.AccountType\022\014\n\004udid\030\005 \002(\t\022"
    "\021\n\tpartnerid\030\006 \002(\005\"C\n\026AccountPlayerListR"
    "eply\022)\n\013player_list\030\001 \003(\0132\024.Packet.Playe"
    "rDBInfo", 1247);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LoginPacket.proto", &protobuf_RegisterTypes);
  AccountNameVerify::default_instance_ = new AccountNameVerify();
  AccountNameVerifyReply::default_instance_ = new AccountNameVerifyReply();
  AccountRegist::default_instance_ = new AccountRegist();
  AccountRegistReply::default_instance_ = new AccountRegistReply();
  LoginRequest::default_instance_ = new LoginRequest();
  LoginReply::default_instance_ = new LoginReply();
  AccountPlayerList::default_instance_ = new AccountPlayerList();
  AccountModel::default_instance_ = new AccountModel();
  AccountPlayerListReply::default_instance_ = new AccountPlayerListReply();
  AccountNameVerify::default_instance_->InitAsDefaultInstance();
  AccountNameVerifyReply::default_instance_->InitAsDefaultInstance();
  AccountRegist::default_instance_->InitAsDefaultInstance();
  AccountRegistReply::default_instance_->InitAsDefaultInstance();
  LoginRequest::default_instance_->InitAsDefaultInstance();
  LoginReply::default_instance_->InitAsDefaultInstance();
  AccountPlayerList::default_instance_->InitAsDefaultInstance();
  AccountModel::default_instance_->InitAsDefaultInstance();
  AccountPlayerListReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LoginPacket_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LoginPacket_2eproto {
  StaticDescriptorInitializer_LoginPacket_2eproto() {
    protobuf_AddDesc_LoginPacket_2eproto();
  }
} static_descriptor_initializer_LoginPacket_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AccountNameVerify::kUseridFieldNumber;
#endif  // !_MSC_VER

AccountNameVerify::AccountNameVerify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountNameVerify::InitAsDefaultInstance() {
}

AccountNameVerify::AccountNameVerify(const AccountNameVerify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountNameVerify::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountNameVerify::~AccountNameVerify() {
  SharedDtor();
}

void AccountNameVerify::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void AccountNameVerify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountNameVerify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountNameVerify_descriptor_;
}

const AccountNameVerify& AccountNameVerify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginPacket_2eproto();
  return *default_instance_;
}

AccountNameVerify* AccountNameVerify::default_instance_ = NULL;

AccountNameVerify* AccountNameVerify::New() const {
  return new AccountNameVerify;
}

void AccountNameVerify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool AccountNameVerify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void AccountNameVerify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountNameVerify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountNameVerify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountNameVerify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountNameVerify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountNameVerify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void AccountNameVerify::MergeFrom(const AccountNameVerify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void AccountNameVerify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void AccountNameVerify::CopyFrom(const AccountNameVerify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool AccountNameVerify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AccountNameVerify::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void AccountNameVerify::Swap(AccountNameVerify* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata AccountNameVerify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountNameVerify_descriptor_;
  metadata.reflection = AccountNameVerify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* AccountNameVerifyReply_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountNameVerifyReply_Result_descriptor_;
}
bool AccountNameVerifyReply_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AccountNameVerifyReply_Result AccountNameVerifyReply::SUCCESS;
const AccountNameVerifyReply_Result AccountNameVerifyReply::DUPLICATED;
const AccountNameVerifyReply_Result AccountNameVerifyReply::UNKNOWN;
const AccountNameVerifyReply_Result AccountNameVerifyReply::Result_MIN;
const AccountNameVerifyReply_Result AccountNameVerifyReply::Result_MAX;
const int AccountNameVerifyReply::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int AccountNameVerifyReply::kRequsetFieldNumber;
const int AccountNameVerifyReply::kResultFieldNumber;
#endif  // !_MSC_VER

AccountNameVerifyReply::AccountNameVerifyReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountNameVerifyReply::InitAsDefaultInstance() {
  requset_ = const_cast< ::Packet::AccountNameVerify*>(&::Packet::AccountNameVerify::default_instance());
}

AccountNameVerifyReply::AccountNameVerifyReply(const AccountNameVerifyReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountNameVerifyReply::SharedCtor() {
  _cached_size_ = 0;
  requset_ = NULL;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountNameVerifyReply::~AccountNameVerifyReply() {
  SharedDtor();
}

void AccountNameVerifyReply::SharedDtor() {
  if (this != default_instance_) {
    delete requset_;
  }
}

void AccountNameVerifyReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountNameVerifyReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountNameVerifyReply_descriptor_;
}

const AccountNameVerifyReply& AccountNameVerifyReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginPacket_2eproto();
  return *default_instance_;
}

AccountNameVerifyReply* AccountNameVerifyReply::default_instance_ = NULL;

AccountNameVerifyReply* AccountNameVerifyReply::New() const {
  return new AccountNameVerifyReply;
}

void AccountNameVerifyReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_requset()) {
      if (requset_ != NULL) requset_->::Packet::AccountNameVerify::Clear();
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool AccountNameVerifyReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.AccountNameVerify requset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .Packet.AccountNameVerifyReply.Result result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::AccountNameVerifyReply_Result_IsValid(value)) {
            set_result(static_cast< ::Packet::AccountNameVerifyReply_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void AccountNameVerifyReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.AccountNameVerify requset = 1;
  if (has_requset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->requset(), output);
  }

  // required .Packet.AccountNameVerifyReply.Result result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountNameVerifyReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.AccountNameVerify requset = 1;
  if (has_requset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->requset(), target);
  }

  // required .Packet.AccountNameVerifyReply.Result result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountNameVerifyReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.AccountNameVerify requset = 1;
    if (has_requset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->requset());
    }

    // required .Packet.AccountNameVerifyReply.Result result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountNameVerifyReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountNameVerifyReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountNameVerifyReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void AccountNameVerifyReply::MergeFrom(const AccountNameVerifyReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requset()) {
      mutable_requset()->::Packet::AccountNameVerify::MergeFrom(from.requset());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void AccountNameVerifyReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void AccountNameVerifyReply::CopyFrom(const AccountNameVerifyReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool AccountNameVerifyReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_requset()) {
    if (!this->requset().IsInitialized()) return false;
  }
  return true;
}

void AccountNameVerifyReply::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  if (has_requset()) {
    this->mutable_requset()->SetInitialized();
  }
  return;
}

void AccountNameVerifyReply::Swap(AccountNameVerifyReply* other) {
  if (other != this) {
    std::swap(requset_, other->requset_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata AccountNameVerifyReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountNameVerifyReply_descriptor_;
  metadata.reflection = AccountNameVerifyReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountRegist::kUseridFieldNumber;
const int AccountRegist::kPasswordFieldNumber;
const int AccountRegist::kUdidFieldNumber;
const int AccountRegist::kPartneridFieldNumber;
#endif  // !_MSC_VER

AccountRegist::AccountRegist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountRegist::InitAsDefaultInstance() {
}

AccountRegist::AccountRegist(const AccountRegist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountRegist::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  udid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  partnerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountRegist::~AccountRegist() {
  SharedDtor();
}

void AccountRegist::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (udid_ != &::google::protobuf::internal::kEmptyString) {
    delete udid_;
  }
  if (this != default_instance_) {
  }
}

void AccountRegist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountRegist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountRegist_descriptor_;
}

const AccountRegist& AccountRegist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginPacket_2eproto();
  return *default_instance_;
}

AccountRegist* AccountRegist::default_instance_ = NULL;

AccountRegist* AccountRegist::New() const {
  return new AccountRegist;
}

void AccountRegist::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_udid()) {
      if (udid_ != &::google::protobuf::internal::kEmptyString) {
        udid_->clear();
      }
    }
    partnerid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool AccountRegist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_udid;
        break;
      }

      // required string udid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_udid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_udid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->udid().data(), this->udid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_partnerid;
        break;
      }

      // required int32 partnerid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partnerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partnerid_)));
          set_has_partnerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void AccountRegist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  // required string udid = 3;
  if (has_udid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->udid().data(), this->udid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->udid(), output);
  }

  // required int32 partnerid = 4;
  if (has_partnerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->partnerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountRegist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // required string udid = 3;
  if (has_udid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->udid().data(), this->udid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->udid(), target);
  }

  // required int32 partnerid = 4;
  if (has_partnerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->partnerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountRegist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // required string udid = 3;
    if (has_udid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->udid());
    }

    // required int32 partnerid = 4;
    if (has_partnerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->partnerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountRegist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountRegist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountRegist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void AccountRegist::MergeFrom(const AccountRegist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_udid()) {
      set_udid(from.udid());
    }
    if (from.has_partnerid()) {
      set_partnerid(from.partnerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void AccountRegist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void AccountRegist::CopyFrom(const AccountRegist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool AccountRegist::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void AccountRegist::SetInitialized() {
  _has_bits_[0] |= 0x0000000f;

  return;
}

void AccountRegist::Swap(AccountRegist* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(password_, other->password_);
    std::swap(udid_, other->udid_);
    std::swap(partnerid_, other->partnerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata AccountRegist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountRegist_descriptor_;
  metadata.reflection = AccountRegist_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* AccountRegistReply_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountRegistReply_Result_descriptor_;
}
bool AccountRegistReply_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AccountRegistReply_Result AccountRegistReply::SUCCESS;
const AccountRegistReply_Result AccountRegistReply::DUPLICATED;
const AccountRegistReply_Result AccountRegistReply::ACCOUNT_LENGTH_INVALID;
const AccountRegistReply_Result AccountRegistReply::PASSWORD_TOW_SIMPLE;
const AccountRegistReply_Result AccountRegistReply::UNKNOWN;
const AccountRegistReply_Result AccountRegistReply::Result_MIN;
const AccountRegistReply_Result AccountRegistReply::Result_MAX;
const int AccountRegistReply::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int AccountRegistReply::kRequsetFieldNumber;
const int AccountRegistReply::kResultFieldNumber;
#endif  // !_MSC_VER

AccountRegistReply::AccountRegistReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountRegistReply::InitAsDefaultInstance() {
  requset_ = const_cast< ::Packet::AccountRegist*>(&::Packet::AccountRegist::default_instance());
}

AccountRegistReply::AccountRegistReply(const AccountRegistReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountRegistReply::SharedCtor() {
  _cached_size_ = 0;
  requset_ = NULL;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountRegistReply::~AccountRegistReply() {
  SharedDtor();
}

void AccountRegistReply::SharedDtor() {
  if (this != default_instance_) {
    delete requset_;
  }
}

void AccountRegistReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountRegistReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountRegistReply_descriptor_;
}

const AccountRegistReply& AccountRegistReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginPacket_2eproto();
  return *default_instance_;
}

AccountRegistReply* AccountRegistReply::default_instance_ = NULL;

AccountRegistReply* AccountRegistReply::New() const {
  return new AccountRegistReply;
}

void AccountRegistReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_requset()) {
      if (requset_ != NULL) requset_->::Packet::AccountRegist::Clear();
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool AccountRegistReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.AccountRegist requset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .Packet.AccountRegistReply.Result result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::AccountRegistReply_Result_IsValid(value)) {
            set_result(static_cast< ::Packet::AccountRegistReply_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void AccountRegistReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.AccountRegist requset = 1;
  if (has_requset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->requset(), output);
  }

  // required .Packet.AccountRegistReply.Result result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountRegistReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.AccountRegist requset = 1;
  if (has_requset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->requset(), target);
  }

  // required .Packet.AccountRegistReply.Result result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountRegistReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.AccountRegist requset = 1;
    if (has_requset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->requset());
    }

    // required .Packet.AccountRegistReply.Result result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountRegistReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountRegistReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountRegistReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void AccountRegistReply::MergeFrom(const AccountRegistReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requset()) {
      mutable_requset()->::Packet::AccountRegist::MergeFrom(from.requset());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void AccountRegistReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void AccountRegistReply::CopyFrom(const AccountRegistReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool AccountRegistReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_requset()) {
    if (!this->requset().IsInitialized()) return false;
  }
  return true;
}

void AccountRegistReply::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  if (has_requset()) {
    this->mutable_requset()->SetInitialized();
  }
  return;
}

void AccountRegistReply::Swap(AccountRegistReply* other) {
  if (other != this) {
    std::swap(requset_, other->requset_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata AccountRegistReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountRegistReply_descriptor_;
  metadata.reflection = AccountRegistReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRequest::kVersionFieldNumber;
const int LoginRequest::kUseridFieldNumber;
const int LoginRequest::kPasswordFieldNumber;
const int LoginRequest::kTypeFieldNumber;
const int LoginRequest::kLoginkeyFieldNumber;
const int LoginRequest::kPartneridFieldNumber;
const int LoginRequest::kDeviceTypeFieldNumber;
const int LoginRequest::kUdidFieldNumber;
const int LoginRequest::kOsversionFieldNumber;
const int LoginRequest::kLoginIpFieldNumber;
const int LoginRequest::kGameversionidFieldNumber;
#endif  // !_MSC_VER

LoginRequest::LoginRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginRequest::InitAsDefaultInstance() {
}

LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRequest::SharedCtor() {
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  loginkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  partnerid_ = 0;
  device_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  udid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  osversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  login_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameversionid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRequest::~LoginRequest() {
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (loginkey_ != &::google::protobuf::internal::kEmptyString) {
    delete loginkey_;
  }
  if (device_type_ != &::google::protobuf::internal::kEmptyString) {
    delete device_type_;
  }
  if (udid_ != &::google::protobuf::internal::kEmptyString) {
    delete udid_;
  }
  if (osversion_ != &::google::protobuf::internal::kEmptyString) {
    delete osversion_;
  }
  if (login_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete login_ip_;
  }
  if (this != default_instance_) {
  }
}

void LoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRequest_descriptor_;
}

const LoginRequest& LoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginPacket_2eproto();
  return *default_instance_;
}

LoginRequest* LoginRequest::default_instance_ = NULL;

LoginRequest* LoginRequest::New() const {
  return new LoginRequest;
}

void LoginRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    type_ = 0;
    if (has_loginkey()) {
      if (loginkey_ != &::google::protobuf::internal::kEmptyString) {
        loginkey_->clear();
      }
    }
    partnerid_ = 0;
    if (has_device_type()) {
      if (device_type_ != &::google::protobuf::internal::kEmptyString) {
        device_type_->clear();
      }
    }
    if (has_udid()) {
      if (udid_ != &::google::protobuf::internal::kEmptyString) {
        udid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_osversion()) {
      if (osversion_ != &::google::protobuf::internal::kEmptyString) {
        osversion_->clear();
      }
    }
    if (has_login_ip()) {
      if (login_ip_ != &::google::protobuf::internal::kEmptyString) {
        login_ip_->clear();
      }
    }
    gameversionid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userid;
        break;
      }

      // required string userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // required string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required .Packet.AccountType type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::AccountType_IsValid(value)) {
            set_type(static_cast< ::Packet::AccountType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_loginkey;
        break;
      }

      // required string loginkey = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loginkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loginkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->loginkey().data(), this->loginkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_partnerid;
        break;
      }

      // required int32 partnerid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partnerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partnerid_)));
          set_has_partnerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_device_type;
        break;
      }

      // required string device_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_type().data(), this->device_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_udid;
        break;
      }

      // required string udid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_udid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_udid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->udid().data(), this->udid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_osversion;
        break;
      }

      // required string osversion = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_osversion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_osversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->osversion().data(), this->osversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_login_ip;
        break;
      }

      // required string login_ip = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->login_ip().data(), this->login_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_gameversionid;
        break;
      }

      // required int32 gameversionid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameversionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameversionid_)));
          set_has_gameversionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->version(), output);
  }

  // required string userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->userid(), output);
  }

  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }

  // required .Packet.AccountType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // required string loginkey = 5;
  if (has_loginkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loginkey().data(), this->loginkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->loginkey(), output);
  }

  // required int32 partnerid = 6;
  if (has_partnerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->partnerid(), output);
  }

  // required string device_type = 7;
  if (has_device_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_type().data(), this->device_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->device_type(), output);
  }

  // required string udid = 8;
  if (has_udid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->udid().data(), this->udid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->udid(), output);
  }

  // required string osversion = 9;
  if (has_osversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->osversion().data(), this->osversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->osversion(), output);
  }

  // required string login_ip = 10;
  if (has_login_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login_ip().data(), this->login_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->login_ip(), output);
  }

  // required int32 gameversionid = 11;
  if (has_gameversionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->gameversionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // required string userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userid(), target);
  }

  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // required .Packet.AccountType type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // required string loginkey = 5;
  if (has_loginkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loginkey().data(), this->loginkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->loginkey(), target);
  }

  // required int32 partnerid = 6;
  if (has_partnerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->partnerid(), target);
  }

  // required string device_type = 7;
  if (has_device_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_type().data(), this->device_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->device_type(), target);
  }

  // required string udid = 8;
  if (has_udid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->udid().data(), this->udid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->udid(), target);
  }

  // required string osversion = 9;
  if (has_osversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->osversion().data(), this->osversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->osversion(), target);
  }

  // required string login_ip = 10;
  if (has_login_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->login_ip().data(), this->login_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->login_ip(), target);
  }

  // required int32 gameversionid = 11;
  if (has_gameversionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->gameversionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // required string userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // required .Packet.AccountType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required string loginkey = 5;
    if (has_loginkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loginkey());
    }

    // required int32 partnerid = 6;
    if (has_partnerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->partnerid());
    }

    // required string device_type = 7;
    if (has_device_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_type());
    }

    // required string udid = 8;
    if (has_udid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->udid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string osversion = 9;
    if (has_osversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->osversion());
    }

    // required string login_ip = 10;
    if (has_login_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login_ip());
    }

    // required int32 gameversionid = 11;
    if (has_gameversionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameversionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_loginkey()) {
      set_loginkey(from.loginkey());
    }
    if (from.has_partnerid()) {
      set_partnerid(from.partnerid());
    }
    if (from.has_device_type()) {
      set_device_type(from.device_type());
    }
    if (from.has_udid()) {
      set_udid(from.udid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_osversion()) {
      set_osversion(from.osversion());
    }
    if (from.has_login_ip()) {
      set_login_ip(from.login_ip());
    }
    if (from.has_gameversionid()) {
      set_gameversionid(from.gameversionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void LoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool LoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void LoginRequest::SetInitialized() {
  _has_bits_[0] |= 0x000007ff;

  return;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(userid_, other->userid_);
    std::swap(password_, other->password_);
    std::swap(type_, other->type_);
    std::swap(loginkey_, other->loginkey_);
    std::swap(partnerid_, other->partnerid_);
    std::swap(device_type_, other->device_type_);
    std::swap(udid_, other->udid_);
    std::swap(osversion_, other->osversion_);
    std::swap(login_ip_, other->login_ip_);
    std::swap(gameversionid_, other->gameversionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata LoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRequest_descriptor_;
  metadata.reflection = LoginRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LoginReply_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginReply_Result_descriptor_;
}
bool LoginReply_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LoginReply_Result LoginReply::SUCCESS;
const LoginReply_Result LoginReply::WRONG_LOGIN_TYPE;
const LoginReply_Result LoginReply::WRONG_PASSWORD;
const LoginReply_Result LoginReply::WRONG_STATUS;
const LoginReply_Result LoginReply::NO_SUCH_ACCOUNT;
const LoginReply_Result LoginReply::UNKNOWN;
const LoginReply_Result LoginReply::Result_MIN;
const LoginReply_Result LoginReply::Result_MAX;
const int LoginReply::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LoginReply::kResultFieldNumber;
const int LoginReply::kVersionFieldNumber;
#endif  // !_MSC_VER

LoginReply::LoginReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginReply::InitAsDefaultInstance() {
}

LoginReply::LoginReply(const LoginReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginReply::~LoginReply() {
  SharedDtor();
}

void LoginReply::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void LoginReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginReply_descriptor_;
}

const LoginReply& LoginReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginPacket_2eproto();
  return *default_instance_;
}

LoginReply* LoginReply::default_instance_ = NULL;

LoginReply* LoginReply::New() const {
  return new LoginReply;
}

void LoginReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool LoginReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.LoginReply.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::LoginReply_Result_IsValid(value)) {
            set_result(static_cast< ::Packet::LoginReply_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }

      // optional string version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void LoginReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.LoginReply.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.LoginReply.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.LoginReply.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void LoginReply::MergeFrom(const LoginReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void LoginReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void LoginReply::CopyFrom(const LoginReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool LoginReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LoginReply::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void LoginReply::Swap(LoginReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata LoginReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginReply_descriptor_;
  metadata.reflection = LoginReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AccountPlayerList::AccountPlayerList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountPlayerList::InitAsDefaultInstance() {
}

AccountPlayerList::AccountPlayerList(const AccountPlayerList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountPlayerList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountPlayerList::~AccountPlayerList() {
  SharedDtor();
}

void AccountPlayerList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AccountPlayerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountPlayerList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountPlayerList_descriptor_;
}

const AccountPlayerList& AccountPlayerList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginPacket_2eproto();
  return *default_instance_;
}

AccountPlayerList* AccountPlayerList::default_instance_ = NULL;

AccountPlayerList* AccountPlayerList::New() const {
  return new AccountPlayerList;
}

void AccountPlayerList::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool AccountPlayerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void AccountPlayerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountPlayerList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountPlayerList::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountPlayerList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountPlayerList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountPlayerList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void AccountPlayerList::MergeFrom(const AccountPlayerList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void AccountPlayerList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void AccountPlayerList::CopyFrom(const AccountPlayerList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool AccountPlayerList::IsInitialized() const {

  return true;
}

void AccountPlayerList::SetInitialized() {

  return;
}

void AccountPlayerList::Swap(AccountPlayerList* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata AccountPlayerList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountPlayerList_descriptor_;
  metadata.reflection = AccountPlayerList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountModel::kGuidFieldNumber;
const int AccountModel::kUseridFieldNumber;
const int AccountModel::kPasswordFieldNumber;
const int AccountModel::kAccountTypeFieldNumber;
const int AccountModel::kUdidFieldNumber;
const int AccountModel::kPartneridFieldNumber;
#endif  // !_MSC_VER

AccountModel::AccountModel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountModel::InitAsDefaultInstance() {
}

AccountModel::AccountModel(const AccountModel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountModel::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_type_ = 0;
  udid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  partnerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountModel::~AccountModel() {
  SharedDtor();
}

void AccountModel::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (udid_ != &::google::protobuf::internal::kEmptyString) {
    delete udid_;
  }
  if (this != default_instance_) {
  }
}

void AccountModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountModel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountModel_descriptor_;
}

const AccountModel& AccountModel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginPacket_2eproto();
  return *default_instance_;
}

AccountModel* AccountModel::default_instance_ = NULL;

AccountModel* AccountModel::New() const {
  return new AccountModel;
}

void AccountModel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    account_type_ = 0;
    if (has_udid()) {
      if (udid_ != &::google::protobuf::internal::kEmptyString) {
        udid_->clear();
      }
    }
    partnerid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool AccountModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userid;
        break;
      }

      // required string userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // required string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_account_type;
        break;
      }

      // required .Packet.AccountType account_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::AccountType_IsValid(value)) {
            set_account_type(static_cast< ::Packet::AccountType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_udid;
        break;
      }

      // required string udid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_udid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_udid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->udid().data(), this->udid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_partnerid;
        break;
      }

      // required int32 partnerid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partnerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partnerid_)));
          set_has_partnerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void AccountModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required string userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->userid(), output);
  }

  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }

  // required .Packet.AccountType account_type = 4;
  if (has_account_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->account_type(), output);
  }

  // required string udid = 5;
  if (has_udid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->udid().data(), this->udid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->udid(), output);
  }

  // required int32 partnerid = 6;
  if (has_partnerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->partnerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountModel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required string userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userid(), target);
  }

  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // required .Packet.AccountType account_type = 4;
  if (has_account_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->account_type(), target);
  }

  // required string udid = 5;
  if (has_udid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->udid().data(), this->udid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->udid(), target);
  }

  // required int32 partnerid = 6;
  if (has_partnerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->partnerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountModel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required string userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // required .Packet.AccountType account_type = 4;
    if (has_account_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->account_type());
    }

    // required string udid = 5;
    if (has_udid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->udid());
    }

    // required int32 partnerid = 6;
    if (has_partnerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->partnerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountModel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountModel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountModel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void AccountModel::MergeFrom(const AccountModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_account_type()) {
      set_account_type(from.account_type());
    }
    if (from.has_udid()) {
      set_udid(from.udid());
    }
    if (from.has_partnerid()) {
      set_partnerid(from.partnerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void AccountModel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void AccountModel::CopyFrom(const AccountModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool AccountModel::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void AccountModel::SetInitialized() {
  _has_bits_[0] |= 0x0000003f;

  return;
}

void AccountModel::Swap(AccountModel* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(userid_, other->userid_);
    std::swap(password_, other->password_);
    std::swap(account_type_, other->account_type_);
    std::swap(udid_, other->udid_);
    std::swap(partnerid_, other->partnerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata AccountModel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountModel_descriptor_;
  metadata.reflection = AccountModel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountPlayerListReply::kPlayerListFieldNumber;
#endif  // !_MSC_VER

AccountPlayerListReply::AccountPlayerListReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountPlayerListReply::InitAsDefaultInstance() {
}

AccountPlayerListReply::AccountPlayerListReply(const AccountPlayerListReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountPlayerListReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountPlayerListReply::~AccountPlayerListReply() {
  SharedDtor();
}

void AccountPlayerListReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AccountPlayerListReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountPlayerListReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountPlayerListReply_descriptor_;
}

const AccountPlayerListReply& AccountPlayerListReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginPacket_2eproto();
  return *default_instance_;
}

AccountPlayerListReply* AccountPlayerListReply::default_instance_ = NULL;

AccountPlayerListReply* AccountPlayerListReply::New() const {
  return new AccountPlayerListReply;
}

void AccountPlayerListReply::Clear() {
  player_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool AccountPlayerListReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.PlayerDBInfo player_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_player_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void AccountPlayerListReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.PlayerDBInfo player_list = 1;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountPlayerListReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.PlayerDBInfo player_list = 1;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountPlayerListReply::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.PlayerDBInfo player_list = 1;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountPlayerListReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountPlayerListReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountPlayerListReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void AccountPlayerListReply::MergeFrom(const AccountPlayerListReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_list_.MergeFrom(from.player_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void AccountPlayerListReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void AccountPlayerListReply::CopyFrom(const AccountPlayerListReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool AccountPlayerListReply::IsInitialized() const {

  for (int i = 0; i < player_list_size(); i++) {
    if (!this->player_list(i).IsInitialized()) return false;
  }
  return true;
}

void AccountPlayerListReply::SetInitialized() {

  for (int i = 0; i < player_list_size(); i++) {
    this->mutable_player_list(i)->SetInitialized();
  }
  return;
}

void AccountPlayerListReply::Swap(AccountPlayerListReply* other) {
  if (other != this) {
    player_list_.Swap(&other->player_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata AccountPlayerListReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountPlayerListReply_descriptor_;
  metadata.reflection = AccountPlayerListReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

// @@protoc_insertion_point(global_scope)
