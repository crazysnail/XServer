// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlayerBasicInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PlayerBasicInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Packet {

namespace {

const ::google::protobuf::Descriptor* PlayerToken_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerToken_reflection_ = NULL;
const ::google::protobuf::Descriptor* HookOption_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HookOption_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerSetting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerSetting_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerOperateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerOperateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerOperateInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerOperateInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerOperateInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerOperateInfoReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerBasicInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerBasicInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerDBInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerDBInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerSpeedChanged_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerSpeedChanged_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerTime_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PlayerBasicInfo_2eproto() {
  protobuf_AddDesc_PlayerBasicInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PlayerBasicInfo.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerToken_descriptor_ = file->message_type(0);
  static const int PlayerToken_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerToken, crystal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerToken, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerToken, honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerToken, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerToken, dayvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerToken, bank_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerToken, exp_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerToken, cold_exp_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerToken, lawful_),
  };
  PlayerToken_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerToken_descriptor_,
      PlayerToken::default_instance_,
      PlayerToken_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerToken, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerToken, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerToken));
  HookOption_descriptor_ = file->message_type(1);
  static const int HookOption_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HookOption, auto_equip_durable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HookOption, auto_potion_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HookOption, auto_potion_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HookOption, auto_buy_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HookOption, auto_split_green_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HookOption, auto_split_blue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HookOption, auto_refix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HookOption, auto_use_potion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HookOption, auto_buy_potion_),
  };
  HookOption_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HookOption_descriptor_,
      HookOption::default_instance_,
      HookOption_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HookOption, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HookOption, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HookOption));
  PlayerSetting_descriptor_ = file->message_type(2);
  static const int PlayerSetting_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSetting, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSetting, ignore_add_friend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSetting, reject_fight_),
  };
  PlayerSetting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerSetting_descriptor_,
      PlayerSetting::default_instance_,
      PlayerSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSetting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerSetting));
  PlayerOperateInfo_descriptor_ = file->message_type(3);
  static const int PlayerOperateInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerOperateInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerOperateInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerOperateInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerOperateInfo, hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerOperateInfo, init_actor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerOperateInfo, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerOperateInfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerOperateInfo, guildposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerOperateInfo, teamid_),
  };
  PlayerOperateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerOperateInfo_descriptor_,
      PlayerOperateInfo::default_instance_,
      PlayerOperateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerOperateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerOperateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerOperateInfo));
  PlayerOperateInfoReq_descriptor_ = file->message_type(4);
  static const int PlayerOperateInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerOperateInfoReq, guid_),
  };
  PlayerOperateInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerOperateInfoReq_descriptor_,
      PlayerOperateInfoReq::default_instance_,
      PlayerOperateInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerOperateInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerOperateInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerOperateInfoReq));
  PlayerOperateInfoReply_descriptor_ = file->message_type(5);
  static const int PlayerOperateInfoReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerOperateInfoReply, optinfo_),
  };
  PlayerOperateInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerOperateInfoReply_descriptor_,
      PlayerOperateInfoReply::default_instance_,
      PlayerOperateInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerOperateInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerOperateInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerOperateInfoReply));
  PlayerBasicInfo_descriptor_ = file->message_type(6);
  static const int PlayerBasicInfo_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBasicInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBasicInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBasicInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBasicInfo, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBasicInfo, scene_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBasicInfo, player_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBasicInfo, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBasicInfo, move_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBasicInfo, init_actor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBasicInfo, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBasicInfo, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBasicInfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBasicInfo, camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBasicInfo, mount_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBasicInfo, battle_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBasicInfo, hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBasicInfo, master_level_),
  };
  PlayerBasicInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerBasicInfo_descriptor_,
      PlayerBasicInfo::default_instance_,
      PlayerBasicInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBasicInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerBasicInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerBasicInfo));
  PlayerDBInfo_descriptor_ = file->message_type(7);
  static const int PlayerDBInfo_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDBInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDBInfo, account_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDBInfo, basic_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDBInfo, lackeys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDBInfo, text_answers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDBInfo, pic_answers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDBInfo, token_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDBInfo, hook_option_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDBInfo, inited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDBInfo, hook_stage_tracker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDBInfo, last_hook_stage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDBInfo, last_logout_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDBInfo, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDBInfo, charge_all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDBInfo, refresh_time_),
  };
  PlayerDBInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerDBInfo_descriptor_,
      PlayerDBInfo::default_instance_,
      PlayerDBInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDBInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDBInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerDBInfo));
  PlayerSpeedChanged_descriptor_ = file->message_type(8);
  static const int PlayerSpeedChanged_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSpeedChanged, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSpeedChanged, move_speed_),
  };
  PlayerSpeedChanged_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerSpeedChanged_descriptor_,
      PlayerSpeedChanged::default_instance_,
      PlayerSpeedChanged_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSpeedChanged, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSpeedChanged, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerSpeedChanged));
  ServerTime_descriptor_ = file->message_type(9);
  static const int ServerTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTime, time_),
  };
  ServerTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerTime_descriptor_,
      ServerTime::default_instance_,
      ServerTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerTime));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PlayerBasicInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerToken_descriptor_, &PlayerToken::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HookOption_descriptor_, &HookOption::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerSetting_descriptor_, &PlayerSetting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerOperateInfo_descriptor_, &PlayerOperateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerOperateInfoReq_descriptor_, &PlayerOperateInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerOperateInfoReply_descriptor_, &PlayerOperateInfoReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerBasicInfo_descriptor_, &PlayerBasicInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerDBInfo_descriptor_, &PlayerDBInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerSpeedChanged_descriptor_, &PlayerSpeedChanged::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerTime_descriptor_, &ServerTime::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PlayerBasicInfo_2eproto() {
  delete PlayerToken::default_instance_;
  delete PlayerToken_reflection_;
  delete HookOption::default_instance_;
  delete HookOption_reflection_;
  delete PlayerSetting::default_instance_;
  delete PlayerSetting_reflection_;
  delete PlayerOperateInfo::default_instance_;
  delete PlayerOperateInfo_reflection_;
  delete PlayerOperateInfoReq::default_instance_;
  delete PlayerOperateInfoReq_reflection_;
  delete PlayerOperateInfoReply::default_instance_;
  delete PlayerOperateInfoReply_reflection_;
  delete PlayerBasicInfo::default_instance_;
  delete PlayerBasicInfo_reflection_;
  delete PlayerDBInfo::default_instance_;
  delete PlayerDBInfo_reflection_;
  delete PlayerSpeedChanged::default_instance_;
  delete PlayerSpeedChanged_reflection_;
  delete ServerTime::default_instance_;
  delete ServerTime_reflection_;
}

void protobuf_AddDesc_PlayerBasicInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Packet::protobuf_AddDesc_Base_2eproto();
  ::Packet::protobuf_AddDesc_AllPacketEnum_2eproto();
  ::Packet::protobuf_AddDesc_ProtoBufOption_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025PlayerBasicInfo.proto\022\006Packet\032\nBase.pr"
    "oto\032\023AllPacketEnum.proto\032\024ProtoBufOption"
    ".proto\"\253\001\n\013PlayerToken\022\017\n\007crystal\030\001 \002(\005\022"
    "\014\n\004gold\030\002 \002(\005\022\r\n\005honor\030\003 \002(\005\022\016\n\006reward\030\004"
    " \002(\005\022\020\n\010dayvalue\030\005 \002(\005\022\021\n\tbank_gold\030\006 \002("
    "\005\022\021\n\texp_point\030\007 \002(\005\022\026\n\016cold_exp_point\030\010"
    " \002(\005\022\016\n\006lawful\030\t \002(\005\"\241\002\n\nHookOption\022\036\n\022a"
    "uto_equip_durable\030\001 \002(\005:\00250\022 \n\016auto_poti"
    "on_id\030\002 \002(\005:\01020122001\022\032\n\016auto_potion_hp\030"
    "\003 \002(\005:\00230\022\032\n\016auto_buy_count\030\004 \002(\005:\00210\022\037\n"
    "\020auto_split_green\030\005 \002(\010:\005false\022\036\n\017auto_s"
    "plit_blue\030\006 \002(\010:\005false\022\030\n\nauto_refix\030\007 \002"
    "(\010:\004true\022\036\n\017auto_use_potion\030\010 \002(\010:\005false"
    "\022\036\n\017auto_buy_potion\030\t \002(\010:\005false\"N\n\rPlay"
    "erSetting\022\014\n\004guid\030\001 \002(\006\022\031\n\021ignore_add_fr"
    "iend\030\002 \002(\005\022\024\n\014reject_fight\030\003 \002(\005\"\305\001\n\021Pla"
    "yerOperateInfo\022\014\n\004guid\030\001 \002(\006\022\014\n\004name\030\002 \002"
    "(\t\022\r\n\005level\030\003 \002(\005\022\014\n\004hair\030\004 \002(\005\022\025\n\rinit_"
    "actor_id\030\005 \002(\005\022\017\n\007guildid\030\006 \002(\006\022\021\n\tguild"
    "name\030\007 \001(\t\022,\n\rguildposition\030\010 \001(\0162\025.Pack"
    "et.GuildPosition\022\016\n\006teamid\030\t \002(\006\"$\n\024Play"
    "erOperateInfoReq\022\014\n\004guid\030\001 \002(\006\"D\n\026Player"
    "OperateInfoReply\022*\n\007optinfo\030\001 \002(\0132\031.Pack"
    "et.PlayerOperateInfo\"\375\002\n\017PlayerBasicInfo"
    "\022\014\n\004guid\030\001 \002(\006\022\r\n\005level\030\002 \002(\005\022\014\n\004name\030\003 "
    "\002(\t\022\020\n\010scene_id\030\004 \002(\005\022#\n\tscene_pos\030\005 \002(\013"
    "2\020.Packet.Position\0220\n\rplayer_status\030\006 \002("
    "\0162\031.Packet.PlayerSceneStatus\022\021\n\tdirectio"
    "n\030\007 \002(\002\022\022\n\nmove_speed\030\010 \002(\007\022\025\n\rinit_acto"
    "r_id\030\t \002(\005\022\014\n\004icon\030\n \002(\t\022\017\n\007guildid\030\013 \002("
    "\006\022\021\n\tguildname\030\014 \002(\t\022\032\n\004camp\030\r \002(\0162\014.Pac"
    "ket.Camp\022\020\n\010mount_id\030\017 \002(\005\022\024\n\014battle_sco"
    "re\030\020 \002(\005\022\014\n\004hair\030\021 \002(\005\022\024\n\014master_level\030\022"
    " \002(\005\"\224\003\n\014PlayerDBInfo\022\014\n\004guid\030\001 \002(\006\022\024\n\014a"
    "ccount_guid\030\002 \002(\006\022+\n\nbasic_info\030\003 \002(\0132\027."
    "Packet.PlayerBasicInfo\022\025\n\007lackeys\030\004 \003(\006B"
    "\004\300\363\030\004\022\024\n\014text_answers\030\005 \002(\t\022\023\n\013pic_answe"
    "rs\030\006 \002(\t\022\'\n\ntoken_data\030\007 \002(\0132\023.Packet.Pl"
    "ayerToken\022\'\n\013hook_option\030\010 \002(\0132\022.Packet."
    "HookOption\022\016\n\006inited\030\t \002(\010\022\032\n\022hook_stage"
    "_tracker\030\n \002(\005\022\032\n\022last_hook_stage_id\030\013 \002"
    "(\005\022\030\n\020last_logout_time\030\014 \002(\r\022\023\n\013create_t"
    "ime\030\r \002(\r\022\022\n\ncharge_all\030\016 \002(\r\022\024\n\014refresh"
    "_time\030\017 \002(\r\"6\n\022PlayerSpeedChanged\022\014\n\004gui"
    "d\030\001 \002(\006\022\022\n\nmove_speed\030\002 \002(\007\"\032\n\nServerTim"
    "e\022\014\n\004time\030\001 \002(\006", 1815);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PlayerBasicInfo.proto", &protobuf_RegisterTypes);
  PlayerToken::default_instance_ = new PlayerToken();
  HookOption::default_instance_ = new HookOption();
  PlayerSetting::default_instance_ = new PlayerSetting();
  PlayerOperateInfo::default_instance_ = new PlayerOperateInfo();
  PlayerOperateInfoReq::default_instance_ = new PlayerOperateInfoReq();
  PlayerOperateInfoReply::default_instance_ = new PlayerOperateInfoReply();
  PlayerBasicInfo::default_instance_ = new PlayerBasicInfo();
  PlayerDBInfo::default_instance_ = new PlayerDBInfo();
  PlayerSpeedChanged::default_instance_ = new PlayerSpeedChanged();
  ServerTime::default_instance_ = new ServerTime();
  PlayerToken::default_instance_->InitAsDefaultInstance();
  HookOption::default_instance_->InitAsDefaultInstance();
  PlayerSetting::default_instance_->InitAsDefaultInstance();
  PlayerOperateInfo::default_instance_->InitAsDefaultInstance();
  PlayerOperateInfoReq::default_instance_->InitAsDefaultInstance();
  PlayerOperateInfoReply::default_instance_->InitAsDefaultInstance();
  PlayerBasicInfo::default_instance_->InitAsDefaultInstance();
  PlayerDBInfo::default_instance_->InitAsDefaultInstance();
  PlayerSpeedChanged::default_instance_->InitAsDefaultInstance();
  ServerTime::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PlayerBasicInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PlayerBasicInfo_2eproto {
  StaticDescriptorInitializer_PlayerBasicInfo_2eproto() {
    protobuf_AddDesc_PlayerBasicInfo_2eproto();
  }
} static_descriptor_initializer_PlayerBasicInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PlayerToken::kCrystalFieldNumber;
const int PlayerToken::kGoldFieldNumber;
const int PlayerToken::kHonorFieldNumber;
const int PlayerToken::kRewardFieldNumber;
const int PlayerToken::kDayvalueFieldNumber;
const int PlayerToken::kBankGoldFieldNumber;
const int PlayerToken::kExpPointFieldNumber;
const int PlayerToken::kColdExpPointFieldNumber;
const int PlayerToken::kLawfulFieldNumber;
#endif  // !_MSC_VER

PlayerToken::PlayerToken()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerToken::InitAsDefaultInstance() {
}

PlayerToken::PlayerToken(const PlayerToken& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerToken::SharedCtor() {
  _cached_size_ = 0;
  crystal_ = 0;
  gold_ = 0;
  honor_ = 0;
  reward_ = 0;
  dayvalue_ = 0;
  bank_gold_ = 0;
  exp_point_ = 0;
  cold_exp_point_ = 0;
  lawful_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerToken::~PlayerToken() {
  SharedDtor();
}

void PlayerToken::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerToken::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerToken_descriptor_;
}

const PlayerToken& PlayerToken::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerBasicInfo_2eproto();
  return *default_instance_;
}

PlayerToken* PlayerToken::default_instance_ = NULL;

PlayerToken* PlayerToken::New() const {
  return new PlayerToken;
}

void PlayerToken::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    crystal_ = 0;
    gold_ = 0;
    honor_ = 0;
    reward_ = 0;
    dayvalue_ = 0;
    bank_gold_ = 0;
    exp_point_ = 0;
    cold_exp_point_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    lawful_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 crystal = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crystal_)));
          set_has_crystal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }

      // required int32 gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_honor;
        break;
      }

      // required int32 honor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_honor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &honor_)));
          set_has_honor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reward;
        break;
      }

      // required int32 reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dayvalue;
        break;
      }

      // required int32 dayvalue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dayvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dayvalue_)));
          set_has_dayvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bank_gold;
        break;
      }

      // required int32 bank_gold = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bank_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bank_gold_)));
          set_has_bank_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_exp_point;
        break;
      }

      // required int32 exp_point = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_point_)));
          set_has_exp_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cold_exp_point;
        break;
      }

      // required int32 cold_exp_point = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cold_exp_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cold_exp_point_)));
          set_has_cold_exp_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_lawful;
        break;
      }

      // required int32 lawful = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lawful:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lawful_)));
          set_has_lawful();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 crystal = 1;
  if (has_crystal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->crystal(), output);
  }

  // required int32 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gold(), output);
  }

  // required int32 honor = 3;
  if (has_honor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->honor(), output);
  }

  // required int32 reward = 4;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reward(), output);
  }

  // required int32 dayvalue = 5;
  if (has_dayvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dayvalue(), output);
  }

  // required int32 bank_gold = 6;
  if (has_bank_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bank_gold(), output);
  }

  // required int32 exp_point = 7;
  if (has_exp_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->exp_point(), output);
  }

  // required int32 cold_exp_point = 8;
  if (has_cold_exp_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->cold_exp_point(), output);
  }

  // required int32 lawful = 9;
  if (has_lawful()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->lawful(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerToken::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 crystal = 1;
  if (has_crystal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->crystal(), target);
  }

  // required int32 gold = 2;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gold(), target);
  }

  // required int32 honor = 3;
  if (has_honor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->honor(), target);
  }

  // required int32 reward = 4;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reward(), target);
  }

  // required int32 dayvalue = 5;
  if (has_dayvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dayvalue(), target);
  }

  // required int32 bank_gold = 6;
  if (has_bank_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bank_gold(), target);
  }

  // required int32 exp_point = 7;
  if (has_exp_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->exp_point(), target);
  }

  // required int32 cold_exp_point = 8;
  if (has_cold_exp_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->cold_exp_point(), target);
  }

  // required int32 lawful = 9;
  if (has_lawful()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->lawful(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerToken::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 crystal = 1;
    if (has_crystal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crystal());
    }

    // required int32 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // required int32 honor = 3;
    if (has_honor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->honor());
    }

    // required int32 reward = 4;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward());
    }

    // required int32 dayvalue = 5;
    if (has_dayvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dayvalue());
    }

    // required int32 bank_gold = 6;
    if (has_bank_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bank_gold());
    }

    // required int32 exp_point = 7;
    if (has_exp_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp_point());
    }

    // required int32 cold_exp_point = 8;
    if (has_cold_exp_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cold_exp_point());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 lawful = 9;
    if (has_lawful()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lawful());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerToken::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerToken* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerToken*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerToken::MergeFrom(const PlayerToken& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_crystal()) {
      set_crystal(from.crystal());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_honor()) {
      set_honor(from.honor());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
    if (from.has_dayvalue()) {
      set_dayvalue(from.dayvalue());
    }
    if (from.has_bank_gold()) {
      set_bank_gold(from.bank_gold());
    }
    if (from.has_exp_point()) {
      set_exp_point(from.exp_point());
    }
    if (from.has_cold_exp_point()) {
      set_cold_exp_point(from.cold_exp_point());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lawful()) {
      set_lawful(from.lawful());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerToken::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerToken::CopyFrom(const PlayerToken& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerToken::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void PlayerToken::SetInitialized() {
  _has_bits_[0] |= 0x000001ff;

  return;
}

void PlayerToken::Swap(PlayerToken* other) {
  if (other != this) {
    std::swap(crystal_, other->crystal_);
    std::swap(gold_, other->gold_);
    std::swap(honor_, other->honor_);
    std::swap(reward_, other->reward_);
    std::swap(dayvalue_, other->dayvalue_);
    std::swap(bank_gold_, other->bank_gold_);
    std::swap(exp_point_, other->exp_point_);
    std::swap(cold_exp_point_, other->cold_exp_point_);
    std::swap(lawful_, other->lawful_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerToken::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerToken_descriptor_;
  metadata.reflection = PlayerToken_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HookOption::kAutoEquipDurableFieldNumber;
const int HookOption::kAutoPotionIdFieldNumber;
const int HookOption::kAutoPotionHpFieldNumber;
const int HookOption::kAutoBuyCountFieldNumber;
const int HookOption::kAutoSplitGreenFieldNumber;
const int HookOption::kAutoSplitBlueFieldNumber;
const int HookOption::kAutoRefixFieldNumber;
const int HookOption::kAutoUsePotionFieldNumber;
const int HookOption::kAutoBuyPotionFieldNumber;
#endif  // !_MSC_VER

HookOption::HookOption()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HookOption::InitAsDefaultInstance() {
}

HookOption::HookOption(const HookOption& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HookOption::SharedCtor() {
  _cached_size_ = 0;
  auto_equip_durable_ = 50;
  auto_potion_id_ = 20122001;
  auto_potion_hp_ = 30;
  auto_buy_count_ = 10;
  auto_split_green_ = false;
  auto_split_blue_ = false;
  auto_refix_ = true;
  auto_use_potion_ = false;
  auto_buy_potion_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HookOption::~HookOption() {
  SharedDtor();
}

void HookOption::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HookOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HookOption::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HookOption_descriptor_;
}

const HookOption& HookOption::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerBasicInfo_2eproto();
  return *default_instance_;
}

HookOption* HookOption::default_instance_ = NULL;

HookOption* HookOption::New() const {
  return new HookOption;
}

void HookOption::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    auto_equip_durable_ = 50;
    auto_potion_id_ = 20122001;
    auto_potion_hp_ = 30;
    auto_buy_count_ = 10;
    auto_split_green_ = false;
    auto_split_blue_ = false;
    auto_refix_ = true;
    auto_use_potion_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    auto_buy_potion_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool HookOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 auto_equip_durable = 1 [default = 50];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_equip_durable_)));
          set_has_auto_equip_durable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_auto_potion_id;
        break;
      }

      // required int32 auto_potion_id = 2 [default = 20122001];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_potion_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_potion_id_)));
          set_has_auto_potion_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_auto_potion_hp;
        break;
      }

      // required int32 auto_potion_hp = 3 [default = 30];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_potion_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_potion_hp_)));
          set_has_auto_potion_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_auto_buy_count;
        break;
      }

      // required int32 auto_buy_count = 4 [default = 10];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_buy_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_buy_count_)));
          set_has_auto_buy_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_auto_split_green;
        break;
      }

      // required bool auto_split_green = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_split_green:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_split_green_)));
          set_has_auto_split_green();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_auto_split_blue;
        break;
      }

      // required bool auto_split_blue = 6 [default = false];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_split_blue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_split_blue_)));
          set_has_auto_split_blue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_auto_refix;
        break;
      }

      // required bool auto_refix = 7 [default = true];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_refix:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_refix_)));
          set_has_auto_refix();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_auto_use_potion;
        break;
      }

      // required bool auto_use_potion = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_use_potion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_use_potion_)));
          set_has_auto_use_potion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_auto_buy_potion;
        break;
      }

      // required bool auto_buy_potion = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_buy_potion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_buy_potion_)));
          set_has_auto_buy_potion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void HookOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 auto_equip_durable = 1 [default = 50];
  if (has_auto_equip_durable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->auto_equip_durable(), output);
  }

  // required int32 auto_potion_id = 2 [default = 20122001];
  if (has_auto_potion_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->auto_potion_id(), output);
  }

  // required int32 auto_potion_hp = 3 [default = 30];
  if (has_auto_potion_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->auto_potion_hp(), output);
  }

  // required int32 auto_buy_count = 4 [default = 10];
  if (has_auto_buy_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->auto_buy_count(), output);
  }

  // required bool auto_split_green = 5 [default = false];
  if (has_auto_split_green()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->auto_split_green(), output);
  }

  // required bool auto_split_blue = 6 [default = false];
  if (has_auto_split_blue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->auto_split_blue(), output);
  }

  // required bool auto_refix = 7 [default = true];
  if (has_auto_refix()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->auto_refix(), output);
  }

  // required bool auto_use_potion = 8 [default = false];
  if (has_auto_use_potion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->auto_use_potion(), output);
  }

  // required bool auto_buy_potion = 9 [default = false];
  if (has_auto_buy_potion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->auto_buy_potion(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HookOption::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 auto_equip_durable = 1 [default = 50];
  if (has_auto_equip_durable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->auto_equip_durable(), target);
  }

  // required int32 auto_potion_id = 2 [default = 20122001];
  if (has_auto_potion_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->auto_potion_id(), target);
  }

  // required int32 auto_potion_hp = 3 [default = 30];
  if (has_auto_potion_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->auto_potion_hp(), target);
  }

  // required int32 auto_buy_count = 4 [default = 10];
  if (has_auto_buy_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->auto_buy_count(), target);
  }

  // required bool auto_split_green = 5 [default = false];
  if (has_auto_split_green()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->auto_split_green(), target);
  }

  // required bool auto_split_blue = 6 [default = false];
  if (has_auto_split_blue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->auto_split_blue(), target);
  }

  // required bool auto_refix = 7 [default = true];
  if (has_auto_refix()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->auto_refix(), target);
  }

  // required bool auto_use_potion = 8 [default = false];
  if (has_auto_use_potion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->auto_use_potion(), target);
  }

  // required bool auto_buy_potion = 9 [default = false];
  if (has_auto_buy_potion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->auto_buy_potion(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HookOption::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 auto_equip_durable = 1 [default = 50];
    if (has_auto_equip_durable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_equip_durable());
    }

    // required int32 auto_potion_id = 2 [default = 20122001];
    if (has_auto_potion_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_potion_id());
    }

    // required int32 auto_potion_hp = 3 [default = 30];
    if (has_auto_potion_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_potion_hp());
    }

    // required int32 auto_buy_count = 4 [default = 10];
    if (has_auto_buy_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_buy_count());
    }

    // required bool auto_split_green = 5 [default = false];
    if (has_auto_split_green()) {
      total_size += 1 + 1;
    }

    // required bool auto_split_blue = 6 [default = false];
    if (has_auto_split_blue()) {
      total_size += 1 + 1;
    }

    // required bool auto_refix = 7 [default = true];
    if (has_auto_refix()) {
      total_size += 1 + 1;
    }

    // required bool auto_use_potion = 8 [default = false];
    if (has_auto_use_potion()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool auto_buy_potion = 9 [default = false];
    if (has_auto_buy_potion()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HookOption::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HookOption* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HookOption*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void HookOption::MergeFrom(const HookOption& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_auto_equip_durable()) {
      set_auto_equip_durable(from.auto_equip_durable());
    }
    if (from.has_auto_potion_id()) {
      set_auto_potion_id(from.auto_potion_id());
    }
    if (from.has_auto_potion_hp()) {
      set_auto_potion_hp(from.auto_potion_hp());
    }
    if (from.has_auto_buy_count()) {
      set_auto_buy_count(from.auto_buy_count());
    }
    if (from.has_auto_split_green()) {
      set_auto_split_green(from.auto_split_green());
    }
    if (from.has_auto_split_blue()) {
      set_auto_split_blue(from.auto_split_blue());
    }
    if (from.has_auto_refix()) {
      set_auto_refix(from.auto_refix());
    }
    if (from.has_auto_use_potion()) {
      set_auto_use_potion(from.auto_use_potion());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_auto_buy_potion()) {
      set_auto_buy_potion(from.auto_buy_potion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void HookOption::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void HookOption::CopyFrom(const HookOption& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool HookOption::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void HookOption::SetInitialized() {
  _has_bits_[0] |= 0x000001ff;

  return;
}

void HookOption::Swap(HookOption* other) {
  if (other != this) {
    std::swap(auto_equip_durable_, other->auto_equip_durable_);
    std::swap(auto_potion_id_, other->auto_potion_id_);
    std::swap(auto_potion_hp_, other->auto_potion_hp_);
    std::swap(auto_buy_count_, other->auto_buy_count_);
    std::swap(auto_split_green_, other->auto_split_green_);
    std::swap(auto_split_blue_, other->auto_split_blue_);
    std::swap(auto_refix_, other->auto_refix_);
    std::swap(auto_use_potion_, other->auto_use_potion_);
    std::swap(auto_buy_potion_, other->auto_buy_potion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata HookOption::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HookOption_descriptor_;
  metadata.reflection = HookOption_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerSetting::kGuidFieldNumber;
const int PlayerSetting::kIgnoreAddFriendFieldNumber;
const int PlayerSetting::kRejectFightFieldNumber;
#endif  // !_MSC_VER

PlayerSetting::PlayerSetting()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerSetting::InitAsDefaultInstance() {
}

PlayerSetting::PlayerSetting(const PlayerSetting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerSetting::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  ignore_add_friend_ = 0;
  reject_fight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerSetting::~PlayerSetting() {
  SharedDtor();
}

void PlayerSetting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerSetting_descriptor_;
}

const PlayerSetting& PlayerSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerBasicInfo_2eproto();
  return *default_instance_;
}

PlayerSetting* PlayerSetting::default_instance_ = NULL;

PlayerSetting* PlayerSetting::New() const {
  return new PlayerSetting;
}

void PlayerSetting::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    ignore_add_friend_ = 0;
    reject_fight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ignore_add_friend;
        break;
      }

      // required int32 ignore_add_friend = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ignore_add_friend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ignore_add_friend_)));
          set_has_ignore_add_friend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reject_fight;
        break;
      }

      // required int32 reject_fight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reject_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reject_fight_)));
          set_has_reject_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required int32 ignore_add_friend = 2;
  if (has_ignore_add_friend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ignore_add_friend(), output);
  }

  // required int32 reject_fight = 3;
  if (has_reject_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reject_fight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerSetting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required int32 ignore_add_friend = 2;
  if (has_ignore_add_friend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ignore_add_friend(), target);
  }

  // required int32 reject_fight = 3;
  if (has_reject_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reject_fight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerSetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required int32 ignore_add_friend = 2;
    if (has_ignore_add_friend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ignore_add_friend());
    }

    // required int32 reject_fight = 3;
    if (has_reject_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reject_fight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerSetting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerSetting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerSetting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerSetting::MergeFrom(const PlayerSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_ignore_add_friend()) {
      set_ignore_add_friend(from.ignore_add_friend());
    }
    if (from.has_reject_fight()) {
      set_reject_fight(from.reject_fight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerSetting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerSetting::CopyFrom(const PlayerSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerSetting::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PlayerSetting::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  return;
}

void PlayerSetting::Swap(PlayerSetting* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(ignore_add_friend_, other->ignore_add_friend_);
    std::swap(reject_fight_, other->reject_fight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerSetting_descriptor_;
  metadata.reflection = PlayerSetting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerOperateInfo::kGuidFieldNumber;
const int PlayerOperateInfo::kNameFieldNumber;
const int PlayerOperateInfo::kLevelFieldNumber;
const int PlayerOperateInfo::kHairFieldNumber;
const int PlayerOperateInfo::kInitActorIdFieldNumber;
const int PlayerOperateInfo::kGuildidFieldNumber;
const int PlayerOperateInfo::kGuildnameFieldNumber;
const int PlayerOperateInfo::kGuildpositionFieldNumber;
const int PlayerOperateInfo::kTeamidFieldNumber;
#endif  // !_MSC_VER

PlayerOperateInfo::PlayerOperateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerOperateInfo::InitAsDefaultInstance() {
}

PlayerOperateInfo::PlayerOperateInfo(const PlayerOperateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerOperateInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  hair_ = 0;
  init_actor_id_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildposition_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerOperateInfo::~PlayerOperateInfo() {
  SharedDtor();
}

void PlayerOperateInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void PlayerOperateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerOperateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerOperateInfo_descriptor_;
}

const PlayerOperateInfo& PlayerOperateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerBasicInfo_2eproto();
  return *default_instance_;
}

PlayerOperateInfo* PlayerOperateInfo::default_instance_ = NULL;

PlayerOperateInfo* PlayerOperateInfo::New() const {
  return new PlayerOperateInfo;
}

void PlayerOperateInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    hair_ = 0;
    init_actor_id_ = 0;
    guildid_ = GOOGLE_ULONGLONG(0);
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    guildposition_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    teamid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerOperateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hair;
        break;
      }

      // required int32 hair = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hair_)));
          set_has_hair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_init_actor_id;
        break;
      }

      // required int32 init_actor_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_init_actor_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &init_actor_id_)));
          set_has_init_actor_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_guildid;
        break;
      }

      // required fixed64 guildid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_guildname;
        break;
      }

      // optional string guildname = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_guildposition;
        break;
      }

      // optional .Packet.GuildPosition guildposition = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildposition:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::GuildPosition_IsValid(value)) {
            set_guildposition(static_cast< ::Packet::GuildPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_teamid;
        break;
      }

      // required fixed64 teamid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerOperateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // required int32 hair = 4;
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hair(), output);
  }

  // required int32 init_actor_id = 5;
  if (has_init_actor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->init_actor_id(), output);
  }

  // required fixed64 guildid = 6;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->guildid(), output);
  }

  // optional string guildname = 7;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->guildname(), output);
  }

  // optional .Packet.GuildPosition guildposition = 8;
  if (has_guildposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->guildposition(), output);
  }

  // required fixed64 teamid = 9;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(9, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerOperateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // required int32 hair = 4;
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hair(), target);
  }

  // required int32 init_actor_id = 5;
  if (has_init_actor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->init_actor_id(), target);
  }

  // required fixed64 guildid = 6;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->guildid(), target);
  }

  // optional string guildname = 7;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->guildname(), target);
  }

  // optional .Packet.GuildPosition guildposition = 8;
  if (has_guildposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->guildposition(), target);
  }

  // required fixed64 teamid = 9;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(9, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerOperateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 hair = 4;
    if (has_hair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hair());
    }

    // required int32 init_actor_id = 5;
    if (has_init_actor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->init_actor_id());
    }

    // required fixed64 guildid = 6;
    if (has_guildid()) {
      total_size += 1 + 8;
    }

    // optional string guildname = 7;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional .Packet.GuildPosition guildposition = 8;
    if (has_guildposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->guildposition());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required fixed64 teamid = 9;
    if (has_teamid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerOperateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerOperateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerOperateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerOperateInfo::MergeFrom(const PlayerOperateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_hair()) {
      set_hair(from.hair());
    }
    if (from.has_init_actor_id()) {
      set_init_actor_id(from.init_actor_id());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_guildposition()) {
      set_guildposition(from.guildposition());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerOperateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerOperateInfo::CopyFrom(const PlayerOperateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerOperateInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000013f) != 0x0000013f) return false;

  return true;
}

void PlayerOperateInfo::SetInitialized() {
  _has_bits_[0] |= 0x0000013f;

  return;
}

void PlayerOperateInfo::Swap(PlayerOperateInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(hair_, other->hair_);
    std::swap(init_actor_id_, other->init_actor_id_);
    std::swap(guildid_, other->guildid_);
    std::swap(guildname_, other->guildname_);
    std::swap(guildposition_, other->guildposition_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerOperateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerOperateInfo_descriptor_;
  metadata.reflection = PlayerOperateInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerOperateInfoReq::kGuidFieldNumber;
#endif  // !_MSC_VER

PlayerOperateInfoReq::PlayerOperateInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerOperateInfoReq::InitAsDefaultInstance() {
}

PlayerOperateInfoReq::PlayerOperateInfoReq(const PlayerOperateInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerOperateInfoReq::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerOperateInfoReq::~PlayerOperateInfoReq() {
  SharedDtor();
}

void PlayerOperateInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerOperateInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerOperateInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerOperateInfoReq_descriptor_;
}

const PlayerOperateInfoReq& PlayerOperateInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerBasicInfo_2eproto();
  return *default_instance_;
}

PlayerOperateInfoReq* PlayerOperateInfoReq::default_instance_ = NULL;

PlayerOperateInfoReq* PlayerOperateInfoReq::New() const {
  return new PlayerOperateInfoReq;
}

void PlayerOperateInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerOperateInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerOperateInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerOperateInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerOperateInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerOperateInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerOperateInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerOperateInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerOperateInfoReq::MergeFrom(const PlayerOperateInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerOperateInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerOperateInfoReq::CopyFrom(const PlayerOperateInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerOperateInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayerOperateInfoReq::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void PlayerOperateInfoReq::Swap(PlayerOperateInfoReq* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerOperateInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerOperateInfoReq_descriptor_;
  metadata.reflection = PlayerOperateInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerOperateInfoReply::kOptinfoFieldNumber;
#endif  // !_MSC_VER

PlayerOperateInfoReply::PlayerOperateInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerOperateInfoReply::InitAsDefaultInstance() {
  optinfo_ = const_cast< ::Packet::PlayerOperateInfo*>(&::Packet::PlayerOperateInfo::default_instance());
}

PlayerOperateInfoReply::PlayerOperateInfoReply(const PlayerOperateInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerOperateInfoReply::SharedCtor() {
  _cached_size_ = 0;
  optinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerOperateInfoReply::~PlayerOperateInfoReply() {
  SharedDtor();
}

void PlayerOperateInfoReply::SharedDtor() {
  if (this != default_instance_) {
    delete optinfo_;
  }
}

void PlayerOperateInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerOperateInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerOperateInfoReply_descriptor_;
}

const PlayerOperateInfoReply& PlayerOperateInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerBasicInfo_2eproto();
  return *default_instance_;
}

PlayerOperateInfoReply* PlayerOperateInfoReply::default_instance_ = NULL;

PlayerOperateInfoReply* PlayerOperateInfoReply::New() const {
  return new PlayerOperateInfoReply;
}

void PlayerOperateInfoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_optinfo()) {
      if (optinfo_ != NULL) optinfo_->::Packet::PlayerOperateInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerOperateInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.PlayerOperateInfo optinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_optinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerOperateInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.PlayerOperateInfo optinfo = 1;
  if (has_optinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->optinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerOperateInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.PlayerOperateInfo optinfo = 1;
  if (has_optinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->optinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerOperateInfoReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.PlayerOperateInfo optinfo = 1;
    if (has_optinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->optinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerOperateInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerOperateInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerOperateInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerOperateInfoReply::MergeFrom(const PlayerOperateInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_optinfo()) {
      mutable_optinfo()->::Packet::PlayerOperateInfo::MergeFrom(from.optinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerOperateInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerOperateInfoReply::CopyFrom(const PlayerOperateInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerOperateInfoReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_optinfo()) {
    if (!this->optinfo().IsInitialized()) return false;
  }
  return true;
}

void PlayerOperateInfoReply::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  if (has_optinfo()) {
    this->mutable_optinfo()->SetInitialized();
  }
  return;
}

void PlayerOperateInfoReply::Swap(PlayerOperateInfoReply* other) {
  if (other != this) {
    std::swap(optinfo_, other->optinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerOperateInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerOperateInfoReply_descriptor_;
  metadata.reflection = PlayerOperateInfoReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerBasicInfo::kGuidFieldNumber;
const int PlayerBasicInfo::kLevelFieldNumber;
const int PlayerBasicInfo::kNameFieldNumber;
const int PlayerBasicInfo::kSceneIdFieldNumber;
const int PlayerBasicInfo::kScenePosFieldNumber;
const int PlayerBasicInfo::kPlayerStatusFieldNumber;
const int PlayerBasicInfo::kDirectionFieldNumber;
const int PlayerBasicInfo::kMoveSpeedFieldNumber;
const int PlayerBasicInfo::kInitActorIdFieldNumber;
const int PlayerBasicInfo::kIconFieldNumber;
const int PlayerBasicInfo::kGuildidFieldNumber;
const int PlayerBasicInfo::kGuildnameFieldNumber;
const int PlayerBasicInfo::kCampFieldNumber;
const int PlayerBasicInfo::kMountIdFieldNumber;
const int PlayerBasicInfo::kBattleScoreFieldNumber;
const int PlayerBasicInfo::kHairFieldNumber;
const int PlayerBasicInfo::kMasterLevelFieldNumber;
#endif  // !_MSC_VER

PlayerBasicInfo::PlayerBasicInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerBasicInfo::InitAsDefaultInstance() {
  scene_pos_ = const_cast< ::Packet::Position*>(&::Packet::Position::default_instance());
}

PlayerBasicInfo::PlayerBasicInfo(const PlayerBasicInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerBasicInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  level_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scene_id_ = 0;
  scene_pos_ = NULL;
  player_status_ = 0;
  direction_ = 0;
  move_speed_ = 0u;
  init_actor_id_ = 0;
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildid_ = GOOGLE_ULONGLONG(0);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  camp_ = 0;
  mount_id_ = 0;
  battle_score_ = 0;
  hair_ = 0;
  master_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerBasicInfo::~PlayerBasicInfo() {
  SharedDtor();
}

void PlayerBasicInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (this != default_instance_) {
    delete scene_pos_;
  }
}

void PlayerBasicInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerBasicInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerBasicInfo_descriptor_;
}

const PlayerBasicInfo& PlayerBasicInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerBasicInfo_2eproto();
  return *default_instance_;
}

PlayerBasicInfo* PlayerBasicInfo::default_instance_ = NULL;

PlayerBasicInfo* PlayerBasicInfo::New() const {
  return new PlayerBasicInfo;
}

void PlayerBasicInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    level_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    scene_id_ = 0;
    if (has_scene_pos()) {
      if (scene_pos_ != NULL) scene_pos_->::Packet::Position::Clear();
    }
    player_status_ = 0;
    direction_ = 0;
    move_speed_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    init_actor_id_ = 0;
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    guildid_ = GOOGLE_ULONGLONG(0);
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    camp_ = 0;
    mount_id_ = 0;
    battle_score_ = 0;
    hair_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    master_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerBasicInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scene_id;
        break;
      }

      // required int32 scene_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_scene_pos;
        break;
      }

      // required .Packet.Position scene_pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scene_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scene_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_player_status;
        break;
      }

      // required .Packet.PlayerSceneStatus player_status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::PlayerSceneStatus_IsValid(value)) {
            set_player_status(static_cast< ::Packet::PlayerSceneStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_direction;
        break;
      }

      // required float direction = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_move_speed;
        break;
      }

      // required fixed32 move_speed = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_move_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &move_speed_)));
          set_has_move_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_init_actor_id;
        break;
      }

      // required int32 init_actor_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_init_actor_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &init_actor_id_)));
          set_has_init_actor_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_icon;
        break;
      }

      // required string icon = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_guildid;
        break;
      }

      // required fixed64 guildid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_guildname;
        break;
      }

      // required string guildname = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_camp;
        break;
      }

      // required .Packet.Camp camp = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::Camp_IsValid(value)) {
            set_camp(static_cast< ::Packet::Camp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_mount_id;
        break;
      }

      // required int32 mount_id = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mount_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mount_id_)));
          set_has_mount_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_battle_score;
        break;
      }

      // required int32 battle_score = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_score_)));
          set_has_battle_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_hair;
        break;
      }

      // required int32 hair = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hair_)));
          set_has_hair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_master_level;
        break;
      }

      // required int32 master_level = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_master_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &master_level_)));
          set_has_master_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerBasicInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required int32 scene_id = 4;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->scene_id(), output);
  }

  // required .Packet.Position scene_pos = 5;
  if (has_scene_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->scene_pos(), output);
  }

  // required .Packet.PlayerSceneStatus player_status = 6;
  if (has_player_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->player_status(), output);
  }

  // required float direction = 7;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->direction(), output);
  }

  // required fixed32 move_speed = 8;
  if (has_move_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->move_speed(), output);
  }

  // required int32 init_actor_id = 9;
  if (has_init_actor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->init_actor_id(), output);
  }

  // required string icon = 10;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->icon(), output);
  }

  // required fixed64 guildid = 11;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(11, this->guildid(), output);
  }

  // required string guildname = 12;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->guildname(), output);
  }

  // required .Packet.Camp camp = 13;
  if (has_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->camp(), output);
  }

  // required int32 mount_id = 15;
  if (has_mount_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->mount_id(), output);
  }

  // required int32 battle_score = 16;
  if (has_battle_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->battle_score(), output);
  }

  // required int32 hair = 17;
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->hair(), output);
  }

  // required int32 master_level = 18;
  if (has_master_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->master_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerBasicInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required int32 scene_id = 4;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->scene_id(), target);
  }

  // required .Packet.Position scene_pos = 5;
  if (has_scene_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->scene_pos(), target);
  }

  // required .Packet.PlayerSceneStatus player_status = 6;
  if (has_player_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->player_status(), target);
  }

  // required float direction = 7;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->direction(), target);
  }

  // required fixed32 move_speed = 8;
  if (has_move_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->move_speed(), target);
  }

  // required int32 init_actor_id = 9;
  if (has_init_actor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->init_actor_id(), target);
  }

  // required string icon = 10;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->icon(), target);
  }

  // required fixed64 guildid = 11;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(11, this->guildid(), target);
  }

  // required string guildname = 12;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->guildname(), target);
  }

  // required .Packet.Camp camp = 13;
  if (has_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->camp(), target);
  }

  // required int32 mount_id = 15;
  if (has_mount_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->mount_id(), target);
  }

  // required int32 battle_score = 16;
  if (has_battle_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->battle_score(), target);
  }

  // required int32 hair = 17;
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->hair(), target);
  }

  // required int32 master_level = 18;
  if (has_master_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->master_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerBasicInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 scene_id = 4;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }

    // required .Packet.Position scene_pos = 5;
    if (has_scene_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scene_pos());
    }

    // required .Packet.PlayerSceneStatus player_status = 6;
    if (has_player_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->player_status());
    }

    // required float direction = 7;
    if (has_direction()) {
      total_size += 1 + 4;
    }

    // required fixed32 move_speed = 8;
    if (has_move_speed()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 init_actor_id = 9;
    if (has_init_actor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->init_actor_id());
    }

    // required string icon = 10;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // required fixed64 guildid = 11;
    if (has_guildid()) {
      total_size += 1 + 8;
    }

    // required string guildname = 12;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // required .Packet.Camp camp = 13;
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->camp());
    }

    // required int32 mount_id = 15;
    if (has_mount_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mount_id());
    }

    // required int32 battle_score = 16;
    if (has_battle_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_score());
    }

    // required int32 hair = 17;
    if (has_hair()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hair());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 master_level = 18;
    if (has_master_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->master_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerBasicInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerBasicInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerBasicInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerBasicInfo::MergeFrom(const PlayerBasicInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_scene_pos()) {
      mutable_scene_pos()->::Packet::Position::MergeFrom(from.scene_pos());
    }
    if (from.has_player_status()) {
      set_player_status(from.player_status());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_move_speed()) {
      set_move_speed(from.move_speed());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_init_actor_id()) {
      set_init_actor_id(from.init_actor_id());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_camp()) {
      set_camp(from.camp());
    }
    if (from.has_mount_id()) {
      set_mount_id(from.mount_id());
    }
    if (from.has_battle_score()) {
      set_battle_score(from.battle_score());
    }
    if (from.has_hair()) {
      set_hair(from.hair());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_master_level()) {
      set_master_level(from.master_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerBasicInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerBasicInfo::CopyFrom(const PlayerBasicInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerBasicInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0001ffff) != 0x0001ffff) return false;

  if (has_scene_pos()) {
    if (!this->scene_pos().IsInitialized()) return false;
  }
  return true;
}

void PlayerBasicInfo::SetInitialized() {
  _has_bits_[0] |= 0x0001ffff;

  if (has_scene_pos()) {
    this->mutable_scene_pos()->SetInitialized();
  }
  return;
}

void PlayerBasicInfo::Swap(PlayerBasicInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(level_, other->level_);
    std::swap(name_, other->name_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(scene_pos_, other->scene_pos_);
    std::swap(player_status_, other->player_status_);
    std::swap(direction_, other->direction_);
    std::swap(move_speed_, other->move_speed_);
    std::swap(init_actor_id_, other->init_actor_id_);
    std::swap(icon_, other->icon_);
    std::swap(guildid_, other->guildid_);
    std::swap(guildname_, other->guildname_);
    std::swap(camp_, other->camp_);
    std::swap(mount_id_, other->mount_id_);
    std::swap(battle_score_, other->battle_score_);
    std::swap(hair_, other->hair_);
    std::swap(master_level_, other->master_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerBasicInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerBasicInfo_descriptor_;
  metadata.reflection = PlayerBasicInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerDBInfo::kGuidFieldNumber;
const int PlayerDBInfo::kAccountGuidFieldNumber;
const int PlayerDBInfo::kBasicInfoFieldNumber;
const int PlayerDBInfo::kLackeysFieldNumber;
const int PlayerDBInfo::kTextAnswersFieldNumber;
const int PlayerDBInfo::kPicAnswersFieldNumber;
const int PlayerDBInfo::kTokenDataFieldNumber;
const int PlayerDBInfo::kHookOptionFieldNumber;
const int PlayerDBInfo::kInitedFieldNumber;
const int PlayerDBInfo::kHookStageTrackerFieldNumber;
const int PlayerDBInfo::kLastHookStageIdFieldNumber;
const int PlayerDBInfo::kLastLogoutTimeFieldNumber;
const int PlayerDBInfo::kCreateTimeFieldNumber;
const int PlayerDBInfo::kChargeAllFieldNumber;
const int PlayerDBInfo::kRefreshTimeFieldNumber;
#endif  // !_MSC_VER

PlayerDBInfo::PlayerDBInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerDBInfo::InitAsDefaultInstance() {
  basic_info_ = const_cast< ::Packet::PlayerBasicInfo*>(&::Packet::PlayerBasicInfo::default_instance());
  token_data_ = const_cast< ::Packet::PlayerToken*>(&::Packet::PlayerToken::default_instance());
  hook_option_ = const_cast< ::Packet::HookOption*>(&::Packet::HookOption::default_instance());
}

PlayerDBInfo::PlayerDBInfo(const PlayerDBInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerDBInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  account_guid_ = GOOGLE_ULONGLONG(0);
  basic_info_ = NULL;
  text_answers_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pic_answers_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_data_ = NULL;
  hook_option_ = NULL;
  inited_ = false;
  hook_stage_tracker_ = 0;
  last_hook_stage_id_ = 0;
  last_logout_time_ = 0u;
  create_time_ = 0u;
  charge_all_ = 0u;
  refresh_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerDBInfo::~PlayerDBInfo() {
  SharedDtor();
}

void PlayerDBInfo::SharedDtor() {
  if (text_answers_ != &::google::protobuf::internal::kEmptyString) {
    delete text_answers_;
  }
  if (pic_answers_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_answers_;
  }
  if (this != default_instance_) {
    delete basic_info_;
    delete token_data_;
    delete hook_option_;
  }
}

void PlayerDBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerDBInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerDBInfo_descriptor_;
}

const PlayerDBInfo& PlayerDBInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerBasicInfo_2eproto();
  return *default_instance_;
}

PlayerDBInfo* PlayerDBInfo::default_instance_ = NULL;

PlayerDBInfo* PlayerDBInfo::New() const {
  return new PlayerDBInfo;
}

void PlayerDBInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    account_guid_ = GOOGLE_ULONGLONG(0);
    if (has_basic_info()) {
      if (basic_info_ != NULL) basic_info_->::Packet::PlayerBasicInfo::Clear();
    }
    if (has_text_answers()) {
      if (text_answers_ != &::google::protobuf::internal::kEmptyString) {
        text_answers_->clear();
      }
    }
    if (has_pic_answers()) {
      if (pic_answers_ != &::google::protobuf::internal::kEmptyString) {
        pic_answers_->clear();
      }
    }
    if (has_token_data()) {
      if (token_data_ != NULL) token_data_->::Packet::PlayerToken::Clear();
    }
    if (has_hook_option()) {
      if (hook_option_ != NULL) hook_option_->::Packet::HookOption::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    inited_ = false;
    hook_stage_tracker_ = 0;
    last_hook_stage_id_ = 0;
    last_logout_time_ = 0u;
    create_time_ = 0u;
    charge_all_ = 0u;
    refresh_time_ = 0u;
  }
  lackeys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerDBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_account_guid;
        break;
      }

      // required fixed64 account_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_account_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &account_guid_)));
          set_has_account_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_basic_info;
        break;
      }

      // required .Packet.PlayerBasicInfo basic_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_basic_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basic_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_lackeys;
        break;
      }

      // repeated fixed64 lackeys = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lackeys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 33, input, this->mutable_lackeys())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_lackeys())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_lackeys;
        if (input->ExpectTag(42)) goto parse_text_answers;
        break;
      }

      // required string text_answers = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text_answers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text_answers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text_answers().data(), this->text_answers().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pic_answers;
        break;
      }

      // required string pic_answers = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pic_answers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pic_answers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pic_answers().data(), this->pic_answers().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_token_data;
        break;
      }

      // required .Packet.PlayerToken token_data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_token_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_hook_option;
        break;
      }

      // required .Packet.HookOption hook_option = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hook_option:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hook_option()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_inited;
        break;
      }

      // required bool inited = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inited_)));
          set_has_inited();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_hook_stage_tracker;
        break;
      }

      // required int32 hook_stage_tracker = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hook_stage_tracker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hook_stage_tracker_)));
          set_has_hook_stage_tracker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_last_hook_stage_id;
        break;
      }

      // required int32 last_hook_stage_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_hook_stage_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_hook_stage_id_)));
          set_has_last_hook_stage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_last_logout_time;
        break;
      }

      // required uint32 last_logout_time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_logout_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_logout_time_)));
          set_has_last_logout_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_create_time;
        break;
      }

      // required uint32 create_time = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_charge_all;
        break;
      }

      // required uint32 charge_all = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charge_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charge_all_)));
          set_has_charge_all();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_refresh_time;
        break;
      }

      // required uint32 refresh_time = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refresh_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refresh_time_)));
          set_has_refresh_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerDBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required fixed64 account_guid = 2;
  if (has_account_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->account_guid(), output);
  }

  // required .Packet.PlayerBasicInfo basic_info = 3;
  if (has_basic_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->basic_info(), output);
  }

  // repeated fixed64 lackeys = 4;
  for (int i = 0; i < this->lackeys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      4, this->lackeys(i), output);
  }

  // required string text_answers = 5;
  if (has_text_answers()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text_answers().data(), this->text_answers().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->text_answers(), output);
  }

  // required string pic_answers = 6;
  if (has_pic_answers()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic_answers().data(), this->pic_answers().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->pic_answers(), output);
  }

  // required .Packet.PlayerToken token_data = 7;
  if (has_token_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->token_data(), output);
  }

  // required .Packet.HookOption hook_option = 8;
  if (has_hook_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->hook_option(), output);
  }

  // required bool inited = 9;
  if (has_inited()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->inited(), output);
  }

  // required int32 hook_stage_tracker = 10;
  if (has_hook_stage_tracker()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->hook_stage_tracker(), output);
  }

  // required int32 last_hook_stage_id = 11;
  if (has_last_hook_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->last_hook_stage_id(), output);
  }

  // required uint32 last_logout_time = 12;
  if (has_last_logout_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->last_logout_time(), output);
  }

  // required uint32 create_time = 13;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->create_time(), output);
  }

  // required uint32 charge_all = 14;
  if (has_charge_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->charge_all(), output);
  }

  // required uint32 refresh_time = 15;
  if (has_refresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->refresh_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerDBInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required fixed64 account_guid = 2;
  if (has_account_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->account_guid(), target);
  }

  // required .Packet.PlayerBasicInfo basic_info = 3;
  if (has_basic_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->basic_info(), target);
  }

  // repeated fixed64 lackeys = 4;
  for (int i = 0; i < this->lackeys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(4, this->lackeys(i), target);
  }

  // required string text_answers = 5;
  if (has_text_answers()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text_answers().data(), this->text_answers().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->text_answers(), target);
  }

  // required string pic_answers = 6;
  if (has_pic_answers()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pic_answers().data(), this->pic_answers().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->pic_answers(), target);
  }

  // required .Packet.PlayerToken token_data = 7;
  if (has_token_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->token_data(), target);
  }

  // required .Packet.HookOption hook_option = 8;
  if (has_hook_option()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->hook_option(), target);
  }

  // required bool inited = 9;
  if (has_inited()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->inited(), target);
  }

  // required int32 hook_stage_tracker = 10;
  if (has_hook_stage_tracker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->hook_stage_tracker(), target);
  }

  // required int32 last_hook_stage_id = 11;
  if (has_last_hook_stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->last_hook_stage_id(), target);
  }

  // required uint32 last_logout_time = 12;
  if (has_last_logout_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->last_logout_time(), target);
  }

  // required uint32 create_time = 13;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->create_time(), target);
  }

  // required uint32 charge_all = 14;
  if (has_charge_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->charge_all(), target);
  }

  // required uint32 refresh_time = 15;
  if (has_refresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->refresh_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerDBInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 account_guid = 2;
    if (has_account_guid()) {
      total_size += 1 + 8;
    }

    // required .Packet.PlayerBasicInfo basic_info = 3;
    if (has_basic_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basic_info());
    }

    // required string text_answers = 5;
    if (has_text_answers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text_answers());
    }

    // required string pic_answers = 6;
    if (has_pic_answers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pic_answers());
    }

    // required .Packet.PlayerToken token_data = 7;
    if (has_token_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->token_data());
    }

    // required .Packet.HookOption hook_option = 8;
    if (has_hook_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hook_option());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool inited = 9;
    if (has_inited()) {
      total_size += 1 + 1;
    }

    // required int32 hook_stage_tracker = 10;
    if (has_hook_stage_tracker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hook_stage_tracker());
    }

    // required int32 last_hook_stage_id = 11;
    if (has_last_hook_stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_hook_stage_id());
    }

    // required uint32 last_logout_time = 12;
    if (has_last_logout_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_logout_time());
    }

    // required uint32 create_time = 13;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

    // required uint32 charge_all = 14;
    if (has_charge_all()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charge_all());
    }

    // required uint32 refresh_time = 15;
    if (has_refresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refresh_time());
    }

  }
  // repeated fixed64 lackeys = 4;
  {
    int data_size = 0;
    data_size = 8 * this->lackeys_size();
    total_size += 1 * this->lackeys_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerDBInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerDBInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerDBInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerDBInfo::MergeFrom(const PlayerDBInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  lackeys_.MergeFrom(from.lackeys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_account_guid()) {
      set_account_guid(from.account_guid());
    }
    if (from.has_basic_info()) {
      mutable_basic_info()->::Packet::PlayerBasicInfo::MergeFrom(from.basic_info());
    }
    if (from.has_text_answers()) {
      set_text_answers(from.text_answers());
    }
    if (from.has_pic_answers()) {
      set_pic_answers(from.pic_answers());
    }
    if (from.has_token_data()) {
      mutable_token_data()->::Packet::PlayerToken::MergeFrom(from.token_data());
    }
    if (from.has_hook_option()) {
      mutable_hook_option()->::Packet::HookOption::MergeFrom(from.hook_option());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_inited()) {
      set_inited(from.inited());
    }
    if (from.has_hook_stage_tracker()) {
      set_hook_stage_tracker(from.hook_stage_tracker());
    }
    if (from.has_last_hook_stage_id()) {
      set_last_hook_stage_id(from.last_hook_stage_id());
    }
    if (from.has_last_logout_time()) {
      set_last_logout_time(from.last_logout_time());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_charge_all()) {
      set_charge_all(from.charge_all());
    }
    if (from.has_refresh_time()) {
      set_refresh_time(from.refresh_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerDBInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerDBInfo::CopyFrom(const PlayerDBInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerDBInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007ff7) != 0x00007ff7) return false;

  if (has_basic_info()) {
    if (!this->basic_info().IsInitialized()) return false;
  }
  if (has_token_data()) {
    if (!this->token_data().IsInitialized()) return false;
  }
  if (has_hook_option()) {
    if (!this->hook_option().IsInitialized()) return false;
  }
  return true;
}

void PlayerDBInfo::SetInitialized() {
  _has_bits_[0] |= 0x00007ff7;

  if (has_basic_info()) {
    this->mutable_basic_info()->SetInitialized();
  }
  if (has_token_data()) {
    this->mutable_token_data()->SetInitialized();
  }
  if (has_hook_option()) {
    this->mutable_hook_option()->SetInitialized();
  }
  return;
}

void PlayerDBInfo::Swap(PlayerDBInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(account_guid_, other->account_guid_);
    std::swap(basic_info_, other->basic_info_);
    lackeys_.Swap(&other->lackeys_);
    std::swap(text_answers_, other->text_answers_);
    std::swap(pic_answers_, other->pic_answers_);
    std::swap(token_data_, other->token_data_);
    std::swap(hook_option_, other->hook_option_);
    std::swap(inited_, other->inited_);
    std::swap(hook_stage_tracker_, other->hook_stage_tracker_);
    std::swap(last_hook_stage_id_, other->last_hook_stage_id_);
    std::swap(last_logout_time_, other->last_logout_time_);
    std::swap(create_time_, other->create_time_);
    std::swap(charge_all_, other->charge_all_);
    std::swap(refresh_time_, other->refresh_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerDBInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerDBInfo_descriptor_;
  metadata.reflection = PlayerDBInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerSpeedChanged::kGuidFieldNumber;
const int PlayerSpeedChanged::kMoveSpeedFieldNumber;
#endif  // !_MSC_VER

PlayerSpeedChanged::PlayerSpeedChanged()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerSpeedChanged::InitAsDefaultInstance() {
}

PlayerSpeedChanged::PlayerSpeedChanged(const PlayerSpeedChanged& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerSpeedChanged::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  move_speed_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerSpeedChanged::~PlayerSpeedChanged() {
  SharedDtor();
}

void PlayerSpeedChanged::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerSpeedChanged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerSpeedChanged::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerSpeedChanged_descriptor_;
}

const PlayerSpeedChanged& PlayerSpeedChanged::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerBasicInfo_2eproto();
  return *default_instance_;
}

PlayerSpeedChanged* PlayerSpeedChanged::default_instance_ = NULL;

PlayerSpeedChanged* PlayerSpeedChanged::New() const {
  return new PlayerSpeedChanged;
}

void PlayerSpeedChanged::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    move_speed_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerSpeedChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_move_speed;
        break;
      }

      // required fixed32 move_speed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_move_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &move_speed_)));
          set_has_move_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerSpeedChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required fixed32 move_speed = 2;
  if (has_move_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->move_speed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerSpeedChanged::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required fixed32 move_speed = 2;
  if (has_move_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->move_speed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerSpeedChanged::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required fixed32 move_speed = 2;
    if (has_move_speed()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerSpeedChanged::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerSpeedChanged* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerSpeedChanged*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerSpeedChanged::MergeFrom(const PlayerSpeedChanged& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_move_speed()) {
      set_move_speed(from.move_speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerSpeedChanged::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerSpeedChanged::CopyFrom(const PlayerSpeedChanged& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerSpeedChanged::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PlayerSpeedChanged::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void PlayerSpeedChanged::Swap(PlayerSpeedChanged* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(move_speed_, other->move_speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerSpeedChanged::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerSpeedChanged_descriptor_;
  metadata.reflection = PlayerSpeedChanged_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerTime::kTimeFieldNumber;
#endif  // !_MSC_VER

ServerTime::ServerTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerTime::InitAsDefaultInstance() {
}

ServerTime::ServerTime(const ServerTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerTime::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerTime::~ServerTime() {
  SharedDtor();
}

void ServerTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerTime_descriptor_;
}

const ServerTime& ServerTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerBasicInfo_2eproto();
  return *default_instance_;
}

ServerTime* ServerTime::default_instance_ = NULL;

ServerTime* ServerTime::New() const {
  return new ServerTime;
}

void ServerTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ServerTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ServerTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 time = 1;
    if (has_time()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ServerTime::MergeFrom(const ServerTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ServerTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ServerTime::CopyFrom(const ServerTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ServerTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ServerTime::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void ServerTime::Swap(ServerTime* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ServerTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerTime_descriptor_;
  metadata.reflection = ServerTime_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

// @@protoc_insertion_point(global_scope)
