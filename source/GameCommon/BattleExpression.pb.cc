// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BattleExpression.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BattleExpression.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Packet {

namespace {

const ::google::protobuf::Descriptor* SkillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorMoveToTarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorMoveToTarget_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorMoveToTargetFinish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorMoveToTargetFinish_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorMoveToPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorMoveToPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorUseSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorUseSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorCancelSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorCancelSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorBuffAttach_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorBuffAttach_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorBuffRefresh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorBuffRefresh_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorAddState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorAddState_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorRemoveState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorRemoveState_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorBuffDettach_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorBuffDettach_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveSpeedUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveSpeedUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillEffects_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillEffects_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorOnDamage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorOnDamage_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlashChainDamage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlashChainDamage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CureChain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CureChain_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorOnCure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorOnCure_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorDead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorDead_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorRelive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorRelive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorAddBuff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorAddBuff_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillPositionLogic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillPositionLogic_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorTransform_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorTransform_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorTransformCancel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorTransformCancel_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrapCreate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrapCreate_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrapDestroy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrapDestroy_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorDamage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorDamage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorStat_reflection_ = NULL;
const ::google::protobuf::Descriptor* Stat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stat_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatisticInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatisticInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BattleExpression_2eproto() {
  protobuf_AddDesc_BattleExpression_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BattleExpression.proto");
  GOOGLE_CHECK(file != NULL);
  SkillInfo_descriptor_ = file->message_type(0);
  static const int SkillInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, skill_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, bullet_speed_),
  };
  SkillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillInfo_descriptor_,
      SkillInfo::default_instance_,
      SkillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillInfo));
  BuffInfo_descriptor_ = file->message_type(1);
  static const int BuffInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, buff_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, buff_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, layer_),
  };
  BuffInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffInfo_descriptor_,
      BuffInfo::default_instance_,
      BuffInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffInfo));
  TrapInfo_descriptor_ = file->message_type(2);
  static const int TrapInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapInfo, trap_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapInfo, trap_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapInfo, range_),
  };
  TrapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrapInfo_descriptor_,
      TrapInfo::default_instance_,
      TrapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrapInfo));
  ActorMoveToTarget_descriptor_ = file->message_type(3);
  static const int ActorMoveToTarget_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorMoveToTarget, source_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorMoveToTarget, target_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorMoveToTarget, stop_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorMoveToTarget, move_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorMoveToTarget, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorMoveToTarget, move_serial_),
  };
  ActorMoveToTarget_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorMoveToTarget_descriptor_,
      ActorMoveToTarget::default_instance_,
      ActorMoveToTarget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorMoveToTarget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorMoveToTarget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorMoveToTarget));
  ActorMoveToTargetFinish_descriptor_ = file->message_type(4);
  static const int ActorMoveToTargetFinish_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorMoveToTargetFinish, source_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorMoveToTargetFinish, move_serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorMoveToTargetFinish, pos_),
  };
  ActorMoveToTargetFinish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorMoveToTargetFinish_descriptor_,
      ActorMoveToTargetFinish::default_instance_,
      ActorMoveToTargetFinish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorMoveToTargetFinish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorMoveToTargetFinish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorMoveToTargetFinish));
  ActorMoveToPos_descriptor_ = file->message_type(5);
  static const int ActorMoveToPos_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorMoveToPos, source_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorMoveToPos, target_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorMoveToPos, move_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorMoveToPos, time_stamp_),
  };
  ActorMoveToPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorMoveToPos_descriptor_,
      ActorMoveToPos::default_instance_,
      ActorMoveToPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorMoveToPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorMoveToPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorMoveToPos));
  ActorUseSkill_descriptor_ = file->message_type(6);
  static const int ActorUseSkill_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorUseSkill, source_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorUseSkill, target_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorUseSkill, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorUseSkill, time_stamp_),
  };
  ActorUseSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorUseSkill_descriptor_,
      ActorUseSkill::default_instance_,
      ActorUseSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorUseSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorUseSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorUseSkill));
  ActorCancelSkill_descriptor_ = file->message_type(7);
  static const int ActorCancelSkill_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorCancelSkill, source_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorCancelSkill, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorCancelSkill, time_stamp_),
  };
  ActorCancelSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorCancelSkill_descriptor_,
      ActorCancelSkill::default_instance_,
      ActorCancelSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorCancelSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorCancelSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorCancelSkill));
  ActorBuffAttach_descriptor_ = file->message_type(8);
  static const int ActorBuffAttach_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBuffAttach, source_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBuffAttach, target_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBuffAttach, buff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBuffAttach, time_stamp_),
  };
  ActorBuffAttach_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorBuffAttach_descriptor_,
      ActorBuffAttach::default_instance_,
      ActorBuffAttach_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBuffAttach, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBuffAttach, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorBuffAttach));
  ActorBuffRefresh_descriptor_ = file->message_type(9);
  static const int ActorBuffRefresh_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBuffRefresh, source_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBuffRefresh, target_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBuffRefresh, buff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBuffRefresh, time_stamp_),
  };
  ActorBuffRefresh_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorBuffRefresh_descriptor_,
      ActorBuffRefresh::default_instance_,
      ActorBuffRefresh_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBuffRefresh, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBuffRefresh, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorBuffRefresh));
  ActorAddState_descriptor_ = file->message_type(10);
  static const int ActorAddState_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorAddState, target_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorAddState, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorAddState, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorAddState, fear_dir_),
  };
  ActorAddState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorAddState_descriptor_,
      ActorAddState::default_instance_,
      ActorAddState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorAddState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorAddState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorAddState));
  ActorRemoveState_descriptor_ = file->message_type(11);
  static const int ActorRemoveState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorRemoveState, target_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorRemoveState, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorRemoveState, time_stamp_),
  };
  ActorRemoveState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorRemoveState_descriptor_,
      ActorRemoveState::default_instance_,
      ActorRemoveState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorRemoveState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorRemoveState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorRemoveState));
  ActorBuffDettach_descriptor_ = file->message_type(12);
  static const int ActorBuffDettach_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBuffDettach, source_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBuffDettach, target_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBuffDettach, buff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBuffDettach, time_stamp_),
  };
  ActorBuffDettach_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorBuffDettach_descriptor_,
      ActorBuffDettach::default_instance_,
      ActorBuffDettach_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBuffDettach, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBuffDettach, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorBuffDettach));
  MoveSpeedUpdate_descriptor_ = file->message_type(13);
  static const int MoveSpeedUpdate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveSpeedUpdate, target_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveSpeedUpdate, move_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveSpeedUpdate, buff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveSpeedUpdate, time_stamp_),
  };
  MoveSpeedUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveSpeedUpdate_descriptor_,
      MoveSpeedUpdate::default_instance_,
      MoveSpeedUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveSpeedUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveSpeedUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveSpeedUpdate));
  SkillEffects_descriptor_ = file->message_type(14);
  static const int SkillEffects_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEffects, damages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEffects, cures_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEffects, time_stamp_),
  };
  SkillEffects_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillEffects_descriptor_,
      SkillEffects::default_instance_,
      SkillEffects_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEffects, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEffects, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillEffects));
  ActorOnDamage_descriptor_ = file->message_type(15);
  static const int ActorOnDamage_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorOnDamage, source_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorOnDamage, target_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorOnDamage, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorOnDamage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorOnDamage, expression_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorOnDamage, old_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorOnDamage, new_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorOnDamage, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorOnDamage, buff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorOnDamage, trap_),
  };
  ActorOnDamage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorOnDamage_descriptor_,
      ActorOnDamage::default_instance_,
      ActorOnDamage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorOnDamage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorOnDamage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorOnDamage));
  FlashChainDamage_descriptor_ = file->message_type(16);
  static const int FlashChainDamage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashChainDamage, damages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashChainDamage, time_stamp_),
  };
  FlashChainDamage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlashChainDamage_descriptor_,
      FlashChainDamage::default_instance_,
      FlashChainDamage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashChainDamage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlashChainDamage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlashChainDamage));
  CureChain_descriptor_ = file->message_type(17);
  static const int CureChain_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CureChain, cures_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CureChain, time_stamp_),
  };
  CureChain_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CureChain_descriptor_,
      CureChain::default_instance_,
      CureChain_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CureChain, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CureChain, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CureChain));
  ActorOnCure_descriptor_ = file->message_type(18);
  static const int ActorOnCure_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorOnCure, source_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorOnCure, target_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorOnCure, cure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorOnCure, old_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorOnCure, new_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorOnCure, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorOnCure, buff_),
  };
  ActorOnCure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorOnCure_descriptor_,
      ActorOnCure::default_instance_,
      ActorOnCure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorOnCure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorOnCure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorOnCure));
  ActorDead_descriptor_ = file->message_type(19);
  static const int ActorDead_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorDead, source_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorDead, target_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorDead, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorDead, buff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorDead, time_stamp_),
  };
  ActorDead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorDead_descriptor_,
      ActorDead::default_instance_,
      ActorDead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorDead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorDead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorDead));
  ActorRelive_descriptor_ = file->message_type(20);
  static const int ActorRelive_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorRelive, source_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorRelive, target_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorRelive, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorRelive, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorRelive, time_stamp_),
  };
  ActorRelive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorRelive_descriptor_,
      ActorRelive::default_instance_,
      ActorRelive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorRelive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorRelive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorRelive));
  ActorAddBuff_descriptor_ = file->message_type(21);
  static const int ActorAddBuff_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorAddBuff, source_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorAddBuff, target_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorAddBuff, buff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorAddBuff, time_stamp_),
  };
  ActorAddBuff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorAddBuff_descriptor_,
      ActorAddBuff::default_instance_,
      ActorAddBuff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorAddBuff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorAddBuff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorAddBuff));
  SkillPositionLogic_descriptor_ = file->message_type(22);
  static const int SkillPositionLogic_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPositionLogic, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPositionLogic, source_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPositionLogic, target_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPositionLogic, move_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPositionLogic, skill_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPositionLogic, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPositionLogic, time_stamp_),
  };
  SkillPositionLogic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillPositionLogic_descriptor_,
      SkillPositionLogic::default_instance_,
      SkillPositionLogic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPositionLogic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPositionLogic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillPositionLogic));
  ActorTransform_descriptor_ = file->message_type(23);
  static const int ActorTransform_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorTransform, source_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorTransform, new_res_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorTransform, new_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorTransform, new_max_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorTransform, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorTransform, time_stamp_),
  };
  ActorTransform_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorTransform_descriptor_,
      ActorTransform::default_instance_,
      ActorTransform_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorTransform, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorTransform, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorTransform));
  ActorTransformCancel_descriptor_ = file->message_type(24);
  static const int ActorTransformCancel_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorTransformCancel, source_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorTransformCancel, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorTransformCancel, time_stamp_),
  };
  ActorTransformCancel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorTransformCancel_descriptor_,
      ActorTransformCancel::default_instance_,
      ActorTransformCancel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorTransformCancel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorTransformCancel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorTransformCancel));
  TrapCreate_descriptor_ = file->message_type(25);
  static const int TrapCreate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapCreate, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapCreate, trap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapCreate, time_stamp_),
  };
  TrapCreate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrapCreate_descriptor_,
      TrapCreate::default_instance_,
      TrapCreate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapCreate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapCreate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrapCreate));
  TrapDestroy_descriptor_ = file->message_type(26);
  static const int TrapDestroy_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapDestroy, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapDestroy, time_stamp_),
  };
  TrapDestroy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrapDestroy_descriptor_,
      TrapDestroy::default_instance_,
      TrapDestroy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapDestroy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapDestroy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrapDestroy));
  ActorDamage_descriptor_ = file->message_type(27);
  static const int ActorDamage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorDamage, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorDamage, damage_),
  };
  ActorDamage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorDamage_descriptor_,
      ActorDamage::default_instance_,
      ActorDamage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorDamage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorDamage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorDamage));
  ActorStat_descriptor_ = file->message_type(28);
  static const int ActorStat_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorStat, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorStat, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorStat, config_id_),
  };
  ActorStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorStat_descriptor_,
      ActorStat::default_instance_,
      ActorStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorStat));
  Stat_descriptor_ = file->message_type(29);
  static const int Stat_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, damages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, be_damages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, cures_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, attacker_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, defender_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, attacker_cure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, defender_cure_),
  };
  Stat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Stat_descriptor_,
      Stat::default_instance_,
      Stat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Stat));
  StatisticInfo_descriptor_ = file->message_type(30);
  static const int StatisticInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticInfo, player_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticInfo, actor_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticInfo, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticInfo, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticInfo, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticInfo, actordamage_),
  };
  StatisticInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatisticInfo_descriptor_,
      StatisticInfo::default_instance_,
      StatisticInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatisticInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BattleExpression_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillInfo_descriptor_, &SkillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffInfo_descriptor_, &BuffInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrapInfo_descriptor_, &TrapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorMoveToTarget_descriptor_, &ActorMoveToTarget::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorMoveToTargetFinish_descriptor_, &ActorMoveToTargetFinish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorMoveToPos_descriptor_, &ActorMoveToPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorUseSkill_descriptor_, &ActorUseSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorCancelSkill_descriptor_, &ActorCancelSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorBuffAttach_descriptor_, &ActorBuffAttach::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorBuffRefresh_descriptor_, &ActorBuffRefresh::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorAddState_descriptor_, &ActorAddState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorRemoveState_descriptor_, &ActorRemoveState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorBuffDettach_descriptor_, &ActorBuffDettach::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveSpeedUpdate_descriptor_, &MoveSpeedUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillEffects_descriptor_, &SkillEffects::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorOnDamage_descriptor_, &ActorOnDamage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlashChainDamage_descriptor_, &FlashChainDamage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CureChain_descriptor_, &CureChain::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorOnCure_descriptor_, &ActorOnCure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorDead_descriptor_, &ActorDead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorRelive_descriptor_, &ActorRelive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorAddBuff_descriptor_, &ActorAddBuff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillPositionLogic_descriptor_, &SkillPositionLogic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorTransform_descriptor_, &ActorTransform::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorTransformCancel_descriptor_, &ActorTransformCancel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrapCreate_descriptor_, &TrapCreate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrapDestroy_descriptor_, &TrapDestroy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorDamage_descriptor_, &ActorDamage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorStat_descriptor_, &ActorStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Stat_descriptor_, &Stat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatisticInfo_descriptor_, &StatisticInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BattleExpression_2eproto() {
  delete SkillInfo::default_instance_;
  delete SkillInfo_reflection_;
  delete BuffInfo::default_instance_;
  delete BuffInfo_reflection_;
  delete TrapInfo::default_instance_;
  delete TrapInfo_reflection_;
  delete ActorMoveToTarget::default_instance_;
  delete ActorMoveToTarget_reflection_;
  delete ActorMoveToTargetFinish::default_instance_;
  delete ActorMoveToTargetFinish_reflection_;
  delete ActorMoveToPos::default_instance_;
  delete ActorMoveToPos_reflection_;
  delete ActorUseSkill::default_instance_;
  delete ActorUseSkill_reflection_;
  delete ActorCancelSkill::default_instance_;
  delete ActorCancelSkill_reflection_;
  delete ActorBuffAttach::default_instance_;
  delete ActorBuffAttach_reflection_;
  delete ActorBuffRefresh::default_instance_;
  delete ActorBuffRefresh_reflection_;
  delete ActorAddState::default_instance_;
  delete ActorAddState_reflection_;
  delete ActorRemoveState::default_instance_;
  delete ActorRemoveState_reflection_;
  delete ActorBuffDettach::default_instance_;
  delete ActorBuffDettach_reflection_;
  delete MoveSpeedUpdate::default_instance_;
  delete MoveSpeedUpdate_reflection_;
  delete SkillEffects::default_instance_;
  delete SkillEffects_reflection_;
  delete ActorOnDamage::default_instance_;
  delete ActorOnDamage_reflection_;
  delete FlashChainDamage::default_instance_;
  delete FlashChainDamage_reflection_;
  delete CureChain::default_instance_;
  delete CureChain_reflection_;
  delete ActorOnCure::default_instance_;
  delete ActorOnCure_reflection_;
  delete ActorDead::default_instance_;
  delete ActorDead_reflection_;
  delete ActorRelive::default_instance_;
  delete ActorRelive_reflection_;
  delete ActorAddBuff::default_instance_;
  delete ActorAddBuff_reflection_;
  delete SkillPositionLogic::default_instance_;
  delete SkillPositionLogic_reflection_;
  delete ActorTransform::default_instance_;
  delete ActorTransform_reflection_;
  delete ActorTransformCancel::default_instance_;
  delete ActorTransformCancel_reflection_;
  delete TrapCreate::default_instance_;
  delete TrapCreate_reflection_;
  delete TrapDestroy::default_instance_;
  delete TrapDestroy_reflection_;
  delete ActorDamage::default_instance_;
  delete ActorDamage_reflection_;
  delete ActorStat::default_instance_;
  delete ActorStat_reflection_;
  delete Stat::default_instance_;
  delete Stat_reflection_;
  delete StatisticInfo::default_instance_;
  delete StatisticInfo_reflection_;
}

void protobuf_AddDesc_BattleExpression_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Packet::protobuf_AddDesc_Base_2eproto();
  ::Packet::protobuf_AddDesc_AllPacketEnum_2eproto();
  ::Config::protobuf_AddDesc_AllConfigEnum_2eproto();
  ::Packet::protobuf_AddDesc_PlayerBasicInfo_2eproto();
  ::Config::protobuf_AddDesc_ItemConfig_2eproto();
  ::Config::protobuf_AddDesc_PackageConfig_2eproto();
  ::Config::protobuf_AddDesc_AbilityAndStatus_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026BattleExpression.proto\022\006Packet\032\nBase.p"
    "roto\032\023AllPacketEnum.proto\032\023AllConfigEnum"
    ".proto\032\025PlayerBasicInfo.proto\032\020ItemConfi"
    "g.proto\032\023PackageConfig.proto\032\026AbilityAnd"
    "Status.proto\"K\n\tSkillInfo\022\020\n\010skill_id\030\001 "
    "\002(\005\022\026\n\013skill_level\030\002 \002(\005:\0011\022\024\n\014bullet_sp"
    "eed\030\003 \001(\002\"c\n\010BuffInfo\022\017\n\007buff_id\030\001 \002(\005\022\025"
    "\n\nbuff_level\030\002 \002(\005:\0011\022 \n\005skill\030\003 \001(\0132\021.P"
    "acket.SkillInfo\022\r\n\005layer\030\004 \001(\005\"]\n\010TrapIn"
    "fo\022\017\n\007trap_id\030\001 \002(\005\022\022\n\ntrap_level\030\002 \002(\005\022"
    "\035\n\003pos\030\003 \001(\0132\020.Packet.Position\022\r\n\005range\030"
    "\004 \001(\005\"\216\001\n\021ActorMoveToTarget\022\023\n\013source_gu"
    "id\030\001 \002(\006\022\023\n\013target_guid\030\002 \001(\006\022\022\n\nstop_ra"
    "nge\030\003 \002(\005\022\022\n\nmove_speed\030\004 \002(\005\022\022\n\ntime_st"
    "amp\030\005 \002(\006\022\023\n\013move_serial\030\006 \002(\005\"b\n\027ActorM"
    "oveToTargetFinish\022\023\n\013source_guid\030\001 \002(\006\022\023"
    "\n\013move_serial\030\002 \002(\005\022\035\n\003pos\030\003 \002(\0132\020.Packe"
    "t.Position\"s\n\016ActorMoveToPos\022\023\n\013source_g"
    "uid\030\001 \002(\006\022$\n\ntarget_pos\030\002 \002(\0132\020.Packet.P"
    "osition\022\022\n\nmove_speed\030\003 \002(\005\022\022\n\ntime_stam"
    "p\030\004 \002(\006\"o\n\rActorUseSkill\022\023\n\013source_guid\030"
    "\001 \002(\006\022\023\n\013target_guid\030\002 \003(\006\022 \n\005skill\030\003 \002("
    "\0132\021.Packet.SkillInfo\022\022\n\ntime_stamp\030\004 \002(\006"
    "\"M\n\020ActorCancelSkill\022\023\n\013source_guid\030\001 \002("
    "\006\022\020\n\010skill_id\030\002 \002(\005\022\022\n\ntime_stamp\030\003 \002(\006\""
    "o\n\017ActorBuffAttach\022\023\n\013source_guid\030\001 \002(\006\022"
    "\023\n\013target_guid\030\002 \001(\006\022\036\n\004buff\030\003 \002(\0132\020.Pac"
    "ket.BuffInfo\022\022\n\ntime_stamp\030\004 \002(\006\"p\n\020Acto"
    "rBuffRefresh\022\023\n\013source_guid\030\001 \002(\006\022\023\n\013tar"
    "get_guid\030\002 \001(\006\022\036\n\004buff\030\003 \002(\0132\020.Packet.Bu"
    "ffInfo\022\022\n\ntime_stamp\030\004 \002(\006\"u\n\rActorAddSt"
    "ate\022\023\n\013target_guid\030\001 \002(\006\022)\n\005state\030\002 \002(\0162"
    "\032.Config.BattleObjectStatus\022\022\n\ntime_stam"
    "p\030\003 \002(\006\022\020\n\010fear_dir\030\004 \001(\002\"f\n\020ActorRemove"
    "State\022\023\n\013target_guid\030\001 \002(\006\022)\n\005state\030\002 \002("
    "\0162\032.Config.BattleObjectStatus\022\022\n\ntime_st"
    "amp\030\003 \002(\006\"p\n\020ActorBuffDettach\022\023\n\013source_"
    "guid\030\001 \001(\006\022\023\n\013target_guid\030\002 \002(\006\022\036\n\004buff\030"
    "\003 \002(\0132\020.Packet.BuffInfo\022\022\n\ntime_stamp\030\004 "
    "\002(\006\"n\n\017MoveSpeedUpdate\022\023\n\013target_guid\030\001 "
    "\002(\006\022\022\n\nmove_speed\030\002 \002(\005\022\036\n\004buff\030\003 \001(\0132\020."
    "Packet.BuffInfo\022\022\n\ntime_stamp\030\004 \002(\006\"n\n\014S"
    "killEffects\022&\n\007damages\030\001 \003(\0132\025.Packet.Ac"
    "torOnDamage\022\"\n\005cures\030\002 \003(\0132\023.Packet.Acto"
    "rOnCure\022\022\n\ntime_stamp\030\003 \002(\006\"\233\002\n\rActorOnD"
    "amage\022\023\n\013source_guid\030\001 \001(\006\022\023\n\013target_gui"
    "d\030\002 \002(\006\022\016\n\006damage\030\003 \002(\005\022 \n\004type\030\004 \002(\0162\022."
    "Packet.DamageType\022,\n\nexpression\030\005 \002(\0162\030."
    "Packet.DamageExpression\022\016\n\006old_hp\030\006 \002(\005\022"
    "\016\n\006new_hp\030\007 \002(\005\022 \n\005skill\030\010 \001(\0132\021.Packet."
    "SkillInfo\022\036\n\004buff\030\t \001(\0132\020.Packet.BuffInf"
    "o\022\036\n\004trap\030\n \001(\0132\020.Packet.TrapInfo\"N\n\020Fla"
    "shChainDamage\022&\n\007damages\030\001 \003(\0132\025.Packet."
    "ActorOnDamage\022\022\n\ntime_stamp\030\002 \002(\006\"C\n\tCur"
    "eChain\022\"\n\005cures\030\001 \003(\0132\023.Packet.ActorOnCu"
    "re\022\022\n\ntime_stamp\030\002 \002(\006\"\247\001\n\013ActorOnCure\022\023"
    "\n\013source_guid\030\001 \001(\006\022\023\n\013target_guid\030\002 \002(\006"
    "\022\014\n\004cure\030\003 \002(\005\022\016\n\006old_hp\030\004 \002(\005\022\016\n\006new_hp"
    "\030\005 \002(\005\022 \n\005skill\030\006 \001(\0132\021.Packet.SkillInfo"
    "\022\036\n\004buff\030\007 \001(\0132\020.Packet.BuffInfo\"\213\001\n\tAct"
    "orDead\022\023\n\013source_guid\030\001 \001(\006\022\023\n\013target_gu"
    "id\030\002 \002(\006\022 \n\005skill\030\003 \001(\0132\021.Packet.SkillIn"
    "fo\022\036\n\004buff\030\004 \001(\0132\020.Packet.BuffInfo\022\022\n\nti"
    "me_stamp\030\005 \002(\006\"y\n\013ActorRelive\022\023\n\013source_"
    "guid\030\001 \001(\006\022\023\n\013target_guid\030\002 \002(\006\022\n\n\002hp\030\003 "
    "\002(\005\022 \n\005skill\030\004 \002(\0132\021.Packet.SkillInfo\022\022\n"
    "\ntime_stamp\030\005 \002(\006\"l\n\014ActorAddBuff\022\023\n\013sou"
    "rce_guid\030\001 \002(\006\022\023\n\013target_guid\030\002 \002(\006\022\036\n\004b"
    "uff\030\003 \002(\0132\020.Packet.BuffInfo\022\022\n\ntime_stam"
    "p\030\004 \002(\006\"\312\001\n\022SkillPositionLogic\022,\n\004type\030\001"
    " \002(\0162\036.Packet.SkillPositionLogicType\022\023\n\013"
    "source_guid\030\002 \002(\006\022\023\n\013target_guid\030\003 \002(\006\022\022"
    "\n\nmove_speed\030\004 \001(\005\022%\n\nskill_info\030\005 \001(\0132\021"
    ".Packet.SkillInfo\022\r\n\005range\030\006 \001(\005\022\022\n\ntime"
    "_stamp\030\007 \002(\006\"\201\001\n\016ActorTransform\022\023\n\013sourc"
    "e_guid\030\001 \002(\006\022\022\n\nnew_res_id\030\002 \002(\005\022\016\n\006new_"
    "hp\030\003 \002(\005\022\022\n\nnew_max_hp\030\004 \002(\005\022\016\n\006radius\030\005"
    " \002(\005\022\022\n\ntime_stamp\030\006 \002(\006\"O\n\024ActorTransfo"
    "rmCancel\022\023\n\013source_guid\030\001 \002(\006\022\016\n\006radius\030"
    "\002 \002(\005\022\022\n\ntime_stamp\030\003 \002(\006\"N\n\nTrapCreate\022"
    "\014\n\004guid\030\001 \002(\006\022\036\n\004trap\030\002 \002(\0132\020.Packet.Tra"
    "pInfo\022\022\n\ntime_stamp\030\003 \002(\006\"/\n\013TrapDestroy"
    "\022\014\n\004guid\030\001 \002(\006\022\022\n\ntime_stamp\030\002 \002(\006\"+\n\013Ac"
    "torDamage\022\014\n\004guid\030\001 \002(\006\022\016\n\006damage\030\002 \002(\005\""
    ";\n\tActorStat\022\014\n\004guid\030\001 \002(\006\022\r\n\005value\030\002 \002("
    "\005\022\021\n\tconfig_id\030\003 \001(\005\"\323\001\n\004Stat\022\"\n\007damages"
    "\030\001 \003(\0132\021.Packet.ActorStat\022%\n\nbe_damages\030"
    "\002 \003(\0132\021.Packet.ActorStat\022 \n\005cures\030\003 \003(\0132"
    "\021.Packet.ActorStat\022\027\n\017attacker_damage\030\004 "
    "\001(\006\022\027\n\017defender_damage\030\005 \001(\006\022\025\n\rattacker"
    "_cure\030\006 \001(\006\022\025\n\rdefender_cure\030\007 \001(\006\"\257\001\n\rS"
    "tatisticInfo\022\022\n\nplayer_exp\030\001 \001(\005\022\021\n\tacto"
    "r_exp\030\002 \001(\005\022)\n\005items\030\003 \003(\0132\032.Config.Item"
    "PackageElement\022\022\n\ntime_stamp\030\004 \001(\006\022\016\n\006da"
    "mage\030\005 \001(\005\022(\n\013actordamage\030\006 \003(\0132\023.Packet"
    ".ActorDamage", 3812);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BattleExpression.proto", &protobuf_RegisterTypes);
  SkillInfo::default_instance_ = new SkillInfo();
  BuffInfo::default_instance_ = new BuffInfo();
  TrapInfo::default_instance_ = new TrapInfo();
  ActorMoveToTarget::default_instance_ = new ActorMoveToTarget();
  ActorMoveToTargetFinish::default_instance_ = new ActorMoveToTargetFinish();
  ActorMoveToPos::default_instance_ = new ActorMoveToPos();
  ActorUseSkill::default_instance_ = new ActorUseSkill();
  ActorCancelSkill::default_instance_ = new ActorCancelSkill();
  ActorBuffAttach::default_instance_ = new ActorBuffAttach();
  ActorBuffRefresh::default_instance_ = new ActorBuffRefresh();
  ActorAddState::default_instance_ = new ActorAddState();
  ActorRemoveState::default_instance_ = new ActorRemoveState();
  ActorBuffDettach::default_instance_ = new ActorBuffDettach();
  MoveSpeedUpdate::default_instance_ = new MoveSpeedUpdate();
  SkillEffects::default_instance_ = new SkillEffects();
  ActorOnDamage::default_instance_ = new ActorOnDamage();
  FlashChainDamage::default_instance_ = new FlashChainDamage();
  CureChain::default_instance_ = new CureChain();
  ActorOnCure::default_instance_ = new ActorOnCure();
  ActorDead::default_instance_ = new ActorDead();
  ActorRelive::default_instance_ = new ActorRelive();
  ActorAddBuff::default_instance_ = new ActorAddBuff();
  SkillPositionLogic::default_instance_ = new SkillPositionLogic();
  ActorTransform::default_instance_ = new ActorTransform();
  ActorTransformCancel::default_instance_ = new ActorTransformCancel();
  TrapCreate::default_instance_ = new TrapCreate();
  TrapDestroy::default_instance_ = new TrapDestroy();
  ActorDamage::default_instance_ = new ActorDamage();
  ActorStat::default_instance_ = new ActorStat();
  Stat::default_instance_ = new Stat();
  StatisticInfo::default_instance_ = new StatisticInfo();
  SkillInfo::default_instance_->InitAsDefaultInstance();
  BuffInfo::default_instance_->InitAsDefaultInstance();
  TrapInfo::default_instance_->InitAsDefaultInstance();
  ActorMoveToTarget::default_instance_->InitAsDefaultInstance();
  ActorMoveToTargetFinish::default_instance_->InitAsDefaultInstance();
  ActorMoveToPos::default_instance_->InitAsDefaultInstance();
  ActorUseSkill::default_instance_->InitAsDefaultInstance();
  ActorCancelSkill::default_instance_->InitAsDefaultInstance();
  ActorBuffAttach::default_instance_->InitAsDefaultInstance();
  ActorBuffRefresh::default_instance_->InitAsDefaultInstance();
  ActorAddState::default_instance_->InitAsDefaultInstance();
  ActorRemoveState::default_instance_->InitAsDefaultInstance();
  ActorBuffDettach::default_instance_->InitAsDefaultInstance();
  MoveSpeedUpdate::default_instance_->InitAsDefaultInstance();
  SkillEffects::default_instance_->InitAsDefaultInstance();
  ActorOnDamage::default_instance_->InitAsDefaultInstance();
  FlashChainDamage::default_instance_->InitAsDefaultInstance();
  CureChain::default_instance_->InitAsDefaultInstance();
  ActorOnCure::default_instance_->InitAsDefaultInstance();
  ActorDead::default_instance_->InitAsDefaultInstance();
  ActorRelive::default_instance_->InitAsDefaultInstance();
  ActorAddBuff::default_instance_->InitAsDefaultInstance();
  SkillPositionLogic::default_instance_->InitAsDefaultInstance();
  ActorTransform::default_instance_->InitAsDefaultInstance();
  ActorTransformCancel::default_instance_->InitAsDefaultInstance();
  TrapCreate::default_instance_->InitAsDefaultInstance();
  TrapDestroy::default_instance_->InitAsDefaultInstance();
  ActorDamage::default_instance_->InitAsDefaultInstance();
  ActorStat::default_instance_->InitAsDefaultInstance();
  Stat::default_instance_->InitAsDefaultInstance();
  StatisticInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BattleExpression_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BattleExpression_2eproto {
  StaticDescriptorInitializer_BattleExpression_2eproto() {
    protobuf_AddDesc_BattleExpression_2eproto();
  }
} static_descriptor_initializer_BattleExpression_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SkillInfo::kSkillIdFieldNumber;
const int SkillInfo::kSkillLevelFieldNumber;
const int SkillInfo::kBulletSpeedFieldNumber;
#endif  // !_MSC_VER

SkillInfo::SkillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillInfo::InitAsDefaultInstance() {
}

SkillInfo::SkillInfo(const SkillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillInfo::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0;
  skill_level_ = 1;
  bullet_speed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillInfo::~SkillInfo() {
  SharedDtor();
}

void SkillInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillInfo_descriptor_;
}

const SkillInfo& SkillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleExpression_2eproto();
  return *default_instance_;
}

SkillInfo* SkillInfo::default_instance_ = NULL;

SkillInfo* SkillInfo::New() const {
  return new SkillInfo;
}

void SkillInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = 0;
    skill_level_ = 1;
    bullet_speed_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_level;
        break;
      }

      // required int32 skill_level = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_bullet_speed;
        break;
      }

      // optional float bullet_speed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bullet_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bullet_speed_)));
          set_has_bullet_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skill_id(), output);
  }

  // required int32 skill_level = 2 [default = 1];
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skill_level(), output);
  }

  // optional float bullet_speed = 3;
  if (has_bullet_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->bullet_speed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skill_id(), target);
  }

  // required int32 skill_level = 2 [default = 1];
  if (has_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skill_level(), target);
  }

  // optional float bullet_speed = 3;
  if (has_bullet_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->bullet_speed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }

    // required int32 skill_level = 2 [default = 1];
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_level());
    }

    // optional float bullet_speed = 3;
    if (has_bullet_speed()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SkillInfo::MergeFrom(const SkillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
    if (from.has_bullet_speed()) {
      set_bullet_speed(from.bullet_speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SkillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SkillInfo::CopyFrom(const SkillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SkillInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SkillInfo::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void SkillInfo::Swap(SkillInfo* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(bullet_speed_, other->bullet_speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SkillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillInfo_descriptor_;
  metadata.reflection = SkillInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffInfo::kBuffIdFieldNumber;
const int BuffInfo::kBuffLevelFieldNumber;
const int BuffInfo::kSkillFieldNumber;
const int BuffInfo::kLayerFieldNumber;
#endif  // !_MSC_VER

BuffInfo::BuffInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuffInfo::InitAsDefaultInstance() {
  skill_ = const_cast< ::Packet::SkillInfo*>(&::Packet::SkillInfo::default_instance());
}

BuffInfo::BuffInfo(const BuffInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuffInfo::SharedCtor() {
  _cached_size_ = 0;
  buff_id_ = 0;
  buff_level_ = 1;
  skill_ = NULL;
  layer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffInfo::~BuffInfo() {
  SharedDtor();
}

void BuffInfo::SharedDtor() {
  if (this != default_instance_) {
    delete skill_;
  }
}

void BuffInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffInfo_descriptor_;
}

const BuffInfo& BuffInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleExpression_2eproto();
  return *default_instance_;
}

BuffInfo* BuffInfo::default_instance_ = NULL;

BuffInfo* BuffInfo::New() const {
  return new BuffInfo;
}

void BuffInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buff_id_ = 0;
    buff_level_ = 1;
    if (has_skill()) {
      if (skill_ != NULL) skill_->::Packet::SkillInfo::Clear();
    }
    layer_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool BuffInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 buff_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_id_)));
          set_has_buff_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buff_level;
        break;
      }

      // required int32 buff_level = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buff_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_level_)));
          set_has_buff_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_skill;
        break;
      }

      // optional .Packet.SkillInfo skill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_layer;
        break;
      }

      // optional int32 layer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void BuffInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 buff_id = 1;
  if (has_buff_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buff_id(), output);
  }

  // required int32 buff_level = 2 [default = 1];
  if (has_buff_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buff_level(), output);
  }

  // optional .Packet.SkillInfo skill = 3;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->skill(), output);
  }

  // optional int32 layer = 4;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->layer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuffInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 buff_id = 1;
  if (has_buff_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buff_id(), target);
  }

  // required int32 buff_level = 2 [default = 1];
  if (has_buff_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buff_level(), target);
  }

  // optional .Packet.SkillInfo skill = 3;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->skill(), target);
  }

  // optional int32 layer = 4;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->layer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuffInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 buff_id = 1;
    if (has_buff_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff_id());
    }

    // required int32 buff_level = 2 [default = 1];
    if (has_buff_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff_level());
    }

    // optional .Packet.SkillInfo skill = 3;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill());
    }

    // optional int32 layer = 4;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void BuffInfo::MergeFrom(const BuffInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buff_id()) {
      set_buff_id(from.buff_id());
    }
    if (from.has_buff_level()) {
      set_buff_level(from.buff_level());
    }
    if (from.has_skill()) {
      mutable_skill()->::Packet::SkillInfo::MergeFrom(from.skill());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void BuffInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void BuffInfo::CopyFrom(const BuffInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool BuffInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_skill()) {
    if (!this->skill().IsInitialized()) return false;
  }
  return true;
}

void BuffInfo::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  if (has_skill()) {
    this->mutable_skill()->SetInitialized();
  }
  return;
}

void BuffInfo::Swap(BuffInfo* other) {
  if (other != this) {
    std::swap(buff_id_, other->buff_id_);
    std::swap(buff_level_, other->buff_level_);
    std::swap(skill_, other->skill_);
    std::swap(layer_, other->layer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata BuffInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffInfo_descriptor_;
  metadata.reflection = BuffInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrapInfo::kTrapIdFieldNumber;
const int TrapInfo::kTrapLevelFieldNumber;
const int TrapInfo::kPosFieldNumber;
const int TrapInfo::kRangeFieldNumber;
#endif  // !_MSC_VER

TrapInfo::TrapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrapInfo::InitAsDefaultInstance() {
  pos_ = const_cast< ::Packet::Position*>(&::Packet::Position::default_instance());
}

TrapInfo::TrapInfo(const TrapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrapInfo::SharedCtor() {
  _cached_size_ = 0;
  trap_id_ = 0;
  trap_level_ = 0;
  pos_ = NULL;
  range_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrapInfo::~TrapInfo() {
  SharedDtor();
}

void TrapInfo::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void TrapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrapInfo_descriptor_;
}

const TrapInfo& TrapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleExpression_2eproto();
  return *default_instance_;
}

TrapInfo* TrapInfo::default_instance_ = NULL;

TrapInfo* TrapInfo::New() const {
  return new TrapInfo;
}

void TrapInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    trap_id_ = 0;
    trap_level_ = 0;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Packet::Position::Clear();
    }
    range_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool TrapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 trap_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trap_id_)));
          set_has_trap_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_trap_level;
        break;
      }

      // required int32 trap_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trap_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trap_level_)));
          set_has_trap_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // optional .Packet.Position pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_range;
        break;
      }

      // optional int32 range = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &range_)));
          set_has_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void TrapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 trap_id = 1;
  if (has_trap_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trap_id(), output);
  }

  // required int32 trap_level = 2;
  if (has_trap_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->trap_level(), output);
  }

  // optional .Packet.Position pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  // optional int32 range = 4;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->range(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 trap_id = 1;
  if (has_trap_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trap_id(), target);
  }

  // required int32 trap_level = 2;
  if (has_trap_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->trap_level(), target);
  }

  // optional .Packet.Position pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  // optional int32 range = 4;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->range(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 trap_id = 1;
    if (has_trap_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trap_id());
    }

    // required int32 trap_level = 2;
    if (has_trap_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trap_level());
    }

    // optional .Packet.Position pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional int32 range = 4;
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->range());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void TrapInfo::MergeFrom(const TrapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trap_id()) {
      set_trap_id(from.trap_id());
    }
    if (from.has_trap_level()) {
      set_trap_level(from.trap_level());
    }
    if (from.has_pos()) {
      mutable_pos()->::Packet::Position::MergeFrom(from.pos());
    }
    if (from.has_range()) {
      set_range(from.range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void TrapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void TrapInfo::CopyFrom(const TrapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool TrapInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void TrapInfo::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  if (has_pos()) {
    this->mutable_pos()->SetInitialized();
  }
  return;
}

void TrapInfo::Swap(TrapInfo* other) {
  if (other != this) {
    std::swap(trap_id_, other->trap_id_);
    std::swap(trap_level_, other->trap_level_);
    std::swap(pos_, other->pos_);
    std::swap(range_, other->range_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata TrapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrapInfo_descriptor_;
  metadata.reflection = TrapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActorMoveToTarget::kSourceGuidFieldNumber;
const int ActorMoveToTarget::kTargetGuidFieldNumber;
const int ActorMoveToTarget::kStopRangeFieldNumber;
const int ActorMoveToTarget::kMoveSpeedFieldNumber;
const int ActorMoveToTarget::kTimeStampFieldNumber;
const int ActorMoveToTarget::kMoveSerialFieldNumber;
#endif  // !_MSC_VER

ActorMoveToTarget::ActorMoveToTarget()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActorMoveToTarget::InitAsDefaultInstance() {
}

ActorMoveToTarget::ActorMoveToTarget(const ActorMoveToTarget& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActorMoveToTarget::SharedCtor() {
  _cached_size_ = 0;
  source_guid_ = GOOGLE_ULONGLONG(0);
  target_guid_ = GOOGLE_ULONGLONG(0);
  stop_range_ = 0;
  move_speed_ = 0;
  time_stamp_ = GOOGLE_ULONGLONG(0);
  move_serial_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorMoveToTarget::~ActorMoveToTarget() {
  SharedDtor();
}

void ActorMoveToTarget::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActorMoveToTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorMoveToTarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorMoveToTarget_descriptor_;
}

const ActorMoveToTarget& ActorMoveToTarget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleExpression_2eproto();
  return *default_instance_;
}

ActorMoveToTarget* ActorMoveToTarget::default_instance_ = NULL;

ActorMoveToTarget* ActorMoveToTarget::New() const {
  return new ActorMoveToTarget;
}

void ActorMoveToTarget::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    source_guid_ = GOOGLE_ULONGLONG(0);
    target_guid_ = GOOGLE_ULONGLONG(0);
    stop_range_ = 0;
    move_speed_ = 0;
    time_stamp_ = GOOGLE_ULONGLONG(0);
    move_serial_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ActorMoveToTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 source_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &source_guid_)));
          set_has_source_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_target_guid;
        break;
      }

      // optional fixed64 target_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_target_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &target_guid_)));
          set_has_target_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stop_range;
        break;
      }

      // required int32 stop_range = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stop_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stop_range_)));
          set_has_stop_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_move_speed;
        break;
      }

      // required int32 move_speed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_move_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move_speed_)));
          set_has_move_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_time_stamp;
        break;
      }

      // required fixed64 time_stamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_move_serial;
        break;
      }

      // required int32 move_serial = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_move_serial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move_serial_)));
          set_has_move_serial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ActorMoveToTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 source_guid = 1;
  if (has_source_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->source_guid(), output);
  }

  // optional fixed64 target_guid = 2;
  if (has_target_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->target_guid(), output);
  }

  // required int32 stop_range = 3;
  if (has_stop_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stop_range(), output);
  }

  // required int32 move_speed = 4;
  if (has_move_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->move_speed(), output);
  }

  // required fixed64 time_stamp = 5;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->time_stamp(), output);
  }

  // required int32 move_serial = 6;
  if (has_move_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->move_serial(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActorMoveToTarget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 source_guid = 1;
  if (has_source_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->source_guid(), target);
  }

  // optional fixed64 target_guid = 2;
  if (has_target_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->target_guid(), target);
  }

  // required int32 stop_range = 3;
  if (has_stop_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->stop_range(), target);
  }

  // required int32 move_speed = 4;
  if (has_move_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->move_speed(), target);
  }

  // required fixed64 time_stamp = 5;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->time_stamp(), target);
  }

  // required int32 move_serial = 6;
  if (has_move_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->move_serial(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActorMoveToTarget::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 source_guid = 1;
    if (has_source_guid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 target_guid = 2;
    if (has_target_guid()) {
      total_size += 1 + 8;
    }

    // required int32 stop_range = 3;
    if (has_stop_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stop_range());
    }

    // required int32 move_speed = 4;
    if (has_move_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->move_speed());
    }

    // required fixed64 time_stamp = 5;
    if (has_time_stamp()) {
      total_size += 1 + 8;
    }

    // required int32 move_serial = 6;
    if (has_move_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->move_serial());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorMoveToTarget::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorMoveToTarget* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorMoveToTarget*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ActorMoveToTarget::MergeFrom(const ActorMoveToTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_guid()) {
      set_source_guid(from.source_guid());
    }
    if (from.has_target_guid()) {
      set_target_guid(from.target_guid());
    }
    if (from.has_stop_range()) {
      set_stop_range(from.stop_range());
    }
    if (from.has_move_speed()) {
      set_move_speed(from.move_speed());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_move_serial()) {
      set_move_serial(from.move_serial());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ActorMoveToTarget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ActorMoveToTarget::CopyFrom(const ActorMoveToTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ActorMoveToTarget::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003d) != 0x0000003d) return false;

  return true;
}

void ActorMoveToTarget::SetInitialized() {
  _has_bits_[0] |= 0x0000003d;

  return;
}

void ActorMoveToTarget::Swap(ActorMoveToTarget* other) {
  if (other != this) {
    std::swap(source_guid_, other->source_guid_);
    std::swap(target_guid_, other->target_guid_);
    std::swap(stop_range_, other->stop_range_);
    std::swap(move_speed_, other->move_speed_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(move_serial_, other->move_serial_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ActorMoveToTarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorMoveToTarget_descriptor_;
  metadata.reflection = ActorMoveToTarget_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActorMoveToTargetFinish::kSourceGuidFieldNumber;
const int ActorMoveToTargetFinish::kMoveSerialFieldNumber;
const int ActorMoveToTargetFinish::kPosFieldNumber;
#endif  // !_MSC_VER

ActorMoveToTargetFinish::ActorMoveToTargetFinish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActorMoveToTargetFinish::InitAsDefaultInstance() {
  pos_ = const_cast< ::Packet::Position*>(&::Packet::Position::default_instance());
}

ActorMoveToTargetFinish::ActorMoveToTargetFinish(const ActorMoveToTargetFinish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActorMoveToTargetFinish::SharedCtor() {
  _cached_size_ = 0;
  source_guid_ = GOOGLE_ULONGLONG(0);
  move_serial_ = 0;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorMoveToTargetFinish::~ActorMoveToTargetFinish() {
  SharedDtor();
}

void ActorMoveToTargetFinish::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void ActorMoveToTargetFinish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorMoveToTargetFinish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorMoveToTargetFinish_descriptor_;
}

const ActorMoveToTargetFinish& ActorMoveToTargetFinish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleExpression_2eproto();
  return *default_instance_;
}

ActorMoveToTargetFinish* ActorMoveToTargetFinish::default_instance_ = NULL;

ActorMoveToTargetFinish* ActorMoveToTargetFinish::New() const {
  return new ActorMoveToTargetFinish;
}

void ActorMoveToTargetFinish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    source_guid_ = GOOGLE_ULONGLONG(0);
    move_serial_ = 0;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Packet::Position::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ActorMoveToTargetFinish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 source_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &source_guid_)));
          set_has_source_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_move_serial;
        break;
      }

      // required int32 move_serial = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_move_serial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move_serial_)));
          set_has_move_serial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // required .Packet.Position pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ActorMoveToTargetFinish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 source_guid = 1;
  if (has_source_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->source_guid(), output);
  }

  // required int32 move_serial = 2;
  if (has_move_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->move_serial(), output);
  }

  // required .Packet.Position pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActorMoveToTargetFinish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 source_guid = 1;
  if (has_source_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->source_guid(), target);
  }

  // required int32 move_serial = 2;
  if (has_move_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->move_serial(), target);
  }

  // required .Packet.Position pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActorMoveToTargetFinish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 source_guid = 1;
    if (has_source_guid()) {
      total_size += 1 + 8;
    }

    // required int32 move_serial = 2;
    if (has_move_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->move_serial());
    }

    // required .Packet.Position pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorMoveToTargetFinish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorMoveToTargetFinish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorMoveToTargetFinish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ActorMoveToTargetFinish::MergeFrom(const ActorMoveToTargetFinish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_guid()) {
      set_source_guid(from.source_guid());
    }
    if (from.has_move_serial()) {
      set_move_serial(from.move_serial());
    }
    if (from.has_pos()) {
      mutable_pos()->::Packet::Position::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ActorMoveToTargetFinish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ActorMoveToTargetFinish::CopyFrom(const ActorMoveToTargetFinish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ActorMoveToTargetFinish::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void ActorMoveToTargetFinish::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  if (has_pos()) {
    this->mutable_pos()->SetInitialized();
  }
  return;
}

void ActorMoveToTargetFinish::Swap(ActorMoveToTargetFinish* other) {
  if (other != this) {
    std::swap(source_guid_, other->source_guid_);
    std::swap(move_serial_, other->move_serial_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ActorMoveToTargetFinish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorMoveToTargetFinish_descriptor_;
  metadata.reflection = ActorMoveToTargetFinish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActorMoveToPos::kSourceGuidFieldNumber;
const int ActorMoveToPos::kTargetPosFieldNumber;
const int ActorMoveToPos::kMoveSpeedFieldNumber;
const int ActorMoveToPos::kTimeStampFieldNumber;
#endif  // !_MSC_VER

ActorMoveToPos::ActorMoveToPos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActorMoveToPos::InitAsDefaultInstance() {
  target_pos_ = const_cast< ::Packet::Position*>(&::Packet::Position::default_instance());
}

ActorMoveToPos::ActorMoveToPos(const ActorMoveToPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActorMoveToPos::SharedCtor() {
  _cached_size_ = 0;
  source_guid_ = GOOGLE_ULONGLONG(0);
  target_pos_ = NULL;
  move_speed_ = 0;
  time_stamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorMoveToPos::~ActorMoveToPos() {
  SharedDtor();
}

void ActorMoveToPos::SharedDtor() {
  if (this != default_instance_) {
    delete target_pos_;
  }
}

void ActorMoveToPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorMoveToPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorMoveToPos_descriptor_;
}

const ActorMoveToPos& ActorMoveToPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleExpression_2eproto();
  return *default_instance_;
}

ActorMoveToPos* ActorMoveToPos::default_instance_ = NULL;

ActorMoveToPos* ActorMoveToPos::New() const {
  return new ActorMoveToPos;
}

void ActorMoveToPos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    source_guid_ = GOOGLE_ULONGLONG(0);
    if (has_target_pos()) {
      if (target_pos_ != NULL) target_pos_->::Packet::Position::Clear();
    }
    move_speed_ = 0;
    time_stamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ActorMoveToPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 source_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &source_guid_)));
          set_has_source_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_target_pos;
        break;
      }

      // required .Packet.Position target_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_move_speed;
        break;
      }

      // required int32 move_speed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_move_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move_speed_)));
          set_has_move_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_time_stamp;
        break;
      }

      // required fixed64 time_stamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ActorMoveToPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 source_guid = 1;
  if (has_source_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->source_guid(), output);
  }

  // required .Packet.Position target_pos = 2;
  if (has_target_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->target_pos(), output);
  }

  // required int32 move_speed = 3;
  if (has_move_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->move_speed(), output);
  }

  // required fixed64 time_stamp = 4;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActorMoveToPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 source_guid = 1;
  if (has_source_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->source_guid(), target);
  }

  // required .Packet.Position target_pos = 2;
  if (has_target_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->target_pos(), target);
  }

  // required int32 move_speed = 3;
  if (has_move_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->move_speed(), target);
  }

  // required fixed64 time_stamp = 4;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActorMoveToPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 source_guid = 1;
    if (has_source_guid()) {
      total_size += 1 + 8;
    }

    // required .Packet.Position target_pos = 2;
    if (has_target_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target_pos());
    }

    // required int32 move_speed = 3;
    if (has_move_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->move_speed());
    }

    // required fixed64 time_stamp = 4;
    if (has_time_stamp()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorMoveToPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorMoveToPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorMoveToPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ActorMoveToPos::MergeFrom(const ActorMoveToPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_guid()) {
      set_source_guid(from.source_guid());
    }
    if (from.has_target_pos()) {
      mutable_target_pos()->::Packet::Position::MergeFrom(from.target_pos());
    }
    if (from.has_move_speed()) {
      set_move_speed(from.move_speed());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ActorMoveToPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ActorMoveToPos::CopyFrom(const ActorMoveToPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ActorMoveToPos::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_target_pos()) {
    if (!this->target_pos().IsInitialized()) return false;
  }
  return true;
}

void ActorMoveToPos::SetInitialized() {
  _has_bits_[0] |= 0x0000000f;

  if (has_target_pos()) {
    this->mutable_target_pos()->SetInitialized();
  }
  return;
}

void ActorMoveToPos::Swap(ActorMoveToPos* other) {
  if (other != this) {
    std::swap(source_guid_, other->source_guid_);
    std::swap(target_pos_, other->target_pos_);
    std::swap(move_speed_, other->move_speed_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ActorMoveToPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorMoveToPos_descriptor_;
  metadata.reflection = ActorMoveToPos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActorUseSkill::kSourceGuidFieldNumber;
const int ActorUseSkill::kTargetGuidFieldNumber;
const int ActorUseSkill::kSkillFieldNumber;
const int ActorUseSkill::kTimeStampFieldNumber;
#endif  // !_MSC_VER

ActorUseSkill::ActorUseSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActorUseSkill::InitAsDefaultInstance() {
  skill_ = const_cast< ::Packet::SkillInfo*>(&::Packet::SkillInfo::default_instance());
}

ActorUseSkill::ActorUseSkill(const ActorUseSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActorUseSkill::SharedCtor() {
  _cached_size_ = 0;
  source_guid_ = GOOGLE_ULONGLONG(0);
  skill_ = NULL;
  time_stamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorUseSkill::~ActorUseSkill() {
  SharedDtor();
}

void ActorUseSkill::SharedDtor() {
  if (this != default_instance_) {
    delete skill_;
  }
}

void ActorUseSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorUseSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorUseSkill_descriptor_;
}

const ActorUseSkill& ActorUseSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleExpression_2eproto();
  return *default_instance_;
}

ActorUseSkill* ActorUseSkill::default_instance_ = NULL;

ActorUseSkill* ActorUseSkill::New() const {
  return new ActorUseSkill;
}

void ActorUseSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    source_guid_ = GOOGLE_ULONGLONG(0);
    if (has_skill()) {
      if (skill_ != NULL) skill_->::Packet::SkillInfo::Clear();
    }
    time_stamp_ = GOOGLE_ULONGLONG(0);
  }
  target_guid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ActorUseSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 source_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &source_guid_)));
          set_has_source_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_target_guid;
        break;
      }

      // repeated fixed64 target_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_target_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17, input, this->mutable_target_guid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_target_guid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_target_guid;
        if (input->ExpectTag(26)) goto parse_skill;
        break;
      }

      // required .Packet.SkillInfo skill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_time_stamp;
        break;
      }

      // required fixed64 time_stamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ActorUseSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 source_guid = 1;
  if (has_source_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->source_guid(), output);
  }

  // repeated fixed64 target_guid = 2;
  for (int i = 0; i < this->target_guid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->target_guid(i), output);
  }

  // required .Packet.SkillInfo skill = 3;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->skill(), output);
  }

  // required fixed64 time_stamp = 4;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActorUseSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 source_guid = 1;
  if (has_source_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->source_guid(), target);
  }

  // repeated fixed64 target_guid = 2;
  for (int i = 0; i < this->target_guid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(2, this->target_guid(i), target);
  }

  // required .Packet.SkillInfo skill = 3;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->skill(), target);
  }

  // required fixed64 time_stamp = 4;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActorUseSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 source_guid = 1;
    if (has_source_guid()) {
      total_size += 1 + 8;
    }

    // required .Packet.SkillInfo skill = 3;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill());
    }

    // required fixed64 time_stamp = 4;
    if (has_time_stamp()) {
      total_size += 1 + 8;
    }

  }
  // repeated fixed64 target_guid = 2;
  {
    int data_size = 0;
    data_size = 8 * this->target_guid_size();
    total_size += 1 * this->target_guid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorUseSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorUseSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorUseSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ActorUseSkill::MergeFrom(const ActorUseSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  target_guid_.MergeFrom(from.target_guid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_guid()) {
      set_source_guid(from.source_guid());
    }
    if (from.has_skill()) {
      mutable_skill()->::Packet::SkillInfo::MergeFrom(from.skill());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ActorUseSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ActorUseSkill::CopyFrom(const ActorUseSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ActorUseSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  if (has_skill()) {
    if (!this->skill().IsInitialized()) return false;
  }
  return true;
}

void ActorUseSkill::SetInitialized() {
  _has_bits_[0] |= 0x0000000d;

  if (has_skill()) {
    this->mutable_skill()->SetInitialized();
  }
  return;
}

void ActorUseSkill::Swap(ActorUseSkill* other) {
  if (other != this) {
    std::swap(source_guid_, other->source_guid_);
    target_guid_.Swap(&other->target_guid_);
    std::swap(skill_, other->skill_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ActorUseSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorUseSkill_descriptor_;
  metadata.reflection = ActorUseSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActorCancelSkill::kSourceGuidFieldNumber;
const int ActorCancelSkill::kSkillIdFieldNumber;
const int ActorCancelSkill::kTimeStampFieldNumber;
#endif  // !_MSC_VER

ActorCancelSkill::ActorCancelSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActorCancelSkill::InitAsDefaultInstance() {
}

ActorCancelSkill::ActorCancelSkill(const ActorCancelSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActorCancelSkill::SharedCtor() {
  _cached_size_ = 0;
  source_guid_ = GOOGLE_ULONGLONG(0);
  skill_id_ = 0;
  time_stamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorCancelSkill::~ActorCancelSkill() {
  SharedDtor();
}

void ActorCancelSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActorCancelSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorCancelSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorCancelSkill_descriptor_;
}

const ActorCancelSkill& ActorCancelSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleExpression_2eproto();
  return *default_instance_;
}

ActorCancelSkill* ActorCancelSkill::default_instance_ = NULL;

ActorCancelSkill* ActorCancelSkill::New() const {
  return new ActorCancelSkill;
}

void ActorCancelSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    source_guid_ = GOOGLE_ULONGLONG(0);
    skill_id_ = 0;
    time_stamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ActorCancelSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 source_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &source_guid_)));
          set_has_source_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_id;
        break;
      }

      // required int32 skill_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_time_stamp;
        break;
      }

      // required fixed64 time_stamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ActorCancelSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 source_guid = 1;
  if (has_source_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->source_guid(), output);
  }

  // required int32 skill_id = 2;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skill_id(), output);
  }

  // required fixed64 time_stamp = 3;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActorCancelSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 source_guid = 1;
  if (has_source_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->source_guid(), target);
  }

  // required int32 skill_id = 2;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skill_id(), target);
  }

  // required fixed64 time_stamp = 3;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActorCancelSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 source_guid = 1;
    if (has_source_guid()) {
      total_size += 1 + 8;
    }

    // required int32 skill_id = 2;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }

    // required fixed64 time_stamp = 3;
    if (has_time_stamp()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorCancelSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorCancelSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorCancelSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ActorCancelSkill::MergeFrom(const ActorCancelSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_guid()) {
      set_source_guid(from.source_guid());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ActorCancelSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ActorCancelSkill::CopyFrom(const ActorCancelSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ActorCancelSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ActorCancelSkill::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  return;
}

void ActorCancelSkill::Swap(ActorCancelSkill* other) {
  if (other != this) {
    std::swap(source_guid_, other->source_guid_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ActorCancelSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorCancelSkill_descriptor_;
  metadata.reflection = ActorCancelSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActorBuffAttach::kSourceGuidFieldNumber;
const int ActorBuffAttach::kTargetGuidFieldNumber;
const int ActorBuffAttach::kBuffFieldNumber;
const int ActorBuffAttach::kTimeStampFieldNumber;
#endif  // !_MSC_VER

ActorBuffAttach::ActorBuffAttach()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActorBuffAttach::InitAsDefaultInstance() {
  buff_ = const_cast< ::Packet::BuffInfo*>(&::Packet::BuffInfo::default_instance());
}

ActorBuffAttach::ActorBuffAttach(const ActorBuffAttach& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActorBuffAttach::SharedCtor() {
  _cached_size_ = 0;
  source_guid_ = GOOGLE_ULONGLONG(0);
  target_guid_ = GOOGLE_ULONGLONG(0);
  buff_ = NULL;
  time_stamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorBuffAttach::~ActorBuffAttach() {
  SharedDtor();
}

void ActorBuffAttach::SharedDtor() {
  if (this != default_instance_) {
    delete buff_;
  }
}

void ActorBuffAttach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorBuffAttach::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorBuffAttach_descriptor_;
}

const ActorBuffAttach& ActorBuffAttach::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleExpression_2eproto();
  return *default_instance_;
}

ActorBuffAttach* ActorBuffAttach::default_instance_ = NULL;

ActorBuffAttach* ActorBuffAttach::New() const {
  return new ActorBuffAttach;
}

void ActorBuffAttach::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    source_guid_ = GOOGLE_ULONGLONG(0);
    target_guid_ = GOOGLE_ULONGLONG(0);
    if (has_buff()) {
      if (buff_ != NULL) buff_->::Packet::BuffInfo::Clear();
    }
    time_stamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ActorBuffAttach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 source_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &source_guid_)));
          set_has_source_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_target_guid;
        break;
      }

      // optional fixed64 target_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_target_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &target_guid_)));
          set_has_target_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_buff;
        break;
      }

      // required .Packet.BuffInfo buff = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buff()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_time_stamp;
        break;
      }

      // required fixed64 time_stamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ActorBuffAttach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 source_guid = 1;
  if (has_source_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->source_guid(), output);
  }

  // optional fixed64 target_guid = 2;
  if (has_target_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->target_guid(), output);
  }

  // required .Packet.BuffInfo buff = 3;
  if (has_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->buff(), output);
  }

  // required fixed64 time_stamp = 4;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActorBuffAttach::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 source_guid = 1;
  if (has_source_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->source_guid(), target);
  }

  // optional fixed64 target_guid = 2;
  if (has_target_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->target_guid(), target);
  }

  // required .Packet.BuffInfo buff = 3;
  if (has_buff()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->buff(), target);
  }

  // required fixed64 time_stamp = 4;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActorBuffAttach::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 source_guid = 1;
    if (has_source_guid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 target_guid = 2;
    if (has_target_guid()) {
      total_size += 1 + 8;
    }

    // required .Packet.BuffInfo buff = 3;
    if (has_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buff());
    }

    // required fixed64 time_stamp = 4;
    if (has_time_stamp()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorBuffAttach::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorBuffAttach* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorBuffAttach*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ActorBuffAttach::MergeFrom(const ActorBuffAttach& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_guid()) {
      set_source_guid(from.source_guid());
    }
    if (from.has_target_guid()) {
      set_target_guid(from.target_guid());
    }
    if (from.has_buff()) {
      mutable_buff()->::Packet::BuffInfo::MergeFrom(from.buff());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ActorBuffAttach::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ActorBuffAttach::CopyFrom(const ActorBuffAttach& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ActorBuffAttach::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  if (has_buff()) {
    if (!this->buff().IsInitialized()) return false;
  }
  return true;
}

void ActorBuffAttach::SetInitialized() {
  _has_bits_[0] |= 0x0000000d;

  if (has_buff()) {
    this->mutable_buff()->SetInitialized();
  }
  return;
}

void ActorBuffAttach::Swap(ActorBuffAttach* other) {
  if (other != this) {
    std::swap(source_guid_, other->source_guid_);
    std::swap(target_guid_, other->target_guid_);
    std::swap(buff_, other->buff_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ActorBuffAttach::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorBuffAttach_descriptor_;
  metadata.reflection = ActorBuffAttach_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActorBuffRefresh::kSourceGuidFieldNumber;
const int ActorBuffRefresh::kTargetGuidFieldNumber;
const int ActorBuffRefresh::kBuffFieldNumber;
const int ActorBuffRefresh::kTimeStampFieldNumber;
#endif  // !_MSC_VER

ActorBuffRefresh::ActorBuffRefresh()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActorBuffRefresh::InitAsDefaultInstance() {
  buff_ = const_cast< ::Packet::BuffInfo*>(&::Packet::BuffInfo::default_instance());
}

ActorBuffRefresh::ActorBuffRefresh(const ActorBuffRefresh& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActorBuffRefresh::SharedCtor() {
  _cached_size_ = 0;
  source_guid_ = GOOGLE_ULONGLONG(0);
  target_guid_ = GOOGLE_ULONGLONG(0);
  buff_ = NULL;
  time_stamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorBuffRefresh::~ActorBuffRefresh() {
  SharedDtor();
}

void ActorBuffRefresh::SharedDtor() {
  if (this != default_instance_) {
    delete buff_;
  }
}

void ActorBuffRefresh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorBuffRefresh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorBuffRefresh_descriptor_;
}

const ActorBuffRefresh& ActorBuffRefresh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleExpression_2eproto();
  return *default_instance_;
}

ActorBuffRefresh* ActorBuffRefresh::default_instance_ = NULL;

ActorBuffRefresh* ActorBuffRefresh::New() const {
  return new ActorBuffRefresh;
}

void ActorBuffRefresh::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    source_guid_ = GOOGLE_ULONGLONG(0);
    target_guid_ = GOOGLE_ULONGLONG(0);
    if (has_buff()) {
      if (buff_ != NULL) buff_->::Packet::BuffInfo::Clear();
    }
    time_stamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ActorBuffRefresh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 source_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &source_guid_)));
          set_has_source_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_target_guid;
        break;
      }

      // optional fixed64 target_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_target_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &target_guid_)));
          set_has_target_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_buff;
        break;
      }

      // required .Packet.BuffInfo buff = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buff()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_time_stamp;
        break;
      }

      // required fixed64 time_stamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ActorBuffRefresh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 source_guid = 1;
  if (has_source_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->source_guid(), output);
  }

  // optional fixed64 target_guid = 2;
  if (has_target_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->target_guid(), output);
  }

  // required .Packet.BuffInfo buff = 3;
  if (has_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->buff(), output);
  }

  // required fixed64 time_stamp = 4;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActorBuffRefresh::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 source_guid = 1;
  if (has_source_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->source_guid(), target);
  }

  // optional fixed64 target_guid = 2;
  if (has_target_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->target_guid(), target);
  }

  // required .Packet.BuffInfo buff = 3;
  if (has_buff()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->buff(), target);
  }

  // required fixed64 time_stamp = 4;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActorBuffRefresh::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 source_guid = 1;
    if (has_source_guid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 target_guid = 2;
    if (has_target_guid()) {
      total_size += 1 + 8;
    }

    // required .Packet.BuffInfo buff = 3;
    if (has_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buff());
    }

    // required fixed64 time_stamp = 4;
    if (has_time_stamp()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorBuffRefresh::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorBuffRefresh* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorBuffRefresh*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ActorBuffRefresh::MergeFrom(const ActorBuffRefresh& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_guid()) {
      set_source_guid(from.source_guid());
    }
    if (from.has_target_guid()) {
      set_target_guid(from.target_guid());
    }
    if (from.has_buff()) {
      mutable_buff()->::Packet::BuffInfo::MergeFrom(from.buff());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ActorBuffRefresh::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ActorBuffRefresh::CopyFrom(const ActorBuffRefresh& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ActorBuffRefresh::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  if (has_buff()) {
    if (!this->buff().IsInitialized()) return false;
  }
  return true;
}

void ActorBuffRefresh::SetInitialized() {
  _has_bits_[0] |= 0x0000000d;

  if (has_buff()) {
    this->mutable_buff()->SetInitialized();
  }
  return;
}

void ActorBuffRefresh::Swap(ActorBuffRefresh* other) {
  if (other != this) {
    std::swap(source_guid_, other->source_guid_);
    std::swap(target_guid_, other->target_guid_);
    std::swap(buff_, other->buff_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ActorBuffRefresh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorBuffRefresh_descriptor_;
  metadata.reflection = ActorBuffRefresh_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActorAddState::kTargetGuidFieldNumber;
const int ActorAddState::kStateFieldNumber;
const int ActorAddState::kTimeStampFieldNumber;
const int ActorAddState::kFearDirFieldNumber;
#endif  // !_MSC_VER

ActorAddState::ActorAddState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActorAddState::InitAsDefaultInstance() {
}

ActorAddState::ActorAddState(const ActorAddState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActorAddState::SharedCtor() {
  _cached_size_ = 0;
  target_guid_ = GOOGLE_ULONGLONG(0);
  state_ = 1;
  time_stamp_ = GOOGLE_ULONGLONG(0);
  fear_dir_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorAddState::~ActorAddState() {
  SharedDtor();
}

void ActorAddState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActorAddState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorAddState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorAddState_descriptor_;
}

const ActorAddState& ActorAddState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleExpression_2eproto();
  return *default_instance_;
}

ActorAddState* ActorAddState::default_instance_ = NULL;

ActorAddState* ActorAddState::New() const {
  return new ActorAddState;
}

void ActorAddState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    target_guid_ = GOOGLE_ULONGLONG(0);
    state_ = 1;
    time_stamp_ = GOOGLE_ULONGLONG(0);
    fear_dir_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ActorAddState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 target_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &target_guid_)));
          set_has_target_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required .Config.BattleObjectStatus state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Config::BattleObjectStatus_IsValid(value)) {
            set_state(static_cast< ::Config::BattleObjectStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_time_stamp;
        break;
      }

      // required fixed64 time_stamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_fear_dir;
        break;
      }

      // optional float fear_dir = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fear_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fear_dir_)));
          set_has_fear_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ActorAddState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 target_guid = 1;
  if (has_target_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->target_guid(), output);
  }

  // required .Config.BattleObjectStatus state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // required fixed64 time_stamp = 3;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->time_stamp(), output);
  }

  // optional float fear_dir = 4;
  if (has_fear_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->fear_dir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActorAddState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 target_guid = 1;
  if (has_target_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->target_guid(), target);
  }

  // required .Config.BattleObjectStatus state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // required fixed64 time_stamp = 3;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->time_stamp(), target);
  }

  // optional float fear_dir = 4;
  if (has_fear_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->fear_dir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActorAddState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 target_guid = 1;
    if (has_target_guid()) {
      total_size += 1 + 8;
    }

    // required .Config.BattleObjectStatus state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // required fixed64 time_stamp = 3;
    if (has_time_stamp()) {
      total_size += 1 + 8;
    }

    // optional float fear_dir = 4;
    if (has_fear_dir()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorAddState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorAddState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorAddState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ActorAddState::MergeFrom(const ActorAddState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_guid()) {
      set_target_guid(from.target_guid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_fear_dir()) {
      set_fear_dir(from.fear_dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ActorAddState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ActorAddState::CopyFrom(const ActorAddState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ActorAddState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ActorAddState::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  return;
}

void ActorAddState::Swap(ActorAddState* other) {
  if (other != this) {
    std::swap(target_guid_, other->target_guid_);
    std::swap(state_, other->state_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(fear_dir_, other->fear_dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ActorAddState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorAddState_descriptor_;
  metadata.reflection = ActorAddState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActorRemoveState::kTargetGuidFieldNumber;
const int ActorRemoveState::kStateFieldNumber;
const int ActorRemoveState::kTimeStampFieldNumber;
#endif  // !_MSC_VER

ActorRemoveState::ActorRemoveState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActorRemoveState::InitAsDefaultInstance() {
}

ActorRemoveState::ActorRemoveState(const ActorRemoveState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActorRemoveState::SharedCtor() {
  _cached_size_ = 0;
  target_guid_ = GOOGLE_ULONGLONG(0);
  state_ = 1;
  time_stamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorRemoveState::~ActorRemoveState() {
  SharedDtor();
}

void ActorRemoveState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActorRemoveState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorRemoveState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorRemoveState_descriptor_;
}

const ActorRemoveState& ActorRemoveState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleExpression_2eproto();
  return *default_instance_;
}

ActorRemoveState* ActorRemoveState::default_instance_ = NULL;

ActorRemoveState* ActorRemoveState::New() const {
  return new ActorRemoveState;
}

void ActorRemoveState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    target_guid_ = GOOGLE_ULONGLONG(0);
    state_ = 1;
    time_stamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ActorRemoveState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 target_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &target_guid_)));
          set_has_target_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required .Config.BattleObjectStatus state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Config::BattleObjectStatus_IsValid(value)) {
            set_state(static_cast< ::Config::BattleObjectStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_time_stamp;
        break;
      }

      // required fixed64 time_stamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ActorRemoveState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 target_guid = 1;
  if (has_target_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->target_guid(), output);
  }

  // required .Config.BattleObjectStatus state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // required fixed64 time_stamp = 3;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActorRemoveState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 target_guid = 1;
  if (has_target_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->target_guid(), target);
  }

  // required .Config.BattleObjectStatus state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // required fixed64 time_stamp = 3;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActorRemoveState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 target_guid = 1;
    if (has_target_guid()) {
      total_size += 1 + 8;
    }

    // required .Config.BattleObjectStatus state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // required fixed64 time_stamp = 3;
    if (has_time_stamp()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorRemoveState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorRemoveState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorRemoveState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ActorRemoveState::MergeFrom(const ActorRemoveState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_guid()) {
      set_target_guid(from.target_guid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ActorRemoveState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ActorRemoveState::CopyFrom(const ActorRemoveState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ActorRemoveState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ActorRemoveState::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  return;
}

void ActorRemoveState::Swap(ActorRemoveState* other) {
  if (other != this) {
    std::swap(target_guid_, other->target_guid_);
    std::swap(state_, other->state_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ActorRemoveState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorRemoveState_descriptor_;
  metadata.reflection = ActorRemoveState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActorBuffDettach::kSourceGuidFieldNumber;
const int ActorBuffDettach::kTargetGuidFieldNumber;
const int ActorBuffDettach::kBuffFieldNumber;
const int ActorBuffDettach::kTimeStampFieldNumber;
#endif  // !_MSC_VER

ActorBuffDettach::ActorBuffDettach()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActorBuffDettach::InitAsDefaultInstance() {
  buff_ = const_cast< ::Packet::BuffInfo*>(&::Packet::BuffInfo::default_instance());
}

ActorBuffDettach::ActorBuffDettach(const ActorBuffDettach& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActorBuffDettach::SharedCtor() {
  _cached_size_ = 0;
  source_guid_ = GOOGLE_ULONGLONG(0);
  target_guid_ = GOOGLE_ULONGLONG(0);
  buff_ = NULL;
  time_stamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorBuffDettach::~ActorBuffDettach() {
  SharedDtor();
}

void ActorBuffDettach::SharedDtor() {
  if (this != default_instance_) {
    delete buff_;
  }
}

void ActorBuffDettach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorBuffDettach::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorBuffDettach_descriptor_;
}

const ActorBuffDettach& ActorBuffDettach::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleExpression_2eproto();
  return *default_instance_;
}

ActorBuffDettach* ActorBuffDettach::default_instance_ = NULL;

ActorBuffDettach* ActorBuffDettach::New() const {
  return new ActorBuffDettach;
}

void ActorBuffDettach::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    source_guid_ = GOOGLE_ULONGLONG(0);
    target_guid_ = GOOGLE_ULONGLONG(0);
    if (has_buff()) {
      if (buff_ != NULL) buff_->::Packet::BuffInfo::Clear();
    }
    time_stamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ActorBuffDettach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 source_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &source_guid_)));
          set_has_source_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_target_guid;
        break;
      }

      // required fixed64 target_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_target_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &target_guid_)));
          set_has_target_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_buff;
        break;
      }

      // required .Packet.BuffInfo buff = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buff()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_time_stamp;
        break;
      }

      // required fixed64 time_stamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ActorBuffDettach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 source_guid = 1;
  if (has_source_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->source_guid(), output);
  }

  // required fixed64 target_guid = 2;
  if (has_target_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->target_guid(), output);
  }

  // required .Packet.BuffInfo buff = 3;
  if (has_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->buff(), output);
  }

  // required fixed64 time_stamp = 4;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActorBuffDettach::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 source_guid = 1;
  if (has_source_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->source_guid(), target);
  }

  // required fixed64 target_guid = 2;
  if (has_target_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->target_guid(), target);
  }

  // required .Packet.BuffInfo buff = 3;
  if (has_buff()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->buff(), target);
  }

  // required fixed64 time_stamp = 4;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActorBuffDettach::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 source_guid = 1;
    if (has_source_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 target_guid = 2;
    if (has_target_guid()) {
      total_size += 1 + 8;
    }

    // required .Packet.BuffInfo buff = 3;
    if (has_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buff());
    }

    // required fixed64 time_stamp = 4;
    if (has_time_stamp()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorBuffDettach::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorBuffDettach* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorBuffDettach*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ActorBuffDettach::MergeFrom(const ActorBuffDettach& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_guid()) {
      set_source_guid(from.source_guid());
    }
    if (from.has_target_guid()) {
      set_target_guid(from.target_guid());
    }
    if (from.has_buff()) {
      mutable_buff()->::Packet::BuffInfo::MergeFrom(from.buff());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ActorBuffDettach::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ActorBuffDettach::CopyFrom(const ActorBuffDettach& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ActorBuffDettach::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  if (has_buff()) {
    if (!this->buff().IsInitialized()) return false;
  }
  return true;
}

void ActorBuffDettach::SetInitialized() {
  _has_bits_[0] |= 0x0000000e;

  if (has_buff()) {
    this->mutable_buff()->SetInitialized();
  }
  return;
}

void ActorBuffDettach::Swap(ActorBuffDettach* other) {
  if (other != this) {
    std::swap(source_guid_, other->source_guid_);
    std::swap(target_guid_, other->target_guid_);
    std::swap(buff_, other->buff_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ActorBuffDettach::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorBuffDettach_descriptor_;
  metadata.reflection = ActorBuffDettach_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveSpeedUpdate::kTargetGuidFieldNumber;
const int MoveSpeedUpdate::kMoveSpeedFieldNumber;
const int MoveSpeedUpdate::kBuffFieldNumber;
const int MoveSpeedUpdate::kTimeStampFieldNumber;
#endif  // !_MSC_VER

MoveSpeedUpdate::MoveSpeedUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveSpeedUpdate::InitAsDefaultInstance() {
  buff_ = const_cast< ::Packet::BuffInfo*>(&::Packet::BuffInfo::default_instance());
}

MoveSpeedUpdate::MoveSpeedUpdate(const MoveSpeedUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveSpeedUpdate::SharedCtor() {
  _cached_size_ = 0;
  target_guid_ = GOOGLE_ULONGLONG(0);
  move_speed_ = 0;
  buff_ = NULL;
  time_stamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveSpeedUpdate::~MoveSpeedUpdate() {
  SharedDtor();
}

void MoveSpeedUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete buff_;
  }
}

void MoveSpeedUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveSpeedUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveSpeedUpdate_descriptor_;
}

const MoveSpeedUpdate& MoveSpeedUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleExpression_2eproto();
  return *default_instance_;
}

MoveSpeedUpdate* MoveSpeedUpdate::default_instance_ = NULL;

MoveSpeedUpdate* MoveSpeedUpdate::New() const {
  return new MoveSpeedUpdate;
}

void MoveSpeedUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    target_guid_ = GOOGLE_ULONGLONG(0);
    move_speed_ = 0;
    if (has_buff()) {
      if (buff_ != NULL) buff_->::Packet::BuffInfo::Clear();
    }
    time_stamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool MoveSpeedUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 target_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &target_guid_)));
          set_has_target_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_move_speed;
        break;
      }

      // required int32 move_speed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_move_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move_speed_)));
          set_has_move_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_buff;
        break;
      }

      // optional .Packet.BuffInfo buff = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buff()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_time_stamp;
        break;
      }

      // required fixed64 time_stamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void MoveSpeedUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 target_guid = 1;
  if (has_target_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->target_guid(), output);
  }

  // required int32 move_speed = 2;
  if (has_move_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->move_speed(), output);
  }

  // optional .Packet.BuffInfo buff = 3;
  if (has_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->buff(), output);
  }

  // required fixed64 time_stamp = 4;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveSpeedUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 target_guid = 1;
  if (has_target_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->target_guid(), target);
  }

  // required int32 move_speed = 2;
  if (has_move_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->move_speed(), target);
  }

  // optional .Packet.BuffInfo buff = 3;
  if (has_buff()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->buff(), target);
  }

  // required fixed64 time_stamp = 4;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveSpeedUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 target_guid = 1;
    if (has_target_guid()) {
      total_size += 1 + 8;
    }

    // required int32 move_speed = 2;
    if (has_move_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->move_speed());
    }

    // optional .Packet.BuffInfo buff = 3;
    if (has_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buff());
    }

    // required fixed64 time_stamp = 4;
    if (has_time_stamp()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveSpeedUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveSpeedUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveSpeedUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void MoveSpeedUpdate::MergeFrom(const MoveSpeedUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_guid()) {
      set_target_guid(from.target_guid());
    }
    if (from.has_move_speed()) {
      set_move_speed(from.move_speed());
    }
    if (from.has_buff()) {
      mutable_buff()->::Packet::BuffInfo::MergeFrom(from.buff());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void MoveSpeedUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void MoveSpeedUpdate::CopyFrom(const MoveSpeedUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool MoveSpeedUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (has_buff()) {
    if (!this->buff().IsInitialized()) return false;
  }
  return true;
}

void MoveSpeedUpdate::SetInitialized() {
  _has_bits_[0] |= 0x0000000b;

  if (has_buff()) {
    this->mutable_buff()->SetInitialized();
  }
  return;
}

void MoveSpeedUpdate::Swap(MoveSpeedUpdate* other) {
  if (other != this) {
    std::swap(target_guid_, other->target_guid_);
    std::swap(move_speed_, other->move_speed_);
    std::swap(buff_, other->buff_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata MoveSpeedUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveSpeedUpdate_descriptor_;
  metadata.reflection = MoveSpeedUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillEffects::kDamagesFieldNumber;
const int SkillEffects::kCuresFieldNumber;
const int SkillEffects::kTimeStampFieldNumber;
#endif  // !_MSC_VER

SkillEffects::SkillEffects()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillEffects::InitAsDefaultInstance() {
}

SkillEffects::SkillEffects(const SkillEffects& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillEffects::SharedCtor() {
  _cached_size_ = 0;
  time_stamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillEffects::~SkillEffects() {
  SharedDtor();
}

void SkillEffects::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillEffects::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillEffects::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillEffects_descriptor_;
}

const SkillEffects& SkillEffects::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleExpression_2eproto();
  return *default_instance_;
}

SkillEffects* SkillEffects::default_instance_ = NULL;

SkillEffects* SkillEffects::New() const {
  return new SkillEffects;
}

void SkillEffects::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    time_stamp_ = GOOGLE_ULONGLONG(0);
  }
  damages_.Clear();
  cures_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SkillEffects::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.ActorOnDamage damages = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_damages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_damages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_damages;
        if (input->ExpectTag(18)) goto parse_cures;
        break;
      }

      // repeated .Packet.ActorOnCure cures = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cures:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cures()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cures;
        if (input->ExpectTag(25)) goto parse_time_stamp;
        break;
      }

      // required fixed64 time_stamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SkillEffects::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.ActorOnDamage damages = 1;
  for (int i = 0; i < this->damages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->damages(i), output);
  }

  // repeated .Packet.ActorOnCure cures = 2;
  for (int i = 0; i < this->cures_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cures(i), output);
  }

  // required fixed64 time_stamp = 3;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillEffects::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.ActorOnDamage damages = 1;
  for (int i = 0; i < this->damages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->damages(i), target);
  }

  // repeated .Packet.ActorOnCure cures = 2;
  for (int i = 0; i < this->cures_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cures(i), target);
  }

  // required fixed64 time_stamp = 3;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillEffects::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required fixed64 time_stamp = 3;
    if (has_time_stamp()) {
      total_size += 1 + 8;
    }

  }
  // repeated .Packet.ActorOnDamage damages = 1;
  total_size += 1 * this->damages_size();
  for (int i = 0; i < this->damages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->damages(i));
  }

  // repeated .Packet.ActorOnCure cures = 2;
  total_size += 1 * this->cures_size();
  for (int i = 0; i < this->cures_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cures(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillEffects::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillEffects* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillEffects*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SkillEffects::MergeFrom(const SkillEffects& from) {
  GOOGLE_CHECK_NE(&from, this);
  damages_.MergeFrom(from.damages_);
  cures_.MergeFrom(from.cures_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SkillEffects::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SkillEffects::CopyFrom(const SkillEffects& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SkillEffects::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  for (int i = 0; i < damages_size(); i++) {
    if (!this->damages(i).IsInitialized()) return false;
  }
  for (int i = 0; i < cures_size(); i++) {
    if (!this->cures(i).IsInitialized()) return false;
  }
  return true;
}

void SkillEffects::SetInitialized() {
  _has_bits_[0] |= 0x00000004;

  for (int i = 0; i < damages_size(); i++) {
    this->mutable_damages(i)->SetInitialized();
  }
  for (int i = 0; i < cures_size(); i++) {
    this->mutable_cures(i)->SetInitialized();
  }
  return;
}

void SkillEffects::Swap(SkillEffects* other) {
  if (other != this) {
    damages_.Swap(&other->damages_);
    cures_.Swap(&other->cures_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SkillEffects::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillEffects_descriptor_;
  metadata.reflection = SkillEffects_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActorOnDamage::kSourceGuidFieldNumber;
const int ActorOnDamage::kTargetGuidFieldNumber;
const int ActorOnDamage::kDamageFieldNumber;
const int ActorOnDamage::kTypeFieldNumber;
const int ActorOnDamage::kExpressionFieldNumber;
const int ActorOnDamage::kOldHpFieldNumber;
const int ActorOnDamage::kNewHpFieldNumber;
const int ActorOnDamage::kSkillFieldNumber;
const int ActorOnDamage::kBuffFieldNumber;
const int ActorOnDamage::kTrapFieldNumber;
#endif  // !_MSC_VER

ActorOnDamage::ActorOnDamage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActorOnDamage::InitAsDefaultInstance() {
  skill_ = const_cast< ::Packet::SkillInfo*>(&::Packet::SkillInfo::default_instance());
  buff_ = const_cast< ::Packet::BuffInfo*>(&::Packet::BuffInfo::default_instance());
  trap_ = const_cast< ::Packet::TrapInfo*>(&::Packet::TrapInfo::default_instance());
}

ActorOnDamage::ActorOnDamage(const ActorOnDamage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActorOnDamage::SharedCtor() {
  _cached_size_ = 0;
  source_guid_ = GOOGLE_ULONGLONG(0);
  target_guid_ = GOOGLE_ULONGLONG(0);
  damage_ = 0;
  type_ = 1;
  expression_ = 1;
  old_hp_ = 0;
  new_hp_ = 0;
  skill_ = NULL;
  buff_ = NULL;
  trap_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorOnDamage::~ActorOnDamage() {
  SharedDtor();
}

void ActorOnDamage::SharedDtor() {
  if (this != default_instance_) {
    delete skill_;
    delete buff_;
    delete trap_;
  }
}

void ActorOnDamage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorOnDamage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorOnDamage_descriptor_;
}

const ActorOnDamage& ActorOnDamage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleExpression_2eproto();
  return *default_instance_;
}

ActorOnDamage* ActorOnDamage::default_instance_ = NULL;

ActorOnDamage* ActorOnDamage::New() const {
  return new ActorOnDamage;
}

void ActorOnDamage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    source_guid_ = GOOGLE_ULONGLONG(0);
    target_guid_ = GOOGLE_ULONGLONG(0);
    damage_ = 0;
    type_ = 1;
    expression_ = 1;
    old_hp_ = 0;
    new_hp_ = 0;
    if (has_skill()) {
      if (skill_ != NULL) skill_->::Packet::SkillInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_buff()) {
      if (buff_ != NULL) buff_->::Packet::BuffInfo::Clear();
    }
    if (has_trap()) {
      if (trap_ != NULL) trap_->::Packet::TrapInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ActorOnDamage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 source_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &source_guid_)));
          set_has_source_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_target_guid;
        break;
      }

      // required fixed64 target_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_target_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &target_guid_)));
          set_has_target_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_damage;
        break;
      }

      // required int32 damage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required .Packet.DamageType type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::DamageType_IsValid(value)) {
            set_type(static_cast< ::Packet::DamageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_expression;
        break;
      }

      // required .Packet.DamageExpression expression = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expression:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::DamageExpression_IsValid(value)) {
            set_expression(static_cast< ::Packet::DamageExpression >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_old_hp;
        break;
      }

      // required int32 old_hp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &old_hp_)));
          set_has_old_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_new_hp;
        break;
      }

      // required int32 new_hp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_hp_)));
          set_has_new_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_skill;
        break;
      }

      // optional .Packet.SkillInfo skill = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_buff;
        break;
      }

      // optional .Packet.BuffInfo buff = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buff()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_trap;
        break;
      }

      // optional .Packet.TrapInfo trap = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ActorOnDamage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 source_guid = 1;
  if (has_source_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->source_guid(), output);
  }

  // required fixed64 target_guid = 2;
  if (has_target_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->target_guid(), output);
  }

  // required int32 damage = 3;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->damage(), output);
  }

  // required .Packet.DamageType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // required .Packet.DamageExpression expression = 5;
  if (has_expression()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->expression(), output);
  }

  // required int32 old_hp = 6;
  if (has_old_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->old_hp(), output);
  }

  // required int32 new_hp = 7;
  if (has_new_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->new_hp(), output);
  }

  // optional .Packet.SkillInfo skill = 8;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->skill(), output);
  }

  // optional .Packet.BuffInfo buff = 9;
  if (has_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->buff(), output);
  }

  // optional .Packet.TrapInfo trap = 10;
  if (has_trap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->trap(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActorOnDamage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 source_guid = 1;
  if (has_source_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->source_guid(), target);
  }

  // required fixed64 target_guid = 2;
  if (has_target_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->target_guid(), target);
  }

  // required int32 damage = 3;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->damage(), target);
  }

  // required .Packet.DamageType type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // required .Packet.DamageExpression expression = 5;
  if (has_expression()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->expression(), target);
  }

  // required int32 old_hp = 6;
  if (has_old_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->old_hp(), target);
  }

  // required int32 new_hp = 7;
  if (has_new_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->new_hp(), target);
  }

  // optional .Packet.SkillInfo skill = 8;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->skill(), target);
  }

  // optional .Packet.BuffInfo buff = 9;
  if (has_buff()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->buff(), target);
  }

  // optional .Packet.TrapInfo trap = 10;
  if (has_trap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->trap(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActorOnDamage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 source_guid = 1;
    if (has_source_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 target_guid = 2;
    if (has_target_guid()) {
      total_size += 1 + 8;
    }

    // required int32 damage = 3;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

    // required .Packet.DamageType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .Packet.DamageExpression expression = 5;
    if (has_expression()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->expression());
    }

    // required int32 old_hp = 6;
    if (has_old_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->old_hp());
    }

    // required int32 new_hp = 7;
    if (has_new_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_hp());
    }

    // optional .Packet.SkillInfo skill = 8;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Packet.BuffInfo buff = 9;
    if (has_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buff());
    }

    // optional .Packet.TrapInfo trap = 10;
    if (has_trap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trap());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorOnDamage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorOnDamage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorOnDamage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ActorOnDamage::MergeFrom(const ActorOnDamage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_guid()) {
      set_source_guid(from.source_guid());
    }
    if (from.has_target_guid()) {
      set_target_guid(from.target_guid());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_expression()) {
      set_expression(from.expression());
    }
    if (from.has_old_hp()) {
      set_old_hp(from.old_hp());
    }
    if (from.has_new_hp()) {
      set_new_hp(from.new_hp());
    }
    if (from.has_skill()) {
      mutable_skill()->::Packet::SkillInfo::MergeFrom(from.skill());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_buff()) {
      mutable_buff()->::Packet::BuffInfo::MergeFrom(from.buff());
    }
    if (from.has_trap()) {
      mutable_trap()->::Packet::TrapInfo::MergeFrom(from.trap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ActorOnDamage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ActorOnDamage::CopyFrom(const ActorOnDamage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ActorOnDamage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007e) != 0x0000007e) return false;

  if (has_skill()) {
    if (!this->skill().IsInitialized()) return false;
  }
  if (has_buff()) {
    if (!this->buff().IsInitialized()) return false;
  }
  if (has_trap()) {
    if (!this->trap().IsInitialized()) return false;
  }
  return true;
}

void ActorOnDamage::SetInitialized() {
  _has_bits_[0] |= 0x0000007e;

  if (has_skill()) {
    this->mutable_skill()->SetInitialized();
  }
  if (has_buff()) {
    this->mutable_buff()->SetInitialized();
  }
  if (has_trap()) {
    this->mutable_trap()->SetInitialized();
  }
  return;
}

void ActorOnDamage::Swap(ActorOnDamage* other) {
  if (other != this) {
    std::swap(source_guid_, other->source_guid_);
    std::swap(target_guid_, other->target_guid_);
    std::swap(damage_, other->damage_);
    std::swap(type_, other->type_);
    std::swap(expression_, other->expression_);
    std::swap(old_hp_, other->old_hp_);
    std::swap(new_hp_, other->new_hp_);
    std::swap(skill_, other->skill_);
    std::swap(buff_, other->buff_);
    std::swap(trap_, other->trap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ActorOnDamage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorOnDamage_descriptor_;
  metadata.reflection = ActorOnDamage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlashChainDamage::kDamagesFieldNumber;
const int FlashChainDamage::kTimeStampFieldNumber;
#endif  // !_MSC_VER

FlashChainDamage::FlashChainDamage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlashChainDamage::InitAsDefaultInstance() {
}

FlashChainDamage::FlashChainDamage(const FlashChainDamage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlashChainDamage::SharedCtor() {
  _cached_size_ = 0;
  time_stamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlashChainDamage::~FlashChainDamage() {
  SharedDtor();
}

void FlashChainDamage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlashChainDamage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlashChainDamage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlashChainDamage_descriptor_;
}

const FlashChainDamage& FlashChainDamage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleExpression_2eproto();
  return *default_instance_;
}

FlashChainDamage* FlashChainDamage::default_instance_ = NULL;

FlashChainDamage* FlashChainDamage::New() const {
  return new FlashChainDamage;
}

void FlashChainDamage::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    time_stamp_ = GOOGLE_ULONGLONG(0);
  }
  damages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool FlashChainDamage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.ActorOnDamage damages = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_damages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_damages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_damages;
        if (input->ExpectTag(17)) goto parse_time_stamp;
        break;
      }

      // required fixed64 time_stamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void FlashChainDamage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.ActorOnDamage damages = 1;
  for (int i = 0; i < this->damages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->damages(i), output);
  }

  // required fixed64 time_stamp = 2;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlashChainDamage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.ActorOnDamage damages = 1;
  for (int i = 0; i < this->damages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->damages(i), target);
  }

  // required fixed64 time_stamp = 2;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlashChainDamage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required fixed64 time_stamp = 2;
    if (has_time_stamp()) {
      total_size += 1 + 8;
    }

  }
  // repeated .Packet.ActorOnDamage damages = 1;
  total_size += 1 * this->damages_size();
  for (int i = 0; i < this->damages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->damages(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlashChainDamage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlashChainDamage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlashChainDamage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void FlashChainDamage::MergeFrom(const FlashChainDamage& from) {
  GOOGLE_CHECK_NE(&from, this);
  damages_.MergeFrom(from.damages_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void FlashChainDamage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void FlashChainDamage::CopyFrom(const FlashChainDamage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool FlashChainDamage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < damages_size(); i++) {
    if (!this->damages(i).IsInitialized()) return false;
  }
  return true;
}

void FlashChainDamage::SetInitialized() {
  _has_bits_[0] |= 0x00000002;

  for (int i = 0; i < damages_size(); i++) {
    this->mutable_damages(i)->SetInitialized();
  }
  return;
}

void FlashChainDamage::Swap(FlashChainDamage* other) {
  if (other != this) {
    damages_.Swap(&other->damages_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata FlashChainDamage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlashChainDamage_descriptor_;
  metadata.reflection = FlashChainDamage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CureChain::kCuresFieldNumber;
const int CureChain::kTimeStampFieldNumber;
#endif  // !_MSC_VER

CureChain::CureChain()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CureChain::InitAsDefaultInstance() {
}

CureChain::CureChain(const CureChain& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CureChain::SharedCtor() {
  _cached_size_ = 0;
  time_stamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CureChain::~CureChain() {
  SharedDtor();
}

void CureChain::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CureChain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CureChain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CureChain_descriptor_;
}

const CureChain& CureChain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleExpression_2eproto();
  return *default_instance_;
}

CureChain* CureChain::default_instance_ = NULL;

CureChain* CureChain::New() const {
  return new CureChain;
}

void CureChain::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    time_stamp_ = GOOGLE_ULONGLONG(0);
  }
  cures_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool CureChain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.ActorOnCure cures = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cures:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cures()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cures;
        if (input->ExpectTag(17)) goto parse_time_stamp;
        break;
      }

      // required fixed64 time_stamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void CureChain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.ActorOnCure cures = 1;
  for (int i = 0; i < this->cures_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cures(i), output);
  }

  // required fixed64 time_stamp = 2;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CureChain::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.ActorOnCure cures = 1;
  for (int i = 0; i < this->cures_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cures(i), target);
  }

  // required fixed64 time_stamp = 2;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CureChain::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required fixed64 time_stamp = 2;
    if (has_time_stamp()) {
      total_size += 1 + 8;
    }

  }
  // repeated .Packet.ActorOnCure cures = 1;
  total_size += 1 * this->cures_size();
  for (int i = 0; i < this->cures_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cures(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CureChain::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CureChain* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CureChain*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void CureChain::MergeFrom(const CureChain& from) {
  GOOGLE_CHECK_NE(&from, this);
  cures_.MergeFrom(from.cures_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void CureChain::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void CureChain::CopyFrom(const CureChain& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool CureChain::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < cures_size(); i++) {
    if (!this->cures(i).IsInitialized()) return false;
  }
  return true;
}

void CureChain::SetInitialized() {
  _has_bits_[0] |= 0x00000002;

  for (int i = 0; i < cures_size(); i++) {
    this->mutable_cures(i)->SetInitialized();
  }
  return;
}

void CureChain::Swap(CureChain* other) {
  if (other != this) {
    cures_.Swap(&other->cures_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata CureChain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CureChain_descriptor_;
  metadata.reflection = CureChain_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActorOnCure::kSourceGuidFieldNumber;
const int ActorOnCure::kTargetGuidFieldNumber;
const int ActorOnCure::kCureFieldNumber;
const int ActorOnCure::kOldHpFieldNumber;
const int ActorOnCure::kNewHpFieldNumber;
const int ActorOnCure::kSkillFieldNumber;
const int ActorOnCure::kBuffFieldNumber;
#endif  // !_MSC_VER

ActorOnCure::ActorOnCure()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActorOnCure::InitAsDefaultInstance() {
  skill_ = const_cast< ::Packet::SkillInfo*>(&::Packet::SkillInfo::default_instance());
  buff_ = const_cast< ::Packet::BuffInfo*>(&::Packet::BuffInfo::default_instance());
}

ActorOnCure::ActorOnCure(const ActorOnCure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActorOnCure::SharedCtor() {
  _cached_size_ = 0;
  source_guid_ = GOOGLE_ULONGLONG(0);
  target_guid_ = GOOGLE_ULONGLONG(0);
  cure_ = 0;
  old_hp_ = 0;
  new_hp_ = 0;
  skill_ = NULL;
  buff_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorOnCure::~ActorOnCure() {
  SharedDtor();
}

void ActorOnCure::SharedDtor() {
  if (this != default_instance_) {
    delete skill_;
    delete buff_;
  }
}

void ActorOnCure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorOnCure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorOnCure_descriptor_;
}

const ActorOnCure& ActorOnCure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleExpression_2eproto();
  return *default_instance_;
}

ActorOnCure* ActorOnCure::default_instance_ = NULL;

ActorOnCure* ActorOnCure::New() const {
  return new ActorOnCure;
}

void ActorOnCure::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    source_guid_ = GOOGLE_ULONGLONG(0);
    target_guid_ = GOOGLE_ULONGLONG(0);
    cure_ = 0;
    old_hp_ = 0;
    new_hp_ = 0;
    if (has_skill()) {
      if (skill_ != NULL) skill_->::Packet::SkillInfo::Clear();
    }
    if (has_buff()) {
      if (buff_ != NULL) buff_->::Packet::BuffInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ActorOnCure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 source_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &source_guid_)));
          set_has_source_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_target_guid;
        break;
      }

      // required fixed64 target_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_target_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &target_guid_)));
          set_has_target_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cure;
        break;
      }

      // required int32 cure = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cure_)));
          set_has_cure();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_old_hp;
        break;
      }

      // required int32 old_hp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &old_hp_)));
          set_has_old_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_new_hp;
        break;
      }

      // required int32 new_hp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_hp_)));
          set_has_new_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_skill;
        break;
      }

      // optional .Packet.SkillInfo skill = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_buff;
        break;
      }

      // optional .Packet.BuffInfo buff = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buff()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ActorOnCure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 source_guid = 1;
  if (has_source_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->source_guid(), output);
  }

  // required fixed64 target_guid = 2;
  if (has_target_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->target_guid(), output);
  }

  // required int32 cure = 3;
  if (has_cure()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cure(), output);
  }

  // required int32 old_hp = 4;
  if (has_old_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->old_hp(), output);
  }

  // required int32 new_hp = 5;
  if (has_new_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->new_hp(), output);
  }

  // optional .Packet.SkillInfo skill = 6;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->skill(), output);
  }

  // optional .Packet.BuffInfo buff = 7;
  if (has_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->buff(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActorOnCure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 source_guid = 1;
  if (has_source_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->source_guid(), target);
  }

  // required fixed64 target_guid = 2;
  if (has_target_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->target_guid(), target);
  }

  // required int32 cure = 3;
  if (has_cure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cure(), target);
  }

  // required int32 old_hp = 4;
  if (has_old_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->old_hp(), target);
  }

  // required int32 new_hp = 5;
  if (has_new_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->new_hp(), target);
  }

  // optional .Packet.SkillInfo skill = 6;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->skill(), target);
  }

  // optional .Packet.BuffInfo buff = 7;
  if (has_buff()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->buff(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActorOnCure::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 source_guid = 1;
    if (has_source_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 target_guid = 2;
    if (has_target_guid()) {
      total_size += 1 + 8;
    }

    // required int32 cure = 3;
    if (has_cure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cure());
    }

    // required int32 old_hp = 4;
    if (has_old_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->old_hp());
    }

    // required int32 new_hp = 5;
    if (has_new_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_hp());
    }

    // optional .Packet.SkillInfo skill = 6;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill());
    }

    // optional .Packet.BuffInfo buff = 7;
    if (has_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buff());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorOnCure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorOnCure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorOnCure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ActorOnCure::MergeFrom(const ActorOnCure& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_guid()) {
      set_source_guid(from.source_guid());
    }
    if (from.has_target_guid()) {
      set_target_guid(from.target_guid());
    }
    if (from.has_cure()) {
      set_cure(from.cure());
    }
    if (from.has_old_hp()) {
      set_old_hp(from.old_hp());
    }
    if (from.has_new_hp()) {
      set_new_hp(from.new_hp());
    }
    if (from.has_skill()) {
      mutable_skill()->::Packet::SkillInfo::MergeFrom(from.skill());
    }
    if (from.has_buff()) {
      mutable_buff()->::Packet::BuffInfo::MergeFrom(from.buff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ActorOnCure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ActorOnCure::CopyFrom(const ActorOnCure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ActorOnCure::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;

  if (has_skill()) {
    if (!this->skill().IsInitialized()) return false;
  }
  if (has_buff()) {
    if (!this->buff().IsInitialized()) return false;
  }
  return true;
}

void ActorOnCure::SetInitialized() {
  _has_bits_[0] |= 0x0000001e;

  if (has_skill()) {
    this->mutable_skill()->SetInitialized();
  }
  if (has_buff()) {
    this->mutable_buff()->SetInitialized();
  }
  return;
}

void ActorOnCure::Swap(ActorOnCure* other) {
  if (other != this) {
    std::swap(source_guid_, other->source_guid_);
    std::swap(target_guid_, other->target_guid_);
    std::swap(cure_, other->cure_);
    std::swap(old_hp_, other->old_hp_);
    std::swap(new_hp_, other->new_hp_);
    std::swap(skill_, other->skill_);
    std::swap(buff_, other->buff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ActorOnCure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorOnCure_descriptor_;
  metadata.reflection = ActorOnCure_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActorDead::kSourceGuidFieldNumber;
const int ActorDead::kTargetGuidFieldNumber;
const int ActorDead::kSkillFieldNumber;
const int ActorDead::kBuffFieldNumber;
const int ActorDead::kTimeStampFieldNumber;
#endif  // !_MSC_VER

ActorDead::ActorDead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActorDead::InitAsDefaultInstance() {
  skill_ = const_cast< ::Packet::SkillInfo*>(&::Packet::SkillInfo::default_instance());
  buff_ = const_cast< ::Packet::BuffInfo*>(&::Packet::BuffInfo::default_instance());
}

ActorDead::ActorDead(const ActorDead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActorDead::SharedCtor() {
  _cached_size_ = 0;
  source_guid_ = GOOGLE_ULONGLONG(0);
  target_guid_ = GOOGLE_ULONGLONG(0);
  skill_ = NULL;
  buff_ = NULL;
  time_stamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorDead::~ActorDead() {
  SharedDtor();
}

void ActorDead::SharedDtor() {
  if (this != default_instance_) {
    delete skill_;
    delete buff_;
  }
}

void ActorDead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorDead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorDead_descriptor_;
}

const ActorDead& ActorDead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleExpression_2eproto();
  return *default_instance_;
}

ActorDead* ActorDead::default_instance_ = NULL;

ActorDead* ActorDead::New() const {
  return new ActorDead;
}

void ActorDead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    source_guid_ = GOOGLE_ULONGLONG(0);
    target_guid_ = GOOGLE_ULONGLONG(0);
    if (has_skill()) {
      if (skill_ != NULL) skill_->::Packet::SkillInfo::Clear();
    }
    if (has_buff()) {
      if (buff_ != NULL) buff_->::Packet::BuffInfo::Clear();
    }
    time_stamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ActorDead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 source_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &source_guid_)));
          set_has_source_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_target_guid;
        break;
      }

      // required fixed64 target_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_target_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &target_guid_)));
          set_has_target_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_skill;
        break;
      }

      // optional .Packet.SkillInfo skill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_buff;
        break;
      }

      // optional .Packet.BuffInfo buff = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buff()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_time_stamp;
        break;
      }

      // required fixed64 time_stamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ActorDead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 source_guid = 1;
  if (has_source_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->source_guid(), output);
  }

  // required fixed64 target_guid = 2;
  if (has_target_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->target_guid(), output);
  }

  // optional .Packet.SkillInfo skill = 3;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->skill(), output);
  }

  // optional .Packet.BuffInfo buff = 4;
  if (has_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->buff(), output);
  }

  // required fixed64 time_stamp = 5;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActorDead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 source_guid = 1;
  if (has_source_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->source_guid(), target);
  }

  // required fixed64 target_guid = 2;
  if (has_target_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->target_guid(), target);
  }

  // optional .Packet.SkillInfo skill = 3;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->skill(), target);
  }

  // optional .Packet.BuffInfo buff = 4;
  if (has_buff()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->buff(), target);
  }

  // required fixed64 time_stamp = 5;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActorDead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 source_guid = 1;
    if (has_source_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 target_guid = 2;
    if (has_target_guid()) {
      total_size += 1 + 8;
    }

    // optional .Packet.SkillInfo skill = 3;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill());
    }

    // optional .Packet.BuffInfo buff = 4;
    if (has_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buff());
    }

    // required fixed64 time_stamp = 5;
    if (has_time_stamp()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorDead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorDead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorDead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ActorDead::MergeFrom(const ActorDead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_guid()) {
      set_source_guid(from.source_guid());
    }
    if (from.has_target_guid()) {
      set_target_guid(from.target_guid());
    }
    if (from.has_skill()) {
      mutable_skill()->::Packet::SkillInfo::MergeFrom(from.skill());
    }
    if (from.has_buff()) {
      mutable_buff()->::Packet::BuffInfo::MergeFrom(from.buff());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ActorDead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ActorDead::CopyFrom(const ActorDead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ActorDead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000012) != 0x00000012) return false;

  if (has_skill()) {
    if (!this->skill().IsInitialized()) return false;
  }
  if (has_buff()) {
    if (!this->buff().IsInitialized()) return false;
  }
  return true;
}

void ActorDead::SetInitialized() {
  _has_bits_[0] |= 0x00000012;

  if (has_skill()) {
    this->mutable_skill()->SetInitialized();
  }
  if (has_buff()) {
    this->mutable_buff()->SetInitialized();
  }
  return;
}

void ActorDead::Swap(ActorDead* other) {
  if (other != this) {
    std::swap(source_guid_, other->source_guid_);
    std::swap(target_guid_, other->target_guid_);
    std::swap(skill_, other->skill_);
    std::swap(buff_, other->buff_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ActorDead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorDead_descriptor_;
  metadata.reflection = ActorDead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActorRelive::kSourceGuidFieldNumber;
const int ActorRelive::kTargetGuidFieldNumber;
const int ActorRelive::kHpFieldNumber;
const int ActorRelive::kSkillFieldNumber;
const int ActorRelive::kTimeStampFieldNumber;
#endif  // !_MSC_VER

ActorRelive::ActorRelive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActorRelive::InitAsDefaultInstance() {
  skill_ = const_cast< ::Packet::SkillInfo*>(&::Packet::SkillInfo::default_instance());
}

ActorRelive::ActorRelive(const ActorRelive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActorRelive::SharedCtor() {
  _cached_size_ = 0;
  source_guid_ = GOOGLE_ULONGLONG(0);
  target_guid_ = GOOGLE_ULONGLONG(0);
  hp_ = 0;
  skill_ = NULL;
  time_stamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorRelive::~ActorRelive() {
  SharedDtor();
}

void ActorRelive::SharedDtor() {
  if (this != default_instance_) {
    delete skill_;
  }
}

void ActorRelive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorRelive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorRelive_descriptor_;
}

const ActorRelive& ActorRelive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleExpression_2eproto();
  return *default_instance_;
}

ActorRelive* ActorRelive::default_instance_ = NULL;

ActorRelive* ActorRelive::New() const {
  return new ActorRelive;
}

void ActorRelive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    source_guid_ = GOOGLE_ULONGLONG(0);
    target_guid_ = GOOGLE_ULONGLONG(0);
    hp_ = 0;
    if (has_skill()) {
      if (skill_ != NULL) skill_->::Packet::SkillInfo::Clear();
    }
    time_stamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ActorRelive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 source_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &source_guid_)));
          set_has_source_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_target_guid;
        break;
      }

      // required fixed64 target_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_target_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &target_guid_)));
          set_has_target_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hp;
        break;
      }

      // required int32 hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_skill;
        break;
      }

      // required .Packet.SkillInfo skill = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_time_stamp;
        break;
      }

      // required fixed64 time_stamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ActorRelive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 source_guid = 1;
  if (has_source_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->source_guid(), output);
  }

  // required fixed64 target_guid = 2;
  if (has_target_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->target_guid(), output);
  }

  // required int32 hp = 3;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hp(), output);
  }

  // required .Packet.SkillInfo skill = 4;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->skill(), output);
  }

  // required fixed64 time_stamp = 5;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActorRelive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 source_guid = 1;
  if (has_source_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->source_guid(), target);
  }

  // required fixed64 target_guid = 2;
  if (has_target_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->target_guid(), target);
  }

  // required int32 hp = 3;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hp(), target);
  }

  // required .Packet.SkillInfo skill = 4;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->skill(), target);
  }

  // required fixed64 time_stamp = 5;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActorRelive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 source_guid = 1;
    if (has_source_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 target_guid = 2;
    if (has_target_guid()) {
      total_size += 1 + 8;
    }

    // required int32 hp = 3;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // required .Packet.SkillInfo skill = 4;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill());
    }

    // required fixed64 time_stamp = 5;
    if (has_time_stamp()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorRelive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorRelive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorRelive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ActorRelive::MergeFrom(const ActorRelive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_guid()) {
      set_source_guid(from.source_guid());
    }
    if (from.has_target_guid()) {
      set_target_guid(from.target_guid());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_skill()) {
      mutable_skill()->::Packet::SkillInfo::MergeFrom(from.skill());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ActorRelive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ActorRelive::CopyFrom(const ActorRelive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ActorRelive::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;

  if (has_skill()) {
    if (!this->skill().IsInitialized()) return false;
  }
  return true;
}

void ActorRelive::SetInitialized() {
  _has_bits_[0] |= 0x0000001e;

  if (has_skill()) {
    this->mutable_skill()->SetInitialized();
  }
  return;
}

void ActorRelive::Swap(ActorRelive* other) {
  if (other != this) {
    std::swap(source_guid_, other->source_guid_);
    std::swap(target_guid_, other->target_guid_);
    std::swap(hp_, other->hp_);
    std::swap(skill_, other->skill_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ActorRelive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorRelive_descriptor_;
  metadata.reflection = ActorRelive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActorAddBuff::kSourceGuidFieldNumber;
const int ActorAddBuff::kTargetGuidFieldNumber;
const int ActorAddBuff::kBuffFieldNumber;
const int ActorAddBuff::kTimeStampFieldNumber;
#endif  // !_MSC_VER

ActorAddBuff::ActorAddBuff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActorAddBuff::InitAsDefaultInstance() {
  buff_ = const_cast< ::Packet::BuffInfo*>(&::Packet::BuffInfo::default_instance());
}

ActorAddBuff::ActorAddBuff(const ActorAddBuff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActorAddBuff::SharedCtor() {
  _cached_size_ = 0;
  source_guid_ = GOOGLE_ULONGLONG(0);
  target_guid_ = GOOGLE_ULONGLONG(0);
  buff_ = NULL;
  time_stamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorAddBuff::~ActorAddBuff() {
  SharedDtor();
}

void ActorAddBuff::SharedDtor() {
  if (this != default_instance_) {
    delete buff_;
  }
}

void ActorAddBuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorAddBuff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorAddBuff_descriptor_;
}

const ActorAddBuff& ActorAddBuff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleExpression_2eproto();
  return *default_instance_;
}

ActorAddBuff* ActorAddBuff::default_instance_ = NULL;

ActorAddBuff* ActorAddBuff::New() const {
  return new ActorAddBuff;
}

void ActorAddBuff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    source_guid_ = GOOGLE_ULONGLONG(0);
    target_guid_ = GOOGLE_ULONGLONG(0);
    if (has_buff()) {
      if (buff_ != NULL) buff_->::Packet::BuffInfo::Clear();
    }
    time_stamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ActorAddBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 source_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &source_guid_)));
          set_has_source_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_target_guid;
        break;
      }

      // required fixed64 target_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_target_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &target_guid_)));
          set_has_target_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_buff;
        break;
      }

      // required .Packet.BuffInfo buff = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buff()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_time_stamp;
        break;
      }

      // required fixed64 time_stamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ActorAddBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 source_guid = 1;
  if (has_source_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->source_guid(), output);
  }

  // required fixed64 target_guid = 2;
  if (has_target_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->target_guid(), output);
  }

  // required .Packet.BuffInfo buff = 3;
  if (has_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->buff(), output);
  }

  // required fixed64 time_stamp = 4;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActorAddBuff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 source_guid = 1;
  if (has_source_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->source_guid(), target);
  }

  // required fixed64 target_guid = 2;
  if (has_target_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->target_guid(), target);
  }

  // required .Packet.BuffInfo buff = 3;
  if (has_buff()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->buff(), target);
  }

  // required fixed64 time_stamp = 4;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActorAddBuff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 source_guid = 1;
    if (has_source_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 target_guid = 2;
    if (has_target_guid()) {
      total_size += 1 + 8;
    }

    // required .Packet.BuffInfo buff = 3;
    if (has_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buff());
    }

    // required fixed64 time_stamp = 4;
    if (has_time_stamp()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorAddBuff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorAddBuff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorAddBuff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ActorAddBuff::MergeFrom(const ActorAddBuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_guid()) {
      set_source_guid(from.source_guid());
    }
    if (from.has_target_guid()) {
      set_target_guid(from.target_guid());
    }
    if (from.has_buff()) {
      mutable_buff()->::Packet::BuffInfo::MergeFrom(from.buff());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ActorAddBuff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ActorAddBuff::CopyFrom(const ActorAddBuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ActorAddBuff::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_buff()) {
    if (!this->buff().IsInitialized()) return false;
  }
  return true;
}

void ActorAddBuff::SetInitialized() {
  _has_bits_[0] |= 0x0000000f;

  if (has_buff()) {
    this->mutable_buff()->SetInitialized();
  }
  return;
}

void ActorAddBuff::Swap(ActorAddBuff* other) {
  if (other != this) {
    std::swap(source_guid_, other->source_guid_);
    std::swap(target_guid_, other->target_guid_);
    std::swap(buff_, other->buff_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ActorAddBuff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorAddBuff_descriptor_;
  metadata.reflection = ActorAddBuff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillPositionLogic::kTypeFieldNumber;
const int SkillPositionLogic::kSourceGuidFieldNumber;
const int SkillPositionLogic::kTargetGuidFieldNumber;
const int SkillPositionLogic::kMoveSpeedFieldNumber;
const int SkillPositionLogic::kSkillInfoFieldNumber;
const int SkillPositionLogic::kRangeFieldNumber;
const int SkillPositionLogic::kTimeStampFieldNumber;
#endif  // !_MSC_VER

SkillPositionLogic::SkillPositionLogic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillPositionLogic::InitAsDefaultInstance() {
  skill_info_ = const_cast< ::Packet::SkillInfo*>(&::Packet::SkillInfo::default_instance());
}

SkillPositionLogic::SkillPositionLogic(const SkillPositionLogic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillPositionLogic::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  source_guid_ = GOOGLE_ULONGLONG(0);
  target_guid_ = GOOGLE_ULONGLONG(0);
  move_speed_ = 0;
  skill_info_ = NULL;
  range_ = 0;
  time_stamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillPositionLogic::~SkillPositionLogic() {
  SharedDtor();
}

void SkillPositionLogic::SharedDtor() {
  if (this != default_instance_) {
    delete skill_info_;
  }
}

void SkillPositionLogic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillPositionLogic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillPositionLogic_descriptor_;
}

const SkillPositionLogic& SkillPositionLogic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleExpression_2eproto();
  return *default_instance_;
}

SkillPositionLogic* SkillPositionLogic::default_instance_ = NULL;

SkillPositionLogic* SkillPositionLogic::New() const {
  return new SkillPositionLogic;
}

void SkillPositionLogic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    source_guid_ = GOOGLE_ULONGLONG(0);
    target_guid_ = GOOGLE_ULONGLONG(0);
    move_speed_ = 0;
    if (has_skill_info()) {
      if (skill_info_ != NULL) skill_info_->::Packet::SkillInfo::Clear();
    }
    range_ = 0;
    time_stamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SkillPositionLogic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.SkillPositionLogicType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::SkillPositionLogicType_IsValid(value)) {
            set_type(static_cast< ::Packet::SkillPositionLogicType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_source_guid;
        break;
      }

      // required fixed64 source_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_source_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &source_guid_)));
          set_has_source_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_target_guid;
        break;
      }

      // required fixed64 target_guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_target_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &target_guid_)));
          set_has_target_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_move_speed;
        break;
      }

      // optional int32 move_speed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_move_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move_speed_)));
          set_has_move_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_skill_info;
        break;
      }

      // optional .Packet.SkillInfo skill_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_range;
        break;
      }

      // optional int32 range = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &range_)));
          set_has_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_time_stamp;
        break;
      }

      // required fixed64 time_stamp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SkillPositionLogic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.SkillPositionLogicType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required fixed64 source_guid = 2;
  if (has_source_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->source_guid(), output);
  }

  // required fixed64 target_guid = 3;
  if (has_target_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->target_guid(), output);
  }

  // optional int32 move_speed = 4;
  if (has_move_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->move_speed(), output);
  }

  // optional .Packet.SkillInfo skill_info = 5;
  if (has_skill_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->skill_info(), output);
  }

  // optional int32 range = 6;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->range(), output);
  }

  // required fixed64 time_stamp = 7;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillPositionLogic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.SkillPositionLogicType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required fixed64 source_guid = 2;
  if (has_source_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->source_guid(), target);
  }

  // required fixed64 target_guid = 3;
  if (has_target_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->target_guid(), target);
  }

  // optional int32 move_speed = 4;
  if (has_move_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->move_speed(), target);
  }

  // optional .Packet.SkillInfo skill_info = 5;
  if (has_skill_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->skill_info(), target);
  }

  // optional int32 range = 6;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->range(), target);
  }

  // required fixed64 time_stamp = 7;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillPositionLogic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.SkillPositionLogicType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required fixed64 source_guid = 2;
    if (has_source_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 target_guid = 3;
    if (has_target_guid()) {
      total_size += 1 + 8;
    }

    // optional int32 move_speed = 4;
    if (has_move_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->move_speed());
    }

    // optional .Packet.SkillInfo skill_info = 5;
    if (has_skill_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill_info());
    }

    // optional int32 range = 6;
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->range());
    }

    // required fixed64 time_stamp = 7;
    if (has_time_stamp()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillPositionLogic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillPositionLogic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillPositionLogic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SkillPositionLogic::MergeFrom(const SkillPositionLogic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_source_guid()) {
      set_source_guid(from.source_guid());
    }
    if (from.has_target_guid()) {
      set_target_guid(from.target_guid());
    }
    if (from.has_move_speed()) {
      set_move_speed(from.move_speed());
    }
    if (from.has_skill_info()) {
      mutable_skill_info()->::Packet::SkillInfo::MergeFrom(from.skill_info());
    }
    if (from.has_range()) {
      set_range(from.range());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SkillPositionLogic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SkillPositionLogic::CopyFrom(const SkillPositionLogic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SkillPositionLogic::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000047) != 0x00000047) return false;

  if (has_skill_info()) {
    if (!this->skill_info().IsInitialized()) return false;
  }
  return true;
}

void SkillPositionLogic::SetInitialized() {
  _has_bits_[0] |= 0x00000047;

  if (has_skill_info()) {
    this->mutable_skill_info()->SetInitialized();
  }
  return;
}

void SkillPositionLogic::Swap(SkillPositionLogic* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(source_guid_, other->source_guid_);
    std::swap(target_guid_, other->target_guid_);
    std::swap(move_speed_, other->move_speed_);
    std::swap(skill_info_, other->skill_info_);
    std::swap(range_, other->range_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SkillPositionLogic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillPositionLogic_descriptor_;
  metadata.reflection = SkillPositionLogic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActorTransform::kSourceGuidFieldNumber;
const int ActorTransform::kNewResIdFieldNumber;
const int ActorTransform::kNewHpFieldNumber;
const int ActorTransform::kNewMaxHpFieldNumber;
const int ActorTransform::kRadiusFieldNumber;
const int ActorTransform::kTimeStampFieldNumber;
#endif  // !_MSC_VER

ActorTransform::ActorTransform()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActorTransform::InitAsDefaultInstance() {
}

ActorTransform::ActorTransform(const ActorTransform& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActorTransform::SharedCtor() {
  _cached_size_ = 0;
  source_guid_ = GOOGLE_ULONGLONG(0);
  new_res_id_ = 0;
  new_hp_ = 0;
  new_max_hp_ = 0;
  radius_ = 0;
  time_stamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorTransform::~ActorTransform() {
  SharedDtor();
}

void ActorTransform::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActorTransform::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorTransform::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorTransform_descriptor_;
}

const ActorTransform& ActorTransform::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleExpression_2eproto();
  return *default_instance_;
}

ActorTransform* ActorTransform::default_instance_ = NULL;

ActorTransform* ActorTransform::New() const {
  return new ActorTransform;
}

void ActorTransform::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    source_guid_ = GOOGLE_ULONGLONG(0);
    new_res_id_ = 0;
    new_hp_ = 0;
    new_max_hp_ = 0;
    radius_ = 0;
    time_stamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ActorTransform::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 source_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &source_guid_)));
          set_has_source_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_new_res_id;
        break;
      }

      // required int32 new_res_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_res_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_res_id_)));
          set_has_new_res_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_new_hp;
        break;
      }

      // required int32 new_hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_hp_)));
          set_has_new_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_new_max_hp;
        break;
      }

      // required int32 new_max_hp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_max_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_max_hp_)));
          set_has_new_max_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_radius;
        break;
      }

      // required int32 radius = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_time_stamp;
        break;
      }

      // required fixed64 time_stamp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ActorTransform::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 source_guid = 1;
  if (has_source_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->source_guid(), output);
  }

  // required int32 new_res_id = 2;
  if (has_new_res_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->new_res_id(), output);
  }

  // required int32 new_hp = 3;
  if (has_new_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->new_hp(), output);
  }

  // required int32 new_max_hp = 4;
  if (has_new_max_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->new_max_hp(), output);
  }

  // required int32 radius = 5;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->radius(), output);
  }

  // required fixed64 time_stamp = 6;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActorTransform::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 source_guid = 1;
  if (has_source_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->source_guid(), target);
  }

  // required int32 new_res_id = 2;
  if (has_new_res_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->new_res_id(), target);
  }

  // required int32 new_hp = 3;
  if (has_new_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->new_hp(), target);
  }

  // required int32 new_max_hp = 4;
  if (has_new_max_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->new_max_hp(), target);
  }

  // required int32 radius = 5;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->radius(), target);
  }

  // required fixed64 time_stamp = 6;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActorTransform::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 source_guid = 1;
    if (has_source_guid()) {
      total_size += 1 + 8;
    }

    // required int32 new_res_id = 2;
    if (has_new_res_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_res_id());
    }

    // required int32 new_hp = 3;
    if (has_new_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_hp());
    }

    // required int32 new_max_hp = 4;
    if (has_new_max_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_max_hp());
    }

    // required int32 radius = 5;
    if (has_radius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->radius());
    }

    // required fixed64 time_stamp = 6;
    if (has_time_stamp()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorTransform::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorTransform* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorTransform*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ActorTransform::MergeFrom(const ActorTransform& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_guid()) {
      set_source_guid(from.source_guid());
    }
    if (from.has_new_res_id()) {
      set_new_res_id(from.new_res_id());
    }
    if (from.has_new_hp()) {
      set_new_hp(from.new_hp());
    }
    if (from.has_new_max_hp()) {
      set_new_max_hp(from.new_max_hp());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ActorTransform::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ActorTransform::CopyFrom(const ActorTransform& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ActorTransform::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void ActorTransform::SetInitialized() {
  _has_bits_[0] |= 0x0000003f;

  return;
}

void ActorTransform::Swap(ActorTransform* other) {
  if (other != this) {
    std::swap(source_guid_, other->source_guid_);
    std::swap(new_res_id_, other->new_res_id_);
    std::swap(new_hp_, other->new_hp_);
    std::swap(new_max_hp_, other->new_max_hp_);
    std::swap(radius_, other->radius_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ActorTransform::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorTransform_descriptor_;
  metadata.reflection = ActorTransform_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActorTransformCancel::kSourceGuidFieldNumber;
const int ActorTransformCancel::kRadiusFieldNumber;
const int ActorTransformCancel::kTimeStampFieldNumber;
#endif  // !_MSC_VER

ActorTransformCancel::ActorTransformCancel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActorTransformCancel::InitAsDefaultInstance() {
}

ActorTransformCancel::ActorTransformCancel(const ActorTransformCancel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActorTransformCancel::SharedCtor() {
  _cached_size_ = 0;
  source_guid_ = GOOGLE_ULONGLONG(0);
  radius_ = 0;
  time_stamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorTransformCancel::~ActorTransformCancel() {
  SharedDtor();
}

void ActorTransformCancel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActorTransformCancel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorTransformCancel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorTransformCancel_descriptor_;
}

const ActorTransformCancel& ActorTransformCancel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleExpression_2eproto();
  return *default_instance_;
}

ActorTransformCancel* ActorTransformCancel::default_instance_ = NULL;

ActorTransformCancel* ActorTransformCancel::New() const {
  return new ActorTransformCancel;
}

void ActorTransformCancel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    source_guid_ = GOOGLE_ULONGLONG(0);
    radius_ = 0;
    time_stamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ActorTransformCancel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 source_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &source_guid_)));
          set_has_source_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_radius;
        break;
      }

      // required int32 radius = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_time_stamp;
        break;
      }

      // required fixed64 time_stamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ActorTransformCancel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 source_guid = 1;
  if (has_source_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->source_guid(), output);
  }

  // required int32 radius = 2;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->radius(), output);
  }

  // required fixed64 time_stamp = 3;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActorTransformCancel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 source_guid = 1;
  if (has_source_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->source_guid(), target);
  }

  // required int32 radius = 2;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->radius(), target);
  }

  // required fixed64 time_stamp = 3;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActorTransformCancel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 source_guid = 1;
    if (has_source_guid()) {
      total_size += 1 + 8;
    }

    // required int32 radius = 2;
    if (has_radius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->radius());
    }

    // required fixed64 time_stamp = 3;
    if (has_time_stamp()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorTransformCancel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorTransformCancel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorTransformCancel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ActorTransformCancel::MergeFrom(const ActorTransformCancel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_guid()) {
      set_source_guid(from.source_guid());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ActorTransformCancel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ActorTransformCancel::CopyFrom(const ActorTransformCancel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ActorTransformCancel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ActorTransformCancel::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  return;
}

void ActorTransformCancel::Swap(ActorTransformCancel* other) {
  if (other != this) {
    std::swap(source_guid_, other->source_guid_);
    std::swap(radius_, other->radius_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ActorTransformCancel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorTransformCancel_descriptor_;
  metadata.reflection = ActorTransformCancel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrapCreate::kGuidFieldNumber;
const int TrapCreate::kTrapFieldNumber;
const int TrapCreate::kTimeStampFieldNumber;
#endif  // !_MSC_VER

TrapCreate::TrapCreate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrapCreate::InitAsDefaultInstance() {
  trap_ = const_cast< ::Packet::TrapInfo*>(&::Packet::TrapInfo::default_instance());
}

TrapCreate::TrapCreate(const TrapCreate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrapCreate::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  trap_ = NULL;
  time_stamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrapCreate::~TrapCreate() {
  SharedDtor();
}

void TrapCreate::SharedDtor() {
  if (this != default_instance_) {
    delete trap_;
  }
}

void TrapCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrapCreate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrapCreate_descriptor_;
}

const TrapCreate& TrapCreate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleExpression_2eproto();
  return *default_instance_;
}

TrapCreate* TrapCreate::default_instance_ = NULL;

TrapCreate* TrapCreate::New() const {
  return new TrapCreate;
}

void TrapCreate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    if (has_trap()) {
      if (trap_ != NULL) trap_->::Packet::TrapInfo::Clear();
    }
    time_stamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool TrapCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_trap;
        break;
      }

      // required .Packet.TrapInfo trap = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_time_stamp;
        break;
      }

      // required fixed64 time_stamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void TrapCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required .Packet.TrapInfo trap = 2;
  if (has_trap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->trap(), output);
  }

  // required fixed64 time_stamp = 3;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrapCreate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required .Packet.TrapInfo trap = 2;
  if (has_trap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->trap(), target);
  }

  // required fixed64 time_stamp = 3;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrapCreate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required .Packet.TrapInfo trap = 2;
    if (has_trap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trap());
    }

    // required fixed64 time_stamp = 3;
    if (has_time_stamp()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrapCreate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrapCreate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrapCreate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void TrapCreate::MergeFrom(const TrapCreate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_trap()) {
      mutable_trap()->::Packet::TrapInfo::MergeFrom(from.trap());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void TrapCreate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void TrapCreate::CopyFrom(const TrapCreate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool TrapCreate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_trap()) {
    if (!this->trap().IsInitialized()) return false;
  }
  return true;
}

void TrapCreate::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  if (has_trap()) {
    this->mutable_trap()->SetInitialized();
  }
  return;
}

void TrapCreate::Swap(TrapCreate* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(trap_, other->trap_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata TrapCreate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrapCreate_descriptor_;
  metadata.reflection = TrapCreate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrapDestroy::kGuidFieldNumber;
const int TrapDestroy::kTimeStampFieldNumber;
#endif  // !_MSC_VER

TrapDestroy::TrapDestroy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrapDestroy::InitAsDefaultInstance() {
}

TrapDestroy::TrapDestroy(const TrapDestroy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrapDestroy::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  time_stamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrapDestroy::~TrapDestroy() {
  SharedDtor();
}

void TrapDestroy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrapDestroy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrapDestroy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrapDestroy_descriptor_;
}

const TrapDestroy& TrapDestroy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleExpression_2eproto();
  return *default_instance_;
}

TrapDestroy* TrapDestroy::default_instance_ = NULL;

TrapDestroy* TrapDestroy::New() const {
  return new TrapDestroy;
}

void TrapDestroy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    time_stamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool TrapDestroy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_time_stamp;
        break;
      }

      // required fixed64 time_stamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void TrapDestroy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required fixed64 time_stamp = 2;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrapDestroy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required fixed64 time_stamp = 2;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrapDestroy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 time_stamp = 2;
    if (has_time_stamp()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrapDestroy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrapDestroy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrapDestroy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void TrapDestroy::MergeFrom(const TrapDestroy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void TrapDestroy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void TrapDestroy::CopyFrom(const TrapDestroy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool TrapDestroy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TrapDestroy::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void TrapDestroy::Swap(TrapDestroy* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata TrapDestroy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrapDestroy_descriptor_;
  metadata.reflection = TrapDestroy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActorDamage::kGuidFieldNumber;
const int ActorDamage::kDamageFieldNumber;
#endif  // !_MSC_VER

ActorDamage::ActorDamage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActorDamage::InitAsDefaultInstance() {
}

ActorDamage::ActorDamage(const ActorDamage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActorDamage::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  damage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorDamage::~ActorDamage() {
  SharedDtor();
}

void ActorDamage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActorDamage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorDamage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorDamage_descriptor_;
}

const ActorDamage& ActorDamage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleExpression_2eproto();
  return *default_instance_;
}

ActorDamage* ActorDamage::default_instance_ = NULL;

ActorDamage* ActorDamage::New() const {
  return new ActorDamage;
}

void ActorDamage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    damage_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ActorDamage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_damage;
        break;
      }

      // required int32 damage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ActorDamage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required int32 damage = 2;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->damage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActorDamage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required int32 damage = 2;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->damage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActorDamage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required int32 damage = 2;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorDamage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorDamage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorDamage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ActorDamage::MergeFrom(const ActorDamage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ActorDamage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ActorDamage::CopyFrom(const ActorDamage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ActorDamage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ActorDamage::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void ActorDamage::Swap(ActorDamage* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(damage_, other->damage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ActorDamage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorDamage_descriptor_;
  metadata.reflection = ActorDamage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActorStat::kGuidFieldNumber;
const int ActorStat::kValueFieldNumber;
const int ActorStat::kConfigIdFieldNumber;
#endif  // !_MSC_VER

ActorStat::ActorStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActorStat::InitAsDefaultInstance() {
}

ActorStat::ActorStat(const ActorStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActorStat::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  value_ = 0;
  config_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorStat::~ActorStat() {
  SharedDtor();
}

void ActorStat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActorStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorStat_descriptor_;
}

const ActorStat& ActorStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleExpression_2eproto();
  return *default_instance_;
}

ActorStat* ActorStat::default_instance_ = NULL;

ActorStat* ActorStat::New() const {
  return new ActorStat;
}

void ActorStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    value_ = 0;
    config_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ActorStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_config_id;
        break;
      }

      // optional int32 config_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &config_id_)));
          set_has_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ActorStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  // optional int32 config_id = 3;
  if (has_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->config_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActorStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  // optional int32 config_id = 3;
  if (has_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->config_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActorStat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

    // optional int32 config_id = 3;
    if (has_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->config_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ActorStat::MergeFrom(const ActorStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_config_id()) {
      set_config_id(from.config_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ActorStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ActorStat::CopyFrom(const ActorStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ActorStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ActorStat::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void ActorStat::Swap(ActorStat* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(value_, other->value_);
    std::swap(config_id_, other->config_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ActorStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorStat_descriptor_;
  metadata.reflection = ActorStat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Stat::kDamagesFieldNumber;
const int Stat::kBeDamagesFieldNumber;
const int Stat::kCuresFieldNumber;
const int Stat::kAttackerDamageFieldNumber;
const int Stat::kDefenderDamageFieldNumber;
const int Stat::kAttackerCureFieldNumber;
const int Stat::kDefenderCureFieldNumber;
#endif  // !_MSC_VER

Stat::Stat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Stat::InitAsDefaultInstance() {
}

Stat::Stat(const Stat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Stat::SharedCtor() {
  _cached_size_ = 0;
  attacker_damage_ = GOOGLE_ULONGLONG(0);
  defender_damage_ = GOOGLE_ULONGLONG(0);
  attacker_cure_ = GOOGLE_ULONGLONG(0);
  defender_cure_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stat::~Stat() {
  SharedDtor();
}

void Stat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stat_descriptor_;
}

const Stat& Stat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleExpression_2eproto();
  return *default_instance_;
}

Stat* Stat::default_instance_ = NULL;

Stat* Stat::New() const {
  return new Stat;
}

void Stat::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    attacker_damage_ = GOOGLE_ULONGLONG(0);
    defender_damage_ = GOOGLE_ULONGLONG(0);
    attacker_cure_ = GOOGLE_ULONGLONG(0);
    defender_cure_ = GOOGLE_ULONGLONG(0);
  }
  damages_.Clear();
  be_damages_.Clear();
  cures_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool Stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.ActorStat damages = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_damages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_damages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_damages;
        if (input->ExpectTag(18)) goto parse_be_damages;
        break;
      }

      // repeated .Packet.ActorStat be_damages = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_be_damages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_be_damages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_be_damages;
        if (input->ExpectTag(26)) goto parse_cures;
        break;
      }

      // repeated .Packet.ActorStat cures = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cures:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cures()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cures;
        if (input->ExpectTag(33)) goto parse_attacker_damage;
        break;
      }

      // optional fixed64 attacker_damage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_attacker_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &attacker_damage_)));
          set_has_attacker_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_defender_damage;
        break;
      }

      // optional fixed64 defender_damage = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_defender_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &defender_damage_)));
          set_has_defender_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_attacker_cure;
        break;
      }

      // optional fixed64 attacker_cure = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_attacker_cure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &attacker_cure_)));
          set_has_attacker_cure();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_defender_cure;
        break;
      }

      // optional fixed64 defender_cure = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_defender_cure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &defender_cure_)));
          set_has_defender_cure();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void Stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.ActorStat damages = 1;
  for (int i = 0; i < this->damages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->damages(i), output);
  }

  // repeated .Packet.ActorStat be_damages = 2;
  for (int i = 0; i < this->be_damages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->be_damages(i), output);
  }

  // repeated .Packet.ActorStat cures = 3;
  for (int i = 0; i < this->cures_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cures(i), output);
  }

  // optional fixed64 attacker_damage = 4;
  if (has_attacker_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->attacker_damage(), output);
  }

  // optional fixed64 defender_damage = 5;
  if (has_defender_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->defender_damage(), output);
  }

  // optional fixed64 attacker_cure = 6;
  if (has_attacker_cure()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->attacker_cure(), output);
  }

  // optional fixed64 defender_cure = 7;
  if (has_defender_cure()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->defender_cure(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Stat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.ActorStat damages = 1;
  for (int i = 0; i < this->damages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->damages(i), target);
  }

  // repeated .Packet.ActorStat be_damages = 2;
  for (int i = 0; i < this->be_damages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->be_damages(i), target);
  }

  // repeated .Packet.ActorStat cures = 3;
  for (int i = 0; i < this->cures_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cures(i), target);
  }

  // optional fixed64 attacker_damage = 4;
  if (has_attacker_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->attacker_damage(), target);
  }

  // optional fixed64 defender_damage = 5;
  if (has_defender_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->defender_damage(), target);
  }

  // optional fixed64 attacker_cure = 6;
  if (has_attacker_cure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->attacker_cure(), target);
  }

  // optional fixed64 defender_cure = 7;
  if (has_defender_cure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->defender_cure(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Stat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional fixed64 attacker_damage = 4;
    if (has_attacker_damage()) {
      total_size += 1 + 8;
    }

    // optional fixed64 defender_damage = 5;
    if (has_defender_damage()) {
      total_size += 1 + 8;
    }

    // optional fixed64 attacker_cure = 6;
    if (has_attacker_cure()) {
      total_size += 1 + 8;
    }

    // optional fixed64 defender_cure = 7;
    if (has_defender_cure()) {
      total_size += 1 + 8;
    }

  }
  // repeated .Packet.ActorStat damages = 1;
  total_size += 1 * this->damages_size();
  for (int i = 0; i < this->damages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->damages(i));
  }

  // repeated .Packet.ActorStat be_damages = 2;
  total_size += 1 * this->be_damages_size();
  for (int i = 0; i < this->be_damages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->be_damages(i));
  }

  // repeated .Packet.ActorStat cures = 3;
  total_size += 1 * this->cures_size();
  for (int i = 0; i < this->cures_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cures(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Stat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Stat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void Stat::MergeFrom(const Stat& from) {
  GOOGLE_CHECK_NE(&from, this);
  damages_.MergeFrom(from.damages_);
  be_damages_.MergeFrom(from.be_damages_);
  cures_.MergeFrom(from.cures_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_attacker_damage()) {
      set_attacker_damage(from.attacker_damage());
    }
    if (from.has_defender_damage()) {
      set_defender_damage(from.defender_damage());
    }
    if (from.has_attacker_cure()) {
      set_attacker_cure(from.attacker_cure());
    }
    if (from.has_defender_cure()) {
      set_defender_cure(from.defender_cure());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void Stat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void Stat::CopyFrom(const Stat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool Stat::IsInitialized() const {

  for (int i = 0; i < damages_size(); i++) {
    if (!this->damages(i).IsInitialized()) return false;
  }
  for (int i = 0; i < be_damages_size(); i++) {
    if (!this->be_damages(i).IsInitialized()) return false;
  }
  for (int i = 0; i < cures_size(); i++) {
    if (!this->cures(i).IsInitialized()) return false;
  }
  return true;
}

void Stat::SetInitialized() {

  for (int i = 0; i < damages_size(); i++) {
    this->mutable_damages(i)->SetInitialized();
  }
  for (int i = 0; i < be_damages_size(); i++) {
    this->mutable_be_damages(i)->SetInitialized();
  }
  for (int i = 0; i < cures_size(); i++) {
    this->mutable_cures(i)->SetInitialized();
  }
  return;
}

void Stat::Swap(Stat* other) {
  if (other != this) {
    damages_.Swap(&other->damages_);
    be_damages_.Swap(&other->be_damages_);
    cures_.Swap(&other->cures_);
    std::swap(attacker_damage_, other->attacker_damage_);
    std::swap(defender_damage_, other->defender_damage_);
    std::swap(attacker_cure_, other->attacker_cure_);
    std::swap(defender_cure_, other->defender_cure_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata Stat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stat_descriptor_;
  metadata.reflection = Stat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatisticInfo::kPlayerExpFieldNumber;
const int StatisticInfo::kActorExpFieldNumber;
const int StatisticInfo::kItemsFieldNumber;
const int StatisticInfo::kTimeStampFieldNumber;
const int StatisticInfo::kDamageFieldNumber;
const int StatisticInfo::kActordamageFieldNumber;
#endif  // !_MSC_VER

StatisticInfo::StatisticInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatisticInfo::InitAsDefaultInstance() {
}

StatisticInfo::StatisticInfo(const StatisticInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatisticInfo::SharedCtor() {
  _cached_size_ = 0;
  player_exp_ = 0;
  actor_exp_ = 0;
  time_stamp_ = GOOGLE_ULONGLONG(0);
  damage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatisticInfo::~StatisticInfo() {
  SharedDtor();
}

void StatisticInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StatisticInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatisticInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatisticInfo_descriptor_;
}

const StatisticInfo& StatisticInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleExpression_2eproto();
  return *default_instance_;
}

StatisticInfo* StatisticInfo::default_instance_ = NULL;

StatisticInfo* StatisticInfo::New() const {
  return new StatisticInfo;
}

void StatisticInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_exp_ = 0;
    actor_exp_ = 0;
    time_stamp_ = GOOGLE_ULONGLONG(0);
    damage_ = 0;
  }
  items_.Clear();
  actordamage_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool StatisticInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_exp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_exp_)));
          set_has_player_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_actor_exp;
        break;
      }

      // optional int32 actor_exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actor_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actor_exp_)));
          set_has_actor_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .Config.ItemPackageElement items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectTag(33)) goto parse_time_stamp;
        break;
      }

      // optional fixed64 time_stamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_damage;
        break;
      }

      // optional int32 damage = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_actordamage;
        break;
      }

      // repeated .Packet.ActorDamage actordamage = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actordamage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actordamage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_actordamage;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void StatisticInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 player_exp = 1;
  if (has_player_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_exp(), output);
  }

  // optional int32 actor_exp = 2;
  if (has_actor_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->actor_exp(), output);
  }

  // repeated .Config.ItemPackageElement items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  // optional fixed64 time_stamp = 4;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->time_stamp(), output);
  }

  // optional int32 damage = 5;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->damage(), output);
  }

  // repeated .Packet.ActorDamage actordamage = 6;
  for (int i = 0; i < this->actordamage_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->actordamage(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatisticInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 player_exp = 1;
  if (has_player_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_exp(), target);
  }

  // optional int32 actor_exp = 2;
  if (has_actor_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->actor_exp(), target);
  }

  // repeated .Config.ItemPackageElement items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  // optional fixed64 time_stamp = 4;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->time_stamp(), target);
  }

  // optional int32 damage = 5;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->damage(), target);
  }

  // repeated .Packet.ActorDamage actordamage = 6;
  for (int i = 0; i < this->actordamage_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->actordamage(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatisticInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_exp = 1;
    if (has_player_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_exp());
    }

    // optional int32 actor_exp = 2;
    if (has_actor_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actor_exp());
    }

    // optional fixed64 time_stamp = 4;
    if (has_time_stamp()) {
      total_size += 1 + 8;
    }

    // optional int32 damage = 5;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

  }
  // repeated .Config.ItemPackageElement items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  // repeated .Packet.ActorDamage actordamage = 6;
  total_size += 1 * this->actordamage_size();
  for (int i = 0; i < this->actordamage_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actordamage(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatisticInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatisticInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatisticInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void StatisticInfo::MergeFrom(const StatisticInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  actordamage_.MergeFrom(from.actordamage_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_exp()) {
      set_player_exp(from.player_exp());
    }
    if (from.has_actor_exp()) {
      set_actor_exp(from.actor_exp());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void StatisticInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void StatisticInfo::CopyFrom(const StatisticInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool StatisticInfo::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  for (int i = 0; i < actordamage_size(); i++) {
    if (!this->actordamage(i).IsInitialized()) return false;
  }
  return true;
}

void StatisticInfo::SetInitialized() {

  for (int i = 0; i < items_size(); i++) {
    this->mutable_items(i)->SetInitialized();
  }
  for (int i = 0; i < actordamage_size(); i++) {
    this->mutable_actordamage(i)->SetInitialized();
  }
  return;
}

void StatisticInfo::Swap(StatisticInfo* other) {
  if (other != this) {
    std::swap(player_exp_, other->player_exp_);
    std::swap(actor_exp_, other->actor_exp_);
    items_.Swap(&other->items_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(damage_, other->damage_);
    actordamage_.Swap(&other->actordamage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata StatisticInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatisticInfo_descriptor_;
  metadata.reflection = StatisticInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

// @@protoc_insertion_point(global_scope)
