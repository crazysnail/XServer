// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlayerBasicInfo.proto

#ifndef PROTOBUF_PlayerBasicInfo_2eproto__INCLUDED
#define PROTOBUF_PlayerBasicInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Base.pb.h"
#include "AllPacketEnum.pb.h"
#include "ProtoBufOption.pb.h"
// @@protoc_insertion_point(includes)

namespace Packet {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PlayerBasicInfo_2eproto();
void protobuf_AssignDesc_PlayerBasicInfo_2eproto();
void protobuf_ShutdownFile_PlayerBasicInfo_2eproto();

class PlayerToken;
class HookOption;
class PlayerSetting;
class PlayerOperateInfo;
class PlayerOperateInfoReq;
class PlayerOperateInfoReply;
class PlayerBasicInfo;
class PlayerDBInfo;
class PlayerSpeedChanged;
class ServerTime;

// ===================================================================

class PlayerToken : public ::google::protobuf::Message {
 public:
  PlayerToken();
  virtual ~PlayerToken();

  PlayerToken(const PlayerToken& from);

  inline PlayerToken& operator=(const PlayerToken& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerToken& default_instance();

  void Swap(PlayerToken* other);

  // implements Message ----------------------------------------------

  PlayerToken* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerToken& from);
  void MergeFrom(const PlayerToken& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 crystal = 1;
  inline bool has_crystal() const;
  inline void clear_crystal();
  static const int kCrystalFieldNumber = 1;
  inline ::google::protobuf::int32 crystal() const;
  inline void set_crystal(::google::protobuf::int32 value);

  // required int32 gold = 2;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 2;
  inline ::google::protobuf::int32 gold() const;
  inline void set_gold(::google::protobuf::int32 value);

  // required int32 honor = 3;
  inline bool has_honor() const;
  inline void clear_honor();
  static const int kHonorFieldNumber = 3;
  inline ::google::protobuf::int32 honor() const;
  inline void set_honor(::google::protobuf::int32 value);

  // required int32 reward = 4;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 4;
  inline ::google::protobuf::int32 reward() const;
  inline void set_reward(::google::protobuf::int32 value);

  // required int32 dayvalue = 5;
  inline bool has_dayvalue() const;
  inline void clear_dayvalue();
  static const int kDayvalueFieldNumber = 5;
  inline ::google::protobuf::int32 dayvalue() const;
  inline void set_dayvalue(::google::protobuf::int32 value);

  // required int32 bank_gold = 6;
  inline bool has_bank_gold() const;
  inline void clear_bank_gold();
  static const int kBankGoldFieldNumber = 6;
  inline ::google::protobuf::int32 bank_gold() const;
  inline void set_bank_gold(::google::protobuf::int32 value);

  // required int32 exp_point = 7;
  inline bool has_exp_point() const;
  inline void clear_exp_point();
  static const int kExpPointFieldNumber = 7;
  inline ::google::protobuf::int32 exp_point() const;
  inline void set_exp_point(::google::protobuf::int32 value);

  // required int32 cold_exp_point = 8;
  inline bool has_cold_exp_point() const;
  inline void clear_cold_exp_point();
  static const int kColdExpPointFieldNumber = 8;
  inline ::google::protobuf::int32 cold_exp_point() const;
  inline void set_cold_exp_point(::google::protobuf::int32 value);

  // required int32 lawful = 9;
  inline bool has_lawful() const;
  inline void clear_lawful();
  static const int kLawfulFieldNumber = 9;
  inline ::google::protobuf::int32 lawful() const;
  inline void set_lawful(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.PlayerToken)
 private:
  inline void set_has_crystal();
  inline void clear_has_crystal();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_honor();
  inline void clear_has_honor();
  inline void set_has_reward();
  inline void clear_has_reward();
  inline void set_has_dayvalue();
  inline void clear_has_dayvalue();
  inline void set_has_bank_gold();
  inline void clear_has_bank_gold();
  inline void set_has_exp_point();
  inline void clear_has_exp_point();
  inline void set_has_cold_exp_point();
  inline void clear_has_cold_exp_point();
  inline void set_has_lawful();
  inline void clear_has_lawful();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 crystal_;
  ::google::protobuf::int32 gold_;
  ::google::protobuf::int32 honor_;
  ::google::protobuf::int32 reward_;
  ::google::protobuf::int32 dayvalue_;
  ::google::protobuf::int32 bank_gold_;
  ::google::protobuf::int32 exp_point_;
  ::google::protobuf::int32 cold_exp_point_;
  ::google::protobuf::int32 lawful_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_PlayerBasicInfo_2eproto();
  friend void protobuf_AssignDesc_PlayerBasicInfo_2eproto();
  friend void protobuf_ShutdownFile_PlayerBasicInfo_2eproto();

  void InitAsDefaultInstance();
  static PlayerToken* default_instance_;
};
// -------------------------------------------------------------------

class HookOption : public ::google::protobuf::Message {
 public:
  HookOption();
  virtual ~HookOption();

  HookOption(const HookOption& from);

  inline HookOption& operator=(const HookOption& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HookOption& default_instance();

  void Swap(HookOption* other);

  // implements Message ----------------------------------------------

  HookOption* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HookOption& from);
  void MergeFrom(const HookOption& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 auto_equip_durable = 1 [default = 50];
  inline bool has_auto_equip_durable() const;
  inline void clear_auto_equip_durable();
  static const int kAutoEquipDurableFieldNumber = 1;
  inline ::google::protobuf::int32 auto_equip_durable() const;
  inline void set_auto_equip_durable(::google::protobuf::int32 value);

  // required int32 auto_potion_id = 2 [default = 20122001];
  inline bool has_auto_potion_id() const;
  inline void clear_auto_potion_id();
  static const int kAutoPotionIdFieldNumber = 2;
  inline ::google::protobuf::int32 auto_potion_id() const;
  inline void set_auto_potion_id(::google::protobuf::int32 value);

  // required int32 auto_potion_hp = 3 [default = 30];
  inline bool has_auto_potion_hp() const;
  inline void clear_auto_potion_hp();
  static const int kAutoPotionHpFieldNumber = 3;
  inline ::google::protobuf::int32 auto_potion_hp() const;
  inline void set_auto_potion_hp(::google::protobuf::int32 value);

  // required int32 auto_buy_count = 4 [default = 10];
  inline bool has_auto_buy_count() const;
  inline void clear_auto_buy_count();
  static const int kAutoBuyCountFieldNumber = 4;
  inline ::google::protobuf::int32 auto_buy_count() const;
  inline void set_auto_buy_count(::google::protobuf::int32 value);

  // required bool auto_split_green = 5 [default = false];
  inline bool has_auto_split_green() const;
  inline void clear_auto_split_green();
  static const int kAutoSplitGreenFieldNumber = 5;
  inline bool auto_split_green() const;
  inline void set_auto_split_green(bool value);

  // required bool auto_split_blue = 6 [default = false];
  inline bool has_auto_split_blue() const;
  inline void clear_auto_split_blue();
  static const int kAutoSplitBlueFieldNumber = 6;
  inline bool auto_split_blue() const;
  inline void set_auto_split_blue(bool value);

  // required bool auto_refix = 7 [default = true];
  inline bool has_auto_refix() const;
  inline void clear_auto_refix();
  static const int kAutoRefixFieldNumber = 7;
  inline bool auto_refix() const;
  inline void set_auto_refix(bool value);

  // required bool auto_use_potion = 8 [default = false];
  inline bool has_auto_use_potion() const;
  inline void clear_auto_use_potion();
  static const int kAutoUsePotionFieldNumber = 8;
  inline bool auto_use_potion() const;
  inline void set_auto_use_potion(bool value);

  // required bool auto_buy_potion = 9 [default = false];
  inline bool has_auto_buy_potion() const;
  inline void clear_auto_buy_potion();
  static const int kAutoBuyPotionFieldNumber = 9;
  inline bool auto_buy_potion() const;
  inline void set_auto_buy_potion(bool value);

  // @@protoc_insertion_point(class_scope:Packet.HookOption)
 private:
  inline void set_has_auto_equip_durable();
  inline void clear_has_auto_equip_durable();
  inline void set_has_auto_potion_id();
  inline void clear_has_auto_potion_id();
  inline void set_has_auto_potion_hp();
  inline void clear_has_auto_potion_hp();
  inline void set_has_auto_buy_count();
  inline void clear_has_auto_buy_count();
  inline void set_has_auto_split_green();
  inline void clear_has_auto_split_green();
  inline void set_has_auto_split_blue();
  inline void clear_has_auto_split_blue();
  inline void set_has_auto_refix();
  inline void clear_has_auto_refix();
  inline void set_has_auto_use_potion();
  inline void clear_has_auto_use_potion();
  inline void set_has_auto_buy_potion();
  inline void clear_has_auto_buy_potion();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 auto_equip_durable_;
  ::google::protobuf::int32 auto_potion_id_;
  ::google::protobuf::int32 auto_potion_hp_;
  ::google::protobuf::int32 auto_buy_count_;
  bool auto_split_green_;
  bool auto_split_blue_;
  bool auto_refix_;
  bool auto_use_potion_;
  bool auto_buy_potion_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_PlayerBasicInfo_2eproto();
  friend void protobuf_AssignDesc_PlayerBasicInfo_2eproto();
  friend void protobuf_ShutdownFile_PlayerBasicInfo_2eproto();

  void InitAsDefaultInstance();
  static HookOption* default_instance_;
};
// -------------------------------------------------------------------

class PlayerSetting : public ::google::protobuf::Message {
 public:
  PlayerSetting();
  virtual ~PlayerSetting();

  PlayerSetting(const PlayerSetting& from);

  inline PlayerSetting& operator=(const PlayerSetting& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerSetting& default_instance();

  void Swap(PlayerSetting* other);

  // implements Message ----------------------------------------------

  PlayerSetting* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerSetting& from);
  void MergeFrom(const PlayerSetting& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // required int32 ignore_add_friend = 2;
  inline bool has_ignore_add_friend() const;
  inline void clear_ignore_add_friend();
  static const int kIgnoreAddFriendFieldNumber = 2;
  inline ::google::protobuf::int32 ignore_add_friend() const;
  inline void set_ignore_add_friend(::google::protobuf::int32 value);

  // required int32 reject_fight = 3;
  inline bool has_reject_fight() const;
  inline void clear_reject_fight();
  static const int kRejectFightFieldNumber = 3;
  inline ::google::protobuf::int32 reject_fight() const;
  inline void set_reject_fight(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.PlayerSetting)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_ignore_add_friend();
  inline void clear_has_ignore_add_friend();
  inline void set_has_reject_fight();
  inline void clear_has_reject_fight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::google::protobuf::int32 ignore_add_friend_;
  ::google::protobuf::int32 reject_fight_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PlayerBasicInfo_2eproto();
  friend void protobuf_AssignDesc_PlayerBasicInfo_2eproto();
  friend void protobuf_ShutdownFile_PlayerBasicInfo_2eproto();

  void InitAsDefaultInstance();
  static PlayerSetting* default_instance_;
};
// -------------------------------------------------------------------

class PlayerOperateInfo : public ::google::protobuf::Message {
 public:
  PlayerOperateInfo();
  virtual ~PlayerOperateInfo();

  PlayerOperateInfo(const PlayerOperateInfo& from);

  inline PlayerOperateInfo& operator=(const PlayerOperateInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerOperateInfo& default_instance();

  void Swap(PlayerOperateInfo* other);

  // implements Message ----------------------------------------------

  PlayerOperateInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerOperateInfo& from);
  void MergeFrom(const PlayerOperateInfo& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required int32 hair = 4;
  inline bool has_hair() const;
  inline void clear_hair();
  static const int kHairFieldNumber = 4;
  inline ::google::protobuf::int32 hair() const;
  inline void set_hair(::google::protobuf::int32 value);

  // required int32 init_actor_id = 5;
  inline bool has_init_actor_id() const;
  inline void clear_init_actor_id();
  static const int kInitActorIdFieldNumber = 5;
  inline ::google::protobuf::int32 init_actor_id() const;
  inline void set_init_actor_id(::google::protobuf::int32 value);

  // required fixed64 guildid = 6;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildidFieldNumber = 6;
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // optional string guildname = 7;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildnameFieldNumber = 7;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // optional .Packet.GuildPosition guildposition = 8;
  inline bool has_guildposition() const;
  inline void clear_guildposition();
  static const int kGuildpositionFieldNumber = 8;
  inline ::Packet::GuildPosition guildposition() const;
  inline void set_guildposition(::Packet::GuildPosition value);

  // required fixed64 teamid = 9;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 9;
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Packet.PlayerOperateInfo)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_hair();
  inline void clear_has_hair();
  inline void set_has_init_actor_id();
  inline void clear_has_init_actor_id();
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_guildposition();
  inline void clear_has_guildposition();
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::std::string* name_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 hair_;
  ::google::protobuf::uint64 guildid_;
  ::google::protobuf::int32 init_actor_id_;
  int guildposition_;
  ::std::string* guildname_;
  ::google::protobuf::uint64 teamid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_PlayerBasicInfo_2eproto();
  friend void protobuf_AssignDesc_PlayerBasicInfo_2eproto();
  friend void protobuf_ShutdownFile_PlayerBasicInfo_2eproto();

  void InitAsDefaultInstance();
  static PlayerOperateInfo* default_instance_;
};
// -------------------------------------------------------------------

class PlayerOperateInfoReq : public ::google::protobuf::Message {
 public:
  PlayerOperateInfoReq();
  virtual ~PlayerOperateInfoReq();

  PlayerOperateInfoReq(const PlayerOperateInfoReq& from);

  inline PlayerOperateInfoReq& operator=(const PlayerOperateInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerOperateInfoReq& default_instance();

  void Swap(PlayerOperateInfoReq* other);

  // implements Message ----------------------------------------------

  PlayerOperateInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerOperateInfoReq& from);
  void MergeFrom(const PlayerOperateInfoReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Packet.PlayerOperateInfoReq)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PlayerBasicInfo_2eproto();
  friend void protobuf_AssignDesc_PlayerBasicInfo_2eproto();
  friend void protobuf_ShutdownFile_PlayerBasicInfo_2eproto();

  void InitAsDefaultInstance();
  static PlayerOperateInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class PlayerOperateInfoReply : public ::google::protobuf::Message {
 public:
  PlayerOperateInfoReply();
  virtual ~PlayerOperateInfoReply();

  PlayerOperateInfoReply(const PlayerOperateInfoReply& from);

  inline PlayerOperateInfoReply& operator=(const PlayerOperateInfoReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerOperateInfoReply& default_instance();

  void Swap(PlayerOperateInfoReply* other);

  // implements Message ----------------------------------------------

  PlayerOperateInfoReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerOperateInfoReply& from);
  void MergeFrom(const PlayerOperateInfoReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Packet.PlayerOperateInfo optinfo = 1;
  inline bool has_optinfo() const;
  inline void clear_optinfo();
  static const int kOptinfoFieldNumber = 1;
  inline const ::Packet::PlayerOperateInfo& optinfo() const;
  inline ::Packet::PlayerOperateInfo* mutable_optinfo();
  inline ::Packet::PlayerOperateInfo* release_optinfo();
  inline void set_allocated_optinfo(::Packet::PlayerOperateInfo* optinfo);

  // @@protoc_insertion_point(class_scope:Packet.PlayerOperateInfoReply)
 private:
  inline void set_has_optinfo();
  inline void clear_has_optinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Packet::PlayerOperateInfo* optinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PlayerBasicInfo_2eproto();
  friend void protobuf_AssignDesc_PlayerBasicInfo_2eproto();
  friend void protobuf_ShutdownFile_PlayerBasicInfo_2eproto();

  void InitAsDefaultInstance();
  static PlayerOperateInfoReply* default_instance_;
};
// -------------------------------------------------------------------

class PlayerBasicInfo : public ::google::protobuf::Message {
 public:
  PlayerBasicInfo();
  virtual ~PlayerBasicInfo();

  PlayerBasicInfo(const PlayerBasicInfo& from);

  inline PlayerBasicInfo& operator=(const PlayerBasicInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerBasicInfo& default_instance();

  void Swap(PlayerBasicInfo* other);

  // implements Message ----------------------------------------------

  PlayerBasicInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerBasicInfo& from);
  void MergeFrom(const PlayerBasicInfo& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // required int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 scene_id = 4;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 4;
  inline ::google::protobuf::int32 scene_id() const;
  inline void set_scene_id(::google::protobuf::int32 value);

  // required .Packet.Position scene_pos = 5;
  inline bool has_scene_pos() const;
  inline void clear_scene_pos();
  static const int kScenePosFieldNumber = 5;
  inline const ::Packet::Position& scene_pos() const;
  inline ::Packet::Position* mutable_scene_pos();
  inline ::Packet::Position* release_scene_pos();
  inline void set_allocated_scene_pos(::Packet::Position* scene_pos);

  // required .Packet.PlayerSceneStatus player_status = 6;
  inline bool has_player_status() const;
  inline void clear_player_status();
  static const int kPlayerStatusFieldNumber = 6;
  inline ::Packet::PlayerSceneStatus player_status() const;
  inline void set_player_status(::Packet::PlayerSceneStatus value);

  // required float direction = 7;
  inline bool has_direction() const;
  inline void clear_direction();
  static const int kDirectionFieldNumber = 7;
  inline float direction() const;
  inline void set_direction(float value);

  // required fixed32 move_speed = 8;
  inline bool has_move_speed() const;
  inline void clear_move_speed();
  static const int kMoveSpeedFieldNumber = 8;
  inline ::google::protobuf::uint32 move_speed() const;
  inline void set_move_speed(::google::protobuf::uint32 value);

  // required int32 init_actor_id = 9;
  inline bool has_init_actor_id() const;
  inline void clear_init_actor_id();
  static const int kInitActorIdFieldNumber = 9;
  inline ::google::protobuf::int32 init_actor_id() const;
  inline void set_init_actor_id(::google::protobuf::int32 value);

  // required string icon = 10;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 10;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // required fixed64 guildid = 11;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildidFieldNumber = 11;
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // required string guildname = 12;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildnameFieldNumber = 12;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // required .Packet.Camp camp = 13;
  inline bool has_camp() const;
  inline void clear_camp();
  static const int kCampFieldNumber = 13;
  inline ::Packet::Camp camp() const;
  inline void set_camp(::Packet::Camp value);

  // required int32 mount_id = 15;
  inline bool has_mount_id() const;
  inline void clear_mount_id();
  static const int kMountIdFieldNumber = 15;
  inline ::google::protobuf::int32 mount_id() const;
  inline void set_mount_id(::google::protobuf::int32 value);

  // required int32 battle_score = 16;
  inline bool has_battle_score() const;
  inline void clear_battle_score();
  static const int kBattleScoreFieldNumber = 16;
  inline ::google::protobuf::int32 battle_score() const;
  inline void set_battle_score(::google::protobuf::int32 value);

  // required int32 hair = 17;
  inline bool has_hair() const;
  inline void clear_hair();
  static const int kHairFieldNumber = 17;
  inline ::google::protobuf::int32 hair() const;
  inline void set_hair(::google::protobuf::int32 value);

  // required int32 master_level = 18;
  inline bool has_master_level() const;
  inline void clear_master_level();
  static const int kMasterLevelFieldNumber = 18;
  inline ::google::protobuf::int32 master_level() const;
  inline void set_master_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.PlayerBasicInfo)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_scene_pos();
  inline void clear_has_scene_pos();
  inline void set_has_player_status();
  inline void clear_has_player_status();
  inline void set_has_direction();
  inline void clear_has_direction();
  inline void set_has_move_speed();
  inline void clear_has_move_speed();
  inline void set_has_init_actor_id();
  inline void clear_has_init_actor_id();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_camp();
  inline void clear_has_camp();
  inline void set_has_mount_id();
  inline void clear_has_mount_id();
  inline void set_has_battle_score();
  inline void clear_has_battle_score();
  inline void set_has_hair();
  inline void clear_has_hair();
  inline void set_has_master_level();
  inline void clear_has_master_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::std::string* name_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 scene_id_;
  ::Packet::Position* scene_pos_;
  int player_status_;
  float direction_;
  ::google::protobuf::uint32 move_speed_;
  ::google::protobuf::int32 init_actor_id_;
  ::std::string* icon_;
  ::google::protobuf::uint64 guildid_;
  ::std::string* guildname_;
  int camp_;
  ::google::protobuf::int32 mount_id_;
  ::google::protobuf::int32 battle_score_;
  ::google::protobuf::int32 hair_;
  ::google::protobuf::int32 master_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_PlayerBasicInfo_2eproto();
  friend void protobuf_AssignDesc_PlayerBasicInfo_2eproto();
  friend void protobuf_ShutdownFile_PlayerBasicInfo_2eproto();

  void InitAsDefaultInstance();
  static PlayerBasicInfo* default_instance_;
};
// -------------------------------------------------------------------

class PlayerDBInfo : public ::google::protobuf::Message {
 public:
  PlayerDBInfo();
  virtual ~PlayerDBInfo();

  PlayerDBInfo(const PlayerDBInfo& from);

  inline PlayerDBInfo& operator=(const PlayerDBInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerDBInfo& default_instance();

  void Swap(PlayerDBInfo* other);

  // implements Message ----------------------------------------------

  PlayerDBInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerDBInfo& from);
  void MergeFrom(const PlayerDBInfo& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // required fixed64 account_guid = 2;
  inline bool has_account_guid() const;
  inline void clear_account_guid();
  static const int kAccountGuidFieldNumber = 2;
  inline ::google::protobuf::uint64 account_guid() const;
  inline void set_account_guid(::google::protobuf::uint64 value);

  // required .Packet.PlayerBasicInfo basic_info = 3;
  inline bool has_basic_info() const;
  inline void clear_basic_info();
  static const int kBasicInfoFieldNumber = 3;
  inline const ::Packet::PlayerBasicInfo& basic_info() const;
  inline ::Packet::PlayerBasicInfo* mutable_basic_info();
  inline ::Packet::PlayerBasicInfo* release_basic_info();
  inline void set_allocated_basic_info(::Packet::PlayerBasicInfo* basic_info);

  // repeated fixed64 lackeys = 4;
  inline int lackeys_size() const;
  inline void clear_lackeys();
  static const int kLackeysFieldNumber = 4;
  inline ::google::protobuf::uint64 lackeys(int index) const;
  inline void set_lackeys(int index, ::google::protobuf::uint64 value);
  inline void add_lackeys(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      lackeys() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_lackeys();

  // required string text_answers = 5;
  inline bool has_text_answers() const;
  inline void clear_text_answers();
  static const int kTextAnswersFieldNumber = 5;
  inline const ::std::string& text_answers() const;
  inline void set_text_answers(const ::std::string& value);
  inline void set_text_answers(const char* value);
  inline void set_text_answers(const char* value, size_t size);
  inline ::std::string* mutable_text_answers();
  inline ::std::string* release_text_answers();
  inline void set_allocated_text_answers(::std::string* text_answers);

  // required string pic_answers = 6;
  inline bool has_pic_answers() const;
  inline void clear_pic_answers();
  static const int kPicAnswersFieldNumber = 6;
  inline const ::std::string& pic_answers() const;
  inline void set_pic_answers(const ::std::string& value);
  inline void set_pic_answers(const char* value);
  inline void set_pic_answers(const char* value, size_t size);
  inline ::std::string* mutable_pic_answers();
  inline ::std::string* release_pic_answers();
  inline void set_allocated_pic_answers(::std::string* pic_answers);

  // required .Packet.PlayerToken token_data = 7;
  inline bool has_token_data() const;
  inline void clear_token_data();
  static const int kTokenDataFieldNumber = 7;
  inline const ::Packet::PlayerToken& token_data() const;
  inline ::Packet::PlayerToken* mutable_token_data();
  inline ::Packet::PlayerToken* release_token_data();
  inline void set_allocated_token_data(::Packet::PlayerToken* token_data);

  // required .Packet.HookOption hook_option = 8;
  inline bool has_hook_option() const;
  inline void clear_hook_option();
  static const int kHookOptionFieldNumber = 8;
  inline const ::Packet::HookOption& hook_option() const;
  inline ::Packet::HookOption* mutable_hook_option();
  inline ::Packet::HookOption* release_hook_option();
  inline void set_allocated_hook_option(::Packet::HookOption* hook_option);

  // required bool inited = 9;
  inline bool has_inited() const;
  inline void clear_inited();
  static const int kInitedFieldNumber = 9;
  inline bool inited() const;
  inline void set_inited(bool value);

  // required int32 hook_stage_tracker = 10;
  inline bool has_hook_stage_tracker() const;
  inline void clear_hook_stage_tracker();
  static const int kHookStageTrackerFieldNumber = 10;
  inline ::google::protobuf::int32 hook_stage_tracker() const;
  inline void set_hook_stage_tracker(::google::protobuf::int32 value);

  // required int32 last_hook_stage_id = 11;
  inline bool has_last_hook_stage_id() const;
  inline void clear_last_hook_stage_id();
  static const int kLastHookStageIdFieldNumber = 11;
  inline ::google::protobuf::int32 last_hook_stage_id() const;
  inline void set_last_hook_stage_id(::google::protobuf::int32 value);

  // required uint32 last_logout_time = 12;
  inline bool has_last_logout_time() const;
  inline void clear_last_logout_time();
  static const int kLastLogoutTimeFieldNumber = 12;
  inline ::google::protobuf::uint32 last_logout_time() const;
  inline void set_last_logout_time(::google::protobuf::uint32 value);

  // required uint32 create_time = 13;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 13;
  inline ::google::protobuf::uint32 create_time() const;
  inline void set_create_time(::google::protobuf::uint32 value);

  // required uint32 charge_all = 14;
  inline bool has_charge_all() const;
  inline void clear_charge_all();
  static const int kChargeAllFieldNumber = 14;
  inline ::google::protobuf::uint32 charge_all() const;
  inline void set_charge_all(::google::protobuf::uint32 value);

  // required uint32 refresh_time = 15;
  inline bool has_refresh_time() const;
  inline void clear_refresh_time();
  static const int kRefreshTimeFieldNumber = 15;
  inline ::google::protobuf::uint32 refresh_time() const;
  inline void set_refresh_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Packet.PlayerDBInfo)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_account_guid();
  inline void clear_has_account_guid();
  inline void set_has_basic_info();
  inline void clear_has_basic_info();
  inline void set_has_text_answers();
  inline void clear_has_text_answers();
  inline void set_has_pic_answers();
  inline void clear_has_pic_answers();
  inline void set_has_token_data();
  inline void clear_has_token_data();
  inline void set_has_hook_option();
  inline void clear_has_hook_option();
  inline void set_has_inited();
  inline void clear_has_inited();
  inline void set_has_hook_stage_tracker();
  inline void clear_has_hook_stage_tracker();
  inline void set_has_last_hook_stage_id();
  inline void clear_has_last_hook_stage_id();
  inline void set_has_last_logout_time();
  inline void clear_has_last_logout_time();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_charge_all();
  inline void clear_has_charge_all();
  inline void set_has_refresh_time();
  inline void clear_has_refresh_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::google::protobuf::uint64 account_guid_;
  ::Packet::PlayerBasicInfo* basic_info_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > lackeys_;
  ::std::string* text_answers_;
  ::std::string* pic_answers_;
  ::Packet::PlayerToken* token_data_;
  ::Packet::HookOption* hook_option_;
  bool inited_;
  ::google::protobuf::int32 hook_stage_tracker_;
  ::google::protobuf::int32 last_hook_stage_id_;
  ::google::protobuf::uint32 last_logout_time_;
  ::google::protobuf::uint32 create_time_;
  ::google::protobuf::uint32 charge_all_;
  ::google::protobuf::uint32 refresh_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_PlayerBasicInfo_2eproto();
  friend void protobuf_AssignDesc_PlayerBasicInfo_2eproto();
  friend void protobuf_ShutdownFile_PlayerBasicInfo_2eproto();

  void InitAsDefaultInstance();
  static PlayerDBInfo* default_instance_;
};
// -------------------------------------------------------------------

class PlayerSpeedChanged : public ::google::protobuf::Message {
 public:
  PlayerSpeedChanged();
  virtual ~PlayerSpeedChanged();

  PlayerSpeedChanged(const PlayerSpeedChanged& from);

  inline PlayerSpeedChanged& operator=(const PlayerSpeedChanged& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerSpeedChanged& default_instance();

  void Swap(PlayerSpeedChanged* other);

  // implements Message ----------------------------------------------

  PlayerSpeedChanged* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerSpeedChanged& from);
  void MergeFrom(const PlayerSpeedChanged& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // required fixed32 move_speed = 2;
  inline bool has_move_speed() const;
  inline void clear_move_speed();
  static const int kMoveSpeedFieldNumber = 2;
  inline ::google::protobuf::uint32 move_speed() const;
  inline void set_move_speed(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Packet.PlayerSpeedChanged)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_move_speed();
  inline void clear_has_move_speed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::google::protobuf::uint32 move_speed_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PlayerBasicInfo_2eproto();
  friend void protobuf_AssignDesc_PlayerBasicInfo_2eproto();
  friend void protobuf_ShutdownFile_PlayerBasicInfo_2eproto();

  void InitAsDefaultInstance();
  static PlayerSpeedChanged* default_instance_;
};
// -------------------------------------------------------------------

class ServerTime : public ::google::protobuf::Message {
 public:
  ServerTime();
  virtual ~ServerTime();

  ServerTime(const ServerTime& from);

  inline ServerTime& operator=(const ServerTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerTime& default_instance();

  void Swap(ServerTime* other);

  // implements Message ----------------------------------------------

  ServerTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerTime& from);
  void MergeFrom(const ServerTime& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Packet.ServerTime)
 private:
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PlayerBasicInfo_2eproto();
  friend void protobuf_AssignDesc_PlayerBasicInfo_2eproto();
  friend void protobuf_ShutdownFile_PlayerBasicInfo_2eproto();

  void InitAsDefaultInstance();
  static ServerTime* default_instance_;
};
// ===================================================================


// ===================================================================

// PlayerToken

// required int32 crystal = 1;
inline bool PlayerToken::has_crystal() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerToken::set_has_crystal() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerToken::clear_has_crystal() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerToken::clear_crystal() {
  crystal_ = 0;
  clear_has_crystal();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerToken::crystal() const {
  return crystal_;
}
inline void PlayerToken::set_crystal(::google::protobuf::int32 value) {
  SetDirty();
  set_has_crystal();
  crystal_ = value;
}

// required int32 gold = 2;
inline bool PlayerToken::has_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerToken::set_has_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerToken::clear_has_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerToken::clear_gold() {
  gold_ = 0;
  clear_has_gold();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerToken::gold() const {
  return gold_;
}
inline void PlayerToken::set_gold(::google::protobuf::int32 value) {
  SetDirty();
  set_has_gold();
  gold_ = value;
}

// required int32 honor = 3;
inline bool PlayerToken::has_honor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerToken::set_has_honor() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerToken::clear_has_honor() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerToken::clear_honor() {
  honor_ = 0;
  clear_has_honor();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerToken::honor() const {
  return honor_;
}
inline void PlayerToken::set_honor(::google::protobuf::int32 value) {
  SetDirty();
  set_has_honor();
  honor_ = value;
}

// required int32 reward = 4;
inline bool PlayerToken::has_reward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerToken::set_has_reward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerToken::clear_has_reward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerToken::clear_reward() {
  reward_ = 0;
  clear_has_reward();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerToken::reward() const {
  return reward_;
}
inline void PlayerToken::set_reward(::google::protobuf::int32 value) {
  SetDirty();
  set_has_reward();
  reward_ = value;
}

// required int32 dayvalue = 5;
inline bool PlayerToken::has_dayvalue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerToken::set_has_dayvalue() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerToken::clear_has_dayvalue() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerToken::clear_dayvalue() {
  dayvalue_ = 0;
  clear_has_dayvalue();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerToken::dayvalue() const {
  return dayvalue_;
}
inline void PlayerToken::set_dayvalue(::google::protobuf::int32 value) {
  SetDirty();
  set_has_dayvalue();
  dayvalue_ = value;
}

// required int32 bank_gold = 6;
inline bool PlayerToken::has_bank_gold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerToken::set_has_bank_gold() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerToken::clear_has_bank_gold() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerToken::clear_bank_gold() {
  bank_gold_ = 0;
  clear_has_bank_gold();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerToken::bank_gold() const {
  return bank_gold_;
}
inline void PlayerToken::set_bank_gold(::google::protobuf::int32 value) {
  SetDirty();
  set_has_bank_gold();
  bank_gold_ = value;
}

// required int32 exp_point = 7;
inline bool PlayerToken::has_exp_point() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerToken::set_has_exp_point() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerToken::clear_has_exp_point() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerToken::clear_exp_point() {
  exp_point_ = 0;
  clear_has_exp_point();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerToken::exp_point() const {
  return exp_point_;
}
inline void PlayerToken::set_exp_point(::google::protobuf::int32 value) {
  SetDirty();
  set_has_exp_point();
  exp_point_ = value;
}

// required int32 cold_exp_point = 8;
inline bool PlayerToken::has_cold_exp_point() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerToken::set_has_cold_exp_point() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayerToken::clear_has_cold_exp_point() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayerToken::clear_cold_exp_point() {
  cold_exp_point_ = 0;
  clear_has_cold_exp_point();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerToken::cold_exp_point() const {
  return cold_exp_point_;
}
inline void PlayerToken::set_cold_exp_point(::google::protobuf::int32 value) {
  SetDirty();
  set_has_cold_exp_point();
  cold_exp_point_ = value;
}

// required int32 lawful = 9;
inline bool PlayerToken::has_lawful() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlayerToken::set_has_lawful() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlayerToken::clear_has_lawful() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlayerToken::clear_lawful() {
  lawful_ = 0;
  clear_has_lawful();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerToken::lawful() const {
  return lawful_;
}
inline void PlayerToken::set_lawful(::google::protobuf::int32 value) {
  SetDirty();
  set_has_lawful();
  lawful_ = value;
}

// -------------------------------------------------------------------

// HookOption

// required int32 auto_equip_durable = 1 [default = 50];
inline bool HookOption::has_auto_equip_durable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HookOption::set_has_auto_equip_durable() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HookOption::clear_has_auto_equip_durable() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HookOption::clear_auto_equip_durable() {
  auto_equip_durable_ = 50;
  clear_has_auto_equip_durable();
  SetDirty();
}
inline ::google::protobuf::int32 HookOption::auto_equip_durable() const {
  return auto_equip_durable_;
}
inline void HookOption::set_auto_equip_durable(::google::protobuf::int32 value) {
  SetDirty();
  set_has_auto_equip_durable();
  auto_equip_durable_ = value;
}

// required int32 auto_potion_id = 2 [default = 20122001];
inline bool HookOption::has_auto_potion_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HookOption::set_has_auto_potion_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HookOption::clear_has_auto_potion_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HookOption::clear_auto_potion_id() {
  auto_potion_id_ = 20122001;
  clear_has_auto_potion_id();
  SetDirty();
}
inline ::google::protobuf::int32 HookOption::auto_potion_id() const {
  return auto_potion_id_;
}
inline void HookOption::set_auto_potion_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_auto_potion_id();
  auto_potion_id_ = value;
}

// required int32 auto_potion_hp = 3 [default = 30];
inline bool HookOption::has_auto_potion_hp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HookOption::set_has_auto_potion_hp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HookOption::clear_has_auto_potion_hp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HookOption::clear_auto_potion_hp() {
  auto_potion_hp_ = 30;
  clear_has_auto_potion_hp();
  SetDirty();
}
inline ::google::protobuf::int32 HookOption::auto_potion_hp() const {
  return auto_potion_hp_;
}
inline void HookOption::set_auto_potion_hp(::google::protobuf::int32 value) {
  SetDirty();
  set_has_auto_potion_hp();
  auto_potion_hp_ = value;
}

// required int32 auto_buy_count = 4 [default = 10];
inline bool HookOption::has_auto_buy_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HookOption::set_has_auto_buy_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HookOption::clear_has_auto_buy_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HookOption::clear_auto_buy_count() {
  auto_buy_count_ = 10;
  clear_has_auto_buy_count();
  SetDirty();
}
inline ::google::protobuf::int32 HookOption::auto_buy_count() const {
  return auto_buy_count_;
}
inline void HookOption::set_auto_buy_count(::google::protobuf::int32 value) {
  SetDirty();
  set_has_auto_buy_count();
  auto_buy_count_ = value;
}

// required bool auto_split_green = 5 [default = false];
inline bool HookOption::has_auto_split_green() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HookOption::set_has_auto_split_green() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HookOption::clear_has_auto_split_green() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HookOption::clear_auto_split_green() {
  auto_split_green_ = false;
  clear_has_auto_split_green();
  SetDirty();
}
inline bool HookOption::auto_split_green() const {
  return auto_split_green_;
}
inline void HookOption::set_auto_split_green(bool value) {
  SetDirty();
  set_has_auto_split_green();
  auto_split_green_ = value;
}

// required bool auto_split_blue = 6 [default = false];
inline bool HookOption::has_auto_split_blue() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HookOption::set_has_auto_split_blue() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HookOption::clear_has_auto_split_blue() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HookOption::clear_auto_split_blue() {
  auto_split_blue_ = false;
  clear_has_auto_split_blue();
  SetDirty();
}
inline bool HookOption::auto_split_blue() const {
  return auto_split_blue_;
}
inline void HookOption::set_auto_split_blue(bool value) {
  SetDirty();
  set_has_auto_split_blue();
  auto_split_blue_ = value;
}

// required bool auto_refix = 7 [default = true];
inline bool HookOption::has_auto_refix() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HookOption::set_has_auto_refix() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HookOption::clear_has_auto_refix() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HookOption::clear_auto_refix() {
  auto_refix_ = true;
  clear_has_auto_refix();
  SetDirty();
}
inline bool HookOption::auto_refix() const {
  return auto_refix_;
}
inline void HookOption::set_auto_refix(bool value) {
  SetDirty();
  set_has_auto_refix();
  auto_refix_ = value;
}

// required bool auto_use_potion = 8 [default = false];
inline bool HookOption::has_auto_use_potion() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HookOption::set_has_auto_use_potion() {
  _has_bits_[0] |= 0x00000080u;
}
inline void HookOption::clear_has_auto_use_potion() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void HookOption::clear_auto_use_potion() {
  auto_use_potion_ = false;
  clear_has_auto_use_potion();
  SetDirty();
}
inline bool HookOption::auto_use_potion() const {
  return auto_use_potion_;
}
inline void HookOption::set_auto_use_potion(bool value) {
  SetDirty();
  set_has_auto_use_potion();
  auto_use_potion_ = value;
}

// required bool auto_buy_potion = 9 [default = false];
inline bool HookOption::has_auto_buy_potion() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void HookOption::set_has_auto_buy_potion() {
  _has_bits_[0] |= 0x00000100u;
}
inline void HookOption::clear_has_auto_buy_potion() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void HookOption::clear_auto_buy_potion() {
  auto_buy_potion_ = false;
  clear_has_auto_buy_potion();
  SetDirty();
}
inline bool HookOption::auto_buy_potion() const {
  return auto_buy_potion_;
}
inline void HookOption::set_auto_buy_potion(bool value) {
  SetDirty();
  set_has_auto_buy_potion();
  auto_buy_potion_ = value;
}

// -------------------------------------------------------------------

// PlayerSetting

// required fixed64 guid = 1;
inline bool PlayerSetting::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerSetting::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerSetting::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerSetting::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 PlayerSetting::guid() const {
  return guid_;
}
inline void PlayerSetting::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// required int32 ignore_add_friend = 2;
inline bool PlayerSetting::has_ignore_add_friend() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerSetting::set_has_ignore_add_friend() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerSetting::clear_has_ignore_add_friend() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerSetting::clear_ignore_add_friend() {
  ignore_add_friend_ = 0;
  clear_has_ignore_add_friend();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerSetting::ignore_add_friend() const {
  return ignore_add_friend_;
}
inline void PlayerSetting::set_ignore_add_friend(::google::protobuf::int32 value) {
  SetDirty();
  set_has_ignore_add_friend();
  ignore_add_friend_ = value;
}

// required int32 reject_fight = 3;
inline bool PlayerSetting::has_reject_fight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerSetting::set_has_reject_fight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerSetting::clear_has_reject_fight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerSetting::clear_reject_fight() {
  reject_fight_ = 0;
  clear_has_reject_fight();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerSetting::reject_fight() const {
  return reject_fight_;
}
inline void PlayerSetting::set_reject_fight(::google::protobuf::int32 value) {
  SetDirty();
  set_has_reject_fight();
  reject_fight_ = value;
}

// -------------------------------------------------------------------

// PlayerOperateInfo

// required fixed64 guid = 1;
inline bool PlayerOperateInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerOperateInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerOperateInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerOperateInfo::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 PlayerOperateInfo::guid() const {
  return guid_;
}
inline void PlayerOperateInfo::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// required string name = 2;
inline bool PlayerOperateInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerOperateInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerOperateInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerOperateInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
  SetDirty();
}
inline const ::std::string& PlayerOperateInfo::name() const {
  return *name_;
}
inline void PlayerOperateInfo::set_name(const ::std::string& value) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PlayerOperateInfo::set_name(const char* value) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PlayerOperateInfo::set_name(const char* value, size_t size) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerOperateInfo::mutable_name() {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PlayerOperateInfo::release_name() {
  SetDirty();
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerOperateInfo::set_allocated_name(::std::string* name) {
  SetDirty();
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 level = 3;
inline bool PlayerOperateInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerOperateInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerOperateInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerOperateInfo::clear_level() {
  level_ = 0;
  clear_has_level();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerOperateInfo::level() const {
  return level_;
}
inline void PlayerOperateInfo::set_level(::google::protobuf::int32 value) {
  SetDirty();
  set_has_level();
  level_ = value;
}

// required int32 hair = 4;
inline bool PlayerOperateInfo::has_hair() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerOperateInfo::set_has_hair() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerOperateInfo::clear_has_hair() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerOperateInfo::clear_hair() {
  hair_ = 0;
  clear_has_hair();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerOperateInfo::hair() const {
  return hair_;
}
inline void PlayerOperateInfo::set_hair(::google::protobuf::int32 value) {
  SetDirty();
  set_has_hair();
  hair_ = value;
}

// required int32 init_actor_id = 5;
inline bool PlayerOperateInfo::has_init_actor_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerOperateInfo::set_has_init_actor_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerOperateInfo::clear_has_init_actor_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerOperateInfo::clear_init_actor_id() {
  init_actor_id_ = 0;
  clear_has_init_actor_id();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerOperateInfo::init_actor_id() const {
  return init_actor_id_;
}
inline void PlayerOperateInfo::set_init_actor_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_init_actor_id();
  init_actor_id_ = value;
}

// required fixed64 guildid = 6;
inline bool PlayerOperateInfo::has_guildid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerOperateInfo::set_has_guildid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerOperateInfo::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerOperateInfo::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
  SetDirty();
}
inline ::google::protobuf::uint64 PlayerOperateInfo::guildid() const {
  return guildid_;
}
inline void PlayerOperateInfo::set_guildid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guildid();
  guildid_ = value;
}

// optional string guildname = 7;
inline bool PlayerOperateInfo::has_guildname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerOperateInfo::set_has_guildname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerOperateInfo::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerOperateInfo::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
  SetDirty();
}
inline const ::std::string& PlayerOperateInfo::guildname() const {
  return *guildname_;
}
inline void PlayerOperateInfo::set_guildname(const ::std::string& value) {
  SetDirty();
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void PlayerOperateInfo::set_guildname(const char* value) {
  SetDirty();
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void PlayerOperateInfo::set_guildname(const char* value, size_t size) {
  SetDirty();
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerOperateInfo::mutable_guildname() {
  SetDirty();
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* PlayerOperateInfo::release_guildname() {
  SetDirty();
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerOperateInfo::set_allocated_guildname(::std::string* guildname) {
  SetDirty();
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .Packet.GuildPosition guildposition = 8;
inline bool PlayerOperateInfo::has_guildposition() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerOperateInfo::set_has_guildposition() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayerOperateInfo::clear_has_guildposition() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayerOperateInfo::clear_guildposition() {
  guildposition_ = 0;
  clear_has_guildposition();
  SetDirty();
}
inline ::Packet::GuildPosition PlayerOperateInfo::guildposition() const {
  return static_cast< ::Packet::GuildPosition >(guildposition_);
}
inline void PlayerOperateInfo::set_guildposition(::Packet::GuildPosition value) {
  assert(::Packet::GuildPosition_IsValid(value));
  SetDirty();
  set_has_guildposition();
  guildposition_ = value;
}

// required fixed64 teamid = 9;
inline bool PlayerOperateInfo::has_teamid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlayerOperateInfo::set_has_teamid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlayerOperateInfo::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlayerOperateInfo::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
  SetDirty();
}
inline ::google::protobuf::uint64 PlayerOperateInfo::teamid() const {
  return teamid_;
}
inline void PlayerOperateInfo::set_teamid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_teamid();
  teamid_ = value;
}

// -------------------------------------------------------------------

// PlayerOperateInfoReq

// required fixed64 guid = 1;
inline bool PlayerOperateInfoReq::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerOperateInfoReq::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerOperateInfoReq::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerOperateInfoReq::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 PlayerOperateInfoReq::guid() const {
  return guid_;
}
inline void PlayerOperateInfoReq::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// -------------------------------------------------------------------

// PlayerOperateInfoReply

// required .Packet.PlayerOperateInfo optinfo = 1;
inline bool PlayerOperateInfoReply::has_optinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerOperateInfoReply::set_has_optinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerOperateInfoReply::clear_has_optinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerOperateInfoReply::clear_optinfo() {
  if (optinfo_ != NULL) optinfo_->::Packet::PlayerOperateInfo::Clear();
  clear_has_optinfo();
  SetDirty();
}
inline const ::Packet::PlayerOperateInfo& PlayerOperateInfoReply::optinfo() const {
  return optinfo_ != NULL ? *optinfo_ : *default_instance_->optinfo_;
}
inline ::Packet::PlayerOperateInfo* PlayerOperateInfoReply::mutable_optinfo() {
  SetDirty();
  set_has_optinfo();
  if (optinfo_ == NULL) optinfo_ = new ::Packet::PlayerOperateInfo;
  return optinfo_;
}
inline ::Packet::PlayerOperateInfo* PlayerOperateInfoReply::release_optinfo() {
  SetDirty();
  clear_has_optinfo();
  ::Packet::PlayerOperateInfo* temp = optinfo_;
  optinfo_ = NULL;
  return temp;
}
inline void PlayerOperateInfoReply::set_allocated_optinfo(::Packet::PlayerOperateInfo* optinfo) {
  SetDirty();
  delete optinfo_;
  optinfo_ = optinfo;
  if (optinfo) {
    set_has_optinfo();
  } else {
    clear_has_optinfo();
  }
}

// -------------------------------------------------------------------

// PlayerBasicInfo

// required fixed64 guid = 1;
inline bool PlayerBasicInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerBasicInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerBasicInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerBasicInfo::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 PlayerBasicInfo::guid() const {
  return guid_;
}
inline void PlayerBasicInfo::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// required int32 level = 2;
inline bool PlayerBasicInfo::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerBasicInfo::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerBasicInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerBasicInfo::clear_level() {
  level_ = 0;
  clear_has_level();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerBasicInfo::level() const {
  return level_;
}
inline void PlayerBasicInfo::set_level(::google::protobuf::int32 value) {
  SetDirty();
  set_has_level();
  level_ = value;
}

// required string name = 3;
inline bool PlayerBasicInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerBasicInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerBasicInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerBasicInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
  SetDirty();
}
inline const ::std::string& PlayerBasicInfo::name() const {
  return *name_;
}
inline void PlayerBasicInfo::set_name(const ::std::string& value) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PlayerBasicInfo::set_name(const char* value) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PlayerBasicInfo::set_name(const char* value, size_t size) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerBasicInfo::mutable_name() {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PlayerBasicInfo::release_name() {
  SetDirty();
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerBasicInfo::set_allocated_name(::std::string* name) {
  SetDirty();
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 scene_id = 4;
inline bool PlayerBasicInfo::has_scene_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerBasicInfo::set_has_scene_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerBasicInfo::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerBasicInfo::clear_scene_id() {
  scene_id_ = 0;
  clear_has_scene_id();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerBasicInfo::scene_id() const {
  return scene_id_;
}
inline void PlayerBasicInfo::set_scene_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_scene_id();
  scene_id_ = value;
}

// required .Packet.Position scene_pos = 5;
inline bool PlayerBasicInfo::has_scene_pos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerBasicInfo::set_has_scene_pos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerBasicInfo::clear_has_scene_pos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerBasicInfo::clear_scene_pos() {
  if (scene_pos_ != NULL) scene_pos_->::Packet::Position::Clear();
  clear_has_scene_pos();
  SetDirty();
}
inline const ::Packet::Position& PlayerBasicInfo::scene_pos() const {
  return scene_pos_ != NULL ? *scene_pos_ : *default_instance_->scene_pos_;
}
inline ::Packet::Position* PlayerBasicInfo::mutable_scene_pos() {
  SetDirty();
  set_has_scene_pos();
  if (scene_pos_ == NULL) scene_pos_ = new ::Packet::Position;
  return scene_pos_;
}
inline ::Packet::Position* PlayerBasicInfo::release_scene_pos() {
  SetDirty();
  clear_has_scene_pos();
  ::Packet::Position* temp = scene_pos_;
  scene_pos_ = NULL;
  return temp;
}
inline void PlayerBasicInfo::set_allocated_scene_pos(::Packet::Position* scene_pos) {
  SetDirty();
  delete scene_pos_;
  scene_pos_ = scene_pos;
  if (scene_pos) {
    set_has_scene_pos();
  } else {
    clear_has_scene_pos();
  }
}

// required .Packet.PlayerSceneStatus player_status = 6;
inline bool PlayerBasicInfo::has_player_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerBasicInfo::set_has_player_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerBasicInfo::clear_has_player_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerBasicInfo::clear_player_status() {
  player_status_ = 0;
  clear_has_player_status();
  SetDirty();
}
inline ::Packet::PlayerSceneStatus PlayerBasicInfo::player_status() const {
  return static_cast< ::Packet::PlayerSceneStatus >(player_status_);
}
inline void PlayerBasicInfo::set_player_status(::Packet::PlayerSceneStatus value) {
  assert(::Packet::PlayerSceneStatus_IsValid(value));
  SetDirty();
  set_has_player_status();
  player_status_ = value;
}

// required float direction = 7;
inline bool PlayerBasicInfo::has_direction() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerBasicInfo::set_has_direction() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerBasicInfo::clear_has_direction() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerBasicInfo::clear_direction() {
  direction_ = 0;
  clear_has_direction();
  SetDirty();
}
inline float PlayerBasicInfo::direction() const {
  return direction_;
}
inline void PlayerBasicInfo::set_direction(float value) {
  SetDirty();
  set_has_direction();
  direction_ = value;
}

// required fixed32 move_speed = 8;
inline bool PlayerBasicInfo::has_move_speed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerBasicInfo::set_has_move_speed() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayerBasicInfo::clear_has_move_speed() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayerBasicInfo::clear_move_speed() {
  move_speed_ = 0u;
  clear_has_move_speed();
  SetDirty();
}
inline ::google::protobuf::uint32 PlayerBasicInfo::move_speed() const {
  return move_speed_;
}
inline void PlayerBasicInfo::set_move_speed(::google::protobuf::uint32 value) {
  SetDirty();
  set_has_move_speed();
  move_speed_ = value;
}

// required int32 init_actor_id = 9;
inline bool PlayerBasicInfo::has_init_actor_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlayerBasicInfo::set_has_init_actor_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlayerBasicInfo::clear_has_init_actor_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlayerBasicInfo::clear_init_actor_id() {
  init_actor_id_ = 0;
  clear_has_init_actor_id();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerBasicInfo::init_actor_id() const {
  return init_actor_id_;
}
inline void PlayerBasicInfo::set_init_actor_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_init_actor_id();
  init_actor_id_ = value;
}

// required string icon = 10;
inline bool PlayerBasicInfo::has_icon() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlayerBasicInfo::set_has_icon() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlayerBasicInfo::clear_has_icon() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlayerBasicInfo::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
  SetDirty();
}
inline const ::std::string& PlayerBasicInfo::icon() const {
  return *icon_;
}
inline void PlayerBasicInfo::set_icon(const ::std::string& value) {
  SetDirty();
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void PlayerBasicInfo::set_icon(const char* value) {
  SetDirty();
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void PlayerBasicInfo::set_icon(const char* value, size_t size) {
  SetDirty();
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerBasicInfo::mutable_icon() {
  SetDirty();
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* PlayerBasicInfo::release_icon() {
  SetDirty();
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerBasicInfo::set_allocated_icon(::std::string* icon) {
  SetDirty();
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required fixed64 guildid = 11;
inline bool PlayerBasicInfo::has_guildid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PlayerBasicInfo::set_has_guildid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PlayerBasicInfo::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PlayerBasicInfo::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
  SetDirty();
}
inline ::google::protobuf::uint64 PlayerBasicInfo::guildid() const {
  return guildid_;
}
inline void PlayerBasicInfo::set_guildid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guildid();
  guildid_ = value;
}

// required string guildname = 12;
inline bool PlayerBasicInfo::has_guildname() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PlayerBasicInfo::set_has_guildname() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PlayerBasicInfo::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PlayerBasicInfo::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
  SetDirty();
}
inline const ::std::string& PlayerBasicInfo::guildname() const {
  return *guildname_;
}
inline void PlayerBasicInfo::set_guildname(const ::std::string& value) {
  SetDirty();
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void PlayerBasicInfo::set_guildname(const char* value) {
  SetDirty();
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void PlayerBasicInfo::set_guildname(const char* value, size_t size) {
  SetDirty();
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerBasicInfo::mutable_guildname() {
  SetDirty();
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* PlayerBasicInfo::release_guildname() {
  SetDirty();
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerBasicInfo::set_allocated_guildname(::std::string* guildname) {
  SetDirty();
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .Packet.Camp camp = 13;
inline bool PlayerBasicInfo::has_camp() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PlayerBasicInfo::set_has_camp() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PlayerBasicInfo::clear_has_camp() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PlayerBasicInfo::clear_camp() {
  camp_ = 0;
  clear_has_camp();
  SetDirty();
}
inline ::Packet::Camp PlayerBasicInfo::camp() const {
  return static_cast< ::Packet::Camp >(camp_);
}
inline void PlayerBasicInfo::set_camp(::Packet::Camp value) {
  assert(::Packet::Camp_IsValid(value));
  SetDirty();
  set_has_camp();
  camp_ = value;
}

// required int32 mount_id = 15;
inline bool PlayerBasicInfo::has_mount_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PlayerBasicInfo::set_has_mount_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PlayerBasicInfo::clear_has_mount_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PlayerBasicInfo::clear_mount_id() {
  mount_id_ = 0;
  clear_has_mount_id();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerBasicInfo::mount_id() const {
  return mount_id_;
}
inline void PlayerBasicInfo::set_mount_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_mount_id();
  mount_id_ = value;
}

// required int32 battle_score = 16;
inline bool PlayerBasicInfo::has_battle_score() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PlayerBasicInfo::set_has_battle_score() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PlayerBasicInfo::clear_has_battle_score() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PlayerBasicInfo::clear_battle_score() {
  battle_score_ = 0;
  clear_has_battle_score();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerBasicInfo::battle_score() const {
  return battle_score_;
}
inline void PlayerBasicInfo::set_battle_score(::google::protobuf::int32 value) {
  SetDirty();
  set_has_battle_score();
  battle_score_ = value;
}

// required int32 hair = 17;
inline bool PlayerBasicInfo::has_hair() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PlayerBasicInfo::set_has_hair() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PlayerBasicInfo::clear_has_hair() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PlayerBasicInfo::clear_hair() {
  hair_ = 0;
  clear_has_hair();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerBasicInfo::hair() const {
  return hair_;
}
inline void PlayerBasicInfo::set_hair(::google::protobuf::int32 value) {
  SetDirty();
  set_has_hair();
  hair_ = value;
}

// required int32 master_level = 18;
inline bool PlayerBasicInfo::has_master_level() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PlayerBasicInfo::set_has_master_level() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PlayerBasicInfo::clear_has_master_level() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PlayerBasicInfo::clear_master_level() {
  master_level_ = 0;
  clear_has_master_level();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerBasicInfo::master_level() const {
  return master_level_;
}
inline void PlayerBasicInfo::set_master_level(::google::protobuf::int32 value) {
  SetDirty();
  set_has_master_level();
  master_level_ = value;
}

// -------------------------------------------------------------------

// PlayerDBInfo

// required fixed64 guid = 1;
inline bool PlayerDBInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerDBInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerDBInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerDBInfo::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 PlayerDBInfo::guid() const {
  return guid_;
}
inline void PlayerDBInfo::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// required fixed64 account_guid = 2;
inline bool PlayerDBInfo::has_account_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerDBInfo::set_has_account_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerDBInfo::clear_has_account_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerDBInfo::clear_account_guid() {
  account_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_account_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 PlayerDBInfo::account_guid() const {
  return account_guid_;
}
inline void PlayerDBInfo::set_account_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_account_guid();
  account_guid_ = value;
}

// required .Packet.PlayerBasicInfo basic_info = 3;
inline bool PlayerDBInfo::has_basic_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerDBInfo::set_has_basic_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerDBInfo::clear_has_basic_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerDBInfo::clear_basic_info() {
  if (basic_info_ != NULL) basic_info_->::Packet::PlayerBasicInfo::Clear();
  clear_has_basic_info();
  SetDirty();
}
inline const ::Packet::PlayerBasicInfo& PlayerDBInfo::basic_info() const {
  return basic_info_ != NULL ? *basic_info_ : *default_instance_->basic_info_;
}
inline ::Packet::PlayerBasicInfo* PlayerDBInfo::mutable_basic_info() {
  SetDirty();
  set_has_basic_info();
  if (basic_info_ == NULL) basic_info_ = new ::Packet::PlayerBasicInfo;
  return basic_info_;
}
inline ::Packet::PlayerBasicInfo* PlayerDBInfo::release_basic_info() {
  SetDirty();
  clear_has_basic_info();
  ::Packet::PlayerBasicInfo* temp = basic_info_;
  basic_info_ = NULL;
  return temp;
}
inline void PlayerDBInfo::set_allocated_basic_info(::Packet::PlayerBasicInfo* basic_info) {
  SetDirty();
  delete basic_info_;
  basic_info_ = basic_info;
  if (basic_info) {
    set_has_basic_info();
  } else {
    clear_has_basic_info();
  }
}

// repeated fixed64 lackeys = 4;
inline int PlayerDBInfo::lackeys_size() const {
  return lackeys_.size();
}
inline void PlayerDBInfo::clear_lackeys() {
  lackeys_.Clear();
  SetDirty();
}
inline ::google::protobuf::uint64 PlayerDBInfo::lackeys(int index) const {
  return lackeys_.Get(index);
}
inline void PlayerDBInfo::set_lackeys(int index, ::google::protobuf::uint64 value) {
  SetDirty();
  lackeys_.Set(index, value);
}
inline void PlayerDBInfo::add_lackeys(::google::protobuf::uint64 value) {
  SetDirty();
  lackeys_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
PlayerDBInfo::lackeys() const {
  return lackeys_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
PlayerDBInfo::mutable_lackeys() {
  SetDirty();
  return &lackeys_;
}

// required string text_answers = 5;
inline bool PlayerDBInfo::has_text_answers() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerDBInfo::set_has_text_answers() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerDBInfo::clear_has_text_answers() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerDBInfo::clear_text_answers() {
  if (text_answers_ != &::google::protobuf::internal::kEmptyString) {
    text_answers_->clear();
  }
  clear_has_text_answers();
  SetDirty();
}
inline const ::std::string& PlayerDBInfo::text_answers() const {
  return *text_answers_;
}
inline void PlayerDBInfo::set_text_answers(const ::std::string& value) {
  SetDirty();
  set_has_text_answers();
  if (text_answers_ == &::google::protobuf::internal::kEmptyString) {
    text_answers_ = new ::std::string;
  }
  text_answers_->assign(value);
}
inline void PlayerDBInfo::set_text_answers(const char* value) {
  SetDirty();
  set_has_text_answers();
  if (text_answers_ == &::google::protobuf::internal::kEmptyString) {
    text_answers_ = new ::std::string;
  }
  text_answers_->assign(value);
}
inline void PlayerDBInfo::set_text_answers(const char* value, size_t size) {
  SetDirty();
  set_has_text_answers();
  if (text_answers_ == &::google::protobuf::internal::kEmptyString) {
    text_answers_ = new ::std::string;
  }
  text_answers_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerDBInfo::mutable_text_answers() {
  SetDirty();
  set_has_text_answers();
  if (text_answers_ == &::google::protobuf::internal::kEmptyString) {
    text_answers_ = new ::std::string;
  }
  return text_answers_;
}
inline ::std::string* PlayerDBInfo::release_text_answers() {
  SetDirty();
  clear_has_text_answers();
  if (text_answers_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_answers_;
    text_answers_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerDBInfo::set_allocated_text_answers(::std::string* text_answers) {
  SetDirty();
  if (text_answers_ != &::google::protobuf::internal::kEmptyString) {
    delete text_answers_;
  }
  if (text_answers) {
    set_has_text_answers();
    text_answers_ = text_answers;
  } else {
    clear_has_text_answers();
    text_answers_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pic_answers = 6;
inline bool PlayerDBInfo::has_pic_answers() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerDBInfo::set_has_pic_answers() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerDBInfo::clear_has_pic_answers() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerDBInfo::clear_pic_answers() {
  if (pic_answers_ != &::google::protobuf::internal::kEmptyString) {
    pic_answers_->clear();
  }
  clear_has_pic_answers();
  SetDirty();
}
inline const ::std::string& PlayerDBInfo::pic_answers() const {
  return *pic_answers_;
}
inline void PlayerDBInfo::set_pic_answers(const ::std::string& value) {
  SetDirty();
  set_has_pic_answers();
  if (pic_answers_ == &::google::protobuf::internal::kEmptyString) {
    pic_answers_ = new ::std::string;
  }
  pic_answers_->assign(value);
}
inline void PlayerDBInfo::set_pic_answers(const char* value) {
  SetDirty();
  set_has_pic_answers();
  if (pic_answers_ == &::google::protobuf::internal::kEmptyString) {
    pic_answers_ = new ::std::string;
  }
  pic_answers_->assign(value);
}
inline void PlayerDBInfo::set_pic_answers(const char* value, size_t size) {
  SetDirty();
  set_has_pic_answers();
  if (pic_answers_ == &::google::protobuf::internal::kEmptyString) {
    pic_answers_ = new ::std::string;
  }
  pic_answers_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerDBInfo::mutable_pic_answers() {
  SetDirty();
  set_has_pic_answers();
  if (pic_answers_ == &::google::protobuf::internal::kEmptyString) {
    pic_answers_ = new ::std::string;
  }
  return pic_answers_;
}
inline ::std::string* PlayerDBInfo::release_pic_answers() {
  SetDirty();
  clear_has_pic_answers();
  if (pic_answers_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pic_answers_;
    pic_answers_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerDBInfo::set_allocated_pic_answers(::std::string* pic_answers) {
  SetDirty();
  if (pic_answers_ != &::google::protobuf::internal::kEmptyString) {
    delete pic_answers_;
  }
  if (pic_answers) {
    set_has_pic_answers();
    pic_answers_ = pic_answers;
  } else {
    clear_has_pic_answers();
    pic_answers_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .Packet.PlayerToken token_data = 7;
inline bool PlayerDBInfo::has_token_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerDBInfo::set_has_token_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerDBInfo::clear_has_token_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerDBInfo::clear_token_data() {
  if (token_data_ != NULL) token_data_->::Packet::PlayerToken::Clear();
  clear_has_token_data();
  SetDirty();
}
inline const ::Packet::PlayerToken& PlayerDBInfo::token_data() const {
  return token_data_ != NULL ? *token_data_ : *default_instance_->token_data_;
}
inline ::Packet::PlayerToken* PlayerDBInfo::mutable_token_data() {
  SetDirty();
  set_has_token_data();
  if (token_data_ == NULL) token_data_ = new ::Packet::PlayerToken;
  return token_data_;
}
inline ::Packet::PlayerToken* PlayerDBInfo::release_token_data() {
  SetDirty();
  clear_has_token_data();
  ::Packet::PlayerToken* temp = token_data_;
  token_data_ = NULL;
  return temp;
}
inline void PlayerDBInfo::set_allocated_token_data(::Packet::PlayerToken* token_data) {
  SetDirty();
  delete token_data_;
  token_data_ = token_data;
  if (token_data) {
    set_has_token_data();
  } else {
    clear_has_token_data();
  }
}

// required .Packet.HookOption hook_option = 8;
inline bool PlayerDBInfo::has_hook_option() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerDBInfo::set_has_hook_option() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayerDBInfo::clear_has_hook_option() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayerDBInfo::clear_hook_option() {
  if (hook_option_ != NULL) hook_option_->::Packet::HookOption::Clear();
  clear_has_hook_option();
  SetDirty();
}
inline const ::Packet::HookOption& PlayerDBInfo::hook_option() const {
  return hook_option_ != NULL ? *hook_option_ : *default_instance_->hook_option_;
}
inline ::Packet::HookOption* PlayerDBInfo::mutable_hook_option() {
  SetDirty();
  set_has_hook_option();
  if (hook_option_ == NULL) hook_option_ = new ::Packet::HookOption;
  return hook_option_;
}
inline ::Packet::HookOption* PlayerDBInfo::release_hook_option() {
  SetDirty();
  clear_has_hook_option();
  ::Packet::HookOption* temp = hook_option_;
  hook_option_ = NULL;
  return temp;
}
inline void PlayerDBInfo::set_allocated_hook_option(::Packet::HookOption* hook_option) {
  SetDirty();
  delete hook_option_;
  hook_option_ = hook_option;
  if (hook_option) {
    set_has_hook_option();
  } else {
    clear_has_hook_option();
  }
}

// required bool inited = 9;
inline bool PlayerDBInfo::has_inited() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlayerDBInfo::set_has_inited() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlayerDBInfo::clear_has_inited() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlayerDBInfo::clear_inited() {
  inited_ = false;
  clear_has_inited();
  SetDirty();
}
inline bool PlayerDBInfo::inited() const {
  return inited_;
}
inline void PlayerDBInfo::set_inited(bool value) {
  SetDirty();
  set_has_inited();
  inited_ = value;
}

// required int32 hook_stage_tracker = 10;
inline bool PlayerDBInfo::has_hook_stage_tracker() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlayerDBInfo::set_has_hook_stage_tracker() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlayerDBInfo::clear_has_hook_stage_tracker() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlayerDBInfo::clear_hook_stage_tracker() {
  hook_stage_tracker_ = 0;
  clear_has_hook_stage_tracker();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerDBInfo::hook_stage_tracker() const {
  return hook_stage_tracker_;
}
inline void PlayerDBInfo::set_hook_stage_tracker(::google::protobuf::int32 value) {
  SetDirty();
  set_has_hook_stage_tracker();
  hook_stage_tracker_ = value;
}

// required int32 last_hook_stage_id = 11;
inline bool PlayerDBInfo::has_last_hook_stage_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PlayerDBInfo::set_has_last_hook_stage_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PlayerDBInfo::clear_has_last_hook_stage_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PlayerDBInfo::clear_last_hook_stage_id() {
  last_hook_stage_id_ = 0;
  clear_has_last_hook_stage_id();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerDBInfo::last_hook_stage_id() const {
  return last_hook_stage_id_;
}
inline void PlayerDBInfo::set_last_hook_stage_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_last_hook_stage_id();
  last_hook_stage_id_ = value;
}

// required uint32 last_logout_time = 12;
inline bool PlayerDBInfo::has_last_logout_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PlayerDBInfo::set_has_last_logout_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PlayerDBInfo::clear_has_last_logout_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PlayerDBInfo::clear_last_logout_time() {
  last_logout_time_ = 0u;
  clear_has_last_logout_time();
  SetDirty();
}
inline ::google::protobuf::uint32 PlayerDBInfo::last_logout_time() const {
  return last_logout_time_;
}
inline void PlayerDBInfo::set_last_logout_time(::google::protobuf::uint32 value) {
  SetDirty();
  set_has_last_logout_time();
  last_logout_time_ = value;
}

// required uint32 create_time = 13;
inline bool PlayerDBInfo::has_create_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PlayerDBInfo::set_has_create_time() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PlayerDBInfo::clear_has_create_time() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PlayerDBInfo::clear_create_time() {
  create_time_ = 0u;
  clear_has_create_time();
  SetDirty();
}
inline ::google::protobuf::uint32 PlayerDBInfo::create_time() const {
  return create_time_;
}
inline void PlayerDBInfo::set_create_time(::google::protobuf::uint32 value) {
  SetDirty();
  set_has_create_time();
  create_time_ = value;
}

// required uint32 charge_all = 14;
inline bool PlayerDBInfo::has_charge_all() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PlayerDBInfo::set_has_charge_all() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PlayerDBInfo::clear_has_charge_all() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PlayerDBInfo::clear_charge_all() {
  charge_all_ = 0u;
  clear_has_charge_all();
  SetDirty();
}
inline ::google::protobuf::uint32 PlayerDBInfo::charge_all() const {
  return charge_all_;
}
inline void PlayerDBInfo::set_charge_all(::google::protobuf::uint32 value) {
  SetDirty();
  set_has_charge_all();
  charge_all_ = value;
}

// required uint32 refresh_time = 15;
inline bool PlayerDBInfo::has_refresh_time() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PlayerDBInfo::set_has_refresh_time() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PlayerDBInfo::clear_has_refresh_time() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PlayerDBInfo::clear_refresh_time() {
  refresh_time_ = 0u;
  clear_has_refresh_time();
  SetDirty();
}
inline ::google::protobuf::uint32 PlayerDBInfo::refresh_time() const {
  return refresh_time_;
}
inline void PlayerDBInfo::set_refresh_time(::google::protobuf::uint32 value) {
  SetDirty();
  set_has_refresh_time();
  refresh_time_ = value;
}

// -------------------------------------------------------------------

// PlayerSpeedChanged

// required fixed64 guid = 1;
inline bool PlayerSpeedChanged::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerSpeedChanged::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerSpeedChanged::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerSpeedChanged::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 PlayerSpeedChanged::guid() const {
  return guid_;
}
inline void PlayerSpeedChanged::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// required fixed32 move_speed = 2;
inline bool PlayerSpeedChanged::has_move_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerSpeedChanged::set_has_move_speed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerSpeedChanged::clear_has_move_speed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerSpeedChanged::clear_move_speed() {
  move_speed_ = 0u;
  clear_has_move_speed();
  SetDirty();
}
inline ::google::protobuf::uint32 PlayerSpeedChanged::move_speed() const {
  return move_speed_;
}
inline void PlayerSpeedChanged::set_move_speed(::google::protobuf::uint32 value) {
  SetDirty();
  set_has_move_speed();
  move_speed_ = value;
}

// -------------------------------------------------------------------

// ServerTime

// required fixed64 time = 1;
inline bool ServerTime::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerTime::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerTime::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerTime::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
  SetDirty();
}
inline ::google::protobuf::uint64 ServerTime::time() const {
  return time_;
}
inline void ServerTime::set_time(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_time();
  time_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PlayerBasicInfo_2eproto__INCLUDED
