// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AllConfigEnum.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AllConfigEnum.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Config {

namespace {

const ::google::protobuf::EnumDescriptor* BFState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BattleObjectAbility_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BattleObjectStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ActivityGroup_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DrawType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EquipmentSlot_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EquipmentType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* WeaponType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EquipmentColor_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ItemType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ItemAddLogType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ItemDelLogType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MarketType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MarketItemGroup_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FinishType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TargetFinishType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TargetResolveType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SubFinishType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MissionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NpcType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* VisibleType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MonsterType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AttackType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ItemPackageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SkillType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AreaType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TargetCamp_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PropertyReviseValueType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BuffType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TargetSortType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ImpactEffectType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_AllConfigEnum_2eproto() {
  protobuf_AddDesc_AllConfigEnum_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AllConfigEnum.proto");
  GOOGLE_CHECK(file != NULL);
  BFState_descriptor_ = file->enum_type(0);
  BattleObjectAbility_descriptor_ = file->enum_type(1);
  BattleObjectStatus_descriptor_ = file->enum_type(2);
  ActivityGroup_descriptor_ = file->enum_type(3);
  DrawType_descriptor_ = file->enum_type(4);
  EquipmentSlot_descriptor_ = file->enum_type(5);
  EquipmentType_descriptor_ = file->enum_type(6);
  WeaponType_descriptor_ = file->enum_type(7);
  EquipmentColor_descriptor_ = file->enum_type(8);
  ItemType_descriptor_ = file->enum_type(9);
  ItemAddLogType_descriptor_ = file->enum_type(10);
  ItemDelLogType_descriptor_ = file->enum_type(11);
  MarketType_descriptor_ = file->enum_type(12);
  MarketItemGroup_descriptor_ = file->enum_type(13);
  FinishType_descriptor_ = file->enum_type(14);
  TargetFinishType_descriptor_ = file->enum_type(15);
  TargetResolveType_descriptor_ = file->enum_type(16);
  SubFinishType_descriptor_ = file->enum_type(17);
  MissionType_descriptor_ = file->enum_type(18);
  NpcType_descriptor_ = file->enum_type(19);
  VisibleType_descriptor_ = file->enum_type(20);
  MonsterType_descriptor_ = file->enum_type(21);
  AttackType_descriptor_ = file->enum_type(22);
  ItemPackageType_descriptor_ = file->enum_type(23);
  SkillType_descriptor_ = file->enum_type(24);
  AreaType_descriptor_ = file->enum_type(25);
  TargetCamp_descriptor_ = file->enum_type(26);
  PropertyReviseValueType_descriptor_ = file->enum_type(27);
  BuffType_descriptor_ = file->enum_type(28);
  TargetSortType_descriptor_ = file->enum_type(29);
  ImpactEffectType_descriptor_ = file->enum_type(30);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AllConfigEnum_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_AllConfigEnum_2eproto() {
}

void protobuf_AddDesc_AllConfigEnum_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023AllConfigEnum.proto\022\006Config*a\n\007BFState"
    "\022\016\n\nBf_Invalid\020\000\022\r\n\tBf_Normal\020\001\022\013\n\007Bf_De"
    "ad\020\002\022\013\n\007Bf_Flag\020\003\022\017\n\013Bf_Fighting\020\004\022\014\n\010Bf"
    "_Leave\020\005*\312\001\n\023BattleObjectAbility\022\023\n\017SELE"
    "CT_TEAMMATE\020\001\022\020\n\014SELECT_ENEMY\020\002\022\010\n\004MOVE\020"
    "\003\022\022\n\016USE_BASE_SKILL\020\004\022\023\n\017USE_MAGIC_SKILL"
    "\020\005\022\026\n\022BE_TEAMMATE_SELECT\020\006\022\023\n\017BE_ENEMY_S"
    "ELECT\020\007\022\031\n\025CHANGE_CURRENT_TARGET\020\010\022\021\n\rCA"
    "N_BE_DAMAGE\020\t*\300\001\n\022BattleObjectStatus\022\010\n\004"
    "DEAD\020\001\022\n\n\006FREEZE\020\002\022\010\n\004LOCK\020\003\022\t\n\005SNEER\020\004\022"
    "\010\n\004MUTE\020\005\022\r\n\tCONFUSION\020\006\022\n\n\006MOVING\020\007\022\010\n\004"
    "STUN\020\010\022\010\n\004FEAR\020\t\022\007\n\003GOD\020\n\022\n\n\006IMMUNE\020\013\022\t\n"
    "\005SHEEP\020\014\022\014\n\010FEAKDEAD\020\r\022\r\n\tDISAPPEAR\020\016\022\t\n"
    "\005BLIND\020\017*6\n\rActivityGroup\022\t\n\005Dayly\020\000\022\r\n\t"
    "TimeLimit\020\001\022\013\n\007HolyDay\020\002*D\n\010DrawType\022\016\n\n"
    "CrystalOne\020\000\022\016\n\nCrystalTen\020\001\022\013\n\007GoldOne\020"
    "\002\022\013\n\007GoldTen\020\003*\375\002\n\rEquipmentSlot\022#\n\026EQUI"
    "PMENT_SLOT_INVALID\020\377\377\377\377\377\377\377\377\377\001\022\027\n\023EQUIPME"
    "NT_SLOT_HEAD\020\001\022\027\n\023EQUIPMENT_SLOT_NECK\020\002\022"
    "\033\n\027EQUIPMENT_SLOT_SHOULDER\020\003\022\030\n\024EQUIPMEN"
    "T_SLOT_CLOAK\020\004\022\030\n\024EQUIPMENT_SLOT_CHEST\020\005"
    "\022\034\n\030EQUIPMENT_SLOT_MAIN_HAND\020\006\022\027\n\023EQUIPM"
    "ENT_SLOT_CUFF\020\007\022\030\n\024EQUIPMENT_SLOT_SHOES\020"
    "\010\022\033\n\027EQUIPMENT_SLOT_RING_ONE\020\t\022\033\n\027EQUIPM"
    "ENT_SLOT_RING_TWO\020\n\022\033\n\027EQUIPMENT_SLOT_OR"
    "NAMENT\020\013\022\034\n\030EQUIPMENT_SLOT_ASSI_HAND\020\014*\205"
    "\003\n\rEquipmentType\022#\n\026EQUIPMENT_TYPE_INVAL"
    "ID\020\377\377\377\377\377\377\377\377\377\001\022\034\n\030EQUIPMENT_TYPE_MAIN_HAN"
    "D\020\001\022\034\n\030EQUIPMENT_TYPE_ASSI_HAND\020\002\022\031\n\025EQU"
    "IPMENT_TYPE_HELMET\020\003\022\033\n\027EQUIPMENT_TYPE_S"
    "HOULDER\020\004\022\030\n\024EQUIPMENT_TYPE_CHEST\020\005\022\034\n\030E"
    "QUIPMENT_TYPE_MAIN_CUFF\020\006\022\030\n\024EQUIPMENT_T"
    "YPE_SHOES\020\007\022\030\n\024EQUIPMENT_TYPE_CLOAK\020\010\022\033\n"
    "\027EQUIPMENT_TYPE_NECKLACE\020\t\022\027\n\023EQUIPMENT_"
    "TYPE_RING\020\n\022\033\n\027EQUIPMENT_TYPE_ORNAMENT\020\013"
    "\022\034\n\030EQUIPMENT_TYPE_BOTH_HAND\020\014*\322\003\n\nWeapo"
    "nType\022\037\n\022WEAPONTYPE_INVALID\020\377\377\377\377\377\377\377\377\377\001\022\033"
    "\n\027WEAPONTYPE_TWO_HAND_AXE\020\001\022\036\n\032WEAPONTYP"
    "E_TWO_HAND_HAMMER\020\002\022\035\n\031WEAPONTYPE_TWO_HA"
    "ND_SWORD\020\003\022\022\n\016WEAPONTYPE_BOW\020\004\022\024\n\020WEAPON"
    "TYPE_SPEAR\020\005\022\023\n\017WEAPONTYPE_WAND\020\006\022\022\n\016WEA"
    "PONTYPE_AXE\020\007\022\025\n\021WEAPONTYPE_HAMMER\020\010\022\025\n\021"
    "WEAPONTYPE_DAGGER\020\t\022\024\n\020WEAPONTYPE_SWORD\020"
    "\n\022\030\n\024WEAPONTYPE_ARROW_BAG\020\013\022\031\n\025WEAPONTYP"
    "E_BULLET_BOX\020\014\022\026\n\022WEAPONTYPE_HALIDOM\020\r\022\025"
    "\n\021WEAPONTYPE_SHIELD\020\016\022\031\n\025WEAPONTYPE_MAGI"
    "C_WARE\020\017\022\026\n\022WEAPONTYPE_JAVELIN\020\020\022\031\n\025WEAP"
    "ONTYPE_MAGIC_WAND\020\021*\177\n\016EquipmentColor\022\027\n"
    "\023EQUIP_COLOR_INVALID\020\000\022\017\n\013EQUIP_WHITE\020\001\022"
    "\017\n\013EQUIP_GREEN\020\002\022\016\n\nEQUIP_BLUE\020\003\022\020\n\014EQUI"
    "P_PURPLE\020\004\022\020\n\014EQUIP_ORANGE\020\005*\235\001\n\010ItemTyp"
    "e\022\034\n\017ItemTypeInvalid\020\377\377\377\377\377\377\377\377\377\001\022\n\n\006POTIO"
    "N\020\001\022\014\n\010MATERIAL\020\002\022\021\n\rCARD_FRAGMENT\020\003\022\r\n\t"
    "AUTOMEDIC\020\004\022\022\n\016MISSION_SCROLL\020\005\022\013\n\007MISSI"
    "ON\020\013\022\010\n\004CARD\020X\022\014\n\010CURRENCY\020c*\270\005\n\016ItemAdd"
    "LogType\022\023\n\017AddType_Package\020\001\022\023\n\017AddType_"
    "Mission\020\002\022\022\n\016AddType_Friend\020\003\022\027\n\023AddType"
    "_MonsterDrop\020\t\022\024\n\020AddType_BankTake\020\n\022\025\n\021"
    "AddType_BankStore\020\013\022\023\n\017AddType_UseItem\020\014"
    "\022\031\n\025AddType_DismantleItem\020\r\022\024\n\020AddType_S"
    "ellItem\020\016\022\017\n\013AddType_Gem\020\017\022\022\n\016AddType_Ma"
    "rket\020\020\022\024\n\020AddType_ExpPoint\020\021\022\025\n\021AddType_"
    "Stage_Tax\020\022\022\020\n\014AddType_Loot\020\023\022\020\n\014AddType"
    "_Draw\020\024\022\026\n\022AddType_PlayerInit\020\025\022\024\n\020AddTy"
    "pe_Activity\020\026\022\024\n\020AddType_Treasure\020\027\022\021\n\rA"
    "ddType_Guild\020\031\022\027\n\023AddType_BattleFeild\020\032\022"
    "\030\n\024AddType_TargetReward\020\033\022\026\n\022AddType_Tak"
    "eOutGem\020\035\022\020\n\014AddType_Mail\020\036\022\023\n\017AddType_A"
    "rrange\020\037\022\027\n\023AddType_OfflineHook\020 \022\022\n\016Add"
    "Type_Charge\020!\022\020\n\014AddType_Hook\020\"\022\024\n\020AddTy"
    "pe_Exchange\020#\022\017\n\013AddType_Acr\020$\022\017\n\013AddTyp"
    "e_CDK\020%\022\026\n\022AddType_MissReward\020&\022\016\n\nAddTy"
    "pe_Gm\0202*\314\007\n\016ItemDelLogType\022\023\n\017DelType_Pa"
    "ckage\020\001\022\023\n\017DelType_Mission\020\002\022\022\n\016DelType_"
    "Friend\020\003\022\033\n\027DelType_TreasureMission\020\004\022\031\n"
    "\025DelType_RewardMission\020\005\022\030\n\024DelType_Unio"
    "nMIssion\020\006\022\030\n\024DelType_CorpsMIssion\020\007\022\032\n\026"
    "DelType_CarBonsMIssion\020\010\022\030\n\024DelType_Magi"
    "calEquip\020\t\022\022\n\016DelType_Market\020\n\022\025\n\021DelTyp"
    "e_BankStore\020\013\022\037\n\033DelType_ExtendContainer"
    "Size\020\014\022\024\n\020DelType_BankTake\020\r\022\024\n\020DelType_"
    "SellItem\020\016\022\023\n\017DelType_UseItem\020\017\022\030\n\024DelTy"
    "pe_EnhanceEquip\020\020\022\017\n\013DelType_Gem\020\021\022\021\n\rDe"
    "lType_Refix\020\022\022\024\n\020DelType_ExpPoint\020\023\022\026\n\022D"
    "elType_ChatGarMsg\020\024\022\021\n\rDelType_Guild\020\025\022\031"
    "\n\025DelType_ChallengeBoss\020\026\022\020\n\014DelType_Loo"
    "t\020\027\022\020\n\014DelType_Draw\020\030\022\020\n\014DelType_Hell\020\031\022"
    "\025\n\021DelType_WorldBoss\020\032\022\021\n\rDelType_Actor\020"
    "\033\022\031\n\025DelType_Upgrade_Color\020\034\022\031\n\025DelType_"
    "Upgrade_Level\020\035\022\030\n\024DelType_Upgrade_Star\020"
    "\036\022\021\n\rDelType_Arena\020\037\022\022\n\016DelType_Rename\020 "
    "\022\024\n\020DelType_Activity\020!\022\023\n\017DelType_Enchan"
    "t\020\"\022\030\n\024DelType_Enchant_Slot\020#\022\024\n\020DelType"
    "_EmbedGem\020$\022\027\n\023DelType_OfflineHook\020%\022\031\n\025"
    "DelType_DismantleItem\020&\022\024\n\020DelType_Excha"
    "nge\020\'\022\017\n\013DelType_Acr\020(\022\026\n\022DelType_MissRe"
    "ward\020)\022\016\n\nDelType_Gm\0202*\345\002\n\nMarketType\022\037\n"
    "\022MarketType_Invalid\020\377\377\377\377\377\377\377\377\377\001\022\022\n\016Market"
    "Type_Gem\020\000\022\024\n\020MarketType_Union\020\001\022\024\n\020Mark"
    "etType_Equip\020\002\022\025\n\021MarketType_LawFal\020\003\022\024\n"
    "\020MarketType_Honor\020\004\022\026\n\022MarketType_Missio"
    "n\020\005\022\025\n\021MarketType_Charge\020\006\022\025\n\021MarketType"
    "_Secret\020\007\022\024\n\020MarketType_Goods\020\010\022\030\n\024Marke"
    "tType_MonthCard\020\t\022\024\n\020MarketType_Point\020\n\022"
    "\025\n\021MarketType_Scroll\020\013\022\023\n\017MarketType_Tim"
    "e\020\014\022\021\n\rMarketTypeMax\020\r*\266\001\n\017MarketItemGro"
    "up\022$\n\027MarketItemGroup_Invalid\020\377\377\377\377\377\377\377\377\377\001"
    "\022\020\n\014CountGroup_0\020\000\022\020\n\014CountGroup_1\020\001\022\020\n\014"
    "CountGroup_2\020\002\022\020\n\014CountGroup_3\020\003\022\020\n\014Coun"
    "tGroup_4\020\004\022\020\n\014CountGroup_5\020\005\022\021\n\rCountGro"
    "upMax\020\006*\344\001\n\nFinishType\022\032\n\rInvalidFinish\020"
    "\377\377\377\377\377\377\377\377\377\001\022\016\n\nFinishText\020\000\022\016\n\nCommitItem"
    "\020\001\022\017\n\013KillMonster\020\002\022\013\n\007KillNpc\020\003\022\013\n\007UseI"
    "tem\020\004\022\014\n\010MailItem\020\005\022\013\n\007LevelUp\020\006\022\r\n\tRand"
    "omNpc\020\007\022\n\n\006Ratrol\020\010\022\r\n\tEnterRaid\020\t\022\017\n\013Co"
    "llectItem\020\n\022\r\n\tGenTarget\020\013\022\n\n\006Action\020\014*\305"
    "\003\n\020TargetFinishType\022\032\n\rInvalidTarget\020\377\377\377"
    "\377\377\377\377\377\377\001\022\023\n\017TFT_KillMonster\020\001\022\020\n\014StagePro"
    "cess\020\002\022\014\n\010DayToken\020\003\022\014\n\010DrawCard\020\004\022\022\n\016Fi"
    "nishActivity\020\005\022\r\n\tFightHero\020\006\022\014\n\010GetEqui"
    "p\020\007\022\014\n\010SuitAttr\020\010\022\014\n\010GetMount\020\t\022\n\n\006StepU"
    "p\020\n\022\n\n\006StarUp\020\013\022\020\n\014AllEnhanceLv\020\014\022\014\n\010Emb"
    "edGem\020\r\022\013\n\007SkillLv\020\016\022\020\n\014EquipEnchant\020\017\022\017"
    "\n\013HeroLevelUp\020\020\022\022\n\016EquipEnhanceLv\020\021\022\r\n\tA"
    "nyStepUp\020\022\022\r\n\tJoinUnion\020\023\022\013\n\007WinHell\020\024\022\016"
    "\n\nLackeysUse\020\025\022\024\n\020WinBurningBattle\020\026\022\r\n\t"
    "GainEquip\020\027\022\013\n\007OnEquip\020\030\022\r\n\tUnionSkil\020\031\022"
    "\r\n\tWorldBoss\020\032*p\n\021TargetResolveType\022\013\n\007N"
    "oValue\020\000\022\016\n\nEqualValue\020\001\022\r\n\tMoreValue\020\002\022"
    "\r\n\tLessLalue\020\003\022\023\n\017StatisticsValue\020\004\022\013\n\007S"
    "pecial\020\005*\333\001\n\rSubFinishType\022\033\n\016InvalidSub"
    "Type\020\377\377\377\377\377\377\377\377\377\001\022\031\n\025KillAndGetWithMonster"
    "\020\001\022\027\n\023KillAndGetWithStage\020\002\022\027\n\023KillAndGe"
    "tWithScene\020\003\022\025\n\021KillMonsterFinish\020\004\022\034\n\030K"
    "illAndGetOneWithMonster\020\005\022\022\n\016KillAnyMons"
    "ter\020\006\022\027\n\023KillStageAnyMonster\020\007*\314\004\n\013Missi"
    "onType\022\033\n\016InvalidMission\020\377\377\377\377\377\377\377\377\377\001\022\017\n\013M"
    "ainMission\020\000\022\017\n\013PartMission\020\001\022\020\n\014UnionMi"
    "ssion\020\002\022\026\n\022ArchaeologyMission\020\003\022\021\n\rRewar"
    "dMission\020\004\022\020\n\014CorpsMission\020\005\022\027\n\023GoblinCa"
    "rbonMission\020\006\022\026\n\022ExtraRewardMission\020\007\022\032\n"
    "\026TinyThreeCarbonMission\020\010\022\026\n\022BlackCarbon"
    "Mission\020\t\022\026\n\022BloodCarbonMission\020\n\022\027\n\023Com"
    "monCarbonMission\020\013\022\031\n\025BigThreeCarbonMiss"
    "ion\020\014\022\022\n\016GradeUpMission\020\r\022\022\n\016DayKillMiss"
    "ion\020\016\022\020\n\014LevelMission\020\017\022\025\n\021Carbon2001Mis"
    "sion\020\020\022\025\n\021Carbon2002Mission\020\021\022\025\n\021Carbon2"
    "003Mission\020\022\022\025\n\021Carbon2004Mission\020\023\022\025\n\021C"
    "arbon2005Mission\020\024\022\025\n\021Carbon2006Mission\020"
    "\025\022\025\n\021Carbon2007Mission\020\026\022\021\n\rScrollMissio"
    "n\020\027\022\020\n\014TowerMission\020\030*\037\n\007NpcType\022\007\n\003Npc\020"
    "\000\022\013\n\007Monster\020\001*D\n\013VisibleType\022\020\n\014StaticP"
    "ublic\020\000\022\020\n\014CreatePublic\020\001\022\021\n\rCraatePriva"
    "te\020\002*.\n\013MonsterType\022\n\n\006Normal\020\000\022\t\n\005Elite"
    "\020\001\022\010\n\004Boss\020\002*%\n\nAttackType\022\014\n\010PHYSICAL\020\001"
    "\022\t\n\005MAGIc\020\002*3\n\017ItemPackageType\022\n\n\006RANDOM"
    "\020\001\022\n\n\006STABLE\020\002\022\010\n\004DRAW\020\003*2\n\tSkillType\022\013\n"
    "\007Trigger\020\000\022\n\n\006AiCast\020\001\022\014\n\010SubSkill\020\002*\"\n\010"
    "AreaType\022\n\n\006Circle\020\000\022\n\n\006Sector\020\001*+\n\nTarg"
    "etCamp\022\010\n\004TEAM\020\000\022\t\n\005ENEMY\020\001\022\010\n\004BOTH\020\002*;\n"
    "\027PropertyReviseValueType\022\r\n\tBY_NUMBER\020\000\022"
    "\021\n\rBY_PERCENTEGY\020\001*\357\010\n\010BuffType\022\016\n\nadd_l"
    "evel2\020\001\022\021\n\rreduce_level2\020\002\022\t\n\005bleed\020\003\022\016\n"
    "\nadd_status\020\004\022\n\n\006immune\020\005\022\016\n\nsweep_away\020"
    "\006\022\016\n\nadd_hp_max\020\007\022\022\n\016weapon_enhence\020\010\022\016\n"
    "\nflash_ball\020\t\022\013\n\007shocker\020\n\022\t\n\005sneer\020\013\022\025\n"
    "\021electric_overload\020\014\022\t\n\005sting\020\r\022\r\n\tice_b"
    "lock\020\016\022\017\n\013combo_point\020\017\022\t\n\005sheep\020\020\022\013\n\007bu"
    "rning\020\021\022\016\n\nice_shield\020\022\022\017\n\013holy_shield\020\023"
    "\022\021\n\rdivine_shield\020\024\022\r\n\tfake_dead\020\025\022\023\n\017se"
    "al_of_command\020\026\022\022\n\016instant_poison\020\027\022\021\n\rd"
    "eadly_poison\020\030\022\020\n\014blade_flurry\020\031\022\030\n\024add_"
    "critical_percent\020\032\022\022\n\016ghostly_strike\020\033\022\r"
    "\n\tdisappear\020\034\022\016\n\nhemorrhage\020\035\022\023\n\017seal_of"
    "_justice\020\036\022\017\n\013damage_link\020\037\022\021\n\rcontinue_"
    "cure\020 \022\016\n\nlife_burst\020!\022\016\n\ncorruption\020\"\022\016"
    "\n\ndeath_coil\020#\022\024\n\020redemption_ghost\020$\022\010\n\004"
    "pain\020%\022\r\n\tdark_mark\020&\022\n\n\006plague\020\'\022\021\n\radd"
    "_source_hp\020(\022\010\n\004mark\020)\022\023\n\017add_cure_effec"
    "t\020*\022\010\n\004wild\020+\022\025\n\021add_dodge_percent\020,\022\014\n\010"
    "impaling\020-\022\026\n\022reduce_cure_effect\020.\022\024\n\020be"
    "_attack_damage\020/\022\021\n\rreduce_damage\0200\022\010\n\004f"
    "ury\0201\022\014\n\010reckless\0202\022\016\n\nlife_steal\0203\022\r\n\ts"
    "low_down\0204\022\025\n\021weapon_deterrence\0205\022\r\n\ttra"
    "nsform\0206\022\r\n\tsacrifice\0207\022\014\n\010devotion\0208\022\017\n"
    "\013hunter_mark\0209\022\021\n\rdouble_attack\020:\022\n\n\006shi"
    "eld\020;\022\020\n\014knight_bless\020<\022\025\n\021warlock_sacri"
    "fice\020=\022\021\n\rwarlock_curse\020>\022\016\n\nadd_damage\020"
    "\?\022\017\n\013punish_halo\020@\022\030\n\024reduce_accurate_ra"
    "te\020A\022\n\n\006poison\020B\022\022\n\016pulse_instance\020C*\221\001\n"
    "\016TargetSortType\022\013\n\007INVALID\020\000\022\t\n\005RANGE\020\001\022"
    "\016\n\nRANDOM_SEL\020\002\022\n\n\006HATRED\020\003\022\022\n\016LOW_HP_PE"
    "RCENT\020\004\022\n\n\006LOW_HP\020\005\022\022\n\016REVERSER_RANGE\020\006\022"
    "\027\n\023USE_SKILL_TAR_LOGIC\020c*L\n\020ImpactEffect"
    "Type\022\026\n\tBadImpact\020\377\377\377\377\377\377\377\377\377\001\022\020\n\014NormalIm"
    "pact\020\000\022\016\n\nGoodImpact\020\001", 7822);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AllConfigEnum.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AllConfigEnum_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AllConfigEnum_2eproto {
  StaticDescriptorInitializer_AllConfigEnum_2eproto() {
    protobuf_AddDesc_AllConfigEnum_2eproto();
  }
} static_descriptor_initializer_AllConfigEnum_2eproto_;
const ::google::protobuf::EnumDescriptor* BFState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BFState_descriptor_;
}
bool BFState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BattleObjectAbility_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleObjectAbility_descriptor_;
}
bool BattleObjectAbility_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BattleObjectStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleObjectStatus_descriptor_;
}
bool BattleObjectStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ActivityGroup_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityGroup_descriptor_;
}
bool ActivityGroup_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DrawType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DrawType_descriptor_;
}
bool DrawType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EquipmentSlot_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentSlot_descriptor_;
}
bool EquipmentSlot_IsValid(int value) {
  switch(value) {
    case -1:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EquipmentType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentType_descriptor_;
}
bool EquipmentType_IsValid(int value) {
  switch(value) {
    case -1:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WeaponType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeaponType_descriptor_;
}
bool WeaponType_IsValid(int value) {
  switch(value) {
    case -1:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EquipmentColor_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentColor_descriptor_;
}
bool EquipmentColor_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ItemType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemType_descriptor_;
}
bool ItemType_IsValid(int value) {
  switch(value) {
    case -1:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 11:
    case 88:
    case 99:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ItemAddLogType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemAddLogType_descriptor_;
}
bool ItemAddLogType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 25:
    case 26:
    case 27:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 50:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ItemDelLogType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemDelLogType_descriptor_;
}
bool ItemDelLogType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 50:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MarketType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketType_descriptor_;
}
bool MarketType_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MarketItemGroup_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketItemGroup_descriptor_;
}
bool MarketItemGroup_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FinishType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FinishType_descriptor_;
}
bool FinishType_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TargetFinishType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetFinishType_descriptor_;
}
bool TargetFinishType_IsValid(int value) {
  switch(value) {
    case -1:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TargetResolveType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetResolveType_descriptor_;
}
bool TargetResolveType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SubFinishType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubFinishType_descriptor_;
}
bool SubFinishType_IsValid(int value) {
  switch(value) {
    case -1:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MissionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionType_descriptor_;
}
bool MissionType_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NpcType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NpcType_descriptor_;
}
bool NpcType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VisibleType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VisibleType_descriptor_;
}
bool VisibleType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MonsterType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonsterType_descriptor_;
}
bool MonsterType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AttackType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttackType_descriptor_;
}
bool AttackType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ItemPackageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemPackageType_descriptor_;
}
bool ItemPackageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SkillType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillType_descriptor_;
}
bool SkillType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AreaType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AreaType_descriptor_;
}
bool AreaType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TargetCamp_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetCamp_descriptor_;
}
bool TargetCamp_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PropertyReviseValueType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropertyReviseValueType_descriptor_;
}
bool PropertyReviseValueType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BuffType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffType_descriptor_;
}
bool BuffType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TargetSortType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetSortType_descriptor_;
}
bool TargetSortType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 99:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ImpactEffectType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImpactEffectType_descriptor_;
}
bool ImpactEffectType_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config

// @@protoc_insertion_point(global_scope)
