// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientLocalData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ClientLocalData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Packet {

namespace {

const ::google::protobuf::Descriptor* FriendMessages_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendMessages_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendsMessages_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendsMessages_reflection_ = NULL;
const ::google::protobuf::Descriptor* SystemMessages_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemMessages_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageRecords_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageRecords_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ClientLocalData_2eproto() {
  protobuf_AddDesc_ClientLocalData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ClientLocalData.proto");
  GOOGLE_CHECK(file != NULL);
  FriendMessages_descriptor_ = file->message_type(0);
  static const int FriendMessages_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendMessages, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendMessages, messages_),
  };
  FriendMessages_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendMessages_descriptor_,
      FriendMessages::default_instance_,
      FriendMessages_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendMessages, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendMessages, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendMessages));
  FriendsMessages_descriptor_ = file->message_type(1);
  static const int FriendsMessages_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsMessages, info_),
  };
  FriendsMessages_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendsMessages_descriptor_,
      FriendsMessages::default_instance_,
      FriendsMessages_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsMessages, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendsMessages, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendsMessages));
  SystemMessages_descriptor_ = file->message_type(2);
  static const int SystemMessages_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemMessages, info_),
  };
  SystemMessages_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SystemMessages_descriptor_,
      SystemMessages::default_instance_,
      SystemMessages_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemMessages, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemMessages, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SystemMessages));
  MessageRecords_descriptor_ = file->message_type(3);
  static const int MessageRecords_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRecords, system_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRecords, friends_),
  };
  MessageRecords_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageRecords_descriptor_,
      MessageRecords::default_instance_,
      MessageRecords_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRecords, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRecords, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageRecords));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ClientLocalData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendMessages_descriptor_, &FriendMessages::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendsMessages_descriptor_, &FriendsMessages::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SystemMessages_descriptor_, &SystemMessages::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageRecords_descriptor_, &MessageRecords::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ClientLocalData_2eproto() {
  delete FriendMessages::default_instance_;
  delete FriendMessages_reflection_;
  delete FriendsMessages::default_instance_;
  delete FriendsMessages_reflection_;
  delete SystemMessages::default_instance_;
  delete SystemMessages_reflection_;
  delete MessageRecords::default_instance_;
  delete MessageRecords_reflection_;
}

void protobuf_AddDesc_ClientLocalData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Packet::protobuf_AddDesc_FriendMail_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025ClientLocalData.proto\022\006Packet\032\020FriendM"
    "ail.proto\"K\n\016FriendMessages\022\014\n\004guid\030\001 \002("
    "\006\022+\n\010messages\030\002 \003(\0132\031.Packet.FriendMessa"
    "geInfo\"7\n\017FriendsMessages\022$\n\004info\030\001 \003(\0132"
    "\026.Packet.FriendMessages\"9\n\016SystemMessage"
    "s\022\'\n\004info\030\001 \003(\0132\031.Packet.FriendMessageIn"
    "fo\"b\n\016MessageRecords\022&\n\006system\030\001 \002(\0132\026.P"
    "acket.SystemMessages\022(\n\007friends\030\002 \002(\0132\027."
    "Packet.FriendsMessages", 342);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ClientLocalData.proto", &protobuf_RegisterTypes);
  FriendMessages::default_instance_ = new FriendMessages();
  FriendsMessages::default_instance_ = new FriendsMessages();
  SystemMessages::default_instance_ = new SystemMessages();
  MessageRecords::default_instance_ = new MessageRecords();
  FriendMessages::default_instance_->InitAsDefaultInstance();
  FriendsMessages::default_instance_->InitAsDefaultInstance();
  SystemMessages::default_instance_->InitAsDefaultInstance();
  MessageRecords::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ClientLocalData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ClientLocalData_2eproto {
  StaticDescriptorInitializer_ClientLocalData_2eproto() {
    protobuf_AddDesc_ClientLocalData_2eproto();
  }
} static_descriptor_initializer_ClientLocalData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FriendMessages::kGuidFieldNumber;
const int FriendMessages::kMessagesFieldNumber;
#endif  // !_MSC_VER

FriendMessages::FriendMessages()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendMessages::InitAsDefaultInstance() {
}

FriendMessages::FriendMessages(const FriendMessages& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendMessages::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendMessages::~FriendMessages() {
  SharedDtor();
}

void FriendMessages::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendMessages::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendMessages::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendMessages_descriptor_;
}

const FriendMessages& FriendMessages::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientLocalData_2eproto();
  return *default_instance_;
}

FriendMessages* FriendMessages::default_instance_ = NULL;

FriendMessages* FriendMessages::New() const {
  return new FriendMessages;
}

void FriendMessages::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
  }
  messages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool FriendMessages::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_messages;
        break;
      }

      // repeated .Packet.FriendMessageInfo messages = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_messages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_messages;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void FriendMessages::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // repeated .Packet.FriendMessageInfo messages = 2;
  for (int i = 0; i < this->messages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->messages(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendMessages::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // repeated .Packet.FriendMessageInfo messages = 2;
  for (int i = 0; i < this->messages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->messages(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendMessages::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

  }
  // repeated .Packet.FriendMessageInfo messages = 2;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messages(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendMessages::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendMessages* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendMessages*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void FriendMessages::MergeFrom(const FriendMessages& from) {
  GOOGLE_CHECK_NE(&from, this);
  messages_.MergeFrom(from.messages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void FriendMessages::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void FriendMessages::CopyFrom(const FriendMessages& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool FriendMessages::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < messages_size(); i++) {
    if (!this->messages(i).IsInitialized()) return false;
  }
  return true;
}

void FriendMessages::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  for (int i = 0; i < messages_size(); i++) {
    this->mutable_messages(i)->SetInitialized();
  }
  return;
}

void FriendMessages::Swap(FriendMessages* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    messages_.Swap(&other->messages_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata FriendMessages::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendMessages_descriptor_;
  metadata.reflection = FriendMessages_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendsMessages::kInfoFieldNumber;
#endif  // !_MSC_VER

FriendsMessages::FriendsMessages()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendsMessages::InitAsDefaultInstance() {
}

FriendsMessages::FriendsMessages(const FriendsMessages& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendsMessages::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendsMessages::~FriendsMessages() {
  SharedDtor();
}

void FriendsMessages::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendsMessages::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendsMessages::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendsMessages_descriptor_;
}

const FriendsMessages& FriendsMessages::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientLocalData_2eproto();
  return *default_instance_;
}

FriendsMessages* FriendsMessages::default_instance_ = NULL;

FriendsMessages* FriendsMessages::New() const {
  return new FriendsMessages;
}

void FriendsMessages::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool FriendsMessages::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.FriendMessages info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void FriendsMessages::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.FriendMessages info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendsMessages::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.FriendMessages info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendsMessages::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.FriendMessages info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendsMessages::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendsMessages* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendsMessages*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void FriendsMessages::MergeFrom(const FriendsMessages& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void FriendsMessages::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void FriendsMessages::CopyFrom(const FriendsMessages& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool FriendsMessages::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void FriendsMessages::SetInitialized() {

  for (int i = 0; i < info_size(); i++) {
    this->mutable_info(i)->SetInitialized();
  }
  return;
}

void FriendsMessages::Swap(FriendsMessages* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata FriendsMessages::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendsMessages_descriptor_;
  metadata.reflection = FriendsMessages_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SystemMessages::kInfoFieldNumber;
#endif  // !_MSC_VER

SystemMessages::SystemMessages()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SystemMessages::InitAsDefaultInstance() {
}

SystemMessages::SystemMessages(const SystemMessages& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SystemMessages::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemMessages::~SystemMessages() {
  SharedDtor();
}

void SystemMessages::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SystemMessages::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemMessages::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemMessages_descriptor_;
}

const SystemMessages& SystemMessages::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientLocalData_2eproto();
  return *default_instance_;
}

SystemMessages* SystemMessages::default_instance_ = NULL;

SystemMessages* SystemMessages::New() const {
  return new SystemMessages;
}

void SystemMessages::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SystemMessages::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.FriendMessageInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SystemMessages::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.FriendMessageInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SystemMessages::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.FriendMessageInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SystemMessages::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.FriendMessageInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemMessages::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SystemMessages* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SystemMessages*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SystemMessages::MergeFrom(const SystemMessages& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SystemMessages::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SystemMessages::CopyFrom(const SystemMessages& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SystemMessages::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void SystemMessages::SetInitialized() {

  for (int i = 0; i < info_size(); i++) {
    this->mutable_info(i)->SetInitialized();
  }
  return;
}

void SystemMessages::Swap(SystemMessages* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SystemMessages::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemMessages_descriptor_;
  metadata.reflection = SystemMessages_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageRecords::kSystemFieldNumber;
const int MessageRecords::kFriendsFieldNumber;
#endif  // !_MSC_VER

MessageRecords::MessageRecords()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MessageRecords::InitAsDefaultInstance() {
  system_ = const_cast< ::Packet::SystemMessages*>(&::Packet::SystemMessages::default_instance());
  friends_ = const_cast< ::Packet::FriendsMessages*>(&::Packet::FriendsMessages::default_instance());
}

MessageRecords::MessageRecords(const MessageRecords& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MessageRecords::SharedCtor() {
  _cached_size_ = 0;
  system_ = NULL;
  friends_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageRecords::~MessageRecords() {
  SharedDtor();
}

void MessageRecords::SharedDtor() {
  if (this != default_instance_) {
    delete system_;
    delete friends_;
  }
}

void MessageRecords::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageRecords::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageRecords_descriptor_;
}

const MessageRecords& MessageRecords::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientLocalData_2eproto();
  return *default_instance_;
}

MessageRecords* MessageRecords::default_instance_ = NULL;

MessageRecords* MessageRecords::New() const {
  return new MessageRecords;
}

void MessageRecords::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_system()) {
      if (system_ != NULL) system_->::Packet::SystemMessages::Clear();
    }
    if (has_friends()) {
      if (friends_ != NULL) friends_->::Packet::FriendsMessages::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool MessageRecords::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.SystemMessages system = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_system()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friends;
        break;
      }

      // required .Packet.FriendsMessages friends = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void MessageRecords::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.SystemMessages system = 1;
  if (has_system()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->system(), output);
  }

  // required .Packet.FriendsMessages friends = 2;
  if (has_friends()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->friends(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MessageRecords::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.SystemMessages system = 1;
  if (has_system()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->system(), target);
  }

  // required .Packet.FriendsMessages friends = 2;
  if (has_friends()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->friends(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MessageRecords::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.SystemMessages system = 1;
    if (has_system()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->system());
    }

    // required .Packet.FriendsMessages friends = 2;
    if (has_friends()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friends());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageRecords::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageRecords* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageRecords*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void MessageRecords::MergeFrom(const MessageRecords& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_system()) {
      mutable_system()->::Packet::SystemMessages::MergeFrom(from.system());
    }
    if (from.has_friends()) {
      mutable_friends()->::Packet::FriendsMessages::MergeFrom(from.friends());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void MessageRecords::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void MessageRecords::CopyFrom(const MessageRecords& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool MessageRecords::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_system()) {
    if (!this->system().IsInitialized()) return false;
  }
  if (has_friends()) {
    if (!this->friends().IsInitialized()) return false;
  }
  return true;
}

void MessageRecords::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  if (has_system()) {
    this->mutable_system()->SetInitialized();
  }
  if (has_friends()) {
    this->mutable_friends()->SetInitialized();
  }
  return;
}

void MessageRecords::Swap(MessageRecords* other) {
  if (other != this) {
    std::swap(system_, other->system_);
    std::swap(friends_, other->friends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata MessageRecords::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageRecords_descriptor_;
  metadata.reflection = MessageRecords_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

// @@protoc_insertion_point(global_scope)
