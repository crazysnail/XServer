// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MissionPacket.proto

#ifndef PROTOBUF_MissionPacket_2eproto__INCLUDED
#define PROTOBUF_MissionPacket_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "AllPacketEnum.pb.h"
#include "AllConfigEnum.pb.h"
#include "ProtoBufOption.pb.h"
#include "MissionConfig.pb.h"
// @@protoc_insertion_point(includes)

namespace Packet {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MissionPacket_2eproto();
void protobuf_AssignDesc_MissionPacket_2eproto();
void protobuf_ShutdownFile_MissionPacket_2eproto();

class Mission;
class MissionUpdateReply;
class MissionListReply;
class SyncMission;
class SyncMissionRequest;
class SyncMissionReply;
class ClickChatMissionReq;
class ClickChatMissionReply;

// ===================================================================

class Mission : public ::google::protobuf::Message {
 public:
  Mission();
  virtual ~Mission();

  Mission(const Mission& from);

  inline Mission& operator=(const Mission& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Mission& default_instance();

  void Swap(Mission* other);

  // implements Message ----------------------------------------------

  Mission* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Mission& from);
  void MergeFrom(const Mission& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // required fixed64 player_guid = 2;
  inline bool has_player_guid() const;
  inline void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 2;
  inline ::google::protobuf::uint64 player_guid() const;
  inline void set_player_guid(::google::protobuf::uint64 value);

  // required .Packet.MissionState state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::Packet::MissionState state() const;
  inline void set_state(::Packet::MissionState value);

  // repeated int32 param = 4;
  inline int param_size() const;
  inline void clear_param();
  static const int kParamFieldNumber = 4;
  inline ::google::protobuf::int32 param(int index) const;
  inline void set_param(int index, ::google::protobuf::int32 value);
  inline void add_param(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      param() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_param();

  // @@protoc_insertion_point(class_scope:Packet.Mission)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_player_guid();
  inline void clear_has_player_guid();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::google::protobuf::uint64 player_guid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > param_;
  int state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_MissionPacket_2eproto();
  friend void protobuf_AssignDesc_MissionPacket_2eproto();
  friend void protobuf_ShutdownFile_MissionPacket_2eproto();

  void InitAsDefaultInstance();
  static Mission* default_instance_;
};
// -------------------------------------------------------------------

class MissionUpdateReply : public ::google::protobuf::Message {
 public:
  MissionUpdateReply();
  virtual ~MissionUpdateReply();

  MissionUpdateReply(const MissionUpdateReply& from);

  inline MissionUpdateReply& operator=(const MissionUpdateReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MissionUpdateReply& default_instance();

  void Swap(MissionUpdateReply* other);

  // implements Message ----------------------------------------------

  MissionUpdateReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MissionUpdateReply& from);
  void MergeFrom(const MissionUpdateReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Packet.Mission mission = 1;
  inline bool has_mission() const;
  inline void clear_mission();
  static const int kMissionFieldNumber = 1;
  inline const ::Packet::Mission& mission() const;
  inline ::Packet::Mission* mutable_mission();
  inline ::Packet::Mission* release_mission();
  inline void set_allocated_mission(::Packet::Mission* mission);

  // @@protoc_insertion_point(class_scope:Packet.MissionUpdateReply)
 private:
  inline void set_has_mission();
  inline void clear_has_mission();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Packet::Mission* mission_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_MissionPacket_2eproto();
  friend void protobuf_AssignDesc_MissionPacket_2eproto();
  friend void protobuf_ShutdownFile_MissionPacket_2eproto();

  void InitAsDefaultInstance();
  static MissionUpdateReply* default_instance_;
};
// -------------------------------------------------------------------

class MissionListReply : public ::google::protobuf::Message {
 public:
  MissionListReply();
  virtual ~MissionListReply();

  MissionListReply(const MissionListReply& from);

  inline MissionListReply& operator=(const MissionListReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MissionListReply& default_instance();

  void Swap(MissionListReply* other);

  // implements Message ----------------------------------------------

  MissionListReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MissionListReply& from);
  void MergeFrom(const MissionListReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Packet.Mission mission_list = 1;
  inline int mission_list_size() const;
  inline void clear_mission_list();
  static const int kMissionListFieldNumber = 1;
  inline const ::Packet::Mission& mission_list(int index) const;
  inline ::Packet::Mission* mutable_mission_list(int index);
  inline ::Packet::Mission* add_mission_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::Mission >&
      mission_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::Mission >*
      mutable_mission_list();

  // @@protoc_insertion_point(class_scope:Packet.MissionListReply)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::Mission > mission_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_MissionPacket_2eproto();
  friend void protobuf_AssignDesc_MissionPacket_2eproto();
  friend void protobuf_ShutdownFile_MissionPacket_2eproto();

  void InitAsDefaultInstance();
  static MissionListReply* default_instance_;
};
// -------------------------------------------------------------------

class SyncMission : public ::google::protobuf::Message {
 public:
  SyncMission();
  virtual ~SyncMission();

  SyncMission(const SyncMission& from);

  inline SyncMission& operator=(const SyncMission& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncMission& default_instance();

  void Swap(SyncMission* other);

  // implements Message ----------------------------------------------

  SyncMission* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncMission& from);
  void MergeFrom(const SyncMission& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 src_guid = 1;
  inline bool has_src_guid() const;
  inline void clear_src_guid();
  static const int kSrcGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 src_guid() const;
  inline void set_src_guid(::google::protobuf::uint64 value);

  // required .Config.MissionType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::Config::MissionType type() const;
  inline void set_type(::Config::MissionType value);

  // required int32 time_mark = 3;
  inline bool has_time_mark() const;
  inline void clear_time_mark();
  static const int kTimeMarkFieldNumber = 3;
  inline ::google::protobuf::int32 time_mark() const;
  inline void set_time_mark(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.SyncMission)
 private:
  inline void set_has_src_guid();
  inline void clear_has_src_guid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_time_mark();
  inline void clear_has_time_mark();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 src_guid_;
  int type_;
  ::google::protobuf::int32 time_mark_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_MissionPacket_2eproto();
  friend void protobuf_AssignDesc_MissionPacket_2eproto();
  friend void protobuf_ShutdownFile_MissionPacket_2eproto();

  void InitAsDefaultInstance();
  static SyncMission* default_instance_;
};
// -------------------------------------------------------------------

class SyncMissionRequest : public ::google::protobuf::Message {
 public:
  SyncMissionRequest();
  virtual ~SyncMissionRequest();

  SyncMissionRequest(const SyncMissionRequest& from);

  inline SyncMissionRequest& operator=(const SyncMissionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncMissionRequest& default_instance();

  void Swap(SyncMissionRequest* other);

  // implements Message ----------------------------------------------

  SyncMissionRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncMissionRequest& from);
  void MergeFrom(const SyncMissionRequest& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Packet.SyncMission snc_msg = 1;
  inline bool has_snc_msg() const;
  inline void clear_snc_msg();
  static const int kSncMsgFieldNumber = 1;
  inline const ::Packet::SyncMission& snc_msg() const;
  inline ::Packet::SyncMission* mutable_snc_msg();
  inline ::Packet::SyncMission* release_snc_msg();
  inline void set_allocated_snc_msg(::Packet::SyncMission* snc_msg);

  // required bool agree = 2;
  inline bool has_agree() const;
  inline void clear_agree();
  static const int kAgreeFieldNumber = 2;
  inline bool agree() const;
  inline void set_agree(bool value);

  // @@protoc_insertion_point(class_scope:Packet.SyncMissionRequest)
 private:
  inline void set_has_snc_msg();
  inline void clear_has_snc_msg();
  inline void set_has_agree();
  inline void clear_has_agree();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Packet::SyncMission* snc_msg_;
  bool agree_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_MissionPacket_2eproto();
  friend void protobuf_AssignDesc_MissionPacket_2eproto();
  friend void protobuf_ShutdownFile_MissionPacket_2eproto();

  void InitAsDefaultInstance();
  static SyncMissionRequest* default_instance_;
};
// -------------------------------------------------------------------

class SyncMissionReply : public ::google::protobuf::Message {
 public:
  SyncMissionReply();
  virtual ~SyncMissionReply();

  SyncMissionReply(const SyncMissionReply& from);

  inline SyncMissionReply& operator=(const SyncMissionReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncMissionReply& default_instance();

  void Swap(SyncMissionReply* other);

  // implements Message ----------------------------------------------

  SyncMissionReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncMissionReply& from);
  void MergeFrom(const SyncMissionReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Packet.SyncMission snc_msg = 1;
  inline bool has_snc_msg() const;
  inline void clear_snc_msg();
  static const int kSncMsgFieldNumber = 1;
  inline const ::Packet::SyncMission& snc_msg() const;
  inline ::Packet::SyncMission* mutable_snc_msg();
  inline ::Packet::SyncMission* release_snc_msg();
  inline void set_allocated_snc_msg(::Packet::SyncMission* snc_msg);

  // required bool agree = 2;
  inline bool has_agree() const;
  inline void clear_agree();
  static const int kAgreeFieldNumber = 2;
  inline bool agree() const;
  inline void set_agree(bool value);

  // @@protoc_insertion_point(class_scope:Packet.SyncMissionReply)
 private:
  inline void set_has_snc_msg();
  inline void clear_has_snc_msg();
  inline void set_has_agree();
  inline void clear_has_agree();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Packet::SyncMission* snc_msg_;
  bool agree_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_MissionPacket_2eproto();
  friend void protobuf_AssignDesc_MissionPacket_2eproto();
  friend void protobuf_ShutdownFile_MissionPacket_2eproto();

  void InitAsDefaultInstance();
  static SyncMissionReply* default_instance_;
};
// -------------------------------------------------------------------

class ClickChatMissionReq : public ::google::protobuf::Message {
 public:
  ClickChatMissionReq();
  virtual ~ClickChatMissionReq();

  ClickChatMissionReq(const ClickChatMissionReq& from);

  inline ClickChatMissionReq& operator=(const ClickChatMissionReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClickChatMissionReq& default_instance();

  void Swap(ClickChatMissionReq* other);

  // implements Message ----------------------------------------------

  ClickChatMissionReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClickChatMissionReq& from);
  void MergeFrom(const ClickChatMissionReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 srcplayer_guid = 1;
  inline bool has_srcplayer_guid() const;
  inline void clear_srcplayer_guid();
  static const int kSrcplayerGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 srcplayer_guid() const;
  inline void set_srcplayer_guid(::google::protobuf::uint64 value);

  // required int32 missionid = 2;
  inline bool has_missionid() const;
  inline void clear_missionid();
  static const int kMissionidFieldNumber = 2;
  inline ::google::protobuf::int32 missionid() const;
  inline void set_missionid(::google::protobuf::int32 value);

  // required string t_desc = 3;
  inline bool has_t_desc() const;
  inline void clear_t_desc();
  static const int kTDescFieldNumber = 3;
  inline const ::std::string& t_desc() const;
  inline void set_t_desc(const ::std::string& value);
  inline void set_t_desc(const char* value);
  inline void set_t_desc(const char* value, size_t size);
  inline ::std::string* mutable_t_desc();
  inline ::std::string* release_t_desc();
  inline void set_allocated_t_desc(::std::string* t_desc);

  // required string s_desc = 4;
  inline bool has_s_desc() const;
  inline void clear_s_desc();
  static const int kSDescFieldNumber = 4;
  inline const ::std::string& s_desc() const;
  inline void set_s_desc(const ::std::string& value);
  inline void set_s_desc(const char* value);
  inline void set_s_desc(const char* value, size_t size);
  inline ::std::string* mutable_s_desc();
  inline ::std::string* release_s_desc();
  inline void set_allocated_s_desc(::std::string* s_desc);

  // required string d_desc = 5;
  inline bool has_d_desc() const;
  inline void clear_d_desc();
  static const int kDDescFieldNumber = 5;
  inline const ::std::string& d_desc() const;
  inline void set_d_desc(const ::std::string& value);
  inline void set_d_desc(const char* value);
  inline void set_d_desc(const char* value, size_t size);
  inline ::std::string* mutable_d_desc();
  inline ::std::string* release_d_desc();
  inline void set_allocated_d_desc(::std::string* d_desc);

  // @@protoc_insertion_point(class_scope:Packet.ClickChatMissionReq)
 private:
  inline void set_has_srcplayer_guid();
  inline void clear_has_srcplayer_guid();
  inline void set_has_missionid();
  inline void clear_has_missionid();
  inline void set_has_t_desc();
  inline void clear_has_t_desc();
  inline void set_has_s_desc();
  inline void clear_has_s_desc();
  inline void set_has_d_desc();
  inline void clear_has_d_desc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 srcplayer_guid_;
  ::std::string* t_desc_;
  ::std::string* s_desc_;
  ::std::string* d_desc_;
  ::google::protobuf::int32 missionid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_MissionPacket_2eproto();
  friend void protobuf_AssignDesc_MissionPacket_2eproto();
  friend void protobuf_ShutdownFile_MissionPacket_2eproto();

  void InitAsDefaultInstance();
  static ClickChatMissionReq* default_instance_;
};
// -------------------------------------------------------------------

class ClickChatMissionReply : public ::google::protobuf::Message {
 public:
  ClickChatMissionReply();
  virtual ~ClickChatMissionReply();

  ClickChatMissionReply(const ClickChatMissionReply& from);

  inline ClickChatMissionReply& operator=(const ClickChatMissionReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClickChatMissionReply& default_instance();

  void Swap(ClickChatMissionReply* other);

  // implements Message ----------------------------------------------

  ClickChatMissionReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClickChatMissionReply& from);
  void MergeFrom(const ClickChatMissionReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 missionid = 1;
  inline bool has_missionid() const;
  inline void clear_missionid();
  static const int kMissionidFieldNumber = 1;
  inline ::google::protobuf::int32 missionid() const;
  inline void set_missionid(::google::protobuf::int32 value);

  // required string t_desc = 3;
  inline bool has_t_desc() const;
  inline void clear_t_desc();
  static const int kTDescFieldNumber = 3;
  inline const ::std::string& t_desc() const;
  inline void set_t_desc(const ::std::string& value);
  inline void set_t_desc(const char* value);
  inline void set_t_desc(const char* value, size_t size);
  inline ::std::string* mutable_t_desc();
  inline ::std::string* release_t_desc();
  inline void set_allocated_t_desc(::std::string* t_desc);

  // required string s_desc = 4;
  inline bool has_s_desc() const;
  inline void clear_s_desc();
  static const int kSDescFieldNumber = 4;
  inline const ::std::string& s_desc() const;
  inline void set_s_desc(const ::std::string& value);
  inline void set_s_desc(const char* value);
  inline void set_s_desc(const char* value, size_t size);
  inline ::std::string* mutable_s_desc();
  inline ::std::string* release_s_desc();
  inline void set_allocated_s_desc(::std::string* s_desc);

  // required string d_desc = 5;
  inline bool has_d_desc() const;
  inline void clear_d_desc();
  static const int kDDescFieldNumber = 5;
  inline const ::std::string& d_desc() const;
  inline void set_d_desc(const ::std::string& value);
  inline void set_d_desc(const char* value);
  inline void set_d_desc(const char* value, size_t size);
  inline ::std::string* mutable_d_desc();
  inline ::std::string* release_d_desc();
  inline void set_allocated_d_desc(::std::string* d_desc);

  // @@protoc_insertion_point(class_scope:Packet.ClickChatMissionReply)
 private:
  inline void set_has_missionid();
  inline void clear_has_missionid();
  inline void set_has_t_desc();
  inline void clear_has_t_desc();
  inline void set_has_s_desc();
  inline void clear_has_s_desc();
  inline void set_has_d_desc();
  inline void clear_has_d_desc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* t_desc_;
  ::std::string* s_desc_;
  ::std::string* d_desc_;
  ::google::protobuf::int32 missionid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_MissionPacket_2eproto();
  friend void protobuf_AssignDesc_MissionPacket_2eproto();
  friend void protobuf_ShutdownFile_MissionPacket_2eproto();

  void InitAsDefaultInstance();
  static ClickChatMissionReply* default_instance_;
};
// ===================================================================


// ===================================================================

// Mission

// required fixed64 guid = 1;
inline bool Mission::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Mission::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Mission::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Mission::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 Mission::guid() const {
  return guid_;
}
inline void Mission::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// required fixed64 player_guid = 2;
inline bool Mission::has_player_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Mission::set_has_player_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Mission::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Mission::clear_player_guid() {
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 Mission::player_guid() const {
  return player_guid_;
}
inline void Mission::set_player_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_player_guid();
  player_guid_ = value;
}

// required .Packet.MissionState state = 3;
inline bool Mission::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Mission::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Mission::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Mission::clear_state() {
  state_ = 0;
  clear_has_state();
  SetDirty();
}
inline ::Packet::MissionState Mission::state() const {
  return static_cast< ::Packet::MissionState >(state_);
}
inline void Mission::set_state(::Packet::MissionState value) {
  assert(::Packet::MissionState_IsValid(value));
  SetDirty();
  set_has_state();
  state_ = value;
}

// repeated int32 param = 4;
inline int Mission::param_size() const {
  return param_.size();
}
inline void Mission::clear_param() {
  param_.Clear();
  SetDirty();
}
inline ::google::protobuf::int32 Mission::param(int index) const {
  return param_.Get(index);
}
inline void Mission::set_param(int index, ::google::protobuf::int32 value) {
  SetDirty();
  param_.Set(index, value);
}
inline void Mission::add_param(::google::protobuf::int32 value) {
  SetDirty();
  param_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Mission::param() const {
  return param_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Mission::mutable_param() {
  SetDirty();
  return &param_;
}

// -------------------------------------------------------------------

// MissionUpdateReply

// required .Packet.Mission mission = 1;
inline bool MissionUpdateReply::has_mission() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MissionUpdateReply::set_has_mission() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MissionUpdateReply::clear_has_mission() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MissionUpdateReply::clear_mission() {
  if (mission_ != NULL) mission_->::Packet::Mission::Clear();
  clear_has_mission();
  SetDirty();
}
inline const ::Packet::Mission& MissionUpdateReply::mission() const {
  return mission_ != NULL ? *mission_ : *default_instance_->mission_;
}
inline ::Packet::Mission* MissionUpdateReply::mutable_mission() {
  SetDirty();
  set_has_mission();
  if (mission_ == NULL) mission_ = new ::Packet::Mission;
  return mission_;
}
inline ::Packet::Mission* MissionUpdateReply::release_mission() {
  SetDirty();
  clear_has_mission();
  ::Packet::Mission* temp = mission_;
  mission_ = NULL;
  return temp;
}
inline void MissionUpdateReply::set_allocated_mission(::Packet::Mission* mission) {
  SetDirty();
  delete mission_;
  mission_ = mission;
  if (mission) {
    set_has_mission();
  } else {
    clear_has_mission();
  }
}

// -------------------------------------------------------------------

// MissionListReply

// repeated .Packet.Mission mission_list = 1;
inline int MissionListReply::mission_list_size() const {
  return mission_list_.size();
}
inline void MissionListReply::clear_mission_list() {
  mission_list_.Clear();
  SetDirty();
}
inline const ::Packet::Mission& MissionListReply::mission_list(int index) const {
  return mission_list_.Get(index);
}
inline ::Packet::Mission* MissionListReply::mutable_mission_list(int index) {
  SetDirty();
  return mission_list_.Mutable(index);
}
inline ::Packet::Mission* MissionListReply::add_mission_list() {
  SetDirty();
  return mission_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::Mission >&
MissionListReply::mission_list() const {
  return mission_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::Mission >*
MissionListReply::mutable_mission_list() {
  SetDirty();
  return &mission_list_;
}

// -------------------------------------------------------------------

// SyncMission

// required fixed64 src_guid = 1;
inline bool SyncMission::has_src_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncMission::set_has_src_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncMission::clear_has_src_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncMission::clear_src_guid() {
  src_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_src_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 SyncMission::src_guid() const {
  return src_guid_;
}
inline void SyncMission::set_src_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_src_guid();
  src_guid_ = value;
}

// required .Config.MissionType type = 2;
inline bool SyncMission::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncMission::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncMission::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncMission::clear_type() {
  type_ = -1;
  clear_has_type();
  SetDirty();
}
inline ::Config::MissionType SyncMission::type() const {
  return static_cast< ::Config::MissionType >(type_);
}
inline void SyncMission::set_type(::Config::MissionType value) {
  assert(::Config::MissionType_IsValid(value));
  SetDirty();
  set_has_type();
  type_ = value;
}

// required int32 time_mark = 3;
inline bool SyncMission::has_time_mark() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SyncMission::set_has_time_mark() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SyncMission::clear_has_time_mark() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SyncMission::clear_time_mark() {
  time_mark_ = 0;
  clear_has_time_mark();
  SetDirty();
}
inline ::google::protobuf::int32 SyncMission::time_mark() const {
  return time_mark_;
}
inline void SyncMission::set_time_mark(::google::protobuf::int32 value) {
  SetDirty();
  set_has_time_mark();
  time_mark_ = value;
}

// -------------------------------------------------------------------

// SyncMissionRequest

// required .Packet.SyncMission snc_msg = 1;
inline bool SyncMissionRequest::has_snc_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncMissionRequest::set_has_snc_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncMissionRequest::clear_has_snc_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncMissionRequest::clear_snc_msg() {
  if (snc_msg_ != NULL) snc_msg_->::Packet::SyncMission::Clear();
  clear_has_snc_msg();
  SetDirty();
}
inline const ::Packet::SyncMission& SyncMissionRequest::snc_msg() const {
  return snc_msg_ != NULL ? *snc_msg_ : *default_instance_->snc_msg_;
}
inline ::Packet::SyncMission* SyncMissionRequest::mutable_snc_msg() {
  SetDirty();
  set_has_snc_msg();
  if (snc_msg_ == NULL) snc_msg_ = new ::Packet::SyncMission;
  return snc_msg_;
}
inline ::Packet::SyncMission* SyncMissionRequest::release_snc_msg() {
  SetDirty();
  clear_has_snc_msg();
  ::Packet::SyncMission* temp = snc_msg_;
  snc_msg_ = NULL;
  return temp;
}
inline void SyncMissionRequest::set_allocated_snc_msg(::Packet::SyncMission* snc_msg) {
  SetDirty();
  delete snc_msg_;
  snc_msg_ = snc_msg;
  if (snc_msg) {
    set_has_snc_msg();
  } else {
    clear_has_snc_msg();
  }
}

// required bool agree = 2;
inline bool SyncMissionRequest::has_agree() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncMissionRequest::set_has_agree() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncMissionRequest::clear_has_agree() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncMissionRequest::clear_agree() {
  agree_ = false;
  clear_has_agree();
  SetDirty();
}
inline bool SyncMissionRequest::agree() const {
  return agree_;
}
inline void SyncMissionRequest::set_agree(bool value) {
  SetDirty();
  set_has_agree();
  agree_ = value;
}

// -------------------------------------------------------------------

// SyncMissionReply

// required .Packet.SyncMission snc_msg = 1;
inline bool SyncMissionReply::has_snc_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncMissionReply::set_has_snc_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncMissionReply::clear_has_snc_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncMissionReply::clear_snc_msg() {
  if (snc_msg_ != NULL) snc_msg_->::Packet::SyncMission::Clear();
  clear_has_snc_msg();
  SetDirty();
}
inline const ::Packet::SyncMission& SyncMissionReply::snc_msg() const {
  return snc_msg_ != NULL ? *snc_msg_ : *default_instance_->snc_msg_;
}
inline ::Packet::SyncMission* SyncMissionReply::mutable_snc_msg() {
  SetDirty();
  set_has_snc_msg();
  if (snc_msg_ == NULL) snc_msg_ = new ::Packet::SyncMission;
  return snc_msg_;
}
inline ::Packet::SyncMission* SyncMissionReply::release_snc_msg() {
  SetDirty();
  clear_has_snc_msg();
  ::Packet::SyncMission* temp = snc_msg_;
  snc_msg_ = NULL;
  return temp;
}
inline void SyncMissionReply::set_allocated_snc_msg(::Packet::SyncMission* snc_msg) {
  SetDirty();
  delete snc_msg_;
  snc_msg_ = snc_msg;
  if (snc_msg) {
    set_has_snc_msg();
  } else {
    clear_has_snc_msg();
  }
}

// required bool agree = 2;
inline bool SyncMissionReply::has_agree() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncMissionReply::set_has_agree() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncMissionReply::clear_has_agree() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncMissionReply::clear_agree() {
  agree_ = false;
  clear_has_agree();
  SetDirty();
}
inline bool SyncMissionReply::agree() const {
  return agree_;
}
inline void SyncMissionReply::set_agree(bool value) {
  SetDirty();
  set_has_agree();
  agree_ = value;
}

// -------------------------------------------------------------------

// ClickChatMissionReq

// required fixed64 srcplayer_guid = 1;
inline bool ClickChatMissionReq::has_srcplayer_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClickChatMissionReq::set_has_srcplayer_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClickChatMissionReq::clear_has_srcplayer_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClickChatMissionReq::clear_srcplayer_guid() {
  srcplayer_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_srcplayer_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 ClickChatMissionReq::srcplayer_guid() const {
  return srcplayer_guid_;
}
inline void ClickChatMissionReq::set_srcplayer_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_srcplayer_guid();
  srcplayer_guid_ = value;
}

// required int32 missionid = 2;
inline bool ClickChatMissionReq::has_missionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClickChatMissionReq::set_has_missionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClickChatMissionReq::clear_has_missionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClickChatMissionReq::clear_missionid() {
  missionid_ = 0;
  clear_has_missionid();
  SetDirty();
}
inline ::google::protobuf::int32 ClickChatMissionReq::missionid() const {
  return missionid_;
}
inline void ClickChatMissionReq::set_missionid(::google::protobuf::int32 value) {
  SetDirty();
  set_has_missionid();
  missionid_ = value;
}

// required string t_desc = 3;
inline bool ClickChatMissionReq::has_t_desc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClickChatMissionReq::set_has_t_desc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClickChatMissionReq::clear_has_t_desc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClickChatMissionReq::clear_t_desc() {
  if (t_desc_ != &::google::protobuf::internal::kEmptyString) {
    t_desc_->clear();
  }
  clear_has_t_desc();
  SetDirty();
}
inline const ::std::string& ClickChatMissionReq::t_desc() const {
  return *t_desc_;
}
inline void ClickChatMissionReq::set_t_desc(const ::std::string& value) {
  SetDirty();
  set_has_t_desc();
  if (t_desc_ == &::google::protobuf::internal::kEmptyString) {
    t_desc_ = new ::std::string;
  }
  t_desc_->assign(value);
}
inline void ClickChatMissionReq::set_t_desc(const char* value) {
  SetDirty();
  set_has_t_desc();
  if (t_desc_ == &::google::protobuf::internal::kEmptyString) {
    t_desc_ = new ::std::string;
  }
  t_desc_->assign(value);
}
inline void ClickChatMissionReq::set_t_desc(const char* value, size_t size) {
  SetDirty();
  set_has_t_desc();
  if (t_desc_ == &::google::protobuf::internal::kEmptyString) {
    t_desc_ = new ::std::string;
  }
  t_desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClickChatMissionReq::mutable_t_desc() {
  SetDirty();
  set_has_t_desc();
  if (t_desc_ == &::google::protobuf::internal::kEmptyString) {
    t_desc_ = new ::std::string;
  }
  return t_desc_;
}
inline ::std::string* ClickChatMissionReq::release_t_desc() {
  SetDirty();
  clear_has_t_desc();
  if (t_desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = t_desc_;
    t_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClickChatMissionReq::set_allocated_t_desc(::std::string* t_desc) {
  SetDirty();
  if (t_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete t_desc_;
  }
  if (t_desc) {
    set_has_t_desc();
    t_desc_ = t_desc;
  } else {
    clear_has_t_desc();
    t_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string s_desc = 4;
inline bool ClickChatMissionReq::has_s_desc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClickChatMissionReq::set_has_s_desc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClickChatMissionReq::clear_has_s_desc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClickChatMissionReq::clear_s_desc() {
  if (s_desc_ != &::google::protobuf::internal::kEmptyString) {
    s_desc_->clear();
  }
  clear_has_s_desc();
  SetDirty();
}
inline const ::std::string& ClickChatMissionReq::s_desc() const {
  return *s_desc_;
}
inline void ClickChatMissionReq::set_s_desc(const ::std::string& value) {
  SetDirty();
  set_has_s_desc();
  if (s_desc_ == &::google::protobuf::internal::kEmptyString) {
    s_desc_ = new ::std::string;
  }
  s_desc_->assign(value);
}
inline void ClickChatMissionReq::set_s_desc(const char* value) {
  SetDirty();
  set_has_s_desc();
  if (s_desc_ == &::google::protobuf::internal::kEmptyString) {
    s_desc_ = new ::std::string;
  }
  s_desc_->assign(value);
}
inline void ClickChatMissionReq::set_s_desc(const char* value, size_t size) {
  SetDirty();
  set_has_s_desc();
  if (s_desc_ == &::google::protobuf::internal::kEmptyString) {
    s_desc_ = new ::std::string;
  }
  s_desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClickChatMissionReq::mutable_s_desc() {
  SetDirty();
  set_has_s_desc();
  if (s_desc_ == &::google::protobuf::internal::kEmptyString) {
    s_desc_ = new ::std::string;
  }
  return s_desc_;
}
inline ::std::string* ClickChatMissionReq::release_s_desc() {
  SetDirty();
  clear_has_s_desc();
  if (s_desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = s_desc_;
    s_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClickChatMissionReq::set_allocated_s_desc(::std::string* s_desc) {
  SetDirty();
  if (s_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete s_desc_;
  }
  if (s_desc) {
    set_has_s_desc();
    s_desc_ = s_desc;
  } else {
    clear_has_s_desc();
    s_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string d_desc = 5;
inline bool ClickChatMissionReq::has_d_desc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClickChatMissionReq::set_has_d_desc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClickChatMissionReq::clear_has_d_desc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClickChatMissionReq::clear_d_desc() {
  if (d_desc_ != &::google::protobuf::internal::kEmptyString) {
    d_desc_->clear();
  }
  clear_has_d_desc();
  SetDirty();
}
inline const ::std::string& ClickChatMissionReq::d_desc() const {
  return *d_desc_;
}
inline void ClickChatMissionReq::set_d_desc(const ::std::string& value) {
  SetDirty();
  set_has_d_desc();
  if (d_desc_ == &::google::protobuf::internal::kEmptyString) {
    d_desc_ = new ::std::string;
  }
  d_desc_->assign(value);
}
inline void ClickChatMissionReq::set_d_desc(const char* value) {
  SetDirty();
  set_has_d_desc();
  if (d_desc_ == &::google::protobuf::internal::kEmptyString) {
    d_desc_ = new ::std::string;
  }
  d_desc_->assign(value);
}
inline void ClickChatMissionReq::set_d_desc(const char* value, size_t size) {
  SetDirty();
  set_has_d_desc();
  if (d_desc_ == &::google::protobuf::internal::kEmptyString) {
    d_desc_ = new ::std::string;
  }
  d_desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClickChatMissionReq::mutable_d_desc() {
  SetDirty();
  set_has_d_desc();
  if (d_desc_ == &::google::protobuf::internal::kEmptyString) {
    d_desc_ = new ::std::string;
  }
  return d_desc_;
}
inline ::std::string* ClickChatMissionReq::release_d_desc() {
  SetDirty();
  clear_has_d_desc();
  if (d_desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = d_desc_;
    d_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClickChatMissionReq::set_allocated_d_desc(::std::string* d_desc) {
  SetDirty();
  if (d_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete d_desc_;
  }
  if (d_desc) {
    set_has_d_desc();
    d_desc_ = d_desc;
  } else {
    clear_has_d_desc();
    d_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ClickChatMissionReply

// required int32 missionid = 1;
inline bool ClickChatMissionReply::has_missionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClickChatMissionReply::set_has_missionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClickChatMissionReply::clear_has_missionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClickChatMissionReply::clear_missionid() {
  missionid_ = 0;
  clear_has_missionid();
  SetDirty();
}
inline ::google::protobuf::int32 ClickChatMissionReply::missionid() const {
  return missionid_;
}
inline void ClickChatMissionReply::set_missionid(::google::protobuf::int32 value) {
  SetDirty();
  set_has_missionid();
  missionid_ = value;
}

// required string t_desc = 3;
inline bool ClickChatMissionReply::has_t_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClickChatMissionReply::set_has_t_desc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClickChatMissionReply::clear_has_t_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClickChatMissionReply::clear_t_desc() {
  if (t_desc_ != &::google::protobuf::internal::kEmptyString) {
    t_desc_->clear();
  }
  clear_has_t_desc();
  SetDirty();
}
inline const ::std::string& ClickChatMissionReply::t_desc() const {
  return *t_desc_;
}
inline void ClickChatMissionReply::set_t_desc(const ::std::string& value) {
  SetDirty();
  set_has_t_desc();
  if (t_desc_ == &::google::protobuf::internal::kEmptyString) {
    t_desc_ = new ::std::string;
  }
  t_desc_->assign(value);
}
inline void ClickChatMissionReply::set_t_desc(const char* value) {
  SetDirty();
  set_has_t_desc();
  if (t_desc_ == &::google::protobuf::internal::kEmptyString) {
    t_desc_ = new ::std::string;
  }
  t_desc_->assign(value);
}
inline void ClickChatMissionReply::set_t_desc(const char* value, size_t size) {
  SetDirty();
  set_has_t_desc();
  if (t_desc_ == &::google::protobuf::internal::kEmptyString) {
    t_desc_ = new ::std::string;
  }
  t_desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClickChatMissionReply::mutable_t_desc() {
  SetDirty();
  set_has_t_desc();
  if (t_desc_ == &::google::protobuf::internal::kEmptyString) {
    t_desc_ = new ::std::string;
  }
  return t_desc_;
}
inline ::std::string* ClickChatMissionReply::release_t_desc() {
  SetDirty();
  clear_has_t_desc();
  if (t_desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = t_desc_;
    t_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClickChatMissionReply::set_allocated_t_desc(::std::string* t_desc) {
  SetDirty();
  if (t_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete t_desc_;
  }
  if (t_desc) {
    set_has_t_desc();
    t_desc_ = t_desc;
  } else {
    clear_has_t_desc();
    t_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string s_desc = 4;
inline bool ClickChatMissionReply::has_s_desc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClickChatMissionReply::set_has_s_desc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClickChatMissionReply::clear_has_s_desc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClickChatMissionReply::clear_s_desc() {
  if (s_desc_ != &::google::protobuf::internal::kEmptyString) {
    s_desc_->clear();
  }
  clear_has_s_desc();
  SetDirty();
}
inline const ::std::string& ClickChatMissionReply::s_desc() const {
  return *s_desc_;
}
inline void ClickChatMissionReply::set_s_desc(const ::std::string& value) {
  SetDirty();
  set_has_s_desc();
  if (s_desc_ == &::google::protobuf::internal::kEmptyString) {
    s_desc_ = new ::std::string;
  }
  s_desc_->assign(value);
}
inline void ClickChatMissionReply::set_s_desc(const char* value) {
  SetDirty();
  set_has_s_desc();
  if (s_desc_ == &::google::protobuf::internal::kEmptyString) {
    s_desc_ = new ::std::string;
  }
  s_desc_->assign(value);
}
inline void ClickChatMissionReply::set_s_desc(const char* value, size_t size) {
  SetDirty();
  set_has_s_desc();
  if (s_desc_ == &::google::protobuf::internal::kEmptyString) {
    s_desc_ = new ::std::string;
  }
  s_desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClickChatMissionReply::mutable_s_desc() {
  SetDirty();
  set_has_s_desc();
  if (s_desc_ == &::google::protobuf::internal::kEmptyString) {
    s_desc_ = new ::std::string;
  }
  return s_desc_;
}
inline ::std::string* ClickChatMissionReply::release_s_desc() {
  SetDirty();
  clear_has_s_desc();
  if (s_desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = s_desc_;
    s_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClickChatMissionReply::set_allocated_s_desc(::std::string* s_desc) {
  SetDirty();
  if (s_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete s_desc_;
  }
  if (s_desc) {
    set_has_s_desc();
    s_desc_ = s_desc;
  } else {
    clear_has_s_desc();
    s_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string d_desc = 5;
inline bool ClickChatMissionReply::has_d_desc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClickChatMissionReply::set_has_d_desc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClickChatMissionReply::clear_has_d_desc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClickChatMissionReply::clear_d_desc() {
  if (d_desc_ != &::google::protobuf::internal::kEmptyString) {
    d_desc_->clear();
  }
  clear_has_d_desc();
  SetDirty();
}
inline const ::std::string& ClickChatMissionReply::d_desc() const {
  return *d_desc_;
}
inline void ClickChatMissionReply::set_d_desc(const ::std::string& value) {
  SetDirty();
  set_has_d_desc();
  if (d_desc_ == &::google::protobuf::internal::kEmptyString) {
    d_desc_ = new ::std::string;
  }
  d_desc_->assign(value);
}
inline void ClickChatMissionReply::set_d_desc(const char* value) {
  SetDirty();
  set_has_d_desc();
  if (d_desc_ == &::google::protobuf::internal::kEmptyString) {
    d_desc_ = new ::std::string;
  }
  d_desc_->assign(value);
}
inline void ClickChatMissionReply::set_d_desc(const char* value, size_t size) {
  SetDirty();
  set_has_d_desc();
  if (d_desc_ == &::google::protobuf::internal::kEmptyString) {
    d_desc_ = new ::std::string;
  }
  d_desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClickChatMissionReply::mutable_d_desc() {
  SetDirty();
  set_has_d_desc();
  if (d_desc_ == &::google::protobuf::internal::kEmptyString) {
    d_desc_ = new ::std::string;
  }
  return d_desc_;
}
inline ::std::string* ClickChatMissionReply::release_d_desc() {
  SetDirty();
  clear_has_d_desc();
  if (d_desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = d_desc_;
    d_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClickChatMissionReply::set_allocated_d_desc(::std::string* d_desc) {
  SetDirty();
  if (d_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete d_desc_;
  }
  if (d_desc) {
    set_has_d_desc();
    d_desc_ = d_desc;
  } else {
    clear_has_d_desc();
    d_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MissionPacket_2eproto__INCLUDED
