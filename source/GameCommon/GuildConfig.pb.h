// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GuildConfig.proto

#ifndef PROTOBUF_GuildConfig_2eproto__INCLUDED
#define PROTOBUF_GuildConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ProtoBufOption.pb.h"
// @@protoc_insertion_point(includes)

namespace Config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GuildConfig_2eproto();
void protobuf_AssignDesc_GuildConfig_2eproto();
void protobuf_ShutdownFile_GuildConfig_2eproto();

class GuildBuildLevelConfig;
class GuildLevelFixConfig;
class GuildPracticeConfig;
class GuildPracticeLevelConfig;
class GuildCDKConfig;
class GuildWetCopyConfig;
class GuildWetCopyStageConfig;
class GuildPositionConfig;
class GuildDonateConfig;

// ===================================================================

class GuildBuildLevelConfig : public ::google::protobuf::Message {
 public:
  GuildBuildLevelConfig();
  virtual ~GuildBuildLevelConfig();

  GuildBuildLevelConfig(const GuildBuildLevelConfig& from);

  inline GuildBuildLevelConfig& operator=(const GuildBuildLevelConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildBuildLevelConfig& default_instance();

  void Swap(GuildBuildLevelConfig* other);

  // implements Message ----------------------------------------------

  GuildBuildLevelConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildBuildLevelConfig& from);
  void MergeFrom(const GuildBuildLevelConfig& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 buildtype = 2;
  inline bool has_buildtype() const;
  inline void clear_buildtype();
  static const int kBuildtypeFieldNumber = 2;
  inline ::google::protobuf::int32 buildtype() const;
  inline void set_buildtype(::google::protobuf::int32 value);

  // required int32 buildlevel = 3;
  inline bool has_buildlevel() const;
  inline void clear_buildlevel();
  static const int kBuildlevelFieldNumber = 3;
  inline ::google::protobuf::int32 buildlevel() const;
  inline void set_buildlevel(::google::protobuf::int32 value);

  // required int32 cost = 4;
  inline bool has_cost() const;
  inline void clear_cost();
  static const int kCostFieldNumber = 4;
  inline ::google::protobuf::int32 cost() const;
  inline void set_cost(::google::protobuf::int32 value);

  // repeated int32 param = 5;
  inline int param_size() const;
  inline void clear_param();
  static const int kParamFieldNumber = 5;
  inline ::google::protobuf::int32 param(int index) const;
  inline void set_param(int index, ::google::protobuf::int32 value);
  inline void add_param(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      param() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_param();

  // @@protoc_insertion_point(class_scope:Config.GuildBuildLevelConfig)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_buildtype();
  inline void clear_has_buildtype();
  inline void set_has_buildlevel();
  inline void clear_has_buildlevel();
  inline void set_has_cost();
  inline void clear_has_cost();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 buildtype_;
  ::google::protobuf::int32 buildlevel_;
  ::google::protobuf::int32 cost_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_GuildConfig_2eproto();
  friend void protobuf_AssignDesc_GuildConfig_2eproto();
  friend void protobuf_ShutdownFile_GuildConfig_2eproto();

  void InitAsDefaultInstance();
  static GuildBuildLevelConfig* default_instance_;
};
// -------------------------------------------------------------------

class GuildLevelFixConfig : public ::google::protobuf::Message {
 public:
  GuildLevelFixConfig();
  virtual ~GuildLevelFixConfig();

  GuildLevelFixConfig(const GuildLevelFixConfig& from);

  inline GuildLevelFixConfig& operator=(const GuildLevelFixConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildLevelFixConfig& default_instance();

  void Swap(GuildLevelFixConfig* other);

  // implements Message ----------------------------------------------

  GuildLevelFixConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildLevelFixConfig& from);
  void MergeFrom(const GuildLevelFixConfig& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 battle = 2;
  inline bool has_battle() const;
  inline void clear_battle();
  static const int kBattleFieldNumber = 2;
  inline ::google::protobuf::int32 battle() const;
  inline void set_battle(::google::protobuf::int32 value);

  // required int32 playergold = 3;
  inline bool has_playergold() const;
  inline void clear_playergold();
  static const int kPlayergoldFieldNumber = 3;
  inline ::google::protobuf::int32 playergold() const;
  inline void set_playergold(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Config.GuildLevelFixConfig)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_battle();
  inline void clear_has_battle();
  inline void set_has_playergold();
  inline void clear_has_playergold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 battle_;
  ::google::protobuf::int32 playergold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GuildConfig_2eproto();
  friend void protobuf_AssignDesc_GuildConfig_2eproto();
  friend void protobuf_ShutdownFile_GuildConfig_2eproto();

  void InitAsDefaultInstance();
  static GuildLevelFixConfig* default_instance_;
};
// -------------------------------------------------------------------

class GuildPracticeConfig : public ::google::protobuf::Message {
 public:
  GuildPracticeConfig();
  virtual ~GuildPracticeConfig();

  GuildPracticeConfig(const GuildPracticeConfig& from);

  inline GuildPracticeConfig& operator=(const GuildPracticeConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildPracticeConfig& default_instance();

  void Swap(GuildPracticeConfig* other);

  // implements Message ----------------------------------------------

  GuildPracticeConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildPracticeConfig& from);
  void MergeFrom(const GuildPracticeConfig& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // repeated int32 attribute = 2;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 2;
  inline ::google::protobuf::int32 attribute(int index) const;
  inline void set_attribute(int index, ::google::protobuf::int32 value);
  inline void add_attribute(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      attribute() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_attribute();

  // @@protoc_insertion_point(class_scope:Config.GuildPracticeConfig)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > attribute_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildConfig_2eproto();
  friend void protobuf_AssignDesc_GuildConfig_2eproto();
  friend void protobuf_ShutdownFile_GuildConfig_2eproto();

  void InitAsDefaultInstance();
  static GuildPracticeConfig* default_instance_;
};
// -------------------------------------------------------------------

class GuildPracticeLevelConfig : public ::google::protobuf::Message {
 public:
  GuildPracticeLevelConfig();
  virtual ~GuildPracticeLevelConfig();

  GuildPracticeLevelConfig(const GuildPracticeLevelConfig& from);

  inline GuildPracticeLevelConfig& operator=(const GuildPracticeLevelConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildPracticeLevelConfig& default_instance();

  void Swap(GuildPracticeLevelConfig* other);

  // implements Message ----------------------------------------------

  GuildPracticeLevelConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildPracticeLevelConfig& from);
  void MergeFrom(const GuildPracticeLevelConfig& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required int32 exp = 2;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 2;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // required int32 playerlimit = 3;
  inline bool has_playerlimit() const;
  inline void clear_playerlimit();
  static const int kPlayerlimitFieldNumber = 3;
  inline ::google::protobuf::int32 playerlimit() const;
  inline void set_playerlimit(::google::protobuf::int32 value);

  // required int32 guildlimit = 4;
  inline bool has_guildlimit() const;
  inline void clear_guildlimit();
  static const int kGuildlimitFieldNumber = 4;
  inline ::google::protobuf::int32 guildlimit() const;
  inline void set_guildlimit(::google::protobuf::int32 value);

  // required int32 contributionlimit = 5;
  inline bool has_contributionlimit() const;
  inline void clear_contributionlimit();
  static const int kContributionlimitFieldNumber = 5;
  inline ::google::protobuf::int32 contributionlimit() const;
  inline void set_contributionlimit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Config.GuildPracticeLevelConfig)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_playerlimit();
  inline void clear_has_playerlimit();
  inline void set_has_guildlimit();
  inline void clear_has_guildlimit();
  inline void set_has_contributionlimit();
  inline void clear_has_contributionlimit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 playerlimit_;
  ::google::protobuf::int32 guildlimit_;
  ::google::protobuf::int32 contributionlimit_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_GuildConfig_2eproto();
  friend void protobuf_AssignDesc_GuildConfig_2eproto();
  friend void protobuf_ShutdownFile_GuildConfig_2eproto();

  void InitAsDefaultInstance();
  static GuildPracticeLevelConfig* default_instance_;
};
// -------------------------------------------------------------------

class GuildCDKConfig : public ::google::protobuf::Message {
 public:
  GuildCDKConfig();
  virtual ~GuildCDKConfig();

  GuildCDKConfig(const GuildCDKConfig& from);

  inline GuildCDKConfig& operator=(const GuildCDKConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildCDKConfig& default_instance();

  void Swap(GuildCDKConfig* other);

  // implements Message ----------------------------------------------

  GuildCDKConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildCDKConfig& from);
  void MergeFrom(const GuildCDKConfig& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 itemid = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 2;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // required int32 cost = 3;
  inline bool has_cost() const;
  inline void clear_cost();
  static const int kCostFieldNumber = 3;
  inline ::google::protobuf::int32 cost() const;
  inline void set_cost(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Config.GuildCDKConfig)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_cost();
  inline void clear_has_cost();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 cost_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GuildConfig_2eproto();
  friend void protobuf_AssignDesc_GuildConfig_2eproto();
  friend void protobuf_ShutdownFile_GuildConfig_2eproto();

  void InitAsDefaultInstance();
  static GuildCDKConfig* default_instance_;
};
// -------------------------------------------------------------------

class GuildWetCopyConfig : public ::google::protobuf::Message {
 public:
  GuildWetCopyConfig();
  virtual ~GuildWetCopyConfig();

  GuildWetCopyConfig(const GuildWetCopyConfig& from);

  inline GuildWetCopyConfig& operator=(const GuildWetCopyConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildWetCopyConfig& default_instance();

  void Swap(GuildWetCopyConfig* other);

  // implements Message ----------------------------------------------

  GuildWetCopyConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildWetCopyConfig& from);
  void MergeFrom(const GuildWetCopyConfig& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 coincost = 2;
  inline bool has_coincost() const;
  inline void clear_coincost();
  static const int kCoincostFieldNumber = 2;
  inline ::google::protobuf::int32 coincost() const;
  inline void set_coincost(::google::protobuf::int32 value);

  // required int32 sceneid = 3;
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneidFieldNumber = 3;
  inline ::google::protobuf::int32 sceneid() const;
  inline void set_sceneid(::google::protobuf::int32 value);

  // required int32 levellimit = 4;
  inline bool has_levellimit() const;
  inline void clear_levellimit();
  static const int kLevellimitFieldNumber = 4;
  inline ::google::protobuf::int32 levellimit() const;
  inline void set_levellimit(::google::protobuf::int32 value);

  // required int32 guildlevellimit = 5;
  inline bool has_guildlevellimit() const;
  inline void clear_guildlevellimit();
  static const int kGuildlevellimitFieldNumber = 5;
  inline ::google::protobuf::int32 guildlevellimit() const;
  inline void set_guildlevellimit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Config.GuildWetCopyConfig)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_coincost();
  inline void clear_has_coincost();
  inline void set_has_sceneid();
  inline void clear_has_sceneid();
  inline void set_has_levellimit();
  inline void clear_has_levellimit();
  inline void set_has_guildlevellimit();
  inline void clear_has_guildlevellimit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 coincost_;
  ::google::protobuf::int32 sceneid_;
  ::google::protobuf::int32 levellimit_;
  ::google::protobuf::int32 guildlevellimit_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_GuildConfig_2eproto();
  friend void protobuf_AssignDesc_GuildConfig_2eproto();
  friend void protobuf_ShutdownFile_GuildConfig_2eproto();

  void InitAsDefaultInstance();
  static GuildWetCopyConfig* default_instance_;
};
// -------------------------------------------------------------------

class GuildWetCopyStageConfig : public ::google::protobuf::Message {
 public:
  GuildWetCopyStageConfig();
  virtual ~GuildWetCopyStageConfig();

  GuildWetCopyStageConfig(const GuildWetCopyStageConfig& from);

  inline GuildWetCopyStageConfig& operator=(const GuildWetCopyStageConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildWetCopyStageConfig& default_instance();

  void Swap(GuildWetCopyStageConfig* other);

  // implements Message ----------------------------------------------

  GuildWetCopyStageConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildWetCopyStageConfig& from);
  void MergeFrom(const GuildWetCopyStageConfig& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 pro_stage = 2;
  inline bool has_pro_stage() const;
  inline void clear_pro_stage();
  static const int kProStageFieldNumber = 2;
  inline ::google::protobuf::int32 pro_stage() const;
  inline void set_pro_stage(::google::protobuf::int32 value);

  // required int32 copy_id = 3;
  inline bool has_copy_id() const;
  inline void clear_copy_id();
  static const int kCopyIdFieldNumber = 3;
  inline ::google::protobuf::int32 copy_id() const;
  inline void set_copy_id(::google::protobuf::int32 value);

  // required int32 monster_id = 4;
  inline bool has_monster_id() const;
  inline void clear_monster_id();
  static const int kMonsterIdFieldNumber = 4;
  inline ::google::protobuf::int32 monster_id() const;
  inline void set_monster_id(::google::protobuf::int32 value);

  // required int32 drop = 5;
  inline bool has_drop() const;
  inline void clear_drop();
  static const int kDropFieldNumber = 5;
  inline ::google::protobuf::int32 drop() const;
  inline void set_drop(::google::protobuf::int32 value);

  // required int32 boss_id = 6;
  inline bool has_boss_id() const;
  inline void clear_boss_id();
  static const int kBossIdFieldNumber = 6;
  inline ::google::protobuf::int32 boss_id() const;
  inline void set_boss_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Config.GuildWetCopyStageConfig)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pro_stage();
  inline void clear_has_pro_stage();
  inline void set_has_copy_id();
  inline void clear_has_copy_id();
  inline void set_has_monster_id();
  inline void clear_has_monster_id();
  inline void set_has_drop();
  inline void clear_has_drop();
  inline void set_has_boss_id();
  inline void clear_has_boss_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 pro_stage_;
  ::google::protobuf::int32 copy_id_;
  ::google::protobuf::int32 monster_id_;
  ::google::protobuf::int32 drop_;
  ::google::protobuf::int32 boss_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_GuildConfig_2eproto();
  friend void protobuf_AssignDesc_GuildConfig_2eproto();
  friend void protobuf_ShutdownFile_GuildConfig_2eproto();

  void InitAsDefaultInstance();
  static GuildWetCopyStageConfig* default_instance_;
};
// -------------------------------------------------------------------

class GuildPositionConfig : public ::google::protobuf::Message {
 public:
  GuildPositionConfig();
  virtual ~GuildPositionConfig();

  GuildPositionConfig(const GuildPositionConfig& from);

  inline GuildPositionConfig& operator=(const GuildPositionConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildPositionConfig& default_instance();

  void Swap(GuildPositionConfig* other);

  // implements Message ----------------------------------------------

  GuildPositionConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildPositionConfig& from);
  void MergeFrom(const GuildPositionConfig& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 guildposition = 1;
  inline bool has_guildposition() const;
  inline void clear_guildposition();
  static const int kGuildpositionFieldNumber = 1;
  inline ::google::protobuf::int32 guildposition() const;
  inline void set_guildposition(::google::protobuf::int32 value);

  // required int32 bonus = 2;
  inline bool has_bonus() const;
  inline void clear_bonus();
  static const int kBonusFieldNumber = 2;
  inline ::google::protobuf::int32 bonus() const;
  inline void set_bonus(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Config.GuildPositionConfig)
 private:
  inline void set_has_guildposition();
  inline void clear_has_guildposition();
  inline void set_has_bonus();
  inline void clear_has_bonus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 guildposition_;
  ::google::protobuf::int32 bonus_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildConfig_2eproto();
  friend void protobuf_AssignDesc_GuildConfig_2eproto();
  friend void protobuf_ShutdownFile_GuildConfig_2eproto();

  void InitAsDefaultInstance();
  static GuildPositionConfig* default_instance_;
};
// -------------------------------------------------------------------

class GuildDonateConfig : public ::google::protobuf::Message {
 public:
  GuildDonateConfig();
  virtual ~GuildDonateConfig();

  GuildDonateConfig(const GuildDonateConfig& from);

  inline GuildDonateConfig& operator=(const GuildDonateConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildDonateConfig& default_instance();

  void Swap(GuildDonateConfig* other);

  // implements Message ----------------------------------------------

  GuildDonateConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildDonateConfig& from);
  void MergeFrom(const GuildDonateConfig& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 cost = 2;
  inline bool has_cost() const;
  inline void clear_cost();
  static const int kCostFieldNumber = 2;
  inline ::google::protobuf::int32 cost() const;
  inline void set_cost(::google::protobuf::int32 value);

  // required int32 addmoney = 3;
  inline bool has_addmoney() const;
  inline void clear_addmoney();
  static const int kAddmoneyFieldNumber = 3;
  inline ::google::protobuf::int32 addmoney() const;
  inline void set_addmoney(::google::protobuf::int32 value);

  // required int32 addcontribute = 4;
  inline bool has_addcontribute() const;
  inline void clear_addcontribute();
  static const int kAddcontributeFieldNumber = 4;
  inline ::google::protobuf::int32 addcontribute() const;
  inline void set_addcontribute(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Config.GuildDonateConfig)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_cost();
  inline void clear_has_cost();
  inline void set_has_addmoney();
  inline void clear_has_addmoney();
  inline void set_has_addcontribute();
  inline void clear_has_addcontribute();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 cost_;
  ::google::protobuf::int32 addmoney_;
  ::google::protobuf::int32 addcontribute_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_GuildConfig_2eproto();
  friend void protobuf_AssignDesc_GuildConfig_2eproto();
  friend void protobuf_ShutdownFile_GuildConfig_2eproto();

  void InitAsDefaultInstance();
  static GuildDonateConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// GuildBuildLevelConfig

// required int32 id = 1;
inline bool GuildBuildLevelConfig::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildBuildLevelConfig::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildBuildLevelConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildBuildLevelConfig::clear_id() {
  id_ = 0;
  clear_has_id();
  SetDirty();
}
inline ::google::protobuf::int32 GuildBuildLevelConfig::id() const {
  return id_;
}
inline void GuildBuildLevelConfig::set_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_id();
  id_ = value;
}

// required int32 buildtype = 2;
inline bool GuildBuildLevelConfig::has_buildtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildBuildLevelConfig::set_has_buildtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildBuildLevelConfig::clear_has_buildtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildBuildLevelConfig::clear_buildtype() {
  buildtype_ = 0;
  clear_has_buildtype();
  SetDirty();
}
inline ::google::protobuf::int32 GuildBuildLevelConfig::buildtype() const {
  return buildtype_;
}
inline void GuildBuildLevelConfig::set_buildtype(::google::protobuf::int32 value) {
  SetDirty();
  set_has_buildtype();
  buildtype_ = value;
}

// required int32 buildlevel = 3;
inline bool GuildBuildLevelConfig::has_buildlevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildBuildLevelConfig::set_has_buildlevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildBuildLevelConfig::clear_has_buildlevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildBuildLevelConfig::clear_buildlevel() {
  buildlevel_ = 0;
  clear_has_buildlevel();
  SetDirty();
}
inline ::google::protobuf::int32 GuildBuildLevelConfig::buildlevel() const {
  return buildlevel_;
}
inline void GuildBuildLevelConfig::set_buildlevel(::google::protobuf::int32 value) {
  SetDirty();
  set_has_buildlevel();
  buildlevel_ = value;
}

// required int32 cost = 4;
inline bool GuildBuildLevelConfig::has_cost() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildBuildLevelConfig::set_has_cost() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildBuildLevelConfig::clear_has_cost() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildBuildLevelConfig::clear_cost() {
  cost_ = 0;
  clear_has_cost();
  SetDirty();
}
inline ::google::protobuf::int32 GuildBuildLevelConfig::cost() const {
  return cost_;
}
inline void GuildBuildLevelConfig::set_cost(::google::protobuf::int32 value) {
  SetDirty();
  set_has_cost();
  cost_ = value;
}

// repeated int32 param = 5;
inline int GuildBuildLevelConfig::param_size() const {
  return param_.size();
}
inline void GuildBuildLevelConfig::clear_param() {
  param_.Clear();
  SetDirty();
}
inline ::google::protobuf::int32 GuildBuildLevelConfig::param(int index) const {
  return param_.Get(index);
}
inline void GuildBuildLevelConfig::set_param(int index, ::google::protobuf::int32 value) {
  SetDirty();
  param_.Set(index, value);
}
inline void GuildBuildLevelConfig::add_param(::google::protobuf::int32 value) {
  SetDirty();
  param_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GuildBuildLevelConfig::param() const {
  return param_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GuildBuildLevelConfig::mutable_param() {
  SetDirty();
  return &param_;
}

// -------------------------------------------------------------------

// GuildLevelFixConfig

// required int32 id = 1;
inline bool GuildLevelFixConfig::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildLevelFixConfig::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildLevelFixConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildLevelFixConfig::clear_id() {
  id_ = 0;
  clear_has_id();
  SetDirty();
}
inline ::google::protobuf::int32 GuildLevelFixConfig::id() const {
  return id_;
}
inline void GuildLevelFixConfig::set_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_id();
  id_ = value;
}

// required int32 battle = 2;
inline bool GuildLevelFixConfig::has_battle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildLevelFixConfig::set_has_battle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildLevelFixConfig::clear_has_battle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildLevelFixConfig::clear_battle() {
  battle_ = 0;
  clear_has_battle();
  SetDirty();
}
inline ::google::protobuf::int32 GuildLevelFixConfig::battle() const {
  return battle_;
}
inline void GuildLevelFixConfig::set_battle(::google::protobuf::int32 value) {
  SetDirty();
  set_has_battle();
  battle_ = value;
}

// required int32 playergold = 3;
inline bool GuildLevelFixConfig::has_playergold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildLevelFixConfig::set_has_playergold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildLevelFixConfig::clear_has_playergold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildLevelFixConfig::clear_playergold() {
  playergold_ = 0;
  clear_has_playergold();
  SetDirty();
}
inline ::google::protobuf::int32 GuildLevelFixConfig::playergold() const {
  return playergold_;
}
inline void GuildLevelFixConfig::set_playergold(::google::protobuf::int32 value) {
  SetDirty();
  set_has_playergold();
  playergold_ = value;
}

// -------------------------------------------------------------------

// GuildPracticeConfig

// required int32 id = 1;
inline bool GuildPracticeConfig::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildPracticeConfig::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildPracticeConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildPracticeConfig::clear_id() {
  id_ = 0;
  clear_has_id();
  SetDirty();
}
inline ::google::protobuf::int32 GuildPracticeConfig::id() const {
  return id_;
}
inline void GuildPracticeConfig::set_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_id();
  id_ = value;
}

// repeated int32 attribute = 2;
inline int GuildPracticeConfig::attribute_size() const {
  return attribute_.size();
}
inline void GuildPracticeConfig::clear_attribute() {
  attribute_.Clear();
  SetDirty();
}
inline ::google::protobuf::int32 GuildPracticeConfig::attribute(int index) const {
  return attribute_.Get(index);
}
inline void GuildPracticeConfig::set_attribute(int index, ::google::protobuf::int32 value) {
  SetDirty();
  attribute_.Set(index, value);
}
inline void GuildPracticeConfig::add_attribute(::google::protobuf::int32 value) {
  SetDirty();
  attribute_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GuildPracticeConfig::attribute() const {
  return attribute_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GuildPracticeConfig::mutable_attribute() {
  SetDirty();
  return &attribute_;
}

// -------------------------------------------------------------------

// GuildPracticeLevelConfig

// required int32 level = 1;
inline bool GuildPracticeLevelConfig::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildPracticeLevelConfig::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildPracticeLevelConfig::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildPracticeLevelConfig::clear_level() {
  level_ = 0;
  clear_has_level();
  SetDirty();
}
inline ::google::protobuf::int32 GuildPracticeLevelConfig::level() const {
  return level_;
}
inline void GuildPracticeLevelConfig::set_level(::google::protobuf::int32 value) {
  SetDirty();
  set_has_level();
  level_ = value;
}

// required int32 exp = 2;
inline bool GuildPracticeLevelConfig::has_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildPracticeLevelConfig::set_has_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildPracticeLevelConfig::clear_has_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildPracticeLevelConfig::clear_exp() {
  exp_ = 0;
  clear_has_exp();
  SetDirty();
}
inline ::google::protobuf::int32 GuildPracticeLevelConfig::exp() const {
  return exp_;
}
inline void GuildPracticeLevelConfig::set_exp(::google::protobuf::int32 value) {
  SetDirty();
  set_has_exp();
  exp_ = value;
}

// required int32 playerlimit = 3;
inline bool GuildPracticeLevelConfig::has_playerlimit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildPracticeLevelConfig::set_has_playerlimit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildPracticeLevelConfig::clear_has_playerlimit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildPracticeLevelConfig::clear_playerlimit() {
  playerlimit_ = 0;
  clear_has_playerlimit();
  SetDirty();
}
inline ::google::protobuf::int32 GuildPracticeLevelConfig::playerlimit() const {
  return playerlimit_;
}
inline void GuildPracticeLevelConfig::set_playerlimit(::google::protobuf::int32 value) {
  SetDirty();
  set_has_playerlimit();
  playerlimit_ = value;
}

// required int32 guildlimit = 4;
inline bool GuildPracticeLevelConfig::has_guildlimit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildPracticeLevelConfig::set_has_guildlimit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildPracticeLevelConfig::clear_has_guildlimit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildPracticeLevelConfig::clear_guildlimit() {
  guildlimit_ = 0;
  clear_has_guildlimit();
  SetDirty();
}
inline ::google::protobuf::int32 GuildPracticeLevelConfig::guildlimit() const {
  return guildlimit_;
}
inline void GuildPracticeLevelConfig::set_guildlimit(::google::protobuf::int32 value) {
  SetDirty();
  set_has_guildlimit();
  guildlimit_ = value;
}

// required int32 contributionlimit = 5;
inline bool GuildPracticeLevelConfig::has_contributionlimit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuildPracticeLevelConfig::set_has_contributionlimit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuildPracticeLevelConfig::clear_has_contributionlimit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuildPracticeLevelConfig::clear_contributionlimit() {
  contributionlimit_ = 0;
  clear_has_contributionlimit();
  SetDirty();
}
inline ::google::protobuf::int32 GuildPracticeLevelConfig::contributionlimit() const {
  return contributionlimit_;
}
inline void GuildPracticeLevelConfig::set_contributionlimit(::google::protobuf::int32 value) {
  SetDirty();
  set_has_contributionlimit();
  contributionlimit_ = value;
}

// -------------------------------------------------------------------

// GuildCDKConfig

// required int32 id = 1;
inline bool GuildCDKConfig::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildCDKConfig::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildCDKConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildCDKConfig::clear_id() {
  id_ = 0;
  clear_has_id();
  SetDirty();
}
inline ::google::protobuf::int32 GuildCDKConfig::id() const {
  return id_;
}
inline void GuildCDKConfig::set_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_id();
  id_ = value;
}

// required int32 itemid = 2;
inline bool GuildCDKConfig::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildCDKConfig::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildCDKConfig::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildCDKConfig::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
  SetDirty();
}
inline ::google::protobuf::int32 GuildCDKConfig::itemid() const {
  return itemid_;
}
inline void GuildCDKConfig::set_itemid(::google::protobuf::int32 value) {
  SetDirty();
  set_has_itemid();
  itemid_ = value;
}

// required int32 cost = 3;
inline bool GuildCDKConfig::has_cost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildCDKConfig::set_has_cost() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildCDKConfig::clear_has_cost() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildCDKConfig::clear_cost() {
  cost_ = 0;
  clear_has_cost();
  SetDirty();
}
inline ::google::protobuf::int32 GuildCDKConfig::cost() const {
  return cost_;
}
inline void GuildCDKConfig::set_cost(::google::protobuf::int32 value) {
  SetDirty();
  set_has_cost();
  cost_ = value;
}

// -------------------------------------------------------------------

// GuildWetCopyConfig

// required int32 id = 1;
inline bool GuildWetCopyConfig::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildWetCopyConfig::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildWetCopyConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildWetCopyConfig::clear_id() {
  id_ = 0;
  clear_has_id();
  SetDirty();
}
inline ::google::protobuf::int32 GuildWetCopyConfig::id() const {
  return id_;
}
inline void GuildWetCopyConfig::set_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_id();
  id_ = value;
}

// required int32 coincost = 2;
inline bool GuildWetCopyConfig::has_coincost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildWetCopyConfig::set_has_coincost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildWetCopyConfig::clear_has_coincost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildWetCopyConfig::clear_coincost() {
  coincost_ = 0;
  clear_has_coincost();
  SetDirty();
}
inline ::google::protobuf::int32 GuildWetCopyConfig::coincost() const {
  return coincost_;
}
inline void GuildWetCopyConfig::set_coincost(::google::protobuf::int32 value) {
  SetDirty();
  set_has_coincost();
  coincost_ = value;
}

// required int32 sceneid = 3;
inline bool GuildWetCopyConfig::has_sceneid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildWetCopyConfig::set_has_sceneid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildWetCopyConfig::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildWetCopyConfig::clear_sceneid() {
  sceneid_ = 0;
  clear_has_sceneid();
  SetDirty();
}
inline ::google::protobuf::int32 GuildWetCopyConfig::sceneid() const {
  return sceneid_;
}
inline void GuildWetCopyConfig::set_sceneid(::google::protobuf::int32 value) {
  SetDirty();
  set_has_sceneid();
  sceneid_ = value;
}

// required int32 levellimit = 4;
inline bool GuildWetCopyConfig::has_levellimit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildWetCopyConfig::set_has_levellimit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildWetCopyConfig::clear_has_levellimit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildWetCopyConfig::clear_levellimit() {
  levellimit_ = 0;
  clear_has_levellimit();
  SetDirty();
}
inline ::google::protobuf::int32 GuildWetCopyConfig::levellimit() const {
  return levellimit_;
}
inline void GuildWetCopyConfig::set_levellimit(::google::protobuf::int32 value) {
  SetDirty();
  set_has_levellimit();
  levellimit_ = value;
}

// required int32 guildlevellimit = 5;
inline bool GuildWetCopyConfig::has_guildlevellimit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuildWetCopyConfig::set_has_guildlevellimit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuildWetCopyConfig::clear_has_guildlevellimit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuildWetCopyConfig::clear_guildlevellimit() {
  guildlevellimit_ = 0;
  clear_has_guildlevellimit();
  SetDirty();
}
inline ::google::protobuf::int32 GuildWetCopyConfig::guildlevellimit() const {
  return guildlevellimit_;
}
inline void GuildWetCopyConfig::set_guildlevellimit(::google::protobuf::int32 value) {
  SetDirty();
  set_has_guildlevellimit();
  guildlevellimit_ = value;
}

// -------------------------------------------------------------------

// GuildWetCopyStageConfig

// required int32 id = 1;
inline bool GuildWetCopyStageConfig::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildWetCopyStageConfig::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildWetCopyStageConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildWetCopyStageConfig::clear_id() {
  id_ = 0;
  clear_has_id();
  SetDirty();
}
inline ::google::protobuf::int32 GuildWetCopyStageConfig::id() const {
  return id_;
}
inline void GuildWetCopyStageConfig::set_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_id();
  id_ = value;
}

// required int32 pro_stage = 2;
inline bool GuildWetCopyStageConfig::has_pro_stage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildWetCopyStageConfig::set_has_pro_stage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildWetCopyStageConfig::clear_has_pro_stage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildWetCopyStageConfig::clear_pro_stage() {
  pro_stage_ = 0;
  clear_has_pro_stage();
  SetDirty();
}
inline ::google::protobuf::int32 GuildWetCopyStageConfig::pro_stage() const {
  return pro_stage_;
}
inline void GuildWetCopyStageConfig::set_pro_stage(::google::protobuf::int32 value) {
  SetDirty();
  set_has_pro_stage();
  pro_stage_ = value;
}

// required int32 copy_id = 3;
inline bool GuildWetCopyStageConfig::has_copy_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildWetCopyStageConfig::set_has_copy_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildWetCopyStageConfig::clear_has_copy_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildWetCopyStageConfig::clear_copy_id() {
  copy_id_ = 0;
  clear_has_copy_id();
  SetDirty();
}
inline ::google::protobuf::int32 GuildWetCopyStageConfig::copy_id() const {
  return copy_id_;
}
inline void GuildWetCopyStageConfig::set_copy_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_copy_id();
  copy_id_ = value;
}

// required int32 monster_id = 4;
inline bool GuildWetCopyStageConfig::has_monster_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildWetCopyStageConfig::set_has_monster_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildWetCopyStageConfig::clear_has_monster_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildWetCopyStageConfig::clear_monster_id() {
  monster_id_ = 0;
  clear_has_monster_id();
  SetDirty();
}
inline ::google::protobuf::int32 GuildWetCopyStageConfig::monster_id() const {
  return monster_id_;
}
inline void GuildWetCopyStageConfig::set_monster_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_monster_id();
  monster_id_ = value;
}

// required int32 drop = 5;
inline bool GuildWetCopyStageConfig::has_drop() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuildWetCopyStageConfig::set_has_drop() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuildWetCopyStageConfig::clear_has_drop() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuildWetCopyStageConfig::clear_drop() {
  drop_ = 0;
  clear_has_drop();
  SetDirty();
}
inline ::google::protobuf::int32 GuildWetCopyStageConfig::drop() const {
  return drop_;
}
inline void GuildWetCopyStageConfig::set_drop(::google::protobuf::int32 value) {
  SetDirty();
  set_has_drop();
  drop_ = value;
}

// required int32 boss_id = 6;
inline bool GuildWetCopyStageConfig::has_boss_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GuildWetCopyStageConfig::set_has_boss_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GuildWetCopyStageConfig::clear_has_boss_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GuildWetCopyStageConfig::clear_boss_id() {
  boss_id_ = 0;
  clear_has_boss_id();
  SetDirty();
}
inline ::google::protobuf::int32 GuildWetCopyStageConfig::boss_id() const {
  return boss_id_;
}
inline void GuildWetCopyStageConfig::set_boss_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_boss_id();
  boss_id_ = value;
}

// -------------------------------------------------------------------

// GuildPositionConfig

// required int32 guildposition = 1;
inline bool GuildPositionConfig::has_guildposition() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildPositionConfig::set_has_guildposition() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildPositionConfig::clear_has_guildposition() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildPositionConfig::clear_guildposition() {
  guildposition_ = 0;
  clear_has_guildposition();
  SetDirty();
}
inline ::google::protobuf::int32 GuildPositionConfig::guildposition() const {
  return guildposition_;
}
inline void GuildPositionConfig::set_guildposition(::google::protobuf::int32 value) {
  SetDirty();
  set_has_guildposition();
  guildposition_ = value;
}

// required int32 bonus = 2;
inline bool GuildPositionConfig::has_bonus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildPositionConfig::set_has_bonus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildPositionConfig::clear_has_bonus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildPositionConfig::clear_bonus() {
  bonus_ = 0;
  clear_has_bonus();
  SetDirty();
}
inline ::google::protobuf::int32 GuildPositionConfig::bonus() const {
  return bonus_;
}
inline void GuildPositionConfig::set_bonus(::google::protobuf::int32 value) {
  SetDirty();
  set_has_bonus();
  bonus_ = value;
}

// -------------------------------------------------------------------

// GuildDonateConfig

// required int32 type = 1;
inline bool GuildDonateConfig::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildDonateConfig::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildDonateConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildDonateConfig::clear_type() {
  type_ = 0;
  clear_has_type();
  SetDirty();
}
inline ::google::protobuf::int32 GuildDonateConfig::type() const {
  return type_;
}
inline void GuildDonateConfig::set_type(::google::protobuf::int32 value) {
  SetDirty();
  set_has_type();
  type_ = value;
}

// required int32 cost = 2;
inline bool GuildDonateConfig::has_cost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildDonateConfig::set_has_cost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildDonateConfig::clear_has_cost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildDonateConfig::clear_cost() {
  cost_ = 0;
  clear_has_cost();
  SetDirty();
}
inline ::google::protobuf::int32 GuildDonateConfig::cost() const {
  return cost_;
}
inline void GuildDonateConfig::set_cost(::google::protobuf::int32 value) {
  SetDirty();
  set_has_cost();
  cost_ = value;
}

// required int32 addmoney = 3;
inline bool GuildDonateConfig::has_addmoney() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildDonateConfig::set_has_addmoney() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildDonateConfig::clear_has_addmoney() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildDonateConfig::clear_addmoney() {
  addmoney_ = 0;
  clear_has_addmoney();
  SetDirty();
}
inline ::google::protobuf::int32 GuildDonateConfig::addmoney() const {
  return addmoney_;
}
inline void GuildDonateConfig::set_addmoney(::google::protobuf::int32 value) {
  SetDirty();
  set_has_addmoney();
  addmoney_ = value;
}

// required int32 addcontribute = 4;
inline bool GuildDonateConfig::has_addcontribute() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildDonateConfig::set_has_addcontribute() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildDonateConfig::clear_has_addcontribute() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildDonateConfig::clear_addcontribute() {
  addcontribute_ = 0;
  clear_has_addcontribute();
  SetDirty();
}
inline ::google::protobuf::int32 GuildDonateConfig::addcontribute() const {
  return addcontribute_;
}
inline void GuildDonateConfig::set_addcontribute(::google::protobuf::int32 value) {
  SetDirty();
  set_has_addcontribute();
  addcontribute_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GuildConfig_2eproto__INCLUDED
