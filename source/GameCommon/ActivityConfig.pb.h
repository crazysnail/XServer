// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActivityConfig.proto

#ifndef PROTOBUF_ActivityConfig_2eproto__INCLUDED
#define PROTOBUF_ActivityConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "AllConfigEnum.pb.h"
#include "ProtoBufOption.pb.h"
// @@protoc_insertion_point(includes)

namespace Config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ActivityConfig_2eproto();
void protobuf_AssignDesc_ActivityConfig_2eproto();
void protobuf_ShutdownFile_ActivityConfig_2eproto();

class ActivityTimes;
class ActivityConfig;
class TextAnswerConfig;
class PicAnswerConfig;

// ===================================================================

class ActivityTimes : public ::google::protobuf::Message {
 public:
  ActivityTimes();
  virtual ~ActivityTimes();

  ActivityTimes(const ActivityTimes& from);

  inline ActivityTimes& operator=(const ActivityTimes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivityTimes& default_instance();

  void Swap(ActivityTimes* other);

  // implements Message ----------------------------------------------

  ActivityTimes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActivityTimes& from);
  void MergeFrom(const ActivityTimes& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 begin_time = 1;
  inline bool has_begin_time() const;
  inline void clear_begin_time();
  static const int kBeginTimeFieldNumber = 1;
  inline ::google::protobuf::int32 begin_time() const;
  inline void set_begin_time(::google::protobuf::int32 value);

  // required int32 end_time = 2;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 2;
  inline ::google::protobuf::int32 end_time() const;
  inline void set_end_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Config.ActivityTimes)
 private:
  inline void set_has_begin_time();
  inline void clear_has_begin_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 begin_time_;
  ::google::protobuf::int32 end_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ActivityConfig_2eproto();
  friend void protobuf_AssignDesc_ActivityConfig_2eproto();
  friend void protobuf_ShutdownFile_ActivityConfig_2eproto();

  void InitAsDefaultInstance();
  static ActivityTimes* default_instance_;
};
// -------------------------------------------------------------------

class ActivityConfig : public ::google::protobuf::Message {
 public:
  ActivityConfig();
  virtual ~ActivityConfig();

  ActivityConfig(const ActivityConfig& from);

  inline ActivityConfig& operator=(const ActivityConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivityConfig& default_instance();

  void Swap(ActivityConfig* other);

  // implements Message ----------------------------------------------

  ActivityConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActivityConfig& from);
  void MergeFrom(const ActivityConfig& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required .Config.ActivityGroup group = 2;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 2;
  inline ::Config::ActivityGroup group() const;
  inline void set_group(::Config::ActivityGroup value);

  // required int32 reward_count = 3;
  inline bool has_reward_count() const;
  inline void clear_reward_count();
  static const int kRewardCountFieldNumber = 3;
  inline ::google::protobuf::int32 reward_count() const;
  inline void set_reward_count(::google::protobuf::int32 value);

  // required int32 token_day_once = 4;
  inline bool has_token_day_once() const;
  inline void clear_token_day_once();
  static const int kTokenDayOnceFieldNumber = 4;
  inline ::google::protobuf::int32 token_day_once() const;
  inline void set_token_day_once(::google::protobuf::int32 value);

  // required int32 open_level = 5;
  inline bool has_open_level() const;
  inline void clear_open_level();
  static const int kOpenLevelFieldNumber = 5;
  inline ::google::protobuf::int32 open_level() const;
  inline void set_open_level(::google::protobuf::int32 value);

  // required int32 close_level = 6;
  inline bool has_close_level() const;
  inline void clear_close_level();
  static const int kCloseLevelFieldNumber = 6;
  inline ::google::protobuf::int32 close_level() const;
  inline void set_close_level(::google::protobuf::int32 value);

  // required int32 begin_date = 7;
  inline bool has_begin_date() const;
  inline void clear_begin_date();
  static const int kBeginDateFieldNumber = 7;
  inline ::google::protobuf::int32 begin_date() const;
  inline void set_begin_date(::google::protobuf::int32 value);

  // required int32 end_date = 8;
  inline bool has_end_date() const;
  inline void clear_end_date();
  static const int kEndDateFieldNumber = 8;
  inline ::google::protobuf::int32 end_date() const;
  inline void set_end_date(::google::protobuf::int32 value);

  // required int32 people_count = 9;
  inline bool has_people_count() const;
  inline void clear_people_count();
  static const int kPeopleCountFieldNumber = 9;
  inline ::google::protobuf::int32 people_count() const;
  inline void set_people_count(::google::protobuf::int32 value);

  // required int32 switch_open = 10;
  inline bool has_switch_open() const;
  inline void clear_switch_open();
  static const int kSwitchOpenFieldNumber = 10;
  inline ::google::protobuf::int32 switch_open() const;
  inline void set_switch_open(::google::protobuf::int32 value);

  // required int32 display_times = 11;
  inline bool has_display_times() const;
  inline void clear_display_times();
  static const int kDisplayTimesFieldNumber = 11;
  inline ::google::protobuf::int32 display_times() const;
  inline void set_display_times(::google::protobuf::int32 value);

  // required string week_day_flag = 12;
  inline bool has_week_day_flag() const;
  inline void clear_week_day_flag();
  static const int kWeekDayFlagFieldNumber = 12;
  inline const ::std::string& week_day_flag() const;
  inline void set_week_day_flag(const ::std::string& value);
  inline void set_week_day_flag(const char* value);
  inline void set_week_day_flag(const char* value, size_t size);
  inline ::std::string* mutable_week_day_flag();
  inline ::std::string* release_week_day_flag();
  inline void set_allocated_week_day_flag(::std::string* week_day_flag);

  // required string during_week_flag = 13;
  inline bool has_during_week_flag() const;
  inline void clear_during_week_flag();
  static const int kDuringWeekFlagFieldNumber = 13;
  inline const ::std::string& during_week_flag() const;
  inline void set_during_week_flag(const ::std::string& value);
  inline void set_during_week_flag(const char* value);
  inline void set_during_week_flag(const char* value, size_t size);
  inline ::std::string* mutable_during_week_flag();
  inline ::std::string* release_during_week_flag();
  inline void set_allocated_during_week_flag(::std::string* during_week_flag);

  // required int32 limit_times = 14;
  inline bool has_limit_times() const;
  inline void clear_limit_times();
  static const int kLimitTimesFieldNumber = 14;
  inline ::google::protobuf::int32 limit_times() const;
  inline void set_limit_times(::google::protobuf::int32 value);

  // required string day_begin_time = 15;
  inline bool has_day_begin_time() const;
  inline void clear_day_begin_time();
  static const int kDayBeginTimeFieldNumber = 15;
  inline const ::std::string& day_begin_time() const;
  inline void set_day_begin_time(const ::std::string& value);
  inline void set_day_begin_time(const char* value);
  inline void set_day_begin_time(const char* value, size_t size);
  inline ::std::string* mutable_day_begin_time();
  inline ::std::string* release_day_begin_time();
  inline void set_allocated_day_begin_time(::std::string* day_begin_time);

  // required string day_end_time = 16;
  inline bool has_day_end_time() const;
  inline void clear_day_end_time();
  static const int kDayEndTimeFieldNumber = 16;
  inline const ::std::string& day_end_time() const;
  inline void set_day_end_time(const ::std::string& value);
  inline void set_day_end_time(const char* value);
  inline void set_day_end_time(const char* value, size_t size);
  inline ::std::string* mutable_day_end_time();
  inline ::std::string* release_day_end_time();
  inline void set_allocated_day_end_time(::std::string* day_end_time);

  // required string name = 17;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 17;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 pre_notify = 18;
  inline bool has_pre_notify() const;
  inline void clear_pre_notify();
  static const int kPreNotifyFieldNumber = 18;
  inline ::google::protobuf::int32 pre_notify() const;
  inline void set_pre_notify(::google::protobuf::int32 value);

  // required string notify_text = 19;
  inline bool has_notify_text() const;
  inline void clear_notify_text();
  static const int kNotifyTextFieldNumber = 19;
  inline const ::std::string& notify_text() const;
  inline void set_notify_text(const ::std::string& value);
  inline void set_notify_text(const char* value);
  inline void set_notify_text(const char* value, size_t size);
  inline ::std::string* mutable_notify_text();
  inline ::std::string* release_notify_text();
  inline void set_allocated_notify_text(::std::string* notify_text);

  // @@protoc_insertion_point(class_scope:Config.ActivityConfig)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_reward_count();
  inline void clear_has_reward_count();
  inline void set_has_token_day_once();
  inline void clear_has_token_day_once();
  inline void set_has_open_level();
  inline void clear_has_open_level();
  inline void set_has_close_level();
  inline void clear_has_close_level();
  inline void set_has_begin_date();
  inline void clear_has_begin_date();
  inline void set_has_end_date();
  inline void clear_has_end_date();
  inline void set_has_people_count();
  inline void clear_has_people_count();
  inline void set_has_switch_open();
  inline void clear_has_switch_open();
  inline void set_has_display_times();
  inline void clear_has_display_times();
  inline void set_has_week_day_flag();
  inline void clear_has_week_day_flag();
  inline void set_has_during_week_flag();
  inline void clear_has_during_week_flag();
  inline void set_has_limit_times();
  inline void clear_has_limit_times();
  inline void set_has_day_begin_time();
  inline void clear_has_day_begin_time();
  inline void set_has_day_end_time();
  inline void clear_has_day_end_time();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_pre_notify();
  inline void clear_has_pre_notify();
  inline void set_has_notify_text();
  inline void clear_has_notify_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  int group_;
  ::google::protobuf::int32 reward_count_;
  ::google::protobuf::int32 token_day_once_;
  ::google::protobuf::int32 open_level_;
  ::google::protobuf::int32 close_level_;
  ::google::protobuf::int32 begin_date_;
  ::google::protobuf::int32 end_date_;
  ::google::protobuf::int32 people_count_;
  ::google::protobuf::int32 switch_open_;
  ::std::string* week_day_flag_;
  ::google::protobuf::int32 display_times_;
  ::google::protobuf::int32 limit_times_;
  ::std::string* during_week_flag_;
  ::std::string* day_begin_time_;
  ::std::string* day_end_time_;
  ::std::string* name_;
  ::std::string* notify_text_;
  ::google::protobuf::int32 pre_notify_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];

  friend void  protobuf_AddDesc_ActivityConfig_2eproto();
  friend void protobuf_AssignDesc_ActivityConfig_2eproto();
  friend void protobuf_ShutdownFile_ActivityConfig_2eproto();

  void InitAsDefaultInstance();
  static ActivityConfig* default_instance_;
};
// -------------------------------------------------------------------

class TextAnswerConfig : public ::google::protobuf::Message {
 public:
  TextAnswerConfig();
  virtual ~TextAnswerConfig();

  TextAnswerConfig(const TextAnswerConfig& from);

  inline TextAnswerConfig& operator=(const TextAnswerConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TextAnswerConfig& default_instance();

  void Swap(TextAnswerConfig* other);

  // implements Message ----------------------------------------------

  TextAnswerConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TextAnswerConfig& from);
  void MergeFrom(const TextAnswerConfig& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // repeated string option = 2;
  inline int option_size() const;
  inline void clear_option();
  static const int kOptionFieldNumber = 2;
  inline const ::std::string& option(int index) const;
  inline ::std::string* mutable_option(int index);
  inline void set_option(int index, const ::std::string& value);
  inline void set_option(int index, const char* value);
  inline void set_option(int index, const char* value, size_t size);
  inline ::std::string* add_option();
  inline void add_option(const ::std::string& value);
  inline void add_option(const char* value);
  inline void add_option(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& option() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_option();

  // required int32 weight = 3;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 3;
  inline ::google::protobuf::int32 weight() const;
  inline void set_weight(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Config.TextAnswerConfig)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_weight();
  inline void clear_has_weight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> option_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 weight_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ActivityConfig_2eproto();
  friend void protobuf_AssignDesc_ActivityConfig_2eproto();
  friend void protobuf_ShutdownFile_ActivityConfig_2eproto();

  void InitAsDefaultInstance();
  static TextAnswerConfig* default_instance_;
};
// -------------------------------------------------------------------

class PicAnswerConfig : public ::google::protobuf::Message {
 public:
  PicAnswerConfig();
  virtual ~PicAnswerConfig();

  PicAnswerConfig(const PicAnswerConfig& from);

  inline PicAnswerConfig& operator=(const PicAnswerConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PicAnswerConfig& default_instance();

  void Swap(PicAnswerConfig* other);

  // implements Message ----------------------------------------------

  PicAnswerConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PicAnswerConfig& from);
  void MergeFrom(const PicAnswerConfig& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required int32 group = 2;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 2;
  inline ::google::protobuf::int32 group() const;
  inline void set_group(::google::protobuf::int32 value);

  // repeated int32 option = 3;
  inline int option_size() const;
  inline void clear_option();
  static const int kOptionFieldNumber = 3;
  inline ::google::protobuf::int32 option(int index) const;
  inline void set_option(int index, ::google::protobuf::int32 value);
  inline void add_option(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      option() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_option();

  // required int32 weight = 4;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 4;
  inline ::google::protobuf::int32 weight() const;
  inline void set_weight(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Config.PicAnswerConfig)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_weight();
  inline void clear_has_weight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 group_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > option_;
  ::google::protobuf::int32 weight_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ActivityConfig_2eproto();
  friend void protobuf_AssignDesc_ActivityConfig_2eproto();
  friend void protobuf_ShutdownFile_ActivityConfig_2eproto();

  void InitAsDefaultInstance();
  static PicAnswerConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// ActivityTimes

// required int32 begin_time = 1;
inline bool ActivityTimes::has_begin_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityTimes::set_has_begin_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivityTimes::clear_has_begin_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivityTimes::clear_begin_time() {
  begin_time_ = 0;
  clear_has_begin_time();
  SetDirty();
}
inline ::google::protobuf::int32 ActivityTimes::begin_time() const {
  return begin_time_;
}
inline void ActivityTimes::set_begin_time(::google::protobuf::int32 value) {
  SetDirty();
  set_has_begin_time();
  begin_time_ = value;
}

// required int32 end_time = 2;
inline bool ActivityTimes::has_end_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityTimes::set_has_end_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActivityTimes::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActivityTimes::clear_end_time() {
  end_time_ = 0;
  clear_has_end_time();
  SetDirty();
}
inline ::google::protobuf::int32 ActivityTimes::end_time() const {
  return end_time_;
}
inline void ActivityTimes::set_end_time(::google::protobuf::int32 value) {
  SetDirty();
  set_has_end_time();
  end_time_ = value;
}

// -------------------------------------------------------------------

// ActivityConfig

// required int32 id = 1;
inline bool ActivityConfig::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityConfig::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivityConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivityConfig::clear_id() {
  id_ = 0;
  clear_has_id();
  SetDirty();
}
inline ::google::protobuf::int32 ActivityConfig::id() const {
  return id_;
}
inline void ActivityConfig::set_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_id();
  id_ = value;
}

// required .Config.ActivityGroup group = 2;
inline bool ActivityConfig::has_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityConfig::set_has_group() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActivityConfig::clear_has_group() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActivityConfig::clear_group() {
  group_ = 0;
  clear_has_group();
  SetDirty();
}
inline ::Config::ActivityGroup ActivityConfig::group() const {
  return static_cast< ::Config::ActivityGroup >(group_);
}
inline void ActivityConfig::set_group(::Config::ActivityGroup value) {
  assert(::Config::ActivityGroup_IsValid(value));
  SetDirty();
  set_has_group();
  group_ = value;
}

// required int32 reward_count = 3;
inline bool ActivityConfig::has_reward_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActivityConfig::set_has_reward_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActivityConfig::clear_has_reward_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActivityConfig::clear_reward_count() {
  reward_count_ = 0;
  clear_has_reward_count();
  SetDirty();
}
inline ::google::protobuf::int32 ActivityConfig::reward_count() const {
  return reward_count_;
}
inline void ActivityConfig::set_reward_count(::google::protobuf::int32 value) {
  SetDirty();
  set_has_reward_count();
  reward_count_ = value;
}

// required int32 token_day_once = 4;
inline bool ActivityConfig::has_token_day_once() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ActivityConfig::set_has_token_day_once() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ActivityConfig::clear_has_token_day_once() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ActivityConfig::clear_token_day_once() {
  token_day_once_ = 0;
  clear_has_token_day_once();
  SetDirty();
}
inline ::google::protobuf::int32 ActivityConfig::token_day_once() const {
  return token_day_once_;
}
inline void ActivityConfig::set_token_day_once(::google::protobuf::int32 value) {
  SetDirty();
  set_has_token_day_once();
  token_day_once_ = value;
}

// required int32 open_level = 5;
inline bool ActivityConfig::has_open_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ActivityConfig::set_has_open_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ActivityConfig::clear_has_open_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ActivityConfig::clear_open_level() {
  open_level_ = 0;
  clear_has_open_level();
  SetDirty();
}
inline ::google::protobuf::int32 ActivityConfig::open_level() const {
  return open_level_;
}
inline void ActivityConfig::set_open_level(::google::protobuf::int32 value) {
  SetDirty();
  set_has_open_level();
  open_level_ = value;
}

// required int32 close_level = 6;
inline bool ActivityConfig::has_close_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ActivityConfig::set_has_close_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ActivityConfig::clear_has_close_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ActivityConfig::clear_close_level() {
  close_level_ = 0;
  clear_has_close_level();
  SetDirty();
}
inline ::google::protobuf::int32 ActivityConfig::close_level() const {
  return close_level_;
}
inline void ActivityConfig::set_close_level(::google::protobuf::int32 value) {
  SetDirty();
  set_has_close_level();
  close_level_ = value;
}

// required int32 begin_date = 7;
inline bool ActivityConfig::has_begin_date() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ActivityConfig::set_has_begin_date() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ActivityConfig::clear_has_begin_date() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ActivityConfig::clear_begin_date() {
  begin_date_ = 0;
  clear_has_begin_date();
  SetDirty();
}
inline ::google::protobuf::int32 ActivityConfig::begin_date() const {
  return begin_date_;
}
inline void ActivityConfig::set_begin_date(::google::protobuf::int32 value) {
  SetDirty();
  set_has_begin_date();
  begin_date_ = value;
}

// required int32 end_date = 8;
inline bool ActivityConfig::has_end_date() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ActivityConfig::set_has_end_date() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ActivityConfig::clear_has_end_date() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ActivityConfig::clear_end_date() {
  end_date_ = 0;
  clear_has_end_date();
  SetDirty();
}
inline ::google::protobuf::int32 ActivityConfig::end_date() const {
  return end_date_;
}
inline void ActivityConfig::set_end_date(::google::protobuf::int32 value) {
  SetDirty();
  set_has_end_date();
  end_date_ = value;
}

// required int32 people_count = 9;
inline bool ActivityConfig::has_people_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ActivityConfig::set_has_people_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ActivityConfig::clear_has_people_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ActivityConfig::clear_people_count() {
  people_count_ = 0;
  clear_has_people_count();
  SetDirty();
}
inline ::google::protobuf::int32 ActivityConfig::people_count() const {
  return people_count_;
}
inline void ActivityConfig::set_people_count(::google::protobuf::int32 value) {
  SetDirty();
  set_has_people_count();
  people_count_ = value;
}

// required int32 switch_open = 10;
inline bool ActivityConfig::has_switch_open() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ActivityConfig::set_has_switch_open() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ActivityConfig::clear_has_switch_open() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ActivityConfig::clear_switch_open() {
  switch_open_ = 0;
  clear_has_switch_open();
  SetDirty();
}
inline ::google::protobuf::int32 ActivityConfig::switch_open() const {
  return switch_open_;
}
inline void ActivityConfig::set_switch_open(::google::protobuf::int32 value) {
  SetDirty();
  set_has_switch_open();
  switch_open_ = value;
}

// required int32 display_times = 11;
inline bool ActivityConfig::has_display_times() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ActivityConfig::set_has_display_times() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ActivityConfig::clear_has_display_times() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ActivityConfig::clear_display_times() {
  display_times_ = 0;
  clear_has_display_times();
  SetDirty();
}
inline ::google::protobuf::int32 ActivityConfig::display_times() const {
  return display_times_;
}
inline void ActivityConfig::set_display_times(::google::protobuf::int32 value) {
  SetDirty();
  set_has_display_times();
  display_times_ = value;
}

// required string week_day_flag = 12;
inline bool ActivityConfig::has_week_day_flag() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ActivityConfig::set_has_week_day_flag() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ActivityConfig::clear_has_week_day_flag() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ActivityConfig::clear_week_day_flag() {
  if (week_day_flag_ != &::google::protobuf::internal::kEmptyString) {
    week_day_flag_->clear();
  }
  clear_has_week_day_flag();
  SetDirty();
}
inline const ::std::string& ActivityConfig::week_day_flag() const {
  return *week_day_flag_;
}
inline void ActivityConfig::set_week_day_flag(const ::std::string& value) {
  SetDirty();
  set_has_week_day_flag();
  if (week_day_flag_ == &::google::protobuf::internal::kEmptyString) {
    week_day_flag_ = new ::std::string;
  }
  week_day_flag_->assign(value);
}
inline void ActivityConfig::set_week_day_flag(const char* value) {
  SetDirty();
  set_has_week_day_flag();
  if (week_day_flag_ == &::google::protobuf::internal::kEmptyString) {
    week_day_flag_ = new ::std::string;
  }
  week_day_flag_->assign(value);
}
inline void ActivityConfig::set_week_day_flag(const char* value, size_t size) {
  SetDirty();
  set_has_week_day_flag();
  if (week_day_flag_ == &::google::protobuf::internal::kEmptyString) {
    week_day_flag_ = new ::std::string;
  }
  week_day_flag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActivityConfig::mutable_week_day_flag() {
  SetDirty();
  set_has_week_day_flag();
  if (week_day_flag_ == &::google::protobuf::internal::kEmptyString) {
    week_day_flag_ = new ::std::string;
  }
  return week_day_flag_;
}
inline ::std::string* ActivityConfig::release_week_day_flag() {
  SetDirty();
  clear_has_week_day_flag();
  if (week_day_flag_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = week_day_flag_;
    week_day_flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ActivityConfig::set_allocated_week_day_flag(::std::string* week_day_flag) {
  SetDirty();
  if (week_day_flag_ != &::google::protobuf::internal::kEmptyString) {
    delete week_day_flag_;
  }
  if (week_day_flag) {
    set_has_week_day_flag();
    week_day_flag_ = week_day_flag;
  } else {
    clear_has_week_day_flag();
    week_day_flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string during_week_flag = 13;
inline bool ActivityConfig::has_during_week_flag() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ActivityConfig::set_has_during_week_flag() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ActivityConfig::clear_has_during_week_flag() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ActivityConfig::clear_during_week_flag() {
  if (during_week_flag_ != &::google::protobuf::internal::kEmptyString) {
    during_week_flag_->clear();
  }
  clear_has_during_week_flag();
  SetDirty();
}
inline const ::std::string& ActivityConfig::during_week_flag() const {
  return *during_week_flag_;
}
inline void ActivityConfig::set_during_week_flag(const ::std::string& value) {
  SetDirty();
  set_has_during_week_flag();
  if (during_week_flag_ == &::google::protobuf::internal::kEmptyString) {
    during_week_flag_ = new ::std::string;
  }
  during_week_flag_->assign(value);
}
inline void ActivityConfig::set_during_week_flag(const char* value) {
  SetDirty();
  set_has_during_week_flag();
  if (during_week_flag_ == &::google::protobuf::internal::kEmptyString) {
    during_week_flag_ = new ::std::string;
  }
  during_week_flag_->assign(value);
}
inline void ActivityConfig::set_during_week_flag(const char* value, size_t size) {
  SetDirty();
  set_has_during_week_flag();
  if (during_week_flag_ == &::google::protobuf::internal::kEmptyString) {
    during_week_flag_ = new ::std::string;
  }
  during_week_flag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActivityConfig::mutable_during_week_flag() {
  SetDirty();
  set_has_during_week_flag();
  if (during_week_flag_ == &::google::protobuf::internal::kEmptyString) {
    during_week_flag_ = new ::std::string;
  }
  return during_week_flag_;
}
inline ::std::string* ActivityConfig::release_during_week_flag() {
  SetDirty();
  clear_has_during_week_flag();
  if (during_week_flag_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = during_week_flag_;
    during_week_flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ActivityConfig::set_allocated_during_week_flag(::std::string* during_week_flag) {
  SetDirty();
  if (during_week_flag_ != &::google::protobuf::internal::kEmptyString) {
    delete during_week_flag_;
  }
  if (during_week_flag) {
    set_has_during_week_flag();
    during_week_flag_ = during_week_flag;
  } else {
    clear_has_during_week_flag();
    during_week_flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 limit_times = 14;
inline bool ActivityConfig::has_limit_times() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ActivityConfig::set_has_limit_times() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ActivityConfig::clear_has_limit_times() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ActivityConfig::clear_limit_times() {
  limit_times_ = 0;
  clear_has_limit_times();
  SetDirty();
}
inline ::google::protobuf::int32 ActivityConfig::limit_times() const {
  return limit_times_;
}
inline void ActivityConfig::set_limit_times(::google::protobuf::int32 value) {
  SetDirty();
  set_has_limit_times();
  limit_times_ = value;
}

// required string day_begin_time = 15;
inline bool ActivityConfig::has_day_begin_time() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ActivityConfig::set_has_day_begin_time() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ActivityConfig::clear_has_day_begin_time() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ActivityConfig::clear_day_begin_time() {
  if (day_begin_time_ != &::google::protobuf::internal::kEmptyString) {
    day_begin_time_->clear();
  }
  clear_has_day_begin_time();
  SetDirty();
}
inline const ::std::string& ActivityConfig::day_begin_time() const {
  return *day_begin_time_;
}
inline void ActivityConfig::set_day_begin_time(const ::std::string& value) {
  SetDirty();
  set_has_day_begin_time();
  if (day_begin_time_ == &::google::protobuf::internal::kEmptyString) {
    day_begin_time_ = new ::std::string;
  }
  day_begin_time_->assign(value);
}
inline void ActivityConfig::set_day_begin_time(const char* value) {
  SetDirty();
  set_has_day_begin_time();
  if (day_begin_time_ == &::google::protobuf::internal::kEmptyString) {
    day_begin_time_ = new ::std::string;
  }
  day_begin_time_->assign(value);
}
inline void ActivityConfig::set_day_begin_time(const char* value, size_t size) {
  SetDirty();
  set_has_day_begin_time();
  if (day_begin_time_ == &::google::protobuf::internal::kEmptyString) {
    day_begin_time_ = new ::std::string;
  }
  day_begin_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActivityConfig::mutable_day_begin_time() {
  SetDirty();
  set_has_day_begin_time();
  if (day_begin_time_ == &::google::protobuf::internal::kEmptyString) {
    day_begin_time_ = new ::std::string;
  }
  return day_begin_time_;
}
inline ::std::string* ActivityConfig::release_day_begin_time() {
  SetDirty();
  clear_has_day_begin_time();
  if (day_begin_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = day_begin_time_;
    day_begin_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ActivityConfig::set_allocated_day_begin_time(::std::string* day_begin_time) {
  SetDirty();
  if (day_begin_time_ != &::google::protobuf::internal::kEmptyString) {
    delete day_begin_time_;
  }
  if (day_begin_time) {
    set_has_day_begin_time();
    day_begin_time_ = day_begin_time;
  } else {
    clear_has_day_begin_time();
    day_begin_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string day_end_time = 16;
inline bool ActivityConfig::has_day_end_time() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ActivityConfig::set_has_day_end_time() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ActivityConfig::clear_has_day_end_time() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ActivityConfig::clear_day_end_time() {
  if (day_end_time_ != &::google::protobuf::internal::kEmptyString) {
    day_end_time_->clear();
  }
  clear_has_day_end_time();
  SetDirty();
}
inline const ::std::string& ActivityConfig::day_end_time() const {
  return *day_end_time_;
}
inline void ActivityConfig::set_day_end_time(const ::std::string& value) {
  SetDirty();
  set_has_day_end_time();
  if (day_end_time_ == &::google::protobuf::internal::kEmptyString) {
    day_end_time_ = new ::std::string;
  }
  day_end_time_->assign(value);
}
inline void ActivityConfig::set_day_end_time(const char* value) {
  SetDirty();
  set_has_day_end_time();
  if (day_end_time_ == &::google::protobuf::internal::kEmptyString) {
    day_end_time_ = new ::std::string;
  }
  day_end_time_->assign(value);
}
inline void ActivityConfig::set_day_end_time(const char* value, size_t size) {
  SetDirty();
  set_has_day_end_time();
  if (day_end_time_ == &::google::protobuf::internal::kEmptyString) {
    day_end_time_ = new ::std::string;
  }
  day_end_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActivityConfig::mutable_day_end_time() {
  SetDirty();
  set_has_day_end_time();
  if (day_end_time_ == &::google::protobuf::internal::kEmptyString) {
    day_end_time_ = new ::std::string;
  }
  return day_end_time_;
}
inline ::std::string* ActivityConfig::release_day_end_time() {
  SetDirty();
  clear_has_day_end_time();
  if (day_end_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = day_end_time_;
    day_end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ActivityConfig::set_allocated_day_end_time(::std::string* day_end_time) {
  SetDirty();
  if (day_end_time_ != &::google::protobuf::internal::kEmptyString) {
    delete day_end_time_;
  }
  if (day_end_time) {
    set_has_day_end_time();
    day_end_time_ = day_end_time;
  } else {
    clear_has_day_end_time();
    day_end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string name = 17;
inline bool ActivityConfig::has_name() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ActivityConfig::set_has_name() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ActivityConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ActivityConfig::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
  SetDirty();
}
inline const ::std::string& ActivityConfig::name() const {
  return *name_;
}
inline void ActivityConfig::set_name(const ::std::string& value) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ActivityConfig::set_name(const char* value) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ActivityConfig::set_name(const char* value, size_t size) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActivityConfig::mutable_name() {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ActivityConfig::release_name() {
  SetDirty();
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ActivityConfig::set_allocated_name(::std::string* name) {
  SetDirty();
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 pre_notify = 18;
inline bool ActivityConfig::has_pre_notify() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ActivityConfig::set_has_pre_notify() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ActivityConfig::clear_has_pre_notify() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ActivityConfig::clear_pre_notify() {
  pre_notify_ = 0;
  clear_has_pre_notify();
  SetDirty();
}
inline ::google::protobuf::int32 ActivityConfig::pre_notify() const {
  return pre_notify_;
}
inline void ActivityConfig::set_pre_notify(::google::protobuf::int32 value) {
  SetDirty();
  set_has_pre_notify();
  pre_notify_ = value;
}

// required string notify_text = 19;
inline bool ActivityConfig::has_notify_text() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ActivityConfig::set_has_notify_text() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ActivityConfig::clear_has_notify_text() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ActivityConfig::clear_notify_text() {
  if (notify_text_ != &::google::protobuf::internal::kEmptyString) {
    notify_text_->clear();
  }
  clear_has_notify_text();
  SetDirty();
}
inline const ::std::string& ActivityConfig::notify_text() const {
  return *notify_text_;
}
inline void ActivityConfig::set_notify_text(const ::std::string& value) {
  SetDirty();
  set_has_notify_text();
  if (notify_text_ == &::google::protobuf::internal::kEmptyString) {
    notify_text_ = new ::std::string;
  }
  notify_text_->assign(value);
}
inline void ActivityConfig::set_notify_text(const char* value) {
  SetDirty();
  set_has_notify_text();
  if (notify_text_ == &::google::protobuf::internal::kEmptyString) {
    notify_text_ = new ::std::string;
  }
  notify_text_->assign(value);
}
inline void ActivityConfig::set_notify_text(const char* value, size_t size) {
  SetDirty();
  set_has_notify_text();
  if (notify_text_ == &::google::protobuf::internal::kEmptyString) {
    notify_text_ = new ::std::string;
  }
  notify_text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActivityConfig::mutable_notify_text() {
  SetDirty();
  set_has_notify_text();
  if (notify_text_ == &::google::protobuf::internal::kEmptyString) {
    notify_text_ = new ::std::string;
  }
  return notify_text_;
}
inline ::std::string* ActivityConfig::release_notify_text() {
  SetDirty();
  clear_has_notify_text();
  if (notify_text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notify_text_;
    notify_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ActivityConfig::set_allocated_notify_text(::std::string* notify_text) {
  SetDirty();
  if (notify_text_ != &::google::protobuf::internal::kEmptyString) {
    delete notify_text_;
  }
  if (notify_text) {
    set_has_notify_text();
    notify_text_ = notify_text;
  } else {
    clear_has_notify_text();
    notify_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TextAnswerConfig

// required int32 index = 1;
inline bool TextAnswerConfig::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TextAnswerConfig::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TextAnswerConfig::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TextAnswerConfig::clear_index() {
  index_ = 0;
  clear_has_index();
  SetDirty();
}
inline ::google::protobuf::int32 TextAnswerConfig::index() const {
  return index_;
}
inline void TextAnswerConfig::set_index(::google::protobuf::int32 value) {
  SetDirty();
  set_has_index();
  index_ = value;
}

// repeated string option = 2;
inline int TextAnswerConfig::option_size() const {
  return option_.size();
}
inline void TextAnswerConfig::clear_option() {
  option_.Clear();
  SetDirty();
}
inline const ::std::string& TextAnswerConfig::option(int index) const {
  return option_.Get(index);
}
inline ::std::string* TextAnswerConfig::mutable_option(int index) {
  SetDirty();
  return option_.Mutable(index);
}
inline void TextAnswerConfig::set_option(int index, const ::std::string& value) {
  SetDirty();
  option_.Mutable(index)->assign(value);
}
inline void TextAnswerConfig::set_option(int index, const char* value) {
  SetDirty();
  option_.Mutable(index)->assign(value);
}
inline void TextAnswerConfig::set_option(int index, const char* value, size_t size) {
  SetDirty();
  option_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TextAnswerConfig::add_option() {
  SetDirty();
  return option_.Add();
}
inline void TextAnswerConfig::add_option(const ::std::string& value) {
  SetDirty();
  option_.Add()->assign(value);
}
inline void TextAnswerConfig::add_option(const char* value) {
  SetDirty();
  option_.Add()->assign(value);
}
inline void TextAnswerConfig::add_option(const char* value, size_t size) {
  SetDirty();
  option_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TextAnswerConfig::option() const {
  return option_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TextAnswerConfig::mutable_option() {
  SetDirty();
  return &option_;
}

// required int32 weight = 3;
inline bool TextAnswerConfig::has_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TextAnswerConfig::set_has_weight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TextAnswerConfig::clear_has_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TextAnswerConfig::clear_weight() {
  weight_ = 0;
  clear_has_weight();
  SetDirty();
}
inline ::google::protobuf::int32 TextAnswerConfig::weight() const {
  return weight_;
}
inline void TextAnswerConfig::set_weight(::google::protobuf::int32 value) {
  SetDirty();
  set_has_weight();
  weight_ = value;
}

// -------------------------------------------------------------------

// PicAnswerConfig

// required int32 index = 1;
inline bool PicAnswerConfig::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PicAnswerConfig::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PicAnswerConfig::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PicAnswerConfig::clear_index() {
  index_ = 0;
  clear_has_index();
  SetDirty();
}
inline ::google::protobuf::int32 PicAnswerConfig::index() const {
  return index_;
}
inline void PicAnswerConfig::set_index(::google::protobuf::int32 value) {
  SetDirty();
  set_has_index();
  index_ = value;
}

// required int32 group = 2;
inline bool PicAnswerConfig::has_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PicAnswerConfig::set_has_group() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PicAnswerConfig::clear_has_group() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PicAnswerConfig::clear_group() {
  group_ = 0;
  clear_has_group();
  SetDirty();
}
inline ::google::protobuf::int32 PicAnswerConfig::group() const {
  return group_;
}
inline void PicAnswerConfig::set_group(::google::protobuf::int32 value) {
  SetDirty();
  set_has_group();
  group_ = value;
}

// repeated int32 option = 3;
inline int PicAnswerConfig::option_size() const {
  return option_.size();
}
inline void PicAnswerConfig::clear_option() {
  option_.Clear();
  SetDirty();
}
inline ::google::protobuf::int32 PicAnswerConfig::option(int index) const {
  return option_.Get(index);
}
inline void PicAnswerConfig::set_option(int index, ::google::protobuf::int32 value) {
  SetDirty();
  option_.Set(index, value);
}
inline void PicAnswerConfig::add_option(::google::protobuf::int32 value) {
  SetDirty();
  option_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PicAnswerConfig::option() const {
  return option_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PicAnswerConfig::mutable_option() {
  SetDirty();
  return &option_;
}

// required int32 weight = 4;
inline bool PicAnswerConfig::has_weight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PicAnswerConfig::set_has_weight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PicAnswerConfig::clear_has_weight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PicAnswerConfig::clear_weight() {
  weight_ = 0;
  clear_has_weight();
  SetDirty();
}
inline ::google::protobuf::int32 PicAnswerConfig::weight() const {
  return weight_;
}
inline void PicAnswerConfig::set_weight(::google::protobuf::int32 value) {
  SetDirty();
  set_has_weight();
  weight_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ActivityConfig_2eproto__INCLUDED
