// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TrapConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TrapConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Config {

namespace {

const ::google::protobuf::Descriptor* TrapConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrapConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TrapConfig_2eproto() {
  protobuf_AddDesc_TrapConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TrapConfig.proto");
  GOOGLE_CHECK(file != NULL);
  TrapConfig_descriptor_ = file->message_type(0);
  static const int TrapConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapConfig, last_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapConfig, damage_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapConfig, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapConfig, range_),
  };
  TrapConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrapConfig_descriptor_,
      TrapConfig::default_instance_,
      TrapConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrapConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TrapConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrapConfig_descriptor_, &TrapConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TrapConfig_2eproto() {
  delete TrapConfig::default_instance_;
  delete TrapConfig_reflection_;
}

void protobuf_AddDesc_TrapConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Packet::protobuf_AddDesc_AllPacketEnum_2eproto();
  ::Packet::protobuf_AddDesc_BattleInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020TrapConfig.proto\022\006Config\032\023AllPacketEnu"
    "m.proto\032\020BattleInfo.proto\"q\n\nTrapConfig\022"
    "\n\n\002id\030\001 \002(\005\022\021\n\tlast_time\030\002 \002(\005\022%\n\013damage"
    "_type\030\003 \002(\0162\020.Packet.Property\022\016\n\006damage\030"
    "\004 \002(\005\022\r\n\005range\030\005 \002(\002", 180);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TrapConfig.proto", &protobuf_RegisterTypes);
  TrapConfig::default_instance_ = new TrapConfig();
  TrapConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TrapConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TrapConfig_2eproto {
  StaticDescriptorInitializer_TrapConfig_2eproto() {
    protobuf_AddDesc_TrapConfig_2eproto();
  }
} static_descriptor_initializer_TrapConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TrapConfig::kIdFieldNumber;
const int TrapConfig::kLastTimeFieldNumber;
const int TrapConfig::kDamageTypeFieldNumber;
const int TrapConfig::kDamageFieldNumber;
const int TrapConfig::kRangeFieldNumber;
#endif  // !_MSC_VER

TrapConfig::TrapConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrapConfig::InitAsDefaultInstance() {
}

TrapConfig::TrapConfig(const TrapConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrapConfig::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  last_time_ = 0;
  damage_type_ = 0;
  damage_ = 0;
  range_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrapConfig::~TrapConfig() {
  SharedDtor();
}

void TrapConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrapConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrapConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrapConfig_descriptor_;
}

const TrapConfig& TrapConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TrapConfig_2eproto();
  return *default_instance_;
}

TrapConfig* TrapConfig::default_instance_ = NULL;

TrapConfig* TrapConfig::New() const {
  return new TrapConfig;
}

void TrapConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    last_time_ = 0;
    damage_type_ = 0;
    damage_ = 0;
    range_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool TrapConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_last_time;
        break;
      }

      // required int32 last_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_damage_type;
        break;
      }

      // required .Packet.Property damage_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::Property_IsValid(value)) {
            set_damage_type(static_cast< ::Packet::Property >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_damage;
        break;
      }

      // required int32 damage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_range;
        break;
      }

      // required float range = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_)));
          set_has_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void TrapConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 last_time = 2;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->last_time(), output);
  }

  // required .Packet.Property damage_type = 3;
  if (has_damage_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->damage_type(), output);
  }

  // required int32 damage = 4;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->damage(), output);
  }

  // required float range = 5;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->range(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrapConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 last_time = 2;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->last_time(), target);
  }

  // required .Packet.Property damage_type = 3;
  if (has_damage_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->damage_type(), target);
  }

  // required int32 damage = 4;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->damage(), target);
  }

  // required float range = 5;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->range(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrapConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 last_time = 2;
    if (has_last_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_time());
    }

    // required .Packet.Property damage_type = 3;
    if (has_damage_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->damage_type());
    }

    // required int32 damage = 4;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

    // required float range = 5;
    if (has_range()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrapConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrapConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrapConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void TrapConfig::MergeFrom(const TrapConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
    if (from.has_damage_type()) {
      set_damage_type(from.damage_type());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_range()) {
      set_range(from.range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void TrapConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void TrapConfig::CopyFrom(const TrapConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool TrapConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void TrapConfig::SetInitialized() {
  _has_bits_[0] |= 0x0000001f;

  return;
}

void TrapConfig::Swap(TrapConfig* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(last_time_, other->last_time_);
    std::swap(damage_type_, other->damage_type_);
    std::swap(damage_, other->damage_);
    std::swap(range_, other->range_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata TrapConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrapConfig_descriptor_;
  metadata.reflection = TrapConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config

// @@protoc_insertion_point(global_scope)
