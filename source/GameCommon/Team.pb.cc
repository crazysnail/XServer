// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Team.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Team.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Packet {

namespace {

const ::google::protobuf::Descriptor* PurposeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PurposeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamPlayerBasicInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamPlayerBasicInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetTeamHeroPositionReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetTeamHeroPositionReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetTeamHeroPositionReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetTeamHeroPositionReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateRobotTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateRobotTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeTeamTypeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeTeamTypeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateTeamTypeReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateTeamTypeReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeTeamArrangeTypeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeTeamArrangeTypeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateTeamArrangeTypeReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateTeamArrangeTypeReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyTeamReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyTeamReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyMissionTeamReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyMissionTeamReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LevelTeamReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LevelTeamReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskLevelTeamReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskLevelTeamReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgreeApplyTeamReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgreeApplyTeamReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteyAddTeamReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteyAddTeamReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskInviteyAgreeTeamReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskInviteyAgreeTeamReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteyAgreeTeamReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteyAgreeTeamReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddTeamReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddTeamReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveTeamReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveTeamReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetPurposeInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetPurposeInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PurposeInfoUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PurposeInfoUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetTeamAutoMatchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetTeamAutoMatchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamAutoMatchUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamAutoMatchUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamFullPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamFullPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamListInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamListInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmptyTeamReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmptyTeamReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamInfoReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* FindTeamListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FindTeamListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamListReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamListReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamApplyListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamApplyListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamApplyListReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamApplyListReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerAutoMatchInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerAutoMatchInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerAutoMatchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerAutoMatchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerAutoMatchReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerAutoMatchReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerSetTeamStatusReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerSetTeamStatusReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamPlayerBasicUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamPlayerBasicUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetTeamLeaderReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetTeamLeaderReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyTeamLeaderReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyTeamLeaderReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskApplyTeamLeaderReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskApplyTeamLeaderReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskApplyTeamLeaderReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskApplyTeamLeaderReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamLeaderUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamLeaderUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* RobotPlayerInOk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RobotPlayerInOk_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamAutomatchConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamAutomatchConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Team_2eproto() {
  protobuf_AddDesc_Team_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Team.proto");
  GOOGLE_CHECK(file != NULL);
  PurposeInfo_descriptor_ = file->message_type(0);
  static const int PurposeInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurposeInfo, purpose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurposeInfo, level_limt_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurposeInfo, level_limt_max_),
  };
  PurposeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PurposeInfo_descriptor_,
      PurposeInfo::default_instance_,
      PurposeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurposeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurposeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PurposeInfo));
  TeamPlayerBasicInfo_descriptor_ = file->message_type(1);
  static const int TeamPlayerBasicInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPlayerBasicInfo, playerstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPlayerBasicInfo, position_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPlayerBasicInfo, hero_position_),
  };
  TeamPlayerBasicInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamPlayerBasicInfo_descriptor_,
      TeamPlayerBasicInfo::default_instance_,
      TeamPlayerBasicInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPlayerBasicInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPlayerBasicInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamPlayerBasicInfo));
  TeamPlayerInfo_descriptor_ = file->message_type(2);
  static const int TeamPlayerInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPlayerInfo, playerguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPlayerInfo, teambaseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPlayerInfo, basic_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPlayerInfo, is_robot_),
  };
  TeamPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamPlayerInfo_descriptor_,
      TeamPlayerInfo::default_instance_,
      TeamPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamPlayerInfo));
  SetTeamHeroPositionReq_descriptor_ = file->message_type(3);
  static const int SetTeamHeroPositionReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamHeroPositionReq, position_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamHeroPositionReq, hero_position_),
  };
  SetTeamHeroPositionReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetTeamHeroPositionReq_descriptor_,
      SetTeamHeroPositionReq::default_instance_,
      SetTeamHeroPositionReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamHeroPositionReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamHeroPositionReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetTeamHeroPositionReq));
  SetTeamHeroPositionReply_descriptor_ = file->message_type(4);
  static const int SetTeamHeroPositionReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamHeroPositionReply, position_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamHeroPositionReply, hero_position_),
  };
  SetTeamHeroPositionReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetTeamHeroPositionReply_descriptor_,
      SetTeamHeroPositionReply::default_instance_,
      SetTeamHeroPositionReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamHeroPositionReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamHeroPositionReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetTeamHeroPositionReply));
  TeamInfo_descriptor_ = file->message_type(5);
  static const int TeamInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, arrangetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, applyleader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, agreeapplyleader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, agreeapplytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, auto_match_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, applylist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, purpose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, setposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, robot_team_),
  };
  TeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamInfo_descriptor_,
      TeamInfo::default_instance_,
      TeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamInfo));
  CreateTeam_descriptor_ = file->message_type(6);
  static const int CreateTeam_offsets_[1] = {
  };
  CreateTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateTeam_descriptor_,
      CreateTeam::default_instance_,
      CreateTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateTeam));
  CreateRobotTeam_descriptor_ = file->message_type(7);
  static const int CreateRobotTeam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRobotTeam, basic_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRobotTeam, one_key_id_),
  };
  CreateRobotTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateRobotTeam_descriptor_,
      CreateRobotTeam::default_instance_,
      CreateRobotTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRobotTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRobotTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateRobotTeam));
  DelTeam_descriptor_ = file->message_type(8);
  static const int DelTeam_offsets_[1] = {
  };
  DelTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelTeam_descriptor_,
      DelTeam::default_instance_,
      DelTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelTeam));
  ChangeTeamTypeReq_descriptor_ = file->message_type(9);
  static const int ChangeTeamTypeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeTeamTypeReq, group_),
  };
  ChangeTeamTypeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeTeamTypeReq_descriptor_,
      ChangeTeamTypeReq::default_instance_,
      ChangeTeamTypeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeTeamTypeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeTeamTypeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeTeamTypeReq));
  UpdateTeamTypeReply_descriptor_ = file->message_type(10);
  static const int UpdateTeamTypeReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTeamTypeReply, group_),
  };
  UpdateTeamTypeReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateTeamTypeReply_descriptor_,
      UpdateTeamTypeReply::default_instance_,
      UpdateTeamTypeReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTeamTypeReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTeamTypeReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateTeamTypeReply));
  ChangeTeamArrangeTypeReq_descriptor_ = file->message_type(11);
  static const int ChangeTeamArrangeTypeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeTeamArrangeTypeReq, type_),
  };
  ChangeTeamArrangeTypeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeTeamArrangeTypeReq_descriptor_,
      ChangeTeamArrangeTypeReq::default_instance_,
      ChangeTeamArrangeTypeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeTeamArrangeTypeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeTeamArrangeTypeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeTeamArrangeTypeReq));
  UpdateTeamArrangeTypeReply_descriptor_ = file->message_type(12);
  static const int UpdateTeamArrangeTypeReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTeamArrangeTypeReply, type_),
  };
  UpdateTeamArrangeTypeReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateTeamArrangeTypeReply_descriptor_,
      UpdateTeamArrangeTypeReply::default_instance_,
      UpdateTeamArrangeTypeReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTeamArrangeTypeReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTeamArrangeTypeReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateTeamArrangeTypeReply));
  ApplyTeamReq_descriptor_ = file->message_type(13);
  static const int ApplyTeamReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyTeamReq, guid_),
  };
  ApplyTeamReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyTeamReq_descriptor_,
      ApplyTeamReq::default_instance_,
      ApplyTeamReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyTeamReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyTeamReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyTeamReq));
  ApplyMissionTeamReq_descriptor_ = file->message_type(14);
  static const int ApplyMissionTeamReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyMissionTeamReq, srcplayer_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyMissionTeamReq, missionid_),
  };
  ApplyMissionTeamReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyMissionTeamReq_descriptor_,
      ApplyMissionTeamReq::default_instance_,
      ApplyMissionTeamReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyMissionTeamReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyMissionTeamReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyMissionTeamReq));
  LevelTeamReq_descriptor_ = file->message_type(15);
  static const int LevelTeamReq_offsets_[1] = {
  };
  LevelTeamReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LevelTeamReq_descriptor_,
      LevelTeamReq::default_instance_,
      LevelTeamReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelTeamReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelTeamReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LevelTeamReq));
  AskLevelTeamReq_descriptor_ = file->message_type(16);
  static const int AskLevelTeamReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskLevelTeamReq, playerguid_),
  };
  AskLevelTeamReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskLevelTeamReq_descriptor_,
      AskLevelTeamReq::default_instance_,
      AskLevelTeamReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskLevelTeamReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskLevelTeamReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskLevelTeamReq));
  AgreeApplyTeamReq_descriptor_ = file->message_type(17);
  static const int AgreeApplyTeamReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgreeApplyTeamReq, playerguid_),
  };
  AgreeApplyTeamReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgreeApplyTeamReq_descriptor_,
      AgreeApplyTeamReq::default_instance_,
      AgreeApplyTeamReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgreeApplyTeamReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgreeApplyTeamReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgreeApplyTeamReq));
  InviteyAddTeamReq_descriptor_ = file->message_type(18);
  static const int InviteyAddTeamReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteyAddTeamReq, playerguid_),
  };
  InviteyAddTeamReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteyAddTeamReq_descriptor_,
      InviteyAddTeamReq::default_instance_,
      InviteyAddTeamReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteyAddTeamReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteyAddTeamReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteyAddTeamReq));
  AskInviteyAgreeTeamReply_descriptor_ = file->message_type(19);
  static const int AskInviteyAgreeTeamReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskInviteyAgreeTeamReply, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskInviteyAgreeTeamReply, teaminvitename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskInviteyAgreeTeamReply, teaminviteguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskInviteyAgreeTeamReply, purpose_),
  };
  AskInviteyAgreeTeamReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskInviteyAgreeTeamReply_descriptor_,
      AskInviteyAgreeTeamReply::default_instance_,
      AskInviteyAgreeTeamReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskInviteyAgreeTeamReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskInviteyAgreeTeamReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskInviteyAgreeTeamReply));
  InviteyAgreeTeamReq_descriptor_ = file->message_type(20);
  static const int InviteyAgreeTeamReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteyAgreeTeamReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteyAgreeTeamReq, agree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteyAgreeTeamReq, teaminviteguid_),
  };
  InviteyAgreeTeamReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteyAgreeTeamReq_descriptor_,
      InviteyAgreeTeamReq::default_instance_,
      InviteyAgreeTeamReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteyAgreeTeamReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteyAgreeTeamReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteyAgreeTeamReq));
  AddTeamReply_descriptor_ = file->message_type(21);
  static const int AddTeamReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTeamReply, playerguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTeamReply, playername_),
  };
  AddTeamReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddTeamReply_descriptor_,
      AddTeamReply::default_instance_,
      AddTeamReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTeamReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTeamReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddTeamReply));
  LeaveTeamReply_descriptor_ = file->message_type(22);
  static const int LeaveTeamReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveTeamReply, playerguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveTeamReply, playername_),
  };
  LeaveTeamReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaveTeamReply_descriptor_,
      LeaveTeamReply::default_instance_,
      LeaveTeamReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveTeamReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveTeamReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaveTeamReply));
  SetPurposeInfoReq_descriptor_ = file->message_type(23);
  static const int SetPurposeInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPurposeInfoReq, purpose_),
  };
  SetPurposeInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetPurposeInfoReq_descriptor_,
      SetPurposeInfoReq::default_instance_,
      SetPurposeInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPurposeInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPurposeInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetPurposeInfoReq));
  PurposeInfoUpdate_descriptor_ = file->message_type(24);
  static const int PurposeInfoUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurposeInfoUpdate, purpose_),
  };
  PurposeInfoUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PurposeInfoUpdate_descriptor_,
      PurposeInfoUpdate::default_instance_,
      PurposeInfoUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurposeInfoUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PurposeInfoUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PurposeInfoUpdate));
  SetTeamAutoMatchReq_descriptor_ = file->message_type(25);
  static const int SetTeamAutoMatchReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamAutoMatchReq, auto_match_),
  };
  SetTeamAutoMatchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetTeamAutoMatchReq_descriptor_,
      SetTeamAutoMatchReq::default_instance_,
      SetTeamAutoMatchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamAutoMatchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamAutoMatchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetTeamAutoMatchReq));
  TeamAutoMatchUpdate_descriptor_ = file->message_type(26);
  static const int TeamAutoMatchUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamAutoMatchUpdate, auto_match_),
  };
  TeamAutoMatchUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamAutoMatchUpdate_descriptor_,
      TeamAutoMatchUpdate::default_instance_,
      TeamAutoMatchUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamAutoMatchUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamAutoMatchUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamAutoMatchUpdate));
  TeamFullPlayerInfo_descriptor_ = file->message_type(27);
  static const int TeamFullPlayerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamFullPlayerInfo, playerbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamFullPlayerInfo, teambaseinfo_),
  };
  TeamFullPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamFullPlayerInfo_descriptor_,
      TeamFullPlayerInfo::default_instance_,
      TeamFullPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamFullPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamFullPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamFullPlayerInfo));
  TeamListInfo_descriptor_ = file->message_type(28);
  static const int TeamListInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamListInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamListInfo, purpose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamListInfo, membersize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamListInfo, leadername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamListInfo, leaderlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamListInfo, init_actor_id_),
  };
  TeamListInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamListInfo_descriptor_,
      TeamListInfo::default_instance_,
      TeamListInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamListInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamListInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamListInfo));
  TeamInfoReq_descriptor_ = file->message_type(29);
  static const int TeamInfoReq_offsets_[1] = {
  };
  TeamInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamInfoReq_descriptor_,
      TeamInfoReq::default_instance_,
      TeamInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamInfoReq));
  EmptyTeamReply_descriptor_ = file->message_type(30);
  static const int EmptyTeamReply_offsets_[1] = {
  };
  EmptyTeamReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmptyTeamReply_descriptor_,
      EmptyTeamReply::default_instance_,
      EmptyTeamReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyTeamReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyTeamReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmptyTeamReply));
  TeamInfoReply_descriptor_ = file->message_type(31);
  static const int TeamInfoReply_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfoReply, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfoReply, member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfoReply, leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfoReply, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfoReply, arrangetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfoReply, purpose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfoReply, auto_match_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfoReply, applylist_),
  };
  TeamInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamInfoReply_descriptor_,
      TeamInfoReply::default_instance_,
      TeamInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamInfoReply));
  FindTeamListReq_descriptor_ = file->message_type(32);
  static const int FindTeamListReq_offsets_[1] = {
  };
  FindTeamListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FindTeamListReq_descriptor_,
      FindTeamListReq::default_instance_,
      FindTeamListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindTeamListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindTeamListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FindTeamListReq));
  TeamListReply_descriptor_ = file->message_type(33);
  static const int TeamListReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamListReply, teams_),
  };
  TeamListReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamListReply_descriptor_,
      TeamListReply::default_instance_,
      TeamListReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamListReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamListReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamListReply));
  TeamApplyListReq_descriptor_ = file->message_type(34);
  static const int TeamApplyListReq_offsets_[1] = {
  };
  TeamApplyListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamApplyListReq_descriptor_,
      TeamApplyListReq::default_instance_,
      TeamApplyListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamApplyListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamApplyListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamApplyListReq));
  TeamApplyListReply_descriptor_ = file->message_type(35);
  static const int TeamApplyListReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamApplyListReply, applylist_),
  };
  TeamApplyListReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamApplyListReply_descriptor_,
      TeamApplyListReply::default_instance_,
      TeamApplyListReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamApplyListReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamApplyListReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamApplyListReply));
  PlayerAutoMatchInfo_descriptor_ = file->message_type(36);
  static const int PlayerAutoMatchInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAutoMatchInfo, playerguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAutoMatchInfo, purpose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAutoMatchInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAutoMatchInfo, hero_position_),
  };
  PlayerAutoMatchInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerAutoMatchInfo_descriptor_,
      PlayerAutoMatchInfo::default_instance_,
      PlayerAutoMatchInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAutoMatchInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAutoMatchInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerAutoMatchInfo));
  PlayerAutoMatchReq_descriptor_ = file->message_type(37);
  static const int PlayerAutoMatchReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAutoMatchReq, auto_match_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAutoMatchReq, purpose_),
  };
  PlayerAutoMatchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerAutoMatchReq_descriptor_,
      PlayerAutoMatchReq::default_instance_,
      PlayerAutoMatchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAutoMatchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAutoMatchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerAutoMatchReq));
  PlayerAutoMatchReply_descriptor_ = file->message_type(38);
  static const int PlayerAutoMatchReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAutoMatchReply, auto_match_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAutoMatchReply, purpose_),
  };
  PlayerAutoMatchReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerAutoMatchReply_descriptor_,
      PlayerAutoMatchReply::default_instance_,
      PlayerAutoMatchReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAutoMatchReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAutoMatchReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerAutoMatchReply));
  PlayerSetTeamStatusReq_descriptor_ = file->message_type(39);
  static const int PlayerSetTeamStatusReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSetTeamStatusReq, status_),
  };
  PlayerSetTeamStatusReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerSetTeamStatusReq_descriptor_,
      PlayerSetTeamStatusReq::default_instance_,
      PlayerSetTeamStatusReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSetTeamStatusReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSetTeamStatusReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerSetTeamStatusReq));
  TeamPlayerBasicUpdate_descriptor_ = file->message_type(40);
  static const int TeamPlayerBasicUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPlayerBasicUpdate, playerinfo_),
  };
  TeamPlayerBasicUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamPlayerBasicUpdate_descriptor_,
      TeamPlayerBasicUpdate::default_instance_,
      TeamPlayerBasicUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPlayerBasicUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPlayerBasicUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamPlayerBasicUpdate));
  SetTeamLeaderReq_descriptor_ = file->message_type(41);
  static const int SetTeamLeaderReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamLeaderReq, playerguid_),
  };
  SetTeamLeaderReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetTeamLeaderReq_descriptor_,
      SetTeamLeaderReq::default_instance_,
      SetTeamLeaderReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamLeaderReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTeamLeaderReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetTeamLeaderReq));
  ApplyTeamLeaderReq_descriptor_ = file->message_type(42);
  static const int ApplyTeamLeaderReq_offsets_[1] = {
  };
  ApplyTeamLeaderReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyTeamLeaderReq_descriptor_,
      ApplyTeamLeaderReq::default_instance_,
      ApplyTeamLeaderReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyTeamLeaderReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyTeamLeaderReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyTeamLeaderReq));
  AskApplyTeamLeaderReq_descriptor_ = file->message_type(43);
  static const int AskApplyTeamLeaderReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskApplyTeamLeaderReq, playerguid_),
  };
  AskApplyTeamLeaderReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskApplyTeamLeaderReq_descriptor_,
      AskApplyTeamLeaderReq::default_instance_,
      AskApplyTeamLeaderReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskApplyTeamLeaderReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskApplyTeamLeaderReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskApplyTeamLeaderReq));
  AskApplyTeamLeaderReply_descriptor_ = file->message_type(44);
  static const int AskApplyTeamLeaderReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskApplyTeamLeaderReply, agree_),
  };
  AskApplyTeamLeaderReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskApplyTeamLeaderReply_descriptor_,
      AskApplyTeamLeaderReply::default_instance_,
      AskApplyTeamLeaderReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskApplyTeamLeaderReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskApplyTeamLeaderReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskApplyTeamLeaderReply));
  TeamLeaderUpdate_descriptor_ = file->message_type(45);
  static const int TeamLeaderUpdate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamLeaderUpdate, playerguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamLeaderUpdate, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamLeaderUpdate, move_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamLeaderUpdate, charge_),
  };
  TeamLeaderUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamLeaderUpdate_descriptor_,
      TeamLeaderUpdate::default_instance_,
      TeamLeaderUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamLeaderUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamLeaderUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamLeaderUpdate));
  RobotPlayerInOk_descriptor_ = file->message_type(46);
  static const int RobotPlayerInOk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPlayerInOk, basic_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPlayerInOk, one_key_id_),
  };
  RobotPlayerInOk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RobotPlayerInOk_descriptor_,
      RobotPlayerInOk::default_instance_,
      RobotPlayerInOk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPlayerInOk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotPlayerInOk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RobotPlayerInOk));
  TeamAutomatchConfig_descriptor_ = file->message_type(47);
  static const int TeamAutomatchConfig_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamAutomatchConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamAutomatchConfig, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamAutomatchConfig, defence_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamAutomatchConfig, cure_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamAutomatchConfig, attack_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamAutomatchConfig, need_defence_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamAutomatchConfig, need_cure_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamAutomatchConfig, need_attack_count_),
  };
  TeamAutomatchConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamAutomatchConfig_descriptor_,
      TeamAutomatchConfig::default_instance_,
      TeamAutomatchConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamAutomatchConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamAutomatchConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamAutomatchConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Team_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PurposeInfo_descriptor_, &PurposeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamPlayerBasicInfo_descriptor_, &TeamPlayerBasicInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamPlayerInfo_descriptor_, &TeamPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetTeamHeroPositionReq_descriptor_, &SetTeamHeroPositionReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetTeamHeroPositionReply_descriptor_, &SetTeamHeroPositionReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamInfo_descriptor_, &TeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateTeam_descriptor_, &CreateTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateRobotTeam_descriptor_, &CreateRobotTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelTeam_descriptor_, &DelTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeTeamTypeReq_descriptor_, &ChangeTeamTypeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateTeamTypeReply_descriptor_, &UpdateTeamTypeReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeTeamArrangeTypeReq_descriptor_, &ChangeTeamArrangeTypeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateTeamArrangeTypeReply_descriptor_, &UpdateTeamArrangeTypeReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyTeamReq_descriptor_, &ApplyTeamReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyMissionTeamReq_descriptor_, &ApplyMissionTeamReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LevelTeamReq_descriptor_, &LevelTeamReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskLevelTeamReq_descriptor_, &AskLevelTeamReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgreeApplyTeamReq_descriptor_, &AgreeApplyTeamReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteyAddTeamReq_descriptor_, &InviteyAddTeamReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskInviteyAgreeTeamReply_descriptor_, &AskInviteyAgreeTeamReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteyAgreeTeamReq_descriptor_, &InviteyAgreeTeamReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddTeamReply_descriptor_, &AddTeamReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaveTeamReply_descriptor_, &LeaveTeamReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetPurposeInfoReq_descriptor_, &SetPurposeInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PurposeInfoUpdate_descriptor_, &PurposeInfoUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetTeamAutoMatchReq_descriptor_, &SetTeamAutoMatchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamAutoMatchUpdate_descriptor_, &TeamAutoMatchUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamFullPlayerInfo_descriptor_, &TeamFullPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamListInfo_descriptor_, &TeamListInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamInfoReq_descriptor_, &TeamInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmptyTeamReply_descriptor_, &EmptyTeamReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamInfoReply_descriptor_, &TeamInfoReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FindTeamListReq_descriptor_, &FindTeamListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamListReply_descriptor_, &TeamListReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamApplyListReq_descriptor_, &TeamApplyListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamApplyListReply_descriptor_, &TeamApplyListReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerAutoMatchInfo_descriptor_, &PlayerAutoMatchInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerAutoMatchReq_descriptor_, &PlayerAutoMatchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerAutoMatchReply_descriptor_, &PlayerAutoMatchReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerSetTeamStatusReq_descriptor_, &PlayerSetTeamStatusReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamPlayerBasicUpdate_descriptor_, &TeamPlayerBasicUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetTeamLeaderReq_descriptor_, &SetTeamLeaderReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyTeamLeaderReq_descriptor_, &ApplyTeamLeaderReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskApplyTeamLeaderReq_descriptor_, &AskApplyTeamLeaderReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskApplyTeamLeaderReply_descriptor_, &AskApplyTeamLeaderReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamLeaderUpdate_descriptor_, &TeamLeaderUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RobotPlayerInOk_descriptor_, &RobotPlayerInOk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamAutomatchConfig_descriptor_, &TeamAutomatchConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Team_2eproto() {
  delete PurposeInfo::default_instance_;
  delete PurposeInfo_reflection_;
  delete TeamPlayerBasicInfo::default_instance_;
  delete TeamPlayerBasicInfo_reflection_;
  delete TeamPlayerInfo::default_instance_;
  delete TeamPlayerInfo_reflection_;
  delete SetTeamHeroPositionReq::default_instance_;
  delete SetTeamHeroPositionReq_reflection_;
  delete SetTeamHeroPositionReply::default_instance_;
  delete SetTeamHeroPositionReply_reflection_;
  delete TeamInfo::default_instance_;
  delete TeamInfo_reflection_;
  delete CreateTeam::default_instance_;
  delete CreateTeam_reflection_;
  delete CreateRobotTeam::default_instance_;
  delete CreateRobotTeam_reflection_;
  delete DelTeam::default_instance_;
  delete DelTeam_reflection_;
  delete ChangeTeamTypeReq::default_instance_;
  delete ChangeTeamTypeReq_reflection_;
  delete UpdateTeamTypeReply::default_instance_;
  delete UpdateTeamTypeReply_reflection_;
  delete ChangeTeamArrangeTypeReq::default_instance_;
  delete ChangeTeamArrangeTypeReq_reflection_;
  delete UpdateTeamArrangeTypeReply::default_instance_;
  delete UpdateTeamArrangeTypeReply_reflection_;
  delete ApplyTeamReq::default_instance_;
  delete ApplyTeamReq_reflection_;
  delete ApplyMissionTeamReq::default_instance_;
  delete ApplyMissionTeamReq_reflection_;
  delete LevelTeamReq::default_instance_;
  delete LevelTeamReq_reflection_;
  delete AskLevelTeamReq::default_instance_;
  delete AskLevelTeamReq_reflection_;
  delete AgreeApplyTeamReq::default_instance_;
  delete AgreeApplyTeamReq_reflection_;
  delete InviteyAddTeamReq::default_instance_;
  delete InviteyAddTeamReq_reflection_;
  delete AskInviteyAgreeTeamReply::default_instance_;
  delete AskInviteyAgreeTeamReply_reflection_;
  delete InviteyAgreeTeamReq::default_instance_;
  delete InviteyAgreeTeamReq_reflection_;
  delete AddTeamReply::default_instance_;
  delete AddTeamReply_reflection_;
  delete LeaveTeamReply::default_instance_;
  delete LeaveTeamReply_reflection_;
  delete SetPurposeInfoReq::default_instance_;
  delete SetPurposeInfoReq_reflection_;
  delete PurposeInfoUpdate::default_instance_;
  delete PurposeInfoUpdate_reflection_;
  delete SetTeamAutoMatchReq::default_instance_;
  delete SetTeamAutoMatchReq_reflection_;
  delete TeamAutoMatchUpdate::default_instance_;
  delete TeamAutoMatchUpdate_reflection_;
  delete TeamFullPlayerInfo::default_instance_;
  delete TeamFullPlayerInfo_reflection_;
  delete TeamListInfo::default_instance_;
  delete TeamListInfo_reflection_;
  delete TeamInfoReq::default_instance_;
  delete TeamInfoReq_reflection_;
  delete EmptyTeamReply::default_instance_;
  delete EmptyTeamReply_reflection_;
  delete TeamInfoReply::default_instance_;
  delete TeamInfoReply_reflection_;
  delete FindTeamListReq::default_instance_;
  delete FindTeamListReq_reflection_;
  delete TeamListReply::default_instance_;
  delete TeamListReply_reflection_;
  delete TeamApplyListReq::default_instance_;
  delete TeamApplyListReq_reflection_;
  delete TeamApplyListReply::default_instance_;
  delete TeamApplyListReply_reflection_;
  delete PlayerAutoMatchInfo::default_instance_;
  delete PlayerAutoMatchInfo_reflection_;
  delete PlayerAutoMatchReq::default_instance_;
  delete PlayerAutoMatchReq_reflection_;
  delete PlayerAutoMatchReply::default_instance_;
  delete PlayerAutoMatchReply_reflection_;
  delete PlayerSetTeamStatusReq::default_instance_;
  delete PlayerSetTeamStatusReq_reflection_;
  delete TeamPlayerBasicUpdate::default_instance_;
  delete TeamPlayerBasicUpdate_reflection_;
  delete SetTeamLeaderReq::default_instance_;
  delete SetTeamLeaderReq_reflection_;
  delete ApplyTeamLeaderReq::default_instance_;
  delete ApplyTeamLeaderReq_reflection_;
  delete AskApplyTeamLeaderReq::default_instance_;
  delete AskApplyTeamLeaderReq_reflection_;
  delete AskApplyTeamLeaderReply::default_instance_;
  delete AskApplyTeamLeaderReply_reflection_;
  delete TeamLeaderUpdate::default_instance_;
  delete TeamLeaderUpdate_reflection_;
  delete RobotPlayerInOk::default_instance_;
  delete RobotPlayerInOk_reflection_;
  delete TeamAutomatchConfig::default_instance_;
  delete TeamAutomatchConfig_reflection_;
}

void protobuf_AddDesc_Team_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Packet::protobuf_AddDesc_AllPacketEnum_2eproto();
  ::Packet::protobuf_AddDesc_PlayerBasicInfo_2eproto();
  ::Packet::protobuf_AddDesc_ItemAndEquip_2eproto();
  ::Packet::protobuf_AddDesc_ProtoBufOption_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nTeam.proto\022\006Packet\032\023AllPacketEnum.prot"
    "o\032\025PlayerBasicInfo.proto\032\022ItemAndEquip.p"
    "roto\032\024ProtoBufOption.proto\"N\n\013PurposeInf"
    "o\022\017\n\007purpose\030\001 \002(\005\022\026\n\016level_limt_min\030\002 \002"
    "(\005\022\026\n\016level_limt_max\030\003 \002(\005\"t\n\023TeamPlayer"
    "BasicInfo\022.\n\014playerstatus\030\001 \002(\0162\030.Packet"
    ".PlayerTeamStatus\022\026\n\016position_index\030\002 \002("
    "\005\022\025\n\rhero_position\030\003 \002(\005\"\226\001\n\016TeamPlayerI"
    "nfo\022\022\n\nplayerguid\030\001 \002(\006\0221\n\014teambaseinfo\030"
    "\002 \002(\0132\033.Packet.TeamPlayerBasicInfo\022+\n\nba"
    "sic_info\030\003 \001(\0132\027.Packet.PlayerBasicInfo\022"
    "\020\n\010is_robot\030\004 \001(\010\"G\n\026SetTeamHeroPosition"
    "Req\022\026\n\016position_index\030\001 \002(\005\022\025\n\rhero_posi"
    "tion\030\002 \002(\005\"I\n\030SetTeamHeroPositionReply\022\026"
    "\n\016position_index\030\001 \002(\005\022\025\n\rhero_position\030"
    "\002 \002(\005\"\314\002\n\010TeamInfo\022\014\n\004guid\030\001 \002(\006\022,\n\006memb"
    "er\030\002 \003(\0132\026.Packet.TeamPlayerInfoB\004\300\363\030\n\022\r"
    "\n\005group\030\003 \002(\010\022(\n\013arrangetype\030\004 \002(\0162\023.Pac"
    "ket.ArrangeType\022\016\n\006leader\030\005 \002(\006\022\023\n\013apply"
    "leader\030\006 \002(\006\022\030\n\020agreeapplyleader\030\007 \002(\010\022\026"
    "\n\016agreeapplytime\030\010 \002(\005\022\022\n\nauto_match\030\t \002"
    "(\010\022\021\n\tapplylist\030\n \003(\006\022$\n\007purpose\030\013 \002(\0132\023"
    ".Packet.PurposeInfo\022\023\n\013setposition\030\014 \002(\010"
    "\022\022\n\nrobot_team\030\r \001(\010\"\014\n\nCreateTeam\"R\n\017Cr"
    "eateRobotTeam\022+\n\nbasic_info\030\001 \003(\0132\027.Pack"
    "et.PlayerBasicInfo\022\022\n\none_key_id\030\002 \003(\005\"\t"
    "\n\007DelTeam\"\"\n\021ChangeTeamTypeReq\022\r\n\005group\030"
    "\001 \002(\010\"$\n\023UpdateTeamTypeReply\022\r\n\005group\030\001 "
    "\002(\010\"=\n\030ChangeTeamArrangeTypeReq\022!\n\004type\030"
    "\001 \002(\0162\023.Packet.ArrangeType\"\?\n\032UpdateTeam"
    "ArrangeTypeReply\022!\n\004type\030\001 \002(\0162\023.Packet."
    "ArrangeType\"\034\n\014ApplyTeamReq\022\014\n\004guid\030\001 \002("
    "\006\"@\n\023ApplyMissionTeamReq\022\026\n\016srcplayer_gu"
    "id\030\001 \002(\006\022\021\n\tmissionid\030\002 \002(\005\"\016\n\014LevelTeam"
    "Req\"%\n\017AskLevelTeamReq\022\022\n\nplayerguid\030\001 \002"
    "(\006\"\'\n\021AgreeApplyTeamReq\022\022\n\nplayerguid\030\001 "
    "\002(\006\"\'\n\021InviteyAddTeamReq\022\022\n\nplayerguid\030\001"
    " \002(\006\"k\n\030AskInviteyAgreeTeamReply\022\016\n\006team"
    "id\030\001 \002(\006\022\026\n\016teaminvitename\030\002 \002(\t\022\026\n\016team"
    "inviteguid\030\003 \002(\006\022\017\n\007purpose\030\004 \002(\005\"L\n\023Inv"
    "iteyAgreeTeamReq\022\016\n\006teamid\030\001 \002(\006\022\r\n\005agre"
    "e\030\002 \002(\010\022\026\n\016teaminviteguid\030\003 \002(\006\"6\n\014AddTe"
    "amReply\022\022\n\nplayerguid\030\001 \002(\006\022\022\n\nplayernam"
    "e\030\002 \002(\t\"8\n\016LeaveTeamReply\022\022\n\nplayerguid\030"
    "\001 \002(\006\022\022\n\nplayername\030\002 \002(\t\"9\n\021SetPurposeI"
    "nfoReq\022$\n\007purpose\030\001 \002(\0132\023.Packet.Purpose"
    "Info\"9\n\021PurposeInfoUpdate\022$\n\007purpose\030\001 \002"
    "(\0132\023.Packet.PurposeInfo\")\n\023SetTeamAutoMa"
    "tchReq\022\022\n\nauto_match\030\001 \002(\010\")\n\023TeamAutoMa"
    "tchUpdate\022\022\n\nauto_match\030\001 \002(\010\"t\n\022TeamFul"
    "lPlayerInfo\022+\n\nplayerbase\030\001 \001(\0132\027.Packet"
    ".PlayerBasicInfo\0221\n\014teambaseinfo\030\002 \002(\0132\033"
    ".Packet.TeamPlayerBasicInfo\"\201\001\n\014TeamList"
    "Info\022\014\n\004guid\030\001 \002(\006\022\017\n\007purpose\030\002 \002(\005\022\022\n\nm"
    "embersize\030\003 \002(\005\022\022\n\nleadername\030\004 \002(\t\022\023\n\013l"
    "eaderlevel\030\005 \002(\005\022\025\n\rinit_actor_id\030\006 \002(\005\""
    "\r\n\013TeamInfoReq\"\020\n\016EmptyTeamReply\"\370\001\n\rTea"
    "mInfoReply\022\014\n\004guid\030\001 \002(\006\022*\n\006member\030\002 \003(\013"
    "2\032.Packet.TeamFullPlayerInfo\022\016\n\006leader\030\003"
    " \002(\006\022\r\n\005group\030\004 \002(\010\022(\n\013arrangetype\030\005 \002(\016"
    "2\023.Packet.ArrangeType\022$\n\007purpose\030\006 \002(\0132\023"
    ".Packet.PurposeInfo\022\022\n\nauto_match\030\007 \002(\010\022"
    "*\n\tapplylist\030\010 \003(\0132\027.Packet.PlayerBasicI"
    "nfo\"\021\n\017FindTeamListReq\"4\n\rTeamListReply\022"
    "#\n\005teams\030\001 \003(\0132\024.Packet.TeamListInfo\"\022\n\020"
    "TeamApplyListReq\"@\n\022TeamApplyListReply\022*"
    "\n\tapplylist\030\001 \003(\0132\027.Packet.PlayerBasicIn"
    "fo\"`\n\023PlayerAutoMatchInfo\022\022\n\nplayerguid\030"
    "\001 \002(\006\022\017\n\007purpose\030\002 \002(\005\022\r\n\005level\030\003 \002(\005\022\025\n"
    "\rhero_position\030\004 \002(\005\"9\n\022PlayerAutoMatchR"
    "eq\022\022\n\nauto_match\030\001 \002(\010\022\017\n\007purpose\030\002 \002(\005\""
    ";\n\024PlayerAutoMatchReply\022\022\n\nauto_match\030\001 "
    "\002(\010\022\017\n\007purpose\030\002 \001(\005\"B\n\026PlayerSetTeamSta"
    "tusReq\022(\n\006status\030\001 \002(\0162\030.Packet.PlayerTe"
    "amStatus\"G\n\025TeamPlayerBasicUpdate\022.\n\npla"
    "yerinfo\030\001 \002(\0132\032.Packet.TeamFullPlayerInf"
    "o\"&\n\020SetTeamLeaderReq\022\022\n\nplayerguid\030\001 \002("
    "\006\"\024\n\022ApplyTeamLeaderReq\"+\n\025AskApplyTeamL"
    "eaderReq\022\022\n\nplayerguid\030\001 \002(\006\"(\n\027AskApply"
    "TeamLeaderReply\022\r\n\005agree\030\001 \002(\010\"^\n\020TeamLe"
    "aderUpdate\022\022\n\nplayerguid\030\001 \002(\006\022\022\n\nplayer"
    "name\030\002 \002(\t\022\022\n\nmove_speed\030\003 \002(\007\022\016\n\006charge"
    "\030\004 \002(\010\"R\n\017RobotPlayerInOk\022+\n\nbasic_info\030"
    "\001 \003(\0132\027.Packet.PlayerBasicInfo\022\022\n\none_ke"
    "y_id\030\002 \003(\005\"\301\001\n\023TeamAutomatchConfig\022\n\n\002id"
    "\030\001 \002(\005\022\r\n\005group\030\002 \002(\005\022\025\n\rdefence_count\030\003"
    " \002(\005\022\022\n\ncure_count\030\004 \002(\005\022\024\n\014attack_count"
    "\030\005 \002(\005\022\032\n\022need_defence_count\030\006 \002(\005\022\027\n\017ne"
    "ed_cure_count\030\007 \002(\005\022\031\n\021need_attack_count"
    "\030\010 \002(\005", 3566);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Team.proto", &protobuf_RegisterTypes);
  PurposeInfo::default_instance_ = new PurposeInfo();
  TeamPlayerBasicInfo::default_instance_ = new TeamPlayerBasicInfo();
  TeamPlayerInfo::default_instance_ = new TeamPlayerInfo();
  SetTeamHeroPositionReq::default_instance_ = new SetTeamHeroPositionReq();
  SetTeamHeroPositionReply::default_instance_ = new SetTeamHeroPositionReply();
  TeamInfo::default_instance_ = new TeamInfo();
  CreateTeam::default_instance_ = new CreateTeam();
  CreateRobotTeam::default_instance_ = new CreateRobotTeam();
  DelTeam::default_instance_ = new DelTeam();
  ChangeTeamTypeReq::default_instance_ = new ChangeTeamTypeReq();
  UpdateTeamTypeReply::default_instance_ = new UpdateTeamTypeReply();
  ChangeTeamArrangeTypeReq::default_instance_ = new ChangeTeamArrangeTypeReq();
  UpdateTeamArrangeTypeReply::default_instance_ = new UpdateTeamArrangeTypeReply();
  ApplyTeamReq::default_instance_ = new ApplyTeamReq();
  ApplyMissionTeamReq::default_instance_ = new ApplyMissionTeamReq();
  LevelTeamReq::default_instance_ = new LevelTeamReq();
  AskLevelTeamReq::default_instance_ = new AskLevelTeamReq();
  AgreeApplyTeamReq::default_instance_ = new AgreeApplyTeamReq();
  InviteyAddTeamReq::default_instance_ = new InviteyAddTeamReq();
  AskInviteyAgreeTeamReply::default_instance_ = new AskInviteyAgreeTeamReply();
  InviteyAgreeTeamReq::default_instance_ = new InviteyAgreeTeamReq();
  AddTeamReply::default_instance_ = new AddTeamReply();
  LeaveTeamReply::default_instance_ = new LeaveTeamReply();
  SetPurposeInfoReq::default_instance_ = new SetPurposeInfoReq();
  PurposeInfoUpdate::default_instance_ = new PurposeInfoUpdate();
  SetTeamAutoMatchReq::default_instance_ = new SetTeamAutoMatchReq();
  TeamAutoMatchUpdate::default_instance_ = new TeamAutoMatchUpdate();
  TeamFullPlayerInfo::default_instance_ = new TeamFullPlayerInfo();
  TeamListInfo::default_instance_ = new TeamListInfo();
  TeamInfoReq::default_instance_ = new TeamInfoReq();
  EmptyTeamReply::default_instance_ = new EmptyTeamReply();
  TeamInfoReply::default_instance_ = new TeamInfoReply();
  FindTeamListReq::default_instance_ = new FindTeamListReq();
  TeamListReply::default_instance_ = new TeamListReply();
  TeamApplyListReq::default_instance_ = new TeamApplyListReq();
  TeamApplyListReply::default_instance_ = new TeamApplyListReply();
  PlayerAutoMatchInfo::default_instance_ = new PlayerAutoMatchInfo();
  PlayerAutoMatchReq::default_instance_ = new PlayerAutoMatchReq();
  PlayerAutoMatchReply::default_instance_ = new PlayerAutoMatchReply();
  PlayerSetTeamStatusReq::default_instance_ = new PlayerSetTeamStatusReq();
  TeamPlayerBasicUpdate::default_instance_ = new TeamPlayerBasicUpdate();
  SetTeamLeaderReq::default_instance_ = new SetTeamLeaderReq();
  ApplyTeamLeaderReq::default_instance_ = new ApplyTeamLeaderReq();
  AskApplyTeamLeaderReq::default_instance_ = new AskApplyTeamLeaderReq();
  AskApplyTeamLeaderReply::default_instance_ = new AskApplyTeamLeaderReply();
  TeamLeaderUpdate::default_instance_ = new TeamLeaderUpdate();
  RobotPlayerInOk::default_instance_ = new RobotPlayerInOk();
  TeamAutomatchConfig::default_instance_ = new TeamAutomatchConfig();
  PurposeInfo::default_instance_->InitAsDefaultInstance();
  TeamPlayerBasicInfo::default_instance_->InitAsDefaultInstance();
  TeamPlayerInfo::default_instance_->InitAsDefaultInstance();
  SetTeamHeroPositionReq::default_instance_->InitAsDefaultInstance();
  SetTeamHeroPositionReply::default_instance_->InitAsDefaultInstance();
  TeamInfo::default_instance_->InitAsDefaultInstance();
  CreateTeam::default_instance_->InitAsDefaultInstance();
  CreateRobotTeam::default_instance_->InitAsDefaultInstance();
  DelTeam::default_instance_->InitAsDefaultInstance();
  ChangeTeamTypeReq::default_instance_->InitAsDefaultInstance();
  UpdateTeamTypeReply::default_instance_->InitAsDefaultInstance();
  ChangeTeamArrangeTypeReq::default_instance_->InitAsDefaultInstance();
  UpdateTeamArrangeTypeReply::default_instance_->InitAsDefaultInstance();
  ApplyTeamReq::default_instance_->InitAsDefaultInstance();
  ApplyMissionTeamReq::default_instance_->InitAsDefaultInstance();
  LevelTeamReq::default_instance_->InitAsDefaultInstance();
  AskLevelTeamReq::default_instance_->InitAsDefaultInstance();
  AgreeApplyTeamReq::default_instance_->InitAsDefaultInstance();
  InviteyAddTeamReq::default_instance_->InitAsDefaultInstance();
  AskInviteyAgreeTeamReply::default_instance_->InitAsDefaultInstance();
  InviteyAgreeTeamReq::default_instance_->InitAsDefaultInstance();
  AddTeamReply::default_instance_->InitAsDefaultInstance();
  LeaveTeamReply::default_instance_->InitAsDefaultInstance();
  SetPurposeInfoReq::default_instance_->InitAsDefaultInstance();
  PurposeInfoUpdate::default_instance_->InitAsDefaultInstance();
  SetTeamAutoMatchReq::default_instance_->InitAsDefaultInstance();
  TeamAutoMatchUpdate::default_instance_->InitAsDefaultInstance();
  TeamFullPlayerInfo::default_instance_->InitAsDefaultInstance();
  TeamListInfo::default_instance_->InitAsDefaultInstance();
  TeamInfoReq::default_instance_->InitAsDefaultInstance();
  EmptyTeamReply::default_instance_->InitAsDefaultInstance();
  TeamInfoReply::default_instance_->InitAsDefaultInstance();
  FindTeamListReq::default_instance_->InitAsDefaultInstance();
  TeamListReply::default_instance_->InitAsDefaultInstance();
  TeamApplyListReq::default_instance_->InitAsDefaultInstance();
  TeamApplyListReply::default_instance_->InitAsDefaultInstance();
  PlayerAutoMatchInfo::default_instance_->InitAsDefaultInstance();
  PlayerAutoMatchReq::default_instance_->InitAsDefaultInstance();
  PlayerAutoMatchReply::default_instance_->InitAsDefaultInstance();
  PlayerSetTeamStatusReq::default_instance_->InitAsDefaultInstance();
  TeamPlayerBasicUpdate::default_instance_->InitAsDefaultInstance();
  SetTeamLeaderReq::default_instance_->InitAsDefaultInstance();
  ApplyTeamLeaderReq::default_instance_->InitAsDefaultInstance();
  AskApplyTeamLeaderReq::default_instance_->InitAsDefaultInstance();
  AskApplyTeamLeaderReply::default_instance_->InitAsDefaultInstance();
  TeamLeaderUpdate::default_instance_->InitAsDefaultInstance();
  RobotPlayerInOk::default_instance_->InitAsDefaultInstance();
  TeamAutomatchConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Team_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Team_2eproto {
  StaticDescriptorInitializer_Team_2eproto() {
    protobuf_AddDesc_Team_2eproto();
  }
} static_descriptor_initializer_Team_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PurposeInfo::kPurposeFieldNumber;
const int PurposeInfo::kLevelLimtMinFieldNumber;
const int PurposeInfo::kLevelLimtMaxFieldNumber;
#endif  // !_MSC_VER

PurposeInfo::PurposeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PurposeInfo::InitAsDefaultInstance() {
}

PurposeInfo::PurposeInfo(const PurposeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PurposeInfo::SharedCtor() {
  _cached_size_ = 0;
  purpose_ = 0;
  level_limt_min_ = 0;
  level_limt_max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PurposeInfo::~PurposeInfo() {
  SharedDtor();
}

void PurposeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PurposeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PurposeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PurposeInfo_descriptor_;
}

const PurposeInfo& PurposeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

PurposeInfo* PurposeInfo::default_instance_ = NULL;

PurposeInfo* PurposeInfo::New() const {
  return new PurposeInfo;
}

void PurposeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    purpose_ = 0;
    level_limt_min_ = 0;
    level_limt_max_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PurposeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 purpose = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &purpose_)));
          set_has_purpose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level_limt_min;
        break;
      }

      // required int32 level_limt_min = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level_limt_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_limt_min_)));
          set_has_level_limt_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level_limt_max;
        break;
      }

      // required int32 level_limt_max = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level_limt_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_limt_max_)));
          set_has_level_limt_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PurposeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 purpose = 1;
  if (has_purpose()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->purpose(), output);
  }

  // required int32 level_limt_min = 2;
  if (has_level_limt_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level_limt_min(), output);
  }

  // required int32 level_limt_max = 3;
  if (has_level_limt_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level_limt_max(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PurposeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 purpose = 1;
  if (has_purpose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->purpose(), target);
  }

  // required int32 level_limt_min = 2;
  if (has_level_limt_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level_limt_min(), target);
  }

  // required int32 level_limt_max = 3;
  if (has_level_limt_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level_limt_max(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PurposeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 purpose = 1;
    if (has_purpose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->purpose());
    }

    // required int32 level_limt_min = 2;
    if (has_level_limt_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level_limt_min());
    }

    // required int32 level_limt_max = 3;
    if (has_level_limt_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level_limt_max());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PurposeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PurposeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PurposeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PurposeInfo::MergeFrom(const PurposeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_purpose()) {
      set_purpose(from.purpose());
    }
    if (from.has_level_limt_min()) {
      set_level_limt_min(from.level_limt_min());
    }
    if (from.has_level_limt_max()) {
      set_level_limt_max(from.level_limt_max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PurposeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PurposeInfo::CopyFrom(const PurposeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PurposeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PurposeInfo::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  return;
}

void PurposeInfo::Swap(PurposeInfo* other) {
  if (other != this) {
    std::swap(purpose_, other->purpose_);
    std::swap(level_limt_min_, other->level_limt_min_);
    std::swap(level_limt_max_, other->level_limt_max_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PurposeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PurposeInfo_descriptor_;
  metadata.reflection = PurposeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamPlayerBasicInfo::kPlayerstatusFieldNumber;
const int TeamPlayerBasicInfo::kPositionIndexFieldNumber;
const int TeamPlayerBasicInfo::kHeroPositionFieldNumber;
#endif  // !_MSC_VER

TeamPlayerBasicInfo::TeamPlayerBasicInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamPlayerBasicInfo::InitAsDefaultInstance() {
}

TeamPlayerBasicInfo::TeamPlayerBasicInfo(const TeamPlayerBasicInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamPlayerBasicInfo::SharedCtor() {
  _cached_size_ = 0;
  playerstatus_ = 0;
  position_index_ = 0;
  hero_position_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamPlayerBasicInfo::~TeamPlayerBasicInfo() {
  SharedDtor();
}

void TeamPlayerBasicInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamPlayerBasicInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamPlayerBasicInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamPlayerBasicInfo_descriptor_;
}

const TeamPlayerBasicInfo& TeamPlayerBasicInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

TeamPlayerBasicInfo* TeamPlayerBasicInfo::default_instance_ = NULL;

TeamPlayerBasicInfo* TeamPlayerBasicInfo::New() const {
  return new TeamPlayerBasicInfo;
}

void TeamPlayerBasicInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerstatus_ = 0;
    position_index_ = 0;
    hero_position_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool TeamPlayerBasicInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.PlayerTeamStatus playerstatus = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::PlayerTeamStatus_IsValid(value)) {
            set_playerstatus(static_cast< ::Packet::PlayerTeamStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_position_index;
        break;
      }

      // required int32 position_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_index_)));
          set_has_position_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hero_position;
        break;
      }

      // required int32 hero_position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_position_)));
          set_has_hero_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void TeamPlayerBasicInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.PlayerTeamStatus playerstatus = 1;
  if (has_playerstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->playerstatus(), output);
  }

  // required int32 position_index = 2;
  if (has_position_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->position_index(), output);
  }

  // required int32 hero_position = 3;
  if (has_hero_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hero_position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamPlayerBasicInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.PlayerTeamStatus playerstatus = 1;
  if (has_playerstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->playerstatus(), target);
  }

  // required int32 position_index = 2;
  if (has_position_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->position_index(), target);
  }

  // required int32 hero_position = 3;
  if (has_hero_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hero_position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamPlayerBasicInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.PlayerTeamStatus playerstatus = 1;
    if (has_playerstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->playerstatus());
    }

    // required int32 position_index = 2;
    if (has_position_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position_index());
    }

    // required int32 hero_position = 3;
    if (has_hero_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamPlayerBasicInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamPlayerBasicInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamPlayerBasicInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void TeamPlayerBasicInfo::MergeFrom(const TeamPlayerBasicInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerstatus()) {
      set_playerstatus(from.playerstatus());
    }
    if (from.has_position_index()) {
      set_position_index(from.position_index());
    }
    if (from.has_hero_position()) {
      set_hero_position(from.hero_position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void TeamPlayerBasicInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void TeamPlayerBasicInfo::CopyFrom(const TeamPlayerBasicInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool TeamPlayerBasicInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TeamPlayerBasicInfo::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  return;
}

void TeamPlayerBasicInfo::Swap(TeamPlayerBasicInfo* other) {
  if (other != this) {
    std::swap(playerstatus_, other->playerstatus_);
    std::swap(position_index_, other->position_index_);
    std::swap(hero_position_, other->hero_position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata TeamPlayerBasicInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamPlayerBasicInfo_descriptor_;
  metadata.reflection = TeamPlayerBasicInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamPlayerInfo::kPlayerguidFieldNumber;
const int TeamPlayerInfo::kTeambaseinfoFieldNumber;
const int TeamPlayerInfo::kBasicInfoFieldNumber;
const int TeamPlayerInfo::kIsRobotFieldNumber;
#endif  // !_MSC_VER

TeamPlayerInfo::TeamPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamPlayerInfo::InitAsDefaultInstance() {
  teambaseinfo_ = const_cast< ::Packet::TeamPlayerBasicInfo*>(&::Packet::TeamPlayerBasicInfo::default_instance());
  basic_info_ = const_cast< ::Packet::PlayerBasicInfo*>(&::Packet::PlayerBasicInfo::default_instance());
}

TeamPlayerInfo::TeamPlayerInfo(const TeamPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  playerguid_ = GOOGLE_ULONGLONG(0);
  teambaseinfo_ = NULL;
  basic_info_ = NULL;
  is_robot_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamPlayerInfo::~TeamPlayerInfo() {
  SharedDtor();
}

void TeamPlayerInfo::SharedDtor() {
  if (this != default_instance_) {
    delete teambaseinfo_;
    delete basic_info_;
  }
}

void TeamPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamPlayerInfo_descriptor_;
}

const TeamPlayerInfo& TeamPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

TeamPlayerInfo* TeamPlayerInfo::default_instance_ = NULL;

TeamPlayerInfo* TeamPlayerInfo::New() const {
  return new TeamPlayerInfo;
}

void TeamPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerguid_ = GOOGLE_ULONGLONG(0);
    if (has_teambaseinfo()) {
      if (teambaseinfo_ != NULL) teambaseinfo_->::Packet::TeamPlayerBasicInfo::Clear();
    }
    if (has_basic_info()) {
      if (basic_info_ != NULL) basic_info_->::Packet::PlayerBasicInfo::Clear();
    }
    is_robot_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool TeamPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 playerguid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &playerguid_)));
          set_has_playerguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_teambaseinfo;
        break;
      }

      // required .Packet.TeamPlayerBasicInfo teambaseinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teambaseinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teambaseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_basic_info;
        break;
      }

      // optional .Packet.PlayerBasicInfo basic_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_basic_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basic_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_robot;
        break;
      }

      // optional bool is_robot = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_robot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_robot_)));
          set_has_is_robot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void TeamPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 playerguid = 1;
  if (has_playerguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->playerguid(), output);
  }

  // required .Packet.TeamPlayerBasicInfo teambaseinfo = 2;
  if (has_teambaseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->teambaseinfo(), output);
  }

  // optional .Packet.PlayerBasicInfo basic_info = 3;
  if (has_basic_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->basic_info(), output);
  }

  // optional bool is_robot = 4;
  if (has_is_robot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_robot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 playerguid = 1;
  if (has_playerguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->playerguid(), target);
  }

  // required .Packet.TeamPlayerBasicInfo teambaseinfo = 2;
  if (has_teambaseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->teambaseinfo(), target);
  }

  // optional .Packet.PlayerBasicInfo basic_info = 3;
  if (has_basic_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->basic_info(), target);
  }

  // optional bool is_robot = 4;
  if (has_is_robot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_robot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 playerguid = 1;
    if (has_playerguid()) {
      total_size += 1 + 8;
    }

    // required .Packet.TeamPlayerBasicInfo teambaseinfo = 2;
    if (has_teambaseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teambaseinfo());
    }

    // optional .Packet.PlayerBasicInfo basic_info = 3;
    if (has_basic_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basic_info());
    }

    // optional bool is_robot = 4;
    if (has_is_robot()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void TeamPlayerInfo::MergeFrom(const TeamPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerguid()) {
      set_playerguid(from.playerguid());
    }
    if (from.has_teambaseinfo()) {
      mutable_teambaseinfo()->::Packet::TeamPlayerBasicInfo::MergeFrom(from.teambaseinfo());
    }
    if (from.has_basic_info()) {
      mutable_basic_info()->::Packet::PlayerBasicInfo::MergeFrom(from.basic_info());
    }
    if (from.has_is_robot()) {
      set_is_robot(from.is_robot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void TeamPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void TeamPlayerInfo::CopyFrom(const TeamPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool TeamPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_teambaseinfo()) {
    if (!this->teambaseinfo().IsInitialized()) return false;
  }
  if (has_basic_info()) {
    if (!this->basic_info().IsInitialized()) return false;
  }
  return true;
}

void TeamPlayerInfo::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  if (has_teambaseinfo()) {
    this->mutable_teambaseinfo()->SetInitialized();
  }
  if (has_basic_info()) {
    this->mutable_basic_info()->SetInitialized();
  }
  return;
}

void TeamPlayerInfo::Swap(TeamPlayerInfo* other) {
  if (other != this) {
    std::swap(playerguid_, other->playerguid_);
    std::swap(teambaseinfo_, other->teambaseinfo_);
    std::swap(basic_info_, other->basic_info_);
    std::swap(is_robot_, other->is_robot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata TeamPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamPlayerInfo_descriptor_;
  metadata.reflection = TeamPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetTeamHeroPositionReq::kPositionIndexFieldNumber;
const int SetTeamHeroPositionReq::kHeroPositionFieldNumber;
#endif  // !_MSC_VER

SetTeamHeroPositionReq::SetTeamHeroPositionReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetTeamHeroPositionReq::InitAsDefaultInstance() {
}

SetTeamHeroPositionReq::SetTeamHeroPositionReq(const SetTeamHeroPositionReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetTeamHeroPositionReq::SharedCtor() {
  _cached_size_ = 0;
  position_index_ = 0;
  hero_position_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetTeamHeroPositionReq::~SetTeamHeroPositionReq() {
  SharedDtor();
}

void SetTeamHeroPositionReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetTeamHeroPositionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetTeamHeroPositionReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetTeamHeroPositionReq_descriptor_;
}

const SetTeamHeroPositionReq& SetTeamHeroPositionReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

SetTeamHeroPositionReq* SetTeamHeroPositionReq::default_instance_ = NULL;

SetTeamHeroPositionReq* SetTeamHeroPositionReq::New() const {
  return new SetTeamHeroPositionReq;
}

void SetTeamHeroPositionReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    position_index_ = 0;
    hero_position_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SetTeamHeroPositionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 position_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_index_)));
          set_has_position_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_position;
        break;
      }

      // required int32 hero_position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_position_)));
          set_has_hero_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SetTeamHeroPositionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 position_index = 1;
  if (has_position_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->position_index(), output);
  }

  // required int32 hero_position = 2;
  if (has_hero_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hero_position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetTeamHeroPositionReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 position_index = 1;
  if (has_position_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->position_index(), target);
  }

  // required int32 hero_position = 2;
  if (has_hero_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hero_position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetTeamHeroPositionReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 position_index = 1;
    if (has_position_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position_index());
    }

    // required int32 hero_position = 2;
    if (has_hero_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetTeamHeroPositionReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetTeamHeroPositionReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetTeamHeroPositionReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SetTeamHeroPositionReq::MergeFrom(const SetTeamHeroPositionReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position_index()) {
      set_position_index(from.position_index());
    }
    if (from.has_hero_position()) {
      set_hero_position(from.hero_position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SetTeamHeroPositionReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SetTeamHeroPositionReq::CopyFrom(const SetTeamHeroPositionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SetTeamHeroPositionReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SetTeamHeroPositionReq::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void SetTeamHeroPositionReq::Swap(SetTeamHeroPositionReq* other) {
  if (other != this) {
    std::swap(position_index_, other->position_index_);
    std::swap(hero_position_, other->hero_position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SetTeamHeroPositionReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetTeamHeroPositionReq_descriptor_;
  metadata.reflection = SetTeamHeroPositionReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetTeamHeroPositionReply::kPositionIndexFieldNumber;
const int SetTeamHeroPositionReply::kHeroPositionFieldNumber;
#endif  // !_MSC_VER

SetTeamHeroPositionReply::SetTeamHeroPositionReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetTeamHeroPositionReply::InitAsDefaultInstance() {
}

SetTeamHeroPositionReply::SetTeamHeroPositionReply(const SetTeamHeroPositionReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetTeamHeroPositionReply::SharedCtor() {
  _cached_size_ = 0;
  position_index_ = 0;
  hero_position_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetTeamHeroPositionReply::~SetTeamHeroPositionReply() {
  SharedDtor();
}

void SetTeamHeroPositionReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetTeamHeroPositionReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetTeamHeroPositionReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetTeamHeroPositionReply_descriptor_;
}

const SetTeamHeroPositionReply& SetTeamHeroPositionReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

SetTeamHeroPositionReply* SetTeamHeroPositionReply::default_instance_ = NULL;

SetTeamHeroPositionReply* SetTeamHeroPositionReply::New() const {
  return new SetTeamHeroPositionReply;
}

void SetTeamHeroPositionReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    position_index_ = 0;
    hero_position_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SetTeamHeroPositionReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 position_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_index_)));
          set_has_position_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_position;
        break;
      }

      // required int32 hero_position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_position_)));
          set_has_hero_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SetTeamHeroPositionReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 position_index = 1;
  if (has_position_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->position_index(), output);
  }

  // required int32 hero_position = 2;
  if (has_hero_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hero_position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetTeamHeroPositionReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 position_index = 1;
  if (has_position_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->position_index(), target);
  }

  // required int32 hero_position = 2;
  if (has_hero_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hero_position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetTeamHeroPositionReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 position_index = 1;
    if (has_position_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position_index());
    }

    // required int32 hero_position = 2;
    if (has_hero_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetTeamHeroPositionReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetTeamHeroPositionReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetTeamHeroPositionReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SetTeamHeroPositionReply::MergeFrom(const SetTeamHeroPositionReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position_index()) {
      set_position_index(from.position_index());
    }
    if (from.has_hero_position()) {
      set_hero_position(from.hero_position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SetTeamHeroPositionReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SetTeamHeroPositionReply::CopyFrom(const SetTeamHeroPositionReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SetTeamHeroPositionReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SetTeamHeroPositionReply::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void SetTeamHeroPositionReply::Swap(SetTeamHeroPositionReply* other) {
  if (other != this) {
    std::swap(position_index_, other->position_index_);
    std::swap(hero_position_, other->hero_position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SetTeamHeroPositionReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetTeamHeroPositionReply_descriptor_;
  metadata.reflection = SetTeamHeroPositionReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamInfo::kGuidFieldNumber;
const int TeamInfo::kMemberFieldNumber;
const int TeamInfo::kGroupFieldNumber;
const int TeamInfo::kArrangetypeFieldNumber;
const int TeamInfo::kLeaderFieldNumber;
const int TeamInfo::kApplyleaderFieldNumber;
const int TeamInfo::kAgreeapplyleaderFieldNumber;
const int TeamInfo::kAgreeapplytimeFieldNumber;
const int TeamInfo::kAutoMatchFieldNumber;
const int TeamInfo::kApplylistFieldNumber;
const int TeamInfo::kPurposeFieldNumber;
const int TeamInfo::kSetpositionFieldNumber;
const int TeamInfo::kRobotTeamFieldNumber;
#endif  // !_MSC_VER

TeamInfo::TeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamInfo::InitAsDefaultInstance() {
  purpose_ = const_cast< ::Packet::PurposeInfo*>(&::Packet::PurposeInfo::default_instance());
}

TeamInfo::TeamInfo(const TeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  group_ = false;
  arrangetype_ = -1;
  leader_ = GOOGLE_ULONGLONG(0);
  applyleader_ = GOOGLE_ULONGLONG(0);
  agreeapplyleader_ = false;
  agreeapplytime_ = 0;
  auto_match_ = false;
  purpose_ = NULL;
  setposition_ = false;
  robot_team_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamInfo::~TeamInfo() {
  SharedDtor();
}

void TeamInfo::SharedDtor() {
  if (this != default_instance_) {
    delete purpose_;
  }
}

void TeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamInfo_descriptor_;
}

const TeamInfo& TeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

TeamInfo* TeamInfo::default_instance_ = NULL;

TeamInfo* TeamInfo::New() const {
  return new TeamInfo;
}

void TeamInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    group_ = false;
    arrangetype_ = -1;
    leader_ = GOOGLE_ULONGLONG(0);
    applyleader_ = GOOGLE_ULONGLONG(0);
    agreeapplyleader_ = false;
    agreeapplytime_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    auto_match_ = false;
    if (has_purpose()) {
      if (purpose_ != NULL) purpose_->::Packet::PurposeInfo::Clear();
    }
    setposition_ = false;
    robot_team_ = false;
  }
  member_.Clear();
  applylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool TeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_member;
        break;
      }

      // repeated .Packet.TeamPlayerInfo member = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_member;
        if (input->ExpectTag(24)) goto parse_group;
        break;
      }

      // required bool group = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_arrangetype;
        break;
      }

      // required .Packet.ArrangeType arrangetype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arrangetype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::ArrangeType_IsValid(value)) {
            set_arrangetype(static_cast< ::Packet::ArrangeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_leader;
        break;
      }

      // required fixed64 leader = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &leader_)));
          set_has_leader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_applyleader;
        break;
      }

      // required fixed64 applyleader = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_applyleader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &applyleader_)));
          set_has_applyleader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_agreeapplyleader;
        break;
      }

      // required bool agreeapplyleader = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agreeapplyleader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agreeapplyleader_)));
          set_has_agreeapplyleader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_agreeapplytime;
        break;
      }

      // required int32 agreeapplytime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agreeapplytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agreeapplytime_)));
          set_has_agreeapplytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_auto_match;
        break;
      }

      // required bool auto_match = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_match:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_match_)));
          set_has_auto_match();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_applylist;
        break;
      }

      // repeated fixed64 applylist = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_applylist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 81, input, this->mutable_applylist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_applylist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_applylist;
        if (input->ExpectTag(90)) goto parse_purpose;
        break;
      }

      // required .Packet.PurposeInfo purpose = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_purpose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_purpose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_setposition;
        break;
      }

      // required bool setposition = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_setposition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setposition_)));
          set_has_setposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_robot_team;
        break;
      }

      // optional bool robot_team = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robot_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &robot_team_)));
          set_has_robot_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void TeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // repeated .Packet.TeamPlayerInfo member = 2;
  for (int i = 0; i < this->member_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->member(i), output);
  }

  // required bool group = 3;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->group(), output);
  }

  // required .Packet.ArrangeType arrangetype = 4;
  if (has_arrangetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->arrangetype(), output);
  }

  // required fixed64 leader = 5;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->leader(), output);
  }

  // required fixed64 applyleader = 6;
  if (has_applyleader()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->applyleader(), output);
  }

  // required bool agreeapplyleader = 7;
  if (has_agreeapplyleader()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->agreeapplyleader(), output);
  }

  // required int32 agreeapplytime = 8;
  if (has_agreeapplytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->agreeapplytime(), output);
  }

  // required bool auto_match = 9;
  if (has_auto_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->auto_match(), output);
  }

  // repeated fixed64 applylist = 10;
  for (int i = 0; i < this->applylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      10, this->applylist(i), output);
  }

  // required .Packet.PurposeInfo purpose = 11;
  if (has_purpose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->purpose(), output);
  }

  // required bool setposition = 12;
  if (has_setposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->setposition(), output);
  }

  // optional bool robot_team = 13;
  if (has_robot_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->robot_team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // repeated .Packet.TeamPlayerInfo member = 2;
  for (int i = 0; i < this->member_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->member(i), target);
  }

  // required bool group = 3;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->group(), target);
  }

  // required .Packet.ArrangeType arrangetype = 4;
  if (has_arrangetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->arrangetype(), target);
  }

  // required fixed64 leader = 5;
  if (has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->leader(), target);
  }

  // required fixed64 applyleader = 6;
  if (has_applyleader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->applyleader(), target);
  }

  // required bool agreeapplyleader = 7;
  if (has_agreeapplyleader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->agreeapplyleader(), target);
  }

  // required int32 agreeapplytime = 8;
  if (has_agreeapplytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->agreeapplytime(), target);
  }

  // required bool auto_match = 9;
  if (has_auto_match()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->auto_match(), target);
  }

  // repeated fixed64 applylist = 10;
  for (int i = 0; i < this->applylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(10, this->applylist(i), target);
  }

  // required .Packet.PurposeInfo purpose = 11;
  if (has_purpose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->purpose(), target);
  }

  // required bool setposition = 12;
  if (has_setposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->setposition(), target);
  }

  // optional bool robot_team = 13;
  if (has_robot_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->robot_team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required bool group = 3;
    if (has_group()) {
      total_size += 1 + 1;
    }

    // required .Packet.ArrangeType arrangetype = 4;
    if (has_arrangetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->arrangetype());
    }

    // required fixed64 leader = 5;
    if (has_leader()) {
      total_size += 1 + 8;
    }

    // required fixed64 applyleader = 6;
    if (has_applyleader()) {
      total_size += 1 + 8;
    }

    // required bool agreeapplyleader = 7;
    if (has_agreeapplyleader()) {
      total_size += 1 + 1;
    }

    // required int32 agreeapplytime = 8;
    if (has_agreeapplytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agreeapplytime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool auto_match = 9;
    if (has_auto_match()) {
      total_size += 1 + 1;
    }

    // required .Packet.PurposeInfo purpose = 11;
    if (has_purpose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->purpose());
    }

    // required bool setposition = 12;
    if (has_setposition()) {
      total_size += 1 + 1;
    }

    // optional bool robot_team = 13;
    if (has_robot_team()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Packet.TeamPlayerInfo member = 2;
  total_size += 1 * this->member_size();
  for (int i = 0; i < this->member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member(i));
  }

  // repeated fixed64 applylist = 10;
  {
    int data_size = 0;
    data_size = 8 * this->applylist_size();
    total_size += 1 * this->applylist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void TeamInfo::MergeFrom(const TeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_.MergeFrom(from.member_);
  applylist_.MergeFrom(from.applylist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_arrangetype()) {
      set_arrangetype(from.arrangetype());
    }
    if (from.has_leader()) {
      set_leader(from.leader());
    }
    if (from.has_applyleader()) {
      set_applyleader(from.applyleader());
    }
    if (from.has_agreeapplyleader()) {
      set_agreeapplyleader(from.agreeapplyleader());
    }
    if (from.has_agreeapplytime()) {
      set_agreeapplytime(from.agreeapplytime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_auto_match()) {
      set_auto_match(from.auto_match());
    }
    if (from.has_purpose()) {
      mutable_purpose()->::Packet::PurposeInfo::MergeFrom(from.purpose());
    }
    if (from.has_setposition()) {
      set_setposition(from.setposition());
    }
    if (from.has_robot_team()) {
      set_robot_team(from.robot_team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void TeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void TeamInfo::CopyFrom(const TeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool TeamInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000dfd) != 0x00000dfd) return false;

  for (int i = 0; i < member_size(); i++) {
    if (!this->member(i).IsInitialized()) return false;
  }
  if (has_purpose()) {
    if (!this->purpose().IsInitialized()) return false;
  }
  return true;
}

void TeamInfo::SetInitialized() {
  _has_bits_[0] |= 0x00000dfd;

  for (int i = 0; i < member_size(); i++) {
    this->mutable_member(i)->SetInitialized();
  }
  if (has_purpose()) {
    this->mutable_purpose()->SetInitialized();
  }
  return;
}

void TeamInfo::Swap(TeamInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    member_.Swap(&other->member_);
    std::swap(group_, other->group_);
    std::swap(arrangetype_, other->arrangetype_);
    std::swap(leader_, other->leader_);
    std::swap(applyleader_, other->applyleader_);
    std::swap(agreeapplyleader_, other->agreeapplyleader_);
    std::swap(agreeapplytime_, other->agreeapplytime_);
    std::swap(auto_match_, other->auto_match_);
    applylist_.Swap(&other->applylist_);
    std::swap(purpose_, other->purpose_);
    std::swap(setposition_, other->setposition_);
    std::swap(robot_team_, other->robot_team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata TeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamInfo_descriptor_;
  metadata.reflection = TeamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CreateTeam::CreateTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateTeam::InitAsDefaultInstance() {
}

CreateTeam::CreateTeam(const CreateTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateTeam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateTeam::~CreateTeam() {
  SharedDtor();
}

void CreateTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreateTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateTeam_descriptor_;
}

const CreateTeam& CreateTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

CreateTeam* CreateTeam::default_instance_ = NULL;

CreateTeam* CreateTeam::New() const {
  return new CreateTeam;
}

void CreateTeam::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool CreateTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void CreateTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateTeam::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void CreateTeam::MergeFrom(const CreateTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void CreateTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void CreateTeam::CopyFrom(const CreateTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool CreateTeam::IsInitialized() const {

  return true;
}

void CreateTeam::SetInitialized() {

  return;
}

void CreateTeam::Swap(CreateTeam* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata CreateTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateTeam_descriptor_;
  metadata.reflection = CreateTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateRobotTeam::kBasicInfoFieldNumber;
const int CreateRobotTeam::kOneKeyIdFieldNumber;
#endif  // !_MSC_VER

CreateRobotTeam::CreateRobotTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateRobotTeam::InitAsDefaultInstance() {
}

CreateRobotTeam::CreateRobotTeam(const CreateRobotTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateRobotTeam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateRobotTeam::~CreateRobotTeam() {
  SharedDtor();
}

void CreateRobotTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreateRobotTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRobotTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateRobotTeam_descriptor_;
}

const CreateRobotTeam& CreateRobotTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

CreateRobotTeam* CreateRobotTeam::default_instance_ = NULL;

CreateRobotTeam* CreateRobotTeam::New() const {
  return new CreateRobotTeam;
}

void CreateRobotTeam::Clear() {
  basic_info_.Clear();
  one_key_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool CreateRobotTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.PlayerBasicInfo basic_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_basic_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_basic_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_basic_info;
        if (input->ExpectTag(16)) goto parse_one_key_id;
        break;
      }

      // repeated int32 one_key_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_one_key_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_one_key_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_one_key_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_one_key_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void CreateRobotTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.PlayerBasicInfo basic_info = 1;
  for (int i = 0; i < this->basic_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->basic_info(i), output);
  }

  // repeated int32 one_key_id = 2;
  for (int i = 0; i < this->one_key_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->one_key_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateRobotTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.PlayerBasicInfo basic_info = 1;
  for (int i = 0; i < this->basic_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->basic_info(i), target);
  }

  // repeated int32 one_key_id = 2;
  for (int i = 0; i < this->one_key_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->one_key_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateRobotTeam::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.PlayerBasicInfo basic_info = 1;
  total_size += 1 * this->basic_info_size();
  for (int i = 0; i < this->basic_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->basic_info(i));
  }

  // repeated int32 one_key_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->one_key_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->one_key_id(i));
    }
    total_size += 1 * this->one_key_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRobotTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateRobotTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateRobotTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void CreateRobotTeam::MergeFrom(const CreateRobotTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  basic_info_.MergeFrom(from.basic_info_);
  one_key_id_.MergeFrom(from.one_key_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void CreateRobotTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void CreateRobotTeam::CopyFrom(const CreateRobotTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool CreateRobotTeam::IsInitialized() const {

  for (int i = 0; i < basic_info_size(); i++) {
    if (!this->basic_info(i).IsInitialized()) return false;
  }
  return true;
}

void CreateRobotTeam::SetInitialized() {

  for (int i = 0; i < basic_info_size(); i++) {
    this->mutable_basic_info(i)->SetInitialized();
  }
  return;
}

void CreateRobotTeam::Swap(CreateRobotTeam* other) {
  if (other != this) {
    basic_info_.Swap(&other->basic_info_);
    one_key_id_.Swap(&other->one_key_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata CreateRobotTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateRobotTeam_descriptor_;
  metadata.reflection = CreateRobotTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DelTeam::DelTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DelTeam::InitAsDefaultInstance() {
}

DelTeam::DelTeam(const DelTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DelTeam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelTeam::~DelTeam() {
  SharedDtor();
}

void DelTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DelTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelTeam_descriptor_;
}

const DelTeam& DelTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

DelTeam* DelTeam::default_instance_ = NULL;

DelTeam* DelTeam::New() const {
  return new DelTeam;
}

void DelTeam::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool DelTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void DelTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DelTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DelTeam::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void DelTeam::MergeFrom(const DelTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void DelTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void DelTeam::CopyFrom(const DelTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool DelTeam::IsInitialized() const {

  return true;
}

void DelTeam::SetInitialized() {

  return;
}

void DelTeam::Swap(DelTeam* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata DelTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelTeam_descriptor_;
  metadata.reflection = DelTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeTeamTypeReq::kGroupFieldNumber;
#endif  // !_MSC_VER

ChangeTeamTypeReq::ChangeTeamTypeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeTeamTypeReq::InitAsDefaultInstance() {
}

ChangeTeamTypeReq::ChangeTeamTypeReq(const ChangeTeamTypeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeTeamTypeReq::SharedCtor() {
  _cached_size_ = 0;
  group_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeTeamTypeReq::~ChangeTeamTypeReq() {
  SharedDtor();
}

void ChangeTeamTypeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeTeamTypeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeTeamTypeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeTeamTypeReq_descriptor_;
}

const ChangeTeamTypeReq& ChangeTeamTypeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

ChangeTeamTypeReq* ChangeTeamTypeReq::default_instance_ = NULL;

ChangeTeamTypeReq* ChangeTeamTypeReq::New() const {
  return new ChangeTeamTypeReq;
}

void ChangeTeamTypeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ChangeTeamTypeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool group = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ChangeTeamTypeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool group = 1;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->group(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeTeamTypeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool group = 1;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->group(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeTeamTypeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool group = 1;
    if (has_group()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeTeamTypeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeTeamTypeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeTeamTypeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ChangeTeamTypeReq::MergeFrom(const ChangeTeamTypeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group()) {
      set_group(from.group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ChangeTeamTypeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ChangeTeamTypeReq::CopyFrom(const ChangeTeamTypeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ChangeTeamTypeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ChangeTeamTypeReq::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void ChangeTeamTypeReq::Swap(ChangeTeamTypeReq* other) {
  if (other != this) {
    std::swap(group_, other->group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ChangeTeamTypeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeTeamTypeReq_descriptor_;
  metadata.reflection = ChangeTeamTypeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateTeamTypeReply::kGroupFieldNumber;
#endif  // !_MSC_VER

UpdateTeamTypeReply::UpdateTeamTypeReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateTeamTypeReply::InitAsDefaultInstance() {
}

UpdateTeamTypeReply::UpdateTeamTypeReply(const UpdateTeamTypeReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateTeamTypeReply::SharedCtor() {
  _cached_size_ = 0;
  group_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateTeamTypeReply::~UpdateTeamTypeReply() {
  SharedDtor();
}

void UpdateTeamTypeReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateTeamTypeReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateTeamTypeReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateTeamTypeReply_descriptor_;
}

const UpdateTeamTypeReply& UpdateTeamTypeReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

UpdateTeamTypeReply* UpdateTeamTypeReply::default_instance_ = NULL;

UpdateTeamTypeReply* UpdateTeamTypeReply::New() const {
  return new UpdateTeamTypeReply;
}

void UpdateTeamTypeReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool UpdateTeamTypeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool group = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void UpdateTeamTypeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool group = 1;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->group(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateTeamTypeReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool group = 1;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->group(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateTeamTypeReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool group = 1;
    if (has_group()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateTeamTypeReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateTeamTypeReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateTeamTypeReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void UpdateTeamTypeReply::MergeFrom(const UpdateTeamTypeReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group()) {
      set_group(from.group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void UpdateTeamTypeReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void UpdateTeamTypeReply::CopyFrom(const UpdateTeamTypeReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool UpdateTeamTypeReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UpdateTeamTypeReply::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void UpdateTeamTypeReply::Swap(UpdateTeamTypeReply* other) {
  if (other != this) {
    std::swap(group_, other->group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata UpdateTeamTypeReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateTeamTypeReply_descriptor_;
  metadata.reflection = UpdateTeamTypeReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeTeamArrangeTypeReq::kTypeFieldNumber;
#endif  // !_MSC_VER

ChangeTeamArrangeTypeReq::ChangeTeamArrangeTypeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeTeamArrangeTypeReq::InitAsDefaultInstance() {
}

ChangeTeamArrangeTypeReq::ChangeTeamArrangeTypeReq(const ChangeTeamArrangeTypeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeTeamArrangeTypeReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeTeamArrangeTypeReq::~ChangeTeamArrangeTypeReq() {
  SharedDtor();
}

void ChangeTeamArrangeTypeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeTeamArrangeTypeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeTeamArrangeTypeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeTeamArrangeTypeReq_descriptor_;
}

const ChangeTeamArrangeTypeReq& ChangeTeamArrangeTypeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

ChangeTeamArrangeTypeReq* ChangeTeamArrangeTypeReq::default_instance_ = NULL;

ChangeTeamArrangeTypeReq* ChangeTeamArrangeTypeReq::New() const {
  return new ChangeTeamArrangeTypeReq;
}

void ChangeTeamArrangeTypeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ChangeTeamArrangeTypeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.ArrangeType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::ArrangeType_IsValid(value)) {
            set_type(static_cast< ::Packet::ArrangeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ChangeTeamArrangeTypeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.ArrangeType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeTeamArrangeTypeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.ArrangeType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeTeamArrangeTypeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.ArrangeType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeTeamArrangeTypeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeTeamArrangeTypeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeTeamArrangeTypeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ChangeTeamArrangeTypeReq::MergeFrom(const ChangeTeamArrangeTypeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ChangeTeamArrangeTypeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ChangeTeamArrangeTypeReq::CopyFrom(const ChangeTeamArrangeTypeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ChangeTeamArrangeTypeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ChangeTeamArrangeTypeReq::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void ChangeTeamArrangeTypeReq::Swap(ChangeTeamArrangeTypeReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ChangeTeamArrangeTypeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeTeamArrangeTypeReq_descriptor_;
  metadata.reflection = ChangeTeamArrangeTypeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateTeamArrangeTypeReply::kTypeFieldNumber;
#endif  // !_MSC_VER

UpdateTeamArrangeTypeReply::UpdateTeamArrangeTypeReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateTeamArrangeTypeReply::InitAsDefaultInstance() {
}

UpdateTeamArrangeTypeReply::UpdateTeamArrangeTypeReply(const UpdateTeamArrangeTypeReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateTeamArrangeTypeReply::SharedCtor() {
  _cached_size_ = 0;
  type_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateTeamArrangeTypeReply::~UpdateTeamArrangeTypeReply() {
  SharedDtor();
}

void UpdateTeamArrangeTypeReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateTeamArrangeTypeReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateTeamArrangeTypeReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateTeamArrangeTypeReply_descriptor_;
}

const UpdateTeamArrangeTypeReply& UpdateTeamArrangeTypeReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

UpdateTeamArrangeTypeReply* UpdateTeamArrangeTypeReply::default_instance_ = NULL;

UpdateTeamArrangeTypeReply* UpdateTeamArrangeTypeReply::New() const {
  return new UpdateTeamArrangeTypeReply;
}

void UpdateTeamArrangeTypeReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool UpdateTeamArrangeTypeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.ArrangeType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::ArrangeType_IsValid(value)) {
            set_type(static_cast< ::Packet::ArrangeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void UpdateTeamArrangeTypeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.ArrangeType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateTeamArrangeTypeReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.ArrangeType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateTeamArrangeTypeReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.ArrangeType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateTeamArrangeTypeReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateTeamArrangeTypeReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateTeamArrangeTypeReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void UpdateTeamArrangeTypeReply::MergeFrom(const UpdateTeamArrangeTypeReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void UpdateTeamArrangeTypeReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void UpdateTeamArrangeTypeReply::CopyFrom(const UpdateTeamArrangeTypeReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool UpdateTeamArrangeTypeReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UpdateTeamArrangeTypeReply::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void UpdateTeamArrangeTypeReply::Swap(UpdateTeamArrangeTypeReply* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata UpdateTeamArrangeTypeReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateTeamArrangeTypeReply_descriptor_;
  metadata.reflection = UpdateTeamArrangeTypeReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyTeamReq::kGuidFieldNumber;
#endif  // !_MSC_VER

ApplyTeamReq::ApplyTeamReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyTeamReq::InitAsDefaultInstance() {
}

ApplyTeamReq::ApplyTeamReq(const ApplyTeamReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyTeamReq::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyTeamReq::~ApplyTeamReq() {
  SharedDtor();
}

void ApplyTeamReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplyTeamReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyTeamReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyTeamReq_descriptor_;
}

const ApplyTeamReq& ApplyTeamReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

ApplyTeamReq* ApplyTeamReq::default_instance_ = NULL;

ApplyTeamReq* ApplyTeamReq::New() const {
  return new ApplyTeamReq;
}

void ApplyTeamReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ApplyTeamReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ApplyTeamReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplyTeamReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplyTeamReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyTeamReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyTeamReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyTeamReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ApplyTeamReq::MergeFrom(const ApplyTeamReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ApplyTeamReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ApplyTeamReq::CopyFrom(const ApplyTeamReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ApplyTeamReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ApplyTeamReq::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void ApplyTeamReq::Swap(ApplyTeamReq* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ApplyTeamReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyTeamReq_descriptor_;
  metadata.reflection = ApplyTeamReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyMissionTeamReq::kSrcplayerGuidFieldNumber;
const int ApplyMissionTeamReq::kMissionidFieldNumber;
#endif  // !_MSC_VER

ApplyMissionTeamReq::ApplyMissionTeamReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyMissionTeamReq::InitAsDefaultInstance() {
}

ApplyMissionTeamReq::ApplyMissionTeamReq(const ApplyMissionTeamReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyMissionTeamReq::SharedCtor() {
  _cached_size_ = 0;
  srcplayer_guid_ = GOOGLE_ULONGLONG(0);
  missionid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyMissionTeamReq::~ApplyMissionTeamReq() {
  SharedDtor();
}

void ApplyMissionTeamReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplyMissionTeamReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyMissionTeamReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyMissionTeamReq_descriptor_;
}

const ApplyMissionTeamReq& ApplyMissionTeamReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

ApplyMissionTeamReq* ApplyMissionTeamReq::default_instance_ = NULL;

ApplyMissionTeamReq* ApplyMissionTeamReq::New() const {
  return new ApplyMissionTeamReq;
}

void ApplyMissionTeamReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srcplayer_guid_ = GOOGLE_ULONGLONG(0);
    missionid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ApplyMissionTeamReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 srcplayer_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &srcplayer_guid_)));
          set_has_srcplayer_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_missionid;
        break;
      }

      // required int32 missionid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_missionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ApplyMissionTeamReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 srcplayer_guid = 1;
  if (has_srcplayer_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->srcplayer_guid(), output);
  }

  // required int32 missionid = 2;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->missionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplyMissionTeamReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 srcplayer_guid = 1;
  if (has_srcplayer_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->srcplayer_guid(), target);
  }

  // required int32 missionid = 2;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->missionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplyMissionTeamReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 srcplayer_guid = 1;
    if (has_srcplayer_guid()) {
      total_size += 1 + 8;
    }

    // required int32 missionid = 2;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->missionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyMissionTeamReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyMissionTeamReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyMissionTeamReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ApplyMissionTeamReq::MergeFrom(const ApplyMissionTeamReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcplayer_guid()) {
      set_srcplayer_guid(from.srcplayer_guid());
    }
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ApplyMissionTeamReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ApplyMissionTeamReq::CopyFrom(const ApplyMissionTeamReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ApplyMissionTeamReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ApplyMissionTeamReq::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void ApplyMissionTeamReq::Swap(ApplyMissionTeamReq* other) {
  if (other != this) {
    std::swap(srcplayer_guid_, other->srcplayer_guid_);
    std::swap(missionid_, other->missionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ApplyMissionTeamReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyMissionTeamReq_descriptor_;
  metadata.reflection = ApplyMissionTeamReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

LevelTeamReq::LevelTeamReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LevelTeamReq::InitAsDefaultInstance() {
}

LevelTeamReq::LevelTeamReq(const LevelTeamReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LevelTeamReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LevelTeamReq::~LevelTeamReq() {
  SharedDtor();
}

void LevelTeamReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LevelTeamReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LevelTeamReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LevelTeamReq_descriptor_;
}

const LevelTeamReq& LevelTeamReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

LevelTeamReq* LevelTeamReq::default_instance_ = NULL;

LevelTeamReq* LevelTeamReq::New() const {
  return new LevelTeamReq;
}

void LevelTeamReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool LevelTeamReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void LevelTeamReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LevelTeamReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LevelTeamReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevelTeamReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LevelTeamReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LevelTeamReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void LevelTeamReq::MergeFrom(const LevelTeamReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void LevelTeamReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void LevelTeamReq::CopyFrom(const LevelTeamReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool LevelTeamReq::IsInitialized() const {

  return true;
}

void LevelTeamReq::SetInitialized() {

  return;
}

void LevelTeamReq::Swap(LevelTeamReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata LevelTeamReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LevelTeamReq_descriptor_;
  metadata.reflection = LevelTeamReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskLevelTeamReq::kPlayerguidFieldNumber;
#endif  // !_MSC_VER

AskLevelTeamReq::AskLevelTeamReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AskLevelTeamReq::InitAsDefaultInstance() {
}

AskLevelTeamReq::AskLevelTeamReq(const AskLevelTeamReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AskLevelTeamReq::SharedCtor() {
  _cached_size_ = 0;
  playerguid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskLevelTeamReq::~AskLevelTeamReq() {
  SharedDtor();
}

void AskLevelTeamReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskLevelTeamReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskLevelTeamReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskLevelTeamReq_descriptor_;
}

const AskLevelTeamReq& AskLevelTeamReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

AskLevelTeamReq* AskLevelTeamReq::default_instance_ = NULL;

AskLevelTeamReq* AskLevelTeamReq::New() const {
  return new AskLevelTeamReq;
}

void AskLevelTeamReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerguid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool AskLevelTeamReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 playerguid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &playerguid_)));
          set_has_playerguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void AskLevelTeamReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 playerguid = 1;
  if (has_playerguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->playerguid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AskLevelTeamReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 playerguid = 1;
  if (has_playerguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->playerguid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AskLevelTeamReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 playerguid = 1;
    if (has_playerguid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskLevelTeamReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskLevelTeamReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskLevelTeamReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void AskLevelTeamReq::MergeFrom(const AskLevelTeamReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerguid()) {
      set_playerguid(from.playerguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void AskLevelTeamReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void AskLevelTeamReq::CopyFrom(const AskLevelTeamReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool AskLevelTeamReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AskLevelTeamReq::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void AskLevelTeamReq::Swap(AskLevelTeamReq* other) {
  if (other != this) {
    std::swap(playerguid_, other->playerguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata AskLevelTeamReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskLevelTeamReq_descriptor_;
  metadata.reflection = AskLevelTeamReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgreeApplyTeamReq::kPlayerguidFieldNumber;
#endif  // !_MSC_VER

AgreeApplyTeamReq::AgreeApplyTeamReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AgreeApplyTeamReq::InitAsDefaultInstance() {
}

AgreeApplyTeamReq::AgreeApplyTeamReq(const AgreeApplyTeamReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AgreeApplyTeamReq::SharedCtor() {
  _cached_size_ = 0;
  playerguid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgreeApplyTeamReq::~AgreeApplyTeamReq() {
  SharedDtor();
}

void AgreeApplyTeamReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AgreeApplyTeamReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgreeApplyTeamReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgreeApplyTeamReq_descriptor_;
}

const AgreeApplyTeamReq& AgreeApplyTeamReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

AgreeApplyTeamReq* AgreeApplyTeamReq::default_instance_ = NULL;

AgreeApplyTeamReq* AgreeApplyTeamReq::New() const {
  return new AgreeApplyTeamReq;
}

void AgreeApplyTeamReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerguid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool AgreeApplyTeamReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 playerguid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &playerguid_)));
          set_has_playerguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void AgreeApplyTeamReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 playerguid = 1;
  if (has_playerguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->playerguid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AgreeApplyTeamReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 playerguid = 1;
  if (has_playerguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->playerguid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AgreeApplyTeamReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 playerguid = 1;
    if (has_playerguid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgreeApplyTeamReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgreeApplyTeamReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgreeApplyTeamReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void AgreeApplyTeamReq::MergeFrom(const AgreeApplyTeamReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerguid()) {
      set_playerguid(from.playerguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void AgreeApplyTeamReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void AgreeApplyTeamReq::CopyFrom(const AgreeApplyTeamReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool AgreeApplyTeamReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AgreeApplyTeamReq::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void AgreeApplyTeamReq::Swap(AgreeApplyTeamReq* other) {
  if (other != this) {
    std::swap(playerguid_, other->playerguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata AgreeApplyTeamReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgreeApplyTeamReq_descriptor_;
  metadata.reflection = AgreeApplyTeamReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteyAddTeamReq::kPlayerguidFieldNumber;
#endif  // !_MSC_VER

InviteyAddTeamReq::InviteyAddTeamReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InviteyAddTeamReq::InitAsDefaultInstance() {
}

InviteyAddTeamReq::InviteyAddTeamReq(const InviteyAddTeamReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InviteyAddTeamReq::SharedCtor() {
  _cached_size_ = 0;
  playerguid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteyAddTeamReq::~InviteyAddTeamReq() {
  SharedDtor();
}

void InviteyAddTeamReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InviteyAddTeamReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteyAddTeamReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteyAddTeamReq_descriptor_;
}

const InviteyAddTeamReq& InviteyAddTeamReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

InviteyAddTeamReq* InviteyAddTeamReq::default_instance_ = NULL;

InviteyAddTeamReq* InviteyAddTeamReq::New() const {
  return new InviteyAddTeamReq;
}

void InviteyAddTeamReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerguid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool InviteyAddTeamReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 playerguid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &playerguid_)));
          set_has_playerguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void InviteyAddTeamReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 playerguid = 1;
  if (has_playerguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->playerguid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InviteyAddTeamReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 playerguid = 1;
  if (has_playerguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->playerguid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InviteyAddTeamReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 playerguid = 1;
    if (has_playerguid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteyAddTeamReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteyAddTeamReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteyAddTeamReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void InviteyAddTeamReq::MergeFrom(const InviteyAddTeamReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerguid()) {
      set_playerguid(from.playerguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void InviteyAddTeamReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void InviteyAddTeamReq::CopyFrom(const InviteyAddTeamReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool InviteyAddTeamReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InviteyAddTeamReq::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void InviteyAddTeamReq::Swap(InviteyAddTeamReq* other) {
  if (other != this) {
    std::swap(playerguid_, other->playerguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata InviteyAddTeamReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteyAddTeamReq_descriptor_;
  metadata.reflection = InviteyAddTeamReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskInviteyAgreeTeamReply::kTeamidFieldNumber;
const int AskInviteyAgreeTeamReply::kTeaminvitenameFieldNumber;
const int AskInviteyAgreeTeamReply::kTeaminviteguidFieldNumber;
const int AskInviteyAgreeTeamReply::kPurposeFieldNumber;
#endif  // !_MSC_VER

AskInviteyAgreeTeamReply::AskInviteyAgreeTeamReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AskInviteyAgreeTeamReply::InitAsDefaultInstance() {
}

AskInviteyAgreeTeamReply::AskInviteyAgreeTeamReply(const AskInviteyAgreeTeamReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AskInviteyAgreeTeamReply::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  teaminvitename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  teaminviteguid_ = GOOGLE_ULONGLONG(0);
  purpose_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskInviteyAgreeTeamReply::~AskInviteyAgreeTeamReply() {
  SharedDtor();
}

void AskInviteyAgreeTeamReply::SharedDtor() {
  if (teaminvitename_ != &::google::protobuf::internal::kEmptyString) {
    delete teaminvitename_;
  }
  if (this != default_instance_) {
  }
}

void AskInviteyAgreeTeamReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskInviteyAgreeTeamReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskInviteyAgreeTeamReply_descriptor_;
}

const AskInviteyAgreeTeamReply& AskInviteyAgreeTeamReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

AskInviteyAgreeTeamReply* AskInviteyAgreeTeamReply::default_instance_ = NULL;

AskInviteyAgreeTeamReply* AskInviteyAgreeTeamReply::New() const {
  return new AskInviteyAgreeTeamReply;
}

void AskInviteyAgreeTeamReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = GOOGLE_ULONGLONG(0);
    if (has_teaminvitename()) {
      if (teaminvitename_ != &::google::protobuf::internal::kEmptyString) {
        teaminvitename_->clear();
      }
    }
    teaminviteguid_ = GOOGLE_ULONGLONG(0);
    purpose_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool AskInviteyAgreeTeamReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 teamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_teaminvitename;
        break;
      }

      // required string teaminvitename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teaminvitename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_teaminvitename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->teaminvitename().data(), this->teaminvitename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_teaminviteguid;
        break;
      }

      // required fixed64 teaminviteguid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_teaminviteguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &teaminviteguid_)));
          set_has_teaminviteguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_purpose;
        break;
      }

      // required int32 purpose = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_purpose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &purpose_)));
          set_has_purpose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void AskInviteyAgreeTeamReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 teamid = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->teamid(), output);
  }

  // required string teaminvitename = 2;
  if (has_teaminvitename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->teaminvitename().data(), this->teaminvitename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->teaminvitename(), output);
  }

  // required fixed64 teaminviteguid = 3;
  if (has_teaminviteguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->teaminviteguid(), output);
  }

  // required int32 purpose = 4;
  if (has_purpose()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->purpose(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AskInviteyAgreeTeamReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 teamid = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->teamid(), target);
  }

  // required string teaminvitename = 2;
  if (has_teaminvitename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->teaminvitename().data(), this->teaminvitename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->teaminvitename(), target);
  }

  // required fixed64 teaminviteguid = 3;
  if (has_teaminviteguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->teaminviteguid(), target);
  }

  // required int32 purpose = 4;
  if (has_purpose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->purpose(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AskInviteyAgreeTeamReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 teamid = 1;
    if (has_teamid()) {
      total_size += 1 + 8;
    }

    // required string teaminvitename = 2;
    if (has_teaminvitename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->teaminvitename());
    }

    // required fixed64 teaminviteguid = 3;
    if (has_teaminviteguid()) {
      total_size += 1 + 8;
    }

    // required int32 purpose = 4;
    if (has_purpose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->purpose());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskInviteyAgreeTeamReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskInviteyAgreeTeamReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskInviteyAgreeTeamReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void AskInviteyAgreeTeamReply::MergeFrom(const AskInviteyAgreeTeamReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_teaminvitename()) {
      set_teaminvitename(from.teaminvitename());
    }
    if (from.has_teaminviteguid()) {
      set_teaminviteguid(from.teaminviteguid());
    }
    if (from.has_purpose()) {
      set_purpose(from.purpose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void AskInviteyAgreeTeamReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void AskInviteyAgreeTeamReply::CopyFrom(const AskInviteyAgreeTeamReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool AskInviteyAgreeTeamReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void AskInviteyAgreeTeamReply::SetInitialized() {
  _has_bits_[0] |= 0x0000000f;

  return;
}

void AskInviteyAgreeTeamReply::Swap(AskInviteyAgreeTeamReply* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(teaminvitename_, other->teaminvitename_);
    std::swap(teaminviteguid_, other->teaminviteguid_);
    std::swap(purpose_, other->purpose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata AskInviteyAgreeTeamReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskInviteyAgreeTeamReply_descriptor_;
  metadata.reflection = AskInviteyAgreeTeamReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteyAgreeTeamReq::kTeamidFieldNumber;
const int InviteyAgreeTeamReq::kAgreeFieldNumber;
const int InviteyAgreeTeamReq::kTeaminviteguidFieldNumber;
#endif  // !_MSC_VER

InviteyAgreeTeamReq::InviteyAgreeTeamReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InviteyAgreeTeamReq::InitAsDefaultInstance() {
}

InviteyAgreeTeamReq::InviteyAgreeTeamReq(const InviteyAgreeTeamReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InviteyAgreeTeamReq::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  agree_ = false;
  teaminviteguid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteyAgreeTeamReq::~InviteyAgreeTeamReq() {
  SharedDtor();
}

void InviteyAgreeTeamReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InviteyAgreeTeamReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteyAgreeTeamReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteyAgreeTeamReq_descriptor_;
}

const InviteyAgreeTeamReq& InviteyAgreeTeamReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

InviteyAgreeTeamReq* InviteyAgreeTeamReq::default_instance_ = NULL;

InviteyAgreeTeamReq* InviteyAgreeTeamReq::New() const {
  return new InviteyAgreeTeamReq;
}

void InviteyAgreeTeamReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = GOOGLE_ULONGLONG(0);
    agree_ = false;
    teaminviteguid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool InviteyAgreeTeamReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 teamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_agree;
        break;
      }

      // required bool agree = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_)));
          set_has_agree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_teaminviteguid;
        break;
      }

      // required fixed64 teaminviteguid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_teaminviteguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &teaminviteguid_)));
          set_has_teaminviteguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void InviteyAgreeTeamReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 teamid = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->teamid(), output);
  }

  // required bool agree = 2;
  if (has_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->agree(), output);
  }

  // required fixed64 teaminviteguid = 3;
  if (has_teaminviteguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->teaminviteguid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InviteyAgreeTeamReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 teamid = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->teamid(), target);
  }

  // required bool agree = 2;
  if (has_agree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->agree(), target);
  }

  // required fixed64 teaminviteguid = 3;
  if (has_teaminviteguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->teaminviteguid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InviteyAgreeTeamReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 teamid = 1;
    if (has_teamid()) {
      total_size += 1 + 8;
    }

    // required bool agree = 2;
    if (has_agree()) {
      total_size += 1 + 1;
    }

    // required fixed64 teaminviteguid = 3;
    if (has_teaminviteguid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteyAgreeTeamReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteyAgreeTeamReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteyAgreeTeamReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void InviteyAgreeTeamReq::MergeFrom(const InviteyAgreeTeamReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_agree()) {
      set_agree(from.agree());
    }
    if (from.has_teaminviteguid()) {
      set_teaminviteguid(from.teaminviteguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void InviteyAgreeTeamReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void InviteyAgreeTeamReq::CopyFrom(const InviteyAgreeTeamReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool InviteyAgreeTeamReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void InviteyAgreeTeamReq::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  return;
}

void InviteyAgreeTeamReq::Swap(InviteyAgreeTeamReq* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(agree_, other->agree_);
    std::swap(teaminviteguid_, other->teaminviteguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata InviteyAgreeTeamReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteyAgreeTeamReq_descriptor_;
  metadata.reflection = InviteyAgreeTeamReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddTeamReply::kPlayerguidFieldNumber;
const int AddTeamReply::kPlayernameFieldNumber;
#endif  // !_MSC_VER

AddTeamReply::AddTeamReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddTeamReply::InitAsDefaultInstance() {
}

AddTeamReply::AddTeamReply(const AddTeamReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddTeamReply::SharedCtor() {
  _cached_size_ = 0;
  playerguid_ = GOOGLE_ULONGLONG(0);
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddTeamReply::~AddTeamReply() {
  SharedDtor();
}

void AddTeamReply::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void AddTeamReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddTeamReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddTeamReply_descriptor_;
}

const AddTeamReply& AddTeamReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

AddTeamReply* AddTeamReply::default_instance_ = NULL;

AddTeamReply* AddTeamReply::New() const {
  return new AddTeamReply;
}

void AddTeamReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerguid_ = GOOGLE_ULONGLONG(0);
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool AddTeamReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 playerguid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &playerguid_)));
          set_has_playerguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playername;
        break;
      }

      // required string playername = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void AddTeamReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 playerguid = 1;
  if (has_playerguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->playerguid(), output);
  }

  // required string playername = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->playername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddTeamReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 playerguid = 1;
  if (has_playerguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->playerguid(), target);
  }

  // required string playername = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddTeamReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 playerguid = 1;
    if (has_playerguid()) {
      total_size += 1 + 8;
    }

    // required string playername = 2;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddTeamReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddTeamReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddTeamReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void AddTeamReply::MergeFrom(const AddTeamReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerguid()) {
      set_playerguid(from.playerguid());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void AddTeamReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void AddTeamReply::CopyFrom(const AddTeamReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool AddTeamReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AddTeamReply::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void AddTeamReply::Swap(AddTeamReply* other) {
  if (other != this) {
    std::swap(playerguid_, other->playerguid_);
    std::swap(playername_, other->playername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata AddTeamReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddTeamReply_descriptor_;
  metadata.reflection = AddTeamReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeaveTeamReply::kPlayerguidFieldNumber;
const int LeaveTeamReply::kPlayernameFieldNumber;
#endif  // !_MSC_VER

LeaveTeamReply::LeaveTeamReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeaveTeamReply::InitAsDefaultInstance() {
}

LeaveTeamReply::LeaveTeamReply(const LeaveTeamReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeaveTeamReply::SharedCtor() {
  _cached_size_ = 0;
  playerguid_ = GOOGLE_ULONGLONG(0);
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveTeamReply::~LeaveTeamReply() {
  SharedDtor();
}

void LeaveTeamReply::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void LeaveTeamReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveTeamReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveTeamReply_descriptor_;
}

const LeaveTeamReply& LeaveTeamReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

LeaveTeamReply* LeaveTeamReply::default_instance_ = NULL;

LeaveTeamReply* LeaveTeamReply::New() const {
  return new LeaveTeamReply;
}

void LeaveTeamReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerguid_ = GOOGLE_ULONGLONG(0);
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool LeaveTeamReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 playerguid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &playerguid_)));
          set_has_playerguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playername;
        break;
      }

      // required string playername = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void LeaveTeamReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 playerguid = 1;
  if (has_playerguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->playerguid(), output);
  }

  // required string playername = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->playername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeaveTeamReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 playerguid = 1;
  if (has_playerguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->playerguid(), target);
  }

  // required string playername = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeaveTeamReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 playerguid = 1;
    if (has_playerguid()) {
      total_size += 1 + 8;
    }

    // required string playername = 2;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveTeamReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaveTeamReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaveTeamReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void LeaveTeamReply::MergeFrom(const LeaveTeamReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerguid()) {
      set_playerguid(from.playerguid());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void LeaveTeamReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void LeaveTeamReply::CopyFrom(const LeaveTeamReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool LeaveTeamReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LeaveTeamReply::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void LeaveTeamReply::Swap(LeaveTeamReply* other) {
  if (other != this) {
    std::swap(playerguid_, other->playerguid_);
    std::swap(playername_, other->playername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata LeaveTeamReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveTeamReply_descriptor_;
  metadata.reflection = LeaveTeamReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetPurposeInfoReq::kPurposeFieldNumber;
#endif  // !_MSC_VER

SetPurposeInfoReq::SetPurposeInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetPurposeInfoReq::InitAsDefaultInstance() {
  purpose_ = const_cast< ::Packet::PurposeInfo*>(&::Packet::PurposeInfo::default_instance());
}

SetPurposeInfoReq::SetPurposeInfoReq(const SetPurposeInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetPurposeInfoReq::SharedCtor() {
  _cached_size_ = 0;
  purpose_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetPurposeInfoReq::~SetPurposeInfoReq() {
  SharedDtor();
}

void SetPurposeInfoReq::SharedDtor() {
  if (this != default_instance_) {
    delete purpose_;
  }
}

void SetPurposeInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetPurposeInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetPurposeInfoReq_descriptor_;
}

const SetPurposeInfoReq& SetPurposeInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

SetPurposeInfoReq* SetPurposeInfoReq::default_instance_ = NULL;

SetPurposeInfoReq* SetPurposeInfoReq::New() const {
  return new SetPurposeInfoReq;
}

void SetPurposeInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_purpose()) {
      if (purpose_ != NULL) purpose_->::Packet::PurposeInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SetPurposeInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.PurposeInfo purpose = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_purpose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SetPurposeInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.PurposeInfo purpose = 1;
  if (has_purpose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->purpose(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetPurposeInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.PurposeInfo purpose = 1;
  if (has_purpose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->purpose(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetPurposeInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.PurposeInfo purpose = 1;
    if (has_purpose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->purpose());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetPurposeInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetPurposeInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetPurposeInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SetPurposeInfoReq::MergeFrom(const SetPurposeInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_purpose()) {
      mutable_purpose()->::Packet::PurposeInfo::MergeFrom(from.purpose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SetPurposeInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SetPurposeInfoReq::CopyFrom(const SetPurposeInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SetPurposeInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_purpose()) {
    if (!this->purpose().IsInitialized()) return false;
  }
  return true;
}

void SetPurposeInfoReq::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  if (has_purpose()) {
    this->mutable_purpose()->SetInitialized();
  }
  return;
}

void SetPurposeInfoReq::Swap(SetPurposeInfoReq* other) {
  if (other != this) {
    std::swap(purpose_, other->purpose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SetPurposeInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetPurposeInfoReq_descriptor_;
  metadata.reflection = SetPurposeInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PurposeInfoUpdate::kPurposeFieldNumber;
#endif  // !_MSC_VER

PurposeInfoUpdate::PurposeInfoUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PurposeInfoUpdate::InitAsDefaultInstance() {
  purpose_ = const_cast< ::Packet::PurposeInfo*>(&::Packet::PurposeInfo::default_instance());
}

PurposeInfoUpdate::PurposeInfoUpdate(const PurposeInfoUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PurposeInfoUpdate::SharedCtor() {
  _cached_size_ = 0;
  purpose_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PurposeInfoUpdate::~PurposeInfoUpdate() {
  SharedDtor();
}

void PurposeInfoUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete purpose_;
  }
}

void PurposeInfoUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PurposeInfoUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PurposeInfoUpdate_descriptor_;
}

const PurposeInfoUpdate& PurposeInfoUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

PurposeInfoUpdate* PurposeInfoUpdate::default_instance_ = NULL;

PurposeInfoUpdate* PurposeInfoUpdate::New() const {
  return new PurposeInfoUpdate;
}

void PurposeInfoUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_purpose()) {
      if (purpose_ != NULL) purpose_->::Packet::PurposeInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PurposeInfoUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.PurposeInfo purpose = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_purpose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PurposeInfoUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.PurposeInfo purpose = 1;
  if (has_purpose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->purpose(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PurposeInfoUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.PurposeInfo purpose = 1;
  if (has_purpose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->purpose(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PurposeInfoUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.PurposeInfo purpose = 1;
    if (has_purpose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->purpose());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PurposeInfoUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PurposeInfoUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PurposeInfoUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PurposeInfoUpdate::MergeFrom(const PurposeInfoUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_purpose()) {
      mutable_purpose()->::Packet::PurposeInfo::MergeFrom(from.purpose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PurposeInfoUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PurposeInfoUpdate::CopyFrom(const PurposeInfoUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PurposeInfoUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_purpose()) {
    if (!this->purpose().IsInitialized()) return false;
  }
  return true;
}

void PurposeInfoUpdate::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  if (has_purpose()) {
    this->mutable_purpose()->SetInitialized();
  }
  return;
}

void PurposeInfoUpdate::Swap(PurposeInfoUpdate* other) {
  if (other != this) {
    std::swap(purpose_, other->purpose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PurposeInfoUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PurposeInfoUpdate_descriptor_;
  metadata.reflection = PurposeInfoUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetTeamAutoMatchReq::kAutoMatchFieldNumber;
#endif  // !_MSC_VER

SetTeamAutoMatchReq::SetTeamAutoMatchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetTeamAutoMatchReq::InitAsDefaultInstance() {
}

SetTeamAutoMatchReq::SetTeamAutoMatchReq(const SetTeamAutoMatchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetTeamAutoMatchReq::SharedCtor() {
  _cached_size_ = 0;
  auto_match_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetTeamAutoMatchReq::~SetTeamAutoMatchReq() {
  SharedDtor();
}

void SetTeamAutoMatchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetTeamAutoMatchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetTeamAutoMatchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetTeamAutoMatchReq_descriptor_;
}

const SetTeamAutoMatchReq& SetTeamAutoMatchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

SetTeamAutoMatchReq* SetTeamAutoMatchReq::default_instance_ = NULL;

SetTeamAutoMatchReq* SetTeamAutoMatchReq::New() const {
  return new SetTeamAutoMatchReq;
}

void SetTeamAutoMatchReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    auto_match_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SetTeamAutoMatchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool auto_match = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_match_)));
          set_has_auto_match();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SetTeamAutoMatchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool auto_match = 1;
  if (has_auto_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->auto_match(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetTeamAutoMatchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool auto_match = 1;
  if (has_auto_match()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->auto_match(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetTeamAutoMatchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool auto_match = 1;
    if (has_auto_match()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetTeamAutoMatchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetTeamAutoMatchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetTeamAutoMatchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SetTeamAutoMatchReq::MergeFrom(const SetTeamAutoMatchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_auto_match()) {
      set_auto_match(from.auto_match());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SetTeamAutoMatchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SetTeamAutoMatchReq::CopyFrom(const SetTeamAutoMatchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SetTeamAutoMatchReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetTeamAutoMatchReq::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void SetTeamAutoMatchReq::Swap(SetTeamAutoMatchReq* other) {
  if (other != this) {
    std::swap(auto_match_, other->auto_match_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SetTeamAutoMatchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetTeamAutoMatchReq_descriptor_;
  metadata.reflection = SetTeamAutoMatchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamAutoMatchUpdate::kAutoMatchFieldNumber;
#endif  // !_MSC_VER

TeamAutoMatchUpdate::TeamAutoMatchUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamAutoMatchUpdate::InitAsDefaultInstance() {
}

TeamAutoMatchUpdate::TeamAutoMatchUpdate(const TeamAutoMatchUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamAutoMatchUpdate::SharedCtor() {
  _cached_size_ = 0;
  auto_match_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamAutoMatchUpdate::~TeamAutoMatchUpdate() {
  SharedDtor();
}

void TeamAutoMatchUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamAutoMatchUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamAutoMatchUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamAutoMatchUpdate_descriptor_;
}

const TeamAutoMatchUpdate& TeamAutoMatchUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

TeamAutoMatchUpdate* TeamAutoMatchUpdate::default_instance_ = NULL;

TeamAutoMatchUpdate* TeamAutoMatchUpdate::New() const {
  return new TeamAutoMatchUpdate;
}

void TeamAutoMatchUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    auto_match_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool TeamAutoMatchUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool auto_match = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_match_)));
          set_has_auto_match();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void TeamAutoMatchUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool auto_match = 1;
  if (has_auto_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->auto_match(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamAutoMatchUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool auto_match = 1;
  if (has_auto_match()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->auto_match(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamAutoMatchUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool auto_match = 1;
    if (has_auto_match()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamAutoMatchUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamAutoMatchUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamAutoMatchUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void TeamAutoMatchUpdate::MergeFrom(const TeamAutoMatchUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_auto_match()) {
      set_auto_match(from.auto_match());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void TeamAutoMatchUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void TeamAutoMatchUpdate::CopyFrom(const TeamAutoMatchUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool TeamAutoMatchUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TeamAutoMatchUpdate::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void TeamAutoMatchUpdate::Swap(TeamAutoMatchUpdate* other) {
  if (other != this) {
    std::swap(auto_match_, other->auto_match_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata TeamAutoMatchUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamAutoMatchUpdate_descriptor_;
  metadata.reflection = TeamAutoMatchUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamFullPlayerInfo::kPlayerbaseFieldNumber;
const int TeamFullPlayerInfo::kTeambaseinfoFieldNumber;
#endif  // !_MSC_VER

TeamFullPlayerInfo::TeamFullPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamFullPlayerInfo::InitAsDefaultInstance() {
  playerbase_ = const_cast< ::Packet::PlayerBasicInfo*>(&::Packet::PlayerBasicInfo::default_instance());
  teambaseinfo_ = const_cast< ::Packet::TeamPlayerBasicInfo*>(&::Packet::TeamPlayerBasicInfo::default_instance());
}

TeamFullPlayerInfo::TeamFullPlayerInfo(const TeamFullPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamFullPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  playerbase_ = NULL;
  teambaseinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamFullPlayerInfo::~TeamFullPlayerInfo() {
  SharedDtor();
}

void TeamFullPlayerInfo::SharedDtor() {
  if (this != default_instance_) {
    delete playerbase_;
    delete teambaseinfo_;
  }
}

void TeamFullPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamFullPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamFullPlayerInfo_descriptor_;
}

const TeamFullPlayerInfo& TeamFullPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

TeamFullPlayerInfo* TeamFullPlayerInfo::default_instance_ = NULL;

TeamFullPlayerInfo* TeamFullPlayerInfo::New() const {
  return new TeamFullPlayerInfo;
}

void TeamFullPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerbase()) {
      if (playerbase_ != NULL) playerbase_->::Packet::PlayerBasicInfo::Clear();
    }
    if (has_teambaseinfo()) {
      if (teambaseinfo_ != NULL) teambaseinfo_->::Packet::TeamPlayerBasicInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool TeamFullPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Packet.PlayerBasicInfo playerbase = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerbase()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_teambaseinfo;
        break;
      }

      // required .Packet.TeamPlayerBasicInfo teambaseinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teambaseinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teambaseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void TeamFullPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Packet.PlayerBasicInfo playerbase = 1;
  if (has_playerbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->playerbase(), output);
  }

  // required .Packet.TeamPlayerBasicInfo teambaseinfo = 2;
  if (has_teambaseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->teambaseinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamFullPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Packet.PlayerBasicInfo playerbase = 1;
  if (has_playerbase()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->playerbase(), target);
  }

  // required .Packet.TeamPlayerBasicInfo teambaseinfo = 2;
  if (has_teambaseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->teambaseinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamFullPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Packet.PlayerBasicInfo playerbase = 1;
    if (has_playerbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerbase());
    }

    // required .Packet.TeamPlayerBasicInfo teambaseinfo = 2;
    if (has_teambaseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teambaseinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamFullPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamFullPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamFullPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void TeamFullPlayerInfo::MergeFrom(const TeamFullPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerbase()) {
      mutable_playerbase()->::Packet::PlayerBasicInfo::MergeFrom(from.playerbase());
    }
    if (from.has_teambaseinfo()) {
      mutable_teambaseinfo()->::Packet::TeamPlayerBasicInfo::MergeFrom(from.teambaseinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void TeamFullPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void TeamFullPlayerInfo::CopyFrom(const TeamFullPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool TeamFullPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_playerbase()) {
    if (!this->playerbase().IsInitialized()) return false;
  }
  if (has_teambaseinfo()) {
    if (!this->teambaseinfo().IsInitialized()) return false;
  }
  return true;
}

void TeamFullPlayerInfo::SetInitialized() {
  _has_bits_[0] |= 0x00000002;

  if (has_playerbase()) {
    this->mutable_playerbase()->SetInitialized();
  }
  if (has_teambaseinfo()) {
    this->mutable_teambaseinfo()->SetInitialized();
  }
  return;
}

void TeamFullPlayerInfo::Swap(TeamFullPlayerInfo* other) {
  if (other != this) {
    std::swap(playerbase_, other->playerbase_);
    std::swap(teambaseinfo_, other->teambaseinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata TeamFullPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamFullPlayerInfo_descriptor_;
  metadata.reflection = TeamFullPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamListInfo::kGuidFieldNumber;
const int TeamListInfo::kPurposeFieldNumber;
const int TeamListInfo::kMembersizeFieldNumber;
const int TeamListInfo::kLeadernameFieldNumber;
const int TeamListInfo::kLeaderlevelFieldNumber;
const int TeamListInfo::kInitActorIdFieldNumber;
#endif  // !_MSC_VER

TeamListInfo::TeamListInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamListInfo::InitAsDefaultInstance() {
}

TeamListInfo::TeamListInfo(const TeamListInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamListInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  purpose_ = 0;
  membersize_ = 0;
  leadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leaderlevel_ = 0;
  init_actor_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamListInfo::~TeamListInfo() {
  SharedDtor();
}

void TeamListInfo::SharedDtor() {
  if (leadername_ != &::google::protobuf::internal::kEmptyString) {
    delete leadername_;
  }
  if (this != default_instance_) {
  }
}

void TeamListInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamListInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamListInfo_descriptor_;
}

const TeamListInfo& TeamListInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

TeamListInfo* TeamListInfo::default_instance_ = NULL;

TeamListInfo* TeamListInfo::New() const {
  return new TeamListInfo;
}

void TeamListInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    purpose_ = 0;
    membersize_ = 0;
    if (has_leadername()) {
      if (leadername_ != &::google::protobuf::internal::kEmptyString) {
        leadername_->clear();
      }
    }
    leaderlevel_ = 0;
    init_actor_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool TeamListInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_purpose;
        break;
      }

      // required int32 purpose = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_purpose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &purpose_)));
          set_has_purpose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_membersize;
        break;
      }

      // required int32 membersize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_membersize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &membersize_)));
          set_has_membersize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_leadername;
        break;
      }

      // required string leadername = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leadername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leadername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leadername().data(), this->leadername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_leaderlevel;
        break;
      }

      // required int32 leaderlevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaderlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderlevel_)));
          set_has_leaderlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_init_actor_id;
        break;
      }

      // required int32 init_actor_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_init_actor_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &init_actor_id_)));
          set_has_init_actor_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void TeamListInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required int32 purpose = 2;
  if (has_purpose()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->purpose(), output);
  }

  // required int32 membersize = 3;
  if (has_membersize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->membersize(), output);
  }

  // required string leadername = 4;
  if (has_leadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->leadername(), output);
  }

  // required int32 leaderlevel = 5;
  if (has_leaderlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->leaderlevel(), output);
  }

  // required int32 init_actor_id = 6;
  if (has_init_actor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->init_actor_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamListInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required int32 purpose = 2;
  if (has_purpose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->purpose(), target);
  }

  // required int32 membersize = 3;
  if (has_membersize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->membersize(), target);
  }

  // required string leadername = 4;
  if (has_leadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->leadername(), target);
  }

  // required int32 leaderlevel = 5;
  if (has_leaderlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->leaderlevel(), target);
  }

  // required int32 init_actor_id = 6;
  if (has_init_actor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->init_actor_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamListInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required int32 purpose = 2;
    if (has_purpose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->purpose());
    }

    // required int32 membersize = 3;
    if (has_membersize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->membersize());
    }

    // required string leadername = 4;
    if (has_leadername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leadername());
    }

    // required int32 leaderlevel = 5;
    if (has_leaderlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderlevel());
    }

    // required int32 init_actor_id = 6;
    if (has_init_actor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->init_actor_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamListInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamListInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamListInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void TeamListInfo::MergeFrom(const TeamListInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_purpose()) {
      set_purpose(from.purpose());
    }
    if (from.has_membersize()) {
      set_membersize(from.membersize());
    }
    if (from.has_leadername()) {
      set_leadername(from.leadername());
    }
    if (from.has_leaderlevel()) {
      set_leaderlevel(from.leaderlevel());
    }
    if (from.has_init_actor_id()) {
      set_init_actor_id(from.init_actor_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void TeamListInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void TeamListInfo::CopyFrom(const TeamListInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool TeamListInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void TeamListInfo::SetInitialized() {
  _has_bits_[0] |= 0x0000003f;

  return;
}

void TeamListInfo::Swap(TeamListInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(purpose_, other->purpose_);
    std::swap(membersize_, other->membersize_);
    std::swap(leadername_, other->leadername_);
    std::swap(leaderlevel_, other->leaderlevel_);
    std::swap(init_actor_id_, other->init_actor_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata TeamListInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamListInfo_descriptor_;
  metadata.reflection = TeamListInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TeamInfoReq::TeamInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamInfoReq::InitAsDefaultInstance() {
}

TeamInfoReq::TeamInfoReq(const TeamInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamInfoReq::~TeamInfoReq() {
  SharedDtor();
}

void TeamInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamInfoReq_descriptor_;
}

const TeamInfoReq& TeamInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

TeamInfoReq* TeamInfoReq::default_instance_ = NULL;

TeamInfoReq* TeamInfoReq::New() const {
  return new TeamInfoReq;
}

void TeamInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool TeamInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void TeamInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void TeamInfoReq::MergeFrom(const TeamInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void TeamInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void TeamInfoReq::CopyFrom(const TeamInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool TeamInfoReq::IsInitialized() const {

  return true;
}

void TeamInfoReq::SetInitialized() {

  return;
}

void TeamInfoReq::Swap(TeamInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata TeamInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamInfoReq_descriptor_;
  metadata.reflection = TeamInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

EmptyTeamReply::EmptyTeamReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EmptyTeamReply::InitAsDefaultInstance() {
}

EmptyTeamReply::EmptyTeamReply(const EmptyTeamReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EmptyTeamReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmptyTeamReply::~EmptyTeamReply() {
  SharedDtor();
}

void EmptyTeamReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EmptyTeamReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmptyTeamReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmptyTeamReply_descriptor_;
}

const EmptyTeamReply& EmptyTeamReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

EmptyTeamReply* EmptyTeamReply::default_instance_ = NULL;

EmptyTeamReply* EmptyTeamReply::New() const {
  return new EmptyTeamReply;
}

void EmptyTeamReply::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool EmptyTeamReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void EmptyTeamReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EmptyTeamReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EmptyTeamReply::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmptyTeamReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmptyTeamReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmptyTeamReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void EmptyTeamReply::MergeFrom(const EmptyTeamReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void EmptyTeamReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void EmptyTeamReply::CopyFrom(const EmptyTeamReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool EmptyTeamReply::IsInitialized() const {

  return true;
}

void EmptyTeamReply::SetInitialized() {

  return;
}

void EmptyTeamReply::Swap(EmptyTeamReply* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata EmptyTeamReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmptyTeamReply_descriptor_;
  metadata.reflection = EmptyTeamReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamInfoReply::kGuidFieldNumber;
const int TeamInfoReply::kMemberFieldNumber;
const int TeamInfoReply::kLeaderFieldNumber;
const int TeamInfoReply::kGroupFieldNumber;
const int TeamInfoReply::kArrangetypeFieldNumber;
const int TeamInfoReply::kPurposeFieldNumber;
const int TeamInfoReply::kAutoMatchFieldNumber;
const int TeamInfoReply::kApplylistFieldNumber;
#endif  // !_MSC_VER

TeamInfoReply::TeamInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamInfoReply::InitAsDefaultInstance() {
  purpose_ = const_cast< ::Packet::PurposeInfo*>(&::Packet::PurposeInfo::default_instance());
}

TeamInfoReply::TeamInfoReply(const TeamInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamInfoReply::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  leader_ = GOOGLE_ULONGLONG(0);
  group_ = false;
  arrangetype_ = -1;
  purpose_ = NULL;
  auto_match_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamInfoReply::~TeamInfoReply() {
  SharedDtor();
}

void TeamInfoReply::SharedDtor() {
  if (this != default_instance_) {
    delete purpose_;
  }
}

void TeamInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamInfoReply_descriptor_;
}

const TeamInfoReply& TeamInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

TeamInfoReply* TeamInfoReply::default_instance_ = NULL;

TeamInfoReply* TeamInfoReply::New() const {
  return new TeamInfoReply;
}

void TeamInfoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    leader_ = GOOGLE_ULONGLONG(0);
    group_ = false;
    arrangetype_ = -1;
    if (has_purpose()) {
      if (purpose_ != NULL) purpose_->::Packet::PurposeInfo::Clear();
    }
    auto_match_ = false;
  }
  member_.Clear();
  applylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool TeamInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_member;
        break;
      }

      // repeated .Packet.TeamFullPlayerInfo member = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_member;
        if (input->ExpectTag(25)) goto parse_leader;
        break;
      }

      // required fixed64 leader = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &leader_)));
          set_has_leader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_group;
        break;
      }

      // required bool group = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_arrangetype;
        break;
      }

      // required .Packet.ArrangeType arrangetype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arrangetype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::ArrangeType_IsValid(value)) {
            set_arrangetype(static_cast< ::Packet::ArrangeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_purpose;
        break;
      }

      // required .Packet.PurposeInfo purpose = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_purpose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_purpose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_auto_match;
        break;
      }

      // required bool auto_match = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_match:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_match_)));
          set_has_auto_match();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_applylist;
        break;
      }

      // repeated .Packet.PlayerBasicInfo applylist = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_applylist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applylist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_applylist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void TeamInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // repeated .Packet.TeamFullPlayerInfo member = 2;
  for (int i = 0; i < this->member_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->member(i), output);
  }

  // required fixed64 leader = 3;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->leader(), output);
  }

  // required bool group = 4;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->group(), output);
  }

  // required .Packet.ArrangeType arrangetype = 5;
  if (has_arrangetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->arrangetype(), output);
  }

  // required .Packet.PurposeInfo purpose = 6;
  if (has_purpose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->purpose(), output);
  }

  // required bool auto_match = 7;
  if (has_auto_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->auto_match(), output);
  }

  // repeated .Packet.PlayerBasicInfo applylist = 8;
  for (int i = 0; i < this->applylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->applylist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // repeated .Packet.TeamFullPlayerInfo member = 2;
  for (int i = 0; i < this->member_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->member(i), target);
  }

  // required fixed64 leader = 3;
  if (has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->leader(), target);
  }

  // required bool group = 4;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->group(), target);
  }

  // required .Packet.ArrangeType arrangetype = 5;
  if (has_arrangetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->arrangetype(), target);
  }

  // required .Packet.PurposeInfo purpose = 6;
  if (has_purpose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->purpose(), target);
  }

  // required bool auto_match = 7;
  if (has_auto_match()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->auto_match(), target);
  }

  // repeated .Packet.PlayerBasicInfo applylist = 8;
  for (int i = 0; i < this->applylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->applylist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamInfoReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 leader = 3;
    if (has_leader()) {
      total_size += 1 + 8;
    }

    // required bool group = 4;
    if (has_group()) {
      total_size += 1 + 1;
    }

    // required .Packet.ArrangeType arrangetype = 5;
    if (has_arrangetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->arrangetype());
    }

    // required .Packet.PurposeInfo purpose = 6;
    if (has_purpose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->purpose());
    }

    // required bool auto_match = 7;
    if (has_auto_match()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Packet.TeamFullPlayerInfo member = 2;
  total_size += 1 * this->member_size();
  for (int i = 0; i < this->member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member(i));
  }

  // repeated .Packet.PlayerBasicInfo applylist = 8;
  total_size += 1 * this->applylist_size();
  for (int i = 0; i < this->applylist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applylist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void TeamInfoReply::MergeFrom(const TeamInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_.MergeFrom(from.member_);
  applylist_.MergeFrom(from.applylist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_leader()) {
      set_leader(from.leader());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_arrangetype()) {
      set_arrangetype(from.arrangetype());
    }
    if (from.has_purpose()) {
      mutable_purpose()->::Packet::PurposeInfo::MergeFrom(from.purpose());
    }
    if (from.has_auto_match()) {
      set_auto_match(from.auto_match());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void TeamInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void TeamInfoReply::CopyFrom(const TeamInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool TeamInfoReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007d) != 0x0000007d) return false;

  for (int i = 0; i < member_size(); i++) {
    if (!this->member(i).IsInitialized()) return false;
  }
  if (has_purpose()) {
    if (!this->purpose().IsInitialized()) return false;
  }
  for (int i = 0; i < applylist_size(); i++) {
    if (!this->applylist(i).IsInitialized()) return false;
  }
  return true;
}

void TeamInfoReply::SetInitialized() {
  _has_bits_[0] |= 0x0000007d;

  for (int i = 0; i < member_size(); i++) {
    this->mutable_member(i)->SetInitialized();
  }
  if (has_purpose()) {
    this->mutable_purpose()->SetInitialized();
  }
  for (int i = 0; i < applylist_size(); i++) {
    this->mutable_applylist(i)->SetInitialized();
  }
  return;
}

void TeamInfoReply::Swap(TeamInfoReply* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    member_.Swap(&other->member_);
    std::swap(leader_, other->leader_);
    std::swap(group_, other->group_);
    std::swap(arrangetype_, other->arrangetype_);
    std::swap(purpose_, other->purpose_);
    std::swap(auto_match_, other->auto_match_);
    applylist_.Swap(&other->applylist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata TeamInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamInfoReply_descriptor_;
  metadata.reflection = TeamInfoReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FindTeamListReq::FindTeamListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FindTeamListReq::InitAsDefaultInstance() {
}

FindTeamListReq::FindTeamListReq(const FindTeamListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FindTeamListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FindTeamListReq::~FindTeamListReq() {
  SharedDtor();
}

void FindTeamListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FindTeamListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FindTeamListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FindTeamListReq_descriptor_;
}

const FindTeamListReq& FindTeamListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

FindTeamListReq* FindTeamListReq::default_instance_ = NULL;

FindTeamListReq* FindTeamListReq::New() const {
  return new FindTeamListReq;
}

void FindTeamListReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool FindTeamListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void FindTeamListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FindTeamListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FindTeamListReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FindTeamListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FindTeamListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FindTeamListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void FindTeamListReq::MergeFrom(const FindTeamListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void FindTeamListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void FindTeamListReq::CopyFrom(const FindTeamListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool FindTeamListReq::IsInitialized() const {

  return true;
}

void FindTeamListReq::SetInitialized() {

  return;
}

void FindTeamListReq::Swap(FindTeamListReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata FindTeamListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FindTeamListReq_descriptor_;
  metadata.reflection = FindTeamListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamListReply::kTeamsFieldNumber;
#endif  // !_MSC_VER

TeamListReply::TeamListReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamListReply::InitAsDefaultInstance() {
}

TeamListReply::TeamListReply(const TeamListReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamListReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamListReply::~TeamListReply() {
  SharedDtor();
}

void TeamListReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamListReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamListReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamListReply_descriptor_;
}

const TeamListReply& TeamListReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

TeamListReply* TeamListReply::default_instance_ = NULL;

TeamListReply* TeamListReply::New() const {
  return new TeamListReply;
}

void TeamListReply::Clear() {
  teams_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool TeamListReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.TeamListInfo teams = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teams()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_teams;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void TeamListReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.TeamListInfo teams = 1;
  for (int i = 0; i < this->teams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teams(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamListReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.TeamListInfo teams = 1;
  for (int i = 0; i < this->teams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teams(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamListReply::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.TeamListInfo teams = 1;
  total_size += 1 * this->teams_size();
  for (int i = 0; i < this->teams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teams(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamListReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamListReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamListReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void TeamListReply::MergeFrom(const TeamListReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  teams_.MergeFrom(from.teams_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void TeamListReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void TeamListReply::CopyFrom(const TeamListReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool TeamListReply::IsInitialized() const {

  for (int i = 0; i < teams_size(); i++) {
    if (!this->teams(i).IsInitialized()) return false;
  }
  return true;
}

void TeamListReply::SetInitialized() {

  for (int i = 0; i < teams_size(); i++) {
    this->mutable_teams(i)->SetInitialized();
  }
  return;
}

void TeamListReply::Swap(TeamListReply* other) {
  if (other != this) {
    teams_.Swap(&other->teams_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata TeamListReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamListReply_descriptor_;
  metadata.reflection = TeamListReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TeamApplyListReq::TeamApplyListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamApplyListReq::InitAsDefaultInstance() {
}

TeamApplyListReq::TeamApplyListReq(const TeamApplyListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamApplyListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamApplyListReq::~TeamApplyListReq() {
  SharedDtor();
}

void TeamApplyListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamApplyListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamApplyListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamApplyListReq_descriptor_;
}

const TeamApplyListReq& TeamApplyListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

TeamApplyListReq* TeamApplyListReq::default_instance_ = NULL;

TeamApplyListReq* TeamApplyListReq::New() const {
  return new TeamApplyListReq;
}

void TeamApplyListReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool TeamApplyListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void TeamApplyListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamApplyListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamApplyListReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamApplyListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamApplyListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamApplyListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void TeamApplyListReq::MergeFrom(const TeamApplyListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void TeamApplyListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void TeamApplyListReq::CopyFrom(const TeamApplyListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool TeamApplyListReq::IsInitialized() const {

  return true;
}

void TeamApplyListReq::SetInitialized() {

  return;
}

void TeamApplyListReq::Swap(TeamApplyListReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata TeamApplyListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamApplyListReq_descriptor_;
  metadata.reflection = TeamApplyListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamApplyListReply::kApplylistFieldNumber;
#endif  // !_MSC_VER

TeamApplyListReply::TeamApplyListReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamApplyListReply::InitAsDefaultInstance() {
}

TeamApplyListReply::TeamApplyListReply(const TeamApplyListReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamApplyListReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamApplyListReply::~TeamApplyListReply() {
  SharedDtor();
}

void TeamApplyListReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamApplyListReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamApplyListReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamApplyListReply_descriptor_;
}

const TeamApplyListReply& TeamApplyListReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

TeamApplyListReply* TeamApplyListReply::default_instance_ = NULL;

TeamApplyListReply* TeamApplyListReply::New() const {
  return new TeamApplyListReply;
}

void TeamApplyListReply::Clear() {
  applylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool TeamApplyListReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.PlayerBasicInfo applylist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_applylist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applylist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_applylist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void TeamApplyListReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.PlayerBasicInfo applylist = 1;
  for (int i = 0; i < this->applylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->applylist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamApplyListReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.PlayerBasicInfo applylist = 1;
  for (int i = 0; i < this->applylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->applylist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamApplyListReply::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.PlayerBasicInfo applylist = 1;
  total_size += 1 * this->applylist_size();
  for (int i = 0; i < this->applylist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applylist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamApplyListReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamApplyListReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamApplyListReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void TeamApplyListReply::MergeFrom(const TeamApplyListReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  applylist_.MergeFrom(from.applylist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void TeamApplyListReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void TeamApplyListReply::CopyFrom(const TeamApplyListReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool TeamApplyListReply::IsInitialized() const {

  for (int i = 0; i < applylist_size(); i++) {
    if (!this->applylist(i).IsInitialized()) return false;
  }
  return true;
}

void TeamApplyListReply::SetInitialized() {

  for (int i = 0; i < applylist_size(); i++) {
    this->mutable_applylist(i)->SetInitialized();
  }
  return;
}

void TeamApplyListReply::Swap(TeamApplyListReply* other) {
  if (other != this) {
    applylist_.Swap(&other->applylist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata TeamApplyListReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamApplyListReply_descriptor_;
  metadata.reflection = TeamApplyListReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerAutoMatchInfo::kPlayerguidFieldNumber;
const int PlayerAutoMatchInfo::kPurposeFieldNumber;
const int PlayerAutoMatchInfo::kLevelFieldNumber;
const int PlayerAutoMatchInfo::kHeroPositionFieldNumber;
#endif  // !_MSC_VER

PlayerAutoMatchInfo::PlayerAutoMatchInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerAutoMatchInfo::InitAsDefaultInstance() {
}

PlayerAutoMatchInfo::PlayerAutoMatchInfo(const PlayerAutoMatchInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerAutoMatchInfo::SharedCtor() {
  _cached_size_ = 0;
  playerguid_ = GOOGLE_ULONGLONG(0);
  purpose_ = 0;
  level_ = 0;
  hero_position_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerAutoMatchInfo::~PlayerAutoMatchInfo() {
  SharedDtor();
}

void PlayerAutoMatchInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerAutoMatchInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerAutoMatchInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerAutoMatchInfo_descriptor_;
}

const PlayerAutoMatchInfo& PlayerAutoMatchInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

PlayerAutoMatchInfo* PlayerAutoMatchInfo::default_instance_ = NULL;

PlayerAutoMatchInfo* PlayerAutoMatchInfo::New() const {
  return new PlayerAutoMatchInfo;
}

void PlayerAutoMatchInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerguid_ = GOOGLE_ULONGLONG(0);
    purpose_ = 0;
    level_ = 0;
    hero_position_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerAutoMatchInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 playerguid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &playerguid_)));
          set_has_playerguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_purpose;
        break;
      }

      // required int32 purpose = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_purpose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &purpose_)));
          set_has_purpose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hero_position;
        break;
      }

      // required int32 hero_position = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_position_)));
          set_has_hero_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerAutoMatchInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 playerguid = 1;
  if (has_playerguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->playerguid(), output);
  }

  // required int32 purpose = 2;
  if (has_purpose()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->purpose(), output);
  }

  // required int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // required int32 hero_position = 4;
  if (has_hero_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hero_position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerAutoMatchInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 playerguid = 1;
  if (has_playerguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->playerguid(), target);
  }

  // required int32 purpose = 2;
  if (has_purpose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->purpose(), target);
  }

  // required int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // required int32 hero_position = 4;
  if (has_hero_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hero_position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerAutoMatchInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 playerguid = 1;
    if (has_playerguid()) {
      total_size += 1 + 8;
    }

    // required int32 purpose = 2;
    if (has_purpose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->purpose());
    }

    // required int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 hero_position = 4;
    if (has_hero_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerAutoMatchInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerAutoMatchInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerAutoMatchInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerAutoMatchInfo::MergeFrom(const PlayerAutoMatchInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerguid()) {
      set_playerguid(from.playerguid());
    }
    if (from.has_purpose()) {
      set_purpose(from.purpose());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_hero_position()) {
      set_hero_position(from.hero_position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerAutoMatchInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerAutoMatchInfo::CopyFrom(const PlayerAutoMatchInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerAutoMatchInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PlayerAutoMatchInfo::SetInitialized() {
  _has_bits_[0] |= 0x0000000f;

  return;
}

void PlayerAutoMatchInfo::Swap(PlayerAutoMatchInfo* other) {
  if (other != this) {
    std::swap(playerguid_, other->playerguid_);
    std::swap(purpose_, other->purpose_);
    std::swap(level_, other->level_);
    std::swap(hero_position_, other->hero_position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerAutoMatchInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerAutoMatchInfo_descriptor_;
  metadata.reflection = PlayerAutoMatchInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerAutoMatchReq::kAutoMatchFieldNumber;
const int PlayerAutoMatchReq::kPurposeFieldNumber;
#endif  // !_MSC_VER

PlayerAutoMatchReq::PlayerAutoMatchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerAutoMatchReq::InitAsDefaultInstance() {
}

PlayerAutoMatchReq::PlayerAutoMatchReq(const PlayerAutoMatchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerAutoMatchReq::SharedCtor() {
  _cached_size_ = 0;
  auto_match_ = false;
  purpose_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerAutoMatchReq::~PlayerAutoMatchReq() {
  SharedDtor();
}

void PlayerAutoMatchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerAutoMatchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerAutoMatchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerAutoMatchReq_descriptor_;
}

const PlayerAutoMatchReq& PlayerAutoMatchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

PlayerAutoMatchReq* PlayerAutoMatchReq::default_instance_ = NULL;

PlayerAutoMatchReq* PlayerAutoMatchReq::New() const {
  return new PlayerAutoMatchReq;
}

void PlayerAutoMatchReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    auto_match_ = false;
    purpose_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerAutoMatchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool auto_match = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_match_)));
          set_has_auto_match();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_purpose;
        break;
      }

      // required int32 purpose = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_purpose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &purpose_)));
          set_has_purpose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerAutoMatchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool auto_match = 1;
  if (has_auto_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->auto_match(), output);
  }

  // required int32 purpose = 2;
  if (has_purpose()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->purpose(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerAutoMatchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool auto_match = 1;
  if (has_auto_match()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->auto_match(), target);
  }

  // required int32 purpose = 2;
  if (has_purpose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->purpose(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerAutoMatchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool auto_match = 1;
    if (has_auto_match()) {
      total_size += 1 + 1;
    }

    // required int32 purpose = 2;
    if (has_purpose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->purpose());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerAutoMatchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerAutoMatchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerAutoMatchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerAutoMatchReq::MergeFrom(const PlayerAutoMatchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_auto_match()) {
      set_auto_match(from.auto_match());
    }
    if (from.has_purpose()) {
      set_purpose(from.purpose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerAutoMatchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerAutoMatchReq::CopyFrom(const PlayerAutoMatchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerAutoMatchReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PlayerAutoMatchReq::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void PlayerAutoMatchReq::Swap(PlayerAutoMatchReq* other) {
  if (other != this) {
    std::swap(auto_match_, other->auto_match_);
    std::swap(purpose_, other->purpose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerAutoMatchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerAutoMatchReq_descriptor_;
  metadata.reflection = PlayerAutoMatchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerAutoMatchReply::kAutoMatchFieldNumber;
const int PlayerAutoMatchReply::kPurposeFieldNumber;
#endif  // !_MSC_VER

PlayerAutoMatchReply::PlayerAutoMatchReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerAutoMatchReply::InitAsDefaultInstance() {
}

PlayerAutoMatchReply::PlayerAutoMatchReply(const PlayerAutoMatchReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerAutoMatchReply::SharedCtor() {
  _cached_size_ = 0;
  auto_match_ = false;
  purpose_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerAutoMatchReply::~PlayerAutoMatchReply() {
  SharedDtor();
}

void PlayerAutoMatchReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerAutoMatchReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerAutoMatchReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerAutoMatchReply_descriptor_;
}

const PlayerAutoMatchReply& PlayerAutoMatchReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

PlayerAutoMatchReply* PlayerAutoMatchReply::default_instance_ = NULL;

PlayerAutoMatchReply* PlayerAutoMatchReply::New() const {
  return new PlayerAutoMatchReply;
}

void PlayerAutoMatchReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    auto_match_ = false;
    purpose_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerAutoMatchReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool auto_match = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_match_)));
          set_has_auto_match();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_purpose;
        break;
      }

      // optional int32 purpose = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_purpose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &purpose_)));
          set_has_purpose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerAutoMatchReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool auto_match = 1;
  if (has_auto_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->auto_match(), output);
  }

  // optional int32 purpose = 2;
  if (has_purpose()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->purpose(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerAutoMatchReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool auto_match = 1;
  if (has_auto_match()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->auto_match(), target);
  }

  // optional int32 purpose = 2;
  if (has_purpose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->purpose(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerAutoMatchReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool auto_match = 1;
    if (has_auto_match()) {
      total_size += 1 + 1;
    }

    // optional int32 purpose = 2;
    if (has_purpose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->purpose());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerAutoMatchReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerAutoMatchReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerAutoMatchReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerAutoMatchReply::MergeFrom(const PlayerAutoMatchReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_auto_match()) {
      set_auto_match(from.auto_match());
    }
    if (from.has_purpose()) {
      set_purpose(from.purpose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerAutoMatchReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerAutoMatchReply::CopyFrom(const PlayerAutoMatchReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerAutoMatchReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayerAutoMatchReply::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void PlayerAutoMatchReply::Swap(PlayerAutoMatchReply* other) {
  if (other != this) {
    std::swap(auto_match_, other->auto_match_);
    std::swap(purpose_, other->purpose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerAutoMatchReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerAutoMatchReply_descriptor_;
  metadata.reflection = PlayerAutoMatchReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerSetTeamStatusReq::kStatusFieldNumber;
#endif  // !_MSC_VER

PlayerSetTeamStatusReq::PlayerSetTeamStatusReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerSetTeamStatusReq::InitAsDefaultInstance() {
}

PlayerSetTeamStatusReq::PlayerSetTeamStatusReq(const PlayerSetTeamStatusReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerSetTeamStatusReq::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerSetTeamStatusReq::~PlayerSetTeamStatusReq() {
  SharedDtor();
}

void PlayerSetTeamStatusReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerSetTeamStatusReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerSetTeamStatusReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerSetTeamStatusReq_descriptor_;
}

const PlayerSetTeamStatusReq& PlayerSetTeamStatusReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

PlayerSetTeamStatusReq* PlayerSetTeamStatusReq::default_instance_ = NULL;

PlayerSetTeamStatusReq* PlayerSetTeamStatusReq::New() const {
  return new PlayerSetTeamStatusReq;
}

void PlayerSetTeamStatusReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerSetTeamStatusReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.PlayerTeamStatus status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::PlayerTeamStatus_IsValid(value)) {
            set_status(static_cast< ::Packet::PlayerTeamStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerSetTeamStatusReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.PlayerTeamStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerSetTeamStatusReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.PlayerTeamStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerSetTeamStatusReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.PlayerTeamStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerSetTeamStatusReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerSetTeamStatusReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerSetTeamStatusReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerSetTeamStatusReq::MergeFrom(const PlayerSetTeamStatusReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerSetTeamStatusReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerSetTeamStatusReq::CopyFrom(const PlayerSetTeamStatusReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerSetTeamStatusReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayerSetTeamStatusReq::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void PlayerSetTeamStatusReq::Swap(PlayerSetTeamStatusReq* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerSetTeamStatusReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerSetTeamStatusReq_descriptor_;
  metadata.reflection = PlayerSetTeamStatusReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamPlayerBasicUpdate::kPlayerinfoFieldNumber;
#endif  // !_MSC_VER

TeamPlayerBasicUpdate::TeamPlayerBasicUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamPlayerBasicUpdate::InitAsDefaultInstance() {
  playerinfo_ = const_cast< ::Packet::TeamFullPlayerInfo*>(&::Packet::TeamFullPlayerInfo::default_instance());
}

TeamPlayerBasicUpdate::TeamPlayerBasicUpdate(const TeamPlayerBasicUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamPlayerBasicUpdate::SharedCtor() {
  _cached_size_ = 0;
  playerinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamPlayerBasicUpdate::~TeamPlayerBasicUpdate() {
  SharedDtor();
}

void TeamPlayerBasicUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete playerinfo_;
  }
}

void TeamPlayerBasicUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamPlayerBasicUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamPlayerBasicUpdate_descriptor_;
}

const TeamPlayerBasicUpdate& TeamPlayerBasicUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

TeamPlayerBasicUpdate* TeamPlayerBasicUpdate::default_instance_ = NULL;

TeamPlayerBasicUpdate* TeamPlayerBasicUpdate::New() const {
  return new TeamPlayerBasicUpdate;
}

void TeamPlayerBasicUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerinfo()) {
      if (playerinfo_ != NULL) playerinfo_->::Packet::TeamFullPlayerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool TeamPlayerBasicUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.TeamFullPlayerInfo playerinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void TeamPlayerBasicUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.TeamFullPlayerInfo playerinfo = 1;
  if (has_playerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->playerinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamPlayerBasicUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.TeamFullPlayerInfo playerinfo = 1;
  if (has_playerinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->playerinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamPlayerBasicUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.TeamFullPlayerInfo playerinfo = 1;
    if (has_playerinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamPlayerBasicUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamPlayerBasicUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamPlayerBasicUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void TeamPlayerBasicUpdate::MergeFrom(const TeamPlayerBasicUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerinfo()) {
      mutable_playerinfo()->::Packet::TeamFullPlayerInfo::MergeFrom(from.playerinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void TeamPlayerBasicUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void TeamPlayerBasicUpdate::CopyFrom(const TeamPlayerBasicUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool TeamPlayerBasicUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_playerinfo()) {
    if (!this->playerinfo().IsInitialized()) return false;
  }
  return true;
}

void TeamPlayerBasicUpdate::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  if (has_playerinfo()) {
    this->mutable_playerinfo()->SetInitialized();
  }
  return;
}

void TeamPlayerBasicUpdate::Swap(TeamPlayerBasicUpdate* other) {
  if (other != this) {
    std::swap(playerinfo_, other->playerinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata TeamPlayerBasicUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamPlayerBasicUpdate_descriptor_;
  metadata.reflection = TeamPlayerBasicUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetTeamLeaderReq::kPlayerguidFieldNumber;
#endif  // !_MSC_VER

SetTeamLeaderReq::SetTeamLeaderReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetTeamLeaderReq::InitAsDefaultInstance() {
}

SetTeamLeaderReq::SetTeamLeaderReq(const SetTeamLeaderReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetTeamLeaderReq::SharedCtor() {
  _cached_size_ = 0;
  playerguid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetTeamLeaderReq::~SetTeamLeaderReq() {
  SharedDtor();
}

void SetTeamLeaderReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetTeamLeaderReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetTeamLeaderReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetTeamLeaderReq_descriptor_;
}

const SetTeamLeaderReq& SetTeamLeaderReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

SetTeamLeaderReq* SetTeamLeaderReq::default_instance_ = NULL;

SetTeamLeaderReq* SetTeamLeaderReq::New() const {
  return new SetTeamLeaderReq;
}

void SetTeamLeaderReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerguid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SetTeamLeaderReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 playerguid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &playerguid_)));
          set_has_playerguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SetTeamLeaderReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 playerguid = 1;
  if (has_playerguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->playerguid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetTeamLeaderReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 playerguid = 1;
  if (has_playerguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->playerguid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetTeamLeaderReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 playerguid = 1;
    if (has_playerguid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetTeamLeaderReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetTeamLeaderReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetTeamLeaderReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SetTeamLeaderReq::MergeFrom(const SetTeamLeaderReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerguid()) {
      set_playerguid(from.playerguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SetTeamLeaderReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SetTeamLeaderReq::CopyFrom(const SetTeamLeaderReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SetTeamLeaderReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetTeamLeaderReq::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void SetTeamLeaderReq::Swap(SetTeamLeaderReq* other) {
  if (other != this) {
    std::swap(playerguid_, other->playerguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SetTeamLeaderReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetTeamLeaderReq_descriptor_;
  metadata.reflection = SetTeamLeaderReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ApplyTeamLeaderReq::ApplyTeamLeaderReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyTeamLeaderReq::InitAsDefaultInstance() {
}

ApplyTeamLeaderReq::ApplyTeamLeaderReq(const ApplyTeamLeaderReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyTeamLeaderReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyTeamLeaderReq::~ApplyTeamLeaderReq() {
  SharedDtor();
}

void ApplyTeamLeaderReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplyTeamLeaderReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyTeamLeaderReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyTeamLeaderReq_descriptor_;
}

const ApplyTeamLeaderReq& ApplyTeamLeaderReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

ApplyTeamLeaderReq* ApplyTeamLeaderReq::default_instance_ = NULL;

ApplyTeamLeaderReq* ApplyTeamLeaderReq::New() const {
  return new ApplyTeamLeaderReq;
}

void ApplyTeamLeaderReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ApplyTeamLeaderReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void ApplyTeamLeaderReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplyTeamLeaderReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplyTeamLeaderReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyTeamLeaderReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyTeamLeaderReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyTeamLeaderReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ApplyTeamLeaderReq::MergeFrom(const ApplyTeamLeaderReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ApplyTeamLeaderReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ApplyTeamLeaderReq::CopyFrom(const ApplyTeamLeaderReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ApplyTeamLeaderReq::IsInitialized() const {

  return true;
}

void ApplyTeamLeaderReq::SetInitialized() {

  return;
}

void ApplyTeamLeaderReq::Swap(ApplyTeamLeaderReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ApplyTeamLeaderReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyTeamLeaderReq_descriptor_;
  metadata.reflection = ApplyTeamLeaderReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskApplyTeamLeaderReq::kPlayerguidFieldNumber;
#endif  // !_MSC_VER

AskApplyTeamLeaderReq::AskApplyTeamLeaderReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AskApplyTeamLeaderReq::InitAsDefaultInstance() {
}

AskApplyTeamLeaderReq::AskApplyTeamLeaderReq(const AskApplyTeamLeaderReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AskApplyTeamLeaderReq::SharedCtor() {
  _cached_size_ = 0;
  playerguid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskApplyTeamLeaderReq::~AskApplyTeamLeaderReq() {
  SharedDtor();
}

void AskApplyTeamLeaderReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskApplyTeamLeaderReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskApplyTeamLeaderReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskApplyTeamLeaderReq_descriptor_;
}

const AskApplyTeamLeaderReq& AskApplyTeamLeaderReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

AskApplyTeamLeaderReq* AskApplyTeamLeaderReq::default_instance_ = NULL;

AskApplyTeamLeaderReq* AskApplyTeamLeaderReq::New() const {
  return new AskApplyTeamLeaderReq;
}

void AskApplyTeamLeaderReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerguid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool AskApplyTeamLeaderReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 playerguid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &playerguid_)));
          set_has_playerguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void AskApplyTeamLeaderReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 playerguid = 1;
  if (has_playerguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->playerguid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AskApplyTeamLeaderReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 playerguid = 1;
  if (has_playerguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->playerguid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AskApplyTeamLeaderReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 playerguid = 1;
    if (has_playerguid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskApplyTeamLeaderReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskApplyTeamLeaderReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskApplyTeamLeaderReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void AskApplyTeamLeaderReq::MergeFrom(const AskApplyTeamLeaderReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerguid()) {
      set_playerguid(from.playerguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void AskApplyTeamLeaderReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void AskApplyTeamLeaderReq::CopyFrom(const AskApplyTeamLeaderReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool AskApplyTeamLeaderReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AskApplyTeamLeaderReq::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void AskApplyTeamLeaderReq::Swap(AskApplyTeamLeaderReq* other) {
  if (other != this) {
    std::swap(playerguid_, other->playerguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata AskApplyTeamLeaderReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskApplyTeamLeaderReq_descriptor_;
  metadata.reflection = AskApplyTeamLeaderReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskApplyTeamLeaderReply::kAgreeFieldNumber;
#endif  // !_MSC_VER

AskApplyTeamLeaderReply::AskApplyTeamLeaderReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AskApplyTeamLeaderReply::InitAsDefaultInstance() {
}

AskApplyTeamLeaderReply::AskApplyTeamLeaderReply(const AskApplyTeamLeaderReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AskApplyTeamLeaderReply::SharedCtor() {
  _cached_size_ = 0;
  agree_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskApplyTeamLeaderReply::~AskApplyTeamLeaderReply() {
  SharedDtor();
}

void AskApplyTeamLeaderReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskApplyTeamLeaderReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskApplyTeamLeaderReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskApplyTeamLeaderReply_descriptor_;
}

const AskApplyTeamLeaderReply& AskApplyTeamLeaderReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

AskApplyTeamLeaderReply* AskApplyTeamLeaderReply::default_instance_ = NULL;

AskApplyTeamLeaderReply* AskApplyTeamLeaderReply::New() const {
  return new AskApplyTeamLeaderReply;
}

void AskApplyTeamLeaderReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    agree_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool AskApplyTeamLeaderReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool agree = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_)));
          set_has_agree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void AskApplyTeamLeaderReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool agree = 1;
  if (has_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->agree(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AskApplyTeamLeaderReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool agree = 1;
  if (has_agree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->agree(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AskApplyTeamLeaderReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool agree = 1;
    if (has_agree()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskApplyTeamLeaderReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskApplyTeamLeaderReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskApplyTeamLeaderReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void AskApplyTeamLeaderReply::MergeFrom(const AskApplyTeamLeaderReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agree()) {
      set_agree(from.agree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void AskApplyTeamLeaderReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void AskApplyTeamLeaderReply::CopyFrom(const AskApplyTeamLeaderReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool AskApplyTeamLeaderReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AskApplyTeamLeaderReply::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void AskApplyTeamLeaderReply::Swap(AskApplyTeamLeaderReply* other) {
  if (other != this) {
    std::swap(agree_, other->agree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata AskApplyTeamLeaderReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskApplyTeamLeaderReply_descriptor_;
  metadata.reflection = AskApplyTeamLeaderReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamLeaderUpdate::kPlayerguidFieldNumber;
const int TeamLeaderUpdate::kPlayernameFieldNumber;
const int TeamLeaderUpdate::kMoveSpeedFieldNumber;
const int TeamLeaderUpdate::kChargeFieldNumber;
#endif  // !_MSC_VER

TeamLeaderUpdate::TeamLeaderUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamLeaderUpdate::InitAsDefaultInstance() {
}

TeamLeaderUpdate::TeamLeaderUpdate(const TeamLeaderUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamLeaderUpdate::SharedCtor() {
  _cached_size_ = 0;
  playerguid_ = GOOGLE_ULONGLONG(0);
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  move_speed_ = 0u;
  charge_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamLeaderUpdate::~TeamLeaderUpdate() {
  SharedDtor();
}

void TeamLeaderUpdate::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void TeamLeaderUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamLeaderUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamLeaderUpdate_descriptor_;
}

const TeamLeaderUpdate& TeamLeaderUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

TeamLeaderUpdate* TeamLeaderUpdate::default_instance_ = NULL;

TeamLeaderUpdate* TeamLeaderUpdate::New() const {
  return new TeamLeaderUpdate;
}

void TeamLeaderUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerguid_ = GOOGLE_ULONGLONG(0);
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    move_speed_ = 0u;
    charge_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool TeamLeaderUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 playerguid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &playerguid_)));
          set_has_playerguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playername;
        break;
      }

      // required string playername = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_move_speed;
        break;
      }

      // required fixed32 move_speed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_move_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &move_speed_)));
          set_has_move_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_charge;
        break;
      }

      // required bool charge = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &charge_)));
          set_has_charge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void TeamLeaderUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 playerguid = 1;
  if (has_playerguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->playerguid(), output);
  }

  // required string playername = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->playername(), output);
  }

  // required fixed32 move_speed = 3;
  if (has_move_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->move_speed(), output);
  }

  // required bool charge = 4;
  if (has_charge()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->charge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamLeaderUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 playerguid = 1;
  if (has_playerguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->playerguid(), target);
  }

  // required string playername = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playername(), target);
  }

  // required fixed32 move_speed = 3;
  if (has_move_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->move_speed(), target);
  }

  // required bool charge = 4;
  if (has_charge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->charge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamLeaderUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 playerguid = 1;
    if (has_playerguid()) {
      total_size += 1 + 8;
    }

    // required string playername = 2;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // required fixed32 move_speed = 3;
    if (has_move_speed()) {
      total_size += 1 + 4;
    }

    // required bool charge = 4;
    if (has_charge()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamLeaderUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamLeaderUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamLeaderUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void TeamLeaderUpdate::MergeFrom(const TeamLeaderUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerguid()) {
      set_playerguid(from.playerguid());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_move_speed()) {
      set_move_speed(from.move_speed());
    }
    if (from.has_charge()) {
      set_charge(from.charge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void TeamLeaderUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void TeamLeaderUpdate::CopyFrom(const TeamLeaderUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool TeamLeaderUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void TeamLeaderUpdate::SetInitialized() {
  _has_bits_[0] |= 0x0000000f;

  return;
}

void TeamLeaderUpdate::Swap(TeamLeaderUpdate* other) {
  if (other != this) {
    std::swap(playerguid_, other->playerguid_);
    std::swap(playername_, other->playername_);
    std::swap(move_speed_, other->move_speed_);
    std::swap(charge_, other->charge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata TeamLeaderUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamLeaderUpdate_descriptor_;
  metadata.reflection = TeamLeaderUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RobotPlayerInOk::kBasicInfoFieldNumber;
const int RobotPlayerInOk::kOneKeyIdFieldNumber;
#endif  // !_MSC_VER

RobotPlayerInOk::RobotPlayerInOk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RobotPlayerInOk::InitAsDefaultInstance() {
}

RobotPlayerInOk::RobotPlayerInOk(const RobotPlayerInOk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RobotPlayerInOk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RobotPlayerInOk::~RobotPlayerInOk() {
  SharedDtor();
}

void RobotPlayerInOk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RobotPlayerInOk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotPlayerInOk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotPlayerInOk_descriptor_;
}

const RobotPlayerInOk& RobotPlayerInOk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

RobotPlayerInOk* RobotPlayerInOk::default_instance_ = NULL;

RobotPlayerInOk* RobotPlayerInOk::New() const {
  return new RobotPlayerInOk;
}

void RobotPlayerInOk::Clear() {
  basic_info_.Clear();
  one_key_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool RobotPlayerInOk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.PlayerBasicInfo basic_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_basic_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_basic_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_basic_info;
        if (input->ExpectTag(16)) goto parse_one_key_id;
        break;
      }

      // repeated int32 one_key_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_one_key_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_one_key_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_one_key_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_one_key_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void RobotPlayerInOk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.PlayerBasicInfo basic_info = 1;
  for (int i = 0; i < this->basic_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->basic_info(i), output);
  }

  // repeated int32 one_key_id = 2;
  for (int i = 0; i < this->one_key_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->one_key_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RobotPlayerInOk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.PlayerBasicInfo basic_info = 1;
  for (int i = 0; i < this->basic_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->basic_info(i), target);
  }

  // repeated int32 one_key_id = 2;
  for (int i = 0; i < this->one_key_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->one_key_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RobotPlayerInOk::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.PlayerBasicInfo basic_info = 1;
  total_size += 1 * this->basic_info_size();
  for (int i = 0; i < this->basic_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->basic_info(i));
  }

  // repeated int32 one_key_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->one_key_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->one_key_id(i));
    }
    total_size += 1 * this->one_key_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotPlayerInOk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RobotPlayerInOk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RobotPlayerInOk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void RobotPlayerInOk::MergeFrom(const RobotPlayerInOk& from) {
  GOOGLE_CHECK_NE(&from, this);
  basic_info_.MergeFrom(from.basic_info_);
  one_key_id_.MergeFrom(from.one_key_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void RobotPlayerInOk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void RobotPlayerInOk::CopyFrom(const RobotPlayerInOk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool RobotPlayerInOk::IsInitialized() const {

  for (int i = 0; i < basic_info_size(); i++) {
    if (!this->basic_info(i).IsInitialized()) return false;
  }
  return true;
}

void RobotPlayerInOk::SetInitialized() {

  for (int i = 0; i < basic_info_size(); i++) {
    this->mutable_basic_info(i)->SetInitialized();
  }
  return;
}

void RobotPlayerInOk::Swap(RobotPlayerInOk* other) {
  if (other != this) {
    basic_info_.Swap(&other->basic_info_);
    one_key_id_.Swap(&other->one_key_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata RobotPlayerInOk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RobotPlayerInOk_descriptor_;
  metadata.reflection = RobotPlayerInOk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamAutomatchConfig::kIdFieldNumber;
const int TeamAutomatchConfig::kGroupFieldNumber;
const int TeamAutomatchConfig::kDefenceCountFieldNumber;
const int TeamAutomatchConfig::kCureCountFieldNumber;
const int TeamAutomatchConfig::kAttackCountFieldNumber;
const int TeamAutomatchConfig::kNeedDefenceCountFieldNumber;
const int TeamAutomatchConfig::kNeedCureCountFieldNumber;
const int TeamAutomatchConfig::kNeedAttackCountFieldNumber;
#endif  // !_MSC_VER

TeamAutomatchConfig::TeamAutomatchConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamAutomatchConfig::InitAsDefaultInstance() {
}

TeamAutomatchConfig::TeamAutomatchConfig(const TeamAutomatchConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamAutomatchConfig::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  group_ = 0;
  defence_count_ = 0;
  cure_count_ = 0;
  attack_count_ = 0;
  need_defence_count_ = 0;
  need_cure_count_ = 0;
  need_attack_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamAutomatchConfig::~TeamAutomatchConfig() {
  SharedDtor();
}

void TeamAutomatchConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamAutomatchConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamAutomatchConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamAutomatchConfig_descriptor_;
}

const TeamAutomatchConfig& TeamAutomatchConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

TeamAutomatchConfig* TeamAutomatchConfig::default_instance_ = NULL;

TeamAutomatchConfig* TeamAutomatchConfig::New() const {
  return new TeamAutomatchConfig;
}

void TeamAutomatchConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    group_ = 0;
    defence_count_ = 0;
    cure_count_ = 0;
    attack_count_ = 0;
    need_defence_count_ = 0;
    need_cure_count_ = 0;
    need_attack_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool TeamAutomatchConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_group;
        break;
      }

      // required int32 group = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_defence_count;
        break;
      }

      // required int32 defence_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defence_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defence_count_)));
          set_has_defence_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cure_count;
        break;
      }

      // required int32 cure_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cure_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cure_count_)));
          set_has_cure_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_attack_count;
        break;
      }

      // required int32 attack_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_count_)));
          set_has_attack_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_need_defence_count;
        break;
      }

      // required int32 need_defence_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_defence_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_defence_count_)));
          set_has_need_defence_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_need_cure_count;
        break;
      }

      // required int32 need_cure_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_cure_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_cure_count_)));
          set_has_need_cure_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_need_attack_count;
        break;
      }

      // required int32 need_attack_count = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_attack_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_attack_count_)));
          set_has_need_attack_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void TeamAutomatchConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 group = 2;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->group(), output);
  }

  // required int32 defence_count = 3;
  if (has_defence_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->defence_count(), output);
  }

  // required int32 cure_count = 4;
  if (has_cure_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cure_count(), output);
  }

  // required int32 attack_count = 5;
  if (has_attack_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->attack_count(), output);
  }

  // required int32 need_defence_count = 6;
  if (has_need_defence_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->need_defence_count(), output);
  }

  // required int32 need_cure_count = 7;
  if (has_need_cure_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->need_cure_count(), output);
  }

  // required int32 need_attack_count = 8;
  if (has_need_attack_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->need_attack_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamAutomatchConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 group = 2;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->group(), target);
  }

  // required int32 defence_count = 3;
  if (has_defence_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->defence_count(), target);
  }

  // required int32 cure_count = 4;
  if (has_cure_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cure_count(), target);
  }

  // required int32 attack_count = 5;
  if (has_attack_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->attack_count(), target);
  }

  // required int32 need_defence_count = 6;
  if (has_need_defence_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->need_defence_count(), target);
  }

  // required int32 need_cure_count = 7;
  if (has_need_cure_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->need_cure_count(), target);
  }

  // required int32 need_attack_count = 8;
  if (has_need_attack_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->need_attack_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamAutomatchConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 group = 2;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group());
    }

    // required int32 defence_count = 3;
    if (has_defence_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defence_count());
    }

    // required int32 cure_count = 4;
    if (has_cure_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cure_count());
    }

    // required int32 attack_count = 5;
    if (has_attack_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_count());
    }

    // required int32 need_defence_count = 6;
    if (has_need_defence_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->need_defence_count());
    }

    // required int32 need_cure_count = 7;
    if (has_need_cure_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->need_cure_count());
    }

    // required int32 need_attack_count = 8;
    if (has_need_attack_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->need_attack_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamAutomatchConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamAutomatchConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamAutomatchConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void TeamAutomatchConfig::MergeFrom(const TeamAutomatchConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_defence_count()) {
      set_defence_count(from.defence_count());
    }
    if (from.has_cure_count()) {
      set_cure_count(from.cure_count());
    }
    if (from.has_attack_count()) {
      set_attack_count(from.attack_count());
    }
    if (from.has_need_defence_count()) {
      set_need_defence_count(from.need_defence_count());
    }
    if (from.has_need_cure_count()) {
      set_need_cure_count(from.need_cure_count());
    }
    if (from.has_need_attack_count()) {
      set_need_attack_count(from.need_attack_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void TeamAutomatchConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void TeamAutomatchConfig::CopyFrom(const TeamAutomatchConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool TeamAutomatchConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void TeamAutomatchConfig::SetInitialized() {
  _has_bits_[0] |= 0x000000ff;

  return;
}

void TeamAutomatchConfig::Swap(TeamAutomatchConfig* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(group_, other->group_);
    std::swap(defence_count_, other->defence_count_);
    std::swap(cure_count_, other->cure_count_);
    std::swap(attack_count_, other->attack_count_);
    std::swap(need_defence_count_, other->need_defence_count_);
    std::swap(need_cure_count_, other->need_cure_count_);
    std::swap(need_attack_count_, other->need_attack_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata TeamAutomatchConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamAutomatchConfig_descriptor_;
  metadata.reflection = TeamAutomatchConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

// @@protoc_insertion_point(global_scope)
