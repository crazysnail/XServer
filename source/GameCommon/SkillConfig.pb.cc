// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SkillConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SkillConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Config {

namespace {

const ::google::protobuf::Descriptor* TargetSelectLogic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TargetSelectLogic_reflection_ = NULL;
const ::google::protobuf::Descriptor* TargetSelectExtra_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TargetSelectExtra_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImpactConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImpactConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillBuildConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillBuildConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffDefine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffDefine_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SkillConfig_2eproto() {
  protobuf_AddDesc_SkillConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SkillConfig.proto");
  GOOGLE_CHECK(file != NULL);
  TargetSelectLogic_descriptor_ = file->message_type(0);
  static const int TargetSelectLogic_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetSelectLogic, sort_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetSelectLogic, target_camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetSelectLogic, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetSelectLogic, min_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetSelectLogic, max_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetSelectLogic, area_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetSelectLogic, param_1_),
  };
  TargetSelectLogic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TargetSelectLogic_descriptor_,
      TargetSelectLogic::default_instance_,
      TargetSelectLogic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetSelectLogic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetSelectLogic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TargetSelectLogic));
  TargetSelectExtra_descriptor_ = file->message_type(1);
  static const int TargetSelectExtra_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetSelectExtra, sort_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetSelectExtra, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetSelectExtra, max_count_),
  };
  TargetSelectExtra_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TargetSelectExtra_descriptor_,
      TargetSelectExtra::default_instance_,
      TargetSelectExtra_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetSelectExtra, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetSelectExtra, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TargetSelectExtra));
  SkillConfig_descriptor_ = file->message_type(2);
  static const int SkillConfig_offsets_[30] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfig, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfig, prefix_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfig, bullet_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfig, surffix_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfig, cd_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfig, skill_tar_logic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfig, tar_extra_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfig, skill_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfig, self_property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfig, target_property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfig, skill_effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfig, self_buff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfig, buffs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfig, buff_tar_logics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfig, sub_skills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfig, parent_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfig, acce_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfig, self_property_revise_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfig, self_property_revise_value_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfig, self_property_revise_value_type_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfig, buff_property_revise_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfig, buff_property_revise_value_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfig, buff_property_revise_value_type_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfig, position_effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfig, effect_param_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfig, effect_param_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfig, effect_param_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfig, effect_param_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfig, is_sneak_),
  };
  SkillConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillConfig_descriptor_,
      SkillConfig::default_instance_,
      SkillConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillConfig));
  ImpactConfig_descriptor_ = file->message_type(3);
  static const int ImpactConfig_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpactConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpactConfig, impact_logic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpactConfig, effect_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpactConfig, max_layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpactConfig, mutex_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpactConfig, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpactConfig, last_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpactConfig, trigger_freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpactConfig, effect_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpactConfig, param_types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpactConfig, param_values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpactConfig, buff_tar_logic_),
  };
  ImpactConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImpactConfig_descriptor_,
      ImpactConfig::default_instance_,
      ImpactConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpactConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImpactConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImpactConfig));
  SkillBuildConfig_descriptor_ = file->message_type(4);
  static const int SkillBuildConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBuildConfig, actor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBuildConfig, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBuildConfig, skill_ids_),
  };
  SkillBuildConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillBuildConfig_descriptor_,
      SkillBuildConfig::default_instance_,
      SkillBuildConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBuildConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillBuildConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillBuildConfig));
  BuffDefine_descriptor_ = file->message_type(5);
  static const int BuffDefine_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDefine, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDefine, is_debuff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDefine, can_despell_),
  };
  BuffDefine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffDefine_descriptor_,
      BuffDefine::default_instance_,
      BuffDefine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDefine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDefine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffDefine));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SkillConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TargetSelectLogic_descriptor_, &TargetSelectLogic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TargetSelectExtra_descriptor_, &TargetSelectExtra::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillConfig_descriptor_, &SkillConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImpactConfig_descriptor_, &ImpactConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillBuildConfig_descriptor_, &SkillBuildConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffDefine_descriptor_, &BuffDefine::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SkillConfig_2eproto() {
  delete TargetSelectLogic::default_instance_;
  delete TargetSelectLogic_reflection_;
  delete TargetSelectExtra::default_instance_;
  delete TargetSelectExtra_reflection_;
  delete SkillConfig::default_instance_;
  delete SkillConfig_reflection_;
  delete ImpactConfig::default_instance_;
  delete ImpactConfig_reflection_;
  delete SkillBuildConfig::default_instance_;
  delete SkillBuildConfig_reflection_;
  delete BuffDefine::default_instance_;
  delete BuffDefine_reflection_;
}

void protobuf_AddDesc_SkillConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Packet::protobuf_AddDesc_ProtoBufOption_2eproto();
  ::Config::protobuf_AddDesc_AllConfigEnum_2eproto();
  ::Packet::protobuf_AddDesc_AllPacketEnum_2eproto();
  ::Packet::protobuf_AddDesc_BattleInfo_2eproto();
  ::Packet::protobuf_AddDesc_ActorBasicInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021SkillConfig.proto\022\006Config\032\024ProtoBufOpt"
    "ion.proto\032\023AllConfigEnum.proto\032\023AllPacke"
    "tEnum.proto\032\020BattleInfo.proto\032\024ActorBasi"
    "cInfo.proto\"\322\001\n\021TargetSelectLogic\022)\n\tsor"
    "t_type\030\001 \002(\0162\026.Config.TargetSortType\022\'\n\013"
    "target_camp\030\002 \002(\0162\022.Config.TargetCamp\022\r\n"
    "\005range\030\003 \002(\005\022\021\n\tmin_count\030\004 \002(\005\022\021\n\tmax_c"
    "ount\030\005 \002(\005\022#\n\tarea_type\030\006 \002(\0162\020.Config.A"
    "reaType\022\017\n\007param_1\030\007 \002(\005\"`\n\021TargetSelect"
    "Extra\022)\n\tsort_type\030\001 \002(\0162\026.Config.Target"
    "SortType\022\r\n\005range\030\002 \002(\005\022\021\n\tmax_count\030\003 \002"
    "(\005\"\376\007\n\013SkillConfig\022\n\n\002id\030\001 \002(\005\022\r\n\005level\030"
    "\002 \002(\005\022\023\n\013prefix_time\030\003 \002(\005\022\024\n\014bullet_spe"
    "ed\030\004 \002(\002\022\024\n\014surffix_time\030\005 \002(\005\022\017\n\007cd_tim"
    "e\030\006 \002(\005\0222\n\017skill_tar_logic\030\007 \002(\0132\031.Confi"
    "g.TargetSelectLogic\022,\n\ttar_extra\030\010 \002(\0132\031"
    ".Config.TargetSelectExtra\022%\n\nskill_type\030"
    "\t \002(\0162\021.Config.SkillType\022\'\n\rself_propert"
    "y\030\016 \002(\0162\020.Packet.Property\022)\n\017target_prop"
    "erty\030\017 \002(\0162\020.Packet.Property\022\024\n\014skill_ef"
    "fect\030\020 \002(\t\022\021\n\tself_buff\030\021 \002(\005\022\023\n\005buffs\030\022"
    " \003(\005B\004\300\363\030\002\0228\n\017buff_tar_logics\030\023 \003(\0132\031.Co"
    "nfig.TargetSelectLogicB\004\300\363\030\002\022\'\n\nsub_skil"
    "ls\030\024 \003(\0132\023.Config.SkillConfig\022\024\n\014parent_"
    "skill\030\025 \002(\005\022\023\n\013acce_factor\030\026 \002(\002\0220\n\026self"
    "_property_revise_0\030\027 \002(\0162\020.Packet.Proper"
    "ty\022$\n\034self_property_revise_value_0\030\030 \002(\002"
    "\022J\n!self_property_revise_value_type_0\030\031 "
    "\002(\0162\037.Config.PropertyReviseValueType\0220\n\026"
    "buff_property_revise_0\030\032 \002(\0162\020.Packet.Pr"
    "operty\022$\n\034buff_property_revise_value_0\030\033"
    " \002(\002\022J\n!buff_property_revise_value_type_"
    "0\030\034 \002(\0162\037.Config.PropertyReviseValueType"
    "\022\027\n\017position_effect\030\035 \002(\t\022\026\n\016effect_para"
    "m_0\030\036 \002(\005\022\026\n\016effect_param_1\030\037 \002(\005\022\026\n\016eff"
    "ect_param_2\030  \002(\005\022\036\n\020effect_param_str\030! "
    "\003(\tB\004\300\363\030\005\022\020\n\010is_sneak\030\" \002(\010\"\263\002\n\014ImpactCo"
    "nfig\022\n\n\002id\030\001 \002(\005\022\024\n\014impact_logic\030\002 \002(\t\022-"
    "\n\013effect_type\030\003 \002(\0162\030.Config.ImpactEffec"
    "tType\022\021\n\tmax_layer\030\004 \002(\005\022\020\n\010mutex_id\030\005 \002"
    "(\005\022\020\n\010priority\030\006 \002(\005\022\021\n\tlast_time\030\007 \002(\005\022"
    "\024\n\014trigger_freq\030\010 \002(\005\022\024\n\014effect_times\030\t "
    "\002(\005\022\023\n\013param_types\030\n \003(\005\022\024\n\014param_values"
    "\030\013 \003(\002\0221\n\016buff_tar_logic\030\014 \002(\0132\031.Config."
    "TargetSelectLogic\"Z\n\020SkillBuildConfig\022\020\n"
    "\010actor_id\030\001 \002(\005\022!\n\005color\030\002 \002(\0162\022.Packet."
    "ActorColor\022\021\n\tskill_ids\030\003 \003(\005\"T\n\nBuffDef"
    "ine\022\036\n\004type\030\001 \002(\0162\020.Config.BuffType\022\021\n\ti"
    "s_debuff\030\002 \002(\010\022\023\n\013can_despell\030\003 \002(\010", 1955);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SkillConfig.proto", &protobuf_RegisterTypes);
  TargetSelectLogic::default_instance_ = new TargetSelectLogic();
  TargetSelectExtra::default_instance_ = new TargetSelectExtra();
  SkillConfig::default_instance_ = new SkillConfig();
  ImpactConfig::default_instance_ = new ImpactConfig();
  SkillBuildConfig::default_instance_ = new SkillBuildConfig();
  BuffDefine::default_instance_ = new BuffDefine();
  TargetSelectLogic::default_instance_->InitAsDefaultInstance();
  TargetSelectExtra::default_instance_->InitAsDefaultInstance();
  SkillConfig::default_instance_->InitAsDefaultInstance();
  ImpactConfig::default_instance_->InitAsDefaultInstance();
  SkillBuildConfig::default_instance_->InitAsDefaultInstance();
  BuffDefine::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SkillConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SkillConfig_2eproto {
  StaticDescriptorInitializer_SkillConfig_2eproto() {
    protobuf_AddDesc_SkillConfig_2eproto();
  }
} static_descriptor_initializer_SkillConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TargetSelectLogic::kSortTypeFieldNumber;
const int TargetSelectLogic::kTargetCampFieldNumber;
const int TargetSelectLogic::kRangeFieldNumber;
const int TargetSelectLogic::kMinCountFieldNumber;
const int TargetSelectLogic::kMaxCountFieldNumber;
const int TargetSelectLogic::kAreaTypeFieldNumber;
const int TargetSelectLogic::kParam1FieldNumber;
#endif  // !_MSC_VER

TargetSelectLogic::TargetSelectLogic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TargetSelectLogic::InitAsDefaultInstance() {
}

TargetSelectLogic::TargetSelectLogic(const TargetSelectLogic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TargetSelectLogic::SharedCtor() {
  _cached_size_ = 0;
  sort_type_ = 0;
  target_camp_ = 0;
  range_ = 0;
  min_count_ = 0;
  max_count_ = 0;
  area_type_ = 0;
  param_1_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TargetSelectLogic::~TargetSelectLogic() {
  SharedDtor();
}

void TargetSelectLogic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TargetSelectLogic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetSelectLogic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetSelectLogic_descriptor_;
}

const TargetSelectLogic& TargetSelectLogic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillConfig_2eproto();
  return *default_instance_;
}

TargetSelectLogic* TargetSelectLogic::default_instance_ = NULL;

TargetSelectLogic* TargetSelectLogic::New() const {
  return new TargetSelectLogic;
}

void TargetSelectLogic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sort_type_ = 0;
    target_camp_ = 0;
    range_ = 0;
    min_count_ = 0;
    max_count_ = 0;
    area_type_ = 0;
    param_1_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool TargetSelectLogic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Config.TargetSortType sort_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Config::TargetSortType_IsValid(value)) {
            set_sort_type(static_cast< ::Config::TargetSortType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target_camp;
        break;
      }

      // required .Config.TargetCamp target_camp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_camp:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Config::TargetCamp_IsValid(value)) {
            set_target_camp(static_cast< ::Config::TargetCamp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_range;
        break;
      }

      // required int32 range = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &range_)));
          set_has_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_min_count;
        break;
      }

      // required int32 min_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_count_)));
          set_has_min_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_max_count;
        break;
      }

      // required int32 max_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_count_)));
          set_has_max_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_area_type;
        break;
      }

      // required .Config.AreaType area_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Config::AreaType_IsValid(value)) {
            set_area_type(static_cast< ::Config::AreaType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_param_1;
        break;
      }

      // required int32 param_1 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_1_)));
          set_has_param_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void TargetSelectLogic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Config.TargetSortType sort_type = 1;
  if (has_sort_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->sort_type(), output);
  }

  // required .Config.TargetCamp target_camp = 2;
  if (has_target_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->target_camp(), output);
  }

  // required int32 range = 3;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->range(), output);
  }

  // required int32 min_count = 4;
  if (has_min_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->min_count(), output);
  }

  // required int32 max_count = 5;
  if (has_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->max_count(), output);
  }

  // required .Config.AreaType area_type = 6;
  if (has_area_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->area_type(), output);
  }

  // required int32 param_1 = 7;
  if (has_param_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->param_1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TargetSelectLogic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Config.TargetSortType sort_type = 1;
  if (has_sort_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->sort_type(), target);
  }

  // required .Config.TargetCamp target_camp = 2;
  if (has_target_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->target_camp(), target);
  }

  // required int32 range = 3;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->range(), target);
  }

  // required int32 min_count = 4;
  if (has_min_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->min_count(), target);
  }

  // required int32 max_count = 5;
  if (has_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->max_count(), target);
  }

  // required .Config.AreaType area_type = 6;
  if (has_area_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->area_type(), target);
  }

  // required int32 param_1 = 7;
  if (has_param_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->param_1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TargetSelectLogic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Config.TargetSortType sort_type = 1;
    if (has_sort_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sort_type());
    }

    // required .Config.TargetCamp target_camp = 2;
    if (has_target_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->target_camp());
    }

    // required int32 range = 3;
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->range());
    }

    // required int32 min_count = 4;
    if (has_min_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_count());
    }

    // required int32 max_count = 5;
    if (has_max_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_count());
    }

    // required .Config.AreaType area_type = 6;
    if (has_area_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->area_type());
    }

    // required int32 param_1 = 7;
    if (has_param_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param_1());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetSelectLogic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TargetSelectLogic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TargetSelectLogic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void TargetSelectLogic::MergeFrom(const TargetSelectLogic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sort_type()) {
      set_sort_type(from.sort_type());
    }
    if (from.has_target_camp()) {
      set_target_camp(from.target_camp());
    }
    if (from.has_range()) {
      set_range(from.range());
    }
    if (from.has_min_count()) {
      set_min_count(from.min_count());
    }
    if (from.has_max_count()) {
      set_max_count(from.max_count());
    }
    if (from.has_area_type()) {
      set_area_type(from.area_type());
    }
    if (from.has_param_1()) {
      set_param_1(from.param_1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void TargetSelectLogic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void TargetSelectLogic::CopyFrom(const TargetSelectLogic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool TargetSelectLogic::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void TargetSelectLogic::SetInitialized() {
  _has_bits_[0] |= 0x0000007f;

  return;
}

void TargetSelectLogic::Swap(TargetSelectLogic* other) {
  if (other != this) {
    std::swap(sort_type_, other->sort_type_);
    std::swap(target_camp_, other->target_camp_);
    std::swap(range_, other->range_);
    std::swap(min_count_, other->min_count_);
    std::swap(max_count_, other->max_count_);
    std::swap(area_type_, other->area_type_);
    std::swap(param_1_, other->param_1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata TargetSelectLogic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TargetSelectLogic_descriptor_;
  metadata.reflection = TargetSelectLogic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TargetSelectExtra::kSortTypeFieldNumber;
const int TargetSelectExtra::kRangeFieldNumber;
const int TargetSelectExtra::kMaxCountFieldNumber;
#endif  // !_MSC_VER

TargetSelectExtra::TargetSelectExtra()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TargetSelectExtra::InitAsDefaultInstance() {
}

TargetSelectExtra::TargetSelectExtra(const TargetSelectExtra& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TargetSelectExtra::SharedCtor() {
  _cached_size_ = 0;
  sort_type_ = 0;
  range_ = 0;
  max_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TargetSelectExtra::~TargetSelectExtra() {
  SharedDtor();
}

void TargetSelectExtra::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TargetSelectExtra::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetSelectExtra::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetSelectExtra_descriptor_;
}

const TargetSelectExtra& TargetSelectExtra::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillConfig_2eproto();
  return *default_instance_;
}

TargetSelectExtra* TargetSelectExtra::default_instance_ = NULL;

TargetSelectExtra* TargetSelectExtra::New() const {
  return new TargetSelectExtra;
}

void TargetSelectExtra::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sort_type_ = 0;
    range_ = 0;
    max_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool TargetSelectExtra::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Config.TargetSortType sort_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Config::TargetSortType_IsValid(value)) {
            set_sort_type(static_cast< ::Config::TargetSortType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_range;
        break;
      }

      // required int32 range = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &range_)));
          set_has_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_count;
        break;
      }

      // required int32 max_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_count_)));
          set_has_max_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void TargetSelectExtra::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Config.TargetSortType sort_type = 1;
  if (has_sort_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->sort_type(), output);
  }

  // required int32 range = 2;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->range(), output);
  }

  // required int32 max_count = 3;
  if (has_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TargetSelectExtra::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Config.TargetSortType sort_type = 1;
  if (has_sort_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->sort_type(), target);
  }

  // required int32 range = 2;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->range(), target);
  }

  // required int32 max_count = 3;
  if (has_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TargetSelectExtra::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Config.TargetSortType sort_type = 1;
    if (has_sort_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sort_type());
    }

    // required int32 range = 2;
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->range());
    }

    // required int32 max_count = 3;
    if (has_max_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetSelectExtra::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TargetSelectExtra* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TargetSelectExtra*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void TargetSelectExtra::MergeFrom(const TargetSelectExtra& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sort_type()) {
      set_sort_type(from.sort_type());
    }
    if (from.has_range()) {
      set_range(from.range());
    }
    if (from.has_max_count()) {
      set_max_count(from.max_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void TargetSelectExtra::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void TargetSelectExtra::CopyFrom(const TargetSelectExtra& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool TargetSelectExtra::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TargetSelectExtra::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  return;
}

void TargetSelectExtra::Swap(TargetSelectExtra* other) {
  if (other != this) {
    std::swap(sort_type_, other->sort_type_);
    std::swap(range_, other->range_);
    std::swap(max_count_, other->max_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata TargetSelectExtra::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TargetSelectExtra_descriptor_;
  metadata.reflection = TargetSelectExtra_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillConfig::kIdFieldNumber;
const int SkillConfig::kLevelFieldNumber;
const int SkillConfig::kPrefixTimeFieldNumber;
const int SkillConfig::kBulletSpeedFieldNumber;
const int SkillConfig::kSurffixTimeFieldNumber;
const int SkillConfig::kCdTimeFieldNumber;
const int SkillConfig::kSkillTarLogicFieldNumber;
const int SkillConfig::kTarExtraFieldNumber;
const int SkillConfig::kSkillTypeFieldNumber;
const int SkillConfig::kSelfPropertyFieldNumber;
const int SkillConfig::kTargetPropertyFieldNumber;
const int SkillConfig::kSkillEffectFieldNumber;
const int SkillConfig::kSelfBuffFieldNumber;
const int SkillConfig::kBuffsFieldNumber;
const int SkillConfig::kBuffTarLogicsFieldNumber;
const int SkillConfig::kSubSkillsFieldNumber;
const int SkillConfig::kParentSkillFieldNumber;
const int SkillConfig::kAcceFactorFieldNumber;
const int SkillConfig::kSelfPropertyRevise0FieldNumber;
const int SkillConfig::kSelfPropertyReviseValue0FieldNumber;
const int SkillConfig::kSelfPropertyReviseValueType0FieldNumber;
const int SkillConfig::kBuffPropertyRevise0FieldNumber;
const int SkillConfig::kBuffPropertyReviseValue0FieldNumber;
const int SkillConfig::kBuffPropertyReviseValueType0FieldNumber;
const int SkillConfig::kPositionEffectFieldNumber;
const int SkillConfig::kEffectParam0FieldNumber;
const int SkillConfig::kEffectParam1FieldNumber;
const int SkillConfig::kEffectParam2FieldNumber;
const int SkillConfig::kEffectParamStrFieldNumber;
const int SkillConfig::kIsSneakFieldNumber;
#endif  // !_MSC_VER

SkillConfig::SkillConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillConfig::InitAsDefaultInstance() {
  skill_tar_logic_ = const_cast< ::Config::TargetSelectLogic*>(&::Config::TargetSelectLogic::default_instance());
  tar_extra_ = const_cast< ::Config::TargetSelectExtra*>(&::Config::TargetSelectExtra::default_instance());
}

SkillConfig::SkillConfig(const SkillConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillConfig::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  level_ = 0;
  prefix_time_ = 0;
  bullet_speed_ = 0;
  surffix_time_ = 0;
  cd_time_ = 0;
  skill_tar_logic_ = NULL;
  tar_extra_ = NULL;
  skill_type_ = 0;
  self_property_ = 0;
  target_property_ = 0;
  skill_effect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  self_buff_ = 0;
  parent_skill_ = 0;
  acce_factor_ = 0;
  self_property_revise_0_ = 0;
  self_property_revise_value_0_ = 0;
  self_property_revise_value_type_0_ = 0;
  buff_property_revise_0_ = 0;
  buff_property_revise_value_0_ = 0;
  buff_property_revise_value_type_0_ = 0;
  position_effect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  effect_param_0_ = 0;
  effect_param_1_ = 0;
  effect_param_2_ = 0;
  is_sneak_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillConfig::~SkillConfig() {
  SharedDtor();
}

void SkillConfig::SharedDtor() {
  if (skill_effect_ != &::google::protobuf::internal::kEmptyString) {
    delete skill_effect_;
  }
  if (position_effect_ != &::google::protobuf::internal::kEmptyString) {
    delete position_effect_;
  }
  if (this != default_instance_) {
    delete skill_tar_logic_;
    delete tar_extra_;
  }
}

void SkillConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillConfig_descriptor_;
}

const SkillConfig& SkillConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillConfig_2eproto();
  return *default_instance_;
}

SkillConfig* SkillConfig::default_instance_ = NULL;

SkillConfig* SkillConfig::New() const {
  return new SkillConfig;
}

void SkillConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    level_ = 0;
    prefix_time_ = 0;
    bullet_speed_ = 0;
    surffix_time_ = 0;
    cd_time_ = 0;
    if (has_skill_tar_logic()) {
      if (skill_tar_logic_ != NULL) skill_tar_logic_->::Config::TargetSelectLogic::Clear();
    }
    if (has_tar_extra()) {
      if (tar_extra_ != NULL) tar_extra_->::Config::TargetSelectExtra::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    skill_type_ = 0;
    self_property_ = 0;
    target_property_ = 0;
    if (has_skill_effect()) {
      if (skill_effect_ != &::google::protobuf::internal::kEmptyString) {
        skill_effect_->clear();
      }
    }
    self_buff_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    parent_skill_ = 0;
    acce_factor_ = 0;
    self_property_revise_0_ = 0;
    self_property_revise_value_0_ = 0;
    self_property_revise_value_type_0_ = 0;
    buff_property_revise_0_ = 0;
    buff_property_revise_value_0_ = 0;
    buff_property_revise_value_type_0_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_position_effect()) {
      if (position_effect_ != &::google::protobuf::internal::kEmptyString) {
        position_effect_->clear();
      }
    }
    effect_param_0_ = 0;
    effect_param_1_ = 0;
    effect_param_2_ = 0;
    is_sneak_ = false;
  }
  buffs_.Clear();
  buff_tar_logics_.Clear();
  sub_skills_.Clear();
  effect_param_str_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SkillConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_prefix_time;
        break;
      }

      // required int32 prefix_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prefix_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prefix_time_)));
          set_has_prefix_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_bullet_speed;
        break;
      }

      // required float bullet_speed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bullet_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bullet_speed_)));
          set_has_bullet_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_surffix_time;
        break;
      }

      // required int32 surffix_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_surffix_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &surffix_time_)));
          set_has_surffix_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cd_time;
        break;
      }

      // required int32 cd_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_time_)));
          set_has_cd_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_skill_tar_logic;
        break;
      }

      // required .Config.TargetSelectLogic skill_tar_logic = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_tar_logic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill_tar_logic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_tar_extra;
        break;
      }

      // required .Config.TargetSelectExtra tar_extra = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tar_extra:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tar_extra()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_skill_type;
        break;
      }

      // required .Config.SkillType skill_type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Config::SkillType_IsValid(value)) {
            set_skill_type(static_cast< ::Config::SkillType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_self_property;
        break;
      }

      // required .Packet.Property self_property = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_property:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::Property_IsValid(value)) {
            set_self_property(static_cast< ::Packet::Property >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_target_property;
        break;
      }

      // required .Packet.Property target_property = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_property:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::Property_IsValid(value)) {
            set_target_property(static_cast< ::Packet::Property >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_skill_effect;
        break;
      }

      // required string skill_effect = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_effect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skill_effect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->skill_effect().data(), this->skill_effect().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_self_buff;
        break;
      }

      // required int32 self_buff = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_buff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &self_buff_)));
          set_has_self_buff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_buffs;
        break;
      }

      // repeated int32 buffs = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buffs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 144, input, this->mutable_buffs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_buffs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_buffs;
        if (input->ExpectTag(154)) goto parse_buff_tar_logics;
        break;
      }

      // repeated .Config.TargetSelectLogic buff_tar_logics = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buff_tar_logics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buff_tar_logics()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_buff_tar_logics;
        if (input->ExpectTag(162)) goto parse_sub_skills;
        break;
      }

      // repeated .Config.SkillConfig sub_skills = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sub_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sub_skills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_sub_skills;
        if (input->ExpectTag(168)) goto parse_parent_skill;
        break;
      }

      // required int32 parent_skill = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parent_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_skill_)));
          set_has_parent_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(181)) goto parse_acce_factor;
        break;
      }

      // required float acce_factor = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_acce_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acce_factor_)));
          set_has_acce_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_self_property_revise_0;
        break;
      }

      // required .Packet.Property self_property_revise_0 = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_property_revise_0:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::Property_IsValid(value)) {
            set_self_property_revise_0(static_cast< ::Packet::Property >(value));
          } else {
            mutable_unknown_fields()->AddVarint(23, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(197)) goto parse_self_property_revise_value_0;
        break;
      }

      // required float self_property_revise_value_0 = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_self_property_revise_value_0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &self_property_revise_value_0_)));
          set_has_self_property_revise_value_0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_self_property_revise_value_type_0;
        break;
      }

      // required .Config.PropertyReviseValueType self_property_revise_value_type_0 = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_property_revise_value_type_0:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Config::PropertyReviseValueType_IsValid(value)) {
            set_self_property_revise_value_type_0(static_cast< ::Config::PropertyReviseValueType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(25, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_buff_property_revise_0;
        break;
      }

      // required .Packet.Property buff_property_revise_0 = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buff_property_revise_0:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::Property_IsValid(value)) {
            set_buff_property_revise_0(static_cast< ::Packet::Property >(value));
          } else {
            mutable_unknown_fields()->AddVarint(26, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(221)) goto parse_buff_property_revise_value_0;
        break;
      }

      // required float buff_property_revise_value_0 = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_buff_property_revise_value_0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &buff_property_revise_value_0_)));
          set_has_buff_property_revise_value_0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_buff_property_revise_value_type_0;
        break;
      }

      // required .Config.PropertyReviseValueType buff_property_revise_value_type_0 = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buff_property_revise_value_type_0:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Config::PropertyReviseValueType_IsValid(value)) {
            set_buff_property_revise_value_type_0(static_cast< ::Config::PropertyReviseValueType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(28, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_position_effect;
        break;
      }

      // required string position_effect = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position_effect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_position_effect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->position_effect().data(), this->position_effect().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_effect_param_0;
        break;
      }

      // required int32 effect_param_0 = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect_param_0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effect_param_0_)));
          set_has_effect_param_0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_effect_param_1;
        break;
      }

      // required int32 effect_param_1 = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect_param_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effect_param_1_)));
          set_has_effect_param_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_effect_param_2;
        break;
      }

      // required int32 effect_param_2 = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect_param_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effect_param_2_)));
          set_has_effect_param_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_effect_param_str;
        break;
      }

      // repeated string effect_param_str = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effect_param_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_effect_param_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->effect_param_str(this->effect_param_str_size() - 1).data(),
            this->effect_param_str(this->effect_param_str_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_effect_param_str;
        if (input->ExpectTag(272)) goto parse_is_sneak;
        break;
      }

      // required bool is_sneak = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_sneak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_sneak_)));
          set_has_is_sneak();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SkillConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required int32 prefix_time = 3;
  if (has_prefix_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->prefix_time(), output);
  }

  // required float bullet_speed = 4;
  if (has_bullet_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->bullet_speed(), output);
  }

  // required int32 surffix_time = 5;
  if (has_surffix_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->surffix_time(), output);
  }

  // required int32 cd_time = 6;
  if (has_cd_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cd_time(), output);
  }

  // required .Config.TargetSelectLogic skill_tar_logic = 7;
  if (has_skill_tar_logic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->skill_tar_logic(), output);
  }

  // required .Config.TargetSelectExtra tar_extra = 8;
  if (has_tar_extra()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->tar_extra(), output);
  }

  // required .Config.SkillType skill_type = 9;
  if (has_skill_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->skill_type(), output);
  }

  // required .Packet.Property self_property = 14;
  if (has_self_property()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->self_property(), output);
  }

  // required .Packet.Property target_property = 15;
  if (has_target_property()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->target_property(), output);
  }

  // required string skill_effect = 16;
  if (has_skill_effect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->skill_effect().data(), this->skill_effect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->skill_effect(), output);
  }

  // required int32 self_buff = 17;
  if (has_self_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->self_buff(), output);
  }

  // repeated int32 buffs = 18;
  for (int i = 0; i < this->buffs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      18, this->buffs(i), output);
  }

  // repeated .Config.TargetSelectLogic buff_tar_logics = 19;
  for (int i = 0; i < this->buff_tar_logics_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->buff_tar_logics(i), output);
  }

  // repeated .Config.SkillConfig sub_skills = 20;
  for (int i = 0; i < this->sub_skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->sub_skills(i), output);
  }

  // required int32 parent_skill = 21;
  if (has_parent_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->parent_skill(), output);
  }

  // required float acce_factor = 22;
  if (has_acce_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->acce_factor(), output);
  }

  // required .Packet.Property self_property_revise_0 = 23;
  if (has_self_property_revise_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->self_property_revise_0(), output);
  }

  // required float self_property_revise_value_0 = 24;
  if (has_self_property_revise_value_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->self_property_revise_value_0(), output);
  }

  // required .Config.PropertyReviseValueType self_property_revise_value_type_0 = 25;
  if (has_self_property_revise_value_type_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      25, this->self_property_revise_value_type_0(), output);
  }

  // required .Packet.Property buff_property_revise_0 = 26;
  if (has_buff_property_revise_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      26, this->buff_property_revise_0(), output);
  }

  // required float buff_property_revise_value_0 = 27;
  if (has_buff_property_revise_value_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->buff_property_revise_value_0(), output);
  }

  // required .Config.PropertyReviseValueType buff_property_revise_value_type_0 = 28;
  if (has_buff_property_revise_value_type_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      28, this->buff_property_revise_value_type_0(), output);
  }

  // required string position_effect = 29;
  if (has_position_effect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->position_effect().data(), this->position_effect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->position_effect(), output);
  }

  // required int32 effect_param_0 = 30;
  if (has_effect_param_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->effect_param_0(), output);
  }

  // required int32 effect_param_1 = 31;
  if (has_effect_param_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->effect_param_1(), output);
  }

  // required int32 effect_param_2 = 32;
  if (has_effect_param_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->effect_param_2(), output);
  }

  // repeated string effect_param_str = 33;
  for (int i = 0; i < this->effect_param_str_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->effect_param_str(i).data(), this->effect_param_str(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->effect_param_str(i), output);
  }

  // required bool is_sneak = 34;
  if (has_is_sneak()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->is_sneak(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required int32 prefix_time = 3;
  if (has_prefix_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->prefix_time(), target);
  }

  // required float bullet_speed = 4;
  if (has_bullet_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->bullet_speed(), target);
  }

  // required int32 surffix_time = 5;
  if (has_surffix_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->surffix_time(), target);
  }

  // required int32 cd_time = 6;
  if (has_cd_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cd_time(), target);
  }

  // required .Config.TargetSelectLogic skill_tar_logic = 7;
  if (has_skill_tar_logic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->skill_tar_logic(), target);
  }

  // required .Config.TargetSelectExtra tar_extra = 8;
  if (has_tar_extra()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->tar_extra(), target);
  }

  // required .Config.SkillType skill_type = 9;
  if (has_skill_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->skill_type(), target);
  }

  // required .Packet.Property self_property = 14;
  if (has_self_property()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->self_property(), target);
  }

  // required .Packet.Property target_property = 15;
  if (has_target_property()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->target_property(), target);
  }

  // required string skill_effect = 16;
  if (has_skill_effect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->skill_effect().data(), this->skill_effect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->skill_effect(), target);
  }

  // required int32 self_buff = 17;
  if (has_self_buff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->self_buff(), target);
  }

  // repeated int32 buffs = 18;
  for (int i = 0; i < this->buffs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(18, this->buffs(i), target);
  }

  // repeated .Config.TargetSelectLogic buff_tar_logics = 19;
  for (int i = 0; i < this->buff_tar_logics_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->buff_tar_logics(i), target);
  }

  // repeated .Config.SkillConfig sub_skills = 20;
  for (int i = 0; i < this->sub_skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->sub_skills(i), target);
  }

  // required int32 parent_skill = 21;
  if (has_parent_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->parent_skill(), target);
  }

  // required float acce_factor = 22;
  if (has_acce_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->acce_factor(), target);
  }

  // required .Packet.Property self_property_revise_0 = 23;
  if (has_self_property_revise_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->self_property_revise_0(), target);
  }

  // required float self_property_revise_value_0 = 24;
  if (has_self_property_revise_value_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->self_property_revise_value_0(), target);
  }

  // required .Config.PropertyReviseValueType self_property_revise_value_type_0 = 25;
  if (has_self_property_revise_value_type_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      25, this->self_property_revise_value_type_0(), target);
  }

  // required .Packet.Property buff_property_revise_0 = 26;
  if (has_buff_property_revise_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      26, this->buff_property_revise_0(), target);
  }

  // required float buff_property_revise_value_0 = 27;
  if (has_buff_property_revise_value_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->buff_property_revise_value_0(), target);
  }

  // required .Config.PropertyReviseValueType buff_property_revise_value_type_0 = 28;
  if (has_buff_property_revise_value_type_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      28, this->buff_property_revise_value_type_0(), target);
  }

  // required string position_effect = 29;
  if (has_position_effect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->position_effect().data(), this->position_effect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->position_effect(), target);
  }

  // required int32 effect_param_0 = 30;
  if (has_effect_param_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->effect_param_0(), target);
  }

  // required int32 effect_param_1 = 31;
  if (has_effect_param_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->effect_param_1(), target);
  }

  // required int32 effect_param_2 = 32;
  if (has_effect_param_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->effect_param_2(), target);
  }

  // repeated string effect_param_str = 33;
  for (int i = 0; i < this->effect_param_str_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->effect_param_str(i).data(), this->effect_param_str(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(33, this->effect_param_str(i), target);
  }

  // required bool is_sneak = 34;
  if (has_is_sneak()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(34, this->is_sneak(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 prefix_time = 3;
    if (has_prefix_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prefix_time());
    }

    // required float bullet_speed = 4;
    if (has_bullet_speed()) {
      total_size += 1 + 4;
    }

    // required int32 surffix_time = 5;
    if (has_surffix_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->surffix_time());
    }

    // required int32 cd_time = 6;
    if (has_cd_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd_time());
    }

    // required .Config.TargetSelectLogic skill_tar_logic = 7;
    if (has_skill_tar_logic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill_tar_logic());
    }

    // required .Config.TargetSelectExtra tar_extra = 8;
    if (has_tar_extra()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tar_extra());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .Config.SkillType skill_type = 9;
    if (has_skill_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->skill_type());
    }

    // required .Packet.Property self_property = 14;
    if (has_self_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->self_property());
    }

    // required .Packet.Property target_property = 15;
    if (has_target_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->target_property());
    }

    // required string skill_effect = 16;
    if (has_skill_effect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skill_effect());
    }

    // required int32 self_buff = 17;
    if (has_self_buff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->self_buff());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 parent_skill = 21;
    if (has_parent_skill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parent_skill());
    }

    // required float acce_factor = 22;
    if (has_acce_factor()) {
      total_size += 2 + 4;
    }

    // required .Packet.Property self_property_revise_0 = 23;
    if (has_self_property_revise_0()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->self_property_revise_0());
    }

    // required float self_property_revise_value_0 = 24;
    if (has_self_property_revise_value_0()) {
      total_size += 2 + 4;
    }

    // required .Config.PropertyReviseValueType self_property_revise_value_type_0 = 25;
    if (has_self_property_revise_value_type_0()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->self_property_revise_value_type_0());
    }

    // required .Packet.Property buff_property_revise_0 = 26;
    if (has_buff_property_revise_0()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->buff_property_revise_0());
    }

    // required float buff_property_revise_value_0 = 27;
    if (has_buff_property_revise_value_0()) {
      total_size += 2 + 4;
    }

    // required .Config.PropertyReviseValueType buff_property_revise_value_type_0 = 28;
    if (has_buff_property_revise_value_type_0()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->buff_property_revise_value_type_0());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required string position_effect = 29;
    if (has_position_effect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->position_effect());
    }

    // required int32 effect_param_0 = 30;
    if (has_effect_param_0()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effect_param_0());
    }

    // required int32 effect_param_1 = 31;
    if (has_effect_param_1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effect_param_1());
    }

    // required int32 effect_param_2 = 32;
    if (has_effect_param_2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effect_param_2());
    }

    // required bool is_sneak = 34;
    if (has_is_sneak()) {
      total_size += 2 + 1;
    }

  }
  // repeated int32 buffs = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->buffs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->buffs(i));
    }
    total_size += 2 * this->buffs_size() + data_size;
  }

  // repeated .Config.TargetSelectLogic buff_tar_logics = 19;
  total_size += 2 * this->buff_tar_logics_size();
  for (int i = 0; i < this->buff_tar_logics_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buff_tar_logics(i));
  }

  // repeated .Config.SkillConfig sub_skills = 20;
  total_size += 2 * this->sub_skills_size();
  for (int i = 0; i < this->sub_skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sub_skills(i));
  }

  // repeated string effect_param_str = 33;
  total_size += 2 * this->effect_param_str_size();
  for (int i = 0; i < this->effect_param_str_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->effect_param_str(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SkillConfig::MergeFrom(const SkillConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  buffs_.MergeFrom(from.buffs_);
  buff_tar_logics_.MergeFrom(from.buff_tar_logics_);
  sub_skills_.MergeFrom(from.sub_skills_);
  effect_param_str_.MergeFrom(from.effect_param_str_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_prefix_time()) {
      set_prefix_time(from.prefix_time());
    }
    if (from.has_bullet_speed()) {
      set_bullet_speed(from.bullet_speed());
    }
    if (from.has_surffix_time()) {
      set_surffix_time(from.surffix_time());
    }
    if (from.has_cd_time()) {
      set_cd_time(from.cd_time());
    }
    if (from.has_skill_tar_logic()) {
      mutable_skill_tar_logic()->::Config::TargetSelectLogic::MergeFrom(from.skill_tar_logic());
    }
    if (from.has_tar_extra()) {
      mutable_tar_extra()->::Config::TargetSelectExtra::MergeFrom(from.tar_extra());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_skill_type()) {
      set_skill_type(from.skill_type());
    }
    if (from.has_self_property()) {
      set_self_property(from.self_property());
    }
    if (from.has_target_property()) {
      set_target_property(from.target_property());
    }
    if (from.has_skill_effect()) {
      set_skill_effect(from.skill_effect());
    }
    if (from.has_self_buff()) {
      set_self_buff(from.self_buff());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_parent_skill()) {
      set_parent_skill(from.parent_skill());
    }
    if (from.has_acce_factor()) {
      set_acce_factor(from.acce_factor());
    }
    if (from.has_self_property_revise_0()) {
      set_self_property_revise_0(from.self_property_revise_0());
    }
    if (from.has_self_property_revise_value_0()) {
      set_self_property_revise_value_0(from.self_property_revise_value_0());
    }
    if (from.has_self_property_revise_value_type_0()) {
      set_self_property_revise_value_type_0(from.self_property_revise_value_type_0());
    }
    if (from.has_buff_property_revise_0()) {
      set_buff_property_revise_0(from.buff_property_revise_0());
    }
    if (from.has_buff_property_revise_value_0()) {
      set_buff_property_revise_value_0(from.buff_property_revise_value_0());
    }
    if (from.has_buff_property_revise_value_type_0()) {
      set_buff_property_revise_value_type_0(from.buff_property_revise_value_type_0());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_position_effect()) {
      set_position_effect(from.position_effect());
    }
    if (from.has_effect_param_0()) {
      set_effect_param_0(from.effect_param_0());
    }
    if (from.has_effect_param_1()) {
      set_effect_param_1(from.effect_param_1());
    }
    if (from.has_effect_param_2()) {
      set_effect_param_2(from.effect_param_2());
    }
    if (from.has_is_sneak()) {
      set_is_sneak(from.is_sneak());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SkillConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SkillConfig::CopyFrom(const SkillConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SkillConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x2fff1fff) != 0x2fff1fff) return false;

  if (has_skill_tar_logic()) {
    if (!this->skill_tar_logic().IsInitialized()) return false;
  }
  if (has_tar_extra()) {
    if (!this->tar_extra().IsInitialized()) return false;
  }
  for (int i = 0; i < buff_tar_logics_size(); i++) {
    if (!this->buff_tar_logics(i).IsInitialized()) return false;
  }
  for (int i = 0; i < sub_skills_size(); i++) {
    if (!this->sub_skills(i).IsInitialized()) return false;
  }
  return true;
}

void SkillConfig::SetInitialized() {
  _has_bits_[0] |= 0x2fff1fff;

  if (has_skill_tar_logic()) {
    this->mutable_skill_tar_logic()->SetInitialized();
  }
  if (has_tar_extra()) {
    this->mutable_tar_extra()->SetInitialized();
  }
  for (int i = 0; i < buff_tar_logics_size(); i++) {
    this->mutable_buff_tar_logics(i)->SetInitialized();
  }
  for (int i = 0; i < sub_skills_size(); i++) {
    this->mutable_sub_skills(i)->SetInitialized();
  }
  return;
}

void SkillConfig::Swap(SkillConfig* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(prefix_time_, other->prefix_time_);
    std::swap(bullet_speed_, other->bullet_speed_);
    std::swap(surffix_time_, other->surffix_time_);
    std::swap(cd_time_, other->cd_time_);
    std::swap(skill_tar_logic_, other->skill_tar_logic_);
    std::swap(tar_extra_, other->tar_extra_);
    std::swap(skill_type_, other->skill_type_);
    std::swap(self_property_, other->self_property_);
    std::swap(target_property_, other->target_property_);
    std::swap(skill_effect_, other->skill_effect_);
    std::swap(self_buff_, other->self_buff_);
    buffs_.Swap(&other->buffs_);
    buff_tar_logics_.Swap(&other->buff_tar_logics_);
    sub_skills_.Swap(&other->sub_skills_);
    std::swap(parent_skill_, other->parent_skill_);
    std::swap(acce_factor_, other->acce_factor_);
    std::swap(self_property_revise_0_, other->self_property_revise_0_);
    std::swap(self_property_revise_value_0_, other->self_property_revise_value_0_);
    std::swap(self_property_revise_value_type_0_, other->self_property_revise_value_type_0_);
    std::swap(buff_property_revise_0_, other->buff_property_revise_0_);
    std::swap(buff_property_revise_value_0_, other->buff_property_revise_value_0_);
    std::swap(buff_property_revise_value_type_0_, other->buff_property_revise_value_type_0_);
    std::swap(position_effect_, other->position_effect_);
    std::swap(effect_param_0_, other->effect_param_0_);
    std::swap(effect_param_1_, other->effect_param_1_);
    std::swap(effect_param_2_, other->effect_param_2_);
    effect_param_str_.Swap(&other->effect_param_str_);
    std::swap(is_sneak_, other->is_sneak_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SkillConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillConfig_descriptor_;
  metadata.reflection = SkillConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImpactConfig::kIdFieldNumber;
const int ImpactConfig::kImpactLogicFieldNumber;
const int ImpactConfig::kEffectTypeFieldNumber;
const int ImpactConfig::kMaxLayerFieldNumber;
const int ImpactConfig::kMutexIdFieldNumber;
const int ImpactConfig::kPriorityFieldNumber;
const int ImpactConfig::kLastTimeFieldNumber;
const int ImpactConfig::kTriggerFreqFieldNumber;
const int ImpactConfig::kEffectTimesFieldNumber;
const int ImpactConfig::kParamTypesFieldNumber;
const int ImpactConfig::kParamValuesFieldNumber;
const int ImpactConfig::kBuffTarLogicFieldNumber;
#endif  // !_MSC_VER

ImpactConfig::ImpactConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ImpactConfig::InitAsDefaultInstance() {
  buff_tar_logic_ = const_cast< ::Config::TargetSelectLogic*>(&::Config::TargetSelectLogic::default_instance());
}

ImpactConfig::ImpactConfig(const ImpactConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ImpactConfig::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  impact_logic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  effect_type_ = -1;
  max_layer_ = 0;
  mutex_id_ = 0;
  priority_ = 0;
  last_time_ = 0;
  trigger_freq_ = 0;
  effect_times_ = 0;
  buff_tar_logic_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImpactConfig::~ImpactConfig() {
  SharedDtor();
}

void ImpactConfig::SharedDtor() {
  if (impact_logic_ != &::google::protobuf::internal::kEmptyString) {
    delete impact_logic_;
  }
  if (this != default_instance_) {
    delete buff_tar_logic_;
  }
}

void ImpactConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImpactConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImpactConfig_descriptor_;
}

const ImpactConfig& ImpactConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillConfig_2eproto();
  return *default_instance_;
}

ImpactConfig* ImpactConfig::default_instance_ = NULL;

ImpactConfig* ImpactConfig::New() const {
  return new ImpactConfig;
}

void ImpactConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_impact_logic()) {
      if (impact_logic_ != &::google::protobuf::internal::kEmptyString) {
        impact_logic_->clear();
      }
    }
    effect_type_ = -1;
    max_layer_ = 0;
    mutex_id_ = 0;
    priority_ = 0;
    last_time_ = 0;
    trigger_freq_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    effect_times_ = 0;
    if (has_buff_tar_logic()) {
      if (buff_tar_logic_ != NULL) buff_tar_logic_->::Config::TargetSelectLogic::Clear();
    }
  }
  param_types_.Clear();
  param_values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ImpactConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_impact_logic;
        break;
      }

      // required string impact_logic = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_impact_logic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_impact_logic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->impact_logic().data(), this->impact_logic().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_effect_type;
        break;
      }

      // required .Config.ImpactEffectType effect_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Config::ImpactEffectType_IsValid(value)) {
            set_effect_type(static_cast< ::Config::ImpactEffectType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_layer;
        break;
      }

      // required int32 max_layer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_layer_)));
          set_has_max_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mutex_id;
        break;
      }

      // required int32 mutex_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mutex_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mutex_id_)));
          set_has_mutex_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_priority;
        break;
      }

      // required int32 priority = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_last_time;
        break;
      }

      // required int32 last_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_trigger_freq;
        break;
      }

      // required int32 trigger_freq = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trigger_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trigger_freq_)));
          set_has_trigger_freq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_effect_times;
        break;
      }

      // required int32 effect_times = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effect_times_)));
          set_has_effect_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_param_types;
        break;
      }

      // repeated int32 param_types = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param_types:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_param_types())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_param_types())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_param_types;
        if (input->ExpectTag(93)) goto parse_param_values;
        break;
      }

      // repeated float param_values = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_param_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 93, input, this->mutable_param_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_param_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_param_values;
        if (input->ExpectTag(98)) goto parse_buff_tar_logic;
        break;
      }

      // required .Config.TargetSelectLogic buff_tar_logic = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buff_tar_logic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buff_tar_logic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ImpactConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string impact_logic = 2;
  if (has_impact_logic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->impact_logic().data(), this->impact_logic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->impact_logic(), output);
  }

  // required .Config.ImpactEffectType effect_type = 3;
  if (has_effect_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->effect_type(), output);
  }

  // required int32 max_layer = 4;
  if (has_max_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_layer(), output);
  }

  // required int32 mutex_id = 5;
  if (has_mutex_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mutex_id(), output);
  }

  // required int32 priority = 6;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->priority(), output);
  }

  // required int32 last_time = 7;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->last_time(), output);
  }

  // required int32 trigger_freq = 8;
  if (has_trigger_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->trigger_freq(), output);
  }

  // required int32 effect_times = 9;
  if (has_effect_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->effect_times(), output);
  }

  // repeated int32 param_types = 10;
  for (int i = 0; i < this->param_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->param_types(i), output);
  }

  // repeated float param_values = 11;
  for (int i = 0; i < this->param_values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      11, this->param_values(i), output);
  }

  // required .Config.TargetSelectLogic buff_tar_logic = 12;
  if (has_buff_tar_logic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->buff_tar_logic(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ImpactConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string impact_logic = 2;
  if (has_impact_logic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->impact_logic().data(), this->impact_logic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->impact_logic(), target);
  }

  // required .Config.ImpactEffectType effect_type = 3;
  if (has_effect_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->effect_type(), target);
  }

  // required int32 max_layer = 4;
  if (has_max_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_layer(), target);
  }

  // required int32 mutex_id = 5;
  if (has_mutex_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mutex_id(), target);
  }

  // required int32 priority = 6;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->priority(), target);
  }

  // required int32 last_time = 7;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->last_time(), target);
  }

  // required int32 trigger_freq = 8;
  if (has_trigger_freq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->trigger_freq(), target);
  }

  // required int32 effect_times = 9;
  if (has_effect_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->effect_times(), target);
  }

  // repeated int32 param_types = 10;
  for (int i = 0; i < this->param_types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->param_types(i), target);
  }

  // repeated float param_values = 11;
  for (int i = 0; i < this->param_values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(11, this->param_values(i), target);
  }

  // required .Config.TargetSelectLogic buff_tar_logic = 12;
  if (has_buff_tar_logic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->buff_tar_logic(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ImpactConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string impact_logic = 2;
    if (has_impact_logic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->impact_logic());
    }

    // required .Config.ImpactEffectType effect_type = 3;
    if (has_effect_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->effect_type());
    }

    // required int32 max_layer = 4;
    if (has_max_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_layer());
    }

    // required int32 mutex_id = 5;
    if (has_mutex_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mutex_id());
    }

    // required int32 priority = 6;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }

    // required int32 last_time = 7;
    if (has_last_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_time());
    }

    // required int32 trigger_freq = 8;
    if (has_trigger_freq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trigger_freq());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 effect_times = 9;
    if (has_effect_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effect_times());
    }

    // required .Config.TargetSelectLogic buff_tar_logic = 12;
    if (has_buff_tar_logic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buff_tar_logic());
    }

  }
  // repeated int32 param_types = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->param_types_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->param_types(i));
    }
    total_size += 1 * this->param_types_size() + data_size;
  }

  // repeated float param_values = 11;
  {
    int data_size = 0;
    data_size = 4 * this->param_values_size();
    total_size += 1 * this->param_values_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImpactConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImpactConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImpactConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ImpactConfig::MergeFrom(const ImpactConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  param_types_.MergeFrom(from.param_types_);
  param_values_.MergeFrom(from.param_values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_impact_logic()) {
      set_impact_logic(from.impact_logic());
    }
    if (from.has_effect_type()) {
      set_effect_type(from.effect_type());
    }
    if (from.has_max_layer()) {
      set_max_layer(from.max_layer());
    }
    if (from.has_mutex_id()) {
      set_mutex_id(from.mutex_id());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
    if (from.has_trigger_freq()) {
      set_trigger_freq(from.trigger_freq());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_effect_times()) {
      set_effect_times(from.effect_times());
    }
    if (from.has_buff_tar_logic()) {
      mutable_buff_tar_logic()->::Config::TargetSelectLogic::MergeFrom(from.buff_tar_logic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ImpactConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ImpactConfig::CopyFrom(const ImpactConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ImpactConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x000009ff) != 0x000009ff) return false;

  if (has_buff_tar_logic()) {
    if (!this->buff_tar_logic().IsInitialized()) return false;
  }
  return true;
}

void ImpactConfig::SetInitialized() {
  _has_bits_[0] |= 0x000009ff;

  if (has_buff_tar_logic()) {
    this->mutable_buff_tar_logic()->SetInitialized();
  }
  return;
}

void ImpactConfig::Swap(ImpactConfig* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(impact_logic_, other->impact_logic_);
    std::swap(effect_type_, other->effect_type_);
    std::swap(max_layer_, other->max_layer_);
    std::swap(mutex_id_, other->mutex_id_);
    std::swap(priority_, other->priority_);
    std::swap(last_time_, other->last_time_);
    std::swap(trigger_freq_, other->trigger_freq_);
    std::swap(effect_times_, other->effect_times_);
    param_types_.Swap(&other->param_types_);
    param_values_.Swap(&other->param_values_);
    std::swap(buff_tar_logic_, other->buff_tar_logic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ImpactConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImpactConfig_descriptor_;
  metadata.reflection = ImpactConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillBuildConfig::kActorIdFieldNumber;
const int SkillBuildConfig::kColorFieldNumber;
const int SkillBuildConfig::kSkillIdsFieldNumber;
#endif  // !_MSC_VER

SkillBuildConfig::SkillBuildConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillBuildConfig::InitAsDefaultInstance() {
}

SkillBuildConfig::SkillBuildConfig(const SkillBuildConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillBuildConfig::SharedCtor() {
  _cached_size_ = 0;
  actor_id_ = 0;
  color_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillBuildConfig::~SkillBuildConfig() {
  SharedDtor();
}

void SkillBuildConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillBuildConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillBuildConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillBuildConfig_descriptor_;
}

const SkillBuildConfig& SkillBuildConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillConfig_2eproto();
  return *default_instance_;
}

SkillBuildConfig* SkillBuildConfig::default_instance_ = NULL;

SkillBuildConfig* SkillBuildConfig::New() const {
  return new SkillBuildConfig;
}

void SkillBuildConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    actor_id_ = 0;
    color_ = 1;
  }
  skill_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SkillBuildConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 actor_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actor_id_)));
          set_has_actor_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_color;
        break;
      }

      // required .Packet.ActorColor color = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::ActorColor_IsValid(value)) {
            set_color(static_cast< ::Packet::ActorColor >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skill_ids;
        break;
      }

      // repeated int32 skill_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_skill_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_skill_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skill_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SkillBuildConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 actor_id = 1;
  if (has_actor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->actor_id(), output);
  }

  // required .Packet.ActorColor color = 2;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->color(), output);
  }

  // repeated int32 skill_ids = 3;
  for (int i = 0; i < this->skill_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->skill_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillBuildConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 actor_id = 1;
  if (has_actor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->actor_id(), target);
  }

  // required .Packet.ActorColor color = 2;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->color(), target);
  }

  // repeated int32 skill_ids = 3;
  for (int i = 0; i < this->skill_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->skill_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillBuildConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 actor_id = 1;
    if (has_actor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actor_id());
    }

    // required .Packet.ActorColor color = 2;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
    }

  }
  // repeated int32 skill_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->skill_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->skill_ids(i));
    }
    total_size += 1 * this->skill_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillBuildConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillBuildConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillBuildConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SkillBuildConfig::MergeFrom(const SkillBuildConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_ids_.MergeFrom(from.skill_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actor_id()) {
      set_actor_id(from.actor_id());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SkillBuildConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SkillBuildConfig::CopyFrom(const SkillBuildConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SkillBuildConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SkillBuildConfig::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void SkillBuildConfig::Swap(SkillBuildConfig* other) {
  if (other != this) {
    std::swap(actor_id_, other->actor_id_);
    std::swap(color_, other->color_);
    skill_ids_.Swap(&other->skill_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SkillBuildConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillBuildConfig_descriptor_;
  metadata.reflection = SkillBuildConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffDefine::kTypeFieldNumber;
const int BuffDefine::kIsDebuffFieldNumber;
const int BuffDefine::kCanDespellFieldNumber;
#endif  // !_MSC_VER

BuffDefine::BuffDefine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuffDefine::InitAsDefaultInstance() {
}

BuffDefine::BuffDefine(const BuffDefine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuffDefine::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  is_debuff_ = false;
  can_despell_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffDefine::~BuffDefine() {
  SharedDtor();
}

void BuffDefine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffDefine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffDefine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffDefine_descriptor_;
}

const BuffDefine& BuffDefine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillConfig_2eproto();
  return *default_instance_;
}

BuffDefine* BuffDefine::default_instance_ = NULL;

BuffDefine* BuffDefine::New() const {
  return new BuffDefine;
}

void BuffDefine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    is_debuff_ = false;
    can_despell_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool BuffDefine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Config.BuffType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Config::BuffType_IsValid(value)) {
            set_type(static_cast< ::Config::BuffType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_debuff;
        break;
      }

      // required bool is_debuff = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_debuff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_debuff_)));
          set_has_is_debuff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_can_despell;
        break;
      }

      // required bool can_despell = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_despell:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_despell_)));
          set_has_can_despell();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void BuffDefine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Config.BuffType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required bool is_debuff = 2;
  if (has_is_debuff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_debuff(), output);
  }

  // required bool can_despell = 3;
  if (has_can_despell()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->can_despell(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuffDefine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Config.BuffType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required bool is_debuff = 2;
  if (has_is_debuff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_debuff(), target);
  }

  // required bool can_despell = 3;
  if (has_can_despell()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->can_despell(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuffDefine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Config.BuffType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required bool is_debuff = 2;
    if (has_is_debuff()) {
      total_size += 1 + 1;
    }

    // required bool can_despell = 3;
    if (has_can_despell()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffDefine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffDefine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffDefine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void BuffDefine::MergeFrom(const BuffDefine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_is_debuff()) {
      set_is_debuff(from.is_debuff());
    }
    if (from.has_can_despell()) {
      set_can_despell(from.can_despell());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void BuffDefine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void BuffDefine::CopyFrom(const BuffDefine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool BuffDefine::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void BuffDefine::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  return;
}

void BuffDefine::Swap(BuffDefine* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(is_debuff_, other->is_debuff_);
    std::swap(can_despell_, other->can_despell_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata BuffDefine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffDefine_descriptor_;
  metadata.reflection = BuffDefine_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config

// @@protoc_insertion_point(global_scope)
