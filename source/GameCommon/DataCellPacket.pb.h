// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataCellPacket.proto

#ifndef PROTOBUF_DataCellPacket_2eproto__INCLUDED
#define PROTOBUF_DataCellPacket_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "AllPacketEnum.pb.h"
#include "PlayerBasicInfo.pb.h"
#include "ItemAndEquip.pb.h"
#include "ProtoBufOption.pb.h"
// @@protoc_insertion_point(includes)

namespace Packet {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DataCellPacket_2eproto();
void protobuf_AssignDesc_DataCellPacket_2eproto();
void protobuf_ShutdownFile_DataCellPacket_2eproto();

class DataCell;
class Data64Cell;
class DataCell32ValueUpdateReply;
class DataCell64ValueUpdateReply;
class DataCellUpdateReply;
class DataCell32ListReply;
class DataCell64ListReply;
class SingleDataCell32ListReply;
class SingleDataCell64ListReply;

// ===================================================================

class DataCell : public ::google::protobuf::Message {
 public:
  DataCell();
  virtual ~DataCell();

  DataCell(const DataCell& from);

  inline DataCell& operator=(const DataCell& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataCell& default_instance();

  void Swap(DataCell* other);

  // implements Message ----------------------------------------------

  DataCell* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataCell& from);
  void MergeFrom(const DataCell& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // required fixed64 player_guid = 2;
  inline bool has_player_guid() const;
  inline void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 2;
  inline ::google::protobuf::uint64 player_guid() const;
  inline void set_player_guid(::google::protobuf::uint64 value);

  // required .Packet.CellLogicType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Packet::CellLogicType type() const;
  inline void set_type(::Packet::CellLogicType value);

  // repeated int32 data = 4;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline ::google::protobuf::int32 data(int index) const;
  inline void set_data(int index, ::google::protobuf::int32 value);
  inline void add_data(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      data() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:Packet.DataCell)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_player_guid();
  inline void clear_has_player_guid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::google::protobuf::uint64 player_guid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > data_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_DataCellPacket_2eproto();
  friend void protobuf_AssignDesc_DataCellPacket_2eproto();
  friend void protobuf_ShutdownFile_DataCellPacket_2eproto();

  void InitAsDefaultInstance();
  static DataCell* default_instance_;
};
// -------------------------------------------------------------------

class Data64Cell : public ::google::protobuf::Message {
 public:
  Data64Cell();
  virtual ~Data64Cell();

  Data64Cell(const Data64Cell& from);

  inline Data64Cell& operator=(const Data64Cell& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Data64Cell& default_instance();

  void Swap(Data64Cell* other);

  // implements Message ----------------------------------------------

  Data64Cell* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Data64Cell& from);
  void MergeFrom(const Data64Cell& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // required fixed64 player_guid = 2;
  inline bool has_player_guid() const;
  inline void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 2;
  inline ::google::protobuf::uint64 player_guid() const;
  inline void set_player_guid(::google::protobuf::uint64 value);

  // required .Packet.Cell64LogicType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Packet::Cell64LogicType type() const;
  inline void set_type(::Packet::Cell64LogicType value);

  // repeated fixed64 data = 4;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline ::google::protobuf::uint64 data(int index) const;
  inline void set_data(int index, ::google::protobuf::uint64 value);
  inline void add_data(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      data() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:Packet.Data64Cell)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_player_guid();
  inline void clear_has_player_guid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::google::protobuf::uint64 player_guid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > data_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_DataCellPacket_2eproto();
  friend void protobuf_AssignDesc_DataCellPacket_2eproto();
  friend void protobuf_ShutdownFile_DataCellPacket_2eproto();

  void InitAsDefaultInstance();
  static Data64Cell* default_instance_;
};
// -------------------------------------------------------------------

class DataCell32ValueUpdateReply : public ::google::protobuf::Message {
 public:
  DataCell32ValueUpdateReply();
  virtual ~DataCell32ValueUpdateReply();

  DataCell32ValueUpdateReply(const DataCell32ValueUpdateReply& from);

  inline DataCell32ValueUpdateReply& operator=(const DataCell32ValueUpdateReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataCell32ValueUpdateReply& default_instance();

  void Swap(DataCell32ValueUpdateReply* other);

  // implements Message ----------------------------------------------

  DataCell32ValueUpdateReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataCell32ValueUpdateReply& from);
  void MergeFrom(const DataCell32ValueUpdateReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Packet.CellLogicType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Packet::CellLogicType type() const;
  inline void set_type(::Packet::CellLogicType value);

  // required int32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required int32 data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline ::google::protobuf::int32 data() const;
  inline void set_data(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.DataCell32ValueUpdateReply)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DataCellPacket_2eproto();
  friend void protobuf_AssignDesc_DataCellPacket_2eproto();
  friend void protobuf_ShutdownFile_DataCellPacket_2eproto();

  void InitAsDefaultInstance();
  static DataCell32ValueUpdateReply* default_instance_;
};
// -------------------------------------------------------------------

class DataCell64ValueUpdateReply : public ::google::protobuf::Message {
 public:
  DataCell64ValueUpdateReply();
  virtual ~DataCell64ValueUpdateReply();

  DataCell64ValueUpdateReply(const DataCell64ValueUpdateReply& from);

  inline DataCell64ValueUpdateReply& operator=(const DataCell64ValueUpdateReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataCell64ValueUpdateReply& default_instance();

  void Swap(DataCell64ValueUpdateReply* other);

  // implements Message ----------------------------------------------

  DataCell64ValueUpdateReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataCell64ValueUpdateReply& from);
  void MergeFrom(const DataCell64ValueUpdateReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Packet.Cell64LogicType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Packet::Cell64LogicType type() const;
  inline void set_type(::Packet::Cell64LogicType value);

  // required int32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required fixed64 data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline ::google::protobuf::uint64 data() const;
  inline void set_data(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Packet.DataCell64ValueUpdateReply)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::uint64 data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DataCellPacket_2eproto();
  friend void protobuf_AssignDesc_DataCellPacket_2eproto();
  friend void protobuf_ShutdownFile_DataCellPacket_2eproto();

  void InitAsDefaultInstance();
  static DataCell64ValueUpdateReply* default_instance_;
};
// -------------------------------------------------------------------

class DataCellUpdateReply : public ::google::protobuf::Message {
 public:
  DataCellUpdateReply();
  virtual ~DataCellUpdateReply();

  DataCellUpdateReply(const DataCellUpdateReply& from);

  inline DataCellUpdateReply& operator=(const DataCellUpdateReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataCellUpdateReply& default_instance();

  void Swap(DataCellUpdateReply* other);

  // implements Message ----------------------------------------------

  DataCellUpdateReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataCellUpdateReply& from);
  void MergeFrom(const DataCellUpdateReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Packet.DataCell cell32 = 1;
  inline bool has_cell32() const;
  inline void clear_cell32();
  static const int kCell32FieldNumber = 1;
  inline const ::Packet::DataCell& cell32() const;
  inline ::Packet::DataCell* mutable_cell32();
  inline ::Packet::DataCell* release_cell32();
  inline void set_allocated_cell32(::Packet::DataCell* cell32);

  // optional .Packet.Data64Cell cell64 = 2;
  inline bool has_cell64() const;
  inline void clear_cell64();
  static const int kCell64FieldNumber = 2;
  inline const ::Packet::Data64Cell& cell64() const;
  inline ::Packet::Data64Cell* mutable_cell64();
  inline ::Packet::Data64Cell* release_cell64();
  inline void set_allocated_cell64(::Packet::Data64Cell* cell64);

  // @@protoc_insertion_point(class_scope:Packet.DataCellUpdateReply)
 private:
  inline void set_has_cell32();
  inline void clear_has_cell32();
  inline void set_has_cell64();
  inline void clear_has_cell64();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Packet::DataCell* cell32_;
  ::Packet::Data64Cell* cell64_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DataCellPacket_2eproto();
  friend void protobuf_AssignDesc_DataCellPacket_2eproto();
  friend void protobuf_ShutdownFile_DataCellPacket_2eproto();

  void InitAsDefaultInstance();
  static DataCellUpdateReply* default_instance_;
};
// -------------------------------------------------------------------

class DataCell32ListReply : public ::google::protobuf::Message {
 public:
  DataCell32ListReply();
  virtual ~DataCell32ListReply();

  DataCell32ListReply(const DataCell32ListReply& from);

  inline DataCell32ListReply& operator=(const DataCell32ListReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataCell32ListReply& default_instance();

  void Swap(DataCell32ListReply* other);

  // implements Message ----------------------------------------------

  DataCell32ListReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataCell32ListReply& from);
  void MergeFrom(const DataCell32ListReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Packet.DataCell cell_list = 1;
  inline int cell_list_size() const;
  inline void clear_cell_list();
  static const int kCellListFieldNumber = 1;
  inline const ::Packet::DataCell& cell_list(int index) const;
  inline ::Packet::DataCell* mutable_cell_list(int index);
  inline ::Packet::DataCell* add_cell_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::DataCell >&
      cell_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::DataCell >*
      mutable_cell_list();

  // @@protoc_insertion_point(class_scope:Packet.DataCell32ListReply)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::DataCell > cell_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DataCellPacket_2eproto();
  friend void protobuf_AssignDesc_DataCellPacket_2eproto();
  friend void protobuf_ShutdownFile_DataCellPacket_2eproto();

  void InitAsDefaultInstance();
  static DataCell32ListReply* default_instance_;
};
// -------------------------------------------------------------------

class DataCell64ListReply : public ::google::protobuf::Message {
 public:
  DataCell64ListReply();
  virtual ~DataCell64ListReply();

  DataCell64ListReply(const DataCell64ListReply& from);

  inline DataCell64ListReply& operator=(const DataCell64ListReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataCell64ListReply& default_instance();

  void Swap(DataCell64ListReply* other);

  // implements Message ----------------------------------------------

  DataCell64ListReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataCell64ListReply& from);
  void MergeFrom(const DataCell64ListReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Packet.Data64Cell cell_list = 1;
  inline int cell_list_size() const;
  inline void clear_cell_list();
  static const int kCellListFieldNumber = 1;
  inline const ::Packet::Data64Cell& cell_list(int index) const;
  inline ::Packet::Data64Cell* mutable_cell_list(int index);
  inline ::Packet::Data64Cell* add_cell_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::Data64Cell >&
      cell_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::Data64Cell >*
      mutable_cell_list();

  // @@protoc_insertion_point(class_scope:Packet.DataCell64ListReply)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::Data64Cell > cell_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DataCellPacket_2eproto();
  friend void protobuf_AssignDesc_DataCellPacket_2eproto();
  friend void protobuf_ShutdownFile_DataCellPacket_2eproto();

  void InitAsDefaultInstance();
  static DataCell64ListReply* default_instance_;
};
// -------------------------------------------------------------------

class SingleDataCell32ListReply : public ::google::protobuf::Message {
 public:
  SingleDataCell32ListReply();
  virtual ~SingleDataCell32ListReply();

  SingleDataCell32ListReply(const SingleDataCell32ListReply& from);

  inline SingleDataCell32ListReply& operator=(const SingleDataCell32ListReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleDataCell32ListReply& default_instance();

  void Swap(SingleDataCell32ListReply* other);

  // implements Message ----------------------------------------------

  SingleDataCell32ListReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SingleDataCell32ListReply& from);
  void MergeFrom(const SingleDataCell32ListReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Packet.CellLogicType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Packet::CellLogicType type() const;
  inline void set_type(::Packet::CellLogicType value);

  // repeated .Packet.DataCell cell_list = 2;
  inline int cell_list_size() const;
  inline void clear_cell_list();
  static const int kCellListFieldNumber = 2;
  inline const ::Packet::DataCell& cell_list(int index) const;
  inline ::Packet::DataCell* mutable_cell_list(int index);
  inline ::Packet::DataCell* add_cell_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::DataCell >&
      cell_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::DataCell >*
      mutable_cell_list();

  // @@protoc_insertion_point(class_scope:Packet.SingleDataCell32ListReply)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::DataCell > cell_list_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DataCellPacket_2eproto();
  friend void protobuf_AssignDesc_DataCellPacket_2eproto();
  friend void protobuf_ShutdownFile_DataCellPacket_2eproto();

  void InitAsDefaultInstance();
  static SingleDataCell32ListReply* default_instance_;
};
// -------------------------------------------------------------------

class SingleDataCell64ListReply : public ::google::protobuf::Message {
 public:
  SingleDataCell64ListReply();
  virtual ~SingleDataCell64ListReply();

  SingleDataCell64ListReply(const SingleDataCell64ListReply& from);

  inline SingleDataCell64ListReply& operator=(const SingleDataCell64ListReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleDataCell64ListReply& default_instance();

  void Swap(SingleDataCell64ListReply* other);

  // implements Message ----------------------------------------------

  SingleDataCell64ListReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SingleDataCell64ListReply& from);
  void MergeFrom(const SingleDataCell64ListReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Packet.Cell64LogicType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Packet::Cell64LogicType type() const;
  inline void set_type(::Packet::Cell64LogicType value);

  // repeated .Packet.Data64Cell cell_list = 2;
  inline int cell_list_size() const;
  inline void clear_cell_list();
  static const int kCellListFieldNumber = 2;
  inline const ::Packet::Data64Cell& cell_list(int index) const;
  inline ::Packet::Data64Cell* mutable_cell_list(int index);
  inline ::Packet::Data64Cell* add_cell_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::Data64Cell >&
      cell_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::Data64Cell >*
      mutable_cell_list();

  // @@protoc_insertion_point(class_scope:Packet.SingleDataCell64ListReply)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::Data64Cell > cell_list_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_DataCellPacket_2eproto();
  friend void protobuf_AssignDesc_DataCellPacket_2eproto();
  friend void protobuf_ShutdownFile_DataCellPacket_2eproto();

  void InitAsDefaultInstance();
  static SingleDataCell64ListReply* default_instance_;
};
// ===================================================================


// ===================================================================

// DataCell

// required fixed64 guid = 1;
inline bool DataCell::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataCell::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataCell::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataCell::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 DataCell::guid() const {
  return guid_;
}
inline void DataCell::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// required fixed64 player_guid = 2;
inline bool DataCell::has_player_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataCell::set_has_player_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataCell::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataCell::clear_player_guid() {
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 DataCell::player_guid() const {
  return player_guid_;
}
inline void DataCell::set_player_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_player_guid();
  player_guid_ = value;
}

// required .Packet.CellLogicType type = 3;
inline bool DataCell::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataCell::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataCell::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataCell::clear_type() {
  type_ = -1;
  clear_has_type();
  SetDirty();
}
inline ::Packet::CellLogicType DataCell::type() const {
  return static_cast< ::Packet::CellLogicType >(type_);
}
inline void DataCell::set_type(::Packet::CellLogicType value) {
  assert(::Packet::CellLogicType_IsValid(value));
  SetDirty();
  set_has_type();
  type_ = value;
}

// repeated int32 data = 4;
inline int DataCell::data_size() const {
  return data_.size();
}
inline void DataCell::clear_data() {
  data_.Clear();
  SetDirty();
}
inline ::google::protobuf::int32 DataCell::data(int index) const {
  return data_.Get(index);
}
inline void DataCell::set_data(int index, ::google::protobuf::int32 value) {
  SetDirty();
  data_.Set(index, value);
}
inline void DataCell::add_data(::google::protobuf::int32 value) {
  SetDirty();
  data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DataCell::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DataCell::mutable_data() {
  SetDirty();
  return &data_;
}

// -------------------------------------------------------------------

// Data64Cell

// required fixed64 guid = 1;
inline bool Data64Cell::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Data64Cell::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Data64Cell::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Data64Cell::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 Data64Cell::guid() const {
  return guid_;
}
inline void Data64Cell::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// required fixed64 player_guid = 2;
inline bool Data64Cell::has_player_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Data64Cell::set_has_player_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Data64Cell::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Data64Cell::clear_player_guid() {
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 Data64Cell::player_guid() const {
  return player_guid_;
}
inline void Data64Cell::set_player_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_player_guid();
  player_guid_ = value;
}

// required .Packet.Cell64LogicType type = 3;
inline bool Data64Cell::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Data64Cell::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Data64Cell::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Data64Cell::clear_type() {
  type_ = -1;
  clear_has_type();
  SetDirty();
}
inline ::Packet::Cell64LogicType Data64Cell::type() const {
  return static_cast< ::Packet::Cell64LogicType >(type_);
}
inline void Data64Cell::set_type(::Packet::Cell64LogicType value) {
  assert(::Packet::Cell64LogicType_IsValid(value));
  SetDirty();
  set_has_type();
  type_ = value;
}

// repeated fixed64 data = 4;
inline int Data64Cell::data_size() const {
  return data_.size();
}
inline void Data64Cell::clear_data() {
  data_.Clear();
  SetDirty();
}
inline ::google::protobuf::uint64 Data64Cell::data(int index) const {
  return data_.Get(index);
}
inline void Data64Cell::set_data(int index, ::google::protobuf::uint64 value) {
  SetDirty();
  data_.Set(index, value);
}
inline void Data64Cell::add_data(::google::protobuf::uint64 value) {
  SetDirty();
  data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Data64Cell::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Data64Cell::mutable_data() {
  SetDirty();
  return &data_;
}

// -------------------------------------------------------------------

// DataCell32ValueUpdateReply

// required .Packet.CellLogicType type = 1;
inline bool DataCell32ValueUpdateReply::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataCell32ValueUpdateReply::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataCell32ValueUpdateReply::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataCell32ValueUpdateReply::clear_type() {
  type_ = -1;
  clear_has_type();
  SetDirty();
}
inline ::Packet::CellLogicType DataCell32ValueUpdateReply::type() const {
  return static_cast< ::Packet::CellLogicType >(type_);
}
inline void DataCell32ValueUpdateReply::set_type(::Packet::CellLogicType value) {
  assert(::Packet::CellLogicType_IsValid(value));
  SetDirty();
  set_has_type();
  type_ = value;
}

// required int32 index = 2;
inline bool DataCell32ValueUpdateReply::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataCell32ValueUpdateReply::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataCell32ValueUpdateReply::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataCell32ValueUpdateReply::clear_index() {
  index_ = 0;
  clear_has_index();
  SetDirty();
}
inline ::google::protobuf::int32 DataCell32ValueUpdateReply::index() const {
  return index_;
}
inline void DataCell32ValueUpdateReply::set_index(::google::protobuf::int32 value) {
  SetDirty();
  set_has_index();
  index_ = value;
}

// required int32 data = 3;
inline bool DataCell32ValueUpdateReply::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataCell32ValueUpdateReply::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataCell32ValueUpdateReply::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataCell32ValueUpdateReply::clear_data() {
  data_ = 0;
  clear_has_data();
  SetDirty();
}
inline ::google::protobuf::int32 DataCell32ValueUpdateReply::data() const {
  return data_;
}
inline void DataCell32ValueUpdateReply::set_data(::google::protobuf::int32 value) {
  SetDirty();
  set_has_data();
  data_ = value;
}

// -------------------------------------------------------------------

// DataCell64ValueUpdateReply

// required .Packet.Cell64LogicType type = 1;
inline bool DataCell64ValueUpdateReply::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataCell64ValueUpdateReply::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataCell64ValueUpdateReply::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataCell64ValueUpdateReply::clear_type() {
  type_ = -1;
  clear_has_type();
  SetDirty();
}
inline ::Packet::Cell64LogicType DataCell64ValueUpdateReply::type() const {
  return static_cast< ::Packet::Cell64LogicType >(type_);
}
inline void DataCell64ValueUpdateReply::set_type(::Packet::Cell64LogicType value) {
  assert(::Packet::Cell64LogicType_IsValid(value));
  SetDirty();
  set_has_type();
  type_ = value;
}

// required int32 index = 2;
inline bool DataCell64ValueUpdateReply::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataCell64ValueUpdateReply::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataCell64ValueUpdateReply::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataCell64ValueUpdateReply::clear_index() {
  index_ = 0;
  clear_has_index();
  SetDirty();
}
inline ::google::protobuf::int32 DataCell64ValueUpdateReply::index() const {
  return index_;
}
inline void DataCell64ValueUpdateReply::set_index(::google::protobuf::int32 value) {
  SetDirty();
  set_has_index();
  index_ = value;
}

// required fixed64 data = 3;
inline bool DataCell64ValueUpdateReply::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataCell64ValueUpdateReply::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataCell64ValueUpdateReply::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataCell64ValueUpdateReply::clear_data() {
  data_ = GOOGLE_ULONGLONG(0);
  clear_has_data();
  SetDirty();
}
inline ::google::protobuf::uint64 DataCell64ValueUpdateReply::data() const {
  return data_;
}
inline void DataCell64ValueUpdateReply::set_data(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_data();
  data_ = value;
}

// -------------------------------------------------------------------

// DataCellUpdateReply

// optional .Packet.DataCell cell32 = 1;
inline bool DataCellUpdateReply::has_cell32() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataCellUpdateReply::set_has_cell32() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataCellUpdateReply::clear_has_cell32() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataCellUpdateReply::clear_cell32() {
  if (cell32_ != NULL) cell32_->::Packet::DataCell::Clear();
  clear_has_cell32();
  SetDirty();
}
inline const ::Packet::DataCell& DataCellUpdateReply::cell32() const {
  return cell32_ != NULL ? *cell32_ : *default_instance_->cell32_;
}
inline ::Packet::DataCell* DataCellUpdateReply::mutable_cell32() {
  SetDirty();
  set_has_cell32();
  if (cell32_ == NULL) cell32_ = new ::Packet::DataCell;
  return cell32_;
}
inline ::Packet::DataCell* DataCellUpdateReply::release_cell32() {
  SetDirty();
  clear_has_cell32();
  ::Packet::DataCell* temp = cell32_;
  cell32_ = NULL;
  return temp;
}
inline void DataCellUpdateReply::set_allocated_cell32(::Packet::DataCell* cell32) {
  SetDirty();
  delete cell32_;
  cell32_ = cell32;
  if (cell32) {
    set_has_cell32();
  } else {
    clear_has_cell32();
  }
}

// optional .Packet.Data64Cell cell64 = 2;
inline bool DataCellUpdateReply::has_cell64() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataCellUpdateReply::set_has_cell64() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataCellUpdateReply::clear_has_cell64() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataCellUpdateReply::clear_cell64() {
  if (cell64_ != NULL) cell64_->::Packet::Data64Cell::Clear();
  clear_has_cell64();
  SetDirty();
}
inline const ::Packet::Data64Cell& DataCellUpdateReply::cell64() const {
  return cell64_ != NULL ? *cell64_ : *default_instance_->cell64_;
}
inline ::Packet::Data64Cell* DataCellUpdateReply::mutable_cell64() {
  SetDirty();
  set_has_cell64();
  if (cell64_ == NULL) cell64_ = new ::Packet::Data64Cell;
  return cell64_;
}
inline ::Packet::Data64Cell* DataCellUpdateReply::release_cell64() {
  SetDirty();
  clear_has_cell64();
  ::Packet::Data64Cell* temp = cell64_;
  cell64_ = NULL;
  return temp;
}
inline void DataCellUpdateReply::set_allocated_cell64(::Packet::Data64Cell* cell64) {
  SetDirty();
  delete cell64_;
  cell64_ = cell64;
  if (cell64) {
    set_has_cell64();
  } else {
    clear_has_cell64();
  }
}

// -------------------------------------------------------------------

// DataCell32ListReply

// repeated .Packet.DataCell cell_list = 1;
inline int DataCell32ListReply::cell_list_size() const {
  return cell_list_.size();
}
inline void DataCell32ListReply::clear_cell_list() {
  cell_list_.Clear();
  SetDirty();
}
inline const ::Packet::DataCell& DataCell32ListReply::cell_list(int index) const {
  return cell_list_.Get(index);
}
inline ::Packet::DataCell* DataCell32ListReply::mutable_cell_list(int index) {
  SetDirty();
  return cell_list_.Mutable(index);
}
inline ::Packet::DataCell* DataCell32ListReply::add_cell_list() {
  SetDirty();
  return cell_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::DataCell >&
DataCell32ListReply::cell_list() const {
  return cell_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::DataCell >*
DataCell32ListReply::mutable_cell_list() {
  SetDirty();
  return &cell_list_;
}

// -------------------------------------------------------------------

// DataCell64ListReply

// repeated .Packet.Data64Cell cell_list = 1;
inline int DataCell64ListReply::cell_list_size() const {
  return cell_list_.size();
}
inline void DataCell64ListReply::clear_cell_list() {
  cell_list_.Clear();
  SetDirty();
}
inline const ::Packet::Data64Cell& DataCell64ListReply::cell_list(int index) const {
  return cell_list_.Get(index);
}
inline ::Packet::Data64Cell* DataCell64ListReply::mutable_cell_list(int index) {
  SetDirty();
  return cell_list_.Mutable(index);
}
inline ::Packet::Data64Cell* DataCell64ListReply::add_cell_list() {
  SetDirty();
  return cell_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::Data64Cell >&
DataCell64ListReply::cell_list() const {
  return cell_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::Data64Cell >*
DataCell64ListReply::mutable_cell_list() {
  SetDirty();
  return &cell_list_;
}

// -------------------------------------------------------------------

// SingleDataCell32ListReply

// required .Packet.CellLogicType type = 1;
inline bool SingleDataCell32ListReply::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SingleDataCell32ListReply::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SingleDataCell32ListReply::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SingleDataCell32ListReply::clear_type() {
  type_ = -1;
  clear_has_type();
  SetDirty();
}
inline ::Packet::CellLogicType SingleDataCell32ListReply::type() const {
  return static_cast< ::Packet::CellLogicType >(type_);
}
inline void SingleDataCell32ListReply::set_type(::Packet::CellLogicType value) {
  assert(::Packet::CellLogicType_IsValid(value));
  SetDirty();
  set_has_type();
  type_ = value;
}

// repeated .Packet.DataCell cell_list = 2;
inline int SingleDataCell32ListReply::cell_list_size() const {
  return cell_list_.size();
}
inline void SingleDataCell32ListReply::clear_cell_list() {
  cell_list_.Clear();
  SetDirty();
}
inline const ::Packet::DataCell& SingleDataCell32ListReply::cell_list(int index) const {
  return cell_list_.Get(index);
}
inline ::Packet::DataCell* SingleDataCell32ListReply::mutable_cell_list(int index) {
  SetDirty();
  return cell_list_.Mutable(index);
}
inline ::Packet::DataCell* SingleDataCell32ListReply::add_cell_list() {
  SetDirty();
  return cell_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::DataCell >&
SingleDataCell32ListReply::cell_list() const {
  return cell_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::DataCell >*
SingleDataCell32ListReply::mutable_cell_list() {
  SetDirty();
  return &cell_list_;
}

// -------------------------------------------------------------------

// SingleDataCell64ListReply

// required .Packet.Cell64LogicType type = 1;
inline bool SingleDataCell64ListReply::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SingleDataCell64ListReply::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SingleDataCell64ListReply::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SingleDataCell64ListReply::clear_type() {
  type_ = -1;
  clear_has_type();
  SetDirty();
}
inline ::Packet::Cell64LogicType SingleDataCell64ListReply::type() const {
  return static_cast< ::Packet::Cell64LogicType >(type_);
}
inline void SingleDataCell64ListReply::set_type(::Packet::Cell64LogicType value) {
  assert(::Packet::Cell64LogicType_IsValid(value));
  SetDirty();
  set_has_type();
  type_ = value;
}

// repeated .Packet.Data64Cell cell_list = 2;
inline int SingleDataCell64ListReply::cell_list_size() const {
  return cell_list_.size();
}
inline void SingleDataCell64ListReply::clear_cell_list() {
  cell_list_.Clear();
  SetDirty();
}
inline const ::Packet::Data64Cell& SingleDataCell64ListReply::cell_list(int index) const {
  return cell_list_.Get(index);
}
inline ::Packet::Data64Cell* SingleDataCell64ListReply::mutable_cell_list(int index) {
  SetDirty();
  return cell_list_.Mutable(index);
}
inline ::Packet::Data64Cell* SingleDataCell64ListReply::add_cell_list() {
  SetDirty();
  return cell_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::Data64Cell >&
SingleDataCell64ListReply::cell_list() const {
  return cell_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::Data64Cell >*
SingleDataCell64ListReply::mutable_cell_list() {
  SetDirty();
  return &cell_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DataCellPacket_2eproto__INCLUDED
