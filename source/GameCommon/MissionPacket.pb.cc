// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MissionPacket.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MissionPacket.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Packet {

namespace {

const ::google::protobuf::Descriptor* Mission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mission_reflection_ = NULL;
const ::google::protobuf::Descriptor* MissionUpdateReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MissionUpdateReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* MissionListReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MissionListReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncMission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncMission_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncMissionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncMissionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncMissionReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncMissionReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClickChatMissionReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClickChatMissionReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClickChatMissionReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClickChatMissionReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MissionPacket_2eproto() {
  protobuf_AddDesc_MissionPacket_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MissionPacket.proto");
  GOOGLE_CHECK(file != NULL);
  Mission_descriptor_ = file->message_type(0);
  static const int Mission_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, player_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, param_),
  };
  Mission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mission_descriptor_,
      Mission::default_instance_,
      Mission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mission));
  MissionUpdateReply_descriptor_ = file->message_type(1);
  static const int MissionUpdateReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionUpdateReply, mission_),
  };
  MissionUpdateReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MissionUpdateReply_descriptor_,
      MissionUpdateReply::default_instance_,
      MissionUpdateReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionUpdateReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionUpdateReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MissionUpdateReply));
  MissionListReply_descriptor_ = file->message_type(2);
  static const int MissionListReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionListReply, mission_list_),
  };
  MissionListReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MissionListReply_descriptor_,
      MissionListReply::default_instance_,
      MissionListReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionListReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionListReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MissionListReply));
  SyncMission_descriptor_ = file->message_type(3);
  static const int SyncMission_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMission, src_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMission, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMission, time_mark_),
  };
  SyncMission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncMission_descriptor_,
      SyncMission::default_instance_,
      SyncMission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncMission));
  SyncMissionRequest_descriptor_ = file->message_type(4);
  static const int SyncMissionRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMissionRequest, snc_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMissionRequest, agree_),
  };
  SyncMissionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncMissionRequest_descriptor_,
      SyncMissionRequest::default_instance_,
      SyncMissionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMissionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMissionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncMissionRequest));
  SyncMissionReply_descriptor_ = file->message_type(5);
  static const int SyncMissionReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMissionReply, snc_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMissionReply, agree_),
  };
  SyncMissionReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncMissionReply_descriptor_,
      SyncMissionReply::default_instance_,
      SyncMissionReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMissionReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMissionReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncMissionReply));
  ClickChatMissionReq_descriptor_ = file->message_type(6);
  static const int ClickChatMissionReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickChatMissionReq, srcplayer_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickChatMissionReq, missionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickChatMissionReq, t_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickChatMissionReq, s_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickChatMissionReq, d_desc_),
  };
  ClickChatMissionReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClickChatMissionReq_descriptor_,
      ClickChatMissionReq::default_instance_,
      ClickChatMissionReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickChatMissionReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickChatMissionReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClickChatMissionReq));
  ClickChatMissionReply_descriptor_ = file->message_type(7);
  static const int ClickChatMissionReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickChatMissionReply, missionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickChatMissionReply, t_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickChatMissionReply, s_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickChatMissionReply, d_desc_),
  };
  ClickChatMissionReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClickChatMissionReply_descriptor_,
      ClickChatMissionReply::default_instance_,
      ClickChatMissionReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickChatMissionReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickChatMissionReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClickChatMissionReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MissionPacket_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mission_descriptor_, &Mission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MissionUpdateReply_descriptor_, &MissionUpdateReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MissionListReply_descriptor_, &MissionListReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncMission_descriptor_, &SyncMission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncMissionRequest_descriptor_, &SyncMissionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncMissionReply_descriptor_, &SyncMissionReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClickChatMissionReq_descriptor_, &ClickChatMissionReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClickChatMissionReply_descriptor_, &ClickChatMissionReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MissionPacket_2eproto() {
  delete Mission::default_instance_;
  delete Mission_reflection_;
  delete MissionUpdateReply::default_instance_;
  delete MissionUpdateReply_reflection_;
  delete MissionListReply::default_instance_;
  delete MissionListReply_reflection_;
  delete SyncMission::default_instance_;
  delete SyncMission_reflection_;
  delete SyncMissionRequest::default_instance_;
  delete SyncMissionRequest_reflection_;
  delete SyncMissionReply::default_instance_;
  delete SyncMissionReply_reflection_;
  delete ClickChatMissionReq::default_instance_;
  delete ClickChatMissionReq_reflection_;
  delete ClickChatMissionReply::default_instance_;
  delete ClickChatMissionReply_reflection_;
}

void protobuf_AddDesc_MissionPacket_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Packet::protobuf_AddDesc_AllPacketEnum_2eproto();
  ::Config::protobuf_AddDesc_AllConfigEnum_2eproto();
  ::Packet::protobuf_AddDesc_ProtoBufOption_2eproto();
  ::Config::protobuf_AddDesc_MissionConfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023MissionPacket.proto\022\006Packet\032\023AllPacket"
    "Enum.proto\032\023AllConfigEnum.proto\032\024ProtoBu"
    "fOption.proto\032\023MissionConfig.proto\"r\n\007Mi"
    "ssion\022\022\n\004guid\030\001 \002(\006B\004\310\363\030\001\022\031\n\013player_guid"
    "\030\002 \002(\006B\004\310\363\030\001\022#\n\005state\030\003 \002(\0162\024.Packet.Mis"
    "sionState\022\023\n\005param\030\004 \003(\005B\004\300\363\030\013\"6\n\022Missio"
    "nUpdateReply\022 \n\007mission\030\001 \002(\0132\017.Packet.M"
    "ission\"9\n\020MissionListReply\022%\n\014mission_li"
    "st\030\001 \003(\0132\017.Packet.Mission\"U\n\013SyncMission"
    "\022\020\n\010src_guid\030\001 \002(\006\022!\n\004type\030\002 \002(\0162\023.Confi"
    "g.MissionType\022\021\n\ttime_mark\030\003 \002(\005\"I\n\022Sync"
    "MissionRequest\022$\n\007snc_msg\030\001 \002(\0132\023.Packet"
    ".SyncMission\022\r\n\005agree\030\002 \002(\010\"G\n\020SyncMissi"
    "onReply\022$\n\007snc_msg\030\001 \002(\0132\023.Packet.SyncMi"
    "ssion\022\r\n\005agree\030\002 \002(\010\"p\n\023ClickChatMission"
    "Req\022\026\n\016srcplayer_guid\030\001 \002(\006\022\021\n\tmissionid"
    "\030\002 \002(\005\022\016\n\006t_desc\030\003 \002(\t\022\016\n\006s_desc\030\004 \002(\t\022\016"
    "\n\006d_desc\030\005 \002(\t\"Z\n\025ClickChatMissionReply\022"
    "\021\n\tmissionid\030\001 \002(\005\022\016\n\006t_desc\030\003 \002(\t\022\016\n\006s_"
    "desc\030\004 \002(\t\022\016\n\006d_desc\030\005 \002(\t", 786);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MissionPacket.proto", &protobuf_RegisterTypes);
  Mission::default_instance_ = new Mission();
  MissionUpdateReply::default_instance_ = new MissionUpdateReply();
  MissionListReply::default_instance_ = new MissionListReply();
  SyncMission::default_instance_ = new SyncMission();
  SyncMissionRequest::default_instance_ = new SyncMissionRequest();
  SyncMissionReply::default_instance_ = new SyncMissionReply();
  ClickChatMissionReq::default_instance_ = new ClickChatMissionReq();
  ClickChatMissionReply::default_instance_ = new ClickChatMissionReply();
  Mission::default_instance_->InitAsDefaultInstance();
  MissionUpdateReply::default_instance_->InitAsDefaultInstance();
  MissionListReply::default_instance_->InitAsDefaultInstance();
  SyncMission::default_instance_->InitAsDefaultInstance();
  SyncMissionRequest::default_instance_->InitAsDefaultInstance();
  SyncMissionReply::default_instance_->InitAsDefaultInstance();
  ClickChatMissionReq::default_instance_->InitAsDefaultInstance();
  ClickChatMissionReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MissionPacket_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MissionPacket_2eproto {
  StaticDescriptorInitializer_MissionPacket_2eproto() {
    protobuf_AddDesc_MissionPacket_2eproto();
  }
} static_descriptor_initializer_MissionPacket_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Mission::kGuidFieldNumber;
const int Mission::kPlayerGuidFieldNumber;
const int Mission::kStateFieldNumber;
const int Mission::kParamFieldNumber;
#endif  // !_MSC_VER

Mission::Mission()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mission::InitAsDefaultInstance() {
}

Mission::Mission(const Mission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mission::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  player_guid_ = GOOGLE_ULONGLONG(0);
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mission::~Mission() {
  SharedDtor();
}

void Mission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mission_descriptor_;
}

const Mission& Mission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MissionPacket_2eproto();
  return *default_instance_;
}

Mission* Mission::default_instance_ = NULL;

Mission* Mission::New() const {
  return new Mission;
}

void Mission::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    player_guid_ = GOOGLE_ULONGLONG(0);
    state_ = 0;
  }
  param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool Mission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_player_guid;
        break;
      }

      // required fixed64 player_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_player_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &player_guid_)));
          set_has_player_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // required .Packet.MissionState state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::MissionState_IsValid(value)) {
            set_state(static_cast< ::Packet::MissionState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_param;
        break;
      }

      // repeated int32 param = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_param())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_param())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_param;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void Mission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required fixed64 player_guid = 2;
  if (has_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->player_guid(), output);
  }

  // required .Packet.MissionState state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // repeated int32 param = 4;
  for (int i = 0; i < this->param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->param(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required fixed64 player_guid = 2;
  if (has_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->player_guid(), target);
  }

  // required .Packet.MissionState state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  // repeated int32 param = 4;
  for (int i = 0; i < this->param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->param(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 player_guid = 2;
    if (has_player_guid()) {
      total_size += 1 + 8;
    }

    // required .Packet.MissionState state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  // repeated int32 param = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->param_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->param(i));
    }
    total_size += 1 * this->param_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void Mission::MergeFrom(const Mission& from) {
  GOOGLE_CHECK_NE(&from, this);
  param_.MergeFrom(from.param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_player_guid()) {
      set_player_guid(from.player_guid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void Mission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void Mission::CopyFrom(const Mission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool Mission::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Mission::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  return;
}

void Mission::Swap(Mission* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(player_guid_, other->player_guid_);
    std::swap(state_, other->state_);
    param_.Swap(&other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata Mission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mission_descriptor_;
  metadata.reflection = Mission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MissionUpdateReply::kMissionFieldNumber;
#endif  // !_MSC_VER

MissionUpdateReply::MissionUpdateReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MissionUpdateReply::InitAsDefaultInstance() {
  mission_ = const_cast< ::Packet::Mission*>(&::Packet::Mission::default_instance());
}

MissionUpdateReply::MissionUpdateReply(const MissionUpdateReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MissionUpdateReply::SharedCtor() {
  _cached_size_ = 0;
  mission_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MissionUpdateReply::~MissionUpdateReply() {
  SharedDtor();
}

void MissionUpdateReply::SharedDtor() {
  if (this != default_instance_) {
    delete mission_;
  }
}

void MissionUpdateReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissionUpdateReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionUpdateReply_descriptor_;
}

const MissionUpdateReply& MissionUpdateReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MissionPacket_2eproto();
  return *default_instance_;
}

MissionUpdateReply* MissionUpdateReply::default_instance_ = NULL;

MissionUpdateReply* MissionUpdateReply::New() const {
  return new MissionUpdateReply;
}

void MissionUpdateReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mission()) {
      if (mission_ != NULL) mission_->::Packet::Mission::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool MissionUpdateReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.Mission mission = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mission()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void MissionUpdateReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.Mission mission = 1;
  if (has_mission()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mission(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MissionUpdateReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.Mission mission = 1;
  if (has_mission()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mission(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MissionUpdateReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.Mission mission = 1;
    if (has_mission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mission());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionUpdateReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MissionUpdateReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MissionUpdateReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void MissionUpdateReply::MergeFrom(const MissionUpdateReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mission()) {
      mutable_mission()->::Packet::Mission::MergeFrom(from.mission());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void MissionUpdateReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void MissionUpdateReply::CopyFrom(const MissionUpdateReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool MissionUpdateReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_mission()) {
    if (!this->mission().IsInitialized()) return false;
  }
  return true;
}

void MissionUpdateReply::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  if (has_mission()) {
    this->mutable_mission()->SetInitialized();
  }
  return;
}

void MissionUpdateReply::Swap(MissionUpdateReply* other) {
  if (other != this) {
    std::swap(mission_, other->mission_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata MissionUpdateReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MissionUpdateReply_descriptor_;
  metadata.reflection = MissionUpdateReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MissionListReply::kMissionListFieldNumber;
#endif  // !_MSC_VER

MissionListReply::MissionListReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MissionListReply::InitAsDefaultInstance() {
}

MissionListReply::MissionListReply(const MissionListReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MissionListReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MissionListReply::~MissionListReply() {
  SharedDtor();
}

void MissionListReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MissionListReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissionListReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionListReply_descriptor_;
}

const MissionListReply& MissionListReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MissionPacket_2eproto();
  return *default_instance_;
}

MissionListReply* MissionListReply::default_instance_ = NULL;

MissionListReply* MissionListReply::New() const {
  return new MissionListReply;
}

void MissionListReply::Clear() {
  mission_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool MissionListReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.Mission mission_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mission_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mission_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mission_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void MissionListReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.Mission mission_list = 1;
  for (int i = 0; i < this->mission_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mission_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MissionListReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.Mission mission_list = 1;
  for (int i = 0; i < this->mission_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mission_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MissionListReply::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.Mission mission_list = 1;
  total_size += 1 * this->mission_list_size();
  for (int i = 0; i < this->mission_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mission_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionListReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MissionListReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MissionListReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void MissionListReply::MergeFrom(const MissionListReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  mission_list_.MergeFrom(from.mission_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void MissionListReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void MissionListReply::CopyFrom(const MissionListReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool MissionListReply::IsInitialized() const {

  for (int i = 0; i < mission_list_size(); i++) {
    if (!this->mission_list(i).IsInitialized()) return false;
  }
  return true;
}

void MissionListReply::SetInitialized() {

  for (int i = 0; i < mission_list_size(); i++) {
    this->mutable_mission_list(i)->SetInitialized();
  }
  return;
}

void MissionListReply::Swap(MissionListReply* other) {
  if (other != this) {
    mission_list_.Swap(&other->mission_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata MissionListReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MissionListReply_descriptor_;
  metadata.reflection = MissionListReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncMission::kSrcGuidFieldNumber;
const int SyncMission::kTypeFieldNumber;
const int SyncMission::kTimeMarkFieldNumber;
#endif  // !_MSC_VER

SyncMission::SyncMission()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncMission::InitAsDefaultInstance() {
}

SyncMission::SyncMission(const SyncMission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncMission::SharedCtor() {
  _cached_size_ = 0;
  src_guid_ = GOOGLE_ULONGLONG(0);
  type_ = -1;
  time_mark_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncMission::~SyncMission() {
  SharedDtor();
}

void SyncMission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncMission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncMission_descriptor_;
}

const SyncMission& SyncMission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MissionPacket_2eproto();
  return *default_instance_;
}

SyncMission* SyncMission::default_instance_ = NULL;

SyncMission* SyncMission::New() const {
  return new SyncMission;
}

void SyncMission::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_guid_ = GOOGLE_ULONGLONG(0);
    type_ = -1;
    time_mark_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SyncMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 src_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &src_guid_)));
          set_has_src_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .Config.MissionType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Config::MissionType_IsValid(value)) {
            set_type(static_cast< ::Config::MissionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time_mark;
        break;
      }

      // required int32 time_mark = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_mark_)));
          set_has_time_mark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SyncMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 src_guid = 1;
  if (has_src_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->src_guid(), output);
  }

  // required .Config.MissionType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required int32 time_mark = 3;
  if (has_time_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time_mark(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncMission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 src_guid = 1;
  if (has_src_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->src_guid(), target);
  }

  // required .Config.MissionType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required int32 time_mark = 3;
  if (has_time_mark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time_mark(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncMission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 src_guid = 1;
    if (has_src_guid()) {
      total_size += 1 + 8;
    }

    // required .Config.MissionType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 time_mark = 3;
    if (has_time_mark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_mark());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncMission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncMission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncMission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SyncMission::MergeFrom(const SyncMission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_guid()) {
      set_src_guid(from.src_guid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_time_mark()) {
      set_time_mark(from.time_mark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SyncMission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SyncMission::CopyFrom(const SyncMission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SyncMission::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SyncMission::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  return;
}

void SyncMission::Swap(SyncMission* other) {
  if (other != this) {
    std::swap(src_guid_, other->src_guid_);
    std::swap(type_, other->type_);
    std::swap(time_mark_, other->time_mark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SyncMission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncMission_descriptor_;
  metadata.reflection = SyncMission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncMissionRequest::kSncMsgFieldNumber;
const int SyncMissionRequest::kAgreeFieldNumber;
#endif  // !_MSC_VER

SyncMissionRequest::SyncMissionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncMissionRequest::InitAsDefaultInstance() {
  snc_msg_ = const_cast< ::Packet::SyncMission*>(&::Packet::SyncMission::default_instance());
}

SyncMissionRequest::SyncMissionRequest(const SyncMissionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncMissionRequest::SharedCtor() {
  _cached_size_ = 0;
  snc_msg_ = NULL;
  agree_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncMissionRequest::~SyncMissionRequest() {
  SharedDtor();
}

void SyncMissionRequest::SharedDtor() {
  if (this != default_instance_) {
    delete snc_msg_;
  }
}

void SyncMissionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncMissionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncMissionRequest_descriptor_;
}

const SyncMissionRequest& SyncMissionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MissionPacket_2eproto();
  return *default_instance_;
}

SyncMissionRequest* SyncMissionRequest::default_instance_ = NULL;

SyncMissionRequest* SyncMissionRequest::New() const {
  return new SyncMissionRequest;
}

void SyncMissionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_snc_msg()) {
      if (snc_msg_ != NULL) snc_msg_->::Packet::SyncMission::Clear();
    }
    agree_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SyncMissionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.SyncMission snc_msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snc_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_agree;
        break;
      }

      // required bool agree = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_)));
          set_has_agree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SyncMissionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.SyncMission snc_msg = 1;
  if (has_snc_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->snc_msg(), output);
  }

  // required bool agree = 2;
  if (has_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->agree(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncMissionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.SyncMission snc_msg = 1;
  if (has_snc_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->snc_msg(), target);
  }

  // required bool agree = 2;
  if (has_agree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->agree(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncMissionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.SyncMission snc_msg = 1;
    if (has_snc_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->snc_msg());
    }

    // required bool agree = 2;
    if (has_agree()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncMissionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncMissionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncMissionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SyncMissionRequest::MergeFrom(const SyncMissionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_snc_msg()) {
      mutable_snc_msg()->::Packet::SyncMission::MergeFrom(from.snc_msg());
    }
    if (from.has_agree()) {
      set_agree(from.agree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SyncMissionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SyncMissionRequest::CopyFrom(const SyncMissionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SyncMissionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_snc_msg()) {
    if (!this->snc_msg().IsInitialized()) return false;
  }
  return true;
}

void SyncMissionRequest::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  if (has_snc_msg()) {
    this->mutable_snc_msg()->SetInitialized();
  }
  return;
}

void SyncMissionRequest::Swap(SyncMissionRequest* other) {
  if (other != this) {
    std::swap(snc_msg_, other->snc_msg_);
    std::swap(agree_, other->agree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SyncMissionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncMissionRequest_descriptor_;
  metadata.reflection = SyncMissionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncMissionReply::kSncMsgFieldNumber;
const int SyncMissionReply::kAgreeFieldNumber;
#endif  // !_MSC_VER

SyncMissionReply::SyncMissionReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncMissionReply::InitAsDefaultInstance() {
  snc_msg_ = const_cast< ::Packet::SyncMission*>(&::Packet::SyncMission::default_instance());
}

SyncMissionReply::SyncMissionReply(const SyncMissionReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncMissionReply::SharedCtor() {
  _cached_size_ = 0;
  snc_msg_ = NULL;
  agree_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncMissionReply::~SyncMissionReply() {
  SharedDtor();
}

void SyncMissionReply::SharedDtor() {
  if (this != default_instance_) {
    delete snc_msg_;
  }
}

void SyncMissionReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncMissionReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncMissionReply_descriptor_;
}

const SyncMissionReply& SyncMissionReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MissionPacket_2eproto();
  return *default_instance_;
}

SyncMissionReply* SyncMissionReply::default_instance_ = NULL;

SyncMissionReply* SyncMissionReply::New() const {
  return new SyncMissionReply;
}

void SyncMissionReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_snc_msg()) {
      if (snc_msg_ != NULL) snc_msg_->::Packet::SyncMission::Clear();
    }
    agree_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SyncMissionReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.SyncMission snc_msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snc_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_agree;
        break;
      }

      // required bool agree = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_)));
          set_has_agree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SyncMissionReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.SyncMission snc_msg = 1;
  if (has_snc_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->snc_msg(), output);
  }

  // required bool agree = 2;
  if (has_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->agree(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncMissionReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.SyncMission snc_msg = 1;
  if (has_snc_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->snc_msg(), target);
  }

  // required bool agree = 2;
  if (has_agree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->agree(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncMissionReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.SyncMission snc_msg = 1;
    if (has_snc_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->snc_msg());
    }

    // required bool agree = 2;
    if (has_agree()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncMissionReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncMissionReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncMissionReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SyncMissionReply::MergeFrom(const SyncMissionReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_snc_msg()) {
      mutable_snc_msg()->::Packet::SyncMission::MergeFrom(from.snc_msg());
    }
    if (from.has_agree()) {
      set_agree(from.agree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SyncMissionReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SyncMissionReply::CopyFrom(const SyncMissionReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SyncMissionReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_snc_msg()) {
    if (!this->snc_msg().IsInitialized()) return false;
  }
  return true;
}

void SyncMissionReply::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  if (has_snc_msg()) {
    this->mutable_snc_msg()->SetInitialized();
  }
  return;
}

void SyncMissionReply::Swap(SyncMissionReply* other) {
  if (other != this) {
    std::swap(snc_msg_, other->snc_msg_);
    std::swap(agree_, other->agree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SyncMissionReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncMissionReply_descriptor_;
  metadata.reflection = SyncMissionReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClickChatMissionReq::kSrcplayerGuidFieldNumber;
const int ClickChatMissionReq::kMissionidFieldNumber;
const int ClickChatMissionReq::kTDescFieldNumber;
const int ClickChatMissionReq::kSDescFieldNumber;
const int ClickChatMissionReq::kDDescFieldNumber;
#endif  // !_MSC_VER

ClickChatMissionReq::ClickChatMissionReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClickChatMissionReq::InitAsDefaultInstance() {
}

ClickChatMissionReq::ClickChatMissionReq(const ClickChatMissionReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClickChatMissionReq::SharedCtor() {
  _cached_size_ = 0;
  srcplayer_guid_ = GOOGLE_ULONGLONG(0);
  missionid_ = 0;
  t_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  s_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  d_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClickChatMissionReq::~ClickChatMissionReq() {
  SharedDtor();
}

void ClickChatMissionReq::SharedDtor() {
  if (t_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete t_desc_;
  }
  if (s_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete s_desc_;
  }
  if (d_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete d_desc_;
  }
  if (this != default_instance_) {
  }
}

void ClickChatMissionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClickChatMissionReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClickChatMissionReq_descriptor_;
}

const ClickChatMissionReq& ClickChatMissionReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MissionPacket_2eproto();
  return *default_instance_;
}

ClickChatMissionReq* ClickChatMissionReq::default_instance_ = NULL;

ClickChatMissionReq* ClickChatMissionReq::New() const {
  return new ClickChatMissionReq;
}

void ClickChatMissionReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srcplayer_guid_ = GOOGLE_ULONGLONG(0);
    missionid_ = 0;
    if (has_t_desc()) {
      if (t_desc_ != &::google::protobuf::internal::kEmptyString) {
        t_desc_->clear();
      }
    }
    if (has_s_desc()) {
      if (s_desc_ != &::google::protobuf::internal::kEmptyString) {
        s_desc_->clear();
      }
    }
    if (has_d_desc()) {
      if (d_desc_ != &::google::protobuf::internal::kEmptyString) {
        d_desc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ClickChatMissionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 srcplayer_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &srcplayer_guid_)));
          set_has_srcplayer_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_missionid;
        break;
      }

      // required int32 missionid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_missionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_t_desc;
        break;
      }

      // required string t_desc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_t_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_t_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->t_desc().data(), this->t_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_s_desc;
        break;
      }

      // required string s_desc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_s_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->s_desc().data(), this->s_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_d_desc;
        break;
      }

      // required string d_desc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_d_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_d_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->d_desc().data(), this->d_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ClickChatMissionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 srcplayer_guid = 1;
  if (has_srcplayer_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->srcplayer_guid(), output);
  }

  // required int32 missionid = 2;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->missionid(), output);
  }

  // required string t_desc = 3;
  if (has_t_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->t_desc().data(), this->t_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->t_desc(), output);
  }

  // required string s_desc = 4;
  if (has_s_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->s_desc().data(), this->s_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->s_desc(), output);
  }

  // required string d_desc = 5;
  if (has_d_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->d_desc().data(), this->d_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->d_desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClickChatMissionReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 srcplayer_guid = 1;
  if (has_srcplayer_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->srcplayer_guid(), target);
  }

  // required int32 missionid = 2;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->missionid(), target);
  }

  // required string t_desc = 3;
  if (has_t_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->t_desc().data(), this->t_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->t_desc(), target);
  }

  // required string s_desc = 4;
  if (has_s_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->s_desc().data(), this->s_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->s_desc(), target);
  }

  // required string d_desc = 5;
  if (has_d_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->d_desc().data(), this->d_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->d_desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClickChatMissionReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 srcplayer_guid = 1;
    if (has_srcplayer_guid()) {
      total_size += 1 + 8;
    }

    // required int32 missionid = 2;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->missionid());
    }

    // required string t_desc = 3;
    if (has_t_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->t_desc());
    }

    // required string s_desc = 4;
    if (has_s_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->s_desc());
    }

    // required string d_desc = 5;
    if (has_d_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->d_desc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClickChatMissionReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClickChatMissionReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClickChatMissionReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ClickChatMissionReq::MergeFrom(const ClickChatMissionReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcplayer_guid()) {
      set_srcplayer_guid(from.srcplayer_guid());
    }
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
    if (from.has_t_desc()) {
      set_t_desc(from.t_desc());
    }
    if (from.has_s_desc()) {
      set_s_desc(from.s_desc());
    }
    if (from.has_d_desc()) {
      set_d_desc(from.d_desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ClickChatMissionReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ClickChatMissionReq::CopyFrom(const ClickChatMissionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ClickChatMissionReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void ClickChatMissionReq::SetInitialized() {
  _has_bits_[0] |= 0x0000001f;

  return;
}

void ClickChatMissionReq::Swap(ClickChatMissionReq* other) {
  if (other != this) {
    std::swap(srcplayer_guid_, other->srcplayer_guid_);
    std::swap(missionid_, other->missionid_);
    std::swap(t_desc_, other->t_desc_);
    std::swap(s_desc_, other->s_desc_);
    std::swap(d_desc_, other->d_desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ClickChatMissionReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClickChatMissionReq_descriptor_;
  metadata.reflection = ClickChatMissionReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClickChatMissionReply::kMissionidFieldNumber;
const int ClickChatMissionReply::kTDescFieldNumber;
const int ClickChatMissionReply::kSDescFieldNumber;
const int ClickChatMissionReply::kDDescFieldNumber;
#endif  // !_MSC_VER

ClickChatMissionReply::ClickChatMissionReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClickChatMissionReply::InitAsDefaultInstance() {
}

ClickChatMissionReply::ClickChatMissionReply(const ClickChatMissionReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClickChatMissionReply::SharedCtor() {
  _cached_size_ = 0;
  missionid_ = 0;
  t_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  s_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  d_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClickChatMissionReply::~ClickChatMissionReply() {
  SharedDtor();
}

void ClickChatMissionReply::SharedDtor() {
  if (t_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete t_desc_;
  }
  if (s_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete s_desc_;
  }
  if (d_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete d_desc_;
  }
  if (this != default_instance_) {
  }
}

void ClickChatMissionReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClickChatMissionReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClickChatMissionReply_descriptor_;
}

const ClickChatMissionReply& ClickChatMissionReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MissionPacket_2eproto();
  return *default_instance_;
}

ClickChatMissionReply* ClickChatMissionReply::default_instance_ = NULL;

ClickChatMissionReply* ClickChatMissionReply::New() const {
  return new ClickChatMissionReply;
}

void ClickChatMissionReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    missionid_ = 0;
    if (has_t_desc()) {
      if (t_desc_ != &::google::protobuf::internal::kEmptyString) {
        t_desc_->clear();
      }
    }
    if (has_s_desc()) {
      if (s_desc_ != &::google::protobuf::internal::kEmptyString) {
        s_desc_->clear();
      }
    }
    if (has_d_desc()) {
      if (d_desc_ != &::google::protobuf::internal::kEmptyString) {
        d_desc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ClickChatMissionReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 missionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_t_desc;
        break;
      }

      // required string t_desc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_t_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_t_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->t_desc().data(), this->t_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_s_desc;
        break;
      }

      // required string s_desc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_s_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->s_desc().data(), this->s_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_d_desc;
        break;
      }

      // required string d_desc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_d_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_d_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->d_desc().data(), this->d_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ClickChatMissionReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 missionid = 1;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->missionid(), output);
  }

  // required string t_desc = 3;
  if (has_t_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->t_desc().data(), this->t_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->t_desc(), output);
  }

  // required string s_desc = 4;
  if (has_s_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->s_desc().data(), this->s_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->s_desc(), output);
  }

  // required string d_desc = 5;
  if (has_d_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->d_desc().data(), this->d_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->d_desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClickChatMissionReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 missionid = 1;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->missionid(), target);
  }

  // required string t_desc = 3;
  if (has_t_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->t_desc().data(), this->t_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->t_desc(), target);
  }

  // required string s_desc = 4;
  if (has_s_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->s_desc().data(), this->s_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->s_desc(), target);
  }

  // required string d_desc = 5;
  if (has_d_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->d_desc().data(), this->d_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->d_desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClickChatMissionReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 missionid = 1;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->missionid());
    }

    // required string t_desc = 3;
    if (has_t_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->t_desc());
    }

    // required string s_desc = 4;
    if (has_s_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->s_desc());
    }

    // required string d_desc = 5;
    if (has_d_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->d_desc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClickChatMissionReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClickChatMissionReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClickChatMissionReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ClickChatMissionReply::MergeFrom(const ClickChatMissionReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
    if (from.has_t_desc()) {
      set_t_desc(from.t_desc());
    }
    if (from.has_s_desc()) {
      set_s_desc(from.s_desc());
    }
    if (from.has_d_desc()) {
      set_d_desc(from.d_desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ClickChatMissionReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ClickChatMissionReply::CopyFrom(const ClickChatMissionReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ClickChatMissionReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ClickChatMissionReply::SetInitialized() {
  _has_bits_[0] |= 0x0000000f;

  return;
}

void ClickChatMissionReply::Swap(ClickChatMissionReply* other) {
  if (other != this) {
    std::swap(missionid_, other->missionid_);
    std::swap(t_desc_, other->t_desc_);
    std::swap(s_desc_, other->s_desc_);
    std::swap(d_desc_, other->d_desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ClickChatMissionReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClickChatMissionReply_descriptor_;
  metadata.reflection = ClickChatMissionReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

// @@protoc_insertion_point(global_scope)
