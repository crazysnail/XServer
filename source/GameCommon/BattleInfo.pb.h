// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BattleInfo.proto

#ifndef PROTOBUF_BattleInfo_2eproto__INCLUDED
#define PROTOBUF_BattleInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Packet {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BattleInfo_2eproto();
void protobuf_AssignDesc_BattleInfo_2eproto();
void protobuf_ShutdownFile_BattleInfo_2eproto();

class BattleInfo;

// ===================================================================

class BattleInfo : public ::google::protobuf::Message {
 public:
  BattleInfo();
  virtual ~BattleInfo();

  BattleInfo(const BattleInfo& from);

  inline BattleInfo& operator=(const BattleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BattleInfo& default_instance();

  void Swap(BattleInfo* other);

  // implements Message ----------------------------------------------

  BattleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BattleInfo& from);
  void MergeFrom(const BattleInfo& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 endurance = 1;
  inline bool has_endurance() const;
  inline void clear_endurance();
  static const int kEnduranceFieldNumber = 1;
  inline ::google::protobuf::int32 endurance() const;
  inline void set_endurance(::google::protobuf::int32 value);

  // required int32 physical_strength = 2;
  inline bool has_physical_strength() const;
  inline void clear_physical_strength();
  static const int kPhysicalStrengthFieldNumber = 2;
  inline ::google::protobuf::int32 physical_strength() const;
  inline void set_physical_strength(::google::protobuf::int32 value);

  // required int32 agile = 3;
  inline bool has_agile() const;
  inline void clear_agile();
  static const int kAgileFieldNumber = 3;
  inline ::google::protobuf::int32 agile() const;
  inline void set_agile(::google::protobuf::int32 value);

  // required int32 intelligence = 4;
  inline bool has_intelligence() const;
  inline void clear_intelligence();
  static const int kIntelligenceFieldNumber = 4;
  inline ::google::protobuf::int32 intelligence() const;
  inline void set_intelligence(::google::protobuf::int32 value);

  // required int32 spirit = 5;
  inline bool has_spirit() const;
  inline void clear_spirit();
  static const int kSpiritFieldNumber = 5;
  inline ::google::protobuf::int32 spirit() const;
  inline void set_spirit(::google::protobuf::int32 value);

  // required int32 hp = 6;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 6;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);

  // required int32 physical_attack = 7;
  inline bool has_physical_attack() const;
  inline void clear_physical_attack();
  static const int kPhysicalAttackFieldNumber = 7;
  inline ::google::protobuf::int32 physical_attack() const;
  inline void set_physical_attack(::google::protobuf::int32 value);

  // required int32 physical_armor = 8;
  inline bool has_physical_armor() const;
  inline void clear_physical_armor();
  static const int kPhysicalArmorFieldNumber = 8;
  inline ::google::protobuf::int32 physical_armor() const;
  inline void set_physical_armor(::google::protobuf::int32 value);

  // required int32 magic_attack = 9;
  inline bool has_magic_attack() const;
  inline void clear_magic_attack();
  static const int kMagicAttackFieldNumber = 9;
  inline ::google::protobuf::int32 magic_attack() const;
  inline void set_magic_attack(::google::protobuf::int32 value);

  // required int32 magic_armor = 10;
  inline bool has_magic_armor() const;
  inline void clear_magic_armor();
  static const int kMagicArmorFieldNumber = 10;
  inline ::google::protobuf::int32 magic_armor() const;
  inline void set_magic_armor(::google::protobuf::int32 value);

  // required int32 accurate = 11;
  inline bool has_accurate() const;
  inline void clear_accurate();
  static const int kAccurateFieldNumber = 11;
  inline ::google::protobuf::int32 accurate() const;
  inline void set_accurate(::google::protobuf::int32 value);

  // required int32 dodge = 12;
  inline bool has_dodge() const;
  inline void clear_dodge();
  static const int kDodgeFieldNumber = 12;
  inline ::google::protobuf::int32 dodge() const;
  inline void set_dodge(::google::protobuf::int32 value);

  // required int32 critical = 13;
  inline bool has_critical() const;
  inline void clear_critical();
  static const int kCriticalFieldNumber = 13;
  inline ::google::protobuf::int32 critical() const;
  inline void set_critical(::google::protobuf::int32 value);

  // required int32 toughness = 14;
  inline bool has_toughness() const;
  inline void clear_toughness();
  static const int kToughnessFieldNumber = 14;
  inline ::google::protobuf::int32 toughness() const;
  inline void set_toughness(::google::protobuf::int32 value);

  // required int32 move_speed = 15;
  inline bool has_move_speed() const;
  inline void clear_move_speed();
  static const int kMoveSpeedFieldNumber = 15;
  inline ::google::protobuf::int32 move_speed() const;
  inline void set_move_speed(::google::protobuf::int32 value);

  // required int32 attack_speed = 16;
  inline bool has_attack_speed() const;
  inline void clear_attack_speed();
  static const int kAttackSpeedFieldNumber = 16;
  inline ::google::protobuf::int32 attack_speed() const;
  inline void set_attack_speed(::google::protobuf::int32 value);

  // required int32 skill = 17;
  inline bool has_skill() const;
  inline void clear_skill();
  static const int kSkillFieldNumber = 17;
  inline ::google::protobuf::int32 skill() const;
  inline void set_skill(::google::protobuf::int32 value);

  // optional int32 percent_hp = 18;
  inline bool has_percent_hp() const;
  inline void clear_percent_hp();
  static const int kPercentHpFieldNumber = 18;
  inline ::google::protobuf::int32 percent_hp() const;
  inline void set_percent_hp(::google::protobuf::int32 value);

  // optional int32 percent_physical_attack = 19;
  inline bool has_percent_physical_attack() const;
  inline void clear_percent_physical_attack();
  static const int kPercentPhysicalAttackFieldNumber = 19;
  inline ::google::protobuf::int32 percent_physical_attack() const;
  inline void set_percent_physical_attack(::google::protobuf::int32 value);

  // optional int32 percent_physical_armor = 20;
  inline bool has_percent_physical_armor() const;
  inline void clear_percent_physical_armor();
  static const int kPercentPhysicalArmorFieldNumber = 20;
  inline ::google::protobuf::int32 percent_physical_armor() const;
  inline void set_percent_physical_armor(::google::protobuf::int32 value);

  // optional int32 percent_magic_attack = 21;
  inline bool has_percent_magic_attack() const;
  inline void clear_percent_magic_attack();
  static const int kPercentMagicAttackFieldNumber = 21;
  inline ::google::protobuf::int32 percent_magic_attack() const;
  inline void set_percent_magic_attack(::google::protobuf::int32 value);

  // optional int32 percent_magic_armor = 22;
  inline bool has_percent_magic_armor() const;
  inline void clear_percent_magic_armor();
  static const int kPercentMagicArmorFieldNumber = 22;
  inline ::google::protobuf::int32 percent_magic_armor() const;
  inline void set_percent_magic_armor(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.BattleInfo)
 private:
  inline void set_has_endurance();
  inline void clear_has_endurance();
  inline void set_has_physical_strength();
  inline void clear_has_physical_strength();
  inline void set_has_agile();
  inline void clear_has_agile();
  inline void set_has_intelligence();
  inline void clear_has_intelligence();
  inline void set_has_spirit();
  inline void clear_has_spirit();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_physical_attack();
  inline void clear_has_physical_attack();
  inline void set_has_physical_armor();
  inline void clear_has_physical_armor();
  inline void set_has_magic_attack();
  inline void clear_has_magic_attack();
  inline void set_has_magic_armor();
  inline void clear_has_magic_armor();
  inline void set_has_accurate();
  inline void clear_has_accurate();
  inline void set_has_dodge();
  inline void clear_has_dodge();
  inline void set_has_critical();
  inline void clear_has_critical();
  inline void set_has_toughness();
  inline void clear_has_toughness();
  inline void set_has_move_speed();
  inline void clear_has_move_speed();
  inline void set_has_attack_speed();
  inline void clear_has_attack_speed();
  inline void set_has_skill();
  inline void clear_has_skill();
  inline void set_has_percent_hp();
  inline void clear_has_percent_hp();
  inline void set_has_percent_physical_attack();
  inline void clear_has_percent_physical_attack();
  inline void set_has_percent_physical_armor();
  inline void clear_has_percent_physical_armor();
  inline void set_has_percent_magic_attack();
  inline void clear_has_percent_magic_attack();
  inline void set_has_percent_magic_armor();
  inline void clear_has_percent_magic_armor();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 endurance_;
  ::google::protobuf::int32 physical_strength_;
  ::google::protobuf::int32 agile_;
  ::google::protobuf::int32 intelligence_;
  ::google::protobuf::int32 spirit_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 physical_attack_;
  ::google::protobuf::int32 physical_armor_;
  ::google::protobuf::int32 magic_attack_;
  ::google::protobuf::int32 magic_armor_;
  ::google::protobuf::int32 accurate_;
  ::google::protobuf::int32 dodge_;
  ::google::protobuf::int32 critical_;
  ::google::protobuf::int32 toughness_;
  ::google::protobuf::int32 move_speed_;
  ::google::protobuf::int32 attack_speed_;
  ::google::protobuf::int32 skill_;
  ::google::protobuf::int32 percent_hp_;
  ::google::protobuf::int32 percent_physical_attack_;
  ::google::protobuf::int32 percent_physical_armor_;
  ::google::protobuf::int32 percent_magic_attack_;
  ::google::protobuf::int32 percent_magic_armor_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(22 + 31) / 32];

  friend void  protobuf_AddDesc_BattleInfo_2eproto();
  friend void protobuf_AssignDesc_BattleInfo_2eproto();
  friend void protobuf_ShutdownFile_BattleInfo_2eproto();

  void InitAsDefaultInstance();
  static BattleInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// BattleInfo

// required int32 endurance = 1;
inline bool BattleInfo::has_endurance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BattleInfo::set_has_endurance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BattleInfo::clear_has_endurance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BattleInfo::clear_endurance() {
  endurance_ = 0;
  clear_has_endurance();
  SetDirty();
}
inline ::google::protobuf::int32 BattleInfo::endurance() const {
  return endurance_;
}
inline void BattleInfo::set_endurance(::google::protobuf::int32 value) {
  SetDirty();
  set_has_endurance();
  endurance_ = value;
}

// required int32 physical_strength = 2;
inline bool BattleInfo::has_physical_strength() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BattleInfo::set_has_physical_strength() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BattleInfo::clear_has_physical_strength() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BattleInfo::clear_physical_strength() {
  physical_strength_ = 0;
  clear_has_physical_strength();
  SetDirty();
}
inline ::google::protobuf::int32 BattleInfo::physical_strength() const {
  return physical_strength_;
}
inline void BattleInfo::set_physical_strength(::google::protobuf::int32 value) {
  SetDirty();
  set_has_physical_strength();
  physical_strength_ = value;
}

// required int32 agile = 3;
inline bool BattleInfo::has_agile() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BattleInfo::set_has_agile() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BattleInfo::clear_has_agile() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BattleInfo::clear_agile() {
  agile_ = 0;
  clear_has_agile();
  SetDirty();
}
inline ::google::protobuf::int32 BattleInfo::agile() const {
  return agile_;
}
inline void BattleInfo::set_agile(::google::protobuf::int32 value) {
  SetDirty();
  set_has_agile();
  agile_ = value;
}

// required int32 intelligence = 4;
inline bool BattleInfo::has_intelligence() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BattleInfo::set_has_intelligence() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BattleInfo::clear_has_intelligence() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BattleInfo::clear_intelligence() {
  intelligence_ = 0;
  clear_has_intelligence();
  SetDirty();
}
inline ::google::protobuf::int32 BattleInfo::intelligence() const {
  return intelligence_;
}
inline void BattleInfo::set_intelligence(::google::protobuf::int32 value) {
  SetDirty();
  set_has_intelligence();
  intelligence_ = value;
}

// required int32 spirit = 5;
inline bool BattleInfo::has_spirit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BattleInfo::set_has_spirit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BattleInfo::clear_has_spirit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BattleInfo::clear_spirit() {
  spirit_ = 0;
  clear_has_spirit();
  SetDirty();
}
inline ::google::protobuf::int32 BattleInfo::spirit() const {
  return spirit_;
}
inline void BattleInfo::set_spirit(::google::protobuf::int32 value) {
  SetDirty();
  set_has_spirit();
  spirit_ = value;
}

// required int32 hp = 6;
inline bool BattleInfo::has_hp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BattleInfo::set_has_hp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BattleInfo::clear_has_hp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BattleInfo::clear_hp() {
  hp_ = 0;
  clear_has_hp();
  SetDirty();
}
inline ::google::protobuf::int32 BattleInfo::hp() const {
  return hp_;
}
inline void BattleInfo::set_hp(::google::protobuf::int32 value) {
  SetDirty();
  set_has_hp();
  hp_ = value;
}

// required int32 physical_attack = 7;
inline bool BattleInfo::has_physical_attack() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BattleInfo::set_has_physical_attack() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BattleInfo::clear_has_physical_attack() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BattleInfo::clear_physical_attack() {
  physical_attack_ = 0;
  clear_has_physical_attack();
  SetDirty();
}
inline ::google::protobuf::int32 BattleInfo::physical_attack() const {
  return physical_attack_;
}
inline void BattleInfo::set_physical_attack(::google::protobuf::int32 value) {
  SetDirty();
  set_has_physical_attack();
  physical_attack_ = value;
}

// required int32 physical_armor = 8;
inline bool BattleInfo::has_physical_armor() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BattleInfo::set_has_physical_armor() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BattleInfo::clear_has_physical_armor() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BattleInfo::clear_physical_armor() {
  physical_armor_ = 0;
  clear_has_physical_armor();
  SetDirty();
}
inline ::google::protobuf::int32 BattleInfo::physical_armor() const {
  return physical_armor_;
}
inline void BattleInfo::set_physical_armor(::google::protobuf::int32 value) {
  SetDirty();
  set_has_physical_armor();
  physical_armor_ = value;
}

// required int32 magic_attack = 9;
inline bool BattleInfo::has_magic_attack() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BattleInfo::set_has_magic_attack() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BattleInfo::clear_has_magic_attack() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BattleInfo::clear_magic_attack() {
  magic_attack_ = 0;
  clear_has_magic_attack();
  SetDirty();
}
inline ::google::protobuf::int32 BattleInfo::magic_attack() const {
  return magic_attack_;
}
inline void BattleInfo::set_magic_attack(::google::protobuf::int32 value) {
  SetDirty();
  set_has_magic_attack();
  magic_attack_ = value;
}

// required int32 magic_armor = 10;
inline bool BattleInfo::has_magic_armor() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BattleInfo::set_has_magic_armor() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BattleInfo::clear_has_magic_armor() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BattleInfo::clear_magic_armor() {
  magic_armor_ = 0;
  clear_has_magic_armor();
  SetDirty();
}
inline ::google::protobuf::int32 BattleInfo::magic_armor() const {
  return magic_armor_;
}
inline void BattleInfo::set_magic_armor(::google::protobuf::int32 value) {
  SetDirty();
  set_has_magic_armor();
  magic_armor_ = value;
}

// required int32 accurate = 11;
inline bool BattleInfo::has_accurate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BattleInfo::set_has_accurate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BattleInfo::clear_has_accurate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BattleInfo::clear_accurate() {
  accurate_ = 0;
  clear_has_accurate();
  SetDirty();
}
inline ::google::protobuf::int32 BattleInfo::accurate() const {
  return accurate_;
}
inline void BattleInfo::set_accurate(::google::protobuf::int32 value) {
  SetDirty();
  set_has_accurate();
  accurate_ = value;
}

// required int32 dodge = 12;
inline bool BattleInfo::has_dodge() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BattleInfo::set_has_dodge() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BattleInfo::clear_has_dodge() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BattleInfo::clear_dodge() {
  dodge_ = 0;
  clear_has_dodge();
  SetDirty();
}
inline ::google::protobuf::int32 BattleInfo::dodge() const {
  return dodge_;
}
inline void BattleInfo::set_dodge(::google::protobuf::int32 value) {
  SetDirty();
  set_has_dodge();
  dodge_ = value;
}

// required int32 critical = 13;
inline bool BattleInfo::has_critical() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BattleInfo::set_has_critical() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BattleInfo::clear_has_critical() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BattleInfo::clear_critical() {
  critical_ = 0;
  clear_has_critical();
  SetDirty();
}
inline ::google::protobuf::int32 BattleInfo::critical() const {
  return critical_;
}
inline void BattleInfo::set_critical(::google::protobuf::int32 value) {
  SetDirty();
  set_has_critical();
  critical_ = value;
}

// required int32 toughness = 14;
inline bool BattleInfo::has_toughness() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BattleInfo::set_has_toughness() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BattleInfo::clear_has_toughness() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BattleInfo::clear_toughness() {
  toughness_ = 0;
  clear_has_toughness();
  SetDirty();
}
inline ::google::protobuf::int32 BattleInfo::toughness() const {
  return toughness_;
}
inline void BattleInfo::set_toughness(::google::protobuf::int32 value) {
  SetDirty();
  set_has_toughness();
  toughness_ = value;
}

// required int32 move_speed = 15;
inline bool BattleInfo::has_move_speed() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BattleInfo::set_has_move_speed() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BattleInfo::clear_has_move_speed() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BattleInfo::clear_move_speed() {
  move_speed_ = 0;
  clear_has_move_speed();
  SetDirty();
}
inline ::google::protobuf::int32 BattleInfo::move_speed() const {
  return move_speed_;
}
inline void BattleInfo::set_move_speed(::google::protobuf::int32 value) {
  SetDirty();
  set_has_move_speed();
  move_speed_ = value;
}

// required int32 attack_speed = 16;
inline bool BattleInfo::has_attack_speed() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BattleInfo::set_has_attack_speed() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BattleInfo::clear_has_attack_speed() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BattleInfo::clear_attack_speed() {
  attack_speed_ = 0;
  clear_has_attack_speed();
  SetDirty();
}
inline ::google::protobuf::int32 BattleInfo::attack_speed() const {
  return attack_speed_;
}
inline void BattleInfo::set_attack_speed(::google::protobuf::int32 value) {
  SetDirty();
  set_has_attack_speed();
  attack_speed_ = value;
}

// required int32 skill = 17;
inline bool BattleInfo::has_skill() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BattleInfo::set_has_skill() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BattleInfo::clear_has_skill() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BattleInfo::clear_skill() {
  skill_ = 0;
  clear_has_skill();
  SetDirty();
}
inline ::google::protobuf::int32 BattleInfo::skill() const {
  return skill_;
}
inline void BattleInfo::set_skill(::google::protobuf::int32 value) {
  SetDirty();
  set_has_skill();
  skill_ = value;
}

// optional int32 percent_hp = 18;
inline bool BattleInfo::has_percent_hp() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BattleInfo::set_has_percent_hp() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BattleInfo::clear_has_percent_hp() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BattleInfo::clear_percent_hp() {
  percent_hp_ = 0;
  clear_has_percent_hp();
  SetDirty();
}
inline ::google::protobuf::int32 BattleInfo::percent_hp() const {
  return percent_hp_;
}
inline void BattleInfo::set_percent_hp(::google::protobuf::int32 value) {
  SetDirty();
  set_has_percent_hp();
  percent_hp_ = value;
}

// optional int32 percent_physical_attack = 19;
inline bool BattleInfo::has_percent_physical_attack() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void BattleInfo::set_has_percent_physical_attack() {
  _has_bits_[0] |= 0x00040000u;
}
inline void BattleInfo::clear_has_percent_physical_attack() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void BattleInfo::clear_percent_physical_attack() {
  percent_physical_attack_ = 0;
  clear_has_percent_physical_attack();
  SetDirty();
}
inline ::google::protobuf::int32 BattleInfo::percent_physical_attack() const {
  return percent_physical_attack_;
}
inline void BattleInfo::set_percent_physical_attack(::google::protobuf::int32 value) {
  SetDirty();
  set_has_percent_physical_attack();
  percent_physical_attack_ = value;
}

// optional int32 percent_physical_armor = 20;
inline bool BattleInfo::has_percent_physical_armor() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void BattleInfo::set_has_percent_physical_armor() {
  _has_bits_[0] |= 0x00080000u;
}
inline void BattleInfo::clear_has_percent_physical_armor() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void BattleInfo::clear_percent_physical_armor() {
  percent_physical_armor_ = 0;
  clear_has_percent_physical_armor();
  SetDirty();
}
inline ::google::protobuf::int32 BattleInfo::percent_physical_armor() const {
  return percent_physical_armor_;
}
inline void BattleInfo::set_percent_physical_armor(::google::protobuf::int32 value) {
  SetDirty();
  set_has_percent_physical_armor();
  percent_physical_armor_ = value;
}

// optional int32 percent_magic_attack = 21;
inline bool BattleInfo::has_percent_magic_attack() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void BattleInfo::set_has_percent_magic_attack() {
  _has_bits_[0] |= 0x00100000u;
}
inline void BattleInfo::clear_has_percent_magic_attack() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void BattleInfo::clear_percent_magic_attack() {
  percent_magic_attack_ = 0;
  clear_has_percent_magic_attack();
  SetDirty();
}
inline ::google::protobuf::int32 BattleInfo::percent_magic_attack() const {
  return percent_magic_attack_;
}
inline void BattleInfo::set_percent_magic_attack(::google::protobuf::int32 value) {
  SetDirty();
  set_has_percent_magic_attack();
  percent_magic_attack_ = value;
}

// optional int32 percent_magic_armor = 22;
inline bool BattleInfo::has_percent_magic_armor() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void BattleInfo::set_has_percent_magic_armor() {
  _has_bits_[0] |= 0x00200000u;
}
inline void BattleInfo::clear_has_percent_magic_armor() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void BattleInfo::clear_percent_magic_armor() {
  percent_magic_armor_ = 0;
  clear_has_percent_magic_armor();
  SetDirty();
}
inline ::google::protobuf::int32 BattleInfo::percent_magic_armor() const {
  return percent_magic_armor_;
}
inline void BattleInfo::set_percent_magic_armor(::google::protobuf::int32 value) {
  SetDirty();
  set_has_percent_magic_armor();
  percent_magic_armor_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BattleInfo_2eproto__INCLUDED
