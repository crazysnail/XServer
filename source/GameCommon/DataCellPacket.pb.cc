// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataCellPacket.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DataCellPacket.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Packet {

namespace {

const ::google::protobuf::Descriptor* DataCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* Data64Cell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Data64Cell_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataCell32ValueUpdateReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataCell32ValueUpdateReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataCell64ValueUpdateReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataCell64ValueUpdateReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataCellUpdateReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataCellUpdateReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataCell32ListReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataCell32ListReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataCell64ListReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataCell64ListReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleDataCell32ListReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleDataCell32ListReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleDataCell64ListReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleDataCell64ListReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DataCellPacket_2eproto() {
  protobuf_AddDesc_DataCellPacket_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DataCellPacket.proto");
  GOOGLE_CHECK(file != NULL);
  DataCell_descriptor_ = file->message_type(0);
  static const int DataCell_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCell, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCell, player_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCell, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCell, data_),
  };
  DataCell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataCell_descriptor_,
      DataCell::default_instance_,
      DataCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataCell));
  Data64Cell_descriptor_ = file->message_type(1);
  static const int Data64Cell_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data64Cell, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data64Cell, player_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data64Cell, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data64Cell, data_),
  };
  Data64Cell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Data64Cell_descriptor_,
      Data64Cell::default_instance_,
      Data64Cell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data64Cell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data64Cell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Data64Cell));
  DataCell32ValueUpdateReply_descriptor_ = file->message_type(2);
  static const int DataCell32ValueUpdateReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCell32ValueUpdateReply, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCell32ValueUpdateReply, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCell32ValueUpdateReply, data_),
  };
  DataCell32ValueUpdateReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataCell32ValueUpdateReply_descriptor_,
      DataCell32ValueUpdateReply::default_instance_,
      DataCell32ValueUpdateReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCell32ValueUpdateReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCell32ValueUpdateReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataCell32ValueUpdateReply));
  DataCell64ValueUpdateReply_descriptor_ = file->message_type(3);
  static const int DataCell64ValueUpdateReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCell64ValueUpdateReply, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCell64ValueUpdateReply, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCell64ValueUpdateReply, data_),
  };
  DataCell64ValueUpdateReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataCell64ValueUpdateReply_descriptor_,
      DataCell64ValueUpdateReply::default_instance_,
      DataCell64ValueUpdateReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCell64ValueUpdateReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCell64ValueUpdateReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataCell64ValueUpdateReply));
  DataCellUpdateReply_descriptor_ = file->message_type(4);
  static const int DataCellUpdateReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCellUpdateReply, cell32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCellUpdateReply, cell64_),
  };
  DataCellUpdateReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataCellUpdateReply_descriptor_,
      DataCellUpdateReply::default_instance_,
      DataCellUpdateReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCellUpdateReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCellUpdateReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataCellUpdateReply));
  DataCell32ListReply_descriptor_ = file->message_type(5);
  static const int DataCell32ListReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCell32ListReply, cell_list_),
  };
  DataCell32ListReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataCell32ListReply_descriptor_,
      DataCell32ListReply::default_instance_,
      DataCell32ListReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCell32ListReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCell32ListReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataCell32ListReply));
  DataCell64ListReply_descriptor_ = file->message_type(6);
  static const int DataCell64ListReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCell64ListReply, cell_list_),
  };
  DataCell64ListReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataCell64ListReply_descriptor_,
      DataCell64ListReply::default_instance_,
      DataCell64ListReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCell64ListReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataCell64ListReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataCell64ListReply));
  SingleDataCell32ListReply_descriptor_ = file->message_type(7);
  static const int SingleDataCell32ListReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleDataCell32ListReply, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleDataCell32ListReply, cell_list_),
  };
  SingleDataCell32ListReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleDataCell32ListReply_descriptor_,
      SingleDataCell32ListReply::default_instance_,
      SingleDataCell32ListReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleDataCell32ListReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleDataCell32ListReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleDataCell32ListReply));
  SingleDataCell64ListReply_descriptor_ = file->message_type(8);
  static const int SingleDataCell64ListReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleDataCell64ListReply, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleDataCell64ListReply, cell_list_),
  };
  SingleDataCell64ListReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleDataCell64ListReply_descriptor_,
      SingleDataCell64ListReply::default_instance_,
      SingleDataCell64ListReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleDataCell64ListReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleDataCell64ListReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleDataCell64ListReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DataCellPacket_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataCell_descriptor_, &DataCell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Data64Cell_descriptor_, &Data64Cell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataCell32ValueUpdateReply_descriptor_, &DataCell32ValueUpdateReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataCell64ValueUpdateReply_descriptor_, &DataCell64ValueUpdateReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataCellUpdateReply_descriptor_, &DataCellUpdateReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataCell32ListReply_descriptor_, &DataCell32ListReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataCell64ListReply_descriptor_, &DataCell64ListReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleDataCell32ListReply_descriptor_, &SingleDataCell32ListReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleDataCell64ListReply_descriptor_, &SingleDataCell64ListReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DataCellPacket_2eproto() {
  delete DataCell::default_instance_;
  delete DataCell_reflection_;
  delete Data64Cell::default_instance_;
  delete Data64Cell_reflection_;
  delete DataCell32ValueUpdateReply::default_instance_;
  delete DataCell32ValueUpdateReply_reflection_;
  delete DataCell64ValueUpdateReply::default_instance_;
  delete DataCell64ValueUpdateReply_reflection_;
  delete DataCellUpdateReply::default_instance_;
  delete DataCellUpdateReply_reflection_;
  delete DataCell32ListReply::default_instance_;
  delete DataCell32ListReply_reflection_;
  delete DataCell64ListReply::default_instance_;
  delete DataCell64ListReply_reflection_;
  delete SingleDataCell32ListReply::default_instance_;
  delete SingleDataCell32ListReply_reflection_;
  delete SingleDataCell64ListReply::default_instance_;
  delete SingleDataCell64ListReply_reflection_;
}

void protobuf_AddDesc_DataCellPacket_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Packet::protobuf_AddDesc_AllPacketEnum_2eproto();
  ::Packet::protobuf_AddDesc_PlayerBasicInfo_2eproto();
  ::Packet::protobuf_AddDesc_ItemAndEquip_2eproto();
  ::Packet::protobuf_AddDesc_ProtoBufOption_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024DataCellPacket.proto\022\006Packet\032\023AllPacke"
    "tEnum.proto\032\025PlayerBasicInfo.proto\032\022Item"
    "AndEquip.proto\032\024ProtoBufOption.proto\"r\n\010"
    "DataCell\022\022\n\004guid\030\001 \002(\006B\004\310\363\030\001\022\031\n\013player_g"
    "uid\030\002 \002(\006B\004\310\363\030\001\022#\n\004type\030\003 \002(\0162\025.Packet.C"
    "ellLogicType\022\022\n\004data\030\004 \003(\005B\004\300\363\030@\"v\n\nData"
    "64Cell\022\022\n\004guid\030\001 \002(\006B\004\310\363\030\001\022\031\n\013player_gui"
    "d\030\002 \002(\006B\004\310\363\030\001\022%\n\004type\030\003 \002(\0162\027.Packet.Cel"
    "l64LogicType\022\022\n\004data\030\004 \003(\006B\004\300\363\030@\"^\n\032Data"
    "Cell32ValueUpdateReply\022#\n\004type\030\001 \002(\0162\025.P"
    "acket.CellLogicType\022\r\n\005index\030\002 \002(\005\022\014\n\004da"
    "ta\030\003 \002(\005\"`\n\032DataCell64ValueUpdateReply\022%"
    "\n\004type\030\001 \002(\0162\027.Packet.Cell64LogicType\022\r\n"
    "\005index\030\002 \002(\005\022\014\n\004data\030\003 \002(\006\"[\n\023DataCellUp"
    "dateReply\022 \n\006cell32\030\001 \001(\0132\020.Packet.DataC"
    "ell\022\"\n\006cell64\030\002 \001(\0132\022.Packet.Data64Cell\""
    ":\n\023DataCell32ListReply\022#\n\tcell_list\030\001 \003("
    "\0132\020.Packet.DataCell\"<\n\023DataCell64ListRep"
    "ly\022%\n\tcell_list\030\001 \003(\0132\022.Packet.Data64Cel"
    "l\"e\n\031SingleDataCell32ListReply\022#\n\004type\030\001"
    " \002(\0162\025.Packet.CellLogicType\022#\n\tcell_list"
    "\030\002 \003(\0132\020.Packet.DataCell\"i\n\031SingleDataCe"
    "ll64ListReply\022%\n\004type\030\001 \002(\0162\027.Packet.Cel"
    "l64LogicType\022%\n\tcell_list\030\002 \003(\0132\022.Packet"
    ".Data64Cell", 971);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DataCellPacket.proto", &protobuf_RegisterTypes);
  DataCell::default_instance_ = new DataCell();
  Data64Cell::default_instance_ = new Data64Cell();
  DataCell32ValueUpdateReply::default_instance_ = new DataCell32ValueUpdateReply();
  DataCell64ValueUpdateReply::default_instance_ = new DataCell64ValueUpdateReply();
  DataCellUpdateReply::default_instance_ = new DataCellUpdateReply();
  DataCell32ListReply::default_instance_ = new DataCell32ListReply();
  DataCell64ListReply::default_instance_ = new DataCell64ListReply();
  SingleDataCell32ListReply::default_instance_ = new SingleDataCell32ListReply();
  SingleDataCell64ListReply::default_instance_ = new SingleDataCell64ListReply();
  DataCell::default_instance_->InitAsDefaultInstance();
  Data64Cell::default_instance_->InitAsDefaultInstance();
  DataCell32ValueUpdateReply::default_instance_->InitAsDefaultInstance();
  DataCell64ValueUpdateReply::default_instance_->InitAsDefaultInstance();
  DataCellUpdateReply::default_instance_->InitAsDefaultInstance();
  DataCell32ListReply::default_instance_->InitAsDefaultInstance();
  DataCell64ListReply::default_instance_->InitAsDefaultInstance();
  SingleDataCell32ListReply::default_instance_->InitAsDefaultInstance();
  SingleDataCell64ListReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DataCellPacket_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DataCellPacket_2eproto {
  StaticDescriptorInitializer_DataCellPacket_2eproto() {
    protobuf_AddDesc_DataCellPacket_2eproto();
  }
} static_descriptor_initializer_DataCellPacket_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DataCell::kGuidFieldNumber;
const int DataCell::kPlayerGuidFieldNumber;
const int DataCell::kTypeFieldNumber;
const int DataCell::kDataFieldNumber;
#endif  // !_MSC_VER

DataCell::DataCell()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataCell::InitAsDefaultInstance() {
}

DataCell::DataCell(const DataCell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataCell::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  player_guid_ = GOOGLE_ULONGLONG(0);
  type_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataCell::~DataCell() {
  SharedDtor();
}

void DataCell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataCell_descriptor_;
}

const DataCell& DataCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataCellPacket_2eproto();
  return *default_instance_;
}

DataCell* DataCell::default_instance_ = NULL;

DataCell* DataCell::New() const {
  return new DataCell;
}

void DataCell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    player_guid_ = GOOGLE_ULONGLONG(0);
    type_ = -1;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool DataCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_player_guid;
        break;
      }

      // required fixed64 player_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_player_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &player_guid_)));
          set_has_player_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .Packet.CellLogicType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::CellLogicType_IsValid(value)) {
            set_type(static_cast< ::Packet::CellLogicType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_data;
        break;
      }

      // repeated int32 data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void DataCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required fixed64 player_guid = 2;
  if (has_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->player_guid(), output);
  }

  // required .Packet.CellLogicType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // repeated int32 data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required fixed64 player_guid = 2;
  if (has_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->player_guid(), target);
  }

  // required .Packet.CellLogicType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // repeated int32 data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataCell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 player_guid = 2;
    if (has_player_guid()) {
      total_size += 1 + 8;
    }

    // required .Packet.CellLogicType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated int32 data = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->data(i));
    }
    total_size += 1 * this->data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataCell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void DataCell::MergeFrom(const DataCell& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_player_guid()) {
      set_player_guid(from.player_guid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void DataCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void DataCell::CopyFrom(const DataCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool DataCell::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DataCell::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  return;
}

void DataCell::Swap(DataCell* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(player_guid_, other->player_guid_);
    std::swap(type_, other->type_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata DataCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataCell_descriptor_;
  metadata.reflection = DataCell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Data64Cell::kGuidFieldNumber;
const int Data64Cell::kPlayerGuidFieldNumber;
const int Data64Cell::kTypeFieldNumber;
const int Data64Cell::kDataFieldNumber;
#endif  // !_MSC_VER

Data64Cell::Data64Cell()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Data64Cell::InitAsDefaultInstance() {
}

Data64Cell::Data64Cell(const Data64Cell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Data64Cell::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  player_guid_ = GOOGLE_ULONGLONG(0);
  type_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Data64Cell::~Data64Cell() {
  SharedDtor();
}

void Data64Cell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Data64Cell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Data64Cell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Data64Cell_descriptor_;
}

const Data64Cell& Data64Cell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataCellPacket_2eproto();
  return *default_instance_;
}

Data64Cell* Data64Cell::default_instance_ = NULL;

Data64Cell* Data64Cell::New() const {
  return new Data64Cell;
}

void Data64Cell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    player_guid_ = GOOGLE_ULONGLONG(0);
    type_ = -1;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool Data64Cell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_player_guid;
        break;
      }

      // required fixed64 player_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_player_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &player_guid_)));
          set_has_player_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .Packet.Cell64LogicType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::Cell64LogicType_IsValid(value)) {
            set_type(static_cast< ::Packet::Cell64LogicType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_data;
        break;
      }

      // repeated fixed64 data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 33, input, this->mutable_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void Data64Cell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required fixed64 player_guid = 2;
  if (has_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->player_guid(), output);
  }

  // required .Packet.Cell64LogicType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // repeated fixed64 data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      4, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Data64Cell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required fixed64 player_guid = 2;
  if (has_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->player_guid(), target);
  }

  // required .Packet.Cell64LogicType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // repeated fixed64 data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(4, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Data64Cell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 player_guid = 2;
    if (has_player_guid()) {
      total_size += 1 + 8;
    }

    // required .Packet.Cell64LogicType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated fixed64 data = 4;
  {
    int data_size = 0;
    data_size = 8 * this->data_size();
    total_size += 1 * this->data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Data64Cell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Data64Cell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Data64Cell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void Data64Cell::MergeFrom(const Data64Cell& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_player_guid()) {
      set_player_guid(from.player_guid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void Data64Cell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void Data64Cell::CopyFrom(const Data64Cell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool Data64Cell::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Data64Cell::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  return;
}

void Data64Cell::Swap(Data64Cell* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(player_guid_, other->player_guid_);
    std::swap(type_, other->type_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata Data64Cell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Data64Cell_descriptor_;
  metadata.reflection = Data64Cell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataCell32ValueUpdateReply::kTypeFieldNumber;
const int DataCell32ValueUpdateReply::kIndexFieldNumber;
const int DataCell32ValueUpdateReply::kDataFieldNumber;
#endif  // !_MSC_VER

DataCell32ValueUpdateReply::DataCell32ValueUpdateReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataCell32ValueUpdateReply::InitAsDefaultInstance() {
}

DataCell32ValueUpdateReply::DataCell32ValueUpdateReply(const DataCell32ValueUpdateReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataCell32ValueUpdateReply::SharedCtor() {
  _cached_size_ = 0;
  type_ = -1;
  index_ = 0;
  data_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataCell32ValueUpdateReply::~DataCell32ValueUpdateReply() {
  SharedDtor();
}

void DataCell32ValueUpdateReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataCell32ValueUpdateReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataCell32ValueUpdateReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataCell32ValueUpdateReply_descriptor_;
}

const DataCell32ValueUpdateReply& DataCell32ValueUpdateReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataCellPacket_2eproto();
  return *default_instance_;
}

DataCell32ValueUpdateReply* DataCell32ValueUpdateReply::default_instance_ = NULL;

DataCell32ValueUpdateReply* DataCell32ValueUpdateReply::New() const {
  return new DataCell32ValueUpdateReply;
}

void DataCell32ValueUpdateReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = -1;
    index_ = 0;
    data_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool DataCell32ValueUpdateReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.CellLogicType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::CellLogicType_IsValid(value)) {
            set_type(static_cast< ::Packet::CellLogicType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_data;
        break;
      }

      // required int32 data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void DataCell32ValueUpdateReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.CellLogicType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // required int32 data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataCell32ValueUpdateReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.CellLogicType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // required int32 data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataCell32ValueUpdateReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.CellLogicType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataCell32ValueUpdateReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataCell32ValueUpdateReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataCell32ValueUpdateReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void DataCell32ValueUpdateReply::MergeFrom(const DataCell32ValueUpdateReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void DataCell32ValueUpdateReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void DataCell32ValueUpdateReply::CopyFrom(const DataCell32ValueUpdateReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool DataCell32ValueUpdateReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DataCell32ValueUpdateReply::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  return;
}

void DataCell32ValueUpdateReply::Swap(DataCell32ValueUpdateReply* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(index_, other->index_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata DataCell32ValueUpdateReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataCell32ValueUpdateReply_descriptor_;
  metadata.reflection = DataCell32ValueUpdateReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataCell64ValueUpdateReply::kTypeFieldNumber;
const int DataCell64ValueUpdateReply::kIndexFieldNumber;
const int DataCell64ValueUpdateReply::kDataFieldNumber;
#endif  // !_MSC_VER

DataCell64ValueUpdateReply::DataCell64ValueUpdateReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataCell64ValueUpdateReply::InitAsDefaultInstance() {
}

DataCell64ValueUpdateReply::DataCell64ValueUpdateReply(const DataCell64ValueUpdateReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataCell64ValueUpdateReply::SharedCtor() {
  _cached_size_ = 0;
  type_ = -1;
  index_ = 0;
  data_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataCell64ValueUpdateReply::~DataCell64ValueUpdateReply() {
  SharedDtor();
}

void DataCell64ValueUpdateReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataCell64ValueUpdateReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataCell64ValueUpdateReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataCell64ValueUpdateReply_descriptor_;
}

const DataCell64ValueUpdateReply& DataCell64ValueUpdateReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataCellPacket_2eproto();
  return *default_instance_;
}

DataCell64ValueUpdateReply* DataCell64ValueUpdateReply::default_instance_ = NULL;

DataCell64ValueUpdateReply* DataCell64ValueUpdateReply::New() const {
  return new DataCell64ValueUpdateReply;
}

void DataCell64ValueUpdateReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = -1;
    index_ = 0;
    data_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool DataCell64ValueUpdateReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.Cell64LogicType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::Cell64LogicType_IsValid(value)) {
            set_type(static_cast< ::Packet::Cell64LogicType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_data;
        break;
      }

      // required fixed64 data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void DataCell64ValueUpdateReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.Cell64LogicType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // required fixed64 data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataCell64ValueUpdateReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.Cell64LogicType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // required fixed64 data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataCell64ValueUpdateReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.Cell64LogicType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required fixed64 data = 3;
    if (has_data()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataCell64ValueUpdateReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataCell64ValueUpdateReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataCell64ValueUpdateReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void DataCell64ValueUpdateReply::MergeFrom(const DataCell64ValueUpdateReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void DataCell64ValueUpdateReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void DataCell64ValueUpdateReply::CopyFrom(const DataCell64ValueUpdateReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool DataCell64ValueUpdateReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DataCell64ValueUpdateReply::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  return;
}

void DataCell64ValueUpdateReply::Swap(DataCell64ValueUpdateReply* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(index_, other->index_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata DataCell64ValueUpdateReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataCell64ValueUpdateReply_descriptor_;
  metadata.reflection = DataCell64ValueUpdateReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataCellUpdateReply::kCell32FieldNumber;
const int DataCellUpdateReply::kCell64FieldNumber;
#endif  // !_MSC_VER

DataCellUpdateReply::DataCellUpdateReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataCellUpdateReply::InitAsDefaultInstance() {
  cell32_ = const_cast< ::Packet::DataCell*>(&::Packet::DataCell::default_instance());
  cell64_ = const_cast< ::Packet::Data64Cell*>(&::Packet::Data64Cell::default_instance());
}

DataCellUpdateReply::DataCellUpdateReply(const DataCellUpdateReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataCellUpdateReply::SharedCtor() {
  _cached_size_ = 0;
  cell32_ = NULL;
  cell64_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataCellUpdateReply::~DataCellUpdateReply() {
  SharedDtor();
}

void DataCellUpdateReply::SharedDtor() {
  if (this != default_instance_) {
    delete cell32_;
    delete cell64_;
  }
}

void DataCellUpdateReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataCellUpdateReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataCellUpdateReply_descriptor_;
}

const DataCellUpdateReply& DataCellUpdateReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataCellPacket_2eproto();
  return *default_instance_;
}

DataCellUpdateReply* DataCellUpdateReply::default_instance_ = NULL;

DataCellUpdateReply* DataCellUpdateReply::New() const {
  return new DataCellUpdateReply;
}

void DataCellUpdateReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cell32()) {
      if (cell32_ != NULL) cell32_->::Packet::DataCell::Clear();
    }
    if (has_cell64()) {
      if (cell64_ != NULL) cell64_->::Packet::Data64Cell::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool DataCellUpdateReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Packet.DataCell cell32 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cell32()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cell64;
        break;
      }

      // optional .Packet.Data64Cell cell64 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell64:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cell64()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void DataCellUpdateReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Packet.DataCell cell32 = 1;
  if (has_cell32()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cell32(), output);
  }

  // optional .Packet.Data64Cell cell64 = 2;
  if (has_cell64()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cell64(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataCellUpdateReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Packet.DataCell cell32 = 1;
  if (has_cell32()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cell32(), target);
  }

  // optional .Packet.Data64Cell cell64 = 2;
  if (has_cell64()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cell64(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataCellUpdateReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Packet.DataCell cell32 = 1;
    if (has_cell32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cell32());
    }

    // optional .Packet.Data64Cell cell64 = 2;
    if (has_cell64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cell64());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataCellUpdateReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataCellUpdateReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataCellUpdateReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void DataCellUpdateReply::MergeFrom(const DataCellUpdateReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cell32()) {
      mutable_cell32()->::Packet::DataCell::MergeFrom(from.cell32());
    }
    if (from.has_cell64()) {
      mutable_cell64()->::Packet::Data64Cell::MergeFrom(from.cell64());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void DataCellUpdateReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void DataCellUpdateReply::CopyFrom(const DataCellUpdateReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool DataCellUpdateReply::IsInitialized() const {

  if (has_cell32()) {
    if (!this->cell32().IsInitialized()) return false;
  }
  if (has_cell64()) {
    if (!this->cell64().IsInitialized()) return false;
  }
  return true;
}

void DataCellUpdateReply::SetInitialized() {

  if (has_cell32()) {
    this->mutable_cell32()->SetInitialized();
  }
  if (has_cell64()) {
    this->mutable_cell64()->SetInitialized();
  }
  return;
}

void DataCellUpdateReply::Swap(DataCellUpdateReply* other) {
  if (other != this) {
    std::swap(cell32_, other->cell32_);
    std::swap(cell64_, other->cell64_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata DataCellUpdateReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataCellUpdateReply_descriptor_;
  metadata.reflection = DataCellUpdateReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataCell32ListReply::kCellListFieldNumber;
#endif  // !_MSC_VER

DataCell32ListReply::DataCell32ListReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataCell32ListReply::InitAsDefaultInstance() {
}

DataCell32ListReply::DataCell32ListReply(const DataCell32ListReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataCell32ListReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataCell32ListReply::~DataCell32ListReply() {
  SharedDtor();
}

void DataCell32ListReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataCell32ListReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataCell32ListReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataCell32ListReply_descriptor_;
}

const DataCell32ListReply& DataCell32ListReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataCellPacket_2eproto();
  return *default_instance_;
}

DataCell32ListReply* DataCell32ListReply::default_instance_ = NULL;

DataCell32ListReply* DataCell32ListReply::New() const {
  return new DataCell32ListReply;
}

void DataCell32ListReply::Clear() {
  cell_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool DataCell32ListReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.DataCell cell_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cell_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cell_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void DataCell32ListReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.DataCell cell_list = 1;
  for (int i = 0; i < this->cell_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cell_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataCell32ListReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.DataCell cell_list = 1;
  for (int i = 0; i < this->cell_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cell_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataCell32ListReply::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.DataCell cell_list = 1;
  total_size += 1 * this->cell_list_size();
  for (int i = 0; i < this->cell_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cell_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataCell32ListReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataCell32ListReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataCell32ListReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void DataCell32ListReply::MergeFrom(const DataCell32ListReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  cell_list_.MergeFrom(from.cell_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void DataCell32ListReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void DataCell32ListReply::CopyFrom(const DataCell32ListReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool DataCell32ListReply::IsInitialized() const {

  for (int i = 0; i < cell_list_size(); i++) {
    if (!this->cell_list(i).IsInitialized()) return false;
  }
  return true;
}

void DataCell32ListReply::SetInitialized() {

  for (int i = 0; i < cell_list_size(); i++) {
    this->mutable_cell_list(i)->SetInitialized();
  }
  return;
}

void DataCell32ListReply::Swap(DataCell32ListReply* other) {
  if (other != this) {
    cell_list_.Swap(&other->cell_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata DataCell32ListReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataCell32ListReply_descriptor_;
  metadata.reflection = DataCell32ListReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataCell64ListReply::kCellListFieldNumber;
#endif  // !_MSC_VER

DataCell64ListReply::DataCell64ListReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataCell64ListReply::InitAsDefaultInstance() {
}

DataCell64ListReply::DataCell64ListReply(const DataCell64ListReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataCell64ListReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataCell64ListReply::~DataCell64ListReply() {
  SharedDtor();
}

void DataCell64ListReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataCell64ListReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataCell64ListReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataCell64ListReply_descriptor_;
}

const DataCell64ListReply& DataCell64ListReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataCellPacket_2eproto();
  return *default_instance_;
}

DataCell64ListReply* DataCell64ListReply::default_instance_ = NULL;

DataCell64ListReply* DataCell64ListReply::New() const {
  return new DataCell64ListReply;
}

void DataCell64ListReply::Clear() {
  cell_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool DataCell64ListReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.Data64Cell cell_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cell_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cell_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void DataCell64ListReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.Data64Cell cell_list = 1;
  for (int i = 0; i < this->cell_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cell_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataCell64ListReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.Data64Cell cell_list = 1;
  for (int i = 0; i < this->cell_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cell_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataCell64ListReply::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.Data64Cell cell_list = 1;
  total_size += 1 * this->cell_list_size();
  for (int i = 0; i < this->cell_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cell_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataCell64ListReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataCell64ListReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataCell64ListReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void DataCell64ListReply::MergeFrom(const DataCell64ListReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  cell_list_.MergeFrom(from.cell_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void DataCell64ListReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void DataCell64ListReply::CopyFrom(const DataCell64ListReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool DataCell64ListReply::IsInitialized() const {

  for (int i = 0; i < cell_list_size(); i++) {
    if (!this->cell_list(i).IsInitialized()) return false;
  }
  return true;
}

void DataCell64ListReply::SetInitialized() {

  for (int i = 0; i < cell_list_size(); i++) {
    this->mutable_cell_list(i)->SetInitialized();
  }
  return;
}

void DataCell64ListReply::Swap(DataCell64ListReply* other) {
  if (other != this) {
    cell_list_.Swap(&other->cell_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata DataCell64ListReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataCell64ListReply_descriptor_;
  metadata.reflection = DataCell64ListReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleDataCell32ListReply::kTypeFieldNumber;
const int SingleDataCell32ListReply::kCellListFieldNumber;
#endif  // !_MSC_VER

SingleDataCell32ListReply::SingleDataCell32ListReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleDataCell32ListReply::InitAsDefaultInstance() {
}

SingleDataCell32ListReply::SingleDataCell32ListReply(const SingleDataCell32ListReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleDataCell32ListReply::SharedCtor() {
  _cached_size_ = 0;
  type_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleDataCell32ListReply::~SingleDataCell32ListReply() {
  SharedDtor();
}

void SingleDataCell32ListReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SingleDataCell32ListReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleDataCell32ListReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleDataCell32ListReply_descriptor_;
}

const SingleDataCell32ListReply& SingleDataCell32ListReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataCellPacket_2eproto();
  return *default_instance_;
}

SingleDataCell32ListReply* SingleDataCell32ListReply::default_instance_ = NULL;

SingleDataCell32ListReply* SingleDataCell32ListReply::New() const {
  return new SingleDataCell32ListReply;
}

void SingleDataCell32ListReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = -1;
  }
  cell_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SingleDataCell32ListReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.CellLogicType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::CellLogicType_IsValid(value)) {
            set_type(static_cast< ::Packet::CellLogicType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cell_list;
        break;
      }

      // repeated .Packet.DataCell cell_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cell_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cell_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SingleDataCell32ListReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.CellLogicType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .Packet.DataCell cell_list = 2;
  for (int i = 0; i < this->cell_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cell_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleDataCell32ListReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.CellLogicType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .Packet.DataCell cell_list = 2;
  for (int i = 0; i < this->cell_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cell_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleDataCell32ListReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.CellLogicType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .Packet.DataCell cell_list = 2;
  total_size += 1 * this->cell_list_size();
  for (int i = 0; i < this->cell_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cell_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleDataCell32ListReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleDataCell32ListReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleDataCell32ListReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SingleDataCell32ListReply::MergeFrom(const SingleDataCell32ListReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  cell_list_.MergeFrom(from.cell_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SingleDataCell32ListReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SingleDataCell32ListReply::CopyFrom(const SingleDataCell32ListReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SingleDataCell32ListReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < cell_list_size(); i++) {
    if (!this->cell_list(i).IsInitialized()) return false;
  }
  return true;
}

void SingleDataCell32ListReply::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  for (int i = 0; i < cell_list_size(); i++) {
    this->mutable_cell_list(i)->SetInitialized();
  }
  return;
}

void SingleDataCell32ListReply::Swap(SingleDataCell32ListReply* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    cell_list_.Swap(&other->cell_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SingleDataCell32ListReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleDataCell32ListReply_descriptor_;
  metadata.reflection = SingleDataCell32ListReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleDataCell64ListReply::kTypeFieldNumber;
const int SingleDataCell64ListReply::kCellListFieldNumber;
#endif  // !_MSC_VER

SingleDataCell64ListReply::SingleDataCell64ListReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleDataCell64ListReply::InitAsDefaultInstance() {
}

SingleDataCell64ListReply::SingleDataCell64ListReply(const SingleDataCell64ListReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleDataCell64ListReply::SharedCtor() {
  _cached_size_ = 0;
  type_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleDataCell64ListReply::~SingleDataCell64ListReply() {
  SharedDtor();
}

void SingleDataCell64ListReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SingleDataCell64ListReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleDataCell64ListReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleDataCell64ListReply_descriptor_;
}

const SingleDataCell64ListReply& SingleDataCell64ListReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DataCellPacket_2eproto();
  return *default_instance_;
}

SingleDataCell64ListReply* SingleDataCell64ListReply::default_instance_ = NULL;

SingleDataCell64ListReply* SingleDataCell64ListReply::New() const {
  return new SingleDataCell64ListReply;
}

void SingleDataCell64ListReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = -1;
  }
  cell_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SingleDataCell64ListReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.Cell64LogicType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::Cell64LogicType_IsValid(value)) {
            set_type(static_cast< ::Packet::Cell64LogicType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cell_list;
        break;
      }

      // repeated .Packet.Data64Cell cell_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cell_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cell_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SingleDataCell64ListReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.Cell64LogicType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .Packet.Data64Cell cell_list = 2;
  for (int i = 0; i < this->cell_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cell_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleDataCell64ListReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.Cell64LogicType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .Packet.Data64Cell cell_list = 2;
  for (int i = 0; i < this->cell_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cell_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleDataCell64ListReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.Cell64LogicType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .Packet.Data64Cell cell_list = 2;
  total_size += 1 * this->cell_list_size();
  for (int i = 0; i < this->cell_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cell_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleDataCell64ListReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleDataCell64ListReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleDataCell64ListReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SingleDataCell64ListReply::MergeFrom(const SingleDataCell64ListReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  cell_list_.MergeFrom(from.cell_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SingleDataCell64ListReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SingleDataCell64ListReply::CopyFrom(const SingleDataCell64ListReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SingleDataCell64ListReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < cell_list_size(); i++) {
    if (!this->cell_list(i).IsInitialized()) return false;
  }
  return true;
}

void SingleDataCell64ListReply::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  for (int i = 0; i < cell_list_size(); i++) {
    this->mutable_cell_list(i)->SetInitialized();
  }
  return;
}

void SingleDataCell64ListReply::Swap(SingleDataCell64ListReply* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    cell_list_.Swap(&other->cell_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SingleDataCell64ListReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleDataCell64ListReply_descriptor_;
  metadata.reflection = SingleDataCell64ListReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

// @@protoc_insertion_point(global_scope)
