// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CreatePlayerPacket.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CreatePlayerPacket.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Packet {

namespace {

const ::google::protobuf::Descriptor* CreatePlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreatePlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreatePlayerReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreatePlayerReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CreatePlayerReply_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ChangeHair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeHair_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CreatePlayerPacket_2eproto() {
  protobuf_AddDesc_CreatePlayerPacket_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CreatePlayerPacket.proto");
  GOOGLE_CHECK(file != NULL);
  CreatePlayer_descriptor_ = file->message_type(0);
  static const int CreatePlayer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayer, player_actor_base_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayer, camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayer, hair_),
  };
  CreatePlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreatePlayer_descriptor_,
      CreatePlayer::default_instance_,
      CreatePlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreatePlayer));
  CreatePlayerReply_descriptor_ = file->message_type(1);
  static const int CreatePlayerReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayerReply, result_),
  };
  CreatePlayerReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreatePlayerReply_descriptor_,
      CreatePlayerReply::default_instance_,
      CreatePlayerReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayerReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePlayerReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreatePlayerReply));
  CreatePlayerReply_Result_descriptor_ = CreatePlayerReply_descriptor_->enum_type(0);
  ChangeHair_descriptor_ = file->message_type(2);
  static const int ChangeHair_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeHair, new_hair_),
  };
  ChangeHair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeHair_descriptor_,
      ChangeHair::default_instance_,
      ChangeHair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeHair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeHair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeHair));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CreatePlayerPacket_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreatePlayer_descriptor_, &CreatePlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreatePlayerReply_descriptor_, &CreatePlayerReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeHair_descriptor_, &ChangeHair::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CreatePlayerPacket_2eproto() {
  delete CreatePlayer::default_instance_;
  delete CreatePlayer_reflection_;
  delete CreatePlayerReply::default_instance_;
  delete CreatePlayerReply_reflection_;
  delete ChangeHair::default_instance_;
  delete ChangeHair_reflection_;
}

void protobuf_AddDesc_CreatePlayerPacket_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Packet::protobuf_AddDesc_AllPacketEnum_2eproto();
  ::Packet::protobuf_AddDesc_PlayerBasicInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030CreatePlayerPacket.proto\022\006Packet\032\023AllP"
    "acketEnum.proto\032\025PlayerBasicInfo.proto\"d"
    "\n\014CreatePlayer\022\034\n\024player_actor_base_id\030\001"
    " \002(\005\022\014\n\004name\030\002 \002(\t\022\032\n\004camp\030\003 \002(\0162\014.Packe"
    "t.Camp\022\014\n\004hair\030\004 \002(\005\"\377\001\n\021CreatePlayerRep"
    "ly\0220\n\006result\030\001 \002(\0162 .Packet.CreatePlayer"
    "Reply.Result\"\267\001\n\006Result\022\013\n\007SUCCESS\020\000\022\023\n\017"
    "DUMPLICATE_NAME\020\001\022\024\n\020MAX_PLAYER_COUNT\020\002\022"
    "\020\n\014INVALID_RACE\020\003\022\026\n\022INVALID_PROFESSION\020"
    "\004\022\022\n\016INVALID_GENDER\020\005\022\020\n\014INVALID_NAME\020\006\022"
    "\022\n\016INVALID_CONFIG\020\007\022\021\n\rUNKNOWN_ERROR\020d\"\036"
    "\n\nChangeHair\022\020\n\010new_hair\030\001 \002(\005", 470);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CreatePlayerPacket.proto", &protobuf_RegisterTypes);
  CreatePlayer::default_instance_ = new CreatePlayer();
  CreatePlayerReply::default_instance_ = new CreatePlayerReply();
  ChangeHair::default_instance_ = new ChangeHair();
  CreatePlayer::default_instance_->InitAsDefaultInstance();
  CreatePlayerReply::default_instance_->InitAsDefaultInstance();
  ChangeHair::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CreatePlayerPacket_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CreatePlayerPacket_2eproto {
  StaticDescriptorInitializer_CreatePlayerPacket_2eproto() {
    protobuf_AddDesc_CreatePlayerPacket_2eproto();
  }
} static_descriptor_initializer_CreatePlayerPacket_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CreatePlayer::kPlayerActorBaseIdFieldNumber;
const int CreatePlayer::kNameFieldNumber;
const int CreatePlayer::kCampFieldNumber;
const int CreatePlayer::kHairFieldNumber;
#endif  // !_MSC_VER

CreatePlayer::CreatePlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreatePlayer::InitAsDefaultInstance() {
}

CreatePlayer::CreatePlayer(const CreatePlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreatePlayer::SharedCtor() {
  _cached_size_ = 0;
  player_actor_base_id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  camp_ = 0;
  hair_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreatePlayer::~CreatePlayer() {
  SharedDtor();
}

void CreatePlayer::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CreatePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreatePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreatePlayer_descriptor_;
}

const CreatePlayer& CreatePlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CreatePlayerPacket_2eproto();
  return *default_instance_;
}

CreatePlayer* CreatePlayer::default_instance_ = NULL;

CreatePlayer* CreatePlayer::New() const {
  return new CreatePlayer;
}

void CreatePlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_actor_base_id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    camp_ = 0;
    hair_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool CreatePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 player_actor_base_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_actor_base_id_)));
          set_has_player_actor_base_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_camp;
        break;
      }

      // required .Packet.Camp camp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::Camp_IsValid(value)) {
            set_camp(static_cast< ::Packet::Camp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hair;
        break;
      }

      // required int32 hair = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hair_)));
          set_has_hair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void CreatePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 player_actor_base_id = 1;
  if (has_player_actor_base_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_actor_base_id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required .Packet.Camp camp = 3;
  if (has_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->camp(), output);
  }

  // required int32 hair = 4;
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hair(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreatePlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 player_actor_base_id = 1;
  if (has_player_actor_base_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_actor_base_id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required .Packet.Camp camp = 3;
  if (has_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->camp(), target);
  }

  // required int32 hair = 4;
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hair(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreatePlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 player_actor_base_id = 1;
    if (has_player_actor_base_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_actor_base_id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .Packet.Camp camp = 3;
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->camp());
    }

    // required int32 hair = 4;
    if (has_hair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hair());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreatePlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreatePlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreatePlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void CreatePlayer::MergeFrom(const CreatePlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_actor_base_id()) {
      set_player_actor_base_id(from.player_actor_base_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_camp()) {
      set_camp(from.camp());
    }
    if (from.has_hair()) {
      set_hair(from.hair());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void CreatePlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void CreatePlayer::CopyFrom(const CreatePlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool CreatePlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CreatePlayer::SetInitialized() {
  _has_bits_[0] |= 0x0000000f;

  return;
}

void CreatePlayer::Swap(CreatePlayer* other) {
  if (other != this) {
    std::swap(player_actor_base_id_, other->player_actor_base_id_);
    std::swap(name_, other->name_);
    std::swap(camp_, other->camp_);
    std::swap(hair_, other->hair_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata CreatePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreatePlayer_descriptor_;
  metadata.reflection = CreatePlayer_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CreatePlayerReply_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreatePlayerReply_Result_descriptor_;
}
bool CreatePlayerReply_Result_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 100:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CreatePlayerReply_Result CreatePlayerReply::SUCCESS;
const CreatePlayerReply_Result CreatePlayerReply::DUMPLICATE_NAME;
const CreatePlayerReply_Result CreatePlayerReply::MAX_PLAYER_COUNT;
const CreatePlayerReply_Result CreatePlayerReply::INVALID_RACE;
const CreatePlayerReply_Result CreatePlayerReply::INVALID_PROFESSION;
const CreatePlayerReply_Result CreatePlayerReply::INVALID_GENDER;
const CreatePlayerReply_Result CreatePlayerReply::INVALID_NAME;
const CreatePlayerReply_Result CreatePlayerReply::INVALID_CONFIG;
const CreatePlayerReply_Result CreatePlayerReply::UNKNOWN_ERROR;
const CreatePlayerReply_Result CreatePlayerReply::Result_MIN;
const CreatePlayerReply_Result CreatePlayerReply::Result_MAX;
const int CreatePlayerReply::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CreatePlayerReply::kResultFieldNumber;
#endif  // !_MSC_VER

CreatePlayerReply::CreatePlayerReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreatePlayerReply::InitAsDefaultInstance() {
}

CreatePlayerReply::CreatePlayerReply(const CreatePlayerReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreatePlayerReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreatePlayerReply::~CreatePlayerReply() {
  SharedDtor();
}

void CreatePlayerReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreatePlayerReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreatePlayerReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreatePlayerReply_descriptor_;
}

const CreatePlayerReply& CreatePlayerReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CreatePlayerPacket_2eproto();
  return *default_instance_;
}

CreatePlayerReply* CreatePlayerReply::default_instance_ = NULL;

CreatePlayerReply* CreatePlayerReply::New() const {
  return new CreatePlayerReply;
}

void CreatePlayerReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool CreatePlayerReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.CreatePlayerReply.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::CreatePlayerReply_Result_IsValid(value)) {
            set_result(static_cast< ::Packet::CreatePlayerReply_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void CreatePlayerReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.CreatePlayerReply.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreatePlayerReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.CreatePlayerReply.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreatePlayerReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.CreatePlayerReply.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreatePlayerReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreatePlayerReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreatePlayerReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void CreatePlayerReply::MergeFrom(const CreatePlayerReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void CreatePlayerReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void CreatePlayerReply::CopyFrom(const CreatePlayerReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool CreatePlayerReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CreatePlayerReply::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void CreatePlayerReply::Swap(CreatePlayerReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata CreatePlayerReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreatePlayerReply_descriptor_;
  metadata.reflection = CreatePlayerReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeHair::kNewHairFieldNumber;
#endif  // !_MSC_VER

ChangeHair::ChangeHair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeHair::InitAsDefaultInstance() {
}

ChangeHair::ChangeHair(const ChangeHair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeHair::SharedCtor() {
  _cached_size_ = 0;
  new_hair_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeHair::~ChangeHair() {
  SharedDtor();
}

void ChangeHair::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeHair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeHair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeHair_descriptor_;
}

const ChangeHair& ChangeHair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CreatePlayerPacket_2eproto();
  return *default_instance_;
}

ChangeHair* ChangeHair::default_instance_ = NULL;

ChangeHair* ChangeHair::New() const {
  return new ChangeHair;
}

void ChangeHair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    new_hair_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ChangeHair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 new_hair = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_hair_)));
          set_has_new_hair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ChangeHair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 new_hair = 1;
  if (has_new_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->new_hair(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeHair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 new_hair = 1;
  if (has_new_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->new_hair(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeHair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 new_hair = 1;
    if (has_new_hair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_hair());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeHair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeHair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeHair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ChangeHair::MergeFrom(const ChangeHair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_new_hair()) {
      set_new_hair(from.new_hair());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ChangeHair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ChangeHair::CopyFrom(const ChangeHair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ChangeHair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ChangeHair::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void ChangeHair::Swap(ChangeHair* other) {
  if (other != this) {
    std::swap(new_hair_, other->new_hair_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ChangeHair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeHair_descriptor_;
  metadata.reflection = ChangeHair_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

// @@protoc_insertion_point(global_scope)
