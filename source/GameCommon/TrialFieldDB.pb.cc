// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TrialFieldDB.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TrialFieldDB.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DB {

namespace {

const ::google::protobuf::Descriptor* TrialTarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrialTarget_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrialPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrialPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrialTargetFormation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrialTargetFormation_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerTrialInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerTrialInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerTowerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerTowerInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TrialFieldDB_2eproto() {
  protobuf_AddDesc_TrialFieldDB_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TrialFieldDB.proto");
  GOOGLE_CHECK(file != NULL);
  TrialTarget_descriptor_ = file->message_type(0);
  static const int TrialTarget_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialTarget, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialTarget, actors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialTarget, passed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialTarget, posid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialTarget, rewarded_),
  };
  TrialTarget_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrialTarget_descriptor_,
      TrialTarget::default_instance_,
      TrialTarget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialTarget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialTarget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrialTarget));
  TrialPlayerInfo_descriptor_ = file->message_type(1);
  static const int TrialPlayerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialPlayerInfo, actor_config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialPlayerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialPlayerInfo, guid_),
  };
  TrialPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrialPlayerInfo_descriptor_,
      TrialPlayerInfo::default_instance_,
      TrialPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrialPlayerInfo));
  TrialTargetFormation_descriptor_ = file->message_type(2);
  static const int TrialTargetFormation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialTargetFormation, targets_),
  };
  TrialTargetFormation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrialTargetFormation_descriptor_,
      TrialTargetFormation::default_instance_,
      TrialTargetFormation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialTargetFormation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialTargetFormation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrialTargetFormation));
  PlayerTrialInfo_descriptor_ = file->message_type(3);
  static const int PlayerTrialInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTrialInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTrialInfo, target_),
  };
  PlayerTrialInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerTrialInfo_descriptor_,
      PlayerTrialInfo::default_instance_,
      PlayerTrialInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTrialInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTrialInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerTrialInfo));
  PlayerTowerInfo_descriptor_ = file->message_type(4);
  static const int PlayerTowerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTowerInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTowerInfo, tower_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTowerInfo, tower_time_),
  };
  PlayerTowerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerTowerInfo_descriptor_,
      PlayerTowerInfo::default_instance_,
      PlayerTowerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTowerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTowerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerTowerInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TrialFieldDB_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrialTarget_descriptor_, &TrialTarget::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrialPlayerInfo_descriptor_, &TrialPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrialTargetFormation_descriptor_, &TrialTargetFormation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerTrialInfo_descriptor_, &PlayerTrialInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerTowerInfo_descriptor_, &PlayerTowerInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TrialFieldDB_2eproto() {
  delete TrialTarget::default_instance_;
  delete TrialTarget_reflection_;
  delete TrialPlayerInfo::default_instance_;
  delete TrialPlayerInfo_reflection_;
  delete TrialTargetFormation::default_instance_;
  delete TrialTargetFormation_reflection_;
  delete PlayerTrialInfo::default_instance_;
  delete PlayerTrialInfo_reflection_;
  delete PlayerTowerInfo::default_instance_;
  delete PlayerTowerInfo_reflection_;
}

void protobuf_AddDesc_TrialFieldDB_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Packet::protobuf_AddDesc_ProtoBufOption_2eproto();
  ::Packet::protobuf_AddDesc_PlayerBasicInfo_2eproto();
  ::Packet::protobuf_AddDesc_ActorBasicInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022TrialFieldDB.proto\022\002DB\032\024ProtoBufOption"
    ".proto\032\025PlayerBasicInfo.proto\032\024ActorBasi"
    "cInfo.proto\"\212\001\n\013TrialTarget\022#\n\006player\030\001 "
    "\002(\0132\023.DB.TrialPlayerInfo\022%\n\006actors\030\002 \003(\013"
    "2\025.Packet.ActorFullInfo\022\016\n\006passed\030\003 \002(\010\022"
    "\r\n\005posid\030\004 \002(\005\022\020\n\010rewarded\030\005 \002(\010\"F\n\017Tria"
    "lPlayerInfo\022\027\n\017actor_config_id\030\001 \002(\005\022\014\n\004"
    "name\030\002 \002(\t\022\014\n\004guid\030\003 \002(\006\"8\n\024TrialTargetF"
    "ormation\022 \n\007targets\030\001 \003(\0132\017.DB.TrialTarg"
    "et\"S\n\017PlayerTrialInfo\022\014\n\004guid\030\001 \002(\006\0222\n\006t"
    "arget\030\002 \002(\0132\030.DB.TrialTargetFormationB\010\342"
    "\363\030\004blob\"H\n\017PlayerTowerInfo\022\014\n\004guid\030\001 \002(\006"
    "\022\023\n\013tower_level\030\002 \002(\005\022\022\n\ntower_time\030\003 \002("
    "\005", 521);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TrialFieldDB.proto", &protobuf_RegisterTypes);
  TrialTarget::default_instance_ = new TrialTarget();
  TrialPlayerInfo::default_instance_ = new TrialPlayerInfo();
  TrialTargetFormation::default_instance_ = new TrialTargetFormation();
  PlayerTrialInfo::default_instance_ = new PlayerTrialInfo();
  PlayerTowerInfo::default_instance_ = new PlayerTowerInfo();
  TrialTarget::default_instance_->InitAsDefaultInstance();
  TrialPlayerInfo::default_instance_->InitAsDefaultInstance();
  TrialTargetFormation::default_instance_->InitAsDefaultInstance();
  PlayerTrialInfo::default_instance_->InitAsDefaultInstance();
  PlayerTowerInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TrialFieldDB_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TrialFieldDB_2eproto {
  StaticDescriptorInitializer_TrialFieldDB_2eproto() {
    protobuf_AddDesc_TrialFieldDB_2eproto();
  }
} static_descriptor_initializer_TrialFieldDB_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TrialTarget::kPlayerFieldNumber;
const int TrialTarget::kActorsFieldNumber;
const int TrialTarget::kPassedFieldNumber;
const int TrialTarget::kPosidFieldNumber;
const int TrialTarget::kRewardedFieldNumber;
#endif  // !_MSC_VER

TrialTarget::TrialTarget()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrialTarget::InitAsDefaultInstance() {
  player_ = const_cast< ::DB::TrialPlayerInfo*>(&::DB::TrialPlayerInfo::default_instance());
}

TrialTarget::TrialTarget(const TrialTarget& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrialTarget::SharedCtor() {
  _cached_size_ = 0;
  player_ = NULL;
  passed_ = false;
  posid_ = 0;
  rewarded_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrialTarget::~TrialTarget() {
  SharedDtor();
}

void TrialTarget::SharedDtor() {
  if (this != default_instance_) {
    delete player_;
  }
}

void TrialTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrialTarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrialTarget_descriptor_;
}

const TrialTarget& TrialTarget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TrialFieldDB_2eproto();
  return *default_instance_;
}

TrialTarget* TrialTarget::default_instance_ = NULL;

TrialTarget* TrialTarget::New() const {
  return new TrialTarget;
}

void TrialTarget::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player()) {
      if (player_ != NULL) player_->::DB::TrialPlayerInfo::Clear();
    }
    passed_ = false;
    posid_ = 0;
    rewarded_ = false;
  }
  actors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool TrialTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DB.TrialPlayerInfo player = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_actors;
        break;
      }

      // repeated .Packet.ActorFullInfo actors = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_actors;
        if (input->ExpectTag(24)) goto parse_passed;
        break;
      }

      // required bool passed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_passed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &passed_)));
          set_has_passed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_posid;
        break;
      }

      // required int32 posid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posid_)));
          set_has_posid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rewarded;
        break;
      }

      // required bool rewarded = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewarded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rewarded_)));
          set_has_rewarded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void TrialTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DB.TrialPlayerInfo player = 1;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player(), output);
  }

  // repeated .Packet.ActorFullInfo actors = 2;
  for (int i = 0; i < this->actors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->actors(i), output);
  }

  // required bool passed = 3;
  if (has_passed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->passed(), output);
  }

  // required int32 posid = 4;
  if (has_posid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->posid(), output);
  }

  // required bool rewarded = 5;
  if (has_rewarded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->rewarded(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrialTarget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DB.TrialPlayerInfo player = 1;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player(), target);
  }

  // repeated .Packet.ActorFullInfo actors = 2;
  for (int i = 0; i < this->actors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->actors(i), target);
  }

  // required bool passed = 3;
  if (has_passed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->passed(), target);
  }

  // required int32 posid = 4;
  if (has_posid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->posid(), target);
  }

  // required bool rewarded = 5;
  if (has_rewarded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->rewarded(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrialTarget::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DB.TrialPlayerInfo player = 1;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player());
    }

    // required bool passed = 3;
    if (has_passed()) {
      total_size += 1 + 1;
    }

    // required int32 posid = 4;
    if (has_posid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posid());
    }

    // required bool rewarded = 5;
    if (has_rewarded()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Packet.ActorFullInfo actors = 2;
  total_size += 1 * this->actors_size();
  for (int i = 0; i < this->actors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actors(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrialTarget::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrialTarget* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrialTarget*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void TrialTarget::MergeFrom(const TrialTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  actors_.MergeFrom(from.actors_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player()) {
      mutable_player()->::DB::TrialPlayerInfo::MergeFrom(from.player());
    }
    if (from.has_passed()) {
      set_passed(from.passed());
    }
    if (from.has_posid()) {
      set_posid(from.posid());
    }
    if (from.has_rewarded()) {
      set_rewarded(from.rewarded());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void TrialTarget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void TrialTarget::CopyFrom(const TrialTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool TrialTarget::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;

  if (has_player()) {
    if (!this->player().IsInitialized()) return false;
  }
  for (int i = 0; i < actors_size(); i++) {
    if (!this->actors(i).IsInitialized()) return false;
  }
  return true;
}

void TrialTarget::SetInitialized() {
  _has_bits_[0] |= 0x0000001d;

  if (has_player()) {
    this->mutable_player()->SetInitialized();
  }
  for (int i = 0; i < actors_size(); i++) {
    this->mutable_actors(i)->SetInitialized();
  }
  return;
}

void TrialTarget::Swap(TrialTarget* other) {
  if (other != this) {
    std::swap(player_, other->player_);
    actors_.Swap(&other->actors_);
    std::swap(passed_, other->passed_);
    std::swap(posid_, other->posid_);
    std::swap(rewarded_, other->rewarded_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata TrialTarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrialTarget_descriptor_;
  metadata.reflection = TrialTarget_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrialPlayerInfo::kActorConfigIdFieldNumber;
const int TrialPlayerInfo::kNameFieldNumber;
const int TrialPlayerInfo::kGuidFieldNumber;
#endif  // !_MSC_VER

TrialPlayerInfo::TrialPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrialPlayerInfo::InitAsDefaultInstance() {
}

TrialPlayerInfo::TrialPlayerInfo(const TrialPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrialPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  actor_config_id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrialPlayerInfo::~TrialPlayerInfo() {
  SharedDtor();
}

void TrialPlayerInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TrialPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrialPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrialPlayerInfo_descriptor_;
}

const TrialPlayerInfo& TrialPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TrialFieldDB_2eproto();
  return *default_instance_;
}

TrialPlayerInfo* TrialPlayerInfo::default_instance_ = NULL;

TrialPlayerInfo* TrialPlayerInfo::New() const {
  return new TrialPlayerInfo;
}

void TrialPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    actor_config_id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool TrialPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 actor_config_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actor_config_id_)));
          set_has_actor_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_guid;
        break;
      }

      // required fixed64 guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void TrialPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 actor_config_id = 1;
  if (has_actor_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->actor_config_id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required fixed64 guid = 3;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrialPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 actor_config_id = 1;
  if (has_actor_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->actor_config_id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required fixed64 guid = 3;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrialPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 actor_config_id = 1;
    if (has_actor_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actor_config_id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required fixed64 guid = 3;
    if (has_guid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrialPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrialPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrialPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void TrialPlayerInfo::MergeFrom(const TrialPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actor_config_id()) {
      set_actor_config_id(from.actor_config_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void TrialPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void TrialPlayerInfo::CopyFrom(const TrialPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool TrialPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TrialPlayerInfo::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  return;
}

void TrialPlayerInfo::Swap(TrialPlayerInfo* other) {
  if (other != this) {
    std::swap(actor_config_id_, other->actor_config_id_);
    std::swap(name_, other->name_);
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata TrialPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrialPlayerInfo_descriptor_;
  metadata.reflection = TrialPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrialTargetFormation::kTargetsFieldNumber;
#endif  // !_MSC_VER

TrialTargetFormation::TrialTargetFormation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrialTargetFormation::InitAsDefaultInstance() {
}

TrialTargetFormation::TrialTargetFormation(const TrialTargetFormation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrialTargetFormation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrialTargetFormation::~TrialTargetFormation() {
  SharedDtor();
}

void TrialTargetFormation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrialTargetFormation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrialTargetFormation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrialTargetFormation_descriptor_;
}

const TrialTargetFormation& TrialTargetFormation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TrialFieldDB_2eproto();
  return *default_instance_;
}

TrialTargetFormation* TrialTargetFormation::default_instance_ = NULL;

TrialTargetFormation* TrialTargetFormation::New() const {
  return new TrialTargetFormation;
}

void TrialTargetFormation::Clear() {
  targets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool TrialTargetFormation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DB.TrialTarget targets = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_targets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_targets;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void TrialTargetFormation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .DB.TrialTarget targets = 1;
  for (int i = 0; i < this->targets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->targets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrialTargetFormation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .DB.TrialTarget targets = 1;
  for (int i = 0; i < this->targets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->targets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrialTargetFormation::ByteSize() const {
  int total_size = 0;

  // repeated .DB.TrialTarget targets = 1;
  total_size += 1 * this->targets_size();
  for (int i = 0; i < this->targets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->targets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrialTargetFormation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrialTargetFormation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrialTargetFormation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void TrialTargetFormation::MergeFrom(const TrialTargetFormation& from) {
  GOOGLE_CHECK_NE(&from, this);
  targets_.MergeFrom(from.targets_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void TrialTargetFormation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void TrialTargetFormation::CopyFrom(const TrialTargetFormation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool TrialTargetFormation::IsInitialized() const {

  for (int i = 0; i < targets_size(); i++) {
    if (!this->targets(i).IsInitialized()) return false;
  }
  return true;
}

void TrialTargetFormation::SetInitialized() {

  for (int i = 0; i < targets_size(); i++) {
    this->mutable_targets(i)->SetInitialized();
  }
  return;
}

void TrialTargetFormation::Swap(TrialTargetFormation* other) {
  if (other != this) {
    targets_.Swap(&other->targets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata TrialTargetFormation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrialTargetFormation_descriptor_;
  metadata.reflection = TrialTargetFormation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerTrialInfo::kGuidFieldNumber;
const int PlayerTrialInfo::kTargetFieldNumber;
#endif  // !_MSC_VER

PlayerTrialInfo::PlayerTrialInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerTrialInfo::InitAsDefaultInstance() {
  target_ = const_cast< ::DB::TrialTargetFormation*>(&::DB::TrialTargetFormation::default_instance());
}

PlayerTrialInfo::PlayerTrialInfo(const PlayerTrialInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerTrialInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  target_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerTrialInfo::~PlayerTrialInfo() {
  SharedDtor();
}

void PlayerTrialInfo::SharedDtor() {
  if (this != default_instance_) {
    delete target_;
  }
}

void PlayerTrialInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerTrialInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerTrialInfo_descriptor_;
}

const PlayerTrialInfo& PlayerTrialInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TrialFieldDB_2eproto();
  return *default_instance_;
}

PlayerTrialInfo* PlayerTrialInfo::default_instance_ = NULL;

PlayerTrialInfo* PlayerTrialInfo::New() const {
  return new PlayerTrialInfo;
}

void PlayerTrialInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    if (has_target()) {
      if (target_ != NULL) target_->::DB::TrialTargetFormation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerTrialInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_target;
        break;
      }

      // required .DB.TrialTargetFormation target = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerTrialInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required .DB.TrialTargetFormation target = 2;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->target(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerTrialInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required .DB.TrialTargetFormation target = 2;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->target(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerTrialInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required .DB.TrialTargetFormation target = 2;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerTrialInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerTrialInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerTrialInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerTrialInfo::MergeFrom(const PlayerTrialInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_target()) {
      mutable_target()->::DB::TrialTargetFormation::MergeFrom(from.target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerTrialInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerTrialInfo::CopyFrom(const PlayerTrialInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerTrialInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_target()) {
    if (!this->target().IsInitialized()) return false;
  }
  return true;
}

void PlayerTrialInfo::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  if (has_target()) {
    this->mutable_target()->SetInitialized();
  }
  return;
}

void PlayerTrialInfo::Swap(PlayerTrialInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(target_, other->target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerTrialInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerTrialInfo_descriptor_;
  metadata.reflection = PlayerTrialInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerTowerInfo::kGuidFieldNumber;
const int PlayerTowerInfo::kTowerLevelFieldNumber;
const int PlayerTowerInfo::kTowerTimeFieldNumber;
#endif  // !_MSC_VER

PlayerTowerInfo::PlayerTowerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerTowerInfo::InitAsDefaultInstance() {
}

PlayerTowerInfo::PlayerTowerInfo(const PlayerTowerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerTowerInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  tower_level_ = 0;
  tower_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerTowerInfo::~PlayerTowerInfo() {
  SharedDtor();
}

void PlayerTowerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerTowerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerTowerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerTowerInfo_descriptor_;
}

const PlayerTowerInfo& PlayerTowerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TrialFieldDB_2eproto();
  return *default_instance_;
}

PlayerTowerInfo* PlayerTowerInfo::default_instance_ = NULL;

PlayerTowerInfo* PlayerTowerInfo::New() const {
  return new PlayerTowerInfo;
}

void PlayerTowerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    tower_level_ = 0;
    tower_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerTowerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tower_level;
        break;
      }

      // required int32 tower_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tower_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tower_level_)));
          set_has_tower_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tower_time;
        break;
      }

      // required int32 tower_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tower_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tower_time_)));
          set_has_tower_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerTowerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required int32 tower_level = 2;
  if (has_tower_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tower_level(), output);
  }

  // required int32 tower_time = 3;
  if (has_tower_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tower_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerTowerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required int32 tower_level = 2;
  if (has_tower_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tower_level(), target);
  }

  // required int32 tower_time = 3;
  if (has_tower_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tower_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerTowerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required int32 tower_level = 2;
    if (has_tower_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tower_level());
    }

    // required int32 tower_time = 3;
    if (has_tower_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tower_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerTowerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerTowerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerTowerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerTowerInfo::MergeFrom(const PlayerTowerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_tower_level()) {
      set_tower_level(from.tower_level());
    }
    if (from.has_tower_time()) {
      set_tower_time(from.tower_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerTowerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerTowerInfo::CopyFrom(const PlayerTowerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerTowerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PlayerTowerInfo::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  return;
}

void PlayerTowerInfo::Swap(PlayerTowerInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(tower_level_, other->tower_level_);
    std::swap(tower_time_, other->tower_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerTowerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerTowerInfo_descriptor_;
  metadata.reflection = PlayerTowerInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DB

// @@protoc_insertion_point(global_scope)
