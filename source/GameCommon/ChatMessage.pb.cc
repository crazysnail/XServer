// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChatMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ChatMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Packet {

namespace {

const ::google::protobuf::Descriptor* ChatMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrivateChatMessageReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrivateChatMessageReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrivateChatMessageReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrivateChatMessageReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ChatMessage_2eproto() {
  protobuf_AddDesc_ChatMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ChatMessage.proto");
  GOOGLE_CHECK(file != NULL);
  ChatMessage_descriptor_ = file->message_type(0);
  static const int ChatMessage_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, chat_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, target_guid_),
  };
  ChatMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatMessage_descriptor_,
      ChatMessage::default_instance_,
      ChatMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatMessage));
  PrivateChatMessageReq_descriptor_ = file->message_type(1);
  static const int PrivateChatMessageReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateChatMessageReq, target_guid_),
  };
  PrivateChatMessageReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrivateChatMessageReq_descriptor_,
      PrivateChatMessageReq::default_instance_,
      PrivateChatMessageReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateChatMessageReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateChatMessageReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrivateChatMessageReq));
  PrivateChatMessageReply_descriptor_ = file->message_type(2);
  static const int PrivateChatMessageReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateChatMessageReply, playerinfo_),
  };
  PrivateChatMessageReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrivateChatMessageReply_descriptor_,
      PrivateChatMessageReply::default_instance_,
      PrivateChatMessageReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateChatMessageReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateChatMessageReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrivateChatMessageReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ChatMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatMessage_descriptor_, &ChatMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrivateChatMessageReq_descriptor_, &PrivateChatMessageReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrivateChatMessageReply_descriptor_, &PrivateChatMessageReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ChatMessage_2eproto() {
  delete ChatMessage::default_instance_;
  delete ChatMessage_reflection_;
  delete PrivateChatMessageReq::default_instance_;
  delete PrivateChatMessageReq_reflection_;
  delete PrivateChatMessageReply::default_instance_;
  delete PrivateChatMessageReply_reflection_;
}

void protobuf_AddDesc_ChatMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Packet::protobuf_AddDesc_PlayerBasicInfo_2eproto();
  ::Packet::protobuf_AddDesc_ItemAndEquip_2eproto();
  ::Packet::protobuf_AddDesc_AllPacketEnum_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021ChatMessage.proto\022\006Packet\032\025PlayerBasic"
    "Info.proto\032\022ItemAndEquip.proto\032\023AllPacke"
    "tEnum.proto\"\363\001\n\013ChatMessage\022$\n\007channel\030\001"
    " \002(\0162\023.Packet.ChatChannel\022\017\n\007content\030\002 \002"
    "(\014\022\021\n\tchat_time\030\003 \002(\005\022\020\n\010datetime\030\004 \002(\006\022"
    "\014\n\004hair\030\005 \001(\005\022\014\n\004name\030\006 \001(\t\022\032\n\004race\030\007 \001("
    "\0162\014.Packet.Race\022\'\n\nprofession\030\010 \001(\0162\023.Pa"
    "cket.Professions\022\022\n\nchannel_id\030\t \001(\005\022\023\n\013"
    "target_guid\030\n \001(\006\",\n\025PrivateChatMessageR"
    "eq\022\023\n\013target_guid\030\001 \002(\006\"F\n\027PrivateChatMe"
    "ssageReply\022+\n\nplayerinfo\030\001 \001(\0132\027.Packet."
    "PlayerBasicInfo", 455);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ChatMessage.proto", &protobuf_RegisterTypes);
  ChatMessage::default_instance_ = new ChatMessage();
  PrivateChatMessageReq::default_instance_ = new PrivateChatMessageReq();
  PrivateChatMessageReply::default_instance_ = new PrivateChatMessageReply();
  ChatMessage::default_instance_->InitAsDefaultInstance();
  PrivateChatMessageReq::default_instance_->InitAsDefaultInstance();
  PrivateChatMessageReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ChatMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ChatMessage_2eproto {
  StaticDescriptorInitializer_ChatMessage_2eproto() {
    protobuf_AddDesc_ChatMessage_2eproto();
  }
} static_descriptor_initializer_ChatMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ChatMessage::kChannelFieldNumber;
const int ChatMessage::kContentFieldNumber;
const int ChatMessage::kChatTimeFieldNumber;
const int ChatMessage::kDatetimeFieldNumber;
const int ChatMessage::kHairFieldNumber;
const int ChatMessage::kNameFieldNumber;
const int ChatMessage::kRaceFieldNumber;
const int ChatMessage::kProfessionFieldNumber;
const int ChatMessage::kChannelIdFieldNumber;
const int ChatMessage::kTargetGuidFieldNumber;
#endif  // !_MSC_VER

ChatMessage::ChatMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatMessage::InitAsDefaultInstance() {
}

ChatMessage::ChatMessage(const ChatMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatMessage::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chat_time_ = 0;
  datetime_ = GOOGLE_ULONGLONG(0);
  hair_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  race_ = 0;
  profession_ = 0;
  channel_id_ = 0;
  target_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatMessage::~ChatMessage() {
  SharedDtor();
}

void ChatMessage::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ChatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatMessage_descriptor_;
}

const ChatMessage& ChatMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatMessage_2eproto();
  return *default_instance_;
}

ChatMessage* ChatMessage::default_instance_ = NULL;

ChatMessage* ChatMessage::New() const {
  return new ChatMessage;
}

void ChatMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    chat_time_ = 0;
    datetime_ = GOOGLE_ULONGLONG(0);
    hair_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    race_ = 0;
    profession_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    channel_id_ = 0;
    target_guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.ChatChannel channel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::ChatChannel_IsValid(value)) {
            set_channel(static_cast< ::Packet::ChatChannel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // required bytes content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chat_time;
        break;
      }

      // required int32 chat_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chat_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chat_time_)));
          set_has_chat_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_datetime;
        break;
      }

      // required fixed64 datetime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_datetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datetime_)));
          set_has_datetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hair;
        break;
      }

      // optional int32 hair = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hair_)));
          set_has_hair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // optional string name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_race;
        break;
      }

      // optional .Packet.Race race = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_race:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::Race_IsValid(value)) {
            set_race(static_cast< ::Packet::Race >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_profession;
        break;
      }

      // optional .Packet.Professions profession = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::Professions_IsValid(value)) {
            set_profession(static_cast< ::Packet::Professions >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_channel_id;
        break;
      }

      // optional int32 channel_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_target_guid;
        break;
      }

      // optional fixed64 target_guid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_target_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &target_guid_)));
          set_has_target_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.ChatChannel channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->channel(), output);
  }

  // required bytes content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->content(), output);
  }

  // required int32 chat_time = 3;
  if (has_chat_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chat_time(), output);
  }

  // required fixed64 datetime = 4;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->datetime(), output);
  }

  // optional int32 hair = 5;
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hair(), output);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->name(), output);
  }

  // optional .Packet.Race race = 7;
  if (has_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->race(), output);
  }

  // optional .Packet.Professions profession = 8;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->profession(), output);
  }

  // optional int32 channel_id = 9;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->channel_id(), output);
  }

  // optional fixed64 target_guid = 10;
  if (has_target_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(10, this->target_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.ChatChannel channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->channel(), target);
  }

  // required bytes content = 2;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->content(), target);
  }

  // required int32 chat_time = 3;
  if (has_chat_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chat_time(), target);
  }

  // required fixed64 datetime = 4;
  if (has_datetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->datetime(), target);
  }

  // optional int32 hair = 5;
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hair(), target);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // optional .Packet.Race race = 7;
  if (has_race()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->race(), target);
  }

  // optional .Packet.Professions profession = 8;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->profession(), target);
  }

  // optional int32 channel_id = 9;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->channel_id(), target);
  }

  // optional fixed64 target_guid = 10;
  if (has_target_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(10, this->target_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.ChatChannel channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel());
    }

    // required bytes content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // required int32 chat_time = 3;
    if (has_chat_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chat_time());
    }

    // required fixed64 datetime = 4;
    if (has_datetime()) {
      total_size += 1 + 8;
    }

    // optional int32 hair = 5;
    if (has_hair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hair());
    }

    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .Packet.Race race = 7;
    if (has_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->race());
    }

    // optional .Packet.Professions profession = 8;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->profession());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 channel_id = 9;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel_id());
    }

    // optional fixed64 target_guid = 10;
    if (has_target_guid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ChatMessage::MergeFrom(const ChatMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_chat_time()) {
      set_chat_time(from.chat_time());
    }
    if (from.has_datetime()) {
      set_datetime(from.datetime());
    }
    if (from.has_hair()) {
      set_hair(from.hair());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_race()) {
      set_race(from.race());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_target_guid()) {
      set_target_guid(from.target_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ChatMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ChatMessage::CopyFrom(const ChatMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ChatMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ChatMessage::SetInitialized() {
  _has_bits_[0] |= 0x0000000f;

  return;
}

void ChatMessage::Swap(ChatMessage* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(content_, other->content_);
    std::swap(chat_time_, other->chat_time_);
    std::swap(datetime_, other->datetime_);
    std::swap(hair_, other->hair_);
    std::swap(name_, other->name_);
    std::swap(race_, other->race_);
    std::swap(profession_, other->profession_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(target_guid_, other->target_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ChatMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatMessage_descriptor_;
  metadata.reflection = ChatMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrivateChatMessageReq::kTargetGuidFieldNumber;
#endif  // !_MSC_VER

PrivateChatMessageReq::PrivateChatMessageReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrivateChatMessageReq::InitAsDefaultInstance() {
}

PrivateChatMessageReq::PrivateChatMessageReq(const PrivateChatMessageReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrivateChatMessageReq::SharedCtor() {
  _cached_size_ = 0;
  target_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrivateChatMessageReq::~PrivateChatMessageReq() {
  SharedDtor();
}

void PrivateChatMessageReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrivateChatMessageReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrivateChatMessageReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrivateChatMessageReq_descriptor_;
}

const PrivateChatMessageReq& PrivateChatMessageReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatMessage_2eproto();
  return *default_instance_;
}

PrivateChatMessageReq* PrivateChatMessageReq::default_instance_ = NULL;

PrivateChatMessageReq* PrivateChatMessageReq::New() const {
  return new PrivateChatMessageReq;
}

void PrivateChatMessageReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    target_guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PrivateChatMessageReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 target_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &target_guid_)));
          set_has_target_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PrivateChatMessageReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 target_guid = 1;
  if (has_target_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->target_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrivateChatMessageReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 target_guid = 1;
  if (has_target_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->target_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrivateChatMessageReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 target_guid = 1;
    if (has_target_guid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrivateChatMessageReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrivateChatMessageReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrivateChatMessageReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PrivateChatMessageReq::MergeFrom(const PrivateChatMessageReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_guid()) {
      set_target_guid(from.target_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PrivateChatMessageReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PrivateChatMessageReq::CopyFrom(const PrivateChatMessageReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PrivateChatMessageReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PrivateChatMessageReq::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void PrivateChatMessageReq::Swap(PrivateChatMessageReq* other) {
  if (other != this) {
    std::swap(target_guid_, other->target_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PrivateChatMessageReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrivateChatMessageReq_descriptor_;
  metadata.reflection = PrivateChatMessageReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrivateChatMessageReply::kPlayerinfoFieldNumber;
#endif  // !_MSC_VER

PrivateChatMessageReply::PrivateChatMessageReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrivateChatMessageReply::InitAsDefaultInstance() {
  playerinfo_ = const_cast< ::Packet::PlayerBasicInfo*>(&::Packet::PlayerBasicInfo::default_instance());
}

PrivateChatMessageReply::PrivateChatMessageReply(const PrivateChatMessageReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrivateChatMessageReply::SharedCtor() {
  _cached_size_ = 0;
  playerinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrivateChatMessageReply::~PrivateChatMessageReply() {
  SharedDtor();
}

void PrivateChatMessageReply::SharedDtor() {
  if (this != default_instance_) {
    delete playerinfo_;
  }
}

void PrivateChatMessageReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrivateChatMessageReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrivateChatMessageReply_descriptor_;
}

const PrivateChatMessageReply& PrivateChatMessageReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChatMessage_2eproto();
  return *default_instance_;
}

PrivateChatMessageReply* PrivateChatMessageReply::default_instance_ = NULL;

PrivateChatMessageReply* PrivateChatMessageReply::New() const {
  return new PrivateChatMessageReply;
}

void PrivateChatMessageReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerinfo()) {
      if (playerinfo_ != NULL) playerinfo_->::Packet::PlayerBasicInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PrivateChatMessageReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Packet.PlayerBasicInfo playerinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PrivateChatMessageReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Packet.PlayerBasicInfo playerinfo = 1;
  if (has_playerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->playerinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrivateChatMessageReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Packet.PlayerBasicInfo playerinfo = 1;
  if (has_playerinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->playerinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrivateChatMessageReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Packet.PlayerBasicInfo playerinfo = 1;
    if (has_playerinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrivateChatMessageReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrivateChatMessageReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrivateChatMessageReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PrivateChatMessageReply::MergeFrom(const PrivateChatMessageReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerinfo()) {
      mutable_playerinfo()->::Packet::PlayerBasicInfo::MergeFrom(from.playerinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PrivateChatMessageReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PrivateChatMessageReply::CopyFrom(const PrivateChatMessageReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PrivateChatMessageReply::IsInitialized() const {

  if (has_playerinfo()) {
    if (!this->playerinfo().IsInitialized()) return false;
  }
  return true;
}

void PrivateChatMessageReply::SetInitialized() {

  if (has_playerinfo()) {
    this->mutable_playerinfo()->SetInitialized();
  }
  return;
}

void PrivateChatMessageReply::Swap(PrivateChatMessageReply* other) {
  if (other != this) {
    std::swap(playerinfo_, other->playerinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PrivateChatMessageReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrivateChatMessageReply_descriptor_;
  metadata.reflection = PrivateChatMessageReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

// @@protoc_insertion_point(global_scope)
