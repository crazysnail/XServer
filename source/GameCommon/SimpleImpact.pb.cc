// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SimpleImpact.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SimpleImpact.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Packet {

namespace {

const ::google::protobuf::Descriptor* SimpleImpactData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimpleImpactData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimpleImpactConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimpleImpactConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimpleImpactAdd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimpleImpactAdd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimpleImpactDel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimpleImpactDel_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimpleImpactUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimpleImpactUpdate_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SimpleImpact_2eproto() {
  protobuf_AddDesc_SimpleImpact_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SimpleImpact.proto");
  GOOGLE_CHECK(file != NULL);
  SimpleImpactData_descriptor_ = file->message_type(0);
  static const int SimpleImpactData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleImpactData, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleImpactData, impact_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleImpactData, left_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleImpactData, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleImpactData, param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleImpactData, dbsave_),
  };
  SimpleImpactData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimpleImpactData_descriptor_,
      SimpleImpactData::default_instance_,
      SimpleImpactData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleImpactData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleImpactData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimpleImpactData));
  SimpleImpactConfig_descriptor_ = file->message_type(1);
  static const int SimpleImpactConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleImpactConfig, impact_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleImpactConfig, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleImpactConfig, effect_),
  };
  SimpleImpactConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimpleImpactConfig_descriptor_,
      SimpleImpactConfig::default_instance_,
      SimpleImpactConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleImpactConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleImpactConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimpleImpactConfig));
  SimpleImpactAdd_descriptor_ = file->message_type(2);
  static const int SimpleImpactAdd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleImpactAdd, actor_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleImpactAdd, simple_impact_),
  };
  SimpleImpactAdd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimpleImpactAdd_descriptor_,
      SimpleImpactAdd::default_instance_,
      SimpleImpactAdd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleImpactAdd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleImpactAdd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimpleImpactAdd));
  SimpleImpactDel_descriptor_ = file->message_type(3);
  static const int SimpleImpactDel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleImpactDel, actor_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleImpactDel, simple_impact_),
  };
  SimpleImpactDel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimpleImpactDel_descriptor_,
      SimpleImpactDel::default_instance_,
      SimpleImpactDel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleImpactDel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleImpactDel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimpleImpactDel));
  SimpleImpactUpdate_descriptor_ = file->message_type(4);
  static const int SimpleImpactUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleImpactUpdate, actor_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleImpactUpdate, simple_impact_),
  };
  SimpleImpactUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimpleImpactUpdate_descriptor_,
      SimpleImpactUpdate::default_instance_,
      SimpleImpactUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleImpactUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleImpactUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimpleImpactUpdate));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SimpleImpact_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimpleImpactData_descriptor_, &SimpleImpactData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimpleImpactConfig_descriptor_, &SimpleImpactConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimpleImpactAdd_descriptor_, &SimpleImpactAdd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimpleImpactDel_descriptor_, &SimpleImpactDel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimpleImpactUpdate_descriptor_, &SimpleImpactUpdate::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SimpleImpact_2eproto() {
  delete SimpleImpactData::default_instance_;
  delete SimpleImpactData_reflection_;
  delete SimpleImpactConfig::default_instance_;
  delete SimpleImpactConfig_reflection_;
  delete SimpleImpactAdd::default_instance_;
  delete SimpleImpactAdd_reflection_;
  delete SimpleImpactDel::default_instance_;
  delete SimpleImpactDel_reflection_;
  delete SimpleImpactUpdate::default_instance_;
  delete SimpleImpactUpdate_reflection_;
}

void protobuf_AddDesc_SimpleImpact_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Packet::protobuf_AddDesc_Base_2eproto();
  ::Packet::protobuf_AddDesc_AllPacketEnum_2eproto();
  ::Packet::protobuf_AddDesc_ProtoBufOption_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022SimpleImpact.proto\022\006Packet\032\nBase.proto"
    "\032\023AllPacketEnum.proto\032\024ProtoBufOption.pr"
    "oto\"x\n\020SimpleImpactData\022\014\n\004guid\030\001 \002(\006\022\023\n"
    "\013impact_type\030\002 \002(\005\022\021\n\tleft_time\030\004 \002(\006\022\016\n"
    "\006param1\030\005 \002(\005\022\016\n\006param2\030\006 \002(\005\022\016\n\006dbsave\030"
    "\007 \002(\010\"h\n\022SimpleImpactConfig\022\023\n\013impact_ty"
    "pe\030\001 \002(\005\022\r\n\005group\030\002 \002(\005\022.\n\006effect\030\003 \002(\0162"
    "\036.Packet.SimpleImpactEffectType\"V\n\017Simpl"
    "eImpactAdd\022\022\n\nactor_guid\030\001 \001(\006\022/\n\rsimple"
    "_impact\030\002 \003(\0132\030.Packet.SimpleImpactData\""
    "V\n\017SimpleImpactDel\022\022\n\nactor_guid\030\001 \001(\006\022/"
    "\n\rsimple_impact\030\002 \003(\0132\030.Packet.SimpleImp"
    "actData\"Y\n\022SimpleImpactUpdate\022\022\n\nactor_g"
    "uid\030\001 \001(\006\022/\n\rsimple_impact\030\002 \003(\0132\030.Packe"
    "t.SimpleImpactData", 578);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SimpleImpact.proto", &protobuf_RegisterTypes);
  SimpleImpactData::default_instance_ = new SimpleImpactData();
  SimpleImpactConfig::default_instance_ = new SimpleImpactConfig();
  SimpleImpactAdd::default_instance_ = new SimpleImpactAdd();
  SimpleImpactDel::default_instance_ = new SimpleImpactDel();
  SimpleImpactUpdate::default_instance_ = new SimpleImpactUpdate();
  SimpleImpactData::default_instance_->InitAsDefaultInstance();
  SimpleImpactConfig::default_instance_->InitAsDefaultInstance();
  SimpleImpactAdd::default_instance_->InitAsDefaultInstance();
  SimpleImpactDel::default_instance_->InitAsDefaultInstance();
  SimpleImpactUpdate::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SimpleImpact_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SimpleImpact_2eproto {
  StaticDescriptorInitializer_SimpleImpact_2eproto() {
    protobuf_AddDesc_SimpleImpact_2eproto();
  }
} static_descriptor_initializer_SimpleImpact_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SimpleImpactData::kGuidFieldNumber;
const int SimpleImpactData::kImpactTypeFieldNumber;
const int SimpleImpactData::kLeftTimeFieldNumber;
const int SimpleImpactData::kParam1FieldNumber;
const int SimpleImpactData::kParam2FieldNumber;
const int SimpleImpactData::kDbsaveFieldNumber;
#endif  // !_MSC_VER

SimpleImpactData::SimpleImpactData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SimpleImpactData::InitAsDefaultInstance() {
}

SimpleImpactData::SimpleImpactData(const SimpleImpactData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SimpleImpactData::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  impact_type_ = 0;
  left_time_ = GOOGLE_ULONGLONG(0);
  param1_ = 0;
  param2_ = 0;
  dbsave_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimpleImpactData::~SimpleImpactData() {
  SharedDtor();
}

void SimpleImpactData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SimpleImpactData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleImpactData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimpleImpactData_descriptor_;
}

const SimpleImpactData& SimpleImpactData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimpleImpact_2eproto();
  return *default_instance_;
}

SimpleImpactData* SimpleImpactData::default_instance_ = NULL;

SimpleImpactData* SimpleImpactData::New() const {
  return new SimpleImpactData;
}

void SimpleImpactData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    impact_type_ = 0;
    left_time_ = GOOGLE_ULONGLONG(0);
    param1_ = 0;
    param2_ = 0;
    dbsave_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SimpleImpactData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_impact_type;
        break;
      }

      // required int32 impact_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_impact_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &impact_type_)));
          set_has_impact_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_left_time;
        break;
      }

      // required fixed64 left_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_left_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &left_time_)));
          set_has_left_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_param1;
        break;
      }

      // required int32 param1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_param2;
        break;
      }

      // required int32 param2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param2_)));
          set_has_param2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dbsave;
        break;
      }

      // required bool dbsave = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dbsave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dbsave_)));
          set_has_dbsave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SimpleImpactData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required int32 impact_type = 2;
  if (has_impact_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->impact_type(), output);
  }

  // required fixed64 left_time = 4;
  if (has_left_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->left_time(), output);
  }

  // required int32 param1 = 5;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->param1(), output);
  }

  // required int32 param2 = 6;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->param2(), output);
  }

  // required bool dbsave = 7;
  if (has_dbsave()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->dbsave(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimpleImpactData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required int32 impact_type = 2;
  if (has_impact_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->impact_type(), target);
  }

  // required fixed64 left_time = 4;
  if (has_left_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->left_time(), target);
  }

  // required int32 param1 = 5;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->param1(), target);
  }

  // required int32 param2 = 6;
  if (has_param2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->param2(), target);
  }

  // required bool dbsave = 7;
  if (has_dbsave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->dbsave(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimpleImpactData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required int32 impact_type = 2;
    if (has_impact_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->impact_type());
    }

    // required fixed64 left_time = 4;
    if (has_left_time()) {
      total_size += 1 + 8;
    }

    // required int32 param1 = 5;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param1());
    }

    // required int32 param2 = 6;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param2());
    }

    // required bool dbsave = 7;
    if (has_dbsave()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleImpactData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimpleImpactData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimpleImpactData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SimpleImpactData::MergeFrom(const SimpleImpactData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_impact_type()) {
      set_impact_type(from.impact_type());
    }
    if (from.has_left_time()) {
      set_left_time(from.left_time());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
    if (from.has_dbsave()) {
      set_dbsave(from.dbsave());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SimpleImpactData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SimpleImpactData::CopyFrom(const SimpleImpactData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SimpleImpactData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void SimpleImpactData::SetInitialized() {
  _has_bits_[0] |= 0x0000003f;

  return;
}

void SimpleImpactData::Swap(SimpleImpactData* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(impact_type_, other->impact_type_);
    std::swap(left_time_, other->left_time_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(dbsave_, other->dbsave_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SimpleImpactData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimpleImpactData_descriptor_;
  metadata.reflection = SimpleImpactData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimpleImpactConfig::kImpactTypeFieldNumber;
const int SimpleImpactConfig::kGroupFieldNumber;
const int SimpleImpactConfig::kEffectFieldNumber;
#endif  // !_MSC_VER

SimpleImpactConfig::SimpleImpactConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SimpleImpactConfig::InitAsDefaultInstance() {
}

SimpleImpactConfig::SimpleImpactConfig(const SimpleImpactConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SimpleImpactConfig::SharedCtor() {
  _cached_size_ = 0;
  impact_type_ = 0;
  group_ = 0;
  effect_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimpleImpactConfig::~SimpleImpactConfig() {
  SharedDtor();
}

void SimpleImpactConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SimpleImpactConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleImpactConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimpleImpactConfig_descriptor_;
}

const SimpleImpactConfig& SimpleImpactConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimpleImpact_2eproto();
  return *default_instance_;
}

SimpleImpactConfig* SimpleImpactConfig::default_instance_ = NULL;

SimpleImpactConfig* SimpleImpactConfig::New() const {
  return new SimpleImpactConfig;
}

void SimpleImpactConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    impact_type_ = 0;
    group_ = 0;
    effect_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SimpleImpactConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 impact_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &impact_type_)));
          set_has_impact_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_group;
        break;
      }

      // required int32 group = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_effect;
        break;
      }

      // required .Packet.SimpleImpactEffectType effect = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::SimpleImpactEffectType_IsValid(value)) {
            set_effect(static_cast< ::Packet::SimpleImpactEffectType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SimpleImpactConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 impact_type = 1;
  if (has_impact_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->impact_type(), output);
  }

  // required int32 group = 2;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->group(), output);
  }

  // required .Packet.SimpleImpactEffectType effect = 3;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->effect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimpleImpactConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 impact_type = 1;
  if (has_impact_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->impact_type(), target);
  }

  // required int32 group = 2;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->group(), target);
  }

  // required .Packet.SimpleImpactEffectType effect = 3;
  if (has_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->effect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimpleImpactConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 impact_type = 1;
    if (has_impact_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->impact_type());
    }

    // required int32 group = 2;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group());
    }

    // required .Packet.SimpleImpactEffectType effect = 3;
    if (has_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->effect());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleImpactConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimpleImpactConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimpleImpactConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SimpleImpactConfig::MergeFrom(const SimpleImpactConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_impact_type()) {
      set_impact_type(from.impact_type());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_effect()) {
      set_effect(from.effect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SimpleImpactConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SimpleImpactConfig::CopyFrom(const SimpleImpactConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SimpleImpactConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SimpleImpactConfig::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  return;
}

void SimpleImpactConfig::Swap(SimpleImpactConfig* other) {
  if (other != this) {
    std::swap(impact_type_, other->impact_type_);
    std::swap(group_, other->group_);
    std::swap(effect_, other->effect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SimpleImpactConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimpleImpactConfig_descriptor_;
  metadata.reflection = SimpleImpactConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimpleImpactAdd::kActorGuidFieldNumber;
const int SimpleImpactAdd::kSimpleImpactFieldNumber;
#endif  // !_MSC_VER

SimpleImpactAdd::SimpleImpactAdd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SimpleImpactAdd::InitAsDefaultInstance() {
}

SimpleImpactAdd::SimpleImpactAdd(const SimpleImpactAdd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SimpleImpactAdd::SharedCtor() {
  _cached_size_ = 0;
  actor_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimpleImpactAdd::~SimpleImpactAdd() {
  SharedDtor();
}

void SimpleImpactAdd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SimpleImpactAdd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleImpactAdd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimpleImpactAdd_descriptor_;
}

const SimpleImpactAdd& SimpleImpactAdd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimpleImpact_2eproto();
  return *default_instance_;
}

SimpleImpactAdd* SimpleImpactAdd::default_instance_ = NULL;

SimpleImpactAdd* SimpleImpactAdd::New() const {
  return new SimpleImpactAdd;
}

void SimpleImpactAdd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    actor_guid_ = GOOGLE_ULONGLONG(0);
  }
  simple_impact_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SimpleImpactAdd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 actor_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &actor_guid_)));
          set_has_actor_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_simple_impact;
        break;
      }

      // repeated .Packet.SimpleImpactData simple_impact = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_simple_impact:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_simple_impact()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_simple_impact;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SimpleImpactAdd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 actor_guid = 1;
  if (has_actor_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->actor_guid(), output);
  }

  // repeated .Packet.SimpleImpactData simple_impact = 2;
  for (int i = 0; i < this->simple_impact_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->simple_impact(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimpleImpactAdd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 actor_guid = 1;
  if (has_actor_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->actor_guid(), target);
  }

  // repeated .Packet.SimpleImpactData simple_impact = 2;
  for (int i = 0; i < this->simple_impact_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->simple_impact(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimpleImpactAdd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 actor_guid = 1;
    if (has_actor_guid()) {
      total_size += 1 + 8;
    }

  }
  // repeated .Packet.SimpleImpactData simple_impact = 2;
  total_size += 1 * this->simple_impact_size();
  for (int i = 0; i < this->simple_impact_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->simple_impact(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleImpactAdd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimpleImpactAdd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimpleImpactAdd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SimpleImpactAdd::MergeFrom(const SimpleImpactAdd& from) {
  GOOGLE_CHECK_NE(&from, this);
  simple_impact_.MergeFrom(from.simple_impact_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actor_guid()) {
      set_actor_guid(from.actor_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SimpleImpactAdd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SimpleImpactAdd::CopyFrom(const SimpleImpactAdd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SimpleImpactAdd::IsInitialized() const {

  for (int i = 0; i < simple_impact_size(); i++) {
    if (!this->simple_impact(i).IsInitialized()) return false;
  }
  return true;
}

void SimpleImpactAdd::SetInitialized() {

  for (int i = 0; i < simple_impact_size(); i++) {
    this->mutable_simple_impact(i)->SetInitialized();
  }
  return;
}

void SimpleImpactAdd::Swap(SimpleImpactAdd* other) {
  if (other != this) {
    std::swap(actor_guid_, other->actor_guid_);
    simple_impact_.Swap(&other->simple_impact_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SimpleImpactAdd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimpleImpactAdd_descriptor_;
  metadata.reflection = SimpleImpactAdd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimpleImpactDel::kActorGuidFieldNumber;
const int SimpleImpactDel::kSimpleImpactFieldNumber;
#endif  // !_MSC_VER

SimpleImpactDel::SimpleImpactDel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SimpleImpactDel::InitAsDefaultInstance() {
}

SimpleImpactDel::SimpleImpactDel(const SimpleImpactDel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SimpleImpactDel::SharedCtor() {
  _cached_size_ = 0;
  actor_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimpleImpactDel::~SimpleImpactDel() {
  SharedDtor();
}

void SimpleImpactDel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SimpleImpactDel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleImpactDel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimpleImpactDel_descriptor_;
}

const SimpleImpactDel& SimpleImpactDel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimpleImpact_2eproto();
  return *default_instance_;
}

SimpleImpactDel* SimpleImpactDel::default_instance_ = NULL;

SimpleImpactDel* SimpleImpactDel::New() const {
  return new SimpleImpactDel;
}

void SimpleImpactDel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    actor_guid_ = GOOGLE_ULONGLONG(0);
  }
  simple_impact_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SimpleImpactDel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 actor_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &actor_guid_)));
          set_has_actor_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_simple_impact;
        break;
      }

      // repeated .Packet.SimpleImpactData simple_impact = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_simple_impact:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_simple_impact()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_simple_impact;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SimpleImpactDel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 actor_guid = 1;
  if (has_actor_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->actor_guid(), output);
  }

  // repeated .Packet.SimpleImpactData simple_impact = 2;
  for (int i = 0; i < this->simple_impact_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->simple_impact(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimpleImpactDel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 actor_guid = 1;
  if (has_actor_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->actor_guid(), target);
  }

  // repeated .Packet.SimpleImpactData simple_impact = 2;
  for (int i = 0; i < this->simple_impact_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->simple_impact(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimpleImpactDel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 actor_guid = 1;
    if (has_actor_guid()) {
      total_size += 1 + 8;
    }

  }
  // repeated .Packet.SimpleImpactData simple_impact = 2;
  total_size += 1 * this->simple_impact_size();
  for (int i = 0; i < this->simple_impact_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->simple_impact(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleImpactDel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimpleImpactDel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimpleImpactDel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SimpleImpactDel::MergeFrom(const SimpleImpactDel& from) {
  GOOGLE_CHECK_NE(&from, this);
  simple_impact_.MergeFrom(from.simple_impact_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actor_guid()) {
      set_actor_guid(from.actor_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SimpleImpactDel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SimpleImpactDel::CopyFrom(const SimpleImpactDel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SimpleImpactDel::IsInitialized() const {

  for (int i = 0; i < simple_impact_size(); i++) {
    if (!this->simple_impact(i).IsInitialized()) return false;
  }
  return true;
}

void SimpleImpactDel::SetInitialized() {

  for (int i = 0; i < simple_impact_size(); i++) {
    this->mutable_simple_impact(i)->SetInitialized();
  }
  return;
}

void SimpleImpactDel::Swap(SimpleImpactDel* other) {
  if (other != this) {
    std::swap(actor_guid_, other->actor_guid_);
    simple_impact_.Swap(&other->simple_impact_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SimpleImpactDel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimpleImpactDel_descriptor_;
  metadata.reflection = SimpleImpactDel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimpleImpactUpdate::kActorGuidFieldNumber;
const int SimpleImpactUpdate::kSimpleImpactFieldNumber;
#endif  // !_MSC_VER

SimpleImpactUpdate::SimpleImpactUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SimpleImpactUpdate::InitAsDefaultInstance() {
}

SimpleImpactUpdate::SimpleImpactUpdate(const SimpleImpactUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SimpleImpactUpdate::SharedCtor() {
  _cached_size_ = 0;
  actor_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimpleImpactUpdate::~SimpleImpactUpdate() {
  SharedDtor();
}

void SimpleImpactUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SimpleImpactUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleImpactUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimpleImpactUpdate_descriptor_;
}

const SimpleImpactUpdate& SimpleImpactUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimpleImpact_2eproto();
  return *default_instance_;
}

SimpleImpactUpdate* SimpleImpactUpdate::default_instance_ = NULL;

SimpleImpactUpdate* SimpleImpactUpdate::New() const {
  return new SimpleImpactUpdate;
}

void SimpleImpactUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    actor_guid_ = GOOGLE_ULONGLONG(0);
  }
  simple_impact_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SimpleImpactUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 actor_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &actor_guid_)));
          set_has_actor_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_simple_impact;
        break;
      }

      // repeated .Packet.SimpleImpactData simple_impact = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_simple_impact:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_simple_impact()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_simple_impact;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SimpleImpactUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 actor_guid = 1;
  if (has_actor_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->actor_guid(), output);
  }

  // repeated .Packet.SimpleImpactData simple_impact = 2;
  for (int i = 0; i < this->simple_impact_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->simple_impact(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimpleImpactUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 actor_guid = 1;
  if (has_actor_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->actor_guid(), target);
  }

  // repeated .Packet.SimpleImpactData simple_impact = 2;
  for (int i = 0; i < this->simple_impact_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->simple_impact(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimpleImpactUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 actor_guid = 1;
    if (has_actor_guid()) {
      total_size += 1 + 8;
    }

  }
  // repeated .Packet.SimpleImpactData simple_impact = 2;
  total_size += 1 * this->simple_impact_size();
  for (int i = 0; i < this->simple_impact_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->simple_impact(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleImpactUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimpleImpactUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimpleImpactUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SimpleImpactUpdate::MergeFrom(const SimpleImpactUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  simple_impact_.MergeFrom(from.simple_impact_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actor_guid()) {
      set_actor_guid(from.actor_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SimpleImpactUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SimpleImpactUpdate::CopyFrom(const SimpleImpactUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SimpleImpactUpdate::IsInitialized() const {

  for (int i = 0; i < simple_impact_size(); i++) {
    if (!this->simple_impact(i).IsInitialized()) return false;
  }
  return true;
}

void SimpleImpactUpdate::SetInitialized() {

  for (int i = 0; i < simple_impact_size(); i++) {
    this->mutable_simple_impact(i)->SetInitialized();
  }
  return;
}

void SimpleImpactUpdate::Swap(SimpleImpactUpdate* other) {
  if (other != this) {
    std::swap(actor_guid_, other->actor_guid_);
    simple_impact_.Swap(&other->simple_impact_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SimpleImpactUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimpleImpactUpdate_descriptor_;
  metadata.reflection = SimpleImpactUpdate_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

// @@protoc_insertion_point(global_scope)
