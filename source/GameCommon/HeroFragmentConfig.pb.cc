// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HeroFragmentConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "HeroFragmentConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Config {

namespace {

const ::google::protobuf::Descriptor* FragmentConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FragmentConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_HeroFragmentConfig_2eproto() {
  protobuf_AddDesc_HeroFragmentConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "HeroFragmentConfig.proto");
  GOOGLE_CHECK(file != NULL);
  FragmentConfig_descriptor_ = file->message_type(0);
  static const int FragmentConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FragmentConfig, fragment_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FragmentConfig, fragment_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FragmentConfig, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FragmentConfig, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FragmentConfig, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FragmentConfig, smelt_amount_),
  };
  FragmentConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FragmentConfig_descriptor_,
      FragmentConfig::default_instance_,
      FragmentConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FragmentConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FragmentConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FragmentConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_HeroFragmentConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FragmentConfig_descriptor_, &FragmentConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_HeroFragmentConfig_2eproto() {
  delete FragmentConfig::default_instance_;
  delete FragmentConfig_reflection_;
}

void protobuf_AddDesc_HeroFragmentConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Packet::protobuf_AddDesc_AllPacketEnum_2eproto();
  ::Packet::protobuf_AddDesc_ActorBasicInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030HeroFragmentConfig.proto\022\006Config\032\023AllP"
    "acketEnum.proto\032\024ActorBasicInfo.proto\"\251\001"
    "\n\016FragmentConfig\022\023\n\013fragment_id\030\001 \002(\005\022\027\n"
    "\017fragment_amount\030\002 \002(\005\022\017\n\007hero_id\030\003 \002(\005\022"
    "\037\n\004star\030\004 \002(\0162\021.Packet.ActorStar\022!\n\005colo"
    "r\030\005 \002(\0162\022.Packet.ActorColor\022\024\n\014smelt_amo"
    "unt\030\006 \002(\005", 249);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "HeroFragmentConfig.proto", &protobuf_RegisterTypes);
  FragmentConfig::default_instance_ = new FragmentConfig();
  FragmentConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_HeroFragmentConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_HeroFragmentConfig_2eproto {
  StaticDescriptorInitializer_HeroFragmentConfig_2eproto() {
    protobuf_AddDesc_HeroFragmentConfig_2eproto();
  }
} static_descriptor_initializer_HeroFragmentConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FragmentConfig::kFragmentIdFieldNumber;
const int FragmentConfig::kFragmentAmountFieldNumber;
const int FragmentConfig::kHeroIdFieldNumber;
const int FragmentConfig::kStarFieldNumber;
const int FragmentConfig::kColorFieldNumber;
const int FragmentConfig::kSmeltAmountFieldNumber;
#endif  // !_MSC_VER

FragmentConfig::FragmentConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FragmentConfig::InitAsDefaultInstance() {
}

FragmentConfig::FragmentConfig(const FragmentConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FragmentConfig::SharedCtor() {
  _cached_size_ = 0;
  fragment_id_ = 0;
  fragment_amount_ = 0;
  hero_id_ = 0;
  star_ = 1;
  color_ = 1;
  smelt_amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FragmentConfig::~FragmentConfig() {
  SharedDtor();
}

void FragmentConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FragmentConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FragmentConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FragmentConfig_descriptor_;
}

const FragmentConfig& FragmentConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HeroFragmentConfig_2eproto();
  return *default_instance_;
}

FragmentConfig* FragmentConfig::default_instance_ = NULL;

FragmentConfig* FragmentConfig::New() const {
  return new FragmentConfig;
}

void FragmentConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fragment_id_ = 0;
    fragment_amount_ = 0;
    hero_id_ = 0;
    star_ = 1;
    color_ = 1;
    smelt_amount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool FragmentConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fragment_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fragment_id_)));
          set_has_fragment_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fragment_amount;
        break;
      }

      // required int32 fragment_amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fragment_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fragment_amount_)));
          set_has_fragment_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hero_id;
        break;
      }

      // required int32 hero_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_star;
        break;
      }

      // required .Packet.ActorStar star = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::ActorStar_IsValid(value)) {
            set_star(static_cast< ::Packet::ActorStar >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_color;
        break;
      }

      // required .Packet.ActorColor color = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::ActorColor_IsValid(value)) {
            set_color(static_cast< ::Packet::ActorColor >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_smelt_amount;
        break;
      }

      // required int32 smelt_amount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_smelt_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &smelt_amount_)));
          set_has_smelt_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void FragmentConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 fragment_id = 1;
  if (has_fragment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fragment_id(), output);
  }

  // required int32 fragment_amount = 2;
  if (has_fragment_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fragment_amount(), output);
  }

  // required int32 hero_id = 3;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hero_id(), output);
  }

  // required .Packet.ActorStar star = 4;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->star(), output);
  }

  // required .Packet.ActorColor color = 5;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->color(), output);
  }

  // required int32 smelt_amount = 6;
  if (has_smelt_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->smelt_amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FragmentConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 fragment_id = 1;
  if (has_fragment_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fragment_id(), target);
  }

  // required int32 fragment_amount = 2;
  if (has_fragment_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fragment_amount(), target);
  }

  // required int32 hero_id = 3;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hero_id(), target);
  }

  // required .Packet.ActorStar star = 4;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->star(), target);
  }

  // required .Packet.ActorColor color = 5;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->color(), target);
  }

  // required int32 smelt_amount = 6;
  if (has_smelt_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->smelt_amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FragmentConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 fragment_id = 1;
    if (has_fragment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fragment_id());
    }

    // required int32 fragment_amount = 2;
    if (has_fragment_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fragment_amount());
    }

    // required int32 hero_id = 3;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_id());
    }

    // required .Packet.ActorStar star = 4;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->star());
    }

    // required .Packet.ActorColor color = 5;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
    }

    // required int32 smelt_amount = 6;
    if (has_smelt_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->smelt_amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FragmentConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FragmentConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FragmentConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void FragmentConfig::MergeFrom(const FragmentConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fragment_id()) {
      set_fragment_id(from.fragment_id());
    }
    if (from.has_fragment_amount()) {
      set_fragment_amount(from.fragment_amount());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_smelt_amount()) {
      set_smelt_amount(from.smelt_amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void FragmentConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void FragmentConfig::CopyFrom(const FragmentConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool FragmentConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void FragmentConfig::SetInitialized() {
  _has_bits_[0] |= 0x0000003f;

  return;
}

void FragmentConfig::Swap(FragmentConfig* other) {
  if (other != this) {
    std::swap(fragment_id_, other->fragment_id_);
    std::swap(fragment_amount_, other->fragment_amount_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(star_, other->star_);
    std::swap(color_, other->color_);
    std::swap(smelt_amount_, other->smelt_amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata FragmentConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FragmentConfig_descriptor_;
  metadata.reflection = FragmentConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config

// @@protoc_insertion_point(global_scope)
