// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneStage.proto
#include "SceneStage.pb.h"
#include "SceneStage.proto.fflua.h"
namespace Packet {
bool GetSceneStageInfo_fflua_reg(lua_State* state)
{
//for decltype
	GetSceneStageInfo* message(nullptr);
	message;
	ff::fflua_register_t<GetSceneStageInfo, ctor()>(state, "GetSceneStageInfo", "google::protobuf::Message")
		// repeated int32 stage_ids = 1;
		.def(&GetSceneStageInfo::stage_ids_size, "stage_ids_size")
		.def<decltype(message->stage_ids(0)) (GetSceneStageInfo::*)(int) const>(&GetSceneStageInfo::stage_ids, "stage_ids")
		.def<void(GetSceneStageInfo::*)(int, const decltype(message->stage_ids(0)))>(&GetSceneStageInfo::set_stage_ids, "set_stage_ids")
		.def(&GetSceneStageInfo::add_stage_ids, "add_stage_ids")
		.def(&GetSceneStageInfo::ByteSize, "ByteSize")
		.def(&GetSceneStageInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool SceneStageInfo_fflua_reg(lua_State* state)
{
//for decltype
	SceneStageInfo* message(nullptr);
	message;
	ff::fflua_register_t<SceneStageInfo, ctor()>(state, "SceneStageInfo", "google::protobuf::Message")
		// required int32 stage_id = 2;
		.def(&SceneStageInfo::stage_id, "stage_id")
		.def(&SceneStageInfo::set_stage_id, "set_stage_id")
		// required int32 tax_rate = 3;
		.def(&SceneStageInfo::tax_rate, "tax_rate")
		.def(&SceneStageInfo::set_tax_rate, "set_tax_rate")
		// required int32 tax = 4;
		.def(&SceneStageInfo::tax, "tax")
		.def(&SceneStageInfo::set_tax, "set_tax")
		// required fixed64 captain_guid = 5;
		.def(&SceneStageInfo::captain_guid, "captain_guid")
		.def(&SceneStageInfo::set_captain_guid, "set_captain_guid")
		// required .Packet.SceneStageCaptain captain = 6;
		.def(&SceneStageInfo::captain, "captain")
		.def(&SceneStageInfo::mutable_captain, "mutable_captain")
		// required int32 fast_time_cost = 8;
		.def(&SceneStageInfo::fast_time_cost, "fast_time_cost")
		.def(&SceneStageInfo::set_fast_time_cost, "set_fast_time_cost")
		// required .Packet.BattleFormation fast_formation = 9;
		.def(&SceneStageInfo::fast_formation, "fast_formation")
		.def(&SceneStageInfo::mutable_fast_formation, "mutable_fast_formation")
		// required int32 best_score = 10;
		.def(&SceneStageInfo::best_score, "best_score")
		.def(&SceneStageInfo::set_best_score, "set_best_score")
		// required .Packet.BattleFormation best_formation = 11;
		.def(&SceneStageInfo::best_formation, "best_formation")
		.def(&SceneStageInfo::mutable_best_formation, "mutable_best_formation")
		// required .Packet.Challengers challengers = 12;
		.def(&SceneStageInfo::challengers, "challengers")
		.def(&SceneStageInfo::mutable_challengers, "mutable_challengers")
		// required int32 guild_tax_rate = 13;
		.def(&SceneStageInfo::guild_tax_rate, "guild_tax_rate")
		.def(&SceneStageInfo::set_guild_tax_rate, "set_guild_tax_rate")
		// required int32 guild_tax = 14;
		.def(&SceneStageInfo::guild_tax, "guild_tax")
		.def(&SceneStageInfo::set_guild_tax, "set_guild_tax")
		// optional .Packet.HookRank ranks = 15;
		.def(&SceneStageInfo::ranks, "ranks")
		.def(&SceneStageInfo::mutable_ranks, "mutable_ranks")
		.def(&SceneStageInfo::has_ranks, "has_ranks")
		// optional bool tax_broadcasted = 16;
		.def(&SceneStageInfo::tax_broadcasted, "tax_broadcasted")
		.def(&SceneStageInfo::set_tax_broadcasted, "set_tax_broadcasted")
		.def(&SceneStageInfo::has_tax_broadcasted, "has_tax_broadcasted")
		// optional bool guild_tax_broadcasted = 17;
		.def(&SceneStageInfo::guild_tax_broadcasted, "guild_tax_broadcasted")
		.def(&SceneStageInfo::set_guild_tax_broadcasted, "set_guild_tax_broadcasted")
		.def(&SceneStageInfo::has_guild_tax_broadcasted, "has_guild_tax_broadcasted")
		.def(&SceneStageInfo::ByteSize, "ByteSize")
		.def(&SceneStageInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool HookRank_fflua_reg(lua_State* state)
{
//for decltype
	HookRank* message(nullptr);
	message;
	ff::fflua_register_t<HookRank, ctor()>(state, "HookRank", "google::protobuf::Message")
		// repeated .Packet.HookRankUser users = 1;
		.def(&HookRank::users_size, "users_size")
		.def<decltype(message->users(0)) (HookRank::*)(int) const>(&HookRank::users, "users")
		.def<decltype(message->mutable_users(0)) (HookRank::*)(int)>(&HookRank::mutable_users, "mutable_users")
		.def(&HookRank::add_users, "add_users")
		.def(&HookRank::ByteSize, "ByteSize")
		.def(&HookRank::SetInitialized, "SetInitialized")
		;
	return true;
}
bool HookRankUser_fflua_reg(lua_State* state)
{
//for decltype
	HookRankUser* message(nullptr);
	message;
	ff::fflua_register_t<HookRankUser, ctor()>(state, "HookRankUser", "google::protobuf::Message")
		// required fixed64 player_guid = 1;
		.def(&HookRankUser::player_guid, "player_guid")
		.def(&HookRankUser::set_player_guid, "set_player_guid")
		// required string name = 2;
		.def(&HookRankUser::name, "name")
		.def<void (HookRankUser::*)(const std::string&)>(&HookRankUser::set_name, "set_name")
		// required int32 seconds = 3;
		.def(&HookRankUser::seconds, "seconds")
		.def(&HookRankUser::set_seconds, "set_seconds")
		// required int32 income_per_min = 4;
		.def(&HookRankUser::income_per_min, "income_per_min")
		.def(&HookRankUser::set_income_per_min, "set_income_per_min")
		// required int32 exp_pre_min = 5;
		.def(&HookRankUser::exp_pre_min, "exp_pre_min")
		.def(&HookRankUser::set_exp_pre_min, "set_exp_pre_min")
		.def(&HookRankUser::ByteSize, "ByteSize")
		.def(&HookRankUser::SetInitialized, "SetInitialized")
		;
	return true;
}
bool CaptureStage_fflua_reg(lua_State* state)
{
//for decltype
	CaptureStage* message(nullptr);
	message;
	ff::fflua_register_t<CaptureStage, ctor()>(state, "CaptureStage", "google::protobuf::Message")
		// required int32 stage_id = 1;
		.def(&CaptureStage::stage_id, "stage_id")
		.def(&CaptureStage::set_stage_id, "set_stage_id")
		// required int32 battle_group_id = 2;
		.def(&CaptureStage::battle_group_id, "battle_group_id")
		.def(&CaptureStage::set_battle_group_id, "set_battle_group_id")
		.def(&CaptureStage::ByteSize, "ByteSize")
		.def(&CaptureStage::SetInitialized, "SetInitialized")
		;
	return true;
}
bool CaptureStageToScene_fflua_reg(lua_State* state)
{
//for decltype
	CaptureStageToScene* message(nullptr);
	message;
	ff::fflua_register_t<CaptureStageToScene, ctor()>(state, "CaptureStageToScene", "google::protobuf::Message")
		// required .Packet.CaptureStage client_req = 1;
		.def(&CaptureStageToScene::client_req, "client_req")
		.def(&CaptureStageToScene::mutable_client_req, "mutable_client_req")
		// repeated .Packet.ActorFullInfo actors = 2;
		.def(&CaptureStageToScene::actors_size, "actors_size")
		.def<decltype(message->actors(0)) (CaptureStageToScene::*)(int) const>(&CaptureStageToScene::actors, "actors")
		.def<decltype(message->mutable_actors(0)) (CaptureStageToScene::*)(int)>(&CaptureStageToScene::mutable_actors, "mutable_actors")
		.def(&CaptureStageToScene::add_actors, "add_actors")
		// required int32 boss_group_id = 3;
		.def(&CaptureStageToScene::boss_group_id, "boss_group_id")
		.def(&CaptureStageToScene::set_boss_group_id, "set_boss_group_id")
		.def(&CaptureStageToScene::ByteSize, "ByteSize")
		.def(&CaptureStageToScene::SetInitialized, "SetInitialized")
		;
	return true;
}
bool UpdateStageTax_fflua_reg(lua_State* state)
{
//for decltype
	UpdateStageTax* message(nullptr);
	message;
	ff::fflua_register_t<UpdateStageTax, ctor()>(state, "UpdateStageTax", "google::protobuf::Message")
		// required int32 stage_id = 1;
		.def(&UpdateStageTax::stage_id, "stage_id")
		.def(&UpdateStageTax::set_stage_id, "set_stage_id")
		// required int32 new_tax = 2;
		.def(&UpdateStageTax::new_tax, "new_tax")
		.def(&UpdateStageTax::set_new_tax, "set_new_tax")
		.def(&UpdateStageTax::ByteSize, "ByteSize")
		.def(&UpdateStageTax::SetInitialized, "SetInitialized")
		;
	return true;
}
bool CollectAllTax_fflua_reg(lua_State* state)
{
//for decltype
	CollectAllTax* message(nullptr);
	message;
	ff::fflua_register_t<CollectAllTax, ctor()>(state, "CollectAllTax", "google::protobuf::Message")
		// required int32 stage_id = 1;
		.def(&CollectAllTax::stage_id, "stage_id")
		.def(&CollectAllTax::set_stage_id, "set_stage_id")
		// optional int32 tax = 2;
		.def(&CollectAllTax::tax, "tax")
		.def(&CollectAllTax::set_tax, "set_tax")
		.def(&CollectAllTax::has_tax, "has_tax")
		.def(&CollectAllTax::ByteSize, "ByteSize")
		.def(&CollectAllTax::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuardStageSuccess_fflua_reg(lua_State* state)
{
//for decltype
	GuardStageSuccess* message(nullptr);
	message;
	ff::fflua_register_t<GuardStageSuccess, ctor()>(state, "GuardStageSuccess", "google::protobuf::Message")
		// required int32 stage_id = 1;
		.def(&GuardStageSuccess::stage_id, "stage_id")
		.def(&GuardStageSuccess::set_stage_id, "set_stage_id")
		// required string name = 2;
		.def(&GuardStageSuccess::name, "name")
		.def<void (GuardStageSuccess::*)(const std::string&)>(&GuardStageSuccess::set_name, "set_name")
		.def(&GuardStageSuccess::ByteSize, "ByteSize")
		.def(&GuardStageSuccess::SetInitialized, "SetInitialized")
		;
	return true;
}
bool BattleFormation_fflua_reg(lua_State* state)
{
//for decltype
	BattleFormation* message(nullptr);
	message;
	ff::fflua_register_t<BattleFormation, ctor()>(state, "BattleFormation", "google::protobuf::Message")
		// optional string player_name = 1;
		.def(&BattleFormation::player_name, "player_name")
		.def<void (BattleFormation::*)(const std::string&)>(&BattleFormation::set_player_name, "set_player_name")
		.def(&BattleFormation::has_player_name, "has_player_name")
		// repeated .Packet.ActorFullInfo actors = 2;
		.def(&BattleFormation::actors_size, "actors_size")
		.def<decltype(message->actors(0)) (BattleFormation::*)(int) const>(&BattleFormation::actors, "actors")
		.def<decltype(message->mutable_actors(0)) (BattleFormation::*)(int)>(&BattleFormation::mutable_actors, "mutable_actors")
		.def(&BattleFormation::add_actors, "add_actors")
		// optional fixed64 player_guid = 3;
		.def(&BattleFormation::player_guid, "player_guid")
		.def(&BattleFormation::set_player_guid, "set_player_guid")
		.def(&BattleFormation::has_player_guid, "has_player_guid")
		.def(&BattleFormation::ByteSize, "ByteSize")
		.def(&BattleFormation::SetInitialized, "SetInitialized")
		;
	return true;
}
bool Challengers_fflua_reg(lua_State* state)
{
//for decltype
	Challengers* message(nullptr);
	message;
	ff::fflua_register_t<Challengers, ctor()>(state, "Challengers", "google::protobuf::Message")
		// repeated string names = 1;
		.def(&Challengers::names_size, "names_size")
		.def<const std::string& (Challengers::*)(int) const>(&Challengers::names, "names")
		.def<void (Challengers::*)(int, const std::string&)>(&Challengers::set_names, "set_names")
		.def<void (Challengers::*)(const std::string&)>(&Challengers::add_names, "add_names")
		.def(&Challengers::ByteSize, "ByteSize")
		.def(&Challengers::SetInitialized, "SetInitialized")
		;
	return true;
}
bool SceneStageCaptain_fflua_reg(lua_State* state)
{
//for decltype
	SceneStageCaptain* message(nullptr);
	message;
	ff::fflua_register_t<SceneStageCaptain, ctor()>(state, "SceneStageCaptain", "google::protobuf::Message")
		// optional .Packet.PlayerBasicInfo player_info = 1;
		.def(&SceneStageCaptain::player_info, "player_info")
		.def(&SceneStageCaptain::mutable_player_info, "mutable_player_info")
		.def(&SceneStageCaptain::has_player_info, "has_player_info")
		// repeated .Packet.ActorFullInfo actors = 2;
		.def(&SceneStageCaptain::actors_size, "actors_size")
		.def<decltype(message->actors(0)) (SceneStageCaptain::*)(int) const>(&SceneStageCaptain::actors, "actors")
		.def<decltype(message->mutable_actors(0)) (SceneStageCaptain::*)(int)>(&SceneStageCaptain::mutable_actors, "mutable_actors")
		.def(&SceneStageCaptain::add_actors, "add_actors")
		.def(&SceneStageCaptain::ByteSize, "ByteSize")
		.def(&SceneStageCaptain::SetInitialized, "SetInitialized")
		;
	return true;
}
bool PlayerStages_fflua_reg(lua_State* state)
{
//for decltype
	PlayerStages* message(nullptr);
	message;
	ff::fflua_register_t<PlayerStages, ctor()>(state, "PlayerStages", "google::protobuf::Message")
		// required fixed64 player_guid = 1;
		.def(&PlayerStages::player_guid, "player_guid")
		.def(&PlayerStages::set_player_guid, "set_player_guid")
		// required int32 current_stage = 2;
		.def(&PlayerStages::current_stage, "current_stage")
		.def(&PlayerStages::set_current_stage, "set_current_stage")
		// repeated .Packet.PlayerStage stages = 3;
		.def(&PlayerStages::stages_size, "stages_size")
		.def<decltype(message->stages(0)) (PlayerStages::*)(int) const>(&PlayerStages::stages, "stages")
		.def<decltype(message->mutable_stages(0)) (PlayerStages::*)(int)>(&PlayerStages::mutable_stages, "mutable_stages")
		.def(&PlayerStages::add_stages, "add_stages")
		// repeated .Packet.RTHC configs = 4;
		.def(&PlayerStages::configs_size, "configs_size")
		.def<decltype(message->configs(0)) (PlayerStages::*)(int) const>(&PlayerStages::configs, "configs")
		.def<decltype(message->mutable_configs(0)) (PlayerStages::*)(int)>(&PlayerStages::mutable_configs, "mutable_configs")
		.def(&PlayerStages::add_configs, "add_configs")
		.def(&PlayerStages::ByteSize, "ByteSize")
		.def(&PlayerStages::SetInitialized, "SetInitialized")
		;
	return true;
}
bool PlayerStageDB_fflua_reg(lua_State* state)
{
//for decltype
	PlayerStageDB* message(nullptr);
	message;
	ff::fflua_register_t<PlayerStageDB, ctor()>(state, "PlayerStageDB", "google::protobuf::Message")
		// required fixed64 player_guid = 1;
		.def(&PlayerStageDB::player_guid, "player_guid")
		.def(&PlayerStageDB::set_player_guid, "set_player_guid")
		// required int32 current_stage = 2;
		.def(&PlayerStageDB::current_stage, "current_stage")
		.def(&PlayerStageDB::set_current_stage, "set_current_stage")
		// repeated .Packet.RTHC configs = 3;
		.def(&PlayerStageDB::configs_size, "configs_size")
		.def<decltype(message->configs(0)) (PlayerStageDB::*)(int) const>(&PlayerStageDB::configs, "configs")
		.def<decltype(message->mutable_configs(0)) (PlayerStageDB::*)(int)>(&PlayerStageDB::mutable_configs, "mutable_configs")
		.def(&PlayerStageDB::add_configs, "add_configs")
		.def(&PlayerStageDB::ByteSize, "ByteSize")
		.def(&PlayerStageDB::SetInitialized, "SetInitialized")
		;
	return true;
}
bool PlayerStage_fflua_reg(lua_State* state)
{
//for decltype
	PlayerStage* message(nullptr);
	message;
	ff::fflua_register_t<PlayerStage, ctor()>(state, "PlayerStage", "google::protobuf::Message")
		// required fixed64 player_guid = 1;
		.def(&PlayerStage::player_guid, "player_guid")
		.def(&PlayerStage::set_player_guid, "set_player_guid")
		// required int32 id = 2;
		.def(&PlayerStage::id, "id")
		.def(&PlayerStage::set_id, "set_id")
		// required bool raid = 3;
		.def(&PlayerStage::raid, "raid")
		.def(&PlayerStage::set_raid, "set_raid")
		// required int32 boss = 4;
		.def(&PlayerStage::boss, "boss")
		.def(&PlayerStage::set_boss, "set_boss")
		// required int32 num = 5;
		.def(&PlayerStage::num, "num")
		.def(&PlayerStage::set_num, "set_num")
		// required int32 den = 6;
		.def(&PlayerStage::den, "den")
		.def(&PlayerStage::set_den, "set_den")
		.def(&PlayerStage::ByteSize, "ByteSize")
		.def(&PlayerStage::SetInitialized, "SetInitialized")
		;
	return true;
}
bool RTHC_fflua_reg(lua_State* state)
{
//for decltype
	RTHC* message(nullptr);
	message;
	ff::fflua_register_t<RTHC, ctor()>(state, "RTHC", "google::protobuf::Message")
		// required int32 stage_id = 1;
		.def(&RTHC::stage_id, "stage_id")
		.def(&RTHC::set_stage_id, "set_stage_id")
		// required fixed64 total_time = 2;
		.def(&RTHC::total_time, "total_time")
		.def(&RTHC::set_total_time, "set_total_time")
		// required fixed64 hook_time = 11;
		.def(&RTHC::hook_time, "hook_time")
		.def(&RTHC::set_hook_time, "set_hook_time")
		// required int32 relate_score = 9;
		.def(&RTHC::relate_score, "relate_score")
		.def(&RTHC::set_relate_score, "set_relate_score")
		// required bool calc_done = 10;
		.def(&RTHC::calc_done, "calc_done")
		.def(&RTHC::set_calc_done, "set_calc_done")
		// required int32 wave_exp = 12;
		.def(&RTHC::wave_exp, "wave_exp")
		.def(&RTHC::set_wave_exp, "set_wave_exp")
		// required int32 wave_gold = 13;
		.def(&RTHC::wave_gold, "wave_gold")
		.def(&RTHC::set_wave_gold, "set_wave_gold")
		// required fixed64 wave_mill_sec = 14;
		.def(&RTHC::wave_mill_sec, "wave_mill_sec")
		.def(&RTHC::set_wave_mill_sec, "set_wave_mill_sec")
		// required fixed64 dead_mill_sec = 15;
		.def(&RTHC::dead_mill_sec, "dead_mill_sec")
		.def(&RTHC::set_dead_mill_sec, "set_dead_mill_sec")
		// required int32 wave_kill = 16;
		.def(&RTHC::wave_kill, "wave_kill")
		.def(&RTHC::set_wave_kill, "set_wave_kill")
		.def(&RTHC::ByteSize, "ByteSize")
		.def(&RTHC::SetInitialized, "SetInitialized")
		;
	return true;
}
bool ResetRealTimeHookEfficient_fflua_reg(lua_State* state)
{
//for decltype
	ResetRealTimeHookEfficient* message(nullptr);
	message;
	ff::fflua_register_t<ResetRealTimeHookEfficient, ctor()>(state, "ResetRealTimeHookEfficient", "google::protobuf::Message");
	return true;
}
bool RealTimeHookEfficient_fflua_reg(lua_State* state)
{
//for decltype
	RealTimeHookEfficient* message(nullptr);
	message;
	ff::fflua_register_t<RealTimeHookEfficient, ctor()>(state, "RealTimeHookEfficient", "google::protobuf::Message")
		// required .Packet.RTHC config = 1;
		.def(&RealTimeHookEfficient::config, "config")
		.def(&RealTimeHookEfficient::mutable_config, "mutable_config")
		// repeated int32 item_ids = 2;
		.def(&RealTimeHookEfficient::item_ids_size, "item_ids_size")
		.def<decltype(message->item_ids(0)) (RealTimeHookEfficient::*)(int) const>(&RealTimeHookEfficient::item_ids, "item_ids")
		.def<void(RealTimeHookEfficient::*)(int, const decltype(message->item_ids(0)))>(&RealTimeHookEfficient::set_item_ids, "set_item_ids")
		.def(&RealTimeHookEfficient::add_item_ids, "add_item_ids")
		// repeated int32 item_counts = 3;
		.def(&RealTimeHookEfficient::item_counts_size, "item_counts_size")
		.def<decltype(message->item_counts(0)) (RealTimeHookEfficient::*)(int) const>(&RealTimeHookEfficient::item_counts, "item_counts")
		.def<void(RealTimeHookEfficient::*)(int, const decltype(message->item_counts(0)))>(&RealTimeHookEfficient::set_item_counts, "set_item_counts")
		.def(&RealTimeHookEfficient::add_item_counts, "add_item_counts")
		// required int32 up_level = 4;
		.def(&RealTimeHookEfficient::up_level, "up_level")
		.def(&RealTimeHookEfficient::set_up_level, "set_up_level")
		// required fixed64 off_time = 5;
		.def(&RealTimeHookEfficient::off_time, "off_time")
		.def(&RealTimeHookEfficient::set_off_time, "set_off_time")
		// required int32 level_up_need_seconds = 6;
		.def(&RealTimeHookEfficient::level_up_need_seconds, "level_up_need_seconds")
		.def(&RealTimeHookEfficient::set_level_up_need_seconds, "set_level_up_need_seconds")
		// required int32 total_exp = 7;
		.def(&RealTimeHookEfficient::total_exp, "total_exp")
		.def(&RealTimeHookEfficient::set_total_exp, "set_total_exp")
		// required int32 total_exp_extra = 20;
		.def(&RealTimeHookEfficient::total_exp_extra, "total_exp_extra")
		.def(&RealTimeHookEfficient::set_total_exp_extra, "set_total_exp_extra")
		// required int32 total_gold = 8;
		.def(&RealTimeHookEfficient::total_gold, "total_gold")
		.def(&RealTimeHookEfficient::set_total_gold, "set_total_gold")
		// required int32 battle_times = 9;
		.def(&RealTimeHookEfficient::battle_times, "battle_times")
		.def(&RealTimeHookEfficient::set_battle_times, "set_battle_times")
		// required int32 battle_time_costs = 19;
		.def(&RealTimeHookEfficient::battle_time_costs, "battle_time_costs")
		.def(&RealTimeHookEfficient::set_battle_time_costs, "set_battle_time_costs")
		// required int32 monster_kills = 10;
		.def(&RealTimeHookEfficient::monster_kills, "monster_kills")
		.def(&RealTimeHookEfficient::set_monster_kills, "set_monster_kills")
		// required int32 dead_times = 11;
		.def(&RealTimeHookEfficient::dead_times, "dead_times")
		.def(&RealTimeHookEfficient::set_dead_times, "set_dead_times")
		// repeated int32 boss_stage_ids = 12;
		.def(&RealTimeHookEfficient::boss_stage_ids_size, "boss_stage_ids_size")
		.def<decltype(message->boss_stage_ids(0)) (RealTimeHookEfficient::*)(int) const>(&RealTimeHookEfficient::boss_stage_ids, "boss_stage_ids")
		.def<void(RealTimeHookEfficient::*)(int, const decltype(message->boss_stage_ids(0)))>(&RealTimeHookEfficient::set_boss_stage_ids, "set_boss_stage_ids")
		.def(&RealTimeHookEfficient::add_boss_stage_ids, "add_boss_stage_ids")
		// repeated int32 boss_count = 13;
		.def(&RealTimeHookEfficient::boss_count_size, "boss_count_size")
		.def<decltype(message->boss_count(0)) (RealTimeHookEfficient::*)(int) const>(&RealTimeHookEfficient::boss_count, "boss_count")
		.def<void(RealTimeHookEfficient::*)(int, const decltype(message->boss_count(0)))>(&RealTimeHookEfficient::set_boss_count, "set_boss_count")
		.def(&RealTimeHookEfficient::add_boss_count, "add_boss_count")
		// required int32 green_equip_count = 14;
		.def(&RealTimeHookEfficient::green_equip_count, "green_equip_count")
		.def(&RealTimeHookEfficient::set_green_equip_count, "set_green_equip_count")
		// required int32 green_equip_dismantle = 15;
		.def(&RealTimeHookEfficient::green_equip_dismantle, "green_equip_dismantle")
		.def(&RealTimeHookEfficient::set_green_equip_dismantle, "set_green_equip_dismantle")
		// required int32 blue_equip_count = 16;
		.def(&RealTimeHookEfficient::blue_equip_count, "blue_equip_count")
		.def(&RealTimeHookEfficient::set_blue_equip_count, "set_blue_equip_count")
		// required int32 blue_equip_count_dismantle = 17;
		.def(&RealTimeHookEfficient::blue_equip_count_dismantle, "blue_equip_count_dismantle")
		.def(&RealTimeHookEfficient::set_blue_equip_count_dismantle, "set_blue_equip_count_dismantle")
		// required int32 purple_equip_count = 18;
		.def(&RealTimeHookEfficient::purple_equip_count, "purple_equip_count")
		.def(&RealTimeHookEfficient::set_purple_equip_count, "set_purple_equip_count")
		.def(&RealTimeHookEfficient::ByteSize, "ByteSize")
		.def(&RealTimeHookEfficient::SetInitialized, "SetInitialized")
		;
	return true;
}
bool SceneStage_fflua_regist_all(lua_State* state)
{
	GetSceneStageInfo_fflua_reg(state);
	SceneStageInfo_fflua_reg(state);
	HookRank_fflua_reg(state);
	HookRankUser_fflua_reg(state);
	CaptureStage_fflua_reg(state);
	CaptureStageToScene_fflua_reg(state);
	UpdateStageTax_fflua_reg(state);
	CollectAllTax_fflua_reg(state);
	GuardStageSuccess_fflua_reg(state);
	BattleFormation_fflua_reg(state);
	Challengers_fflua_reg(state);
	SceneStageCaptain_fflua_reg(state);
	PlayerStages_fflua_reg(state);
	PlayerStageDB_fflua_reg(state);
	PlayerStage_fflua_reg(state);
	RTHC_fflua_reg(state);
	ResetRealTimeHookEfficient_fflua_reg(state);
	RealTimeHookEfficient_fflua_reg(state);
	return true;
}
}
