// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LootMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LootMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Packet {

namespace {

const ::google::protobuf::Descriptor* LootPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LootPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* LootNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LootNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_LootMessage_2eproto() {
  protobuf_AddDesc_LootMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "LootMessage.proto");
  GOOGLE_CHECK(file != NULL);
  LootPlayer_descriptor_ = file->message_type(0);
  static const int LootPlayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LootPlayer, target_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LootPlayer, battle_group_id_),
  };
  LootPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LootPlayer_descriptor_,
      LootPlayer::default_instance_,
      LootPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LootPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LootPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LootPlayer));
  LootNotify_descriptor_ = file->message_type(1);
  static const int LootNotify_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LootNotify, loot_coin_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LootNotify, loot_coin_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LootNotify, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LootNotify, item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LootNotify, be_loot_player_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LootNotify, be_loot_player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LootNotify, loot_player_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LootNotify, loot_player_name_),
  };
  LootNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LootNotify_descriptor_,
      LootNotify::default_instance_,
      LootNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LootNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LootNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LootNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_LootMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LootPlayer_descriptor_, &LootPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LootNotify_descriptor_, &LootNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_LootMessage_2eproto() {
  delete LootPlayer::default_instance_;
  delete LootPlayer_reflection_;
  delete LootNotify::default_instance_;
  delete LootNotify_reflection_;
}

void protobuf_AddDesc_LootMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Packet::protobuf_AddDesc_ProtoBufOption_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021LootMessage.proto\022\006Packet\032\024ProtoBufOpt"
    "ion.proto\":\n\nLootPlayer\022\023\n\013target_guid\030\001"
    " \002(\006\022\027\n\017battle_group_id\030\002 \002(\005\"\311\001\n\nLootNo"
    "tify\022\023\n\013loot_coin_a\030\001 \002(\005\022\023\n\013loot_coin_b"
    "\030\002 \002(\005\022\017\n\007item_id\030\003 \003(\005\022\022\n\nitem_count\030\004 "
    "\003(\005\022\033\n\023be_loot_player_guid\030\005 \002(\006\022\033\n\023be_l"
    "oot_player_name\030\006 \002(\t\022\030\n\020loot_player_gui"
    "d\030\007 \002(\006\022\030\n\020loot_player_name\030\010 \002(\t", 313);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LootMessage.proto", &protobuf_RegisterTypes);
  LootPlayer::default_instance_ = new LootPlayer();
  LootNotify::default_instance_ = new LootNotify();
  LootPlayer::default_instance_->InitAsDefaultInstance();
  LootNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LootMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LootMessage_2eproto {
  StaticDescriptorInitializer_LootMessage_2eproto() {
    protobuf_AddDesc_LootMessage_2eproto();
  }
} static_descriptor_initializer_LootMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LootPlayer::kTargetGuidFieldNumber;
const int LootPlayer::kBattleGroupIdFieldNumber;
#endif  // !_MSC_VER

LootPlayer::LootPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LootPlayer::InitAsDefaultInstance() {
}

LootPlayer::LootPlayer(const LootPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LootPlayer::SharedCtor() {
  _cached_size_ = 0;
  target_guid_ = GOOGLE_ULONGLONG(0);
  battle_group_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LootPlayer::~LootPlayer() {
  SharedDtor();
}

void LootPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LootPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LootPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LootPlayer_descriptor_;
}

const LootPlayer& LootPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LootMessage_2eproto();
  return *default_instance_;
}

LootPlayer* LootPlayer::default_instance_ = NULL;

LootPlayer* LootPlayer::New() const {
  return new LootPlayer;
}

void LootPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    target_guid_ = GOOGLE_ULONGLONG(0);
    battle_group_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool LootPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 target_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &target_guid_)));
          set_has_target_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_group_id;
        break;
      }

      // required int32 battle_group_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_group_id_)));
          set_has_battle_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void LootPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 target_guid = 1;
  if (has_target_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->target_guid(), output);
  }

  // required int32 battle_group_id = 2;
  if (has_battle_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->battle_group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LootPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 target_guid = 1;
  if (has_target_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->target_guid(), target);
  }

  // required int32 battle_group_id = 2;
  if (has_battle_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->battle_group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LootPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 target_guid = 1;
    if (has_target_guid()) {
      total_size += 1 + 8;
    }

    // required int32 battle_group_id = 2;
    if (has_battle_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LootPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LootPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LootPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void LootPlayer::MergeFrom(const LootPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_guid()) {
      set_target_guid(from.target_guid());
    }
    if (from.has_battle_group_id()) {
      set_battle_group_id(from.battle_group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void LootPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void LootPlayer::CopyFrom(const LootPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool LootPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LootPlayer::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void LootPlayer::Swap(LootPlayer* other) {
  if (other != this) {
    std::swap(target_guid_, other->target_guid_);
    std::swap(battle_group_id_, other->battle_group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata LootPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LootPlayer_descriptor_;
  metadata.reflection = LootPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LootNotify::kLootCoinAFieldNumber;
const int LootNotify::kLootCoinBFieldNumber;
const int LootNotify::kItemIdFieldNumber;
const int LootNotify::kItemCountFieldNumber;
const int LootNotify::kBeLootPlayerGuidFieldNumber;
const int LootNotify::kBeLootPlayerNameFieldNumber;
const int LootNotify::kLootPlayerGuidFieldNumber;
const int LootNotify::kLootPlayerNameFieldNumber;
#endif  // !_MSC_VER

LootNotify::LootNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LootNotify::InitAsDefaultInstance() {
}

LootNotify::LootNotify(const LootNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LootNotify::SharedCtor() {
  _cached_size_ = 0;
  loot_coin_a_ = 0;
  loot_coin_b_ = 0;
  be_loot_player_guid_ = GOOGLE_ULONGLONG(0);
  be_loot_player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  loot_player_guid_ = GOOGLE_ULONGLONG(0);
  loot_player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LootNotify::~LootNotify() {
  SharedDtor();
}

void LootNotify::SharedDtor() {
  if (be_loot_player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete be_loot_player_name_;
  }
  if (loot_player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete loot_player_name_;
  }
  if (this != default_instance_) {
  }
}

void LootNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LootNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LootNotify_descriptor_;
}

const LootNotify& LootNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LootMessage_2eproto();
  return *default_instance_;
}

LootNotify* LootNotify::default_instance_ = NULL;

LootNotify* LootNotify::New() const {
  return new LootNotify;
}

void LootNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    loot_coin_a_ = 0;
    loot_coin_b_ = 0;
    be_loot_player_guid_ = GOOGLE_ULONGLONG(0);
    if (has_be_loot_player_name()) {
      if (be_loot_player_name_ != &::google::protobuf::internal::kEmptyString) {
        be_loot_player_name_->clear();
      }
    }
    loot_player_guid_ = GOOGLE_ULONGLONG(0);
    if (has_loot_player_name()) {
      if (loot_player_name_ != &::google::protobuf::internal::kEmptyString) {
        loot_player_name_->clear();
      }
    }
  }
  item_id_.Clear();
  item_count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool LootNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 loot_coin_a = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loot_coin_a_)));
          set_has_loot_coin_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_loot_coin_b;
        break;
      }

      // required int32 loot_coin_b = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loot_coin_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loot_coin_b_)));
          set_has_loot_coin_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_id;
        break;
      }

      // repeated int32 item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_item_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_id;
        if (input->ExpectTag(32)) goto parse_item_count;
        break;
      }

      // repeated int32 item_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_item_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_count;
        if (input->ExpectTag(41)) goto parse_be_loot_player_guid;
        break;
      }

      // required fixed64 be_loot_player_guid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_be_loot_player_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &be_loot_player_guid_)));
          set_has_be_loot_player_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_be_loot_player_name;
        break;
      }

      // required string be_loot_player_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_be_loot_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_be_loot_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->be_loot_player_name().data(), this->be_loot_player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_loot_player_guid;
        break;
      }

      // required fixed64 loot_player_guid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_loot_player_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &loot_player_guid_)));
          set_has_loot_player_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_loot_player_name;
        break;
      }

      // required string loot_player_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loot_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loot_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->loot_player_name().data(), this->loot_player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void LootNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 loot_coin_a = 1;
  if (has_loot_coin_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->loot_coin_a(), output);
  }

  // required int32 loot_coin_b = 2;
  if (has_loot_coin_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->loot_coin_b(), output);
  }

  // repeated int32 item_id = 3;
  for (int i = 0; i < this->item_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->item_id(i), output);
  }

  // repeated int32 item_count = 4;
  for (int i = 0; i < this->item_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->item_count(i), output);
  }

  // required fixed64 be_loot_player_guid = 5;
  if (has_be_loot_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->be_loot_player_guid(), output);
  }

  // required string be_loot_player_name = 6;
  if (has_be_loot_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->be_loot_player_name().data(), this->be_loot_player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->be_loot_player_name(), output);
  }

  // required fixed64 loot_player_guid = 7;
  if (has_loot_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->loot_player_guid(), output);
  }

  // required string loot_player_name = 8;
  if (has_loot_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loot_player_name().data(), this->loot_player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->loot_player_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LootNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 loot_coin_a = 1;
  if (has_loot_coin_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->loot_coin_a(), target);
  }

  // required int32 loot_coin_b = 2;
  if (has_loot_coin_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->loot_coin_b(), target);
  }

  // repeated int32 item_id = 3;
  for (int i = 0; i < this->item_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->item_id(i), target);
  }

  // repeated int32 item_count = 4;
  for (int i = 0; i < this->item_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->item_count(i), target);
  }

  // required fixed64 be_loot_player_guid = 5;
  if (has_be_loot_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->be_loot_player_guid(), target);
  }

  // required string be_loot_player_name = 6;
  if (has_be_loot_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->be_loot_player_name().data(), this->be_loot_player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->be_loot_player_name(), target);
  }

  // required fixed64 loot_player_guid = 7;
  if (has_loot_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->loot_player_guid(), target);
  }

  // required string loot_player_name = 8;
  if (has_loot_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loot_player_name().data(), this->loot_player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->loot_player_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LootNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 loot_coin_a = 1;
    if (has_loot_coin_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loot_coin_a());
    }

    // required int32 loot_coin_b = 2;
    if (has_loot_coin_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loot_coin_b());
    }

    // required fixed64 be_loot_player_guid = 5;
    if (has_be_loot_player_guid()) {
      total_size += 1 + 8;
    }

    // required string be_loot_player_name = 6;
    if (has_be_loot_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->be_loot_player_name());
    }

    // required fixed64 loot_player_guid = 7;
    if (has_loot_player_guid()) {
      total_size += 1 + 8;
    }

    // required string loot_player_name = 8;
    if (has_loot_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loot_player_name());
    }

  }
  // repeated int32 item_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item_id(i));
    }
    total_size += 1 * this->item_id_size() + data_size;
  }

  // repeated int32 item_count = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item_count(i));
    }
    total_size += 1 * this->item_count_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LootNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LootNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LootNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void LootNotify::MergeFrom(const LootNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_id_.MergeFrom(from.item_id_);
  item_count_.MergeFrom(from.item_count_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_loot_coin_a()) {
      set_loot_coin_a(from.loot_coin_a());
    }
    if (from.has_loot_coin_b()) {
      set_loot_coin_b(from.loot_coin_b());
    }
    if (from.has_be_loot_player_guid()) {
      set_be_loot_player_guid(from.be_loot_player_guid());
    }
    if (from.has_be_loot_player_name()) {
      set_be_loot_player_name(from.be_loot_player_name());
    }
    if (from.has_loot_player_guid()) {
      set_loot_player_guid(from.loot_player_guid());
    }
    if (from.has_loot_player_name()) {
      set_loot_player_name(from.loot_player_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void LootNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void LootNotify::CopyFrom(const LootNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool LootNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000f3) != 0x000000f3) return false;

  return true;
}

void LootNotify::SetInitialized() {
  _has_bits_[0] |= 0x000000f3;

  return;
}

void LootNotify::Swap(LootNotify* other) {
  if (other != this) {
    std::swap(loot_coin_a_, other->loot_coin_a_);
    std::swap(loot_coin_b_, other->loot_coin_b_);
    item_id_.Swap(&other->item_id_);
    item_count_.Swap(&other->item_count_);
    std::swap(be_loot_player_guid_, other->be_loot_player_guid_);
    std::swap(be_loot_player_name_, other->be_loot_player_name_);
    std::swap(loot_player_guid_, other->loot_player_guid_);
    std::swap(loot_player_name_, other->loot_player_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata LootNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LootNotify_descriptor_;
  metadata.reflection = LootNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

// @@protoc_insertion_point(global_scope)
