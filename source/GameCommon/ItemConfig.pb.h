// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ItemConfig.proto

#ifndef PROTOBUF_ItemConfig_2eproto__INCLUDED
#define PROTOBUF_ItemConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "AllConfigEnum.pb.h"
#include "ProtoBufOption.pb.h"
#include "BattleInfo.pb.h"
#include "EquipmentConfig.pb.h"
// @@protoc_insertion_point(includes)

namespace Config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ItemConfig_2eproto();
void protobuf_AssignDesc_ItemConfig_2eproto();
void protobuf_ShutdownFile_ItemConfig_2eproto();

class ItemConfig;
class GemConfig;
class GemCostConfig;
class ItemAddLog;
class ItemDelLog;
class EquipBookConfig;

// ===================================================================

class ItemConfig : public ::google::protobuf::Message {
 public:
  ItemConfig();
  virtual ~ItemConfig();

  ItemConfig(const ItemConfig& from);

  inline ItemConfig& operator=(const ItemConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemConfig& default_instance();

  void Swap(ItemConfig* other);

  // implements Message ----------------------------------------------

  ItemConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemConfig& from);
  void MergeFrom(const ItemConfig& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required .Config.ItemType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::Config::ItemType type() const;
  inline void set_type(::Config::ItemType value);

  // required int32 quality = 3;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 3;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);

  // required int32 block_max_count = 4;
  inline bool has_block_max_count() const;
  inline void clear_block_max_count();
  static const int kBlockMaxCountFieldNumber = 4;
  inline ::google::protobuf::int32 block_max_count() const;
  inline void set_block_max_count(::google::protobuf::int32 value);

  // required int32 can_sale = 5;
  inline bool has_can_sale() const;
  inline void clear_can_sale();
  static const int kCanSaleFieldNumber = 5;
  inline ::google::protobuf::int32 can_sale() const;
  inline void set_can_sale(::google::protobuf::int32 value);

  // required int32 coin = 6;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 6;
  inline ::google::protobuf::int32 coin() const;
  inline void set_coin(::google::protobuf::int32 value);

  // required int32 min_level_limit = 7;
  inline bool has_min_level_limit() const;
  inline void clear_min_level_limit();
  static const int kMinLevelLimitFieldNumber = 7;
  inline ::google::protobuf::int32 min_level_limit() const;
  inline void set_min_level_limit(::google::protobuf::int32 value);

  // required int32 max_level_limit = 8;
  inline bool has_max_level_limit() const;
  inline void clear_max_level_limit();
  static const int kMaxLevelLimitFieldNumber = 8;
  inline ::google::protobuf::int32 max_level_limit() const;
  inline void set_max_level_limit(::google::protobuf::int32 value);

  // required int32 level = 9;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 9;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required bool can_use = 10;
  inline bool has_can_use() const;
  inline void clear_can_use();
  static const int kCanUseFieldNumber = 10;
  inline bool can_use() const;
  inline void set_can_use(bool value);

  // required bool can_destroy = 11;
  inline bool has_can_destroy() const;
  inline void clear_can_destroy();
  static const int kCanDestroyFieldNumber = 11;
  inline bool can_destroy() const;
  inline void set_can_destroy(bool value);

  // required int32 impact = 12;
  inline bool has_impact() const;
  inline void clear_impact();
  static const int kImpactFieldNumber = 12;
  inline ::google::protobuf::int32 impact() const;
  inline void set_impact(::google::protobuf::int32 value);

  // required int32 cool_down = 13;
  inline bool has_cool_down() const;
  inline void clear_cool_down();
  static const int kCoolDownFieldNumber = 13;
  inline ::google::protobuf::int32 cool_down() const;
  inline void set_cool_down(::google::protobuf::int32 value);

  // required int32 life_time = 14;
  inline bool has_life_time() const;
  inline void clear_life_time();
  static const int kLifeTimeFieldNumber = 14;
  inline ::google::protobuf::int32 life_time() const;
  inline void set_life_time(::google::protobuf::int32 value);

  // required int32 script_id = 15;
  inline bool has_script_id() const;
  inline void clear_script_id();
  static const int kScriptIdFieldNumber = 15;
  inline ::google::protobuf::int32 script_id() const;
  inline void set_script_id(::google::protobuf::int32 value);

  // repeated int32 param = 16;
  inline int param_size() const;
  inline void clear_param();
  static const int kParamFieldNumber = 16;
  inline ::google::protobuf::int32 param(int index) const;
  inline void set_param(int index, ::google::protobuf::int32 value);
  inline void add_param(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      param() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_param();

  // required int32 value = 17;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 17;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Config.ItemConfig)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_block_max_count();
  inline void clear_has_block_max_count();
  inline void set_has_can_sale();
  inline void clear_has_can_sale();
  inline void set_has_coin();
  inline void clear_has_coin();
  inline void set_has_min_level_limit();
  inline void clear_has_min_level_limit();
  inline void set_has_max_level_limit();
  inline void clear_has_max_level_limit();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_can_use();
  inline void clear_has_can_use();
  inline void set_has_can_destroy();
  inline void clear_has_can_destroy();
  inline void set_has_impact();
  inline void clear_has_impact();
  inline void set_has_cool_down();
  inline void clear_has_cool_down();
  inline void set_has_life_time();
  inline void clear_has_life_time();
  inline void set_has_script_id();
  inline void clear_has_script_id();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  int type_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::int32 block_max_count_;
  ::google::protobuf::int32 can_sale_;
  ::google::protobuf::int32 coin_;
  ::google::protobuf::int32 min_level_limit_;
  ::google::protobuf::int32 max_level_limit_;
  ::google::protobuf::int32 level_;
  bool can_use_;
  bool can_destroy_;
  ::google::protobuf::int32 impact_;
  ::google::protobuf::int32 cool_down_;
  ::google::protobuf::int32 life_time_;
  ::google::protobuf::int32 script_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > param_;
  ::google::protobuf::int32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_ItemConfig_2eproto();
  friend void protobuf_AssignDesc_ItemConfig_2eproto();
  friend void protobuf_ShutdownFile_ItemConfig_2eproto();

  void InitAsDefaultInstance();
  static ItemConfig* default_instance_;
};
// -------------------------------------------------------------------

class GemConfig : public ::google::protobuf::Message {
 public:
  GemConfig();
  virtual ~GemConfig();

  GemConfig(const GemConfig& from);

  inline GemConfig& operator=(const GemConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GemConfig& default_instance();

  void Swap(GemConfig* other);

  // implements Message ----------------------------------------------

  GemConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GemConfig& from);
  void MergeFrom(const GemConfig& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string property = 2;
  inline bool has_property() const;
  inline void clear_property();
  static const int kPropertyFieldNumber = 2;
  inline const ::std::string& property() const;
  inline void set_property(const ::std::string& value);
  inline void set_property(const char* value);
  inline void set_property(const char* value, size_t size);
  inline ::std::string* mutable_property();
  inline ::std::string* release_property();
  inline void set_allocated_property(::std::string* property);

  // required int32 value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // required int32 fusion_id = 4;
  inline bool has_fusion_id() const;
  inline void clear_fusion_id();
  static const int kFusionIdFieldNumber = 4;
  inline ::google::protobuf::int32 fusion_id() const;
  inline void set_fusion_id(::google::protobuf::int32 value);

  // required int32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // repeated .Config.EquipmentType inset_locations = 6;
  inline int inset_locations_size() const;
  inline void clear_inset_locations();
  static const int kInsetLocationsFieldNumber = 6;
  inline ::Config::EquipmentType inset_locations(int index) const;
  inline void set_inset_locations(int index, ::Config::EquipmentType value);
  inline void add_inset_locations(::Config::EquipmentType value);
  inline const ::google::protobuf::RepeatedField<int>& inset_locations() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_inset_locations();

  // required int32 block_max_count = 7;
  inline bool has_block_max_count() const;
  inline void clear_block_max_count();
  static const int kBlockMaxCountFieldNumber = 7;
  inline ::google::protobuf::int32 block_max_count() const;
  inline void set_block_max_count(::google::protobuf::int32 value);

  // required int32 quality = 8;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 8;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);

  // required int32 type = 9;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 9;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 coin = 10;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 10;
  inline ::google::protobuf::int32 coin() const;
  inline void set_coin(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Config.GemConfig)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_property();
  inline void clear_has_property();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_fusion_id();
  inline void clear_has_fusion_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_block_max_count();
  inline void clear_has_block_max_count();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_coin();
  inline void clear_has_coin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* property_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 value_;
  ::google::protobuf::int32 fusion_id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::RepeatedField<int> inset_locations_;
  ::google::protobuf::int32 block_max_count_;
  ::google::protobuf::int32 quality_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 coin_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_ItemConfig_2eproto();
  friend void protobuf_AssignDesc_ItemConfig_2eproto();
  friend void protobuf_ShutdownFile_ItemConfig_2eproto();

  void InitAsDefaultInstance();
  static GemConfig* default_instance_;
};
// -------------------------------------------------------------------

class GemCostConfig : public ::google::protobuf::Message {
 public:
  GemCostConfig();
  virtual ~GemCostConfig();

  GemCostConfig(const GemCostConfig& from);

  inline GemCostConfig& operator=(const GemCostConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GemCostConfig& default_instance();

  void Swap(GemCostConfig* other);

  // implements Message ----------------------------------------------

  GemCostConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GemCostConfig& from);
  void MergeFrom(const GemCostConfig& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required int32 rate = 2;
  inline bool has_rate() const;
  inline void clear_rate();
  static const int kRateFieldNumber = 2;
  inline ::google::protobuf::int32 rate() const;
  inline void set_rate(::google::protobuf::int32 value);

  // required int32 cost_item = 3;
  inline bool has_cost_item() const;
  inline void clear_cost_item();
  static const int kCostItemFieldNumber = 3;
  inline ::google::protobuf::int32 cost_item() const;
  inline void set_cost_item(::google::protobuf::int32 value);

  // required int32 cost_count = 4;
  inline bool has_cost_count() const;
  inline void clear_cost_count();
  static const int kCostCountFieldNumber = 4;
  inline ::google::protobuf::int32 cost_count() const;
  inline void set_cost_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Config.GemCostConfig)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_rate();
  inline void clear_has_rate();
  inline void set_has_cost_item();
  inline void clear_has_cost_item();
  inline void set_has_cost_count();
  inline void clear_has_cost_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 rate_;
  ::google::protobuf::int32 cost_item_;
  ::google::protobuf::int32 cost_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ItemConfig_2eproto();
  friend void protobuf_AssignDesc_ItemConfig_2eproto();
  friend void protobuf_ShutdownFile_ItemConfig_2eproto();

  void InitAsDefaultInstance();
  static GemCostConfig* default_instance_;
};
// -------------------------------------------------------------------

class ItemAddLog : public ::google::protobuf::Message {
 public:
  ItemAddLog();
  virtual ~ItemAddLog();

  ItemAddLog(const ItemAddLog& from);

  inline ItemAddLog& operator=(const ItemAddLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemAddLog& default_instance();

  void Swap(ItemAddLog* other);

  // implements Message ----------------------------------------------

  ItemAddLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemAddLog& from);
  void MergeFrom(const ItemAddLog& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // required fixed64 player_guid = 2;
  inline bool has_player_guid() const;
  inline void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 2;
  inline ::google::protobuf::uint64 player_guid() const;
  inline void set_player_guid(::google::protobuf::uint64 value);

  // required fixed64 container_guid = 3;
  inline bool has_container_guid() const;
  inline void clear_container_guid();
  static const int kContainerGuidFieldNumber = 3;
  inline ::google::protobuf::uint64 container_guid() const;
  inline void set_container_guid(::google::protobuf::uint64 value);

  // required .Config.ItemAddLogType add_type = 4;
  inline bool has_add_type() const;
  inline void clear_add_type();
  static const int kAddTypeFieldNumber = 4;
  inline ::Config::ItemAddLogType add_type() const;
  inline void set_add_type(::Config::ItemAddLogType value);

  // required int32 item_id = 5;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 5;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);

  // required int32 item_amount = 6;
  inline bool has_item_amount() const;
  inline void clear_item_amount();
  static const int kItemAmountFieldNumber = 6;
  inline ::google::protobuf::int32 item_amount() const;
  inline void set_item_amount(::google::protobuf::int32 value);

  // required fixed64 source_id = 7;
  inline bool has_source_id() const;
  inline void clear_source_id();
  static const int kSourceIdFieldNumber = 7;
  inline ::google::protobuf::uint64 source_id() const;
  inline void set_source_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Config.ItemAddLog)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_player_guid();
  inline void clear_has_player_guid();
  inline void set_has_container_guid();
  inline void clear_has_container_guid();
  inline void set_has_add_type();
  inline void clear_has_add_type();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_amount();
  inline void clear_has_item_amount();
  inline void set_has_source_id();
  inline void clear_has_source_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::google::protobuf::uint64 player_guid_;
  ::google::protobuf::uint64 container_guid_;
  int add_type_;
  ::google::protobuf::int32 item_id_;
  ::google::protobuf::uint64 source_id_;
  ::google::protobuf::int32 item_amount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_ItemConfig_2eproto();
  friend void protobuf_AssignDesc_ItemConfig_2eproto();
  friend void protobuf_ShutdownFile_ItemConfig_2eproto();

  void InitAsDefaultInstance();
  static ItemAddLog* default_instance_;
};
// -------------------------------------------------------------------

class ItemDelLog : public ::google::protobuf::Message {
 public:
  ItemDelLog();
  virtual ~ItemDelLog();

  ItemDelLog(const ItemDelLog& from);

  inline ItemDelLog& operator=(const ItemDelLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemDelLog& default_instance();

  void Swap(ItemDelLog* other);

  // implements Message ----------------------------------------------

  ItemDelLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemDelLog& from);
  void MergeFrom(const ItemDelLog& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // required fixed64 player_guid = 2;
  inline bool has_player_guid() const;
  inline void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 2;
  inline ::google::protobuf::uint64 player_guid() const;
  inline void set_player_guid(::google::protobuf::uint64 value);

  // required fixed64 container_guid = 3;
  inline bool has_container_guid() const;
  inline void clear_container_guid();
  static const int kContainerGuidFieldNumber = 3;
  inline ::google::protobuf::uint64 container_guid() const;
  inline void set_container_guid(::google::protobuf::uint64 value);

  // required .Config.ItemDelLogType del_type = 4;
  inline bool has_del_type() const;
  inline void clear_del_type();
  static const int kDelTypeFieldNumber = 4;
  inline ::Config::ItemDelLogType del_type() const;
  inline void set_del_type(::Config::ItemDelLogType value);

  // required int32 item_id = 5;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 5;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);

  // required int32 item_amount = 6;
  inline bool has_item_amount() const;
  inline void clear_item_amount();
  static const int kItemAmountFieldNumber = 6;
  inline ::google::protobuf::int32 item_amount() const;
  inline void set_item_amount(::google::protobuf::int32 value);

  // required fixed64 source_id = 7;
  inline bool has_source_id() const;
  inline void clear_source_id();
  static const int kSourceIdFieldNumber = 7;
  inline ::google::protobuf::uint64 source_id() const;
  inline void set_source_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Config.ItemDelLog)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_player_guid();
  inline void clear_has_player_guid();
  inline void set_has_container_guid();
  inline void clear_has_container_guid();
  inline void set_has_del_type();
  inline void clear_has_del_type();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_amount();
  inline void clear_has_item_amount();
  inline void set_has_source_id();
  inline void clear_has_source_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::google::protobuf::uint64 player_guid_;
  ::google::protobuf::uint64 container_guid_;
  int del_type_;
  ::google::protobuf::int32 item_id_;
  ::google::protobuf::uint64 source_id_;
  ::google::protobuf::int32 item_amount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_ItemConfig_2eproto();
  friend void protobuf_AssignDesc_ItemConfig_2eproto();
  friend void protobuf_ShutdownFile_ItemConfig_2eproto();

  void InitAsDefaultInstance();
  static ItemDelLog* default_instance_;
};
// -------------------------------------------------------------------

class EquipBookConfig : public ::google::protobuf::Message {
 public:
  EquipBookConfig();
  virtual ~EquipBookConfig();

  EquipBookConfig(const EquipBookConfig& from);

  inline EquipBookConfig& operator=(const EquipBookConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipBookConfig& default_instance();

  void Swap(EquipBookConfig* other);

  // implements Message ----------------------------------------------

  EquipBookConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipBookConfig& from);
  void MergeFrom(const EquipBookConfig& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Config.EquipBookConfig)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ItemConfig_2eproto();
  friend void protobuf_AssignDesc_ItemConfig_2eproto();
  friend void protobuf_ShutdownFile_ItemConfig_2eproto();

  void InitAsDefaultInstance();
  static EquipBookConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// ItemConfig

// required int32 id = 1;
inline bool ItemConfig::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemConfig::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemConfig::clear_id() {
  id_ = 0;
  clear_has_id();
  SetDirty();
}
inline ::google::protobuf::int32 ItemConfig::id() const {
  return id_;
}
inline void ItemConfig::set_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_id();
  id_ = value;
}

// required .Config.ItemType type = 2;
inline bool ItemConfig::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemConfig::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemConfig::clear_type() {
  type_ = -1;
  clear_has_type();
  SetDirty();
}
inline ::Config::ItemType ItemConfig::type() const {
  return static_cast< ::Config::ItemType >(type_);
}
inline void ItemConfig::set_type(::Config::ItemType value) {
  assert(::Config::ItemType_IsValid(value));
  SetDirty();
  set_has_type();
  type_ = value;
}

// required int32 quality = 3;
inline bool ItemConfig::has_quality() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ItemConfig::set_has_quality() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ItemConfig::clear_has_quality() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ItemConfig::clear_quality() {
  quality_ = 0;
  clear_has_quality();
  SetDirty();
}
inline ::google::protobuf::int32 ItemConfig::quality() const {
  return quality_;
}
inline void ItemConfig::set_quality(::google::protobuf::int32 value) {
  SetDirty();
  set_has_quality();
  quality_ = value;
}

// required int32 block_max_count = 4;
inline bool ItemConfig::has_block_max_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ItemConfig::set_has_block_max_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ItemConfig::clear_has_block_max_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ItemConfig::clear_block_max_count() {
  block_max_count_ = 0;
  clear_has_block_max_count();
  SetDirty();
}
inline ::google::protobuf::int32 ItemConfig::block_max_count() const {
  return block_max_count_;
}
inline void ItemConfig::set_block_max_count(::google::protobuf::int32 value) {
  SetDirty();
  set_has_block_max_count();
  block_max_count_ = value;
}

// required int32 can_sale = 5;
inline bool ItemConfig::has_can_sale() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ItemConfig::set_has_can_sale() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ItemConfig::clear_has_can_sale() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ItemConfig::clear_can_sale() {
  can_sale_ = 0;
  clear_has_can_sale();
  SetDirty();
}
inline ::google::protobuf::int32 ItemConfig::can_sale() const {
  return can_sale_;
}
inline void ItemConfig::set_can_sale(::google::protobuf::int32 value) {
  SetDirty();
  set_has_can_sale();
  can_sale_ = value;
}

// required int32 coin = 6;
inline bool ItemConfig::has_coin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ItemConfig::set_has_coin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ItemConfig::clear_has_coin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ItemConfig::clear_coin() {
  coin_ = 0;
  clear_has_coin();
  SetDirty();
}
inline ::google::protobuf::int32 ItemConfig::coin() const {
  return coin_;
}
inline void ItemConfig::set_coin(::google::protobuf::int32 value) {
  SetDirty();
  set_has_coin();
  coin_ = value;
}

// required int32 min_level_limit = 7;
inline bool ItemConfig::has_min_level_limit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ItemConfig::set_has_min_level_limit() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ItemConfig::clear_has_min_level_limit() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ItemConfig::clear_min_level_limit() {
  min_level_limit_ = 0;
  clear_has_min_level_limit();
  SetDirty();
}
inline ::google::protobuf::int32 ItemConfig::min_level_limit() const {
  return min_level_limit_;
}
inline void ItemConfig::set_min_level_limit(::google::protobuf::int32 value) {
  SetDirty();
  set_has_min_level_limit();
  min_level_limit_ = value;
}

// required int32 max_level_limit = 8;
inline bool ItemConfig::has_max_level_limit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ItemConfig::set_has_max_level_limit() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ItemConfig::clear_has_max_level_limit() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ItemConfig::clear_max_level_limit() {
  max_level_limit_ = 0;
  clear_has_max_level_limit();
  SetDirty();
}
inline ::google::protobuf::int32 ItemConfig::max_level_limit() const {
  return max_level_limit_;
}
inline void ItemConfig::set_max_level_limit(::google::protobuf::int32 value) {
  SetDirty();
  set_has_max_level_limit();
  max_level_limit_ = value;
}

// required int32 level = 9;
inline bool ItemConfig::has_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ItemConfig::set_has_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ItemConfig::clear_has_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ItemConfig::clear_level() {
  level_ = 0;
  clear_has_level();
  SetDirty();
}
inline ::google::protobuf::int32 ItemConfig::level() const {
  return level_;
}
inline void ItemConfig::set_level(::google::protobuf::int32 value) {
  SetDirty();
  set_has_level();
  level_ = value;
}

// required bool can_use = 10;
inline bool ItemConfig::has_can_use() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ItemConfig::set_has_can_use() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ItemConfig::clear_has_can_use() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ItemConfig::clear_can_use() {
  can_use_ = false;
  clear_has_can_use();
  SetDirty();
}
inline bool ItemConfig::can_use() const {
  return can_use_;
}
inline void ItemConfig::set_can_use(bool value) {
  SetDirty();
  set_has_can_use();
  can_use_ = value;
}

// required bool can_destroy = 11;
inline bool ItemConfig::has_can_destroy() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ItemConfig::set_has_can_destroy() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ItemConfig::clear_has_can_destroy() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ItemConfig::clear_can_destroy() {
  can_destroy_ = false;
  clear_has_can_destroy();
  SetDirty();
}
inline bool ItemConfig::can_destroy() const {
  return can_destroy_;
}
inline void ItemConfig::set_can_destroy(bool value) {
  SetDirty();
  set_has_can_destroy();
  can_destroy_ = value;
}

// required int32 impact = 12;
inline bool ItemConfig::has_impact() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ItemConfig::set_has_impact() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ItemConfig::clear_has_impact() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ItemConfig::clear_impact() {
  impact_ = 0;
  clear_has_impact();
  SetDirty();
}
inline ::google::protobuf::int32 ItemConfig::impact() const {
  return impact_;
}
inline void ItemConfig::set_impact(::google::protobuf::int32 value) {
  SetDirty();
  set_has_impact();
  impact_ = value;
}

// required int32 cool_down = 13;
inline bool ItemConfig::has_cool_down() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ItemConfig::set_has_cool_down() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ItemConfig::clear_has_cool_down() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ItemConfig::clear_cool_down() {
  cool_down_ = 0;
  clear_has_cool_down();
  SetDirty();
}
inline ::google::protobuf::int32 ItemConfig::cool_down() const {
  return cool_down_;
}
inline void ItemConfig::set_cool_down(::google::protobuf::int32 value) {
  SetDirty();
  set_has_cool_down();
  cool_down_ = value;
}

// required int32 life_time = 14;
inline bool ItemConfig::has_life_time() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ItemConfig::set_has_life_time() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ItemConfig::clear_has_life_time() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ItemConfig::clear_life_time() {
  life_time_ = 0;
  clear_has_life_time();
  SetDirty();
}
inline ::google::protobuf::int32 ItemConfig::life_time() const {
  return life_time_;
}
inline void ItemConfig::set_life_time(::google::protobuf::int32 value) {
  SetDirty();
  set_has_life_time();
  life_time_ = value;
}

// required int32 script_id = 15;
inline bool ItemConfig::has_script_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ItemConfig::set_has_script_id() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ItemConfig::clear_has_script_id() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ItemConfig::clear_script_id() {
  script_id_ = 0;
  clear_has_script_id();
  SetDirty();
}
inline ::google::protobuf::int32 ItemConfig::script_id() const {
  return script_id_;
}
inline void ItemConfig::set_script_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_script_id();
  script_id_ = value;
}

// repeated int32 param = 16;
inline int ItemConfig::param_size() const {
  return param_.size();
}
inline void ItemConfig::clear_param() {
  param_.Clear();
  SetDirty();
}
inline ::google::protobuf::int32 ItemConfig::param(int index) const {
  return param_.Get(index);
}
inline void ItemConfig::set_param(int index, ::google::protobuf::int32 value) {
  SetDirty();
  param_.Set(index, value);
}
inline void ItemConfig::add_param(::google::protobuf::int32 value) {
  SetDirty();
  param_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ItemConfig::param() const {
  return param_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ItemConfig::mutable_param() {
  SetDirty();
  return &param_;
}

// required int32 value = 17;
inline bool ItemConfig::has_value() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ItemConfig::set_has_value() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ItemConfig::clear_has_value() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ItemConfig::clear_value() {
  value_ = 0;
  clear_has_value();
  SetDirty();
}
inline ::google::protobuf::int32 ItemConfig::value() const {
  return value_;
}
inline void ItemConfig::set_value(::google::protobuf::int32 value) {
  SetDirty();
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// GemConfig

// required int32 id = 1;
inline bool GemConfig::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GemConfig::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GemConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GemConfig::clear_id() {
  id_ = 0;
  clear_has_id();
  SetDirty();
}
inline ::google::protobuf::int32 GemConfig::id() const {
  return id_;
}
inline void GemConfig::set_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_id();
  id_ = value;
}

// required string property = 2;
inline bool GemConfig::has_property() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GemConfig::set_has_property() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GemConfig::clear_has_property() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GemConfig::clear_property() {
  if (property_ != &::google::protobuf::internal::kEmptyString) {
    property_->clear();
  }
  clear_has_property();
  SetDirty();
}
inline const ::std::string& GemConfig::property() const {
  return *property_;
}
inline void GemConfig::set_property(const ::std::string& value) {
  SetDirty();
  set_has_property();
  if (property_ == &::google::protobuf::internal::kEmptyString) {
    property_ = new ::std::string;
  }
  property_->assign(value);
}
inline void GemConfig::set_property(const char* value) {
  SetDirty();
  set_has_property();
  if (property_ == &::google::protobuf::internal::kEmptyString) {
    property_ = new ::std::string;
  }
  property_->assign(value);
}
inline void GemConfig::set_property(const char* value, size_t size) {
  SetDirty();
  set_has_property();
  if (property_ == &::google::protobuf::internal::kEmptyString) {
    property_ = new ::std::string;
  }
  property_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GemConfig::mutable_property() {
  SetDirty();
  set_has_property();
  if (property_ == &::google::protobuf::internal::kEmptyString) {
    property_ = new ::std::string;
  }
  return property_;
}
inline ::std::string* GemConfig::release_property() {
  SetDirty();
  clear_has_property();
  if (property_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = property_;
    property_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GemConfig::set_allocated_property(::std::string* property) {
  SetDirty();
  if (property_ != &::google::protobuf::internal::kEmptyString) {
    delete property_;
  }
  if (property) {
    set_has_property();
    property_ = property;
  } else {
    clear_has_property();
    property_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 value = 3;
inline bool GemConfig::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GemConfig::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GemConfig::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GemConfig::clear_value() {
  value_ = 0;
  clear_has_value();
  SetDirty();
}
inline ::google::protobuf::int32 GemConfig::value() const {
  return value_;
}
inline void GemConfig::set_value(::google::protobuf::int32 value) {
  SetDirty();
  set_has_value();
  value_ = value;
}

// required int32 fusion_id = 4;
inline bool GemConfig::has_fusion_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GemConfig::set_has_fusion_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GemConfig::clear_has_fusion_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GemConfig::clear_fusion_id() {
  fusion_id_ = 0;
  clear_has_fusion_id();
  SetDirty();
}
inline ::google::protobuf::int32 GemConfig::fusion_id() const {
  return fusion_id_;
}
inline void GemConfig::set_fusion_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_fusion_id();
  fusion_id_ = value;
}

// required int32 level = 5;
inline bool GemConfig::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GemConfig::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GemConfig::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GemConfig::clear_level() {
  level_ = 0;
  clear_has_level();
  SetDirty();
}
inline ::google::protobuf::int32 GemConfig::level() const {
  return level_;
}
inline void GemConfig::set_level(::google::protobuf::int32 value) {
  SetDirty();
  set_has_level();
  level_ = value;
}

// repeated .Config.EquipmentType inset_locations = 6;
inline int GemConfig::inset_locations_size() const {
  return inset_locations_.size();
}
inline void GemConfig::clear_inset_locations() {
  inset_locations_.Clear();
  SetDirty();
}
inline ::Config::EquipmentType GemConfig::inset_locations(int index) const {
  return static_cast< ::Config::EquipmentType >(inset_locations_.Get(index));
}
inline void GemConfig::set_inset_locations(int index, ::Config::EquipmentType value) {
  assert(::Config::EquipmentType_IsValid(value));
  SetDirty();
  inset_locations_.Set(index, value);
}
inline void GemConfig::add_inset_locations(::Config::EquipmentType value) {
  assert(::Config::EquipmentType_IsValid(value));
  SetDirty();
  inset_locations_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
GemConfig::inset_locations() const {
  return inset_locations_;
}
inline ::google::protobuf::RepeatedField<int>*
GemConfig::mutable_inset_locations() {
  SetDirty();
  return &inset_locations_;
}

// required int32 block_max_count = 7;
inline bool GemConfig::has_block_max_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GemConfig::set_has_block_max_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GemConfig::clear_has_block_max_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GemConfig::clear_block_max_count() {
  block_max_count_ = 0;
  clear_has_block_max_count();
  SetDirty();
}
inline ::google::protobuf::int32 GemConfig::block_max_count() const {
  return block_max_count_;
}
inline void GemConfig::set_block_max_count(::google::protobuf::int32 value) {
  SetDirty();
  set_has_block_max_count();
  block_max_count_ = value;
}

// required int32 quality = 8;
inline bool GemConfig::has_quality() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GemConfig::set_has_quality() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GemConfig::clear_has_quality() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GemConfig::clear_quality() {
  quality_ = 0;
  clear_has_quality();
  SetDirty();
}
inline ::google::protobuf::int32 GemConfig::quality() const {
  return quality_;
}
inline void GemConfig::set_quality(::google::protobuf::int32 value) {
  SetDirty();
  set_has_quality();
  quality_ = value;
}

// required int32 type = 9;
inline bool GemConfig::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GemConfig::set_has_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GemConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GemConfig::clear_type() {
  type_ = 0;
  clear_has_type();
  SetDirty();
}
inline ::google::protobuf::int32 GemConfig::type() const {
  return type_;
}
inline void GemConfig::set_type(::google::protobuf::int32 value) {
  SetDirty();
  set_has_type();
  type_ = value;
}

// required int32 coin = 10;
inline bool GemConfig::has_coin() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GemConfig::set_has_coin() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GemConfig::clear_has_coin() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GemConfig::clear_coin() {
  coin_ = 0;
  clear_has_coin();
  SetDirty();
}
inline ::google::protobuf::int32 GemConfig::coin() const {
  return coin_;
}
inline void GemConfig::set_coin(::google::protobuf::int32 value) {
  SetDirty();
  set_has_coin();
  coin_ = value;
}

// -------------------------------------------------------------------

// GemCostConfig

// required int32 level = 1;
inline bool GemCostConfig::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GemCostConfig::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GemCostConfig::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GemCostConfig::clear_level() {
  level_ = 0;
  clear_has_level();
  SetDirty();
}
inline ::google::protobuf::int32 GemCostConfig::level() const {
  return level_;
}
inline void GemCostConfig::set_level(::google::protobuf::int32 value) {
  SetDirty();
  set_has_level();
  level_ = value;
}

// required int32 rate = 2;
inline bool GemCostConfig::has_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GemCostConfig::set_has_rate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GemCostConfig::clear_has_rate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GemCostConfig::clear_rate() {
  rate_ = 0;
  clear_has_rate();
  SetDirty();
}
inline ::google::protobuf::int32 GemCostConfig::rate() const {
  return rate_;
}
inline void GemCostConfig::set_rate(::google::protobuf::int32 value) {
  SetDirty();
  set_has_rate();
  rate_ = value;
}

// required int32 cost_item = 3;
inline bool GemCostConfig::has_cost_item() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GemCostConfig::set_has_cost_item() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GemCostConfig::clear_has_cost_item() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GemCostConfig::clear_cost_item() {
  cost_item_ = 0;
  clear_has_cost_item();
  SetDirty();
}
inline ::google::protobuf::int32 GemCostConfig::cost_item() const {
  return cost_item_;
}
inline void GemCostConfig::set_cost_item(::google::protobuf::int32 value) {
  SetDirty();
  set_has_cost_item();
  cost_item_ = value;
}

// required int32 cost_count = 4;
inline bool GemCostConfig::has_cost_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GemCostConfig::set_has_cost_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GemCostConfig::clear_has_cost_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GemCostConfig::clear_cost_count() {
  cost_count_ = 0;
  clear_has_cost_count();
  SetDirty();
}
inline ::google::protobuf::int32 GemCostConfig::cost_count() const {
  return cost_count_;
}
inline void GemCostConfig::set_cost_count(::google::protobuf::int32 value) {
  SetDirty();
  set_has_cost_count();
  cost_count_ = value;
}

// -------------------------------------------------------------------

// ItemAddLog

// required fixed64 guid = 1;
inline bool ItemAddLog::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemAddLog::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemAddLog::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemAddLog::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 ItemAddLog::guid() const {
  return guid_;
}
inline void ItemAddLog::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// required fixed64 player_guid = 2;
inline bool ItemAddLog::has_player_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemAddLog::set_has_player_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemAddLog::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemAddLog::clear_player_guid() {
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 ItemAddLog::player_guid() const {
  return player_guid_;
}
inline void ItemAddLog::set_player_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_player_guid();
  player_guid_ = value;
}

// required fixed64 container_guid = 3;
inline bool ItemAddLog::has_container_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ItemAddLog::set_has_container_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ItemAddLog::clear_has_container_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ItemAddLog::clear_container_guid() {
  container_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_container_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 ItemAddLog::container_guid() const {
  return container_guid_;
}
inline void ItemAddLog::set_container_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_container_guid();
  container_guid_ = value;
}

// required .Config.ItemAddLogType add_type = 4;
inline bool ItemAddLog::has_add_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ItemAddLog::set_has_add_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ItemAddLog::clear_has_add_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ItemAddLog::clear_add_type() {
  add_type_ = 1;
  clear_has_add_type();
  SetDirty();
}
inline ::Config::ItemAddLogType ItemAddLog::add_type() const {
  return static_cast< ::Config::ItemAddLogType >(add_type_);
}
inline void ItemAddLog::set_add_type(::Config::ItemAddLogType value) {
  assert(::Config::ItemAddLogType_IsValid(value));
  SetDirty();
  set_has_add_type();
  add_type_ = value;
}

// required int32 item_id = 5;
inline bool ItemAddLog::has_item_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ItemAddLog::set_has_item_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ItemAddLog::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ItemAddLog::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
  SetDirty();
}
inline ::google::protobuf::int32 ItemAddLog::item_id() const {
  return item_id_;
}
inline void ItemAddLog::set_item_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_item_id();
  item_id_ = value;
}

// required int32 item_amount = 6;
inline bool ItemAddLog::has_item_amount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ItemAddLog::set_has_item_amount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ItemAddLog::clear_has_item_amount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ItemAddLog::clear_item_amount() {
  item_amount_ = 0;
  clear_has_item_amount();
  SetDirty();
}
inline ::google::protobuf::int32 ItemAddLog::item_amount() const {
  return item_amount_;
}
inline void ItemAddLog::set_item_amount(::google::protobuf::int32 value) {
  SetDirty();
  set_has_item_amount();
  item_amount_ = value;
}

// required fixed64 source_id = 7;
inline bool ItemAddLog::has_source_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ItemAddLog::set_has_source_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ItemAddLog::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ItemAddLog::clear_source_id() {
  source_id_ = GOOGLE_ULONGLONG(0);
  clear_has_source_id();
  SetDirty();
}
inline ::google::protobuf::uint64 ItemAddLog::source_id() const {
  return source_id_;
}
inline void ItemAddLog::set_source_id(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_source_id();
  source_id_ = value;
}

// -------------------------------------------------------------------

// ItemDelLog

// required fixed64 guid = 1;
inline bool ItemDelLog::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemDelLog::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemDelLog::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemDelLog::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 ItemDelLog::guid() const {
  return guid_;
}
inline void ItemDelLog::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// required fixed64 player_guid = 2;
inline bool ItemDelLog::has_player_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemDelLog::set_has_player_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemDelLog::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemDelLog::clear_player_guid() {
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 ItemDelLog::player_guid() const {
  return player_guid_;
}
inline void ItemDelLog::set_player_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_player_guid();
  player_guid_ = value;
}

// required fixed64 container_guid = 3;
inline bool ItemDelLog::has_container_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ItemDelLog::set_has_container_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ItemDelLog::clear_has_container_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ItemDelLog::clear_container_guid() {
  container_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_container_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 ItemDelLog::container_guid() const {
  return container_guid_;
}
inline void ItemDelLog::set_container_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_container_guid();
  container_guid_ = value;
}

// required .Config.ItemDelLogType del_type = 4;
inline bool ItemDelLog::has_del_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ItemDelLog::set_has_del_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ItemDelLog::clear_has_del_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ItemDelLog::clear_del_type() {
  del_type_ = 1;
  clear_has_del_type();
  SetDirty();
}
inline ::Config::ItemDelLogType ItemDelLog::del_type() const {
  return static_cast< ::Config::ItemDelLogType >(del_type_);
}
inline void ItemDelLog::set_del_type(::Config::ItemDelLogType value) {
  assert(::Config::ItemDelLogType_IsValid(value));
  SetDirty();
  set_has_del_type();
  del_type_ = value;
}

// required int32 item_id = 5;
inline bool ItemDelLog::has_item_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ItemDelLog::set_has_item_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ItemDelLog::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ItemDelLog::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
  SetDirty();
}
inline ::google::protobuf::int32 ItemDelLog::item_id() const {
  return item_id_;
}
inline void ItemDelLog::set_item_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_item_id();
  item_id_ = value;
}

// required int32 item_amount = 6;
inline bool ItemDelLog::has_item_amount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ItemDelLog::set_has_item_amount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ItemDelLog::clear_has_item_amount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ItemDelLog::clear_item_amount() {
  item_amount_ = 0;
  clear_has_item_amount();
  SetDirty();
}
inline ::google::protobuf::int32 ItemDelLog::item_amount() const {
  return item_amount_;
}
inline void ItemDelLog::set_item_amount(::google::protobuf::int32 value) {
  SetDirty();
  set_has_item_amount();
  item_amount_ = value;
}

// required fixed64 source_id = 7;
inline bool ItemDelLog::has_source_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ItemDelLog::set_has_source_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ItemDelLog::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ItemDelLog::clear_source_id() {
  source_id_ = GOOGLE_ULONGLONG(0);
  clear_has_source_id();
  SetDirty();
}
inline ::google::protobuf::uint64 ItemDelLog::source_id() const {
  return source_id_;
}
inline void ItemDelLog::set_source_id(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_source_id();
  source_id_ = value;
}

// -------------------------------------------------------------------

// EquipBookConfig

// required int32 index = 1;
inline bool EquipBookConfig::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipBookConfig::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipBookConfig::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipBookConfig::clear_index() {
  index_ = 0;
  clear_has_index();
  SetDirty();
}
inline ::google::protobuf::int32 EquipBookConfig::index() const {
  return index_;
}
inline void EquipBookConfig::set_index(::google::protobuf::int32 value) {
  SetDirty();
  set_has_index();
  index_ = value;
}

// required int32 id = 2;
inline bool EquipBookConfig::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipBookConfig::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipBookConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipBookConfig::clear_id() {
  id_ = 0;
  clear_has_id();
  SetDirty();
}
inline ::google::protobuf::int32 EquipBookConfig::id() const {
  return id_;
}
inline void EquipBookConfig::set_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_id();
  id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ItemConfig_2eproto__INCLUDED
