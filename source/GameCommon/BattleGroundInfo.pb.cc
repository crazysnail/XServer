// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BattleGroundInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BattleGroundInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Packet {

namespace {

const ::google::protobuf::Descriptor* PlayerStartHook_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerStartHook_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerEndHook_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerEndHook_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeHookInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeHookInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChallengeBossReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChallengeBossReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConstantChallengeBoss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConstantChallengeBoss_reflection_ = NULL;
const ::google::protobuf::Descriptor* CancleChallengeBoss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CancleChallengeBoss_reflection_ = NULL;
const ::google::protobuf::Descriptor* RushRewardNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RushRewardNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterBattleGroundReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterBattleGroundReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerReachBattlePos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerReachBattlePos_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleGroundOverNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleGroundOverNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleStartNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleStartNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefreshBattleGround_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefreshBattleGround_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleGroundBrief_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleGroundBrief_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExitBattleGround_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExitBattleGround_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleGroundInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleGroundInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorBattleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorBattleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewActorCreated_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewActorCreated_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorDismiss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorDismiss_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetControlType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetControlType_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateFollowState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateFollowState_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientActorMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientActorMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientActorStop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientActorStop_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientActorUseSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientActorUseSkill_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BattleGroundInfo_2eproto() {
  protobuf_AddDesc_BattleGroundInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BattleGroundInfo.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerStartHook_descriptor_ = file->message_type(0);
  static const int PlayerStartHook_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStartHook, stage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStartHook, battle_group_id_),
  };
  PlayerStartHook_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerStartHook_descriptor_,
      PlayerStartHook::default_instance_,
      PlayerStartHook_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStartHook, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerStartHook, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerStartHook));
  PlayerEndHook_descriptor_ = file->message_type(1);
  static const int PlayerEndHook_offsets_[1] = {
  };
  PlayerEndHook_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerEndHook_descriptor_,
      PlayerEndHook::default_instance_,
      PlayerEndHook_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEndHook, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEndHook, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerEndHook));
  ChangeHookInfo_descriptor_ = file->message_type(2);
  static const int ChangeHookInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeHookInfo, hook_option_),
  };
  ChangeHookInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeHookInfo_descriptor_,
      ChangeHookInfo::default_instance_,
      ChangeHookInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeHookInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeHookInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeHookInfo));
  ChallengeBossReq_descriptor_ = file->message_type(3);
  static const int ChallengeBossReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeBossReq, scene_stage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeBossReq, rush_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeBossReq, rush_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeBossReq, battle_group_id_),
  };
  ChallengeBossReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChallengeBossReq_descriptor_,
      ChallengeBossReq::default_instance_,
      ChallengeBossReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeBossReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeBossReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChallengeBossReq));
  ConstantChallengeBoss_descriptor_ = file->message_type(4);
  static const int ConstantChallengeBoss_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstantChallengeBoss, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstantChallengeBoss, stage_id_),
  };
  ConstantChallengeBoss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConstantChallengeBoss_descriptor_,
      ConstantChallengeBoss::default_instance_,
      ConstantChallengeBoss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstantChallengeBoss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstantChallengeBoss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConstantChallengeBoss));
  CancleChallengeBoss_descriptor_ = file->message_type(5);
  static const int CancleChallengeBoss_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancleChallengeBoss, stage_id_),
  };
  CancleChallengeBoss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CancleChallengeBoss_descriptor_,
      CancleChallengeBoss::default_instance_,
      CancleChallengeBoss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancleChallengeBoss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancleChallengeBoss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CancleChallengeBoss));
  RushRewardNotify_descriptor_ = file->message_type(6);
  static const int RushRewardNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RushRewardNotify, list_),
  };
  RushRewardNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RushRewardNotify_descriptor_,
      RushRewardNotify::default_instance_,
      RushRewardNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RushRewardNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RushRewardNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RushRewardNotify));
  EnterBattleGroundReply_descriptor_ = file->message_type(7);
  static const int EnterBattleGroundReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterBattleGroundReply, brief_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterBattleGroundReply, info_),
  };
  EnterBattleGroundReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterBattleGroundReply_descriptor_,
      EnterBattleGroundReply::default_instance_,
      EnterBattleGroundReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterBattleGroundReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterBattleGroundReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterBattleGroundReply));
  PlayerReachBattlePos_descriptor_ = file->message_type(8);
  static const int PlayerReachBattlePos_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReachBattlePos, battle_ground_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReachBattlePos, guids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReachBattlePos, positions_),
  };
  PlayerReachBattlePos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerReachBattlePos_descriptor_,
      PlayerReachBattlePos::default_instance_,
      PlayerReachBattlePos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReachBattlePos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReachBattlePos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerReachBattlePos));
  BattleGroundOverNotify_descriptor_ = file->message_type(9);
  static const int BattleGroundOverNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleGroundOverNotify, brief_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleGroundOverNotify, winner_camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleGroundOverNotify, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleGroundOverNotify, wait_millsec_),
  };
  BattleGroundOverNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleGroundOverNotify_descriptor_,
      BattleGroundOverNotify::default_instance_,
      BattleGroundOverNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleGroundOverNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleGroundOverNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleGroundOverNotify));
  BattleStartNotify_descriptor_ = file->message_type(10);
  static const int BattleStartNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStartNotify, brief_),
  };
  BattleStartNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleStartNotify_descriptor_,
      BattleStartNotify::default_instance_,
      BattleStartNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStartNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleStartNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleStartNotify));
  RefreshBattleGround_descriptor_ = file->message_type(11);
  static const int RefreshBattleGround_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshBattleGround, brief_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshBattleGround, new_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshBattleGround, time_stamp_),
  };
  RefreshBattleGround_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RefreshBattleGround_descriptor_,
      RefreshBattleGround::default_instance_,
      RefreshBattleGround_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshBattleGround, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshBattleGround, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RefreshBattleGround));
  BattleGroundBrief_descriptor_ = file->message_type(12);
  static const int BattleGroundBrief_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleGroundBrief, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleGroundBrief, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleGroundBrief, elapse_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleGroundBrief, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleGroundBrief, stage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleGroundBrief, battle_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleGroundBrief, can_manual_control_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleGroundBrief, mission_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleGroundBrief, time_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleGroundBrief, fight_time_),
  };
  BattleGroundBrief_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleGroundBrief_descriptor_,
      BattleGroundBrief::default_instance_,
      BattleGroundBrief_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleGroundBrief, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleGroundBrief, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleGroundBrief));
  ExitBattleGround_descriptor_ = file->message_type(13);
  static const int ExitBattleGround_offsets_[1] = {
  };
  ExitBattleGround_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExitBattleGround_descriptor_,
      ExitBattleGround::default_instance_,
      ExitBattleGround_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitBattleGround, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitBattleGround, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExitBattleGround));
  BattleGroundInfo_descriptor_ = file->message_type(14);
  static const int BattleGroundInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleGroundInfo, brief_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleGroundInfo, attackers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleGroundInfo, defenders_),
  };
  BattleGroundInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleGroundInfo_descriptor_,
      BattleGroundInfo::default_instance_,
      BattleGroundInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleGroundInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleGroundInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleGroundInfo));
  ActorBattleInfo_descriptor_ = file->message_type(15);
  static const int ActorBattleInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBattleInfo, base_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBattleInfo, battle_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBattleInfo, positon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBattleInfo, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBattleInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBattleInfo, monster_config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBattleInfo, object_radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBattleInfo, position_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBattleInfo, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBattleInfo, side_),
  };
  ActorBattleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorBattleInfo_descriptor_,
      ActorBattleInfo::default_instance_,
      ActorBattleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBattleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorBattleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorBattleInfo));
  NewActorCreated_descriptor_ = file->message_type(16);
  static const int NewActorCreated_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewActorCreated, creator_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewActorCreated, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewActorCreated, attackers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewActorCreated, defenders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewActorCreated, time_stamp_),
  };
  NewActorCreated_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewActorCreated_descriptor_,
      NewActorCreated::default_instance_,
      NewActorCreated_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewActorCreated, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewActorCreated, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewActorCreated));
  ActorDismiss_descriptor_ = file->message_type(17);
  static const int ActorDismiss_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorDismiss, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorDismiss, time_stamp_),
  };
  ActorDismiss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorDismiss_descriptor_,
      ActorDismiss::default_instance_,
      ActorDismiss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorDismiss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorDismiss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorDismiss));
  SetControlType_descriptor_ = file->message_type(18);
  static const int SetControlType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetControlType, contral_type_),
  };
  SetControlType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetControlType_descriptor_,
      SetControlType::default_instance_,
      SetControlType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetControlType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetControlType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetControlType));
  UpdateFollowState_descriptor_ = file->message_type(19);
  static const int UpdateFollowState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFollowState, follow_),
  };
  UpdateFollowState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateFollowState_descriptor_,
      UpdateFollowState::default_instance_,
      UpdateFollowState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFollowState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateFollowState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateFollowState));
  ClientActorMove_descriptor_ = file->message_type(20);
  static const int ClientActorMove_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActorMove, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActorMove, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActorMove, move_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActorMove, old_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActorMove, new_pos_),
  };
  ClientActorMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientActorMove_descriptor_,
      ClientActorMove::default_instance_,
      ClientActorMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActorMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActorMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientActorMove));
  ClientActorStop_descriptor_ = file->message_type(21);
  static const int ClientActorStop_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActorStop, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActorStop, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActorStop, stop_pos_),
  };
  ClientActorStop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientActorStop_descriptor_,
      ClientActorStop::default_instance_,
      ClientActorStop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActorStop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActorStop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientActorStop));
  ClientActorUseSkill_descriptor_ = file->message_type(22);
  static const int ClientActorUseSkill_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActorUseSkill, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActorUseSkill, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActorUseSkill, target_guids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActorUseSkill, other_guids_),
  };
  ClientActorUseSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientActorUseSkill_descriptor_,
      ClientActorUseSkill::default_instance_,
      ClientActorUseSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActorUseSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientActorUseSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientActorUseSkill));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BattleGroundInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerStartHook_descriptor_, &PlayerStartHook::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerEndHook_descriptor_, &PlayerEndHook::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeHookInfo_descriptor_, &ChangeHookInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChallengeBossReq_descriptor_, &ChallengeBossReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConstantChallengeBoss_descriptor_, &ConstantChallengeBoss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CancleChallengeBoss_descriptor_, &CancleChallengeBoss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RushRewardNotify_descriptor_, &RushRewardNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterBattleGroundReply_descriptor_, &EnterBattleGroundReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerReachBattlePos_descriptor_, &PlayerReachBattlePos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleGroundOverNotify_descriptor_, &BattleGroundOverNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleStartNotify_descriptor_, &BattleStartNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RefreshBattleGround_descriptor_, &RefreshBattleGround::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleGroundBrief_descriptor_, &BattleGroundBrief::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExitBattleGround_descriptor_, &ExitBattleGround::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleGroundInfo_descriptor_, &BattleGroundInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorBattleInfo_descriptor_, &ActorBattleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewActorCreated_descriptor_, &NewActorCreated::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorDismiss_descriptor_, &ActorDismiss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetControlType_descriptor_, &SetControlType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateFollowState_descriptor_, &UpdateFollowState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientActorMove_descriptor_, &ClientActorMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientActorStop_descriptor_, &ClientActorStop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientActorUseSkill_descriptor_, &ClientActorUseSkill::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BattleGroundInfo_2eproto() {
  delete PlayerStartHook::default_instance_;
  delete PlayerStartHook_reflection_;
  delete PlayerEndHook::default_instance_;
  delete PlayerEndHook_reflection_;
  delete ChangeHookInfo::default_instance_;
  delete ChangeHookInfo_reflection_;
  delete ChallengeBossReq::default_instance_;
  delete ChallengeBossReq_reflection_;
  delete ConstantChallengeBoss::default_instance_;
  delete ConstantChallengeBoss_reflection_;
  delete CancleChallengeBoss::default_instance_;
  delete CancleChallengeBoss_reflection_;
  delete RushRewardNotify::default_instance_;
  delete RushRewardNotify_reflection_;
  delete EnterBattleGroundReply::default_instance_;
  delete EnterBattleGroundReply_reflection_;
  delete PlayerReachBattlePos::default_instance_;
  delete PlayerReachBattlePos_reflection_;
  delete BattleGroundOverNotify::default_instance_;
  delete BattleGroundOverNotify_reflection_;
  delete BattleStartNotify::default_instance_;
  delete BattleStartNotify_reflection_;
  delete RefreshBattleGround::default_instance_;
  delete RefreshBattleGround_reflection_;
  delete BattleGroundBrief::default_instance_;
  delete BattleGroundBrief_reflection_;
  delete ExitBattleGround::default_instance_;
  delete ExitBattleGround_reflection_;
  delete BattleGroundInfo::default_instance_;
  delete BattleGroundInfo_reflection_;
  delete ActorBattleInfo::default_instance_;
  delete ActorBattleInfo_reflection_;
  delete NewActorCreated::default_instance_;
  delete NewActorCreated_reflection_;
  delete ActorDismiss::default_instance_;
  delete ActorDismiss_reflection_;
  delete SetControlType::default_instance_;
  delete SetControlType_reflection_;
  delete UpdateFollowState::default_instance_;
  delete UpdateFollowState_reflection_;
  delete ClientActorMove::default_instance_;
  delete ClientActorMove_reflection_;
  delete ClientActorStop::default_instance_;
  delete ClientActorStop_reflection_;
  delete ClientActorUseSkill::default_instance_;
  delete ClientActorUseSkill_reflection_;
}

void protobuf_AddDesc_BattleGroundInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Packet::protobuf_AddDesc_Base_2eproto();
  ::Packet::protobuf_AddDesc_AllPacketEnum_2eproto();
  ::Packet::protobuf_AddDesc_BattleInfo_2eproto();
  ::Packet::protobuf_AddDesc_ActorBasicInfo_2eproto();
  ::Packet::protobuf_AddDesc_PlayerBasicInfo_2eproto();
  ::Packet::protobuf_AddDesc_ItemAndEquip_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026BattleGroundInfo.proto\022\006Packet\032\nBase.p"
    "roto\032\023AllPacketEnum.proto\032\020BattleInfo.pr"
    "oto\032\024ActorBasicInfo.proto\032\025PlayerBasicIn"
    "fo.proto\032\022ItemAndEquip.proto\"<\n\017PlayerSt"
    "artHook\022\020\n\010stage_id\030\001 \002(\005\022\027\n\017battle_grou"
    "p_id\030\002 \002(\005\"\017\n\rPlayerEndHook\"9\n\016ChangeHoo"
    "kInfo\022\'\n\013hook_option\030\001 \002(\0132\022.Packet.Hook"
    "Option\"e\n\020ChallengeBossReq\022\026\n\016scene_stag"
    "e_id\030\001 \002(\005\022\014\n\004rush\030\002 \002(\010\022\022\n\nrush_count\030\003"
    " \001(\005\022\027\n\017battle_group_id\030\004 \001(\005\"9\n\025Constan"
    "tChallengeBoss\022\016\n\006status\030\001 \002(\010\022\020\n\010stage_"
    "id\030\002 \002(\005\"\'\n\023CancleChallengeBoss\022\020\n\010stage"
    "_id\030\001 \002(\005\"8\n\020RushRewardNotify\022$\n\004list\030\001 "
    "\003(\0132\026.Packet.NotifyItemList\"j\n\026EnterBatt"
    "leGroundReply\022(\n\005brief\030\001 \001(\0132\031.Packet.Ba"
    "ttleGroundBrief\022&\n\004info\030\002 \001(\0132\030.Packet.B"
    "attleGroundInfo\"f\n\024PlayerReachBattlePos\022"
    "\032\n\022battle_ground_guid\030\001 \002(\006\022\r\n\005guids\030\002 \003"
    "(\006\022#\n\tpositions\030\003 \003(\0132\020.Packet.Position\""
    "\201\001\n\026BattleGroundOverNotify\022(\n\005brief\030\001 \002("
    "\0132\031.Packet.BattleGroundBrief\022\023\n\013winner_c"
    "amp\030\002 \002(\005\022\022\n\ntime_stamp\030\003 \002(\006\022\024\n\014wait_mi"
    "llsec\030\004 \001(\006\"=\n\021BattleStartNotify\022(\n\005brie"
    "f\030\001 \002(\0132\031.Packet.BattleGroundBrief\"\177\n\023Re"
    "freshBattleGround\022(\n\005brief\030\001 \002(\0132\031.Packe"
    "t.BattleGroundBrief\022*\n\010new_info\030\002 \002(\0132\030."
    "Packet.BattleGroundInfo\022\022\n\ntime_stamp\030\003 "
    "\002(\006\"\361\001\n\021BattleGroundBrief\022\014\n\004guid\030\001 \002(\006\022"
    "&\n\004type\030\002 \002(\0162\030.Packet.BattleGroundType\022"
    "\023\n\013elapse_time\030\003 \002(\006\022\020\n\010scene_id\030\004 \002(\005\022\020"
    "\n\010stage_id\030\005 \001(\005\022\027\n\017battle_group_id\030\006 \002("
    "\005\022\032\n\022can_manual_control\030\007 \002(\010\022\022\n\nmission"
    "_id\030\010 \001(\005\022\020\n\010time_out\030\t \001(\006\022\022\n\nfight_tim"
    "e\030\n \001(\006\"\022\n\020ExitBattleGround\"\224\001\n\020BattleGr"
    "oundInfo\022(\n\005brief\030\001 \002(\0132\031.Packet.BattleG"
    "roundBrief\022*\n\tattackers\030\002 \003(\0132\027.Packet.A"
    "ctorBattleInfo\022*\n\tdefenders\030\003 \003(\0132\027.Pack"
    "et.ActorBattleInfo\"\275\002\n\017ActorBattleInfo\022)"
    "\n\tbase_info\030\001 \002(\0132\026.Packet.ActorBasicInf"
    "o\022\'\n\013battle_info\030\002 \002(\0132\022.Packet.BattleIn"
    "fo\022!\n\007positon\030\003 \002(\0132\020.Packet.Position\022\021\n"
    "\tdirection\030\004 \002(\001\022%\n\005state\030\005 \002(\0162\026.Packet"
    ".ActorStateType\022\031\n\021monster_config_id\030\006 \001"
    "(\005\022\025\n\robject_radius\030\007 \002(\005\022\026\n\016position_in"
    "dex\030\010 \002(\005\022!\n\006equips\030\t \003(\0132\021.Packet.Equip"
    "Item\022\014\n\004side\030\n \002(\005\"\245\001\n\017NewActorCreated\022\024"
    "\n\014creator_guid\030\001 \001(\006\022\020\n\010skill_id\030\002 \001(\005\022*"
    "\n\tattackers\030\003 \003(\0132\027.Packet.ActorBattleIn"
    "fo\022*\n\tdefenders\030\004 \003(\0132\027.Packet.ActorBatt"
    "leInfo\022\022\n\ntime_stamp\030\005 \002(\006\"0\n\014ActorDismi"
    "ss\022\014\n\004guid\030\001 \002(\006\022\022\n\ntime_stamp\030\002 \002(\006\"@\n\016"
    "SetControlType\022.\n\014contral_type\030\001 \002(\0162\030.P"
    "acket.ActorControlType\"#\n\021UpdateFollowSt"
    "ate\022\016\n\006follow\030\001 \002(\010\"\214\001\n\017ClientActorMove\022"
    "\014\n\004guid\030\001 \002(\006\022\021\n\tdirection\030\002 \002(\002\022\022\n\nmove"
    "_speed\030\003 \002(\007\022!\n\007old_pos\030\004 \002(\0132\020.Packet.P"
    "osition\022!\n\007new_pos\030\005 \002(\0132\020.Packet.Positi"
    "on\"V\n\017ClientActorStop\022\014\n\004guid\030\001 \001(\006\022\021\n\td"
    "irection\030\003 \002(\002\022\"\n\010stop_pos\030\004 \002(\0132\020.Packe"
    "t.Position\"`\n\023ClientActorUseSkill\022\014\n\004gui"
    "d\030\001 \002(\006\022\020\n\010skill_id\030\002 \002(\005\022\024\n\014target_guid"
    "s\030\003 \003(\006\022\023\n\013other_guids\030\004 \001(\006", 2468);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BattleGroundInfo.proto", &protobuf_RegisterTypes);
  PlayerStartHook::default_instance_ = new PlayerStartHook();
  PlayerEndHook::default_instance_ = new PlayerEndHook();
  ChangeHookInfo::default_instance_ = new ChangeHookInfo();
  ChallengeBossReq::default_instance_ = new ChallengeBossReq();
  ConstantChallengeBoss::default_instance_ = new ConstantChallengeBoss();
  CancleChallengeBoss::default_instance_ = new CancleChallengeBoss();
  RushRewardNotify::default_instance_ = new RushRewardNotify();
  EnterBattleGroundReply::default_instance_ = new EnterBattleGroundReply();
  PlayerReachBattlePos::default_instance_ = new PlayerReachBattlePos();
  BattleGroundOverNotify::default_instance_ = new BattleGroundOverNotify();
  BattleStartNotify::default_instance_ = new BattleStartNotify();
  RefreshBattleGround::default_instance_ = new RefreshBattleGround();
  BattleGroundBrief::default_instance_ = new BattleGroundBrief();
  ExitBattleGround::default_instance_ = new ExitBattleGround();
  BattleGroundInfo::default_instance_ = new BattleGroundInfo();
  ActorBattleInfo::default_instance_ = new ActorBattleInfo();
  NewActorCreated::default_instance_ = new NewActorCreated();
  ActorDismiss::default_instance_ = new ActorDismiss();
  SetControlType::default_instance_ = new SetControlType();
  UpdateFollowState::default_instance_ = new UpdateFollowState();
  ClientActorMove::default_instance_ = new ClientActorMove();
  ClientActorStop::default_instance_ = new ClientActorStop();
  ClientActorUseSkill::default_instance_ = new ClientActorUseSkill();
  PlayerStartHook::default_instance_->InitAsDefaultInstance();
  PlayerEndHook::default_instance_->InitAsDefaultInstance();
  ChangeHookInfo::default_instance_->InitAsDefaultInstance();
  ChallengeBossReq::default_instance_->InitAsDefaultInstance();
  ConstantChallengeBoss::default_instance_->InitAsDefaultInstance();
  CancleChallengeBoss::default_instance_->InitAsDefaultInstance();
  RushRewardNotify::default_instance_->InitAsDefaultInstance();
  EnterBattleGroundReply::default_instance_->InitAsDefaultInstance();
  PlayerReachBattlePos::default_instance_->InitAsDefaultInstance();
  BattleGroundOverNotify::default_instance_->InitAsDefaultInstance();
  BattleStartNotify::default_instance_->InitAsDefaultInstance();
  RefreshBattleGround::default_instance_->InitAsDefaultInstance();
  BattleGroundBrief::default_instance_->InitAsDefaultInstance();
  ExitBattleGround::default_instance_->InitAsDefaultInstance();
  BattleGroundInfo::default_instance_->InitAsDefaultInstance();
  ActorBattleInfo::default_instance_->InitAsDefaultInstance();
  NewActorCreated::default_instance_->InitAsDefaultInstance();
  ActorDismiss::default_instance_->InitAsDefaultInstance();
  SetControlType::default_instance_->InitAsDefaultInstance();
  UpdateFollowState::default_instance_->InitAsDefaultInstance();
  ClientActorMove::default_instance_->InitAsDefaultInstance();
  ClientActorStop::default_instance_->InitAsDefaultInstance();
  ClientActorUseSkill::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BattleGroundInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BattleGroundInfo_2eproto {
  StaticDescriptorInitializer_BattleGroundInfo_2eproto() {
    protobuf_AddDesc_BattleGroundInfo_2eproto();
  }
} static_descriptor_initializer_BattleGroundInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PlayerStartHook::kStageIdFieldNumber;
const int PlayerStartHook::kBattleGroupIdFieldNumber;
#endif  // !_MSC_VER

PlayerStartHook::PlayerStartHook()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerStartHook::InitAsDefaultInstance() {
}

PlayerStartHook::PlayerStartHook(const PlayerStartHook& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerStartHook::SharedCtor() {
  _cached_size_ = 0;
  stage_id_ = 0;
  battle_group_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerStartHook::~PlayerStartHook() {
  SharedDtor();
}

void PlayerStartHook::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerStartHook::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerStartHook::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerStartHook_descriptor_;
}

const PlayerStartHook& PlayerStartHook::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleGroundInfo_2eproto();
  return *default_instance_;
}

PlayerStartHook* PlayerStartHook::default_instance_ = NULL;

PlayerStartHook* PlayerStartHook::New() const {
  return new PlayerStartHook;
}

void PlayerStartHook::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stage_id_ = 0;
    battle_group_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerStartHook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 stage_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_id_)));
          set_has_stage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_group_id;
        break;
      }

      // required int32 battle_group_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_group_id_)));
          set_has_battle_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerStartHook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 stage_id = 1;
  if (has_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stage_id(), output);
  }

  // required int32 battle_group_id = 2;
  if (has_battle_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->battle_group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerStartHook::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 stage_id = 1;
  if (has_stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stage_id(), target);
  }

  // required int32 battle_group_id = 2;
  if (has_battle_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->battle_group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerStartHook::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 stage_id = 1;
    if (has_stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage_id());
    }

    // required int32 battle_group_id = 2;
    if (has_battle_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerStartHook::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerStartHook* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerStartHook*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerStartHook::MergeFrom(const PlayerStartHook& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage_id()) {
      set_stage_id(from.stage_id());
    }
    if (from.has_battle_group_id()) {
      set_battle_group_id(from.battle_group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerStartHook::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerStartHook::CopyFrom(const PlayerStartHook& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerStartHook::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PlayerStartHook::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void PlayerStartHook::Swap(PlayerStartHook* other) {
  if (other != this) {
    std::swap(stage_id_, other->stage_id_);
    std::swap(battle_group_id_, other->battle_group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerStartHook::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerStartHook_descriptor_;
  metadata.reflection = PlayerStartHook_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PlayerEndHook::PlayerEndHook()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerEndHook::InitAsDefaultInstance() {
}

PlayerEndHook::PlayerEndHook(const PlayerEndHook& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerEndHook::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerEndHook::~PlayerEndHook() {
  SharedDtor();
}

void PlayerEndHook::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerEndHook::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerEndHook::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerEndHook_descriptor_;
}

const PlayerEndHook& PlayerEndHook::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleGroundInfo_2eproto();
  return *default_instance_;
}

PlayerEndHook* PlayerEndHook::default_instance_ = NULL;

PlayerEndHook* PlayerEndHook::New() const {
  return new PlayerEndHook;
}

void PlayerEndHook::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerEndHook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerEndHook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerEndHook::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerEndHook::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerEndHook::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerEndHook* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerEndHook*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerEndHook::MergeFrom(const PlayerEndHook& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerEndHook::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerEndHook::CopyFrom(const PlayerEndHook& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerEndHook::IsInitialized() const {

  return true;
}

void PlayerEndHook::SetInitialized() {

  return;
}

void PlayerEndHook::Swap(PlayerEndHook* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerEndHook::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerEndHook_descriptor_;
  metadata.reflection = PlayerEndHook_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeHookInfo::kHookOptionFieldNumber;
#endif  // !_MSC_VER

ChangeHookInfo::ChangeHookInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeHookInfo::InitAsDefaultInstance() {
  hook_option_ = const_cast< ::Packet::HookOption*>(&::Packet::HookOption::default_instance());
}

ChangeHookInfo::ChangeHookInfo(const ChangeHookInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeHookInfo::SharedCtor() {
  _cached_size_ = 0;
  hook_option_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeHookInfo::~ChangeHookInfo() {
  SharedDtor();
}

void ChangeHookInfo::SharedDtor() {
  if (this != default_instance_) {
    delete hook_option_;
  }
}

void ChangeHookInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeHookInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeHookInfo_descriptor_;
}

const ChangeHookInfo& ChangeHookInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleGroundInfo_2eproto();
  return *default_instance_;
}

ChangeHookInfo* ChangeHookInfo::default_instance_ = NULL;

ChangeHookInfo* ChangeHookInfo::New() const {
  return new ChangeHookInfo;
}

void ChangeHookInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hook_option()) {
      if (hook_option_ != NULL) hook_option_->::Packet::HookOption::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ChangeHookInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.HookOption hook_option = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hook_option()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ChangeHookInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.HookOption hook_option = 1;
  if (has_hook_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hook_option(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeHookInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.HookOption hook_option = 1;
  if (has_hook_option()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hook_option(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeHookInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.HookOption hook_option = 1;
    if (has_hook_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hook_option());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeHookInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeHookInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeHookInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ChangeHookInfo::MergeFrom(const ChangeHookInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hook_option()) {
      mutable_hook_option()->::Packet::HookOption::MergeFrom(from.hook_option());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ChangeHookInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ChangeHookInfo::CopyFrom(const ChangeHookInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ChangeHookInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_hook_option()) {
    if (!this->hook_option().IsInitialized()) return false;
  }
  return true;
}

void ChangeHookInfo::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  if (has_hook_option()) {
    this->mutable_hook_option()->SetInitialized();
  }
  return;
}

void ChangeHookInfo::Swap(ChangeHookInfo* other) {
  if (other != this) {
    std::swap(hook_option_, other->hook_option_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ChangeHookInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeHookInfo_descriptor_;
  metadata.reflection = ChangeHookInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChallengeBossReq::kSceneStageIdFieldNumber;
const int ChallengeBossReq::kRushFieldNumber;
const int ChallengeBossReq::kRushCountFieldNumber;
const int ChallengeBossReq::kBattleGroupIdFieldNumber;
#endif  // !_MSC_VER

ChallengeBossReq::ChallengeBossReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChallengeBossReq::InitAsDefaultInstance() {
}

ChallengeBossReq::ChallengeBossReq(const ChallengeBossReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChallengeBossReq::SharedCtor() {
  _cached_size_ = 0;
  scene_stage_id_ = 0;
  rush_ = false;
  rush_count_ = 0;
  battle_group_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChallengeBossReq::~ChallengeBossReq() {
  SharedDtor();
}

void ChallengeBossReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChallengeBossReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChallengeBossReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChallengeBossReq_descriptor_;
}

const ChallengeBossReq& ChallengeBossReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleGroundInfo_2eproto();
  return *default_instance_;
}

ChallengeBossReq* ChallengeBossReq::default_instance_ = NULL;

ChallengeBossReq* ChallengeBossReq::New() const {
  return new ChallengeBossReq;
}

void ChallengeBossReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scene_stage_id_ = 0;
    rush_ = false;
    rush_count_ = 0;
    battle_group_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ChallengeBossReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 scene_stage_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_stage_id_)));
          set_has_scene_stage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rush;
        break;
      }

      // required bool rush = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rush:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rush_)));
          set_has_rush();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rush_count;
        break;
      }

      // optional int32 rush_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rush_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rush_count_)));
          set_has_rush_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_battle_group_id;
        break;
      }

      // optional int32 battle_group_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_group_id_)));
          set_has_battle_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ChallengeBossReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 scene_stage_id = 1;
  if (has_scene_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->scene_stage_id(), output);
  }

  // required bool rush = 2;
  if (has_rush()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->rush(), output);
  }

  // optional int32 rush_count = 3;
  if (has_rush_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rush_count(), output);
  }

  // optional int32 battle_group_id = 4;
  if (has_battle_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->battle_group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChallengeBossReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 scene_stage_id = 1;
  if (has_scene_stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->scene_stage_id(), target);
  }

  // required bool rush = 2;
  if (has_rush()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->rush(), target);
  }

  // optional int32 rush_count = 3;
  if (has_rush_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rush_count(), target);
  }

  // optional int32 battle_group_id = 4;
  if (has_battle_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->battle_group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChallengeBossReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 scene_stage_id = 1;
    if (has_scene_stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_stage_id());
    }

    // required bool rush = 2;
    if (has_rush()) {
      total_size += 1 + 1;
    }

    // optional int32 rush_count = 3;
    if (has_rush_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rush_count());
    }

    // optional int32 battle_group_id = 4;
    if (has_battle_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChallengeBossReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChallengeBossReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChallengeBossReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ChallengeBossReq::MergeFrom(const ChallengeBossReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scene_stage_id()) {
      set_scene_stage_id(from.scene_stage_id());
    }
    if (from.has_rush()) {
      set_rush(from.rush());
    }
    if (from.has_rush_count()) {
      set_rush_count(from.rush_count());
    }
    if (from.has_battle_group_id()) {
      set_battle_group_id(from.battle_group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ChallengeBossReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ChallengeBossReq::CopyFrom(const ChallengeBossReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ChallengeBossReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ChallengeBossReq::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void ChallengeBossReq::Swap(ChallengeBossReq* other) {
  if (other != this) {
    std::swap(scene_stage_id_, other->scene_stage_id_);
    std::swap(rush_, other->rush_);
    std::swap(rush_count_, other->rush_count_);
    std::swap(battle_group_id_, other->battle_group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ChallengeBossReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChallengeBossReq_descriptor_;
  metadata.reflection = ChallengeBossReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConstantChallengeBoss::kStatusFieldNumber;
const int ConstantChallengeBoss::kStageIdFieldNumber;
#endif  // !_MSC_VER

ConstantChallengeBoss::ConstantChallengeBoss()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConstantChallengeBoss::InitAsDefaultInstance() {
}

ConstantChallengeBoss::ConstantChallengeBoss(const ConstantChallengeBoss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConstantChallengeBoss::SharedCtor() {
  _cached_size_ = 0;
  status_ = false;
  stage_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConstantChallengeBoss::~ConstantChallengeBoss() {
  SharedDtor();
}

void ConstantChallengeBoss::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConstantChallengeBoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConstantChallengeBoss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConstantChallengeBoss_descriptor_;
}

const ConstantChallengeBoss& ConstantChallengeBoss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleGroundInfo_2eproto();
  return *default_instance_;
}

ConstantChallengeBoss* ConstantChallengeBoss::default_instance_ = NULL;

ConstantChallengeBoss* ConstantChallengeBoss::New() const {
  return new ConstantChallengeBoss;
}

void ConstantChallengeBoss::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = false;
    stage_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ConstantChallengeBoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stage_id;
        break;
      }

      // required int32 stage_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_id_)));
          set_has_stage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ConstantChallengeBoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->status(), output);
  }

  // required int32 stage_id = 2;
  if (has_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stage_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConstantChallengeBoss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->status(), target);
  }

  // required int32 stage_id = 2;
  if (has_stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stage_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConstantChallengeBoss::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool status = 1;
    if (has_status()) {
      total_size += 1 + 1;
    }

    // required int32 stage_id = 2;
    if (has_stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConstantChallengeBoss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConstantChallengeBoss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConstantChallengeBoss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ConstantChallengeBoss::MergeFrom(const ConstantChallengeBoss& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_stage_id()) {
      set_stage_id(from.stage_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ConstantChallengeBoss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ConstantChallengeBoss::CopyFrom(const ConstantChallengeBoss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ConstantChallengeBoss::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ConstantChallengeBoss::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void ConstantChallengeBoss::Swap(ConstantChallengeBoss* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(stage_id_, other->stage_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ConstantChallengeBoss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConstantChallengeBoss_descriptor_;
  metadata.reflection = ConstantChallengeBoss_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CancleChallengeBoss::kStageIdFieldNumber;
#endif  // !_MSC_VER

CancleChallengeBoss::CancleChallengeBoss()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CancleChallengeBoss::InitAsDefaultInstance() {
}

CancleChallengeBoss::CancleChallengeBoss(const CancleChallengeBoss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CancleChallengeBoss::SharedCtor() {
  _cached_size_ = 0;
  stage_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CancleChallengeBoss::~CancleChallengeBoss() {
  SharedDtor();
}

void CancleChallengeBoss::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CancleChallengeBoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CancleChallengeBoss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CancleChallengeBoss_descriptor_;
}

const CancleChallengeBoss& CancleChallengeBoss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleGroundInfo_2eproto();
  return *default_instance_;
}

CancleChallengeBoss* CancleChallengeBoss::default_instance_ = NULL;

CancleChallengeBoss* CancleChallengeBoss::New() const {
  return new CancleChallengeBoss;
}

void CancleChallengeBoss::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stage_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool CancleChallengeBoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 stage_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_id_)));
          set_has_stage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void CancleChallengeBoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 stage_id = 1;
  if (has_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stage_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CancleChallengeBoss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 stage_id = 1;
  if (has_stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stage_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CancleChallengeBoss::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 stage_id = 1;
    if (has_stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CancleChallengeBoss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CancleChallengeBoss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CancleChallengeBoss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void CancleChallengeBoss::MergeFrom(const CancleChallengeBoss& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage_id()) {
      set_stage_id(from.stage_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void CancleChallengeBoss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void CancleChallengeBoss::CopyFrom(const CancleChallengeBoss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool CancleChallengeBoss::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CancleChallengeBoss::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void CancleChallengeBoss::Swap(CancleChallengeBoss* other) {
  if (other != this) {
    std::swap(stage_id_, other->stage_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata CancleChallengeBoss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CancleChallengeBoss_descriptor_;
  metadata.reflection = CancleChallengeBoss_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RushRewardNotify::kListFieldNumber;
#endif  // !_MSC_VER

RushRewardNotify::RushRewardNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RushRewardNotify::InitAsDefaultInstance() {
}

RushRewardNotify::RushRewardNotify(const RushRewardNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RushRewardNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RushRewardNotify::~RushRewardNotify() {
  SharedDtor();
}

void RushRewardNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RushRewardNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RushRewardNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RushRewardNotify_descriptor_;
}

const RushRewardNotify& RushRewardNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleGroundInfo_2eproto();
  return *default_instance_;
}

RushRewardNotify* RushRewardNotify::default_instance_ = NULL;

RushRewardNotify* RushRewardNotify::New() const {
  return new RushRewardNotify;
}

void RushRewardNotify::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool RushRewardNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.NotifyItemList list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void RushRewardNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.NotifyItemList list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RushRewardNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.NotifyItemList list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RushRewardNotify::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.NotifyItemList list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RushRewardNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RushRewardNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RushRewardNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void RushRewardNotify::MergeFrom(const RushRewardNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void RushRewardNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void RushRewardNotify::CopyFrom(const RushRewardNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool RushRewardNotify::IsInitialized() const {

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void RushRewardNotify::SetInitialized() {

  for (int i = 0; i < list_size(); i++) {
    this->mutable_list(i)->SetInitialized();
  }
  return;
}

void RushRewardNotify::Swap(RushRewardNotify* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata RushRewardNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RushRewardNotify_descriptor_;
  metadata.reflection = RushRewardNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterBattleGroundReply::kBriefFieldNumber;
const int EnterBattleGroundReply::kInfoFieldNumber;
#endif  // !_MSC_VER

EnterBattleGroundReply::EnterBattleGroundReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterBattleGroundReply::InitAsDefaultInstance() {
  brief_ = const_cast< ::Packet::BattleGroundBrief*>(&::Packet::BattleGroundBrief::default_instance());
  info_ = const_cast< ::Packet::BattleGroundInfo*>(&::Packet::BattleGroundInfo::default_instance());
}

EnterBattleGroundReply::EnterBattleGroundReply(const EnterBattleGroundReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterBattleGroundReply::SharedCtor() {
  _cached_size_ = 0;
  brief_ = NULL;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterBattleGroundReply::~EnterBattleGroundReply() {
  SharedDtor();
}

void EnterBattleGroundReply::SharedDtor() {
  if (this != default_instance_) {
    delete brief_;
    delete info_;
  }
}

void EnterBattleGroundReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterBattleGroundReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterBattleGroundReply_descriptor_;
}

const EnterBattleGroundReply& EnterBattleGroundReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleGroundInfo_2eproto();
  return *default_instance_;
}

EnterBattleGroundReply* EnterBattleGroundReply::default_instance_ = NULL;

EnterBattleGroundReply* EnterBattleGroundReply::New() const {
  return new EnterBattleGroundReply;
}

void EnterBattleGroundReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_brief()) {
      if (brief_ != NULL) brief_->::Packet::BattleGroundBrief::Clear();
    }
    if (has_info()) {
      if (info_ != NULL) info_->::Packet::BattleGroundInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool EnterBattleGroundReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Packet.BattleGroundBrief brief = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_brief()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .Packet.BattleGroundInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void EnterBattleGroundReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Packet.BattleGroundBrief brief = 1;
  if (has_brief()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->brief(), output);
  }

  // optional .Packet.BattleGroundInfo info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterBattleGroundReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Packet.BattleGroundBrief brief = 1;
  if (has_brief()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->brief(), target);
  }

  // optional .Packet.BattleGroundInfo info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterBattleGroundReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Packet.BattleGroundBrief brief = 1;
    if (has_brief()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->brief());
    }

    // optional .Packet.BattleGroundInfo info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterBattleGroundReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterBattleGroundReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterBattleGroundReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void EnterBattleGroundReply::MergeFrom(const EnterBattleGroundReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_brief()) {
      mutable_brief()->::Packet::BattleGroundBrief::MergeFrom(from.brief());
    }
    if (from.has_info()) {
      mutable_info()->::Packet::BattleGroundInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void EnterBattleGroundReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void EnterBattleGroundReply::CopyFrom(const EnterBattleGroundReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool EnterBattleGroundReply::IsInitialized() const {

  if (has_brief()) {
    if (!this->brief().IsInitialized()) return false;
  }
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void EnterBattleGroundReply::SetInitialized() {

  if (has_brief()) {
    this->mutable_brief()->SetInitialized();
  }
  if (has_info()) {
    this->mutable_info()->SetInitialized();
  }
  return;
}

void EnterBattleGroundReply::Swap(EnterBattleGroundReply* other) {
  if (other != this) {
    std::swap(brief_, other->brief_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata EnterBattleGroundReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterBattleGroundReply_descriptor_;
  metadata.reflection = EnterBattleGroundReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerReachBattlePos::kBattleGroundGuidFieldNumber;
const int PlayerReachBattlePos::kGuidsFieldNumber;
const int PlayerReachBattlePos::kPositionsFieldNumber;
#endif  // !_MSC_VER

PlayerReachBattlePos::PlayerReachBattlePos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerReachBattlePos::InitAsDefaultInstance() {
}

PlayerReachBattlePos::PlayerReachBattlePos(const PlayerReachBattlePos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerReachBattlePos::SharedCtor() {
  _cached_size_ = 0;
  battle_ground_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerReachBattlePos::~PlayerReachBattlePos() {
  SharedDtor();
}

void PlayerReachBattlePos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerReachBattlePos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerReachBattlePos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerReachBattlePos_descriptor_;
}

const PlayerReachBattlePos& PlayerReachBattlePos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleGroundInfo_2eproto();
  return *default_instance_;
}

PlayerReachBattlePos* PlayerReachBattlePos::default_instance_ = NULL;

PlayerReachBattlePos* PlayerReachBattlePos::New() const {
  return new PlayerReachBattlePos;
}

void PlayerReachBattlePos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battle_ground_guid_ = GOOGLE_ULONGLONG(0);
  }
  guids_.Clear();
  positions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerReachBattlePos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 battle_ground_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &battle_ground_guid_)));
          set_has_battle_ground_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_guids;
        break;
      }

      // repeated fixed64 guids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_guids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17, input, this->mutable_guids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_guids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_guids;
        if (input->ExpectTag(26)) goto parse_positions;
        break;
      }

      // repeated .Packet.Position positions = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_positions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_positions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_positions;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerReachBattlePos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 battle_ground_guid = 1;
  if (has_battle_ground_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->battle_ground_guid(), output);
  }

  // repeated fixed64 guids = 2;
  for (int i = 0; i < this->guids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->guids(i), output);
  }

  // repeated .Packet.Position positions = 3;
  for (int i = 0; i < this->positions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->positions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerReachBattlePos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 battle_ground_guid = 1;
  if (has_battle_ground_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->battle_ground_guid(), target);
  }

  // repeated fixed64 guids = 2;
  for (int i = 0; i < this->guids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(2, this->guids(i), target);
  }

  // repeated .Packet.Position positions = 3;
  for (int i = 0; i < this->positions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->positions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerReachBattlePos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 battle_ground_guid = 1;
    if (has_battle_ground_guid()) {
      total_size += 1 + 8;
    }

  }
  // repeated fixed64 guids = 2;
  {
    int data_size = 0;
    data_size = 8 * this->guids_size();
    total_size += 1 * this->guids_size() + data_size;
  }

  // repeated .Packet.Position positions = 3;
  total_size += 1 * this->positions_size();
  for (int i = 0; i < this->positions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->positions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerReachBattlePos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerReachBattlePos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerReachBattlePos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerReachBattlePos::MergeFrom(const PlayerReachBattlePos& from) {
  GOOGLE_CHECK_NE(&from, this);
  guids_.MergeFrom(from.guids_);
  positions_.MergeFrom(from.positions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battle_ground_guid()) {
      set_battle_ground_guid(from.battle_ground_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerReachBattlePos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerReachBattlePos::CopyFrom(const PlayerReachBattlePos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerReachBattlePos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < positions_size(); i++) {
    if (!this->positions(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerReachBattlePos::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  for (int i = 0; i < positions_size(); i++) {
    this->mutable_positions(i)->SetInitialized();
  }
  return;
}

void PlayerReachBattlePos::Swap(PlayerReachBattlePos* other) {
  if (other != this) {
    std::swap(battle_ground_guid_, other->battle_ground_guid_);
    guids_.Swap(&other->guids_);
    positions_.Swap(&other->positions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerReachBattlePos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerReachBattlePos_descriptor_;
  metadata.reflection = PlayerReachBattlePos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleGroundOverNotify::kBriefFieldNumber;
const int BattleGroundOverNotify::kWinnerCampFieldNumber;
const int BattleGroundOverNotify::kTimeStampFieldNumber;
const int BattleGroundOverNotify::kWaitMillsecFieldNumber;
#endif  // !_MSC_VER

BattleGroundOverNotify::BattleGroundOverNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleGroundOverNotify::InitAsDefaultInstance() {
  brief_ = const_cast< ::Packet::BattleGroundBrief*>(&::Packet::BattleGroundBrief::default_instance());
}

BattleGroundOverNotify::BattleGroundOverNotify(const BattleGroundOverNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleGroundOverNotify::SharedCtor() {
  _cached_size_ = 0;
  brief_ = NULL;
  winner_camp_ = 0;
  time_stamp_ = GOOGLE_ULONGLONG(0);
  wait_millsec_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleGroundOverNotify::~BattleGroundOverNotify() {
  SharedDtor();
}

void BattleGroundOverNotify::SharedDtor() {
  if (this != default_instance_) {
    delete brief_;
  }
}

void BattleGroundOverNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleGroundOverNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleGroundOverNotify_descriptor_;
}

const BattleGroundOverNotify& BattleGroundOverNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleGroundInfo_2eproto();
  return *default_instance_;
}

BattleGroundOverNotify* BattleGroundOverNotify::default_instance_ = NULL;

BattleGroundOverNotify* BattleGroundOverNotify::New() const {
  return new BattleGroundOverNotify;
}

void BattleGroundOverNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_brief()) {
      if (brief_ != NULL) brief_->::Packet::BattleGroundBrief::Clear();
    }
    winner_camp_ = 0;
    time_stamp_ = GOOGLE_ULONGLONG(0);
    wait_millsec_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool BattleGroundOverNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.BattleGroundBrief brief = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_brief()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_winner_camp;
        break;
      }

      // required int32 winner_camp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winner_camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winner_camp_)));
          set_has_winner_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_time_stamp;
        break;
      }

      // required fixed64 time_stamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_wait_millsec;
        break;
      }

      // optional fixed64 wait_millsec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_wait_millsec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &wait_millsec_)));
          set_has_wait_millsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void BattleGroundOverNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.BattleGroundBrief brief = 1;
  if (has_brief()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->brief(), output);
  }

  // required int32 winner_camp = 2;
  if (has_winner_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->winner_camp(), output);
  }

  // required fixed64 time_stamp = 3;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->time_stamp(), output);
  }

  // optional fixed64 wait_millsec = 4;
  if (has_wait_millsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->wait_millsec(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleGroundOverNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.BattleGroundBrief brief = 1;
  if (has_brief()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->brief(), target);
  }

  // required int32 winner_camp = 2;
  if (has_winner_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->winner_camp(), target);
  }

  // required fixed64 time_stamp = 3;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->time_stamp(), target);
  }

  // optional fixed64 wait_millsec = 4;
  if (has_wait_millsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->wait_millsec(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleGroundOverNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.BattleGroundBrief brief = 1;
    if (has_brief()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->brief());
    }

    // required int32 winner_camp = 2;
    if (has_winner_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winner_camp());
    }

    // required fixed64 time_stamp = 3;
    if (has_time_stamp()) {
      total_size += 1 + 8;
    }

    // optional fixed64 wait_millsec = 4;
    if (has_wait_millsec()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleGroundOverNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleGroundOverNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleGroundOverNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void BattleGroundOverNotify::MergeFrom(const BattleGroundOverNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_brief()) {
      mutable_brief()->::Packet::BattleGroundBrief::MergeFrom(from.brief());
    }
    if (from.has_winner_camp()) {
      set_winner_camp(from.winner_camp());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_wait_millsec()) {
      set_wait_millsec(from.wait_millsec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void BattleGroundOverNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void BattleGroundOverNotify::CopyFrom(const BattleGroundOverNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool BattleGroundOverNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_brief()) {
    if (!this->brief().IsInitialized()) return false;
  }
  return true;
}

void BattleGroundOverNotify::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  if (has_brief()) {
    this->mutable_brief()->SetInitialized();
  }
  return;
}

void BattleGroundOverNotify::Swap(BattleGroundOverNotify* other) {
  if (other != this) {
    std::swap(brief_, other->brief_);
    std::swap(winner_camp_, other->winner_camp_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(wait_millsec_, other->wait_millsec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata BattleGroundOverNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleGroundOverNotify_descriptor_;
  metadata.reflection = BattleGroundOverNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleStartNotify::kBriefFieldNumber;
#endif  // !_MSC_VER

BattleStartNotify::BattleStartNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleStartNotify::InitAsDefaultInstance() {
  brief_ = const_cast< ::Packet::BattleGroundBrief*>(&::Packet::BattleGroundBrief::default_instance());
}

BattleStartNotify::BattleStartNotify(const BattleStartNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleStartNotify::SharedCtor() {
  _cached_size_ = 0;
  brief_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleStartNotify::~BattleStartNotify() {
  SharedDtor();
}

void BattleStartNotify::SharedDtor() {
  if (this != default_instance_) {
    delete brief_;
  }
}

void BattleStartNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleStartNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleStartNotify_descriptor_;
}

const BattleStartNotify& BattleStartNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleGroundInfo_2eproto();
  return *default_instance_;
}

BattleStartNotify* BattleStartNotify::default_instance_ = NULL;

BattleStartNotify* BattleStartNotify::New() const {
  return new BattleStartNotify;
}

void BattleStartNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_brief()) {
      if (brief_ != NULL) brief_->::Packet::BattleGroundBrief::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool BattleStartNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.BattleGroundBrief brief = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_brief()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void BattleStartNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.BattleGroundBrief brief = 1;
  if (has_brief()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->brief(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleStartNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.BattleGroundBrief brief = 1;
  if (has_brief()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->brief(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleStartNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.BattleGroundBrief brief = 1;
    if (has_brief()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->brief());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleStartNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleStartNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleStartNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void BattleStartNotify::MergeFrom(const BattleStartNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_brief()) {
      mutable_brief()->::Packet::BattleGroundBrief::MergeFrom(from.brief());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void BattleStartNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void BattleStartNotify::CopyFrom(const BattleStartNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool BattleStartNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_brief()) {
    if (!this->brief().IsInitialized()) return false;
  }
  return true;
}

void BattleStartNotify::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  if (has_brief()) {
    this->mutable_brief()->SetInitialized();
  }
  return;
}

void BattleStartNotify::Swap(BattleStartNotify* other) {
  if (other != this) {
    std::swap(brief_, other->brief_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata BattleStartNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleStartNotify_descriptor_;
  metadata.reflection = BattleStartNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RefreshBattleGround::kBriefFieldNumber;
const int RefreshBattleGround::kNewInfoFieldNumber;
const int RefreshBattleGround::kTimeStampFieldNumber;
#endif  // !_MSC_VER

RefreshBattleGround::RefreshBattleGround()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RefreshBattleGround::InitAsDefaultInstance() {
  brief_ = const_cast< ::Packet::BattleGroundBrief*>(&::Packet::BattleGroundBrief::default_instance());
  new_info_ = const_cast< ::Packet::BattleGroundInfo*>(&::Packet::BattleGroundInfo::default_instance());
}

RefreshBattleGround::RefreshBattleGround(const RefreshBattleGround& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RefreshBattleGround::SharedCtor() {
  _cached_size_ = 0;
  brief_ = NULL;
  new_info_ = NULL;
  time_stamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RefreshBattleGround::~RefreshBattleGround() {
  SharedDtor();
}

void RefreshBattleGround::SharedDtor() {
  if (this != default_instance_) {
    delete brief_;
    delete new_info_;
  }
}

void RefreshBattleGround::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefreshBattleGround::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefreshBattleGround_descriptor_;
}

const RefreshBattleGround& RefreshBattleGround::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleGroundInfo_2eproto();
  return *default_instance_;
}

RefreshBattleGround* RefreshBattleGround::default_instance_ = NULL;

RefreshBattleGround* RefreshBattleGround::New() const {
  return new RefreshBattleGround;
}

void RefreshBattleGround::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_brief()) {
      if (brief_ != NULL) brief_->::Packet::BattleGroundBrief::Clear();
    }
    if (has_new_info()) {
      if (new_info_ != NULL) new_info_->::Packet::BattleGroundInfo::Clear();
    }
    time_stamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool RefreshBattleGround::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.BattleGroundBrief brief = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_brief()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_new_info;
        break;
      }

      // required .Packet.BattleGroundInfo new_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_time_stamp;
        break;
      }

      // required fixed64 time_stamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void RefreshBattleGround::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.BattleGroundBrief brief = 1;
  if (has_brief()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->brief(), output);
  }

  // required .Packet.BattleGroundInfo new_info = 2;
  if (has_new_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->new_info(), output);
  }

  // required fixed64 time_stamp = 3;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RefreshBattleGround::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.BattleGroundBrief brief = 1;
  if (has_brief()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->brief(), target);
  }

  // required .Packet.BattleGroundInfo new_info = 2;
  if (has_new_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->new_info(), target);
  }

  // required fixed64 time_stamp = 3;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RefreshBattleGround::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.BattleGroundBrief brief = 1;
    if (has_brief()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->brief());
    }

    // required .Packet.BattleGroundInfo new_info = 2;
    if (has_new_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_info());
    }

    // required fixed64 time_stamp = 3;
    if (has_time_stamp()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefreshBattleGround::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RefreshBattleGround* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RefreshBattleGround*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void RefreshBattleGround::MergeFrom(const RefreshBattleGround& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_brief()) {
      mutable_brief()->::Packet::BattleGroundBrief::MergeFrom(from.brief());
    }
    if (from.has_new_info()) {
      mutable_new_info()->::Packet::BattleGroundInfo::MergeFrom(from.new_info());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void RefreshBattleGround::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void RefreshBattleGround::CopyFrom(const RefreshBattleGround& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool RefreshBattleGround::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_brief()) {
    if (!this->brief().IsInitialized()) return false;
  }
  if (has_new_info()) {
    if (!this->new_info().IsInitialized()) return false;
  }
  return true;
}

void RefreshBattleGround::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  if (has_brief()) {
    this->mutable_brief()->SetInitialized();
  }
  if (has_new_info()) {
    this->mutable_new_info()->SetInitialized();
  }
  return;
}

void RefreshBattleGround::Swap(RefreshBattleGround* other) {
  if (other != this) {
    std::swap(brief_, other->brief_);
    std::swap(new_info_, other->new_info_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata RefreshBattleGround::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefreshBattleGround_descriptor_;
  metadata.reflection = RefreshBattleGround_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleGroundBrief::kGuidFieldNumber;
const int BattleGroundBrief::kTypeFieldNumber;
const int BattleGroundBrief::kElapseTimeFieldNumber;
const int BattleGroundBrief::kSceneIdFieldNumber;
const int BattleGroundBrief::kStageIdFieldNumber;
const int BattleGroundBrief::kBattleGroupIdFieldNumber;
const int BattleGroundBrief::kCanManualControlFieldNumber;
const int BattleGroundBrief::kMissionIdFieldNumber;
const int BattleGroundBrief::kTimeOutFieldNumber;
const int BattleGroundBrief::kFightTimeFieldNumber;
#endif  // !_MSC_VER

BattleGroundBrief::BattleGroundBrief()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleGroundBrief::InitAsDefaultInstance() {
}

BattleGroundBrief::BattleGroundBrief(const BattleGroundBrief& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleGroundBrief::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  elapse_time_ = GOOGLE_ULONGLONG(0);
  scene_id_ = 0;
  stage_id_ = 0;
  battle_group_id_ = 0;
  can_manual_control_ = false;
  mission_id_ = 0;
  time_out_ = GOOGLE_ULONGLONG(0);
  fight_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleGroundBrief::~BattleGroundBrief() {
  SharedDtor();
}

void BattleGroundBrief::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleGroundBrief::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleGroundBrief::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleGroundBrief_descriptor_;
}

const BattleGroundBrief& BattleGroundBrief::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleGroundInfo_2eproto();
  return *default_instance_;
}

BattleGroundBrief* BattleGroundBrief::default_instance_ = NULL;

BattleGroundBrief* BattleGroundBrief::New() const {
  return new BattleGroundBrief;
}

void BattleGroundBrief::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
    elapse_time_ = GOOGLE_ULONGLONG(0);
    scene_id_ = 0;
    stage_id_ = 0;
    battle_group_id_ = 0;
    can_manual_control_ = false;
    mission_id_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    time_out_ = GOOGLE_ULONGLONG(0);
    fight_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool BattleGroundBrief::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .Packet.BattleGroundType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::BattleGroundType_IsValid(value)) {
            set_type(static_cast< ::Packet::BattleGroundType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_elapse_time;
        break;
      }

      // required fixed64 elapse_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_elapse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &elapse_time_)));
          set_has_elapse_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scene_id;
        break;
      }

      // required int32 scene_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_stage_id;
        break;
      }

      // optional int32 stage_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_id_)));
          set_has_stage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_battle_group_id;
        break;
      }

      // required int32 battle_group_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_group_id_)));
          set_has_battle_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_can_manual_control;
        break;
      }

      // required bool can_manual_control = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_manual_control:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_manual_control_)));
          set_has_can_manual_control();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_mission_id;
        break;
      }

      // optional int32 mission_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mission_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mission_id_)));
          set_has_mission_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_time_out;
        break;
      }

      // optional fixed64 time_out = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &time_out_)));
          set_has_time_out();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_fight_time;
        break;
      }

      // optional fixed64 fight_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_fight_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &fight_time_)));
          set_has_fight_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void BattleGroundBrief::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required .Packet.BattleGroundType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required fixed64 elapse_time = 3;
  if (has_elapse_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->elapse_time(), output);
  }

  // required int32 scene_id = 4;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->scene_id(), output);
  }

  // optional int32 stage_id = 5;
  if (has_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->stage_id(), output);
  }

  // required int32 battle_group_id = 6;
  if (has_battle_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->battle_group_id(), output);
  }

  // required bool can_manual_control = 7;
  if (has_can_manual_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->can_manual_control(), output);
  }

  // optional int32 mission_id = 8;
  if (has_mission_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->mission_id(), output);
  }

  // optional fixed64 time_out = 9;
  if (has_time_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(9, this->time_out(), output);
  }

  // optional fixed64 fight_time = 10;
  if (has_fight_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(10, this->fight_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleGroundBrief::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required .Packet.BattleGroundType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required fixed64 elapse_time = 3;
  if (has_elapse_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->elapse_time(), target);
  }

  // required int32 scene_id = 4;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->scene_id(), target);
  }

  // optional int32 stage_id = 5;
  if (has_stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->stage_id(), target);
  }

  // required int32 battle_group_id = 6;
  if (has_battle_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->battle_group_id(), target);
  }

  // required bool can_manual_control = 7;
  if (has_can_manual_control()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->can_manual_control(), target);
  }

  // optional int32 mission_id = 8;
  if (has_mission_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->mission_id(), target);
  }

  // optional fixed64 time_out = 9;
  if (has_time_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(9, this->time_out(), target);
  }

  // optional fixed64 fight_time = 10;
  if (has_fight_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(10, this->fight_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleGroundBrief::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required .Packet.BattleGroundType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required fixed64 elapse_time = 3;
    if (has_elapse_time()) {
      total_size += 1 + 8;
    }

    // required int32 scene_id = 4;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }

    // optional int32 stage_id = 5;
    if (has_stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage_id());
    }

    // required int32 battle_group_id = 6;
    if (has_battle_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_group_id());
    }

    // required bool can_manual_control = 7;
    if (has_can_manual_control()) {
      total_size += 1 + 1;
    }

    // optional int32 mission_id = 8;
    if (has_mission_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mission_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional fixed64 time_out = 9;
    if (has_time_out()) {
      total_size += 1 + 8;
    }

    // optional fixed64 fight_time = 10;
    if (has_fight_time()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleGroundBrief::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleGroundBrief* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleGroundBrief*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void BattleGroundBrief::MergeFrom(const BattleGroundBrief& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_elapse_time()) {
      set_elapse_time(from.elapse_time());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_stage_id()) {
      set_stage_id(from.stage_id());
    }
    if (from.has_battle_group_id()) {
      set_battle_group_id(from.battle_group_id());
    }
    if (from.has_can_manual_control()) {
      set_can_manual_control(from.can_manual_control());
    }
    if (from.has_mission_id()) {
      set_mission_id(from.mission_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time_out()) {
      set_time_out(from.time_out());
    }
    if (from.has_fight_time()) {
      set_fight_time(from.fight_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void BattleGroundBrief::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void BattleGroundBrief::CopyFrom(const BattleGroundBrief& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool BattleGroundBrief::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000006f) != 0x0000006f) return false;

  return true;
}

void BattleGroundBrief::SetInitialized() {
  _has_bits_[0] |= 0x0000006f;

  return;
}

void BattleGroundBrief::Swap(BattleGroundBrief* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(type_, other->type_);
    std::swap(elapse_time_, other->elapse_time_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(stage_id_, other->stage_id_);
    std::swap(battle_group_id_, other->battle_group_id_);
    std::swap(can_manual_control_, other->can_manual_control_);
    std::swap(mission_id_, other->mission_id_);
    std::swap(time_out_, other->time_out_);
    std::swap(fight_time_, other->fight_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata BattleGroundBrief::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleGroundBrief_descriptor_;
  metadata.reflection = BattleGroundBrief_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ExitBattleGround::ExitBattleGround()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExitBattleGround::InitAsDefaultInstance() {
}

ExitBattleGround::ExitBattleGround(const ExitBattleGround& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExitBattleGround::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExitBattleGround::~ExitBattleGround() {
  SharedDtor();
}

void ExitBattleGround::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExitBattleGround::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExitBattleGround::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExitBattleGround_descriptor_;
}

const ExitBattleGround& ExitBattleGround::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleGroundInfo_2eproto();
  return *default_instance_;
}

ExitBattleGround* ExitBattleGround::default_instance_ = NULL;

ExitBattleGround* ExitBattleGround::New() const {
  return new ExitBattleGround;
}

void ExitBattleGround::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ExitBattleGround::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void ExitBattleGround::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExitBattleGround::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExitBattleGround::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExitBattleGround::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExitBattleGround* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExitBattleGround*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ExitBattleGround::MergeFrom(const ExitBattleGround& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ExitBattleGround::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ExitBattleGround::CopyFrom(const ExitBattleGround& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ExitBattleGround::IsInitialized() const {

  return true;
}

void ExitBattleGround::SetInitialized() {

  return;
}

void ExitBattleGround::Swap(ExitBattleGround* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ExitBattleGround::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExitBattleGround_descriptor_;
  metadata.reflection = ExitBattleGround_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleGroundInfo::kBriefFieldNumber;
const int BattleGroundInfo::kAttackersFieldNumber;
const int BattleGroundInfo::kDefendersFieldNumber;
#endif  // !_MSC_VER

BattleGroundInfo::BattleGroundInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleGroundInfo::InitAsDefaultInstance() {
  brief_ = const_cast< ::Packet::BattleGroundBrief*>(&::Packet::BattleGroundBrief::default_instance());
}

BattleGroundInfo::BattleGroundInfo(const BattleGroundInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleGroundInfo::SharedCtor() {
  _cached_size_ = 0;
  brief_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleGroundInfo::~BattleGroundInfo() {
  SharedDtor();
}

void BattleGroundInfo::SharedDtor() {
  if (this != default_instance_) {
    delete brief_;
  }
}

void BattleGroundInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleGroundInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleGroundInfo_descriptor_;
}

const BattleGroundInfo& BattleGroundInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleGroundInfo_2eproto();
  return *default_instance_;
}

BattleGroundInfo* BattleGroundInfo::default_instance_ = NULL;

BattleGroundInfo* BattleGroundInfo::New() const {
  return new BattleGroundInfo;
}

void BattleGroundInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_brief()) {
      if (brief_ != NULL) brief_->::Packet::BattleGroundBrief::Clear();
    }
  }
  attackers_.Clear();
  defenders_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool BattleGroundInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.BattleGroundBrief brief = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_brief()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attackers;
        break;
      }

      // repeated .Packet.ActorBattleInfo attackers = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attackers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attackers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attackers;
        if (input->ExpectTag(26)) goto parse_defenders;
        break;
      }

      // repeated .Packet.ActorBattleInfo defenders = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defenders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_defenders()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_defenders;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void BattleGroundInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.BattleGroundBrief brief = 1;
  if (has_brief()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->brief(), output);
  }

  // repeated .Packet.ActorBattleInfo attackers = 2;
  for (int i = 0; i < this->attackers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attackers(i), output);
  }

  // repeated .Packet.ActorBattleInfo defenders = 3;
  for (int i = 0; i < this->defenders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->defenders(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleGroundInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.BattleGroundBrief brief = 1;
  if (has_brief()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->brief(), target);
  }

  // repeated .Packet.ActorBattleInfo attackers = 2;
  for (int i = 0; i < this->attackers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attackers(i), target);
  }

  // repeated .Packet.ActorBattleInfo defenders = 3;
  for (int i = 0; i < this->defenders_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->defenders(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleGroundInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.BattleGroundBrief brief = 1;
    if (has_brief()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->brief());
    }

  }
  // repeated .Packet.ActorBattleInfo attackers = 2;
  total_size += 1 * this->attackers_size();
  for (int i = 0; i < this->attackers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attackers(i));
  }

  // repeated .Packet.ActorBattleInfo defenders = 3;
  total_size += 1 * this->defenders_size();
  for (int i = 0; i < this->defenders_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->defenders(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleGroundInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleGroundInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleGroundInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void BattleGroundInfo::MergeFrom(const BattleGroundInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  attackers_.MergeFrom(from.attackers_);
  defenders_.MergeFrom(from.defenders_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_brief()) {
      mutable_brief()->::Packet::BattleGroundBrief::MergeFrom(from.brief());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void BattleGroundInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void BattleGroundInfo::CopyFrom(const BattleGroundInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool BattleGroundInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_brief()) {
    if (!this->brief().IsInitialized()) return false;
  }
  for (int i = 0; i < attackers_size(); i++) {
    if (!this->attackers(i).IsInitialized()) return false;
  }
  for (int i = 0; i < defenders_size(); i++) {
    if (!this->defenders(i).IsInitialized()) return false;
  }
  return true;
}

void BattleGroundInfo::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  if (has_brief()) {
    this->mutable_brief()->SetInitialized();
  }
  for (int i = 0; i < attackers_size(); i++) {
    this->mutable_attackers(i)->SetInitialized();
  }
  for (int i = 0; i < defenders_size(); i++) {
    this->mutable_defenders(i)->SetInitialized();
  }
  return;
}

void BattleGroundInfo::Swap(BattleGroundInfo* other) {
  if (other != this) {
    std::swap(brief_, other->brief_);
    attackers_.Swap(&other->attackers_);
    defenders_.Swap(&other->defenders_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata BattleGroundInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleGroundInfo_descriptor_;
  metadata.reflection = BattleGroundInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActorBattleInfo::kBaseInfoFieldNumber;
const int ActorBattleInfo::kBattleInfoFieldNumber;
const int ActorBattleInfo::kPositonFieldNumber;
const int ActorBattleInfo::kDirectionFieldNumber;
const int ActorBattleInfo::kStateFieldNumber;
const int ActorBattleInfo::kMonsterConfigIdFieldNumber;
const int ActorBattleInfo::kObjectRadiusFieldNumber;
const int ActorBattleInfo::kPositionIndexFieldNumber;
const int ActorBattleInfo::kEquipsFieldNumber;
const int ActorBattleInfo::kSideFieldNumber;
#endif  // !_MSC_VER

ActorBattleInfo::ActorBattleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActorBattleInfo::InitAsDefaultInstance() {
  base_info_ = const_cast< ::Packet::ActorBasicInfo*>(&::Packet::ActorBasicInfo::default_instance());
  battle_info_ = const_cast< ::Packet::BattleInfo*>(&::Packet::BattleInfo::default_instance());
  positon_ = const_cast< ::Packet::Position*>(&::Packet::Position::default_instance());
}

ActorBattleInfo::ActorBattleInfo(const ActorBattleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActorBattleInfo::SharedCtor() {
  _cached_size_ = 0;
  base_info_ = NULL;
  battle_info_ = NULL;
  positon_ = NULL;
  direction_ = 0;
  state_ = 1;
  monster_config_id_ = 0;
  object_radius_ = 0;
  position_index_ = 0;
  side_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorBattleInfo::~ActorBattleInfo() {
  SharedDtor();
}

void ActorBattleInfo::SharedDtor() {
  if (this != default_instance_) {
    delete base_info_;
    delete battle_info_;
    delete positon_;
  }
}

void ActorBattleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorBattleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorBattleInfo_descriptor_;
}

const ActorBattleInfo& ActorBattleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleGroundInfo_2eproto();
  return *default_instance_;
}

ActorBattleInfo* ActorBattleInfo::default_instance_ = NULL;

ActorBattleInfo* ActorBattleInfo::New() const {
  return new ActorBattleInfo;
}

void ActorBattleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_info()) {
      if (base_info_ != NULL) base_info_->::Packet::ActorBasicInfo::Clear();
    }
    if (has_battle_info()) {
      if (battle_info_ != NULL) battle_info_->::Packet::BattleInfo::Clear();
    }
    if (has_positon()) {
      if (positon_ != NULL) positon_->::Packet::Position::Clear();
    }
    direction_ = 0;
    state_ = 1;
    monster_config_id_ = 0;
    object_radius_ = 0;
    position_index_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    side_ = 0;
  }
  equips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ActorBattleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.ActorBasicInfo base_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_battle_info;
        break;
      }

      // required .Packet.BattleInfo battle_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_positon;
        break;
      }

      // required .Packet.Position positon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_positon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_positon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_direction;
        break;
      }

      // required double direction = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }

      // required .Packet.ActorStateType state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::ActorStateType_IsValid(value)) {
            set_state(static_cast< ::Packet::ActorStateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_monster_config_id;
        break;
      }

      // optional int32 monster_config_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monster_config_id_)));
          set_has_monster_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_object_radius;
        break;
      }

      // required int32 object_radius = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_object_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &object_radius_)));
          set_has_object_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_position_index;
        break;
      }

      // required int32 position_index = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_index_)));
          set_has_position_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_equips;
        break;
      }

      // repeated .Packet.EquipItem equips = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_equips;
        if (input->ExpectTag(80)) goto parse_side;
        break;
      }

      // required int32 side = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_side:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &side_)));
          set_has_side();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ActorBattleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.ActorBasicInfo base_info = 1;
  if (has_base_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_info(), output);
  }

  // required .Packet.BattleInfo battle_info = 2;
  if (has_battle_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battle_info(), output);
  }

  // required .Packet.Position positon = 3;
  if (has_positon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->positon(), output);
  }

  // required double direction = 4;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->direction(), output);
  }

  // required .Packet.ActorStateType state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->state(), output);
  }

  // optional int32 monster_config_id = 6;
  if (has_monster_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->monster_config_id(), output);
  }

  // required int32 object_radius = 7;
  if (has_object_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->object_radius(), output);
  }

  // required int32 position_index = 8;
  if (has_position_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->position_index(), output);
  }

  // repeated .Packet.EquipItem equips = 9;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->equips(i), output);
  }

  // required int32 side = 10;
  if (has_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->side(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActorBattleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.ActorBasicInfo base_info = 1;
  if (has_base_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_info(), target);
  }

  // required .Packet.BattleInfo battle_info = 2;
  if (has_battle_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battle_info(), target);
  }

  // required .Packet.Position positon = 3;
  if (has_positon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->positon(), target);
  }

  // required double direction = 4;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->direction(), target);
  }

  // required .Packet.ActorStateType state = 5;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->state(), target);
  }

  // optional int32 monster_config_id = 6;
  if (has_monster_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->monster_config_id(), target);
  }

  // required int32 object_radius = 7;
  if (has_object_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->object_radius(), target);
  }

  // required int32 position_index = 8;
  if (has_position_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->position_index(), target);
  }

  // repeated .Packet.EquipItem equips = 9;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->equips(i), target);
  }

  // required int32 side = 10;
  if (has_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->side(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActorBattleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.ActorBasicInfo base_info = 1;
    if (has_base_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_info());
    }

    // required .Packet.BattleInfo battle_info = 2;
    if (has_battle_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_info());
    }

    // required .Packet.Position positon = 3;
    if (has_positon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->positon());
    }

    // required double direction = 4;
    if (has_direction()) {
      total_size += 1 + 8;
    }

    // required .Packet.ActorStateType state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional int32 monster_config_id = 6;
    if (has_monster_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monster_config_id());
    }

    // required int32 object_radius = 7;
    if (has_object_radius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->object_radius());
    }

    // required int32 position_index = 8;
    if (has_position_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position_index());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // required int32 side = 10;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->side());
    }

  }
  // repeated .Packet.EquipItem equips = 9;
  total_size += 1 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorBattleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorBattleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorBattleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ActorBattleInfo::MergeFrom(const ActorBattleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  equips_.MergeFrom(from.equips_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_info()) {
      mutable_base_info()->::Packet::ActorBasicInfo::MergeFrom(from.base_info());
    }
    if (from.has_battle_info()) {
      mutable_battle_info()->::Packet::BattleInfo::MergeFrom(from.battle_info());
    }
    if (from.has_positon()) {
      mutable_positon()->::Packet::Position::MergeFrom(from.positon());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_monster_config_id()) {
      set_monster_config_id(from.monster_config_id());
    }
    if (from.has_object_radius()) {
      set_object_radius(from.object_radius());
    }
    if (from.has_position_index()) {
      set_position_index(from.position_index());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_side()) {
      set_side(from.side());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ActorBattleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ActorBattleInfo::CopyFrom(const ActorBattleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ActorBattleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000002df) != 0x000002df) return false;

  if (has_base_info()) {
    if (!this->base_info().IsInitialized()) return false;
  }
  if (has_battle_info()) {
    if (!this->battle_info().IsInitialized()) return false;
  }
  if (has_positon()) {
    if (!this->positon().IsInitialized()) return false;
  }
  for (int i = 0; i < equips_size(); i++) {
    if (!this->equips(i).IsInitialized()) return false;
  }
  return true;
}

void ActorBattleInfo::SetInitialized() {
  _has_bits_[0] |= 0x000002df;

  if (has_base_info()) {
    this->mutable_base_info()->SetInitialized();
  }
  if (has_battle_info()) {
    this->mutable_battle_info()->SetInitialized();
  }
  if (has_positon()) {
    this->mutable_positon()->SetInitialized();
  }
  for (int i = 0; i < equips_size(); i++) {
    this->mutable_equips(i)->SetInitialized();
  }
  return;
}

void ActorBattleInfo::Swap(ActorBattleInfo* other) {
  if (other != this) {
    std::swap(base_info_, other->base_info_);
    std::swap(battle_info_, other->battle_info_);
    std::swap(positon_, other->positon_);
    std::swap(direction_, other->direction_);
    std::swap(state_, other->state_);
    std::swap(monster_config_id_, other->monster_config_id_);
    std::swap(object_radius_, other->object_radius_);
    std::swap(position_index_, other->position_index_);
    equips_.Swap(&other->equips_);
    std::swap(side_, other->side_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ActorBattleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorBattleInfo_descriptor_;
  metadata.reflection = ActorBattleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewActorCreated::kCreatorGuidFieldNumber;
const int NewActorCreated::kSkillIdFieldNumber;
const int NewActorCreated::kAttackersFieldNumber;
const int NewActorCreated::kDefendersFieldNumber;
const int NewActorCreated::kTimeStampFieldNumber;
#endif  // !_MSC_VER

NewActorCreated::NewActorCreated()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NewActorCreated::InitAsDefaultInstance() {
}

NewActorCreated::NewActorCreated(const NewActorCreated& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NewActorCreated::SharedCtor() {
  _cached_size_ = 0;
  creator_guid_ = GOOGLE_ULONGLONG(0);
  skill_id_ = 0;
  time_stamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewActorCreated::~NewActorCreated() {
  SharedDtor();
}

void NewActorCreated::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewActorCreated::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewActorCreated::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewActorCreated_descriptor_;
}

const NewActorCreated& NewActorCreated::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleGroundInfo_2eproto();
  return *default_instance_;
}

NewActorCreated* NewActorCreated::default_instance_ = NULL;

NewActorCreated* NewActorCreated::New() const {
  return new NewActorCreated;
}

void NewActorCreated::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    creator_guid_ = GOOGLE_ULONGLONG(0);
    skill_id_ = 0;
    time_stamp_ = GOOGLE_ULONGLONG(0);
  }
  attackers_.Clear();
  defenders_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool NewActorCreated::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 creator_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &creator_guid_)));
          set_has_creator_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_id;
        break;
      }

      // optional int32 skill_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attackers;
        break;
      }

      // repeated .Packet.ActorBattleInfo attackers = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attackers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attackers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attackers;
        if (input->ExpectTag(34)) goto parse_defenders;
        break;
      }

      // repeated .Packet.ActorBattleInfo defenders = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defenders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_defenders()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_defenders;
        if (input->ExpectTag(41)) goto parse_time_stamp;
        break;
      }

      // required fixed64 time_stamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void NewActorCreated::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 creator_guid = 1;
  if (has_creator_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->creator_guid(), output);
  }

  // optional int32 skill_id = 2;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skill_id(), output);
  }

  // repeated .Packet.ActorBattleInfo attackers = 3;
  for (int i = 0; i < this->attackers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attackers(i), output);
  }

  // repeated .Packet.ActorBattleInfo defenders = 4;
  for (int i = 0; i < this->defenders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->defenders(i), output);
  }

  // required fixed64 time_stamp = 5;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NewActorCreated::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 creator_guid = 1;
  if (has_creator_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->creator_guid(), target);
  }

  // optional int32 skill_id = 2;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skill_id(), target);
  }

  // repeated .Packet.ActorBattleInfo attackers = 3;
  for (int i = 0; i < this->attackers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attackers(i), target);
  }

  // repeated .Packet.ActorBattleInfo defenders = 4;
  for (int i = 0; i < this->defenders_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->defenders(i), target);
  }

  // required fixed64 time_stamp = 5;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NewActorCreated::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 creator_guid = 1;
    if (has_creator_guid()) {
      total_size += 1 + 8;
    }

    // optional int32 skill_id = 2;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }

    // required fixed64 time_stamp = 5;
    if (has_time_stamp()) {
      total_size += 1 + 8;
    }

  }
  // repeated .Packet.ActorBattleInfo attackers = 3;
  total_size += 1 * this->attackers_size();
  for (int i = 0; i < this->attackers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attackers(i));
  }

  // repeated .Packet.ActorBattleInfo defenders = 4;
  total_size += 1 * this->defenders_size();
  for (int i = 0; i < this->defenders_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->defenders(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewActorCreated::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewActorCreated* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewActorCreated*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void NewActorCreated::MergeFrom(const NewActorCreated& from) {
  GOOGLE_CHECK_NE(&from, this);
  attackers_.MergeFrom(from.attackers_);
  defenders_.MergeFrom(from.defenders_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_creator_guid()) {
      set_creator_guid(from.creator_guid());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void NewActorCreated::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void NewActorCreated::CopyFrom(const NewActorCreated& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool NewActorCreated::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;

  for (int i = 0; i < attackers_size(); i++) {
    if (!this->attackers(i).IsInitialized()) return false;
  }
  for (int i = 0; i < defenders_size(); i++) {
    if (!this->defenders(i).IsInitialized()) return false;
  }
  return true;
}

void NewActorCreated::SetInitialized() {
  _has_bits_[0] |= 0x00000010;

  for (int i = 0; i < attackers_size(); i++) {
    this->mutable_attackers(i)->SetInitialized();
  }
  for (int i = 0; i < defenders_size(); i++) {
    this->mutable_defenders(i)->SetInitialized();
  }
  return;
}

void NewActorCreated::Swap(NewActorCreated* other) {
  if (other != this) {
    std::swap(creator_guid_, other->creator_guid_);
    std::swap(skill_id_, other->skill_id_);
    attackers_.Swap(&other->attackers_);
    defenders_.Swap(&other->defenders_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata NewActorCreated::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewActorCreated_descriptor_;
  metadata.reflection = NewActorCreated_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActorDismiss::kGuidFieldNumber;
const int ActorDismiss::kTimeStampFieldNumber;
#endif  // !_MSC_VER

ActorDismiss::ActorDismiss()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActorDismiss::InitAsDefaultInstance() {
}

ActorDismiss::ActorDismiss(const ActorDismiss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActorDismiss::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  time_stamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorDismiss::~ActorDismiss() {
  SharedDtor();
}

void ActorDismiss::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActorDismiss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorDismiss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorDismiss_descriptor_;
}

const ActorDismiss& ActorDismiss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleGroundInfo_2eproto();
  return *default_instance_;
}

ActorDismiss* ActorDismiss::default_instance_ = NULL;

ActorDismiss* ActorDismiss::New() const {
  return new ActorDismiss;
}

void ActorDismiss::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    time_stamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ActorDismiss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_time_stamp;
        break;
      }

      // required fixed64 time_stamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ActorDismiss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required fixed64 time_stamp = 2;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->time_stamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActorDismiss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required fixed64 time_stamp = 2;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->time_stamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActorDismiss::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 time_stamp = 2;
    if (has_time_stamp()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorDismiss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorDismiss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorDismiss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ActorDismiss::MergeFrom(const ActorDismiss& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ActorDismiss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ActorDismiss::CopyFrom(const ActorDismiss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ActorDismiss::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ActorDismiss::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void ActorDismiss::Swap(ActorDismiss* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ActorDismiss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorDismiss_descriptor_;
  metadata.reflection = ActorDismiss_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetControlType::kContralTypeFieldNumber;
#endif  // !_MSC_VER

SetControlType::SetControlType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetControlType::InitAsDefaultInstance() {
}

SetControlType::SetControlType(const SetControlType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetControlType::SharedCtor() {
  _cached_size_ = 0;
  contral_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetControlType::~SetControlType() {
  SharedDtor();
}

void SetControlType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetControlType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetControlType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetControlType_descriptor_;
}

const SetControlType& SetControlType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleGroundInfo_2eproto();
  return *default_instance_;
}

SetControlType* SetControlType::default_instance_ = NULL;

SetControlType* SetControlType::New() const {
  return new SetControlType;
}

void SetControlType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    contral_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SetControlType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.ActorControlType contral_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::ActorControlType_IsValid(value)) {
            set_contral_type(static_cast< ::Packet::ActorControlType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SetControlType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.ActorControlType contral_type = 1;
  if (has_contral_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->contral_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetControlType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.ActorControlType contral_type = 1;
  if (has_contral_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->contral_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetControlType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.ActorControlType contral_type = 1;
    if (has_contral_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->contral_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetControlType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetControlType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetControlType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SetControlType::MergeFrom(const SetControlType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_contral_type()) {
      set_contral_type(from.contral_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SetControlType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SetControlType::CopyFrom(const SetControlType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SetControlType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetControlType::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void SetControlType::Swap(SetControlType* other) {
  if (other != this) {
    std::swap(contral_type_, other->contral_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SetControlType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetControlType_descriptor_;
  metadata.reflection = SetControlType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateFollowState::kFollowFieldNumber;
#endif  // !_MSC_VER

UpdateFollowState::UpdateFollowState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateFollowState::InitAsDefaultInstance() {
}

UpdateFollowState::UpdateFollowState(const UpdateFollowState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateFollowState::SharedCtor() {
  _cached_size_ = 0;
  follow_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateFollowState::~UpdateFollowState() {
  SharedDtor();
}

void UpdateFollowState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateFollowState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateFollowState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateFollowState_descriptor_;
}

const UpdateFollowState& UpdateFollowState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleGroundInfo_2eproto();
  return *default_instance_;
}

UpdateFollowState* UpdateFollowState::default_instance_ = NULL;

UpdateFollowState* UpdateFollowState::New() const {
  return new UpdateFollowState;
}

void UpdateFollowState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    follow_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool UpdateFollowState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool follow = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &follow_)));
          set_has_follow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void UpdateFollowState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool follow = 1;
  if (has_follow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->follow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateFollowState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool follow = 1;
  if (has_follow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->follow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateFollowState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool follow = 1;
    if (has_follow()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateFollowState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateFollowState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateFollowState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void UpdateFollowState::MergeFrom(const UpdateFollowState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_follow()) {
      set_follow(from.follow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void UpdateFollowState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void UpdateFollowState::CopyFrom(const UpdateFollowState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool UpdateFollowState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UpdateFollowState::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void UpdateFollowState::Swap(UpdateFollowState* other) {
  if (other != this) {
    std::swap(follow_, other->follow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata UpdateFollowState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateFollowState_descriptor_;
  metadata.reflection = UpdateFollowState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientActorMove::kGuidFieldNumber;
const int ClientActorMove::kDirectionFieldNumber;
const int ClientActorMove::kMoveSpeedFieldNumber;
const int ClientActorMove::kOldPosFieldNumber;
const int ClientActorMove::kNewPosFieldNumber;
#endif  // !_MSC_VER

ClientActorMove::ClientActorMove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientActorMove::InitAsDefaultInstance() {
  old_pos_ = const_cast< ::Packet::Position*>(&::Packet::Position::default_instance());
  new_pos_ = const_cast< ::Packet::Position*>(&::Packet::Position::default_instance());
}

ClientActorMove::ClientActorMove(const ClientActorMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientActorMove::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  direction_ = 0;
  move_speed_ = 0u;
  old_pos_ = NULL;
  new_pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientActorMove::~ClientActorMove() {
  SharedDtor();
}

void ClientActorMove::SharedDtor() {
  if (this != default_instance_) {
    delete old_pos_;
    delete new_pos_;
  }
}

void ClientActorMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientActorMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientActorMove_descriptor_;
}

const ClientActorMove& ClientActorMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleGroundInfo_2eproto();
  return *default_instance_;
}

ClientActorMove* ClientActorMove::default_instance_ = NULL;

ClientActorMove* ClientActorMove::New() const {
  return new ClientActorMove;
}

void ClientActorMove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    direction_ = 0;
    move_speed_ = 0u;
    if (has_old_pos()) {
      if (old_pos_ != NULL) old_pos_->::Packet::Position::Clear();
    }
    if (has_new_pos()) {
      if (new_pos_ != NULL) new_pos_->::Packet::Position::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ClientActorMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_direction;
        break;
      }

      // required float direction = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_move_speed;
        break;
      }

      // required fixed32 move_speed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_move_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &move_speed_)));
          set_has_move_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_old_pos;
        break;
      }

      // required .Packet.Position old_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_new_pos;
        break;
      }

      // required .Packet.Position new_pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ClientActorMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required float direction = 2;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->direction(), output);
  }

  // required fixed32 move_speed = 3;
  if (has_move_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->move_speed(), output);
  }

  // required .Packet.Position old_pos = 4;
  if (has_old_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->old_pos(), output);
  }

  // required .Packet.Position new_pos = 5;
  if (has_new_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->new_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientActorMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required float direction = 2;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->direction(), target);
  }

  // required fixed32 move_speed = 3;
  if (has_move_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->move_speed(), target);
  }

  // required .Packet.Position old_pos = 4;
  if (has_old_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->old_pos(), target);
  }

  // required .Packet.Position new_pos = 5;
  if (has_new_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->new_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientActorMove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required float direction = 2;
    if (has_direction()) {
      total_size += 1 + 4;
    }

    // required fixed32 move_speed = 3;
    if (has_move_speed()) {
      total_size += 1 + 4;
    }

    // required .Packet.Position old_pos = 4;
    if (has_old_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_pos());
    }

    // required .Packet.Position new_pos = 5;
    if (has_new_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientActorMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientActorMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientActorMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ClientActorMove::MergeFrom(const ClientActorMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_move_speed()) {
      set_move_speed(from.move_speed());
    }
    if (from.has_old_pos()) {
      mutable_old_pos()->::Packet::Position::MergeFrom(from.old_pos());
    }
    if (from.has_new_pos()) {
      mutable_new_pos()->::Packet::Position::MergeFrom(from.new_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ClientActorMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ClientActorMove::CopyFrom(const ClientActorMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ClientActorMove::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_old_pos()) {
    if (!this->old_pos().IsInitialized()) return false;
  }
  if (has_new_pos()) {
    if (!this->new_pos().IsInitialized()) return false;
  }
  return true;
}

void ClientActorMove::SetInitialized() {
  _has_bits_[0] |= 0x0000001f;

  if (has_old_pos()) {
    this->mutable_old_pos()->SetInitialized();
  }
  if (has_new_pos()) {
    this->mutable_new_pos()->SetInitialized();
  }
  return;
}

void ClientActorMove::Swap(ClientActorMove* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(direction_, other->direction_);
    std::swap(move_speed_, other->move_speed_);
    std::swap(old_pos_, other->old_pos_);
    std::swap(new_pos_, other->new_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ClientActorMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientActorMove_descriptor_;
  metadata.reflection = ClientActorMove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientActorStop::kGuidFieldNumber;
const int ClientActorStop::kDirectionFieldNumber;
const int ClientActorStop::kStopPosFieldNumber;
#endif  // !_MSC_VER

ClientActorStop::ClientActorStop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientActorStop::InitAsDefaultInstance() {
  stop_pos_ = const_cast< ::Packet::Position*>(&::Packet::Position::default_instance());
}

ClientActorStop::ClientActorStop(const ClientActorStop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientActorStop::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  direction_ = 0;
  stop_pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientActorStop::~ClientActorStop() {
  SharedDtor();
}

void ClientActorStop::SharedDtor() {
  if (this != default_instance_) {
    delete stop_pos_;
  }
}

void ClientActorStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientActorStop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientActorStop_descriptor_;
}

const ClientActorStop& ClientActorStop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleGroundInfo_2eproto();
  return *default_instance_;
}

ClientActorStop* ClientActorStop::default_instance_ = NULL;

ClientActorStop* ClientActorStop::New() const {
  return new ClientActorStop;
}

void ClientActorStop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    direction_ = 0;
    if (has_stop_pos()) {
      if (stop_pos_ != NULL) stop_pos_->::Packet::Position::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ClientActorStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_direction;
        break;
      }

      // required float direction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stop_pos;
        break;
      }

      // required .Packet.Position stop_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stop_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ClientActorStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required float direction = 3;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->direction(), output);
  }

  // required .Packet.Position stop_pos = 4;
  if (has_stop_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stop_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientActorStop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required float direction = 3;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->direction(), target);
  }

  // required .Packet.Position stop_pos = 4;
  if (has_stop_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stop_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientActorStop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required float direction = 3;
    if (has_direction()) {
      total_size += 1 + 4;
    }

    // required .Packet.Position stop_pos = 4;
    if (has_stop_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stop_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientActorStop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientActorStop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientActorStop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ClientActorStop::MergeFrom(const ClientActorStop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_stop_pos()) {
      mutable_stop_pos()->::Packet::Position::MergeFrom(from.stop_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ClientActorStop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ClientActorStop::CopyFrom(const ClientActorStop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ClientActorStop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (has_stop_pos()) {
    if (!this->stop_pos().IsInitialized()) return false;
  }
  return true;
}

void ClientActorStop::SetInitialized() {
  _has_bits_[0] |= 0x00000006;

  if (has_stop_pos()) {
    this->mutable_stop_pos()->SetInitialized();
  }
  return;
}

void ClientActorStop::Swap(ClientActorStop* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(direction_, other->direction_);
    std::swap(stop_pos_, other->stop_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ClientActorStop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientActorStop_descriptor_;
  metadata.reflection = ClientActorStop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientActorUseSkill::kGuidFieldNumber;
const int ClientActorUseSkill::kSkillIdFieldNumber;
const int ClientActorUseSkill::kTargetGuidsFieldNumber;
const int ClientActorUseSkill::kOtherGuidsFieldNumber;
#endif  // !_MSC_VER

ClientActorUseSkill::ClientActorUseSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientActorUseSkill::InitAsDefaultInstance() {
}

ClientActorUseSkill::ClientActorUseSkill(const ClientActorUseSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientActorUseSkill::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  skill_id_ = 0;
  other_guids_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientActorUseSkill::~ClientActorUseSkill() {
  SharedDtor();
}

void ClientActorUseSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientActorUseSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientActorUseSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientActorUseSkill_descriptor_;
}

const ClientActorUseSkill& ClientActorUseSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleGroundInfo_2eproto();
  return *default_instance_;
}

ClientActorUseSkill* ClientActorUseSkill::default_instance_ = NULL;

ClientActorUseSkill* ClientActorUseSkill::New() const {
  return new ClientActorUseSkill;
}

void ClientActorUseSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    skill_id_ = 0;
    other_guids_ = GOOGLE_ULONGLONG(0);
  }
  target_guids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ClientActorUseSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_id;
        break;
      }

      // required int32 skill_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_target_guids;
        break;
      }

      // repeated fixed64 target_guids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_target_guids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 25, input, this->mutable_target_guids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_target_guids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_target_guids;
        if (input->ExpectTag(33)) goto parse_other_guids;
        break;
      }

      // optional fixed64 other_guids = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_other_guids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &other_guids_)));
          set_has_other_guids();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ClientActorUseSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required int32 skill_id = 2;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skill_id(), output);
  }

  // repeated fixed64 target_guids = 3;
  for (int i = 0; i < this->target_guids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      3, this->target_guids(i), output);
  }

  // optional fixed64 other_guids = 4;
  if (has_other_guids()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->other_guids(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientActorUseSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required int32 skill_id = 2;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skill_id(), target);
  }

  // repeated fixed64 target_guids = 3;
  for (int i = 0; i < this->target_guids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(3, this->target_guids(i), target);
  }

  // optional fixed64 other_guids = 4;
  if (has_other_guids()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->other_guids(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientActorUseSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required int32 skill_id = 2;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }

    // optional fixed64 other_guids = 4;
    if (has_other_guids()) {
      total_size += 1 + 8;
    }

  }
  // repeated fixed64 target_guids = 3;
  {
    int data_size = 0;
    data_size = 8 * this->target_guids_size();
    total_size += 1 * this->target_guids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientActorUseSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientActorUseSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientActorUseSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ClientActorUseSkill::MergeFrom(const ClientActorUseSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  target_guids_.MergeFrom(from.target_guids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_other_guids()) {
      set_other_guids(from.other_guids());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ClientActorUseSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ClientActorUseSkill::CopyFrom(const ClientActorUseSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ClientActorUseSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ClientActorUseSkill::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void ClientActorUseSkill::Swap(ClientActorUseSkill* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(skill_id_, other->skill_id_);
    target_guids_.Swap(&other->target_guids_);
    std::swap(other_guids_, other->other_guids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ClientActorUseSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientActorUseSkill_descriptor_;
  metadata.reflection = ClientActorUseSkill_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

// @@protoc_insertion_point(global_scope)
