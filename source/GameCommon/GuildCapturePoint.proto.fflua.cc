// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GuildCapturePoint.proto
#include "GuildCapturePoint.pb.h"
#include "GuildCapturePoint.proto.fflua.h"
namespace Packet {
bool HeroData_fflua_reg(lua_State* state)
{
//for decltype
	HeroData* message(nullptr);
	message;
	ff::fflua_register_t<HeroData, ctor()>(state, "HeroData", "google::protobuf::Message")
		// required fixed64 player_guid = 1;
		.def(&HeroData::player_guid, "player_guid")
		.def(&HeroData::set_player_guid, "set_player_guid")
		// required int32 actor_config_id = 2;
		.def(&HeroData::actor_config_id, "actor_config_id")
		.def(&HeroData::set_actor_config_id, "set_actor_config_id")
		// required int32 level = 3;
		.def(&HeroData::level, "level")
		.def(&HeroData::set_level, "set_level")
		// required .Packet.ActorColor color = 4;
		.def(&HeroData::color, "color")
		.def(&HeroData::set_color, "set_color")
		// required .Packet.ActorStar star = 5;
		.def(&HeroData::star, "star")
		.def(&HeroData::set_star, "set_star")
		// required int32 hair = 6;
		.def(&HeroData::hair, "hair")
		.def(&HeroData::set_hair, "set_hair")
		.def(&HeroData::ByteSize, "ByteSize")
		.def(&HeroData::SetInitialized, "SetInitialized")
		;
	return true;
}
bool StrongHoldData_fflua_reg(lua_State* state)
{
//for decltype
	StrongHoldData* message(nullptr);
	message;
	ff::fflua_register_t<StrongHoldData, ctor()>(state, "StrongHoldData", "google::protobuf::Message")
		// repeated .Packet.HeroData heros = 1;
		.def(&StrongHoldData::heros_size, "heros_size")
		.def<decltype(message->heros(0)) (StrongHoldData::*)(int) const>(&StrongHoldData::heros, "heros")
		.def<decltype(message->mutable_heros(0)) (StrongHoldData::*)(int)>(&StrongHoldData::mutable_heros, "mutable_heros")
		.def(&StrongHoldData::add_heros, "add_heros")
		// required int32 score = 2;
		.def(&StrongHoldData::score, "score")
		.def(&StrongHoldData::set_score, "set_score")
		.def(&StrongHoldData::ByteSize, "ByteSize")
		.def(&StrongHoldData::SetInitialized, "SetInitialized")
		;
	return true;
}
bool CapturePointDB_fflua_reg(lua_State* state)
{
//for decltype
	CapturePointDB* message(nullptr);
	message;
	ff::fflua_register_t<CapturePointDB, ctor()>(state, "CapturePointDB", "google::protobuf::Message")
		// required int32 chapter_id = 1;
		.def(&CapturePointDB::chapter_id, "chapter_id")
		.def(&CapturePointDB::set_chapter_id, "set_chapter_id")
		// required .Packet.CaptureStatus status = 2;
		.def(&CapturePointDB::status, "status")
		.def(&CapturePointDB::set_status, "set_status")
		// required fixed64 capture_guild_guid = 5;
		.def(&CapturePointDB::capture_guild_guid, "capture_guild_guid")
		.def(&CapturePointDB::set_capture_guild_guid, "set_capture_guild_guid")
		// required fixed64 challenger_guild_guid = 6;
		.def(&CapturePointDB::challenger_guild_guid, "challenger_guild_guid")
		.def(&CapturePointDB::set_challenger_guild_guid, "set_challenger_guild_guid")
		// required int32 status_change_time = 7;
		.def(&CapturePointDB::status_change_time, "status_change_time")
		.def(&CapturePointDB::set_status_change_time, "set_status_change_time")
		// required fixed64 winner_guid = 8;
		.def(&CapturePointDB::winner_guid, "winner_guid")
		.def(&CapturePointDB::set_winner_guid, "set_winner_guid")
		// required fixed64 log_guid = 9;
		.def(&CapturePointDB::log_guid, "log_guid")
		.def(&CapturePointDB::set_log_guid, "set_log_guid")
		// repeated .Packet.HeroData capture_hero_datas = 10;
		.def(&CapturePointDB::capture_hero_datas_size, "capture_hero_datas_size")
		.def<decltype(message->capture_hero_datas(0)) (CapturePointDB::*)(int) const>(&CapturePointDB::capture_hero_datas, "capture_hero_datas")
		.def<decltype(message->mutable_capture_hero_datas(0)) (CapturePointDB::*)(int)>(&CapturePointDB::mutable_capture_hero_datas, "mutable_capture_hero_datas")
		.def(&CapturePointDB::add_capture_hero_datas, "add_capture_hero_datas")
		// repeated .Packet.HeroData challenger_hero_datas = 11;
		.def(&CapturePointDB::challenger_hero_datas_size, "challenger_hero_datas_size")
		.def<decltype(message->challenger_hero_datas(0)) (CapturePointDB::*)(int) const>(&CapturePointDB::challenger_hero_datas, "challenger_hero_datas")
		.def<decltype(message->mutable_challenger_hero_datas(0)) (CapturePointDB::*)(int)>(&CapturePointDB::mutable_challenger_hero_datas, "mutable_challenger_hero_datas")
		.def(&CapturePointDB::add_challenger_hero_datas, "add_challenger_hero_datas")
		// repeated .Packet.StrongHoldStatus strong_hold_status = 12;
		.def(&CapturePointDB::strong_hold_status_size, "strong_hold_status_size")
		.def<decltype(message->strong_hold_status(0)) (CapturePointDB::*)(int) const>(&CapturePointDB::strong_hold_status, "strong_hold_status")
		.def(&CapturePointDB::set_strong_hold_status, "set_strong_hold_status")
		.def(&CapturePointDB::add_strong_hold_status, "add_strong_hold_status")
		.def(&CapturePointDB::ByteSize, "ByteSize")
		.def(&CapturePointDB::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildCapturePointDB_fflua_reg(lua_State* state)
{
//for decltype
	GuildCapturePointDB* message(nullptr);
	message;
	ff::fflua_register_t<GuildCapturePointDB, ctor()>(state, "GuildCapturePointDB", "google::protobuf::Message")
		// required fixed64 guid = 1;
		.def(&GuildCapturePointDB::guid, "guid")
		.def(&GuildCapturePointDB::set_guid, "set_guid")
		// repeated .Packet.StrongHoldData strong_holds = 2;
		.def(&GuildCapturePointDB::strong_holds_size, "strong_holds_size")
		.def<decltype(message->strong_holds(0)) (GuildCapturePointDB::*)(int) const>(&GuildCapturePointDB::strong_holds, "strong_holds")
		.def<decltype(message->mutable_strong_holds(0)) (GuildCapturePointDB::*)(int)>(&GuildCapturePointDB::mutable_strong_holds, "mutable_strong_holds")
		.def(&GuildCapturePointDB::add_strong_holds, "add_strong_holds")
		.def(&GuildCapturePointDB::ByteSize, "ByteSize")
		.def(&GuildCapturePointDB::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildCaptureBattleDetail_fflua_reg(lua_State* state)
{
//for decltype
	GuildCaptureBattleDetail* message(nullptr);
	message;
	ff::fflua_register_t<GuildCaptureBattleDetail, ctor()>(state, "GuildCaptureBattleDetail", "google::protobuf::Message")
		// repeated .Packet.HeroData attacker_heros = 1;
		.def(&GuildCaptureBattleDetail::attacker_heros_size, "attacker_heros_size")
		.def<decltype(message->attacker_heros(0)) (GuildCaptureBattleDetail::*)(int) const>(&GuildCaptureBattleDetail::attacker_heros, "attacker_heros")
		.def<decltype(message->mutable_attacker_heros(0)) (GuildCaptureBattleDetail::*)(int)>(&GuildCaptureBattleDetail::mutable_attacker_heros, "mutable_attacker_heros")
		.def(&GuildCaptureBattleDetail::add_attacker_heros, "add_attacker_heros")
		// repeated .Packet.HeroData defender_heros = 2;
		.def(&GuildCaptureBattleDetail::defender_heros_size, "defender_heros_size")
		.def<decltype(message->defender_heros(0)) (GuildCaptureBattleDetail::*)(int) const>(&GuildCaptureBattleDetail::defender_heros, "defender_heros")
		.def<decltype(message->mutable_defender_heros(0)) (GuildCaptureBattleDetail::*)(int)>(&GuildCaptureBattleDetail::mutable_defender_heros, "mutable_defender_heros")
		.def(&GuildCaptureBattleDetail::add_defender_heros, "add_defender_heros")
		// required bool attacker_win = 3;
		.def(&GuildCaptureBattleDetail::attacker_win, "attacker_win")
		.def(&GuildCaptureBattleDetail::set_attacker_win, "set_attacker_win")
		// required fixed64 reply_guid = 4;
		.def(&GuildCaptureBattleDetail::reply_guid, "reply_guid")
		.def(&GuildCaptureBattleDetail::set_reply_guid, "set_reply_guid")
		.def(&GuildCaptureBattleDetail::ByteSize, "ByteSize")
		.def(&GuildCaptureBattleDetail::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildCaptureBattleLogDB_fflua_reg(lua_State* state)
{
//for decltype
	GuildCaptureBattleLogDB* message(nullptr);
	message;
	ff::fflua_register_t<GuildCaptureBattleLogDB, ctor()>(state, "GuildCaptureBattleLogDB", "google::protobuf::Message")
		// required fixed64 guid = 1;
		.def(&GuildCaptureBattleLogDB::guid, "guid")
		.def(&GuildCaptureBattleLogDB::set_guid, "set_guid")
		// required fixed64 attacker_guid = 2;
		.def(&GuildCaptureBattleLogDB::attacker_guid, "attacker_guid")
		.def(&GuildCaptureBattleLogDB::set_attacker_guid, "set_attacker_guid")
		// required fixed64 defender_guid = 3;
		.def(&GuildCaptureBattleLogDB::defender_guid, "defender_guid")
		.def(&GuildCaptureBattleLogDB::set_defender_guid, "set_defender_guid")
		// required int32 chapter_id = 4;
		.def(&GuildCaptureBattleLogDB::chapter_id, "chapter_id")
		.def(&GuildCaptureBattleLogDB::set_chapter_id, "set_chapter_id")
		// required int32 battle_time = 5;
		.def(&GuildCaptureBattleLogDB::battle_time, "battle_time")
		.def(&GuildCaptureBattleLogDB::set_battle_time, "set_battle_time")
		// required bool attacker_win = 6;
		.def(&GuildCaptureBattleLogDB::attacker_win, "attacker_win")
		.def(&GuildCaptureBattleLogDB::set_attacker_win, "set_attacker_win")
		// required bool finish = 7;
		.def(&GuildCaptureBattleLogDB::finish, "finish")
		.def(&GuildCaptureBattleLogDB::set_finish, "set_finish")
		// repeated .Packet.GuildCaptureBattleDetail details = 8;
		.def(&GuildCaptureBattleLogDB::details_size, "details_size")
		.def<decltype(message->details(0)) (GuildCaptureBattleLogDB::*)(int) const>(&GuildCaptureBattleLogDB::details, "details")
		.def<decltype(message->mutable_details(0)) (GuildCaptureBattleLogDB::*)(int)>(&GuildCaptureBattleLogDB::mutable_details, "mutable_details")
		.def(&GuildCaptureBattleLogDB::add_details, "add_details")
		.def(&GuildCaptureBattleLogDB::ByteSize, "ByteSize")
		.def(&GuildCaptureBattleLogDB::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildCaptureBattleLog_fflua_reg(lua_State* state)
{
//for decltype
	GuildCaptureBattleLog* message(nullptr);
	message;
	ff::fflua_register_t<GuildCaptureBattleLog, ctor()>(state, "GuildCaptureBattleLog", "google::protobuf::Message")
		// required fixed64 attacker_guid = 1;
		.def(&GuildCaptureBattleLog::attacker_guid, "attacker_guid")
		.def(&GuildCaptureBattleLog::set_attacker_guid, "set_attacker_guid")
		// required string attacker_name = 2;
		.def(&GuildCaptureBattleLog::attacker_name, "attacker_name")
		.def<void (GuildCaptureBattleLog::*)(const std::string&)>(&GuildCaptureBattleLog::set_attacker_name, "set_attacker_name")
		// required string attacker_icon = 3;
		.def(&GuildCaptureBattleLog::attacker_icon, "attacker_icon")
		.def<void (GuildCaptureBattleLog::*)(const std::string&)>(&GuildCaptureBattleLog::set_attacker_icon, "set_attacker_icon")
		// required fixed64 defender_guid = 4;
		.def(&GuildCaptureBattleLog::defender_guid, "defender_guid")
		.def(&GuildCaptureBattleLog::set_defender_guid, "set_defender_guid")
		// required string defender_name = 5;
		.def(&GuildCaptureBattleLog::defender_name, "defender_name")
		.def<void (GuildCaptureBattleLog::*)(const std::string&)>(&GuildCaptureBattleLog::set_defender_name, "set_defender_name")
		// required string defender_icon = 6;
		.def(&GuildCaptureBattleLog::defender_icon, "defender_icon")
		.def<void (GuildCaptureBattleLog::*)(const std::string&)>(&GuildCaptureBattleLog::set_defender_icon, "set_defender_icon")
		// required bool attacker_win = 7;
		.def(&GuildCaptureBattleLog::attacker_win, "attacker_win")
		.def(&GuildCaptureBattleLog::set_attacker_win, "set_attacker_win")
		// required int32 battle_time = 8;
		.def(&GuildCaptureBattleLog::battle_time, "battle_time")
		.def(&GuildCaptureBattleLog::set_battle_time, "set_battle_time")
		// repeated .Packet.GuildCaptureBattleDetail details = 9;
		.def(&GuildCaptureBattleLog::details_size, "details_size")
		.def<decltype(message->details(0)) (GuildCaptureBattleLog::*)(int) const>(&GuildCaptureBattleLog::details, "details")
		.def<decltype(message->mutable_details(0)) (GuildCaptureBattleLog::*)(int)>(&GuildCaptureBattleLog::mutable_details, "mutable_details")
		.def(&GuildCaptureBattleLog::add_details, "add_details")
		// required int32 chapter_id = 10;
		.def(&GuildCaptureBattleLog::chapter_id, "chapter_id")
		.def(&GuildCaptureBattleLog::set_chapter_id, "set_chapter_id")
		.def(&GuildCaptureBattleLog::ByteSize, "ByteSize")
		.def(&GuildCaptureBattleLog::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GC_GuildCaptureAllBattleLog_fflua_reg(lua_State* state)
{
//for decltype
	GC_GuildCaptureAllBattleLog* message(nullptr);
	message;
	ff::fflua_register_t<GC_GuildCaptureAllBattleLog, ctor()>(state, "GC_GuildCaptureAllBattleLog", "google::protobuf::Message")
		// repeated .Packet.GuildCaptureBattleLog logs = 1;
		.def(&GC_GuildCaptureAllBattleLog::logs_size, "logs_size")
		.def<decltype(message->logs(0)) (GC_GuildCaptureAllBattleLog::*)(int) const>(&GC_GuildCaptureAllBattleLog::logs, "logs")
		.def<decltype(message->mutable_logs(0)) (GC_GuildCaptureAllBattleLog::*)(int)>(&GC_GuildCaptureAllBattleLog::mutable_logs, "mutable_logs")
		.def(&GC_GuildCaptureAllBattleLog::add_logs, "add_logs")
		.def(&GC_GuildCaptureAllBattleLog::ByteSize, "ByteSize")
		.def(&GC_GuildCaptureAllBattleLog::SetInitialized, "SetInitialized")
		;
	return true;
}
bool CapturePotinBrief_fflua_reg(lua_State* state)
{
//for decltype
	CapturePotinBrief* message(nullptr);
	message;
	ff::fflua_register_t<CapturePotinBrief, ctor()>(state, "CapturePotinBrief", "google::protobuf::Message")
		// required int32 chapter_id = 1;
		.def(&CapturePotinBrief::chapter_id, "chapter_id")
		.def(&CapturePotinBrief::set_chapter_id, "set_chapter_id")
		// required .Packet.CaptureStatus status = 2;
		.def(&CapturePotinBrief::status, "status")
		.def(&CapturePotinBrief::set_status, "set_status")
		// required string capture_guild_name = 3;
		.def(&CapturePotinBrief::capture_guild_name, "capture_guild_name")
		.def<void (CapturePotinBrief::*)(const std::string&)>(&CapturePotinBrief::set_capture_guild_name, "set_capture_guild_name")
		// required string capture_guild_icon = 4;
		.def(&CapturePotinBrief::capture_guild_icon, "capture_guild_icon")
		.def<void (CapturePotinBrief::*)(const std::string&)>(&CapturePotinBrief::set_capture_guild_icon, "set_capture_guild_icon")
		// required fixed64 capture_guild_guid = 5;
		.def(&CapturePotinBrief::capture_guild_guid, "capture_guild_guid")
		.def(&CapturePotinBrief::set_capture_guild_guid, "set_capture_guild_guid")
		// required int32 hook_users = 6;
		.def(&CapturePotinBrief::hook_users, "hook_users")
		.def(&CapturePotinBrief::set_hook_users, "set_hook_users")
		// required int32 tax = 7;
		.def(&CapturePotinBrief::tax, "tax")
		.def(&CapturePotinBrief::set_tax, "set_tax")
		// required int32 tax_rate = 8;
		.def(&CapturePotinBrief::tax_rate, "tax_rate")
		.def(&CapturePotinBrief::set_tax_rate, "set_tax_rate")
		// required int32 status_change_time = 9;
		.def(&CapturePotinBrief::status_change_time, "status_change_time")
		.def(&CapturePotinBrief::set_status_change_time, "set_status_change_time")
		// repeated .Packet.HeroData capture_hero_datas = 10;
		.def(&CapturePotinBrief::capture_hero_datas_size, "capture_hero_datas_size")
		.def<decltype(message->capture_hero_datas(0)) (CapturePotinBrief::*)(int) const>(&CapturePotinBrief::capture_hero_datas, "capture_hero_datas")
		.def<decltype(message->mutable_capture_hero_datas(0)) (CapturePotinBrief::*)(int)>(&CapturePotinBrief::mutable_capture_hero_datas, "mutable_capture_hero_datas")
		.def(&CapturePotinBrief::add_capture_hero_datas, "add_capture_hero_datas")
		// repeated .Packet.HeroData challenger_hero_datas = 11;
		.def(&CapturePotinBrief::challenger_hero_datas_size, "challenger_hero_datas_size")
		.def<decltype(message->challenger_hero_datas(0)) (CapturePotinBrief::*)(int) const>(&CapturePotinBrief::challenger_hero_datas, "challenger_hero_datas")
		.def<decltype(message->mutable_challenger_hero_datas(0)) (CapturePotinBrief::*)(int)>(&CapturePotinBrief::mutable_challenger_hero_datas, "mutable_challenger_hero_datas")
		.def(&CapturePotinBrief::add_challenger_hero_datas, "add_challenger_hero_datas")
		// repeated .Packet.StrongHoldStatus strong_hold_status = 12;
		.def(&CapturePotinBrief::strong_hold_status_size, "strong_hold_status_size")
		.def<decltype(message->strong_hold_status(0)) (CapturePotinBrief::*)(int) const>(&CapturePotinBrief::strong_hold_status, "strong_hold_status")
		.def(&CapturePotinBrief::set_strong_hold_status, "set_strong_hold_status")
		.def(&CapturePotinBrief::add_strong_hold_status, "add_strong_hold_status")
		// optional string challenger_name = 13;
		.def(&CapturePotinBrief::challenger_name, "challenger_name")
		.def<void (CapturePotinBrief::*)(const std::string&)>(&CapturePotinBrief::set_challenger_name, "set_challenger_name")
		.def(&CapturePotinBrief::has_challenger_name, "has_challenger_name")
		// optional string challenger_icon = 14;
		.def(&CapturePotinBrief::challenger_icon, "challenger_icon")
		.def<void (CapturePotinBrief::*)(const std::string&)>(&CapturePotinBrief::set_challenger_icon, "set_challenger_icon")
		.def(&CapturePotinBrief::has_challenger_icon, "has_challenger_icon")
		.def(&CapturePotinBrief::ByteSize, "ByteSize")
		.def(&CapturePotinBrief::SetInitialized, "SetInitialized")
		;
	return true;
}
bool CG_AllBattleLog_fflua_reg(lua_State* state)
{
//for decltype
	CG_AllBattleLog* message(nullptr);
	message;
	ff::fflua_register_t<CG_AllBattleLog, ctor()>(state, "CG_AllBattleLog", "google::protobuf::Message");
	return true;
}
bool CG_CetCapturePointInfo_fflua_reg(lua_State* state)
{
//for decltype
	CG_CetCapturePointInfo* message(nullptr);
	message;
	ff::fflua_register_t<CG_CetCapturePointInfo, ctor()>(state, "CG_CetCapturePointInfo", "google::protobuf::Message")
		// required int32 chapter_id = 1;
		.def(&CG_CetCapturePointInfo::chapter_id, "chapter_id")
		.def(&CG_CetCapturePointInfo::set_chapter_id, "set_chapter_id")
		.def(&CG_CetCapturePointInfo::ByteSize, "ByteSize")
		.def(&CG_CetCapturePointInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool CG_PullAllCapturePoint_fflua_reg(lua_State* state)
{
//for decltype
	CG_PullAllCapturePoint* message(nullptr);
	message;
	ff::fflua_register_t<CG_PullAllCapturePoint, ctor()>(state, "CG_PullAllCapturePoint", "google::protobuf::Message");
	return true;
}
bool CG_ReleaseCapturePoint_fflua_reg(lua_State* state)
{
//for decltype
	CG_ReleaseCapturePoint* message(nullptr);
	message;
	ff::fflua_register_t<CG_ReleaseCapturePoint, ctor()>(state, "CG_ReleaseCapturePoint", "google::protobuf::Message");
	return true;
}
bool GC_AllGuildCapturePoint_fflua_reg(lua_State* state)
{
//for decltype
	GC_AllGuildCapturePoint* message(nullptr);
	message;
	ff::fflua_register_t<GC_AllGuildCapturePoint, ctor()>(state, "GC_AllGuildCapturePoint", "google::protobuf::Message")
		// repeated .Packet.CapturePotinBrief all_points = 1;
		.def(&GC_AllGuildCapturePoint::all_points_size, "all_points_size")
		.def<decltype(message->all_points(0)) (GC_AllGuildCapturePoint::*)(int) const>(&GC_AllGuildCapturePoint::all_points, "all_points")
		.def<decltype(message->mutable_all_points(0)) (GC_AllGuildCapturePoint::*)(int)>(&GC_AllGuildCapturePoint::mutable_all_points, "mutable_all_points")
		.def(&GC_AllGuildCapturePoint::add_all_points, "add_all_points")
		.def(&GC_AllGuildCapturePoint::ByteSize, "ByteSize")
		.def(&GC_AllGuildCapturePoint::SetInitialized, "SetInitialized")
		;
	return true;
}
bool CG_PullCapturePoint_fflua_reg(lua_State* state)
{
//for decltype
	CG_PullCapturePoint* message(nullptr);
	message;
	ff::fflua_register_t<CG_PullCapturePoint, ctor()>(state, "CG_PullCapturePoint", "google::protobuf::Message");
	return true;
}
bool CG_UpdateTaxRate_fflua_reg(lua_State* state)
{
//for decltype
	CG_UpdateTaxRate* message(nullptr);
	message;
	ff::fflua_register_t<CG_UpdateTaxRate, ctor()>(state, "CG_UpdateTaxRate", "google::protobuf::Message")
		// required int32 rate = 1;
		.def(&CG_UpdateTaxRate::rate, "rate")
		.def(&CG_UpdateTaxRate::set_rate, "set_rate")
		.def(&CG_UpdateTaxRate::ByteSize, "ByteSize")
		.def(&CG_UpdateTaxRate::SetInitialized, "SetInitialized")
		;
	return true;
}
bool CG_CollectGuildTax_fflua_reg(lua_State* state)
{
//for decltype
	CG_CollectGuildTax* message(nullptr);
	message;
	ff::fflua_register_t<CG_CollectGuildTax, ctor()>(state, "CG_CollectGuildTax", "google::protobuf::Message");
	return true;
}
bool GC_GuildCapturePoint_fflua_reg(lua_State* state)
{
//for decltype
	GC_GuildCapturePoint* message(nullptr);
	message;
	ff::fflua_register_t<GC_GuildCapturePoint, ctor()>(state, "GC_GuildCapturePoint", "google::protobuf::Message")
		// required int32 chapter_id = 1;
		.def(&GC_GuildCapturePoint::chapter_id, "chapter_id")
		.def(&GC_GuildCapturePoint::set_chapter_id, "set_chapter_id")
		// repeated .Packet.StrongHoldData strong_holds = 2;
		.def(&GC_GuildCapturePoint::strong_holds_size, "strong_holds_size")
		.def<decltype(message->strong_holds(0)) (GC_GuildCapturePoint::*)(int) const>(&GC_GuildCapturePoint::strong_holds, "strong_holds")
		.def<decltype(message->mutable_strong_holds(0)) (GC_GuildCapturePoint::*)(int)>(&GC_GuildCapturePoint::mutable_strong_holds, "mutable_strong_holds")
		.def(&GC_GuildCapturePoint::add_strong_holds, "add_strong_holds")
		// required int32 hook_users = 3;
		.def(&GC_GuildCapturePoint::hook_users, "hook_users")
		.def(&GC_GuildCapturePoint::set_hook_users, "set_hook_users")
		// required int32 tax = 4;
		.def(&GC_GuildCapturePoint::tax, "tax")
		.def(&GC_GuildCapturePoint::set_tax, "set_tax")
		// required int32 tax_rate = 5;
		.def(&GC_GuildCapturePoint::tax_rate, "tax_rate")
		.def(&GC_GuildCapturePoint::set_tax_rate, "set_tax_rate")
		.def(&GC_GuildCapturePoint::ByteSize, "ByteSize")
		.def(&GC_GuildCapturePoint::SetInitialized, "SetInitialized")
		;
	return true;
}
bool CG_StartChallengeCapturePoint_fflua_reg(lua_State* state)
{
//for decltype
	CG_StartChallengeCapturePoint* message(nullptr);
	message;
	ff::fflua_register_t<CG_StartChallengeCapturePoint, ctor()>(state, "CG_StartChallengeCapturePoint", "google::protobuf::Message")
		// required int32 chapter_id = 1;
		.def(&CG_StartChallengeCapturePoint::chapter_id, "chapter_id")
		.def(&CG_StartChallengeCapturePoint::set_chapter_id, "set_chapter_id")
		// required int32 target_guild_guid = 2;
		.def(&CG_StartChallengeCapturePoint::target_guild_guid, "target_guild_guid")
		.def(&CG_StartChallengeCapturePoint::set_target_guild_guid, "set_target_guild_guid")
		.def(&CG_StartChallengeCapturePoint::ByteSize, "ByteSize")
		.def(&CG_StartChallengeCapturePoint::SetInitialized, "SetInitialized")
		;
	return true;
}
bool CG_UpdateStrongHold_fflua_reg(lua_State* state)
{
//for decltype
	CG_UpdateStrongHold* message(nullptr);
	message;
	ff::fflua_register_t<CG_UpdateStrongHold, ctor()>(state, "CG_UpdateStrongHold", "google::protobuf::Message")
		// repeated .Packet.StrongHoldData strong_holds = 1;
		.def(&CG_UpdateStrongHold::strong_holds_size, "strong_holds_size")
		.def<decltype(message->strong_holds(0)) (CG_UpdateStrongHold::*)(int) const>(&CG_UpdateStrongHold::strong_holds, "strong_holds")
		.def<decltype(message->mutable_strong_holds(0)) (CG_UpdateStrongHold::*)(int)>(&CG_UpdateStrongHold::mutable_strong_holds, "mutable_strong_holds")
		.def(&CG_UpdateStrongHold::add_strong_holds, "add_strong_holds")
		.def(&CG_UpdateStrongHold::ByteSize, "ByteSize")
		.def(&CG_UpdateStrongHold::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildCapturePoint_fflua_regist_all(lua_State* state)
{
	HeroData_fflua_reg(state);
	StrongHoldData_fflua_reg(state);
	CapturePointDB_fflua_reg(state);
	GuildCapturePointDB_fflua_reg(state);
	GuildCaptureBattleDetail_fflua_reg(state);
	GuildCaptureBattleLogDB_fflua_reg(state);
	GuildCaptureBattleLog_fflua_reg(state);
	GC_GuildCaptureAllBattleLog_fflua_reg(state);
	CapturePotinBrief_fflua_reg(state);
	CG_AllBattleLog_fflua_reg(state);
	CG_CetCapturePointInfo_fflua_reg(state);
	CG_PullAllCapturePoint_fflua_reg(state);
	CG_ReleaseCapturePoint_fflua_reg(state);
	GC_AllGuildCapturePoint_fflua_reg(state);
	CG_PullCapturePoint_fflua_reg(state);
	CG_UpdateTaxRate_fflua_reg(state);
	CG_CollectGuildTax_fflua_reg(state);
	GC_GuildCapturePoint_fflua_reg(state);
	CG_StartChallengeCapturePoint_fflua_reg(state);
	CG_UpdateStrongHold_fflua_reg(state);
	return true;
}
}
