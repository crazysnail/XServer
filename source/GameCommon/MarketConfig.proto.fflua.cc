// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MarketConfig.proto
#include "MarketConfig.pb.h"
#include "MarketConfig.proto.fflua.h"
namespace Config {
bool MarketConfig_fflua_reg(lua_State* state)
{
//for decltype
	MarketConfig* message(nullptr);
	message;
	ff::fflua_register_t<MarketConfig, ctor()>(state, "MarketConfig", "google::protobuf::Message")
		// required .Config.MarketType market_id = 1;
		.def(&MarketConfig::market_id, "market_id")
		.def(&MarketConfig::set_market_id, "set_market_id")
		// required int32 type = 2;
		.def(&MarketConfig::type, "type")
		.def(&MarketConfig::set_type, "set_type")
		// repeated int32 count_group = 3;
		.def(&MarketConfig::count_group_size, "count_group_size")
		.def<decltype(message->count_group(0)) (MarketConfig::*)(int) const>(&MarketConfig::count_group, "count_group")
		.def<void(MarketConfig::*)(int, const decltype(message->count_group(0)))>(&MarketConfig::set_count_group, "set_count_group")
		.def(&MarketConfig::add_count_group, "add_count_group")
		// required int32 refresh_token = 4;
		.def(&MarketConfig::refresh_token, "refresh_token")
		.def(&MarketConfig::set_refresh_token, "set_refresh_token")
		// required int32 token_count = 5;
		.def(&MarketConfig::token_count, "token_count")
		.def(&MarketConfig::set_token_count, "set_token_count")
		// required int32 refresh_count = 6;
		.def(&MarketConfig::refresh_count, "refresh_count")
		.def(&MarketConfig::set_refresh_count, "set_refresh_count")
		// required int32 refresh_cd = 7;
		.def(&MarketConfig::refresh_cd, "refresh_cd")
		.def(&MarketConfig::set_refresh_cd, "set_refresh_cd")
		// required int32 refresh_rate = 8;
		.def(&MarketConfig::refresh_rate, "refresh_rate")
		.def(&MarketConfig::set_refresh_rate, "set_refresh_rate")
		// required int32 gen_level = 9;
		.def(&MarketConfig::gen_level, "gen_level")
		.def(&MarketConfig::set_gen_level, "set_gen_level")
		// required int32 open = 10;
		.def(&MarketConfig::open, "open")
		.def(&MarketConfig::set_open, "set_open")
		.def(&MarketConfig::ByteSize, "ByteSize")
		.def(&MarketConfig::SetInitialized, "SetInitialized")
		;
	return true;
}
bool MarketItemConfig_fflua_reg(lua_State* state)
{
//for decltype
	MarketItemConfig* message(nullptr);
	message;
	ff::fflua_register_t<MarketItemConfig, ctor()>(state, "MarketItemConfig", "google::protobuf::Message")
		// required int32 id = 1;
		.def(&MarketItemConfig::id, "id")
		.def(&MarketItemConfig::set_id, "set_id")
		// required .Config.MarketType market_id = 2;
		.def(&MarketItemConfig::market_id, "market_id")
		.def(&MarketItemConfig::set_market_id, "set_market_id")
		// required .Config.MarketItemGroup count_group = 3;
		.def(&MarketItemConfig::count_group, "count_group")
		.def(&MarketItemConfig::set_count_group, "set_count_group")
		// required int32 open_level = 4;
		.def(&MarketItemConfig::open_level, "open_level")
		.def(&MarketItemConfig::set_open_level, "set_open_level")
		// required int32 off_level = 5;
		.def(&MarketItemConfig::off_level, "off_level")
		.def(&MarketItemConfig::set_off_level, "set_off_level")
		// required int32 gen_weight = 6;
		.def(&MarketItemConfig::gen_weight, "gen_weight")
		.def(&MarketItemConfig::set_gen_weight, "set_gen_weight")
		// required int32 item_id = 7;
		.def(&MarketItemConfig::item_id, "item_id")
		.def(&MarketItemConfig::set_item_id, "set_item_id")
		// required int32 item_count = 8;
		.def(&MarketItemConfig::item_count, "item_count")
		.def(&MarketItemConfig::set_item_count, "set_item_count")
		// required int32 price_type = 9;
		.def(&MarketItemConfig::price_type, "price_type")
		.def(&MarketItemConfig::set_price_type, "set_price_type")
		// required int32 price_value = 10;
		.def(&MarketItemConfig::price_value, "price_value")
		.def(&MarketItemConfig::set_price_value, "set_price_value")
		// required int32 day_limit_count = 11;
		.def(&MarketItemConfig::day_limit_count, "day_limit_count")
		.def(&MarketItemConfig::set_day_limit_count, "set_day_limit_count")
		// required int32 open = 12;
		.def(&MarketItemConfig::open, "open")
		.def(&MarketItemConfig::set_open, "set_open")
		.def(&MarketItemConfig::ByteSize, "ByteSize")
		.def(&MarketItemConfig::SetInitialized, "SetInitialized")
		;
	return true;
}
bool ChargeItemConfig_fflua_reg(lua_State* state)
{
//for decltype
	ChargeItemConfig* message(nullptr);
	message;
	ff::fflua_register_t<ChargeItemConfig, ctor()>(state, "ChargeItemConfig", "google::protobuf::Message")
		// required int32 id = 1;
		.def(&ChargeItemConfig::id, "id")
		.def(&ChargeItemConfig::set_id, "set_id")
		// required string group_type = 2;
		.def(&ChargeItemConfig::group_type, "group_type")
		.def<void (ChargeItemConfig::*)(const std::string&)>(&ChargeItemConfig::set_group_type, "set_group_type")
		// required string price_type = 3;
		.def(&ChargeItemConfig::price_type, "price_type")
		.def<void (ChargeItemConfig::*)(const std::string&)>(&ChargeItemConfig::set_price_type, "set_price_type")
		// required int32 effect_value = 4;
		.def(&ChargeItemConfig::effect_value, "effect_value")
		.def(&ChargeItemConfig::set_effect_value, "set_effect_value")
		// required int32 effect_count = 5;
		.def(&ChargeItemConfig::effect_count, "effect_count")
		.def(&ChargeItemConfig::set_effect_count, "set_effect_count")
		// required int32 extra_value = 6;
		.def(&ChargeItemConfig::extra_value, "extra_value")
		.def(&ChargeItemConfig::set_extra_value, "set_extra_value")
		// required float rmb_price = 13;
		.def(&ChargeItemConfig::rmb_price, "rmb_price")
		.def(&ChargeItemConfig::set_rmb_price, "set_rmb_price")
		.def(&ChargeItemConfig::ByteSize, "ByteSize")
		.def(&ChargeItemConfig::SetInitialized, "SetInitialized")
		;
	return true;
}
bool ChargeList_fflua_reg(lua_State* state)
{
//for decltype
	ChargeList* message(nullptr);
	message;
	ff::fflua_register_t<ChargeList, ctor()>(state, "ChargeList", "google::protobuf::Message")
		// required string channel_id = 1;
		.def(&ChargeList::channel_id, "channel_id")
		.def<void (ChargeList::*)(const std::string&)>(&ChargeList::set_channel_id, "set_channel_id")
		// required int32 product_index = 2;
		.def(&ChargeList::product_index, "product_index")
		.def(&ChargeList::set_product_index, "set_product_index")
		// required string product_id = 3;
		.def(&ChargeList::product_id, "product_id")
		.def<void (ChargeList::*)(const std::string&)>(&ChargeList::set_product_id, "set_product_id")
		.def(&ChargeList::ByteSize, "ByteSize")
		.def(&ChargeList::SetInitialized, "SetInitialized")
		;
	return true;
}
bool MarketConfig_fflua_regist_all(lua_State* state)
{
	MarketConfig_fflua_reg(state);
	MarketItemConfig_fflua_reg(state);
	ChargeItemConfig_fflua_reg(state);
	ChargeList_fflua_reg(state);
	return true;
}
}
