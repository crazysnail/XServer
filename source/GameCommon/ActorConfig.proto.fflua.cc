// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActorConfig.proto
#include "ActorConfig.pb.h"
#include "ActorConfig.proto.fflua.h"
namespace Config {
bool LevelConfig_fflua_reg(lua_State* state)
{
//for decltype
	LevelConfig* message(nullptr);
	message;
	ff::fflua_register_t<LevelConfig, ctor()>(state, "LevelConfig", "google::protobuf::Message")
		// required int32 level = 1;
		.def(&LevelConfig::level, "level")
		.def(&LevelConfig::set_level, "set_level")
		// required int32 main_actor_exp = 2;
		.def(&LevelConfig::main_actor_exp, "main_actor_exp")
		.def(&LevelConfig::set_main_actor_exp, "set_main_actor_exp")
		// required int32 hero_actor_exp = 3;
		.def(&LevelConfig::hero_actor_exp, "hero_actor_exp")
		.def(&LevelConfig::set_hero_actor_exp, "set_hero_actor_exp")
		// required int32 burning_exp = 4;
		.def(&LevelConfig::burning_exp, "burning_exp")
		.def(&LevelConfig::set_burning_exp, "set_burning_exp")
		// required int32 burning_gold = 5;
		.def(&LevelConfig::burning_gold, "burning_gold")
		.def(&LevelConfig::set_burning_gold, "set_burning_gold")
		// required int32 skyfall_exp = 6;
		.def(&LevelConfig::skyfall_exp, "skyfall_exp")
		.def(&LevelConfig::set_skyfall_exp, "set_skyfall_exp")
		// required int32 skyfall_gold = 7;
		.def(&LevelConfig::skyfall_gold, "skyfall_gold")
		.def(&LevelConfig::set_skyfall_gold, "set_skyfall_gold")
		// required int32 light_exp = 8;
		.def(&LevelConfig::light_exp, "light_exp")
		.def(&LevelConfig::set_light_exp, "set_light_exp")
		// required int32 light_gold = 9;
		.def(&LevelConfig::light_gold, "light_gold")
		.def(&LevelConfig::set_light_gold, "set_light_gold")
		// required int32 three_5_exp = 10;
		.def(&LevelConfig::three_5_exp, "three_5_exp")
		.def(&LevelConfig::set_three_5_exp, "set_three_5_exp")
		// required int32 three_6_exp = 11;
		.def(&LevelConfig::three_6_exp, "three_6_exp")
		.def(&LevelConfig::set_three_6_exp, "set_three_6_exp")
		// required int32 three_7_exp = 12;
		.def(&LevelConfig::three_7_exp, "three_7_exp")
		.def(&LevelConfig::set_three_7_exp, "set_three_7_exp")
		// required int32 three_8_exp = 13;
		.def(&LevelConfig::three_8_exp, "three_8_exp")
		.def(&LevelConfig::set_three_8_exp, "set_three_8_exp")
		// required int32 three_9_exp = 14;
		.def(&LevelConfig::three_9_exp, "three_9_exp")
		.def(&LevelConfig::set_three_9_exp, "set_three_9_exp")
		// required int32 three_5_gold = 15;
		.def(&LevelConfig::three_5_gold, "three_5_gold")
		.def(&LevelConfig::set_three_5_gold, "set_three_5_gold")
		// required int32 three_6_gold = 16;
		.def(&LevelConfig::three_6_gold, "three_6_gold")
		.def(&LevelConfig::set_three_6_gold, "set_three_6_gold")
		// required int32 three_7_gold = 17;
		.def(&LevelConfig::three_7_gold, "three_7_gold")
		.def(&LevelConfig::set_three_7_gold, "set_three_7_gold")
		// required int32 three_8_gold = 18;
		.def(&LevelConfig::three_8_gold, "three_8_gold")
		.def(&LevelConfig::set_three_8_gold, "set_three_8_gold")
		// required int32 three_9_gold = 19;
		.def(&LevelConfig::three_9_gold, "three_9_gold")
		.def(&LevelConfig::set_three_9_gold, "set_three_9_gold")
		// required int32 goblin_exp = 20;
		.def(&LevelConfig::goblin_exp, "goblin_exp")
		.def(&LevelConfig::set_goblin_exp, "set_goblin_exp")
		// required int32 goblin_gold = 21;
		.def(&LevelConfig::goblin_gold, "goblin_gold")
		.def(&LevelConfig::set_goblin_gold, "set_goblin_gold")
		// required int32 server_level_day = 22;
		.def(&LevelConfig::server_level_day, "server_level_day")
		.def(&LevelConfig::set_server_level_day, "set_server_level_day")
		// required int32 treasure_exp = 23;
		.def(&LevelConfig::treasure_exp, "treasure_exp")
		.def(&LevelConfig::set_treasure_exp, "set_treasure_exp")
		// required int32 treasure_gold = 24;
		.def(&LevelConfig::treasure_gold, "treasure_gold")
		.def(&LevelConfig::set_treasure_gold, "set_treasure_gold")
		// repeated int32 trial_field_hp = 25;
		.def(&LevelConfig::trial_field_hp_size, "trial_field_hp_size")
		.def<decltype(message->trial_field_hp(0)) (LevelConfig::*)(int) const>(&LevelConfig::trial_field_hp, "trial_field_hp")
		.def<void(LevelConfig::*)(int, const decltype(message->trial_field_hp(0)))>(&LevelConfig::set_trial_field_hp, "set_trial_field_hp")
		.def(&LevelConfig::add_trial_field_hp, "add_trial_field_hp")
		// required int32 reward_exp = 26;
		.def(&LevelConfig::reward_exp, "reward_exp")
		.def(&LevelConfig::set_reward_exp, "set_reward_exp")
		// required int32 reward_gold = 27;
		.def(&LevelConfig::reward_gold, "reward_gold")
		.def(&LevelConfig::set_reward_gold, "set_reward_gold")
		// required int32 hell_box_gold = 28;
		.def(&LevelConfig::hell_box_gold, "hell_box_gold")
		.def(&LevelConfig::set_hell_box_gold, "set_hell_box_gold")
		// required int32 daykill_exp = 29;
		.def(&LevelConfig::daykill_exp, "daykill_exp")
		.def(&LevelConfig::set_daykill_exp, "set_daykill_exp")
		// required int32 blood_exp = 30;
		.def(&LevelConfig::blood_exp, "blood_exp")
		.def(&LevelConfig::set_blood_exp, "set_blood_exp")
		// required int32 blood_gold = 31;
		.def(&LevelConfig::blood_gold, "blood_gold")
		.def(&LevelConfig::set_blood_gold, "set_blood_gold")
		// repeated int32 blood_potion1 = 32;
		.def(&LevelConfig::blood_potion1_size, "blood_potion1_size")
		.def<decltype(message->blood_potion1(0)) (LevelConfig::*)(int) const>(&LevelConfig::blood_potion1, "blood_potion1")
		.def<void(LevelConfig::*)(int, const decltype(message->blood_potion1(0)))>(&LevelConfig::set_blood_potion1, "set_blood_potion1")
		.def(&LevelConfig::add_blood_potion1, "add_blood_potion1")
		// required int32 blood_potion2 = 33;
		.def(&LevelConfig::blood_potion2, "blood_potion2")
		.def(&LevelConfig::set_blood_potion2, "set_blood_potion2")
		// required int32 blood_potion3 = 34;
		.def(&LevelConfig::blood_potion3, "blood_potion3")
		.def(&LevelConfig::set_blood_potion3, "set_blood_potion3")
		// required int32 black_exp = 35;
		.def(&LevelConfig::black_exp, "black_exp")
		.def(&LevelConfig::set_black_exp, "set_black_exp")
		// required int32 black_gold = 36;
		.def(&LevelConfig::black_gold, "black_gold")
		.def(&LevelConfig::set_black_gold, "set_black_gold")
		// required int32 text_answer_exp = 37;
		.def(&LevelConfig::text_answer_exp, "text_answer_exp")
		.def(&LevelConfig::set_text_answer_exp, "set_text_answer_exp")
		// required int32 text_answer_gold = 38;
		.def(&LevelConfig::text_answer_gold, "text_answer_gold")
		.def(&LevelConfig::set_text_answer_gold, "set_text_answer_gold")
		// required int32 pic_answer_exp = 39;
		.def(&LevelConfig::pic_answer_exp, "pic_answer_exp")
		.def(&LevelConfig::set_pic_answer_exp, "set_pic_answer_exp")
		// required int32 pic_answer_gold = 40;
		.def(&LevelConfig::pic_answer_gold, "pic_answer_gold")
		.def(&LevelConfig::set_pic_answer_gold, "set_pic_answer_gold")
		// required int32 arena_exp = 41;
		.def(&LevelConfig::arena_exp, "arena_exp")
		.def(&LevelConfig::set_arena_exp, "set_arena_exp")
		// required int32 arena_gold = 42;
		.def(&LevelConfig::arena_gold, "arena_gold")
		.def(&LevelConfig::set_arena_gold, "set_arena_gold")
		// required int32 arena_win_honor = 43;
		.def(&LevelConfig::arena_win_honor, "arena_win_honor")
		.def(&LevelConfig::set_arena_win_honor, "set_arena_win_honor")
		// required int32 arena_lose_honor = 44;
		.def(&LevelConfig::arena_lose_honor, "arena_lose_honor")
		.def(&LevelConfig::set_arena_lose_honor, "set_arena_lose_honor")
		// required int32 guild_exp = 45;
		.def(&LevelConfig::guild_exp, "guild_exp")
		.def(&LevelConfig::set_guild_exp, "set_guild_exp")
		// required int32 guild_gold = 46;
		.def(&LevelConfig::guild_gold, "guild_gold")
		.def(&LevelConfig::set_guild_gold, "set_guild_gold")
		// required int32 guildbattle_min_exp = 47;
		.def(&LevelConfig::guildbattle_min_exp, "guildbattle_min_exp")
		.def(&LevelConfig::set_guildbattle_min_exp, "set_guildbattle_min_exp")
		// required int32 guildbattle_battle_exp = 48;
		.def(&LevelConfig::guildbattle_battle_exp, "guildbattle_battle_exp")
		.def(&LevelConfig::set_guildbattle_battle_exp, "set_guildbattle_battle_exp")
		// required int32 guildbattle_win_exp = 49;
		.def(&LevelConfig::guildbattle_win_exp, "guildbattle_win_exp")
		.def(&LevelConfig::set_guildbattle_win_exp, "set_guildbattle_win_exp")
		// required int32 guildbattle_lost_exp = 50;
		.def(&LevelConfig::guildbattle_lost_exp, "guildbattle_lost_exp")
		.def(&LevelConfig::set_guildbattle_lost_exp, "set_guildbattle_lost_exp")
		// required int32 guildbattle_battle_gold = 51;
		.def(&LevelConfig::guildbattle_battle_gold, "guildbattle_battle_gold")
		.def(&LevelConfig::set_guildbattle_battle_gold, "set_guildbattle_battle_gold")
		// required int32 miss_gold = 52;
		.def(&LevelConfig::miss_gold, "miss_gold")
		.def(&LevelConfig::set_miss_gold, "set_miss_gold")
		// required int32 miss_crystal = 53;
		.def(&LevelConfig::miss_crystal, "miss_crystal")
		.def(&LevelConfig::set_miss_crystal, "set_miss_crystal")
		.def(&LevelConfig::ByteSize, "ByteSize")
		.def(&LevelConfig::SetInitialized, "SetInitialized")
		;
	return true;
}
bool LackeysConfig_fflua_reg(lua_State* state)
{
//for decltype
	LackeysConfig* message(nullptr);
	message;
	ff::fflua_register_t<LackeysConfig, ctor()>(state, "LackeysConfig", "google::protobuf::Message")
		// required int32 index = 1;
		.def(&LackeysConfig::index, "index")
		.def(&LackeysConfig::set_index, "set_index")
		// required string attribute1 = 2;
		.def(&LackeysConfig::attribute1, "attribute1")
		.def<void (LackeysConfig::*)(const std::string&)>(&LackeysConfig::set_attribute1, "set_attribute1")
		// required string attribute2 = 3;
		.def(&LackeysConfig::attribute2, "attribute2")
		.def<void (LackeysConfig::*)(const std::string&)>(&LackeysConfig::set_attribute2, "set_attribute2")
		// required int32 value = 4;
		.def(&LackeysConfig::value, "value")
		.def(&LackeysConfig::set_value, "set_value")
		.def(&LackeysConfig::ByteSize, "ByteSize")
		.def(&LackeysConfig::SetInitialized, "SetInitialized")
		;
	return true;
}
bool OneKeyEquip_fflua_reg(lua_State* state)
{
//for decltype
	OneKeyEquip* message(nullptr);
	message;
	ff::fflua_register_t<OneKeyEquip, ctor()>(state, "OneKeyEquip", "google::protobuf::Message")
		// required int32 id = 1;
		.def(&OneKeyEquip::id, "id")
		.def(&OneKeyEquip::set_id, "set_id")
		// required int32 gem0 = 2;
		.def(&OneKeyEquip::gem0, "gem0")
		.def(&OneKeyEquip::set_gem0, "set_gem0")
		// required int32 gem1 = 3;
		.def(&OneKeyEquip::gem1, "gem1")
		.def(&OneKeyEquip::set_gem1, "set_gem1")
		// required int32 gem2 = 4;
		.def(&OneKeyEquip::gem2, "gem2")
		.def(&OneKeyEquip::set_gem2, "set_gem2")
		.def(&OneKeyEquip::ByteSize, "ByteSize")
		.def(&OneKeyEquip::SetInitialized, "SetInitialized")
		;
	return true;
}
bool OneKeyConfig_fflua_reg(lua_State* state)
{
//for decltype
	OneKeyConfig* message(nullptr);
	message;
	ff::fflua_register_t<OneKeyConfig, ctor()>(state, "OneKeyConfig", "google::protobuf::Message")
		// required int32 id = 1;
		.def(&OneKeyConfig::id, "id")
		.def(&OneKeyConfig::set_id, "set_id")
		// required int32 hero_id = 2;
		.def(&OneKeyConfig::hero_id, "hero_id")
		.def(&OneKeyConfig::set_hero_id, "set_hero_id")
		// required string display_name = 3;
		.def(&OneKeyConfig::display_name, "display_name")
		.def<void (OneKeyConfig::*)(const std::string&)>(&OneKeyConfig::set_display_name, "set_display_name")
		// required string icon = 4;
		.def(&OneKeyConfig::icon, "icon")
		.def<void (OneKeyConfig::*)(const std::string&)>(&OneKeyConfig::set_icon, "set_icon")
		// required int32 hair = 5;
		.def(&OneKeyConfig::hair, "hair")
		.def(&OneKeyConfig::set_hair, "set_hair")
		// required int32 level = 6;
		.def(&OneKeyConfig::level, "level")
		.def(&OneKeyConfig::set_level, "set_level")
		// required int32 equip_level = 7;
		.def(&OneKeyConfig::equip_level, "equip_level")
		.def(&OneKeyConfig::set_equip_level, "set_equip_level")
		// required int32 star = 8;
		.def(&OneKeyConfig::star, "star")
		.def(&OneKeyConfig::set_star, "set_star")
		// required int32 color = 9;
		.def(&OneKeyConfig::color, "color")
		.def(&OneKeyConfig::set_color, "set_color")
		// required int32 skill_level = 10;
		.def(&OneKeyConfig::skill_level, "skill_level")
		.def(&OneKeyConfig::set_skill_level, "set_skill_level")
		// repeated .Config.OneKeyEquip equips = 11;
		.def(&OneKeyConfig::equips_size, "equips_size")
		.def<decltype(message->equips(0)) (OneKeyConfig::*)(int) const>(&OneKeyConfig::equips, "equips")
		.def<decltype(message->mutable_equips(0)) (OneKeyConfig::*)(int)>(&OneKeyConfig::mutable_equips, "mutable_equips")
		.def(&OneKeyConfig::add_equips, "add_equips")
		.def(&OneKeyConfig::ByteSize, "ByteSize")
		.def(&OneKeyConfig::SetInitialized, "SetInitialized")
		;
	return true;
}
bool ActorConfig_fflua_regist_all(lua_State* state)
{
	LevelConfig_fflua_reg(state);
	LackeysConfig_fflua_reg(state);
	OneKeyEquip_fflua_reg(state);
	OneKeyConfig_fflua_reg(state);
	return true;
}
}
