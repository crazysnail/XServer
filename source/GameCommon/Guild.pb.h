// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Guild.proto

#ifndef PROTOBUF_Guild_2eproto__INCLUDED
#define PROTOBUF_Guild_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "AllPacketEnum.pb.h"
#include "PlayerBasicInfo.pb.h"
#include "ItemAndEquip.pb.h"
#include "ProtoBufOption.pb.h"
// @@protoc_insertion_point(includes)

namespace Packet {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Guild_2eproto();
void protobuf_AssignDesc_Guild_2eproto();
void protobuf_ShutdownFile_Guild_2eproto();

class PlayerGuildUserData;
class GuildUser;
class GuildImpeach;
class GuildDBInfo;
class SetGuildIconRR;
class PracticeInfo;
class PlayerPracticeReq;
class GetPracticeReq;
class GetPracticeReply;
class GetGuildInfoReq;
class GetGuildInfoReply;
class GetGuildUserListInfoReq;
class GetGuildUserListInfoReply;
class CreateGuildReq;
class FindGuildReq;
class ApplyGuildReq;
class OneKeyApplyGuildReq;
class InviteyAddGuildReq;
class AskInviteyAgreeGuildReply;
class InviteyAgreeGuildReq;
class AgreeApplyGuildReq;
class UpdatePlayerGuildInfo;
class GuildBaseInfo;
class GetGuildListReq;
class GuildBaseListReply;
class ApplyGuildPlayerInfo;
class ApplyGuildPlayerListReq;
class ApplyGuildPlayerListReply;
class ClearApplyGuildPlayerListReq;
class SetGuildNameRR;
class SetGuildNoticeRR;
class GuildDonationReq;
class DonationFlagUpdate;
class GuildMoneyUpdate;
class GuildImpeachReply;
class SetGuildUserPositionRR;
class GetGuildBonusReq;
class GuildCDKInfo;
class CreateGuildCDK;
class CreateGuildCDKReq;
class GetGuildCDKReq;
class GetGuildCDKListReq;
class GetGuildCDKListReply;
class BuildLevelUpReq;
class BuildLevelUpReply;
class GuildBossCompetitionDbInfo;
class GetGuildBossCompetitionReq;
class GetGuildBossCompetitionReply;
class GuildUserDamage;
class GuildAllDamage;
class GuildBossUserDamage;
class GetGuildUserDamageReq;
class GetGuildUserDamageReply;
class GetServerUserDamageReq;
class GetGuildAllDamageReply;
class GetGuildBossUserDamageReply;
class UpdateGuildBossUserDamage;
class GuildWetCopyInfo;
class GetGuildWetCopyInfosReq;
class GetGuildWetCopyInfosReply;
class GuildWetCopyInfoUpdate;
class OpenGuildWetCopy;
class ResetGuildWetCopy;
class GuildBattleInfo;
class GuildBattleInfoList;
class SelfGuildBattleInfo;
class GuildBattleListReq;
class GuildBattleWeekRankInfo;
class GuildBattleWeekRankReq;
class GuildBattleWeekRankReply;
class GuildBattleAllRankInfo;
class GuildBattleAllRankReq;
class GuildBattleAllRankReply;
class GuildBattleResultReply;
class GuildBattlePlayerInfo;
class GuildBattlePlayerListInfo;
class UpdateGuildBattlePlayerInfo;
class UpdateGuildBattleStage;
class GuildBattleFightTarget;
class GuildWarehouse;
class GuildWarehouseReq;
class GuildWarehouseReply;
class GuildWarehouseReceiveReq;
class GuildWarehouseSetReceivePlayerReq;
class GuildWarehouseUpdate;
class GuildWarehouseRecord;
class GuildWarehouseRecordReq;
class GuildWarehouseRecordReply;
class GuildSpoilItem;
class GuildRecord;
class GuildRecordReply;
class GuildUserName;
class GuildSpoilItemClient;
class GuildSpoilItemReply;
class UpdateGuildSpoilItemClient;

// ===================================================================

class PlayerGuildUserData : public ::google::protobuf::Message {
 public:
  PlayerGuildUserData();
  virtual ~PlayerGuildUserData();

  PlayerGuildUserData(const PlayerGuildUserData& from);

  inline PlayerGuildUserData& operator=(const PlayerGuildUserData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerGuildUserData& default_instance();

  void Swap(PlayerGuildUserData* other);

  // implements Message ----------------------------------------------

  PlayerGuildUserData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerGuildUserData& from);
  void MergeFrom(const PlayerGuildUserData& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Packet.GuildPosition position = 1;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 1;
  inline ::Packet::GuildPosition position() const;
  inline void set_position(::Packet::GuildPosition value);

  // required int32 bdonation = 2;
  inline bool has_bdonation() const;
  inline void clear_bdonation();
  static const int kBdonationFieldNumber = 2;
  inline ::google::protobuf::int32 bdonation() const;
  inline void set_bdonation(::google::protobuf::int32 value);

  // required int32 bbonus = 3;
  inline bool has_bbonus() const;
  inline void clear_bbonus();
  static const int kBbonusFieldNumber = 3;
  inline ::google::protobuf::int32 bbonus() const;
  inline void set_bbonus(::google::protobuf::int32 value);

  // required int32 curcontribution = 4;
  inline bool has_curcontribution() const;
  inline void clear_curcontribution();
  static const int kCurcontributionFieldNumber = 4;
  inline ::google::protobuf::int32 curcontribution() const;
  inline void set_curcontribution(::google::protobuf::int32 value);

  // required int32 weekcontribution = 5;
  inline bool has_weekcontribution() const;
  inline void clear_weekcontribution();
  static const int kWeekcontributionFieldNumber = 5;
  inline ::google::protobuf::int32 weekcontribution() const;
  inline void set_weekcontribution(::google::protobuf::int32 value);

  // required int32 allcontribution = 6;
  inline bool has_allcontribution() const;
  inline void clear_allcontribution();
  static const int kAllcontributionFieldNumber = 6;
  inline ::google::protobuf::int32 allcontribution() const;
  inline void set_allcontribution(::google::protobuf::int32 value);

  // required uint32 jointime = 7;
  inline bool has_jointime() const;
  inline void clear_jointime();
  static const int kJointimeFieldNumber = 7;
  inline ::google::protobuf::uint32 jointime() const;
  inline void set_jointime(::google::protobuf::uint32 value);

  // required int32 guildlevel = 8;
  inline bool has_guildlevel() const;
  inline void clear_guildlevel();
  static const int kGuildlevelFieldNumber = 8;
  inline ::google::protobuf::int32 guildlevel() const;
  inline void set_guildlevel(::google::protobuf::int32 value);

  // required int32 cashboxlevel = 9;
  inline bool has_cashboxlevel() const;
  inline void clear_cashboxlevel();
  static const int kCashboxlevelFieldNumber = 9;
  inline ::google::protobuf::int32 cashboxlevel() const;
  inline void set_cashboxlevel(::google::protobuf::int32 value);

  // required int32 shoplevel = 10;
  inline bool has_shoplevel() const;
  inline void clear_shoplevel();
  static const int kShoplevelFieldNumber = 10;
  inline ::google::protobuf::int32 shoplevel() const;
  inline void set_shoplevel(::google::protobuf::int32 value);

  // required int32 storagelevel = 11;
  inline bool has_storagelevel() const;
  inline void clear_storagelevel();
  static const int kStoragelevelFieldNumber = 11;
  inline ::google::protobuf::int32 storagelevel() const;
  inline void set_storagelevel(::google::protobuf::int32 value);

  // optional string guildname = 12;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildnameFieldNumber = 12;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // @@protoc_insertion_point(class_scope:Packet.PlayerGuildUserData)
 private:
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_bdonation();
  inline void clear_has_bdonation();
  inline void set_has_bbonus();
  inline void clear_has_bbonus();
  inline void set_has_curcontribution();
  inline void clear_has_curcontribution();
  inline void set_has_weekcontribution();
  inline void clear_has_weekcontribution();
  inline void set_has_allcontribution();
  inline void clear_has_allcontribution();
  inline void set_has_jointime();
  inline void clear_has_jointime();
  inline void set_has_guildlevel();
  inline void clear_has_guildlevel();
  inline void set_has_cashboxlevel();
  inline void clear_has_cashboxlevel();
  inline void set_has_shoplevel();
  inline void clear_has_shoplevel();
  inline void set_has_storagelevel();
  inline void clear_has_storagelevel();
  inline void set_has_guildname();
  inline void clear_has_guildname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int position_;
  ::google::protobuf::int32 bdonation_;
  ::google::protobuf::int32 bbonus_;
  ::google::protobuf::int32 curcontribution_;
  ::google::protobuf::int32 weekcontribution_;
  ::google::protobuf::int32 allcontribution_;
  ::google::protobuf::uint32 jointime_;
  ::google::protobuf::int32 guildlevel_;
  ::google::protobuf::int32 cashboxlevel_;
  ::google::protobuf::int32 shoplevel_;
  ::std::string* guildname_;
  ::google::protobuf::int32 storagelevel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static PlayerGuildUserData* default_instance_;
};
// -------------------------------------------------------------------

class GuildUser : public ::google::protobuf::Message {
 public:
  GuildUser();
  virtual ~GuildUser();

  GuildUser(const GuildUser& from);

  inline GuildUser& operator=(const GuildUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildUser& default_instance();

  void Swap(GuildUser* other);

  // implements Message ----------------------------------------------

  GuildUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildUser& from);
  void MergeFrom(const GuildUser& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 playerguid = 1;
  inline bool has_playerguid() const;
  inline void clear_playerguid();
  static const int kPlayerguidFieldNumber = 1;
  inline ::google::protobuf::uint64 playerguid() const;
  inline void set_playerguid(::google::protobuf::uint64 value);

  // required fixed64 guildid = 2;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildidFieldNumber = 2;
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // required string playername = 3;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayernameFieldNumber = 3;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // required int32 playerlevel = 4;
  inline bool has_playerlevel() const;
  inline void clear_playerlevel();
  static const int kPlayerlevelFieldNumber = 4;
  inline ::google::protobuf::int32 playerlevel() const;
  inline void set_playerlevel(::google::protobuf::int32 value);

  // required .Packet.GuildPosition position = 5;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 5;
  inline ::Packet::GuildPosition position() const;
  inline void set_position(::Packet::GuildPosition value);

  // required int32 online = 6;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 6;
  inline ::google::protobuf::int32 online() const;
  inline void set_online(::google::protobuf::int32 value);

  // required int32 bdonation = 7;
  inline bool has_bdonation() const;
  inline void clear_bdonation();
  static const int kBdonationFieldNumber = 7;
  inline ::google::protobuf::int32 bdonation() const;
  inline void set_bdonation(::google::protobuf::int32 value);

  // required int32 bbonus = 8;
  inline bool has_bbonus() const;
  inline void clear_bbonus();
  static const int kBbonusFieldNumber = 8;
  inline ::google::protobuf::int32 bbonus() const;
  inline void set_bbonus(::google::protobuf::int32 value);

  // required int32 curcontribution = 9;
  inline bool has_curcontribution() const;
  inline void clear_curcontribution();
  static const int kCurcontributionFieldNumber = 9;
  inline ::google::protobuf::int32 curcontribution() const;
  inline void set_curcontribution(::google::protobuf::int32 value);

  // required int32 weekcontribution = 10;
  inline bool has_weekcontribution() const;
  inline void clear_weekcontribution();
  static const int kWeekcontributionFieldNumber = 10;
  inline ::google::protobuf::int32 weekcontribution() const;
  inline void set_weekcontribution(::google::protobuf::int32 value);

  // required int32 allcontribution = 11;
  inline bool has_allcontribution() const;
  inline void clear_allcontribution();
  static const int kAllcontributionFieldNumber = 11;
  inline ::google::protobuf::int32 allcontribution() const;
  inline void set_allcontribution(::google::protobuf::int32 value);

  // required int32 battletime = 12;
  inline bool has_battletime() const;
  inline void clear_battletime();
  static const int kBattletimeFieldNumber = 12;
  inline ::google::protobuf::int32 battletime() const;
  inline void set_battletime(::google::protobuf::int32 value);

  // required uint32 lastlogouttime = 13;
  inline bool has_lastlogouttime() const;
  inline void clear_lastlogouttime();
  static const int kLastlogouttimeFieldNumber = 13;
  inline ::google::protobuf::uint32 lastlogouttime() const;
  inline void set_lastlogouttime(::google::protobuf::uint32 value);

  // required uint32 jointime = 14;
  inline bool has_jointime() const;
  inline void clear_jointime();
  static const int kJointimeFieldNumber = 14;
  inline ::google::protobuf::uint32 jointime() const;
  inline void set_jointime(::google::protobuf::uint32 value);

  // required int32 bossdamage = 15;
  inline bool has_bossdamage() const;
  inline void clear_bossdamage();
  static const int kBossdamageFieldNumber = 15;
  inline ::google::protobuf::int32 bossdamage() const;
  inline void set_bossdamage(::google::protobuf::int32 value);

  // required int32 main_actor_config_id = 16;
  inline bool has_main_actor_config_id() const;
  inline void clear_main_actor_config_id();
  static const int kMainActorConfigIdFieldNumber = 16;
  inline ::google::protobuf::int32 main_actor_config_id() const;
  inline void set_main_actor_config_id(::google::protobuf::int32 value);

  // required int32 main_actor_score = 17;
  inline bool has_main_actor_score() const;
  inline void clear_main_actor_score();
  static const int kMainActorScoreFieldNumber = 17;
  inline ::google::protobuf::int32 main_actor_score() const;
  inline void set_main_actor_score(::google::protobuf::int32 value);

  // required .Packet.ActorColor main_actor_color = 18;
  inline bool has_main_actor_color() const;
  inline void clear_main_actor_color();
  static const int kMainActorColorFieldNumber = 18;
  inline ::Packet::ActorColor main_actor_color() const;
  inline void set_main_actor_color(::Packet::ActorColor value);

  // required .Packet.ActorStar main_actor_star = 19;
  inline bool has_main_actor_star() const;
  inline void clear_main_actor_star();
  static const int kMainActorStarFieldNumber = 19;
  inline ::Packet::ActorStar main_actor_star() const;
  inline void set_main_actor_star(::Packet::ActorStar value);

  // required int32 wetcopytimes = 20;
  inline bool has_wetcopytimes() const;
  inline void clear_wetcopytimes();
  static const int kWetcopytimesFieldNumber = 20;
  inline ::google::protobuf::int32 wetcopytimes() const;
  inline void set_wetcopytimes(::google::protobuf::int32 value);

  // required int32 spoiljumptimes = 21;
  inline bool has_spoiljumptimes() const;
  inline void clear_spoiljumptimes();
  static const int kSpoiljumptimesFieldNumber = 21;
  inline ::google::protobuf::int32 spoiljumptimes() const;
  inline void set_spoiljumptimes(::google::protobuf::int32 value);

  // required int32 hair = 26;
  inline bool has_hair() const;
  inline void clear_hair();
  static const int kHairFieldNumber = 26;
  inline ::google::protobuf::int32 hair() const;
  inline void set_hair(::google::protobuf::int32 value);

  // required fixed64 lastguildid = 27;
  inline bool has_lastguildid() const;
  inline void clear_lastguildid();
  static const int kLastguildidFieldNumber = 27;
  inline ::google::protobuf::uint64 lastguildid() const;
  inline void set_lastguildid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Packet.GuildUser)
 private:
  inline void set_has_playerguid();
  inline void clear_has_playerguid();
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_playerlevel();
  inline void clear_has_playerlevel();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_online();
  inline void clear_has_online();
  inline void set_has_bdonation();
  inline void clear_has_bdonation();
  inline void set_has_bbonus();
  inline void clear_has_bbonus();
  inline void set_has_curcontribution();
  inline void clear_has_curcontribution();
  inline void set_has_weekcontribution();
  inline void clear_has_weekcontribution();
  inline void set_has_allcontribution();
  inline void clear_has_allcontribution();
  inline void set_has_battletime();
  inline void clear_has_battletime();
  inline void set_has_lastlogouttime();
  inline void clear_has_lastlogouttime();
  inline void set_has_jointime();
  inline void clear_has_jointime();
  inline void set_has_bossdamage();
  inline void clear_has_bossdamage();
  inline void set_has_main_actor_config_id();
  inline void clear_has_main_actor_config_id();
  inline void set_has_main_actor_score();
  inline void clear_has_main_actor_score();
  inline void set_has_main_actor_color();
  inline void clear_has_main_actor_color();
  inline void set_has_main_actor_star();
  inline void clear_has_main_actor_star();
  inline void set_has_wetcopytimes();
  inline void clear_has_wetcopytimes();
  inline void set_has_spoiljumptimes();
  inline void clear_has_spoiljumptimes();
  inline void set_has_hair();
  inline void clear_has_hair();
  inline void set_has_lastguildid();
  inline void clear_has_lastguildid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 playerguid_;
  ::google::protobuf::uint64 guildid_;
  ::std::string* playername_;
  ::google::protobuf::int32 playerlevel_;
  int position_;
  ::google::protobuf::int32 online_;
  ::google::protobuf::int32 bdonation_;
  ::google::protobuf::int32 bbonus_;
  ::google::protobuf::int32 curcontribution_;
  ::google::protobuf::int32 weekcontribution_;
  ::google::protobuf::int32 allcontribution_;
  ::google::protobuf::int32 battletime_;
  ::google::protobuf::uint32 lastlogouttime_;
  ::google::protobuf::uint32 jointime_;
  ::google::protobuf::int32 bossdamage_;
  ::google::protobuf::int32 main_actor_config_id_;
  ::google::protobuf::int32 main_actor_score_;
  int main_actor_color_;
  int main_actor_star_;
  ::google::protobuf::int32 wetcopytimes_;
  ::google::protobuf::int32 spoiljumptimes_;
  ::google::protobuf::uint64 lastguildid_;
  ::google::protobuf::int32 hair_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildUser* default_instance_;
};
// -------------------------------------------------------------------

class GuildImpeach : public ::google::protobuf::Message {
 public:
  GuildImpeach();
  virtual ~GuildImpeach();

  GuildImpeach(const GuildImpeach& from);

  inline GuildImpeach& operator=(const GuildImpeach& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildImpeach& default_instance();

  void Swap(GuildImpeach* other);

  // implements Message ----------------------------------------------

  GuildImpeach* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildImpeach& from);
  void MergeFrom(const GuildImpeach& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 impeachguild = 1;
  inline bool has_impeachguild() const;
  inline void clear_impeachguild();
  static const int kImpeachguildFieldNumber = 1;
  inline ::google::protobuf::uint64 impeachguild() const;
  inline void set_impeachguild(::google::protobuf::uint64 value);

  // required string impeachname = 2;
  inline bool has_impeachname() const;
  inline void clear_impeachname();
  static const int kImpeachnameFieldNumber = 2;
  inline const ::std::string& impeachname() const;
  inline void set_impeachname(const ::std::string& value);
  inline void set_impeachname(const char* value);
  inline void set_impeachname(const char* value, size_t size);
  inline ::std::string* mutable_impeachname();
  inline ::std::string* release_impeachname();
  inline void set_allocated_impeachname(::std::string* impeachname);

  // required int32 needcount = 3;
  inline bool has_needcount() const;
  inline void clear_needcount();
  static const int kNeedcountFieldNumber = 3;
  inline ::google::protobuf::int32 needcount() const;
  inline void set_needcount(::google::protobuf::int32 value);

  // required int32 endtime = 4;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndtimeFieldNumber = 4;
  inline ::google::protobuf::int32 endtime() const;
  inline void set_endtime(::google::protobuf::int32 value);

  // repeated fixed64 respondguild = 5;
  inline int respondguild_size() const;
  inline void clear_respondguild();
  static const int kRespondguildFieldNumber = 5;
  inline ::google::protobuf::uint64 respondguild(int index) const;
  inline void set_respondguild(int index, ::google::protobuf::uint64 value);
  inline void add_respondguild(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      respondguild() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_respondguild();

  // @@protoc_insertion_point(class_scope:Packet.GuildImpeach)
 private:
  inline void set_has_impeachguild();
  inline void clear_has_impeachguild();
  inline void set_has_impeachname();
  inline void clear_has_impeachname();
  inline void set_has_needcount();
  inline void clear_has_needcount();
  inline void set_has_endtime();
  inline void clear_has_endtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 impeachguild_;
  ::std::string* impeachname_;
  ::google::protobuf::int32 needcount_;
  ::google::protobuf::int32 endtime_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > respondguild_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildImpeach* default_instance_;
};
// -------------------------------------------------------------------

class GuildDBInfo : public ::google::protobuf::Message {
 public:
  GuildDBInfo();
  virtual ~GuildDBInfo();

  GuildDBInfo(const GuildDBInfo& from);

  inline GuildDBInfo& operator=(const GuildDBInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildDBInfo& default_instance();

  void Swap(GuildDBInfo* other);

  // implements Message ----------------------------------------------

  GuildDBInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildDBInfo& from);
  void MergeFrom(const GuildDBInfo& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string lastname = 3;
  inline bool has_lastname() const;
  inline void clear_lastname();
  static const int kLastnameFieldNumber = 3;
  inline const ::std::string& lastname() const;
  inline void set_lastname(const ::std::string& value);
  inline void set_lastname(const char* value);
  inline void set_lastname(const char* value, size_t size);
  inline ::std::string* mutable_lastname();
  inline ::std::string* release_lastname();
  inline void set_allocated_lastname(::std::string* lastname);

  // required string notice = 4;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 4;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const char* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // required string icon = 5;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 5;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // required fixed64 chieftain = 6;
  inline bool has_chieftain() const;
  inline void clear_chieftain();
  static const int kChieftainFieldNumber = 6;
  inline ::google::protobuf::uint64 chieftain() const;
  inline void set_chieftain(::google::protobuf::uint64 value);

  // required string chieftainname = 7;
  inline bool has_chieftainname() const;
  inline void clear_chieftainname();
  static const int kChieftainnameFieldNumber = 7;
  inline const ::std::string& chieftainname() const;
  inline void set_chieftainname(const ::std::string& value);
  inline void set_chieftainname(const char* value);
  inline void set_chieftainname(const char* value, size_t size);
  inline ::std::string* mutable_chieftainname();
  inline ::std::string* release_chieftainname();
  inline void set_allocated_chieftainname(::std::string* chieftainname);

  // required int32 guildlevel = 8;
  inline bool has_guildlevel() const;
  inline void clear_guildlevel();
  static const int kGuildlevelFieldNumber = 8;
  inline ::google::protobuf::int32 guildlevel() const;
  inline void set_guildlevel(::google::protobuf::int32 value);

  // required int32 cashboxlevel = 9;
  inline bool has_cashboxlevel() const;
  inline void clear_cashboxlevel();
  static const int kCashboxlevelFieldNumber = 9;
  inline ::google::protobuf::int32 cashboxlevel() const;
  inline void set_cashboxlevel(::google::protobuf::int32 value);

  // required int32 shoplevel = 10;
  inline bool has_shoplevel() const;
  inline void clear_shoplevel();
  static const int kShoplevelFieldNumber = 10;
  inline ::google::protobuf::int32 shoplevel() const;
  inline void set_shoplevel(::google::protobuf::int32 value);

  // required int32 storagelevel = 11;
  inline bool has_storagelevel() const;
  inline void clear_storagelevel();
  static const int kStoragelevelFieldNumber = 11;
  inline ::google::protobuf::int32 storagelevel() const;
  inline void set_storagelevel(::google::protobuf::int32 value);

  // required uint32 guildcd = 12;
  inline bool has_guildcd() const;
  inline void clear_guildcd();
  static const int kGuildcdFieldNumber = 12;
  inline ::google::protobuf::uint32 guildcd() const;
  inline void set_guildcd(::google::protobuf::uint32 value);

  // required uint32 cashboxcd = 13;
  inline bool has_cashboxcd() const;
  inline void clear_cashboxcd();
  static const int kCashboxcdFieldNumber = 13;
  inline ::google::protobuf::uint32 cashboxcd() const;
  inline void set_cashboxcd(::google::protobuf::uint32 value);

  // required uint32 shopcd = 14;
  inline bool has_shopcd() const;
  inline void clear_shopcd();
  static const int kShopcdFieldNumber = 14;
  inline ::google::protobuf::uint32 shopcd() const;
  inline void set_shopcd(::google::protobuf::uint32 value);

  // required uint32 storagecd = 15;
  inline bool has_storagecd() const;
  inline void clear_storagecd();
  static const int kStoragecdFieldNumber = 15;
  inline ::google::protobuf::uint32 storagecd() const;
  inline void set_storagecd(::google::protobuf::uint32 value);

  // required int32 guildmoney = 16;
  inline bool has_guildmoney() const;
  inline void clear_guildmoney();
  static const int kGuildmoneyFieldNumber = 16;
  inline ::google::protobuf::int32 guildmoney() const;
  inline void set_guildmoney(::google::protobuf::int32 value);

  // required int32 limitapplylevel = 17;
  inline bool has_limitapplylevel() const;
  inline void clear_limitapplylevel();
  static const int kLimitapplylevelFieldNumber = 17;
  inline ::google::protobuf::int32 limitapplylevel() const;
  inline void set_limitapplylevel(::google::protobuf::int32 value);

  // required int32 maxwetcopyid = 18;
  inline bool has_maxwetcopyid() const;
  inline void clear_maxwetcopyid();
  static const int kMaxwetcopyidFieldNumber = 18;
  inline ::google::protobuf::int32 maxwetcopyid() const;
  inline void set_maxwetcopyid(::google::protobuf::int32 value);

  // required int32 weekbonus = 19;
  inline bool has_weekbonus() const;
  inline void clear_weekbonus();
  static const int kWeekbonusFieldNumber = 19;
  inline ::google::protobuf::int32 weekbonus() const;
  inline void set_weekbonus(::google::protobuf::int32 value);

  // required fixed32 lowmaintainday = 20;
  inline bool has_lowmaintainday() const;
  inline void clear_lowmaintainday();
  static const int kLowmaintaindayFieldNumber = 20;
  inline ::google::protobuf::uint32 lowmaintainday() const;
  inline void set_lowmaintainday(::google::protobuf::uint32 value);

  // required int32 battlewintimes = 21;
  inline bool has_battlewintimes() const;
  inline void clear_battlewintimes();
  static const int kBattlewintimesFieldNumber = 21;
  inline ::google::protobuf::int32 battlewintimes() const;
  inline void set_battlewintimes(::google::protobuf::int32 value);

  // required int32 battletimes = 22;
  inline bool has_battletimes() const;
  inline void clear_battletimes();
  static const int kBattletimesFieldNumber = 22;
  inline ::google::protobuf::int32 battletimes() const;
  inline void set_battletimes(::google::protobuf::int32 value);

  // required int32 battlelefttimes = 23;
  inline bool has_battlelefttimes() const;
  inline void clear_battlelefttimes();
  static const int kBattlelefttimesFieldNumber = 23;
  inline ::google::protobuf::int32 battlelefttimes() const;
  inline void set_battlelefttimes(::google::protobuf::int32 value);

  // required int32 battleroundwintimes = 24;
  inline bool has_battleroundwintimes() const;
  inline void clear_battleroundwintimes();
  static const int kBattleroundwintimesFieldNumber = 24;
  inline ::google::protobuf::int32 battleroundwintimes() const;
  inline void set_battleroundwintimes(::google::protobuf::int32 value);

  // required int32 battleroundtimes = 25;
  inline bool has_battleroundtimes() const;
  inline void clear_battleroundtimes();
  static const int kBattleroundtimesFieldNumber = 25;
  inline ::google::protobuf::int32 battleroundtimes() const;
  inline void set_battleroundtimes(::google::protobuf::int32 value);

  // required int32 battlescore = 26;
  inline bool has_battlescore() const;
  inline void clear_battlescore();
  static const int kBattlescoreFieldNumber = 26;
  inline ::google::protobuf::int32 battlescore() const;
  inline void set_battlescore(::google::protobuf::int32 value);

  // required fixed32 createtime = 27;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreatetimeFieldNumber = 27;
  inline ::google::protobuf::uint32 createtime() const;
  inline void set_createtime(::google::protobuf::uint32 value);

  // required fixed64 createguid = 28;
  inline bool has_createguid() const;
  inline void clear_createguid();
  static const int kCreateguidFieldNumber = 28;
  inline ::google::protobuf::uint64 createguid() const;
  inline void set_createguid(::google::protobuf::uint64 value);

  // required string createname = 29;
  inline bool has_createname() const;
  inline void clear_createname();
  static const int kCreatenameFieldNumber = 29;
  inline const ::std::string& createname() const;
  inline void set_createname(const ::std::string& value);
  inline void set_createname(const char* value);
  inline void set_createname(const char* value, size_t size);
  inline ::std::string* mutable_createname();
  inline ::std::string* release_createname();
  inline void set_allocated_createname(::std::string* createname);

  // @@protoc_insertion_point(class_scope:Packet.GuildDBInfo)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_lastname();
  inline void clear_has_lastname();
  inline void set_has_notice();
  inline void clear_has_notice();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_chieftain();
  inline void clear_has_chieftain();
  inline void set_has_chieftainname();
  inline void clear_has_chieftainname();
  inline void set_has_guildlevel();
  inline void clear_has_guildlevel();
  inline void set_has_cashboxlevel();
  inline void clear_has_cashboxlevel();
  inline void set_has_shoplevel();
  inline void clear_has_shoplevel();
  inline void set_has_storagelevel();
  inline void clear_has_storagelevel();
  inline void set_has_guildcd();
  inline void clear_has_guildcd();
  inline void set_has_cashboxcd();
  inline void clear_has_cashboxcd();
  inline void set_has_shopcd();
  inline void clear_has_shopcd();
  inline void set_has_storagecd();
  inline void clear_has_storagecd();
  inline void set_has_guildmoney();
  inline void clear_has_guildmoney();
  inline void set_has_limitapplylevel();
  inline void clear_has_limitapplylevel();
  inline void set_has_maxwetcopyid();
  inline void clear_has_maxwetcopyid();
  inline void set_has_weekbonus();
  inline void clear_has_weekbonus();
  inline void set_has_lowmaintainday();
  inline void clear_has_lowmaintainday();
  inline void set_has_battlewintimes();
  inline void clear_has_battlewintimes();
  inline void set_has_battletimes();
  inline void clear_has_battletimes();
  inline void set_has_battlelefttimes();
  inline void clear_has_battlelefttimes();
  inline void set_has_battleroundwintimes();
  inline void clear_has_battleroundwintimes();
  inline void set_has_battleroundtimes();
  inline void clear_has_battleroundtimes();
  inline void set_has_battlescore();
  inline void clear_has_battlescore();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_createguid();
  inline void clear_has_createguid();
  inline void set_has_createname();
  inline void clear_has_createname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::std::string* name_;
  ::std::string* lastname_;
  ::std::string* notice_;
  ::std::string* icon_;
  ::google::protobuf::uint64 chieftain_;
  ::std::string* chieftainname_;
  ::google::protobuf::int32 guildlevel_;
  ::google::protobuf::int32 cashboxlevel_;
  ::google::protobuf::int32 shoplevel_;
  ::google::protobuf::int32 storagelevel_;
  ::google::protobuf::uint32 guildcd_;
  ::google::protobuf::uint32 cashboxcd_;
  ::google::protobuf::uint32 shopcd_;
  ::google::protobuf::uint32 storagecd_;
  ::google::protobuf::int32 guildmoney_;
  ::google::protobuf::int32 limitapplylevel_;
  ::google::protobuf::int32 maxwetcopyid_;
  ::google::protobuf::int32 weekbonus_;
  ::google::protobuf::uint32 lowmaintainday_;
  ::google::protobuf::int32 battlewintimes_;
  ::google::protobuf::int32 battletimes_;
  ::google::protobuf::int32 battlelefttimes_;
  ::google::protobuf::int32 battleroundwintimes_;
  ::google::protobuf::int32 battleroundtimes_;
  ::google::protobuf::int32 battlescore_;
  ::google::protobuf::uint32 createtime_;
  ::google::protobuf::uint64 createguid_;
  ::std::string* createname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(29 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildDBInfo* default_instance_;
};
// -------------------------------------------------------------------

class SetGuildIconRR : public ::google::protobuf::Message {
 public:
  SetGuildIconRR();
  virtual ~SetGuildIconRR();

  SetGuildIconRR(const SetGuildIconRR& from);

  inline SetGuildIconRR& operator=(const SetGuildIconRR& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetGuildIconRR& default_instance();

  void Swap(SetGuildIconRR* other);

  // implements Message ----------------------------------------------

  SetGuildIconRR* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetGuildIconRR& from);
  void MergeFrom(const SetGuildIconRR& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string icon = 1;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 1;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // @@protoc_insertion_point(class_scope:Packet.SetGuildIconRR)
 private:
  inline void set_has_icon();
  inline void clear_has_icon();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* icon_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static SetGuildIconRR* default_instance_;
};
// -------------------------------------------------------------------

class PracticeInfo : public ::google::protobuf::Message {
 public:
  PracticeInfo();
  virtual ~PracticeInfo();

  PracticeInfo(const PracticeInfo& from);

  inline PracticeInfo& operator=(const PracticeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PracticeInfo& default_instance();

  void Swap(PracticeInfo* other);

  // implements Message ----------------------------------------------

  PracticeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PracticeInfo& from);
  void MergeFrom(const PracticeInfo& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 playerguid = 1;
  inline bool has_playerguid() const;
  inline void clear_playerguid();
  static const int kPlayerguidFieldNumber = 1;
  inline ::google::protobuf::uint64 playerguid() const;
  inline void set_playerguid(::google::protobuf::uint64 value);

  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required int32 exp = 4;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 4;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.PracticeInfo)
 private:
  inline void set_has_playerguid();
  inline void clear_has_playerguid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 playerguid_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 exp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static PracticeInfo* default_instance_;
};
// -------------------------------------------------------------------

class PlayerPracticeReq : public ::google::protobuf::Message {
 public:
  PlayerPracticeReq();
  virtual ~PlayerPracticeReq();

  PlayerPracticeReq(const PlayerPracticeReq& from);

  inline PlayerPracticeReq& operator=(const PlayerPracticeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerPracticeReq& default_instance();

  void Swap(PlayerPracticeReq* other);

  // implements Message ----------------------------------------------

  PlayerPracticeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerPracticeReq& from);
  void MergeFrom(const PlayerPracticeReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.PlayerPracticeReq)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static PlayerPracticeReq* default_instance_;
};
// -------------------------------------------------------------------

class GetPracticeReq : public ::google::protobuf::Message {
 public:
  GetPracticeReq();
  virtual ~GetPracticeReq();

  GetPracticeReq(const GetPracticeReq& from);

  inline GetPracticeReq& operator=(const GetPracticeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPracticeReq& default_instance();

  void Swap(GetPracticeReq* other);

  // implements Message ----------------------------------------------

  GetPracticeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetPracticeReq& from);
  void MergeFrom(const GetPracticeReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Packet.GetPracticeReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GetPracticeReq* default_instance_;
};
// -------------------------------------------------------------------

class GetPracticeReply : public ::google::protobuf::Message {
 public:
  GetPracticeReply();
  virtual ~GetPracticeReply();

  GetPracticeReply(const GetPracticeReply& from);

  inline GetPracticeReply& operator=(const GetPracticeReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPracticeReply& default_instance();

  void Swap(GetPracticeReply* other);

  // implements Message ----------------------------------------------

  GetPracticeReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetPracticeReply& from);
  void MergeFrom(const GetPracticeReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Packet.PracticeInfo list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::Packet::PracticeInfo& list(int index) const;
  inline ::Packet::PracticeInfo* mutable_list(int index);
  inline ::Packet::PracticeInfo* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::PracticeInfo >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::PracticeInfo >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:Packet.GetPracticeReply)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::PracticeInfo > list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GetPracticeReply* default_instance_;
};
// -------------------------------------------------------------------

class GetGuildInfoReq : public ::google::protobuf::Message {
 public:
  GetGuildInfoReq();
  virtual ~GetGuildInfoReq();

  GetGuildInfoReq(const GetGuildInfoReq& from);

  inline GetGuildInfoReq& operator=(const GetGuildInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetGuildInfoReq& default_instance();

  void Swap(GetGuildInfoReq* other);

  // implements Message ----------------------------------------------

  GetGuildInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetGuildInfoReq& from);
  void MergeFrom(const GetGuildInfoReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Packet.GetGuildInfoReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GetGuildInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class GetGuildInfoReply : public ::google::protobuf::Message {
 public:
  GetGuildInfoReply();
  virtual ~GetGuildInfoReply();

  GetGuildInfoReply(const GetGuildInfoReply& from);

  inline GetGuildInfoReply& operator=(const GetGuildInfoReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetGuildInfoReply& default_instance();

  void Swap(GetGuildInfoReply* other);

  // implements Message ----------------------------------------------

  GetGuildInfoReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetGuildInfoReply& from);
  void MergeFrom(const GetGuildInfoReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Packet.GuildDBInfo info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::Packet::GuildDBInfo& info() const;
  inline ::Packet::GuildDBInfo* mutable_info();
  inline ::Packet::GuildDBInfo* release_info();
  inline void set_allocated_info(::Packet::GuildDBInfo* info);

  // required int32 membersize = 2;
  inline bool has_membersize() const;
  inline void clear_membersize();
  static const int kMembersizeFieldNumber = 2;
  inline ::google::protobuf::int32 membersize() const;
  inline void set_membersize(::google::protobuf::int32 value);

  // required int32 maxmembersize = 3;
  inline bool has_maxmembersize() const;
  inline void clear_maxmembersize();
  static const int kMaxmembersizeFieldNumber = 3;
  inline ::google::protobuf::int32 maxmembersize() const;
  inline void set_maxmembersize(::google::protobuf::int32 value);

  // required .Packet.GuildUser selfinfo = 4;
  inline bool has_selfinfo() const;
  inline void clear_selfinfo();
  static const int kSelfinfoFieldNumber = 4;
  inline const ::Packet::GuildUser& selfinfo() const;
  inline ::Packet::GuildUser* mutable_selfinfo();
  inline ::Packet::GuildUser* release_selfinfo();
  inline void set_allocated_selfinfo(::Packet::GuildUser* selfinfo);

  // @@protoc_insertion_point(class_scope:Packet.GetGuildInfoReply)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_membersize();
  inline void clear_has_membersize();
  inline void set_has_maxmembersize();
  inline void clear_has_maxmembersize();
  inline void set_has_selfinfo();
  inline void clear_has_selfinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Packet::GuildDBInfo* info_;
  ::google::protobuf::int32 membersize_;
  ::google::protobuf::int32 maxmembersize_;
  ::Packet::GuildUser* selfinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GetGuildInfoReply* default_instance_;
};
// -------------------------------------------------------------------

class GetGuildUserListInfoReq : public ::google::protobuf::Message {
 public:
  GetGuildUserListInfoReq();
  virtual ~GetGuildUserListInfoReq();

  GetGuildUserListInfoReq(const GetGuildUserListInfoReq& from);

  inline GetGuildUserListInfoReq& operator=(const GetGuildUserListInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetGuildUserListInfoReq& default_instance();

  void Swap(GetGuildUserListInfoReq* other);

  // implements Message ----------------------------------------------

  GetGuildUserListInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetGuildUserListInfoReq& from);
  void MergeFrom(const GetGuildUserListInfoReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Packet.GetGuildUserListInfoReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GetGuildUserListInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class GetGuildUserListInfoReply : public ::google::protobuf::Message {
 public:
  GetGuildUserListInfoReply();
  virtual ~GetGuildUserListInfoReply();

  GetGuildUserListInfoReply(const GetGuildUserListInfoReply& from);

  inline GetGuildUserListInfoReply& operator=(const GetGuildUserListInfoReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetGuildUserListInfoReply& default_instance();

  void Swap(GetGuildUserListInfoReply* other);

  // implements Message ----------------------------------------------

  GetGuildUserListInfoReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetGuildUserListInfoReply& from);
  void MergeFrom(const GetGuildUserListInfoReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Packet.GuildUser userlist = 1;
  inline int userlist_size() const;
  inline void clear_userlist();
  static const int kUserlistFieldNumber = 1;
  inline const ::Packet::GuildUser& userlist(int index) const;
  inline ::Packet::GuildUser* mutable_userlist(int index);
  inline ::Packet::GuildUser* add_userlist();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::GuildUser >&
      userlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::GuildUser >*
      mutable_userlist();

  // @@protoc_insertion_point(class_scope:Packet.GetGuildUserListInfoReply)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::GuildUser > userlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GetGuildUserListInfoReply* default_instance_;
};
// -------------------------------------------------------------------

class CreateGuildReq : public ::google::protobuf::Message {
 public:
  CreateGuildReq();
  virtual ~CreateGuildReq();

  CreateGuildReq(const CreateGuildReq& from);

  inline CreateGuildReq& operator=(const CreateGuildReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateGuildReq& default_instance();

  void Swap(CreateGuildReq* other);

  // implements Message ----------------------------------------------

  CreateGuildReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateGuildReq& from);
  void MergeFrom(const CreateGuildReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string notice = 2;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 2;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const char* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // @@protoc_insertion_point(class_scope:Packet.CreateGuildReq)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_notice();
  inline void clear_has_notice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* notice_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static CreateGuildReq* default_instance_;
};
// -------------------------------------------------------------------

class FindGuildReq : public ::google::protobuf::Message {
 public:
  FindGuildReq();
  virtual ~FindGuildReq();

  FindGuildReq(const FindGuildReq& from);

  inline FindGuildReq& operator=(const FindGuildReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FindGuildReq& default_instance();

  void Swap(FindGuildReq* other);

  // implements Message ----------------------------------------------

  FindGuildReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FindGuildReq& from);
  void MergeFrom(const FindGuildReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional fixed64 guid = 2;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 2;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Packet.FindGuildReq)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_guid();
  inline void clear_has_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint64 guid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static FindGuildReq* default_instance_;
};
// -------------------------------------------------------------------

class ApplyGuildReq : public ::google::protobuf::Message {
 public:
  ApplyGuildReq();
  virtual ~ApplyGuildReq();

  ApplyGuildReq(const ApplyGuildReq& from);

  inline ApplyGuildReq& operator=(const ApplyGuildReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ApplyGuildReq& default_instance();

  void Swap(ApplyGuildReq* other);

  // implements Message ----------------------------------------------

  ApplyGuildReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ApplyGuildReq& from);
  void MergeFrom(const ApplyGuildReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Packet.ApplyGuildReq)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static ApplyGuildReq* default_instance_;
};
// -------------------------------------------------------------------

class OneKeyApplyGuildReq : public ::google::protobuf::Message {
 public:
  OneKeyApplyGuildReq();
  virtual ~OneKeyApplyGuildReq();

  OneKeyApplyGuildReq(const OneKeyApplyGuildReq& from);

  inline OneKeyApplyGuildReq& operator=(const OneKeyApplyGuildReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OneKeyApplyGuildReq& default_instance();

  void Swap(OneKeyApplyGuildReq* other);

  // implements Message ----------------------------------------------

  OneKeyApplyGuildReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OneKeyApplyGuildReq& from);
  void MergeFrom(const OneKeyApplyGuildReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Packet.OneKeyApplyGuildReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static OneKeyApplyGuildReq* default_instance_;
};
// -------------------------------------------------------------------

class InviteyAddGuildReq : public ::google::protobuf::Message {
 public:
  InviteyAddGuildReq();
  virtual ~InviteyAddGuildReq();

  InviteyAddGuildReq(const InviteyAddGuildReq& from);

  inline InviteyAddGuildReq& operator=(const InviteyAddGuildReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InviteyAddGuildReq& default_instance();

  void Swap(InviteyAddGuildReq* other);

  // implements Message ----------------------------------------------

  InviteyAddGuildReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InviteyAddGuildReq& from);
  void MergeFrom(const InviteyAddGuildReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 playerguid = 1;
  inline bool has_playerguid() const;
  inline void clear_playerguid();
  static const int kPlayerguidFieldNumber = 1;
  inline ::google::protobuf::uint64 playerguid() const;
  inline void set_playerguid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Packet.InviteyAddGuildReq)
 private:
  inline void set_has_playerguid();
  inline void clear_has_playerguid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 playerguid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static InviteyAddGuildReq* default_instance_;
};
// -------------------------------------------------------------------

class AskInviteyAgreeGuildReply : public ::google::protobuf::Message {
 public:
  AskInviteyAgreeGuildReply();
  virtual ~AskInviteyAgreeGuildReply();

  AskInviteyAgreeGuildReply(const AskInviteyAgreeGuildReply& from);

  inline AskInviteyAgreeGuildReply& operator=(const AskInviteyAgreeGuildReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskInviteyAgreeGuildReply& default_instance();

  void Swap(AskInviteyAgreeGuildReply* other);

  // implements Message ----------------------------------------------

  AskInviteyAgreeGuildReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskInviteyAgreeGuildReply& from);
  void MergeFrom(const AskInviteyAgreeGuildReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guildid = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildidFieldNumber = 1;
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // required string guildname = 2;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildnameFieldNumber = 2;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // required string guildinvitename = 3;
  inline bool has_guildinvitename() const;
  inline void clear_guildinvitename();
  static const int kGuildinvitenameFieldNumber = 3;
  inline const ::std::string& guildinvitename() const;
  inline void set_guildinvitename(const ::std::string& value);
  inline void set_guildinvitename(const char* value);
  inline void set_guildinvitename(const char* value, size_t size);
  inline ::std::string* mutable_guildinvitename();
  inline ::std::string* release_guildinvitename();
  inline void set_allocated_guildinvitename(::std::string* guildinvitename);

  // required fixed64 guildinviteguid = 4;
  inline bool has_guildinviteguid() const;
  inline void clear_guildinviteguid();
  static const int kGuildinviteguidFieldNumber = 4;
  inline ::google::protobuf::uint64 guildinviteguid() const;
  inline void set_guildinviteguid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Packet.AskInviteyAgreeGuildReply)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_guildinvitename();
  inline void clear_has_guildinvitename();
  inline void set_has_guildinviteguid();
  inline void clear_has_guildinviteguid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guildid_;
  ::std::string* guildname_;
  ::std::string* guildinvitename_;
  ::google::protobuf::uint64 guildinviteguid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static AskInviteyAgreeGuildReply* default_instance_;
};
// -------------------------------------------------------------------

class InviteyAgreeGuildReq : public ::google::protobuf::Message {
 public:
  InviteyAgreeGuildReq();
  virtual ~InviteyAgreeGuildReq();

  InviteyAgreeGuildReq(const InviteyAgreeGuildReq& from);

  inline InviteyAgreeGuildReq& operator=(const InviteyAgreeGuildReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InviteyAgreeGuildReq& default_instance();

  void Swap(InviteyAgreeGuildReq* other);

  // implements Message ----------------------------------------------

  InviteyAgreeGuildReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InviteyAgreeGuildReq& from);
  void MergeFrom(const InviteyAgreeGuildReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guildid = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildidFieldNumber = 1;
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // required bool agree = 2;
  inline bool has_agree() const;
  inline void clear_agree();
  static const int kAgreeFieldNumber = 2;
  inline bool agree() const;
  inline void set_agree(bool value);

  // required fixed64 guildidinviteguid = 3;
  inline bool has_guildidinviteguid() const;
  inline void clear_guildidinviteguid();
  static const int kGuildidinviteguidFieldNumber = 3;
  inline ::google::protobuf::uint64 guildidinviteguid() const;
  inline void set_guildidinviteguid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Packet.InviteyAgreeGuildReq)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_agree();
  inline void clear_has_agree();
  inline void set_has_guildidinviteguid();
  inline void clear_has_guildidinviteguid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guildid_;
  ::google::protobuf::uint64 guildidinviteguid_;
  bool agree_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static InviteyAgreeGuildReq* default_instance_;
};
// -------------------------------------------------------------------

class AgreeApplyGuildReq : public ::google::protobuf::Message {
 public:
  AgreeApplyGuildReq();
  virtual ~AgreeApplyGuildReq();

  AgreeApplyGuildReq(const AgreeApplyGuildReq& from);

  inline AgreeApplyGuildReq& operator=(const AgreeApplyGuildReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AgreeApplyGuildReq& default_instance();

  void Swap(AgreeApplyGuildReq* other);

  // implements Message ----------------------------------------------

  AgreeApplyGuildReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AgreeApplyGuildReq& from);
  void MergeFrom(const AgreeApplyGuildReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 playerguid = 1;
  inline bool has_playerguid() const;
  inline void clear_playerguid();
  static const int kPlayerguidFieldNumber = 1;
  inline ::google::protobuf::uint64 playerguid() const;
  inline void set_playerguid(::google::protobuf::uint64 value);

  // required bool agree = 2;
  inline bool has_agree() const;
  inline void clear_agree();
  static const int kAgreeFieldNumber = 2;
  inline bool agree() const;
  inline void set_agree(bool value);

  // @@protoc_insertion_point(class_scope:Packet.AgreeApplyGuildReq)
 private:
  inline void set_has_playerguid();
  inline void clear_has_playerguid();
  inline void set_has_agree();
  inline void clear_has_agree();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 playerguid_;
  bool agree_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static AgreeApplyGuildReq* default_instance_;
};
// -------------------------------------------------------------------

class UpdatePlayerGuildInfo : public ::google::protobuf::Message {
 public:
  UpdatePlayerGuildInfo();
  virtual ~UpdatePlayerGuildInfo();

  UpdatePlayerGuildInfo(const UpdatePlayerGuildInfo& from);

  inline UpdatePlayerGuildInfo& operator=(const UpdatePlayerGuildInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdatePlayerGuildInfo& default_instance();

  void Swap(UpdatePlayerGuildInfo* other);

  // implements Message ----------------------------------------------

  UpdatePlayerGuildInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdatePlayerGuildInfo& from);
  void MergeFrom(const UpdatePlayerGuildInfo& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guildid = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildidFieldNumber = 1;
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // required string guildname = 2;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildnameFieldNumber = 2;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // @@protoc_insertion_point(class_scope:Packet.UpdatePlayerGuildInfo)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_guildname();
  inline void clear_has_guildname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guildid_;
  ::std::string* guildname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static UpdatePlayerGuildInfo* default_instance_;
};
// -------------------------------------------------------------------

class GuildBaseInfo : public ::google::protobuf::Message {
 public:
  GuildBaseInfo();
  virtual ~GuildBaseInfo();

  GuildBaseInfo(const GuildBaseInfo& from);

  inline GuildBaseInfo& operator=(const GuildBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildBaseInfo& default_instance();

  void Swap(GuildBaseInfo* other);

  // implements Message ----------------------------------------------

  GuildBaseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildBaseInfo& from);
  void MergeFrom(const GuildBaseInfo& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string lastname = 3;
  inline bool has_lastname() const;
  inline void clear_lastname();
  static const int kLastnameFieldNumber = 3;
  inline const ::std::string& lastname() const;
  inline void set_lastname(const ::std::string& value);
  inline void set_lastname(const char* value);
  inline void set_lastname(const char* value, size_t size);
  inline ::std::string* mutable_lastname();
  inline ::std::string* release_lastname();
  inline void set_allocated_lastname(::std::string* lastname);

  // required string notice = 4;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 4;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const char* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // required int32 guildlevel = 5;
  inline bool has_guildlevel() const;
  inline void clear_guildlevel();
  static const int kGuildlevelFieldNumber = 5;
  inline ::google::protobuf::int32 guildlevel() const;
  inline void set_guildlevel(::google::protobuf::int32 value);

  // required int32 membersize = 6;
  inline bool has_membersize() const;
  inline void clear_membersize();
  static const int kMembersizeFieldNumber = 6;
  inline ::google::protobuf::int32 membersize() const;
  inline void set_membersize(::google::protobuf::int32 value);

  // required int32 maxmembersize = 7;
  inline bool has_maxmembersize() const;
  inline void clear_maxmembersize();
  static const int kMaxmembersizeFieldNumber = 7;
  inline ::google::protobuf::int32 maxmembersize() const;
  inline void set_maxmembersize(::google::protobuf::int32 value);

  // required string chieftainname = 8;
  inline bool has_chieftainname() const;
  inline void clear_chieftainname();
  static const int kChieftainnameFieldNumber = 8;
  inline const ::std::string& chieftainname() const;
  inline void set_chieftainname(const ::std::string& value);
  inline void set_chieftainname(const char* value);
  inline void set_chieftainname(const char* value, size_t size);
  inline ::std::string* mutable_chieftainname();
  inline ::std::string* release_chieftainname();
  inline void set_allocated_chieftainname(::std::string* chieftainname);

  // required fixed64 chieftainguid = 9;
  inline bool has_chieftainguid() const;
  inline void clear_chieftainguid();
  static const int kChieftainguidFieldNumber = 9;
  inline ::google::protobuf::uint64 chieftainguid() const;
  inline void set_chieftainguid(::google::protobuf::uint64 value);

  // required fixed32 createtime = 10;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreatetimeFieldNumber = 10;
  inline ::google::protobuf::uint32 createtime() const;
  inline void set_createtime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Packet.GuildBaseInfo)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_lastname();
  inline void clear_has_lastname();
  inline void set_has_notice();
  inline void clear_has_notice();
  inline void set_has_guildlevel();
  inline void clear_has_guildlevel();
  inline void set_has_membersize();
  inline void clear_has_membersize();
  inline void set_has_maxmembersize();
  inline void clear_has_maxmembersize();
  inline void set_has_chieftainname();
  inline void clear_has_chieftainname();
  inline void set_has_chieftainguid();
  inline void clear_has_chieftainguid();
  inline void set_has_createtime();
  inline void clear_has_createtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::std::string* name_;
  ::std::string* lastname_;
  ::std::string* notice_;
  ::google::protobuf::int32 guildlevel_;
  ::google::protobuf::int32 membersize_;
  ::std::string* chieftainname_;
  ::google::protobuf::int32 maxmembersize_;
  ::google::protobuf::uint32 createtime_;
  ::google::protobuf::uint64 chieftainguid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildBaseInfo* default_instance_;
};
// -------------------------------------------------------------------

class GetGuildListReq : public ::google::protobuf::Message {
 public:
  GetGuildListReq();
  virtual ~GetGuildListReq();

  GetGuildListReq(const GetGuildListReq& from);

  inline GetGuildListReq& operator=(const GetGuildListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetGuildListReq& default_instance();

  void Swap(GetGuildListReq* other);

  // implements Message ----------------------------------------------

  GetGuildListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetGuildListReq& from);
  void MergeFrom(const GetGuildListReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Packet.GetGuildListReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GetGuildListReq* default_instance_;
};
// -------------------------------------------------------------------

class GuildBaseListReply : public ::google::protobuf::Message {
 public:
  GuildBaseListReply();
  virtual ~GuildBaseListReply();

  GuildBaseListReply(const GuildBaseListReply& from);

  inline GuildBaseListReply& operator=(const GuildBaseListReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildBaseListReply& default_instance();

  void Swap(GuildBaseListReply* other);

  // implements Message ----------------------------------------------

  GuildBaseListReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildBaseListReply& from);
  void MergeFrom(const GuildBaseListReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Packet.GuildBaseInfo list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::Packet::GuildBaseInfo& list(int index) const;
  inline ::Packet::GuildBaseInfo* mutable_list(int index);
  inline ::Packet::GuildBaseInfo* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::GuildBaseInfo >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::GuildBaseInfo >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:Packet.GuildBaseListReply)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::GuildBaseInfo > list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildBaseListReply* default_instance_;
};
// -------------------------------------------------------------------

class ApplyGuildPlayerInfo : public ::google::protobuf::Message {
 public:
  ApplyGuildPlayerInfo();
  virtual ~ApplyGuildPlayerInfo();

  ApplyGuildPlayerInfo(const ApplyGuildPlayerInfo& from);

  inline ApplyGuildPlayerInfo& operator=(const ApplyGuildPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ApplyGuildPlayerInfo& default_instance();

  void Swap(ApplyGuildPlayerInfo* other);

  // implements Message ----------------------------------------------

  ApplyGuildPlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ApplyGuildPlayerInfo& from);
  void MergeFrom(const ApplyGuildPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 playerguid = 1;
  inline bool has_playerguid() const;
  inline void clear_playerguid();
  static const int kPlayerguidFieldNumber = 1;
  inline ::google::protobuf::uint64 playerguid() const;
  inline void set_playerguid(::google::protobuf::uint64 value);

  // required string playername = 2;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayernameFieldNumber = 2;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // required int32 playerlevel = 3;
  inline bool has_playerlevel() const;
  inline void clear_playerlevel();
  static const int kPlayerlevelFieldNumber = 3;
  inline ::google::protobuf::int32 playerlevel() const;
  inline void set_playerlevel(::google::protobuf::int32 value);

  // required .Packet.Professions profession = 4;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 4;
  inline ::Packet::Professions profession() const;
  inline void set_profession(::Packet::Professions value);

  // @@protoc_insertion_point(class_scope:Packet.ApplyGuildPlayerInfo)
 private:
  inline void set_has_playerguid();
  inline void clear_has_playerguid();
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_playerlevel();
  inline void clear_has_playerlevel();
  inline void set_has_profession();
  inline void clear_has_profession();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 playerguid_;
  ::std::string* playername_;
  ::google::protobuf::int32 playerlevel_;
  int profession_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static ApplyGuildPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class ApplyGuildPlayerListReq : public ::google::protobuf::Message {
 public:
  ApplyGuildPlayerListReq();
  virtual ~ApplyGuildPlayerListReq();

  ApplyGuildPlayerListReq(const ApplyGuildPlayerListReq& from);

  inline ApplyGuildPlayerListReq& operator=(const ApplyGuildPlayerListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ApplyGuildPlayerListReq& default_instance();

  void Swap(ApplyGuildPlayerListReq* other);

  // implements Message ----------------------------------------------

  ApplyGuildPlayerListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ApplyGuildPlayerListReq& from);
  void MergeFrom(const ApplyGuildPlayerListReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Packet.ApplyGuildPlayerListReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static ApplyGuildPlayerListReq* default_instance_;
};
// -------------------------------------------------------------------

class ApplyGuildPlayerListReply : public ::google::protobuf::Message {
 public:
  ApplyGuildPlayerListReply();
  virtual ~ApplyGuildPlayerListReply();

  ApplyGuildPlayerListReply(const ApplyGuildPlayerListReply& from);

  inline ApplyGuildPlayerListReply& operator=(const ApplyGuildPlayerListReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ApplyGuildPlayerListReply& default_instance();

  void Swap(ApplyGuildPlayerListReply* other);

  // implements Message ----------------------------------------------

  ApplyGuildPlayerListReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ApplyGuildPlayerListReply& from);
  void MergeFrom(const ApplyGuildPlayerListReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Packet.ApplyGuildPlayerInfo list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::Packet::ApplyGuildPlayerInfo& list(int index) const;
  inline ::Packet::ApplyGuildPlayerInfo* mutable_list(int index);
  inline ::Packet::ApplyGuildPlayerInfo* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::ApplyGuildPlayerInfo >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::ApplyGuildPlayerInfo >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:Packet.ApplyGuildPlayerListReply)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::ApplyGuildPlayerInfo > list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static ApplyGuildPlayerListReply* default_instance_;
};
// -------------------------------------------------------------------

class ClearApplyGuildPlayerListReq : public ::google::protobuf::Message {
 public:
  ClearApplyGuildPlayerListReq();
  virtual ~ClearApplyGuildPlayerListReq();

  ClearApplyGuildPlayerListReq(const ClearApplyGuildPlayerListReq& from);

  inline ClearApplyGuildPlayerListReq& operator=(const ClearApplyGuildPlayerListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClearApplyGuildPlayerListReq& default_instance();

  void Swap(ClearApplyGuildPlayerListReq* other);

  // implements Message ----------------------------------------------

  ClearApplyGuildPlayerListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClearApplyGuildPlayerListReq& from);
  void MergeFrom(const ClearApplyGuildPlayerListReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Packet.ClearApplyGuildPlayerListReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static ClearApplyGuildPlayerListReq* default_instance_;
};
// -------------------------------------------------------------------

class SetGuildNameRR : public ::google::protobuf::Message {
 public:
  SetGuildNameRR();
  virtual ~SetGuildNameRR();

  SetGuildNameRR(const SetGuildNameRR& from);

  inline SetGuildNameRR& operator=(const SetGuildNameRR& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetGuildNameRR& default_instance();

  void Swap(SetGuildNameRR* other);

  // implements Message ----------------------------------------------

  SetGuildNameRR* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetGuildNameRR& from);
  void MergeFrom(const SetGuildNameRR& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string lastname = 2;
  inline bool has_lastname() const;
  inline void clear_lastname();
  static const int kLastnameFieldNumber = 2;
  inline const ::std::string& lastname() const;
  inline void set_lastname(const ::std::string& value);
  inline void set_lastname(const char* value);
  inline void set_lastname(const char* value, size_t size);
  inline ::std::string* mutable_lastname();
  inline ::std::string* release_lastname();
  inline void set_allocated_lastname(::std::string* lastname);

  // @@protoc_insertion_point(class_scope:Packet.SetGuildNameRR)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_lastname();
  inline void clear_has_lastname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* lastname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static SetGuildNameRR* default_instance_;
};
// -------------------------------------------------------------------

class SetGuildNoticeRR : public ::google::protobuf::Message {
 public:
  SetGuildNoticeRR();
  virtual ~SetGuildNoticeRR();

  SetGuildNoticeRR(const SetGuildNoticeRR& from);

  inline SetGuildNoticeRR& operator=(const SetGuildNoticeRR& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetGuildNoticeRR& default_instance();

  void Swap(SetGuildNoticeRR* other);

  // implements Message ----------------------------------------------

  SetGuildNoticeRR* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetGuildNoticeRR& from);
  void MergeFrom(const SetGuildNoticeRR& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string notice = 1;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 1;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const char* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // @@protoc_insertion_point(class_scope:Packet.SetGuildNoticeRR)
 private:
  inline void set_has_notice();
  inline void clear_has_notice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* notice_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static SetGuildNoticeRR* default_instance_;
};
// -------------------------------------------------------------------

class GuildDonationReq : public ::google::protobuf::Message {
 public:
  GuildDonationReq();
  virtual ~GuildDonationReq();

  GuildDonationReq(const GuildDonationReq& from);

  inline GuildDonationReq& operator=(const GuildDonationReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildDonationReq& default_instance();

  void Swap(GuildDonationReq* other);

  // implements Message ----------------------------------------------

  GuildDonationReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildDonationReq& from);
  void MergeFrom(const GuildDonationReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.GuildDonationReq)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildDonationReq* default_instance_;
};
// -------------------------------------------------------------------

class DonationFlagUpdate : public ::google::protobuf::Message {
 public:
  DonationFlagUpdate();
  virtual ~DonationFlagUpdate();

  DonationFlagUpdate(const DonationFlagUpdate& from);

  inline DonationFlagUpdate& operator=(const DonationFlagUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DonationFlagUpdate& default_instance();

  void Swap(DonationFlagUpdate* other);

  // implements Message ----------------------------------------------

  DonationFlagUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DonationFlagUpdate& from);
  void MergeFrom(const DonationFlagUpdate& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 bdonation = 7;
  inline bool has_bdonation() const;
  inline void clear_bdonation();
  static const int kBdonationFieldNumber = 7;
  inline ::google::protobuf::int32 bdonation() const;
  inline void set_bdonation(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.DonationFlagUpdate)
 private:
  inline void set_has_bdonation();
  inline void clear_has_bdonation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 bdonation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static DonationFlagUpdate* default_instance_;
};
// -------------------------------------------------------------------

class GuildMoneyUpdate : public ::google::protobuf::Message {
 public:
  GuildMoneyUpdate();
  virtual ~GuildMoneyUpdate();

  GuildMoneyUpdate(const GuildMoneyUpdate& from);

  inline GuildMoneyUpdate& operator=(const GuildMoneyUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildMoneyUpdate& default_instance();

  void Swap(GuildMoneyUpdate* other);

  // implements Message ----------------------------------------------

  GuildMoneyUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildMoneyUpdate& from);
  void MergeFrom(const GuildMoneyUpdate& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 guildmoney = 1;
  inline bool has_guildmoney() const;
  inline void clear_guildmoney();
  static const int kGuildmoneyFieldNumber = 1;
  inline ::google::protobuf::int32 guildmoney() const;
  inline void set_guildmoney(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.GuildMoneyUpdate)
 private:
  inline void set_has_guildmoney();
  inline void clear_has_guildmoney();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 guildmoney_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildMoneyUpdate* default_instance_;
};
// -------------------------------------------------------------------

class GuildImpeachReply : public ::google::protobuf::Message {
 public:
  GuildImpeachReply();
  virtual ~GuildImpeachReply();

  GuildImpeachReply(const GuildImpeachReply& from);

  inline GuildImpeachReply& operator=(const GuildImpeachReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildImpeachReply& default_instance();

  void Swap(GuildImpeachReply* other);

  // implements Message ----------------------------------------------

  GuildImpeachReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildImpeachReply& from);
  void MergeFrom(const GuildImpeachReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Packet.GuildImpeach impeach = 1;
  inline bool has_impeach() const;
  inline void clear_impeach();
  static const int kImpeachFieldNumber = 1;
  inline const ::Packet::GuildImpeach& impeach() const;
  inline ::Packet::GuildImpeach* mutable_impeach();
  inline ::Packet::GuildImpeach* release_impeach();
  inline void set_allocated_impeach(::Packet::GuildImpeach* impeach);

  // @@protoc_insertion_point(class_scope:Packet.GuildImpeachReply)
 private:
  inline void set_has_impeach();
  inline void clear_has_impeach();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Packet::GuildImpeach* impeach_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildImpeachReply* default_instance_;
};
// -------------------------------------------------------------------

class SetGuildUserPositionRR : public ::google::protobuf::Message {
 public:
  SetGuildUserPositionRR();
  virtual ~SetGuildUserPositionRR();

  SetGuildUserPositionRR(const SetGuildUserPositionRR& from);

  inline SetGuildUserPositionRR& operator=(const SetGuildUserPositionRR& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetGuildUserPositionRR& default_instance();

  void Swap(SetGuildUserPositionRR* other);

  // implements Message ----------------------------------------------

  SetGuildUserPositionRR* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetGuildUserPositionRR& from);
  void MergeFrom(const SetGuildUserPositionRR& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 playerguid = 1;
  inline bool has_playerguid() const;
  inline void clear_playerguid();
  static const int kPlayerguidFieldNumber = 1;
  inline ::google::protobuf::uint64 playerguid() const;
  inline void set_playerguid(::google::protobuf::uint64 value);

  // required .Packet.GuildPosition position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline ::Packet::GuildPosition position() const;
  inline void set_position(::Packet::GuildPosition value);

  // @@protoc_insertion_point(class_scope:Packet.SetGuildUserPositionRR)
 private:
  inline void set_has_playerguid();
  inline void clear_has_playerguid();
  inline void set_has_position();
  inline void clear_has_position();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 playerguid_;
  int position_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static SetGuildUserPositionRR* default_instance_;
};
// -------------------------------------------------------------------

class GetGuildBonusReq : public ::google::protobuf::Message {
 public:
  GetGuildBonusReq();
  virtual ~GetGuildBonusReq();

  GetGuildBonusReq(const GetGuildBonusReq& from);

  inline GetGuildBonusReq& operator=(const GetGuildBonusReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetGuildBonusReq& default_instance();

  void Swap(GetGuildBonusReq* other);

  // implements Message ----------------------------------------------

  GetGuildBonusReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetGuildBonusReq& from);
  void MergeFrom(const GetGuildBonusReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Packet.GetGuildBonusReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GetGuildBonusReq* default_instance_;
};
// -------------------------------------------------------------------

class GuildCDKInfo : public ::google::protobuf::Message {
 public:
  GuildCDKInfo();
  virtual ~GuildCDKInfo();

  GuildCDKInfo(const GuildCDKInfo& from);

  inline GuildCDKInfo& operator=(const GuildCDKInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildCDKInfo& default_instance();

  void Swap(GuildCDKInfo* other);

  // implements Message ----------------------------------------------

  GuildCDKInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildCDKInfo& from);
  void MergeFrom(const GuildCDKInfo& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // required fixed64 playerid = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  inline ::google::protobuf::uint64 playerid() const;
  inline void set_playerid(::google::protobuf::uint64 value);

  // required int32 configid = 3;
  inline bool has_configid() const;
  inline void clear_configid();
  static const int kConfigidFieldNumber = 3;
  inline ::google::protobuf::int32 configid() const;
  inline void set_configid(::google::protobuf::int32 value);

  // required int32 count = 4;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // required string playername = 5;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayernameFieldNumber = 5;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // required int32 limitlevel = 6;
  inline bool has_limitlevel() const;
  inline void clear_limitlevel();
  static const int kLimitlevelFieldNumber = 6;
  inline ::google::protobuf::int32 limitlevel() const;
  inline void set_limitlevel(::google::protobuf::int32 value);

  // required int32 limitday = 7;
  inline bool has_limitday() const;
  inline void clear_limitday();
  static const int kLimitdayFieldNumber = 7;
  inline ::google::protobuf::int32 limitday() const;
  inline void set_limitday(::google::protobuf::int32 value);

  // required int32 limitdonation = 8;
  inline bool has_limitdonation() const;
  inline void clear_limitdonation();
  static const int kLimitdonationFieldNumber = 8;
  inline ::google::protobuf::int32 limitdonation() const;
  inline void set_limitdonation(::google::protobuf::int32 value);

  // required fixed32 datetime = 9;
  inline bool has_datetime() const;
  inline void clear_datetime();
  static const int kDatetimeFieldNumber = 9;
  inline ::google::protobuf::uint32 datetime() const;
  inline void set_datetime(::google::protobuf::uint32 value);

  // required string wish = 10;
  inline bool has_wish() const;
  inline void clear_wish();
  static const int kWishFieldNumber = 10;
  inline const ::std::string& wish() const;
  inline void set_wish(const ::std::string& value);
  inline void set_wish(const char* value);
  inline void set_wish(const char* value, size_t size);
  inline ::std::string* mutable_wish();
  inline ::std::string* release_wish();
  inline void set_allocated_wish(::std::string* wish);

  // repeated fixed64 getplayerid = 11;
  inline int getplayerid_size() const;
  inline void clear_getplayerid();
  static const int kGetplayeridFieldNumber = 11;
  inline ::google::protobuf::uint64 getplayerid(int index) const;
  inline void set_getplayerid(int index, ::google::protobuf::uint64 value);
  inline void add_getplayerid(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      getplayerid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_getplayerid();

  // @@protoc_insertion_point(class_scope:Packet.GuildCDKInfo)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_configid();
  inline void clear_has_configid();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_limitlevel();
  inline void clear_has_limitlevel();
  inline void set_has_limitday();
  inline void clear_has_limitday();
  inline void set_has_limitdonation();
  inline void clear_has_limitdonation();
  inline void set_has_datetime();
  inline void clear_has_datetime();
  inline void set_has_wish();
  inline void clear_has_wish();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::int32 configid_;
  ::google::protobuf::int32 count_;
  ::std::string* playername_;
  ::google::protobuf::int32 limitlevel_;
  ::google::protobuf::int32 limitday_;
  ::google::protobuf::int32 limitdonation_;
  ::google::protobuf::uint32 datetime_;
  ::std::string* wish_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > getplayerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildCDKInfo* default_instance_;
};
// -------------------------------------------------------------------

class CreateGuildCDK : public ::google::protobuf::Message {
 public:
  CreateGuildCDK();
  virtual ~CreateGuildCDK();

  CreateGuildCDK(const CreateGuildCDK& from);

  inline CreateGuildCDK& operator=(const CreateGuildCDK& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateGuildCDK& default_instance();

  void Swap(CreateGuildCDK* other);

  // implements Message ----------------------------------------------

  CreateGuildCDK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateGuildCDK& from);
  void MergeFrom(const CreateGuildCDK& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 configid = 1;
  inline bool has_configid() const;
  inline void clear_configid();
  static const int kConfigidFieldNumber = 1;
  inline ::google::protobuf::int32 configid() const;
  inline void set_configid(::google::protobuf::int32 value);

  // required int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // required int32 limitlevel = 3;
  inline bool has_limitlevel() const;
  inline void clear_limitlevel();
  static const int kLimitlevelFieldNumber = 3;
  inline ::google::protobuf::int32 limitlevel() const;
  inline void set_limitlevel(::google::protobuf::int32 value);

  // required int32 limitday = 4;
  inline bool has_limitday() const;
  inline void clear_limitday();
  static const int kLimitdayFieldNumber = 4;
  inline ::google::protobuf::int32 limitday() const;
  inline void set_limitday(::google::protobuf::int32 value);

  // required int32 limitdonation = 5;
  inline bool has_limitdonation() const;
  inline void clear_limitdonation();
  static const int kLimitdonationFieldNumber = 5;
  inline ::google::protobuf::int32 limitdonation() const;
  inline void set_limitdonation(::google::protobuf::int32 value);

  // required string wish = 6;
  inline bool has_wish() const;
  inline void clear_wish();
  static const int kWishFieldNumber = 6;
  inline const ::std::string& wish() const;
  inline void set_wish(const ::std::string& value);
  inline void set_wish(const char* value);
  inline void set_wish(const char* value, size_t size);
  inline ::std::string* mutable_wish();
  inline ::std::string* release_wish();
  inline void set_allocated_wish(::std::string* wish);

  // @@protoc_insertion_point(class_scope:Packet.CreateGuildCDK)
 private:
  inline void set_has_configid();
  inline void clear_has_configid();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_limitlevel();
  inline void clear_has_limitlevel();
  inline void set_has_limitday();
  inline void clear_has_limitday();
  inline void set_has_limitdonation();
  inline void clear_has_limitdonation();
  inline void set_has_wish();
  inline void clear_has_wish();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 configid_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 limitlevel_;
  ::google::protobuf::int32 limitday_;
  ::std::string* wish_;
  ::google::protobuf::int32 limitdonation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static CreateGuildCDK* default_instance_;
};
// -------------------------------------------------------------------

class CreateGuildCDKReq : public ::google::protobuf::Message {
 public:
  CreateGuildCDKReq();
  virtual ~CreateGuildCDKReq();

  CreateGuildCDKReq(const CreateGuildCDKReq& from);

  inline CreateGuildCDKReq& operator=(const CreateGuildCDKReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateGuildCDKReq& default_instance();

  void Swap(CreateGuildCDKReq* other);

  // implements Message ----------------------------------------------

  CreateGuildCDKReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateGuildCDKReq& from);
  void MergeFrom(const CreateGuildCDKReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Packet.CreateGuildCDK cdks = 1;
  inline int cdks_size() const;
  inline void clear_cdks();
  static const int kCdksFieldNumber = 1;
  inline const ::Packet::CreateGuildCDK& cdks(int index) const;
  inline ::Packet::CreateGuildCDK* mutable_cdks(int index);
  inline ::Packet::CreateGuildCDK* add_cdks();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::CreateGuildCDK >&
      cdks() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::CreateGuildCDK >*
      mutable_cdks();

  // @@protoc_insertion_point(class_scope:Packet.CreateGuildCDKReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::CreateGuildCDK > cdks_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static CreateGuildCDKReq* default_instance_;
};
// -------------------------------------------------------------------

class GetGuildCDKReq : public ::google::protobuf::Message {
 public:
  GetGuildCDKReq();
  virtual ~GetGuildCDKReq();

  GetGuildCDKReq(const GetGuildCDKReq& from);

  inline GetGuildCDKReq& operator=(const GetGuildCDKReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetGuildCDKReq& default_instance();

  void Swap(GetGuildCDKReq* other);

  // implements Message ----------------------------------------------

  GetGuildCDKReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetGuildCDKReq& from);
  void MergeFrom(const GetGuildCDKReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Packet.GetGuildCDKReq)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GetGuildCDKReq* default_instance_;
};
// -------------------------------------------------------------------

class GetGuildCDKListReq : public ::google::protobuf::Message {
 public:
  GetGuildCDKListReq();
  virtual ~GetGuildCDKListReq();

  GetGuildCDKListReq(const GetGuildCDKListReq& from);

  inline GetGuildCDKListReq& operator=(const GetGuildCDKListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetGuildCDKListReq& default_instance();

  void Swap(GetGuildCDKListReq* other);

  // implements Message ----------------------------------------------

  GetGuildCDKListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetGuildCDKListReq& from);
  void MergeFrom(const GetGuildCDKListReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Packet.GetGuildCDKListReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GetGuildCDKListReq* default_instance_;
};
// -------------------------------------------------------------------

class GetGuildCDKListReply : public ::google::protobuf::Message {
 public:
  GetGuildCDKListReply();
  virtual ~GetGuildCDKListReply();

  GetGuildCDKListReply(const GetGuildCDKListReply& from);

  inline GetGuildCDKListReply& operator=(const GetGuildCDKListReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetGuildCDKListReply& default_instance();

  void Swap(GetGuildCDKListReply* other);

  // implements Message ----------------------------------------------

  GetGuildCDKListReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetGuildCDKListReply& from);
  void MergeFrom(const GetGuildCDKListReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Packet.GuildCDKInfo cdks = 1;
  inline int cdks_size() const;
  inline void clear_cdks();
  static const int kCdksFieldNumber = 1;
  inline const ::Packet::GuildCDKInfo& cdks(int index) const;
  inline ::Packet::GuildCDKInfo* mutable_cdks(int index);
  inline ::Packet::GuildCDKInfo* add_cdks();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::GuildCDKInfo >&
      cdks() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::GuildCDKInfo >*
      mutable_cdks();

  // @@protoc_insertion_point(class_scope:Packet.GetGuildCDKListReply)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::GuildCDKInfo > cdks_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GetGuildCDKListReply* default_instance_;
};
// -------------------------------------------------------------------

class BuildLevelUpReq : public ::google::protobuf::Message {
 public:
  BuildLevelUpReq();
  virtual ~BuildLevelUpReq();

  BuildLevelUpReq(const BuildLevelUpReq& from);

  inline BuildLevelUpReq& operator=(const BuildLevelUpReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuildLevelUpReq& default_instance();

  void Swap(BuildLevelUpReq* other);

  // implements Message ----------------------------------------------

  BuildLevelUpReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuildLevelUpReq& from);
  void MergeFrom(const BuildLevelUpReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 buildtype = 1;
  inline bool has_buildtype() const;
  inline void clear_buildtype();
  static const int kBuildtypeFieldNumber = 1;
  inline ::google::protobuf::int32 buildtype() const;
  inline void set_buildtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.BuildLevelUpReq)
 private:
  inline void set_has_buildtype();
  inline void clear_has_buildtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 buildtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static BuildLevelUpReq* default_instance_;
};
// -------------------------------------------------------------------

class BuildLevelUpReply : public ::google::protobuf::Message {
 public:
  BuildLevelUpReply();
  virtual ~BuildLevelUpReply();

  BuildLevelUpReply(const BuildLevelUpReply& from);

  inline BuildLevelUpReply& operator=(const BuildLevelUpReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuildLevelUpReply& default_instance();

  void Swap(BuildLevelUpReply* other);

  // implements Message ----------------------------------------------

  BuildLevelUpReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuildLevelUpReply& from);
  void MergeFrom(const BuildLevelUpReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 buildtype = 1;
  inline bool has_buildtype() const;
  inline void clear_buildtype();
  static const int kBuildtypeFieldNumber = 1;
  inline ::google::protobuf::int32 buildtype() const;
  inline void set_buildtype(::google::protobuf::int32 value);

  // required int32 buildlevel = 2;
  inline bool has_buildlevel() const;
  inline void clear_buildlevel();
  static const int kBuildlevelFieldNumber = 2;
  inline ::google::protobuf::int32 buildlevel() const;
  inline void set_buildlevel(::google::protobuf::int32 value);

  // required uint32 cdtime = 3;
  inline bool has_cdtime() const;
  inline void clear_cdtime();
  static const int kCdtimeFieldNumber = 3;
  inline ::google::protobuf::uint32 cdtime() const;
  inline void set_cdtime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Packet.BuildLevelUpReply)
 private:
  inline void set_has_buildtype();
  inline void clear_has_buildtype();
  inline void set_has_buildlevel();
  inline void clear_has_buildlevel();
  inline void set_has_cdtime();
  inline void clear_has_cdtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 buildtype_;
  ::google::protobuf::int32 buildlevel_;
  ::google::protobuf::uint32 cdtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static BuildLevelUpReply* default_instance_;
};
// -------------------------------------------------------------------

class GuildBossCompetitionDbInfo : public ::google::protobuf::Message {
 public:
  GuildBossCompetitionDbInfo();
  virtual ~GuildBossCompetitionDbInfo();

  GuildBossCompetitionDbInfo(const GuildBossCompetitionDbInfo& from);

  inline GuildBossCompetitionDbInfo& operator=(const GuildBossCompetitionDbInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildBossCompetitionDbInfo& default_instance();

  void Swap(GuildBossCompetitionDbInfo* other);

  // implements Message ----------------------------------------------

  GuildBossCompetitionDbInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildBossCompetitionDbInfo& from);
  void MergeFrom(const GuildBossCompetitionDbInfo& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 bosslevel = 1;
  inline bool has_bosslevel() const;
  inline void clear_bosslevel();
  static const int kBosslevelFieldNumber = 1;
  inline ::google::protobuf::int32 bosslevel() const;
  inline void set_bosslevel(::google::protobuf::int32 value);

  // required int64 hp = 2;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 2;
  inline ::google::protobuf::int64 hp() const;
  inline void set_hp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Packet.GuildBossCompetitionDbInfo)
 private:
  inline void set_has_bosslevel();
  inline void clear_has_bosslevel();
  inline void set_has_hp();
  inline void clear_has_hp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 hp_;
  ::google::protobuf::int32 bosslevel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildBossCompetitionDbInfo* default_instance_;
};
// -------------------------------------------------------------------

class GetGuildBossCompetitionReq : public ::google::protobuf::Message {
 public:
  GetGuildBossCompetitionReq();
  virtual ~GetGuildBossCompetitionReq();

  GetGuildBossCompetitionReq(const GetGuildBossCompetitionReq& from);

  inline GetGuildBossCompetitionReq& operator=(const GetGuildBossCompetitionReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetGuildBossCompetitionReq& default_instance();

  void Swap(GetGuildBossCompetitionReq* other);

  // implements Message ----------------------------------------------

  GetGuildBossCompetitionReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetGuildBossCompetitionReq& from);
  void MergeFrom(const GetGuildBossCompetitionReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Packet.GetGuildBossCompetitionReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GetGuildBossCompetitionReq* default_instance_;
};
// -------------------------------------------------------------------

class GetGuildBossCompetitionReply : public ::google::protobuf::Message {
 public:
  GetGuildBossCompetitionReply();
  virtual ~GetGuildBossCompetitionReply();

  GetGuildBossCompetitionReply(const GetGuildBossCompetitionReply& from);

  inline GetGuildBossCompetitionReply& operator=(const GetGuildBossCompetitionReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetGuildBossCompetitionReply& default_instance();

  void Swap(GetGuildBossCompetitionReply* other);

  // implements Message ----------------------------------------------

  GetGuildBossCompetitionReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetGuildBossCompetitionReply& from);
  void MergeFrom(const GetGuildBossCompetitionReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Packet.GuildBossCompetitionDbInfo info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::Packet::GuildBossCompetitionDbInfo& info() const;
  inline ::Packet::GuildBossCompetitionDbInfo* mutable_info();
  inline ::Packet::GuildBossCompetitionDbInfo* release_info();
  inline void set_allocated_info(::Packet::GuildBossCompetitionDbInfo* info);

  // @@protoc_insertion_point(class_scope:Packet.GetGuildBossCompetitionReply)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Packet::GuildBossCompetitionDbInfo* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GetGuildBossCompetitionReply* default_instance_;
};
// -------------------------------------------------------------------

class GuildUserDamage : public ::google::protobuf::Message {
 public:
  GuildUserDamage();
  virtual ~GuildUserDamage();

  GuildUserDamage(const GuildUserDamage& from);

  inline GuildUserDamage& operator=(const GuildUserDamage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildUserDamage& default_instance();

  void Swap(GuildUserDamage* other);

  // implements Message ----------------------------------------------

  GuildUserDamage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildUserDamage& from);
  void MergeFrom(const GuildUserDamage& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // required fixed64 playerid_ = 2;
  inline bool has_playerid_() const;
  inline void clear_playerid_();
  static const int kPlayeridFieldNumber = 2;
  inline ::google::protobuf::uint64 playerid_() const;
  inline void set_playerid_(::google::protobuf::uint64 value);

  // required fixed64 guildid_ = 3;
  inline bool has_guildid_() const;
  inline void clear_guildid_();
  static const int kGuildidFieldNumber = 3;
  inline ::google::protobuf::uint64 guildid_() const;
  inline void set_guildid_(::google::protobuf::uint64 value);

  // required int32 paramid_ = 4;
  inline bool has_paramid_() const;
  inline void clear_paramid_();
  static const int kParamidFieldNumber = 4;
  inline ::google::protobuf::int32 paramid_() const;
  inline void set_paramid_(::google::protobuf::int32 value);

  // required string playername_ = 5;
  inline bool has_playername_() const;
  inline void clear_playername_();
  static const int kPlayernameFieldNumber = 5;
  inline const ::std::string& playername_() const;
  inline void set_playername_(const ::std::string& value);
  inline void set_playername_(const char* value);
  inline void set_playername_(const char* value, size_t size);
  inline ::std::string* mutable_playername_();
  inline ::std::string* release_playername_();
  inline void set_allocated_playername_(::std::string* playername_);

  // required string guildname_ = 6;
  inline bool has_guildname_() const;
  inline void clear_guildname_();
  static const int kGuildnameFieldNumber = 6;
  inline const ::std::string& guildname_() const;
  inline void set_guildname_(const ::std::string& value);
  inline void set_guildname_(const char* value);
  inline void set_guildname_(const char* value, size_t size);
  inline ::std::string* mutable_guildname_();
  inline ::std::string* release_guildname_();
  inline void set_allocated_guildname_(::std::string* guildname_);

  // required int32 playerhair_ = 7;
  inline bool has_playerhair_() const;
  inline void clear_playerhair_();
  static const int kPlayerhairFieldNumber = 7;
  inline ::google::protobuf::int32 playerhair_() const;
  inline void set_playerhair_(::google::protobuf::int32 value);

  // required int32 damagevalue_ = 8;
  inline bool has_damagevalue_() const;
  inline void clear_damagevalue_();
  static const int kDamagevalueFieldNumber = 8;
  inline ::google::protobuf::int32 damagevalue_() const;
  inline void set_damagevalue_(::google::protobuf::int32 value);

  // repeated int32 actor_config_id_ = 9;
  inline int actor_config_id__size() const;
  inline void clear_actor_config_id_();
  static const int kActorConfigIdFieldNumber = 9;
  inline ::google::protobuf::int32 actor_config_id_(int index) const;
  inline void set_actor_config_id_(int index, ::google::protobuf::int32 value);
  inline void add_actor_config_id_(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      actor_config_id_() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_actor_config_id_();

  // @@protoc_insertion_point(class_scope:Packet.GuildUserDamage)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_playerid_();
  inline void clear_has_playerid_();
  inline void set_has_guildid_();
  inline void clear_has_guildid_();
  inline void set_has_paramid_();
  inline void clear_has_paramid_();
  inline void set_has_playername_();
  inline void clear_has_playername_();
  inline void set_has_guildname_();
  inline void clear_has_guildname_();
  inline void set_has_playerhair_();
  inline void clear_has_playerhair_();
  inline void set_has_damagevalue_();
  inline void clear_has_damagevalue_();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::google::protobuf::uint64 playerid__;
  ::google::protobuf::uint64 guildid__;
  ::std::string* playername__;
  ::google::protobuf::int32 paramid__;
  ::google::protobuf::int32 playerhair__;
  ::std::string* guildname__;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > actor_config_id__;
  ::google::protobuf::int32 damagevalue__;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildUserDamage* default_instance_;
};
// -------------------------------------------------------------------

class GuildAllDamage : public ::google::protobuf::Message {
 public:
  GuildAllDamage();
  virtual ~GuildAllDamage();

  GuildAllDamage(const GuildAllDamage& from);

  inline GuildAllDamage& operator=(const GuildAllDamage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildAllDamage& default_instance();

  void Swap(GuildAllDamage* other);

  // implements Message ----------------------------------------------

  GuildAllDamage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildAllDamage& from);
  void MergeFrom(const GuildAllDamage& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guildid_ = 1;
  inline bool has_guildid_() const;
  inline void clear_guildid_();
  static const int kGuildidFieldNumber = 1;
  inline ::google::protobuf::uint64 guildid_() const;
  inline void set_guildid_(::google::protobuf::uint64 value);

  // required string guildname_ = 2;
  inline bool has_guildname_() const;
  inline void clear_guildname_();
  static const int kGuildnameFieldNumber = 2;
  inline const ::std::string& guildname_() const;
  inline void set_guildname_(const ::std::string& value);
  inline void set_guildname_(const char* value);
  inline void set_guildname_(const char* value, size_t size);
  inline ::std::string* mutable_guildname_();
  inline ::std::string* release_guildname_();
  inline void set_allocated_guildname_(::std::string* guildname_);

  // required int32 damagevalue_ = 3;
  inline bool has_damagevalue_() const;
  inline void clear_damagevalue_();
  static const int kDamagevalueFieldNumber = 3;
  inline ::google::protobuf::int32 damagevalue_() const;
  inline void set_damagevalue_(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.GuildAllDamage)
 private:
  inline void set_has_guildid_();
  inline void clear_has_guildid_();
  inline void set_has_guildname_();
  inline void clear_has_guildname_();
  inline void set_has_damagevalue_();
  inline void clear_has_damagevalue_();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guildid__;
  ::std::string* guildname__;
  ::google::protobuf::int32 damagevalue__;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildAllDamage* default_instance_;
};
// -------------------------------------------------------------------

class GuildBossUserDamage : public ::google::protobuf::Message {
 public:
  GuildBossUserDamage();
  virtual ~GuildBossUserDamage();

  GuildBossUserDamage(const GuildBossUserDamage& from);

  inline GuildBossUserDamage& operator=(const GuildBossUserDamage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildBossUserDamage& default_instance();

  void Swap(GuildBossUserDamage* other);

  // implements Message ----------------------------------------------

  GuildBossUserDamage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildBossUserDamage& from);
  void MergeFrom(const GuildBossUserDamage& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 playerid_ = 1;
  inline bool has_playerid_() const;
  inline void clear_playerid_();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint64 playerid_() const;
  inline void set_playerid_(::google::protobuf::uint64 value);

  // required string playername_ = 2;
  inline bool has_playername_() const;
  inline void clear_playername_();
  static const int kPlayernameFieldNumber = 2;
  inline const ::std::string& playername_() const;
  inline void set_playername_(const ::std::string& value);
  inline void set_playername_(const char* value);
  inline void set_playername_(const char* value, size_t size);
  inline ::std::string* mutable_playername_();
  inline ::std::string* release_playername_();
  inline void set_allocated_playername_(::std::string* playername_);

  // required int32 playerhair_ = 3;
  inline bool has_playerhair_() const;
  inline void clear_playerhair_();
  static const int kPlayerhairFieldNumber = 3;
  inline ::google::protobuf::int32 playerhair_() const;
  inline void set_playerhair_(::google::protobuf::int32 value);

  // required int32 damagevalue_ = 4;
  inline bool has_damagevalue_() const;
  inline void clear_damagevalue_();
  static const int kDamagevalueFieldNumber = 4;
  inline ::google::protobuf::int32 damagevalue_() const;
  inline void set_damagevalue_(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.GuildBossUserDamage)
 private:
  inline void set_has_playerid_();
  inline void clear_has_playerid_();
  inline void set_has_playername_();
  inline void clear_has_playername_();
  inline void set_has_playerhair_();
  inline void clear_has_playerhair_();
  inline void set_has_damagevalue_();
  inline void clear_has_damagevalue_();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 playerid__;
  ::std::string* playername__;
  ::google::protobuf::int32 playerhair__;
  ::google::protobuf::int32 damagevalue__;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildBossUserDamage* default_instance_;
};
// -------------------------------------------------------------------

class GetGuildUserDamageReq : public ::google::protobuf::Message {
 public:
  GetGuildUserDamageReq();
  virtual ~GetGuildUserDamageReq();

  GetGuildUserDamageReq(const GetGuildUserDamageReq& from);

  inline GetGuildUserDamageReq& operator=(const GetGuildUserDamageReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetGuildUserDamageReq& default_instance();

  void Swap(GetGuildUserDamageReq* other);

  // implements Message ----------------------------------------------

  GetGuildUserDamageReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetGuildUserDamageReq& from);
  void MergeFrom(const GetGuildUserDamageReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Packet.GetGuildUserDamageReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GetGuildUserDamageReq* default_instance_;
};
// -------------------------------------------------------------------

class GetGuildUserDamageReply : public ::google::protobuf::Message {
 public:
  GetGuildUserDamageReply();
  virtual ~GetGuildUserDamageReply();

  GetGuildUserDamageReply(const GetGuildUserDamageReply& from);

  inline GetGuildUserDamageReply& operator=(const GetGuildUserDamageReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetGuildUserDamageReply& default_instance();

  void Swap(GetGuildUserDamageReply* other);

  // implements Message ----------------------------------------------

  GetGuildUserDamageReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetGuildUserDamageReply& from);
  void MergeFrom(const GetGuildUserDamageReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Packet.GuildUserDamage users_ = 1;
  inline int users__size() const;
  inline void clear_users_();
  static const int kUsersFieldNumber = 1;
  inline const ::Packet::GuildUserDamage& users_(int index) const;
  inline ::Packet::GuildUserDamage* mutable_users_(int index);
  inline ::Packet::GuildUserDamage* add_users_();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::GuildUserDamage >&
      users_() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::GuildUserDamage >*
      mutable_users_();

  // @@protoc_insertion_point(class_scope:Packet.GetGuildUserDamageReply)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::GuildUserDamage > users__;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GetGuildUserDamageReply* default_instance_;
};
// -------------------------------------------------------------------

class GetServerUserDamageReq : public ::google::protobuf::Message {
 public:
  GetServerUserDamageReq();
  virtual ~GetServerUserDamageReq();

  GetServerUserDamageReq(const GetServerUserDamageReq& from);

  inline GetServerUserDamageReq& operator=(const GetServerUserDamageReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetServerUserDamageReq& default_instance();

  void Swap(GetServerUserDamageReq* other);

  // implements Message ----------------------------------------------

  GetServerUserDamageReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetServerUserDamageReq& from);
  void MergeFrom(const GetServerUserDamageReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Packet.GetServerUserDamageReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GetServerUserDamageReq* default_instance_;
};
// -------------------------------------------------------------------

class GetGuildAllDamageReply : public ::google::protobuf::Message {
 public:
  GetGuildAllDamageReply();
  virtual ~GetGuildAllDamageReply();

  GetGuildAllDamageReply(const GetGuildAllDamageReply& from);

  inline GetGuildAllDamageReply& operator=(const GetGuildAllDamageReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetGuildAllDamageReply& default_instance();

  void Swap(GetGuildAllDamageReply* other);

  // implements Message ----------------------------------------------

  GetGuildAllDamageReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetGuildAllDamageReply& from);
  void MergeFrom(const GetGuildAllDamageReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Packet.GuildAllDamage guilds_ = 1;
  inline int guilds__size() const;
  inline void clear_guilds_();
  static const int kGuildsFieldNumber = 1;
  inline const ::Packet::GuildAllDamage& guilds_(int index) const;
  inline ::Packet::GuildAllDamage* mutable_guilds_(int index);
  inline ::Packet::GuildAllDamage* add_guilds_();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::GuildAllDamage >&
      guilds_() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::GuildAllDamage >*
      mutable_guilds_();

  // @@protoc_insertion_point(class_scope:Packet.GetGuildAllDamageReply)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::GuildAllDamage > guilds__;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GetGuildAllDamageReply* default_instance_;
};
// -------------------------------------------------------------------

class GetGuildBossUserDamageReply : public ::google::protobuf::Message {
 public:
  GetGuildBossUserDamageReply();
  virtual ~GetGuildBossUserDamageReply();

  GetGuildBossUserDamageReply(const GetGuildBossUserDamageReply& from);

  inline GetGuildBossUserDamageReply& operator=(const GetGuildBossUserDamageReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetGuildBossUserDamageReply& default_instance();

  void Swap(GetGuildBossUserDamageReply* other);

  // implements Message ----------------------------------------------

  GetGuildBossUserDamageReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetGuildBossUserDamageReply& from);
  void MergeFrom(const GetGuildBossUserDamageReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Packet.GuildBossUserDamage users_ = 1;
  inline int users__size() const;
  inline void clear_users_();
  static const int kUsersFieldNumber = 1;
  inline const ::Packet::GuildBossUserDamage& users_(int index) const;
  inline ::Packet::GuildBossUserDamage* mutable_users_(int index);
  inline ::Packet::GuildBossUserDamage* add_users_();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::GuildBossUserDamage >&
      users_() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::GuildBossUserDamage >*
      mutable_users_();

  // @@protoc_insertion_point(class_scope:Packet.GetGuildBossUserDamageReply)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::GuildBossUserDamage > users__;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GetGuildBossUserDamageReply* default_instance_;
};
// -------------------------------------------------------------------

class UpdateGuildBossUserDamage : public ::google::protobuf::Message {
 public:
  UpdateGuildBossUserDamage();
  virtual ~UpdateGuildBossUserDamage();

  UpdateGuildBossUserDamage(const UpdateGuildBossUserDamage& from);

  inline UpdateGuildBossUserDamage& operator=(const UpdateGuildBossUserDamage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateGuildBossUserDamage& default_instance();

  void Swap(UpdateGuildBossUserDamage* other);

  // implements Message ----------------------------------------------

  UpdateGuildBossUserDamage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateGuildBossUserDamage& from);
  void MergeFrom(const UpdateGuildBossUserDamage& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 opt = 1;
  inline bool has_opt() const;
  inline void clear_opt();
  static const int kOptFieldNumber = 1;
  inline ::google::protobuf::int32 opt() const;
  inline void set_opt(::google::protobuf::int32 value);

  // required int32 damagevalue = 2;
  inline bool has_damagevalue() const;
  inline void clear_damagevalue();
  static const int kDamagevalueFieldNumber = 2;
  inline ::google::protobuf::int32 damagevalue() const;
  inline void set_damagevalue(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.UpdateGuildBossUserDamage)
 private:
  inline void set_has_opt();
  inline void clear_has_opt();
  inline void set_has_damagevalue();
  inline void clear_has_damagevalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 opt_;
  ::google::protobuf::int32 damagevalue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static UpdateGuildBossUserDamage* default_instance_;
};
// -------------------------------------------------------------------

class GuildWetCopyInfo : public ::google::protobuf::Message {
 public:
  GuildWetCopyInfo();
  virtual ~GuildWetCopyInfo();

  GuildWetCopyInfo(const GuildWetCopyInfo& from);

  inline GuildWetCopyInfo& operator=(const GuildWetCopyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildWetCopyInfo& default_instance();

  void Swap(GuildWetCopyInfo* other);

  // implements Message ----------------------------------------------

  GuildWetCopyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildWetCopyInfo& from);
  void MergeFrom(const GuildWetCopyInfo& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guildid = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildidFieldNumber = 1;
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // required int32 copyid = 2;
  inline bool has_copyid() const;
  inline void clear_copyid();
  static const int kCopyidFieldNumber = 2;
  inline ::google::protobuf::int32 copyid() const;
  inline void set_copyid(::google::protobuf::int32 value);

  // required int32 stageid = 3;
  inline bool has_stageid() const;
  inline void clear_stageid();
  static const int kStageidFieldNumber = 3;
  inline ::google::protobuf::int32 stageid() const;
  inline void set_stageid(::google::protobuf::int32 value);

  // required bool status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline bool status() const;
  inline void set_status(bool value);

  // repeated fixed64 bosshp = 5;
  inline int bosshp_size() const;
  inline void clear_bosshp();
  static const int kBosshpFieldNumber = 5;
  inline ::google::protobuf::uint64 bosshp(int index) const;
  inline void set_bosshp(int index, ::google::protobuf::uint64 value);
  inline void add_bosshp(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      bosshp() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_bosshp();

  // required fixed64 maxbosshp = 6;
  inline bool has_maxbosshp() const;
  inline void clear_maxbosshp();
  static const int kMaxbosshpFieldNumber = 6;
  inline ::google::protobuf::uint64 maxbosshp() const;
  inline void set_maxbosshp(::google::protobuf::uint64 value);

  // required fixed64 fighterid = 7;
  inline bool has_fighterid() const;
  inline void clear_fighterid();
  static const int kFighteridFieldNumber = 7;
  inline ::google::protobuf::uint64 fighterid() const;
  inline void set_fighterid(::google::protobuf::uint64 value);

  // required string fightname = 8;
  inline bool has_fightname() const;
  inline void clear_fightname();
  static const int kFightnameFieldNumber = 8;
  inline const ::std::string& fightname() const;
  inline void set_fightname(const ::std::string& value);
  inline void set_fightname(const char* value);
  inline void set_fightname(const char* value, size_t size);
  inline ::std::string* mutable_fightname();
  inline ::std::string* release_fightname();
  inline void set_allocated_fightname(::std::string* fightname);

  // required uint32 opentime = 9;
  inline bool has_opentime() const;
  inline void clear_opentime();
  static const int kOpentimeFieldNumber = 9;
  inline ::google::protobuf::uint32 opentime() const;
  inline void set_opentime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Packet.GuildWetCopyInfo)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_copyid();
  inline void clear_has_copyid();
  inline void set_has_stageid();
  inline void clear_has_stageid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_maxbosshp();
  inline void clear_has_maxbosshp();
  inline void set_has_fighterid();
  inline void clear_has_fighterid();
  inline void set_has_fightname();
  inline void clear_has_fightname();
  inline void set_has_opentime();
  inline void clear_has_opentime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guildid_;
  ::google::protobuf::int32 copyid_;
  ::google::protobuf::int32 stageid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > bosshp_;
  ::google::protobuf::uint64 maxbosshp_;
  bool status_;
  ::google::protobuf::uint32 opentime_;
  ::google::protobuf::uint64 fighterid_;
  ::std::string* fightname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildWetCopyInfo* default_instance_;
};
// -------------------------------------------------------------------

class GetGuildWetCopyInfosReq : public ::google::protobuf::Message {
 public:
  GetGuildWetCopyInfosReq();
  virtual ~GetGuildWetCopyInfosReq();

  GetGuildWetCopyInfosReq(const GetGuildWetCopyInfosReq& from);

  inline GetGuildWetCopyInfosReq& operator=(const GetGuildWetCopyInfosReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetGuildWetCopyInfosReq& default_instance();

  void Swap(GetGuildWetCopyInfosReq* other);

  // implements Message ----------------------------------------------

  GetGuildWetCopyInfosReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetGuildWetCopyInfosReq& from);
  void MergeFrom(const GetGuildWetCopyInfosReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Packet.GetGuildWetCopyInfosReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GetGuildWetCopyInfosReq* default_instance_;
};
// -------------------------------------------------------------------

class GetGuildWetCopyInfosReply : public ::google::protobuf::Message {
 public:
  GetGuildWetCopyInfosReply();
  virtual ~GetGuildWetCopyInfosReply();

  GetGuildWetCopyInfosReply(const GetGuildWetCopyInfosReply& from);

  inline GetGuildWetCopyInfosReply& operator=(const GetGuildWetCopyInfosReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetGuildWetCopyInfosReply& default_instance();

  void Swap(GetGuildWetCopyInfosReply* other);

  // implements Message ----------------------------------------------

  GetGuildWetCopyInfosReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetGuildWetCopyInfosReply& from);
  void MergeFrom(const GetGuildWetCopyInfosReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Packet.GuildWetCopyInfo wetcopys_ = 1;
  inline int wetcopys__size() const;
  inline void clear_wetcopys_();
  static const int kWetcopysFieldNumber = 1;
  inline const ::Packet::GuildWetCopyInfo& wetcopys_(int index) const;
  inline ::Packet::GuildWetCopyInfo* mutable_wetcopys_(int index);
  inline ::Packet::GuildWetCopyInfo* add_wetcopys_();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::GuildWetCopyInfo >&
      wetcopys_() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::GuildWetCopyInfo >*
      mutable_wetcopys_();

  // required int32 times = 2;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 2;
  inline ::google::protobuf::int32 times() const;
  inline void set_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.GetGuildWetCopyInfosReply)
 private:
  inline void set_has_times();
  inline void clear_has_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::GuildWetCopyInfo > wetcopys__;
  ::google::protobuf::int32 times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GetGuildWetCopyInfosReply* default_instance_;
};
// -------------------------------------------------------------------

class GuildWetCopyInfoUpdate : public ::google::protobuf::Message {
 public:
  GuildWetCopyInfoUpdate();
  virtual ~GuildWetCopyInfoUpdate();

  GuildWetCopyInfoUpdate(const GuildWetCopyInfoUpdate& from);

  inline GuildWetCopyInfoUpdate& operator=(const GuildWetCopyInfoUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildWetCopyInfoUpdate& default_instance();

  void Swap(GuildWetCopyInfoUpdate* other);

  // implements Message ----------------------------------------------

  GuildWetCopyInfoUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildWetCopyInfoUpdate& from);
  void MergeFrom(const GuildWetCopyInfoUpdate& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Packet.GuildWetCopyInfo wetcopy = 1;
  inline bool has_wetcopy() const;
  inline void clear_wetcopy();
  static const int kWetcopyFieldNumber = 1;
  inline const ::Packet::GuildWetCopyInfo& wetcopy() const;
  inline ::Packet::GuildWetCopyInfo* mutable_wetcopy();
  inline ::Packet::GuildWetCopyInfo* release_wetcopy();
  inline void set_allocated_wetcopy(::Packet::GuildWetCopyInfo* wetcopy);

  // @@protoc_insertion_point(class_scope:Packet.GuildWetCopyInfoUpdate)
 private:
  inline void set_has_wetcopy();
  inline void clear_has_wetcopy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Packet::GuildWetCopyInfo* wetcopy_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildWetCopyInfoUpdate* default_instance_;
};
// -------------------------------------------------------------------

class OpenGuildWetCopy : public ::google::protobuf::Message {
 public:
  OpenGuildWetCopy();
  virtual ~OpenGuildWetCopy();

  OpenGuildWetCopy(const OpenGuildWetCopy& from);

  inline OpenGuildWetCopy& operator=(const OpenGuildWetCopy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenGuildWetCopy& default_instance();

  void Swap(OpenGuildWetCopy* other);

  // implements Message ----------------------------------------------

  OpenGuildWetCopy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpenGuildWetCopy& from);
  void MergeFrom(const OpenGuildWetCopy& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 copyid = 1;
  inline bool has_copyid() const;
  inline void clear_copyid();
  static const int kCopyidFieldNumber = 1;
  inline ::google::protobuf::int32 copyid() const;
  inline void set_copyid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.OpenGuildWetCopy)
 private:
  inline void set_has_copyid();
  inline void clear_has_copyid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 copyid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static OpenGuildWetCopy* default_instance_;
};
// -------------------------------------------------------------------

class ResetGuildWetCopy : public ::google::protobuf::Message {
 public:
  ResetGuildWetCopy();
  virtual ~ResetGuildWetCopy();

  ResetGuildWetCopy(const ResetGuildWetCopy& from);

  inline ResetGuildWetCopy& operator=(const ResetGuildWetCopy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResetGuildWetCopy& default_instance();

  void Swap(ResetGuildWetCopy* other);

  // implements Message ----------------------------------------------

  ResetGuildWetCopy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResetGuildWetCopy& from);
  void MergeFrom(const ResetGuildWetCopy& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 copyid = 1;
  inline bool has_copyid() const;
  inline void clear_copyid();
  static const int kCopyidFieldNumber = 1;
  inline ::google::protobuf::int32 copyid() const;
  inline void set_copyid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.ResetGuildWetCopy)
 private:
  inline void set_has_copyid();
  inline void clear_has_copyid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 copyid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static ResetGuildWetCopy* default_instance_;
};
// -------------------------------------------------------------------

class GuildBattleInfo : public ::google::protobuf::Message {
 public:
  GuildBattleInfo();
  virtual ~GuildBattleInfo();

  GuildBattleInfo(const GuildBattleInfo& from);

  inline GuildBattleInfo& operator=(const GuildBattleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildBattleInfo& default_instance();

  void Swap(GuildBattleInfo* other);

  // implements Message ----------------------------------------------

  GuildBattleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildBattleInfo& from);
  void MergeFrom(const GuildBattleInfo& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 a_guildid = 1;
  inline bool has_a_guildid() const;
  inline void clear_a_guildid();
  static const int kAGuildidFieldNumber = 1;
  inline ::google::protobuf::uint64 a_guildid() const;
  inline void set_a_guildid(::google::protobuf::uint64 value);

  // required fixed64 b_guildid = 2;
  inline bool has_b_guildid() const;
  inline void clear_b_guildid();
  static const int kBGuildidFieldNumber = 2;
  inline ::google::protobuf::uint64 b_guildid() const;
  inline void set_b_guildid(::google::protobuf::uint64 value);

  // required string a_guildname = 3;
  inline bool has_a_guildname() const;
  inline void clear_a_guildname();
  static const int kAGuildnameFieldNumber = 3;
  inline const ::std::string& a_guildname() const;
  inline void set_a_guildname(const ::std::string& value);
  inline void set_a_guildname(const char* value);
  inline void set_a_guildname(const char* value, size_t size);
  inline ::std::string* mutable_a_guildname();
  inline ::std::string* release_a_guildname();
  inline void set_allocated_a_guildname(::std::string* a_guildname);

  // required string b_guildname = 4;
  inline bool has_b_guildname() const;
  inline void clear_b_guildname();
  static const int kBGuildnameFieldNumber = 4;
  inline const ::std::string& b_guildname() const;
  inline void set_b_guildname(const ::std::string& value);
  inline void set_b_guildname(const char* value);
  inline void set_b_guildname(const char* value, size_t size);
  inline ::std::string* mutable_b_guildname();
  inline ::std::string* release_b_guildname();
  inline void set_allocated_b_guildname(::std::string* b_guildname);

  // required int32 raidid = 5;
  inline bool has_raidid() const;
  inline void clear_raidid();
  static const int kRaididFieldNumber = 5;
  inline ::google::protobuf::int32 raidid() const;
  inline void set_raidid(::google::protobuf::int32 value);

  // required fixed64 win_guildid = 6;
  inline bool has_win_guildid() const;
  inline void clear_win_guildid();
  static const int kWinGuildidFieldNumber = 6;
  inline ::google::protobuf::uint64 win_guildid() const;
  inline void set_win_guildid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Packet.GuildBattleInfo)
 private:
  inline void set_has_a_guildid();
  inline void clear_has_a_guildid();
  inline void set_has_b_guildid();
  inline void clear_has_b_guildid();
  inline void set_has_a_guildname();
  inline void clear_has_a_guildname();
  inline void set_has_b_guildname();
  inline void clear_has_b_guildname();
  inline void set_has_raidid();
  inline void clear_has_raidid();
  inline void set_has_win_guildid();
  inline void clear_has_win_guildid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 a_guildid_;
  ::google::protobuf::uint64 b_guildid_;
  ::std::string* a_guildname_;
  ::std::string* b_guildname_;
  ::google::protobuf::uint64 win_guildid_;
  ::google::protobuf::int32 raidid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildBattleInfo* default_instance_;
};
// -------------------------------------------------------------------

class GuildBattleInfoList : public ::google::protobuf::Message {
 public:
  GuildBattleInfoList();
  virtual ~GuildBattleInfoList();

  GuildBattleInfoList(const GuildBattleInfoList& from);

  inline GuildBattleInfoList& operator=(const GuildBattleInfoList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildBattleInfoList& default_instance();

  void Swap(GuildBattleInfoList* other);

  // implements Message ----------------------------------------------

  GuildBattleInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildBattleInfoList& from);
  void MergeFrom(const GuildBattleInfoList& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Packet.GuildBattleInfo gblist = 1;
  inline int gblist_size() const;
  inline void clear_gblist();
  static const int kGblistFieldNumber = 1;
  inline const ::Packet::GuildBattleInfo& gblist(int index) const;
  inline ::Packet::GuildBattleInfo* mutable_gblist(int index);
  inline ::Packet::GuildBattleInfo* add_gblist();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::GuildBattleInfo >&
      gblist() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::GuildBattleInfo >*
      mutable_gblist();

  // required int32 battletimes = 2;
  inline bool has_battletimes() const;
  inline void clear_battletimes();
  static const int kBattletimesFieldNumber = 2;
  inline ::google::protobuf::int32 battletimes() const;
  inline void set_battletimes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.GuildBattleInfoList)
 private:
  inline void set_has_battletimes();
  inline void clear_has_battletimes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::GuildBattleInfo > gblist_;
  ::google::protobuf::int32 battletimes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildBattleInfoList* default_instance_;
};
// -------------------------------------------------------------------

class SelfGuildBattleInfo : public ::google::protobuf::Message {
 public:
  SelfGuildBattleInfo();
  virtual ~SelfGuildBattleInfo();

  SelfGuildBattleInfo(const SelfGuildBattleInfo& from);

  inline SelfGuildBattleInfo& operator=(const SelfGuildBattleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SelfGuildBattleInfo& default_instance();

  void Swap(SelfGuildBattleInfo* other);

  // implements Message ----------------------------------------------

  SelfGuildBattleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SelfGuildBattleInfo& from);
  void MergeFrom(const SelfGuildBattleInfo& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Packet.GuildBattleInfo gbinfo = 1;
  inline bool has_gbinfo() const;
  inline void clear_gbinfo();
  static const int kGbinfoFieldNumber = 1;
  inline const ::Packet::GuildBattleInfo& gbinfo() const;
  inline ::Packet::GuildBattleInfo* mutable_gbinfo();
  inline ::Packet::GuildBattleInfo* release_gbinfo();
  inline void set_allocated_gbinfo(::Packet::GuildBattleInfo* gbinfo);

  // @@protoc_insertion_point(class_scope:Packet.SelfGuildBattleInfo)
 private:
  inline void set_has_gbinfo();
  inline void clear_has_gbinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Packet::GuildBattleInfo* gbinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static SelfGuildBattleInfo* default_instance_;
};
// -------------------------------------------------------------------

class GuildBattleListReq : public ::google::protobuf::Message {
 public:
  GuildBattleListReq();
  virtual ~GuildBattleListReq();

  GuildBattleListReq(const GuildBattleListReq& from);

  inline GuildBattleListReq& operator=(const GuildBattleListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildBattleListReq& default_instance();

  void Swap(GuildBattleListReq* other);

  // implements Message ----------------------------------------------

  GuildBattleListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildBattleListReq& from);
  void MergeFrom(const GuildBattleListReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Packet.GuildBattleListReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildBattleListReq* default_instance_;
};
// -------------------------------------------------------------------

class GuildBattleWeekRankInfo : public ::google::protobuf::Message {
 public:
  GuildBattleWeekRankInfo();
  virtual ~GuildBattleWeekRankInfo();

  GuildBattleWeekRankInfo(const GuildBattleWeekRankInfo& from);

  inline GuildBattleWeekRankInfo& operator=(const GuildBattleWeekRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildBattleWeekRankInfo& default_instance();

  void Swap(GuildBattleWeekRankInfo* other);

  // implements Message ----------------------------------------------

  GuildBattleWeekRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildBattleWeekRankInfo& from);
  void MergeFrom(const GuildBattleWeekRankInfo& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guildid = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildidFieldNumber = 1;
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // required string guildname = 2;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildnameFieldNumber = 2;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // required int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required int32 score = 4;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.GuildBattleWeekRankInfo)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guildid_;
  ::std::string* guildname_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildBattleWeekRankInfo* default_instance_;
};
// -------------------------------------------------------------------

class GuildBattleWeekRankReq : public ::google::protobuf::Message {
 public:
  GuildBattleWeekRankReq();
  virtual ~GuildBattleWeekRankReq();

  GuildBattleWeekRankReq(const GuildBattleWeekRankReq& from);

  inline GuildBattleWeekRankReq& operator=(const GuildBattleWeekRankReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildBattleWeekRankReq& default_instance();

  void Swap(GuildBattleWeekRankReq* other);

  // implements Message ----------------------------------------------

  GuildBattleWeekRankReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildBattleWeekRankReq& from);
  void MergeFrom(const GuildBattleWeekRankReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Packet.GuildBattleWeekRankReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildBattleWeekRankReq* default_instance_;
};
// -------------------------------------------------------------------

class GuildBattleWeekRankReply : public ::google::protobuf::Message {
 public:
  GuildBattleWeekRankReply();
  virtual ~GuildBattleWeekRankReply();

  GuildBattleWeekRankReply(const GuildBattleWeekRankReply& from);

  inline GuildBattleWeekRankReply& operator=(const GuildBattleWeekRankReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildBattleWeekRankReply& default_instance();

  void Swap(GuildBattleWeekRankReply* other);

  // implements Message ----------------------------------------------

  GuildBattleWeekRankReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildBattleWeekRankReply& from);
  void MergeFrom(const GuildBattleWeekRankReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Packet.GuildBattleWeekRankInfo list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::Packet::GuildBattleWeekRankInfo& list(int index) const;
  inline ::Packet::GuildBattleWeekRankInfo* mutable_list(int index);
  inline ::Packet::GuildBattleWeekRankInfo* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::GuildBattleWeekRankInfo >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::GuildBattleWeekRankInfo >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:Packet.GuildBattleWeekRankReply)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::GuildBattleWeekRankInfo > list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildBattleWeekRankReply* default_instance_;
};
// -------------------------------------------------------------------

class GuildBattleAllRankInfo : public ::google::protobuf::Message {
 public:
  GuildBattleAllRankInfo();
  virtual ~GuildBattleAllRankInfo();

  GuildBattleAllRankInfo(const GuildBattleAllRankInfo& from);

  inline GuildBattleAllRankInfo& operator=(const GuildBattleAllRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildBattleAllRankInfo& default_instance();

  void Swap(GuildBattleAllRankInfo* other);

  // implements Message ----------------------------------------------

  GuildBattleAllRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildBattleAllRankInfo& from);
  void MergeFrom(const GuildBattleAllRankInfo& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guildid = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildidFieldNumber = 1;
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // required string guildname = 2;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildnameFieldNumber = 2;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // required int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required int32 battlewintimes = 4;
  inline bool has_battlewintimes() const;
  inline void clear_battlewintimes();
  static const int kBattlewintimesFieldNumber = 4;
  inline ::google::protobuf::int32 battlewintimes() const;
  inline void set_battlewintimes(::google::protobuf::int32 value);

  // required int32 battletimes = 5;
  inline bool has_battletimes() const;
  inline void clear_battletimes();
  static const int kBattletimesFieldNumber = 5;
  inline ::google::protobuf::int32 battletimes() const;
  inline void set_battletimes(::google::protobuf::int32 value);

  // required float winrate = 6;
  inline bool has_winrate() const;
  inline void clear_winrate();
  static const int kWinrateFieldNumber = 6;
  inline float winrate() const;
  inline void set_winrate(float value);

  // @@protoc_insertion_point(class_scope:Packet.GuildBattleAllRankInfo)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_battlewintimes();
  inline void clear_has_battlewintimes();
  inline void set_has_battletimes();
  inline void clear_has_battletimes();
  inline void set_has_winrate();
  inline void clear_has_winrate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guildid_;
  ::std::string* guildname_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 battlewintimes_;
  ::google::protobuf::int32 battletimes_;
  float winrate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildBattleAllRankInfo* default_instance_;
};
// -------------------------------------------------------------------

class GuildBattleAllRankReq : public ::google::protobuf::Message {
 public:
  GuildBattleAllRankReq();
  virtual ~GuildBattleAllRankReq();

  GuildBattleAllRankReq(const GuildBattleAllRankReq& from);

  inline GuildBattleAllRankReq& operator=(const GuildBattleAllRankReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildBattleAllRankReq& default_instance();

  void Swap(GuildBattleAllRankReq* other);

  // implements Message ----------------------------------------------

  GuildBattleAllRankReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildBattleAllRankReq& from);
  void MergeFrom(const GuildBattleAllRankReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Packet.GuildBattleAllRankReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildBattleAllRankReq* default_instance_;
};
// -------------------------------------------------------------------

class GuildBattleAllRankReply : public ::google::protobuf::Message {
 public:
  GuildBattleAllRankReply();
  virtual ~GuildBattleAllRankReply();

  GuildBattleAllRankReply(const GuildBattleAllRankReply& from);

  inline GuildBattleAllRankReply& operator=(const GuildBattleAllRankReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildBattleAllRankReply& default_instance();

  void Swap(GuildBattleAllRankReply* other);

  // implements Message ----------------------------------------------

  GuildBattleAllRankReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildBattleAllRankReply& from);
  void MergeFrom(const GuildBattleAllRankReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Packet.GuildBattleAllRankInfo list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::Packet::GuildBattleAllRankInfo& list(int index) const;
  inline ::Packet::GuildBattleAllRankInfo* mutable_list(int index);
  inline ::Packet::GuildBattleAllRankInfo* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::GuildBattleAllRankInfo >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::GuildBattleAllRankInfo >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:Packet.GuildBattleAllRankReply)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::GuildBattleAllRankInfo > list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildBattleAllRankReply* default_instance_;
};
// -------------------------------------------------------------------

class GuildBattleResultReply : public ::google::protobuf::Message {
 public:
  GuildBattleResultReply();
  virtual ~GuildBattleResultReply();

  GuildBattleResultReply(const GuildBattleResultReply& from);

  inline GuildBattleResultReply& operator=(const GuildBattleResultReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildBattleResultReply& default_instance();

  void Swap(GuildBattleResultReply* other);

  // implements Message ----------------------------------------------

  GuildBattleResultReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildBattleResultReply& from);
  void MergeFrom(const GuildBattleResultReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool win = 1;
  inline bool has_win() const;
  inline void clear_win();
  static const int kWinFieldNumber = 1;
  inline bool win() const;
  inline void set_win(bool value);

  // required int32 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.GuildBattleResultReply)
 private:
  inline void set_has_win();
  inline void clear_has_win();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool win_;
  ::google::protobuf::int32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildBattleResultReply* default_instance_;
};
// -------------------------------------------------------------------

class GuildBattlePlayerInfo : public ::google::protobuf::Message {
 public:
  GuildBattlePlayerInfo();
  virtual ~GuildBattlePlayerInfo();

  GuildBattlePlayerInfo(const GuildBattlePlayerInfo& from);

  inline GuildBattlePlayerInfo& operator=(const GuildBattlePlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildBattlePlayerInfo& default_instance();

  void Swap(GuildBattlePlayerInfo* other);

  // implements Message ----------------------------------------------

  GuildBattlePlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildBattlePlayerInfo& from);
  void MergeFrom(const GuildBattlePlayerInfo& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint64 player_id() const;
  inline void set_player_id(::google::protobuf::uint64 value);

  // required string player_name = 2;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // required fixed64 guild_id = 3;
  inline bool has_guild_id() const;
  inline void clear_guild_id();
  static const int kGuildIdFieldNumber = 3;
  inline ::google::protobuf::uint64 guild_id() const;
  inline void set_guild_id(::google::protobuf::uint64 value);

  // required int32 score = 4;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // required bool fighting = 5;
  inline bool has_fighting() const;
  inline void clear_fighting();
  static const int kFightingFieldNumber = 5;
  inline bool fighting() const;
  inline void set_fighting(bool value);

  // required int32 streakwin = 6;
  inline bool has_streakwin() const;
  inline void clear_streakwin();
  static const int kStreakwinFieldNumber = 6;
  inline ::google::protobuf::int32 streakwin() const;
  inline void set_streakwin(::google::protobuf::int32 value);

  // required int32 mobility = 7;
  inline bool has_mobility() const;
  inline void clear_mobility();
  static const int kMobilityFieldNumber = 7;
  inline ::google::protobuf::int32 mobility() const;
  inline void set_mobility(::google::protobuf::int32 value);

  // required int32 protectcd = 8;
  inline bool has_protectcd() const;
  inline void clear_protectcd();
  static const int kProtectcdFieldNumber = 8;
  inline ::google::protobuf::int32 protectcd() const;
  inline void set_protectcd(::google::protobuf::int32 value);

  // required int32 battlereward = 9;
  inline bool has_battlereward() const;
  inline void clear_battlereward();
  static const int kBattlerewardFieldNumber = 9;
  inline ::google::protobuf::int32 battlereward() const;
  inline void set_battlereward(::google::protobuf::int32 value);

  // required int32 init_actorid = 10;
  inline bool has_init_actorid() const;
  inline void clear_init_actorid();
  static const int kInitActoridFieldNumber = 10;
  inline ::google::protobuf::int32 init_actorid() const;
  inline void set_init_actorid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.GuildBattlePlayerInfo)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_guild_id();
  inline void clear_has_guild_id();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_fighting();
  inline void clear_has_fighting();
  inline void set_has_streakwin();
  inline void clear_has_streakwin();
  inline void set_has_mobility();
  inline void clear_has_mobility();
  inline void set_has_protectcd();
  inline void clear_has_protectcd();
  inline void set_has_battlereward();
  inline void clear_has_battlereward();
  inline void set_has_init_actorid();
  inline void clear_has_init_actorid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 player_id_;
  ::std::string* player_name_;
  ::google::protobuf::uint64 guild_id_;
  ::google::protobuf::int32 score_;
  bool fighting_;
  ::google::protobuf::int32 streakwin_;
  ::google::protobuf::int32 mobility_;
  ::google::protobuf::int32 protectcd_;
  ::google::protobuf::int32 battlereward_;
  ::google::protobuf::int32 init_actorid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildBattlePlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class GuildBattlePlayerListInfo : public ::google::protobuf::Message {
 public:
  GuildBattlePlayerListInfo();
  virtual ~GuildBattlePlayerListInfo();

  GuildBattlePlayerListInfo(const GuildBattlePlayerListInfo& from);

  inline GuildBattlePlayerListInfo& operator=(const GuildBattlePlayerListInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildBattlePlayerListInfo& default_instance();

  void Swap(GuildBattlePlayerListInfo* other);

  // implements Message ----------------------------------------------

  GuildBattlePlayerListInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildBattlePlayerListInfo& from);
  void MergeFrom(const GuildBattlePlayerListInfo& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Packet.GuildBattlePlayerInfo playerlist = 1;
  inline int playerlist_size() const;
  inline void clear_playerlist();
  static const int kPlayerlistFieldNumber = 1;
  inline const ::Packet::GuildBattlePlayerInfo& playerlist(int index) const;
  inline ::Packet::GuildBattlePlayerInfo* mutable_playerlist(int index);
  inline ::Packet::GuildBattlePlayerInfo* add_playerlist();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::GuildBattlePlayerInfo >&
      playerlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::GuildBattlePlayerInfo >*
      mutable_playerlist();

  // @@protoc_insertion_point(class_scope:Packet.GuildBattlePlayerListInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::GuildBattlePlayerInfo > playerlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildBattlePlayerListInfo* default_instance_;
};
// -------------------------------------------------------------------

class UpdateGuildBattlePlayerInfo : public ::google::protobuf::Message {
 public:
  UpdateGuildBattlePlayerInfo();
  virtual ~UpdateGuildBattlePlayerInfo();

  UpdateGuildBattlePlayerInfo(const UpdateGuildBattlePlayerInfo& from);

  inline UpdateGuildBattlePlayerInfo& operator=(const UpdateGuildBattlePlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateGuildBattlePlayerInfo& default_instance();

  void Swap(UpdateGuildBattlePlayerInfo* other);

  // implements Message ----------------------------------------------

  UpdateGuildBattlePlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateGuildBattlePlayerInfo& from);
  void MergeFrom(const UpdateGuildBattlePlayerInfo& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Packet.GuildBattlePlayerInfo playerinfo = 1;
  inline bool has_playerinfo() const;
  inline void clear_playerinfo();
  static const int kPlayerinfoFieldNumber = 1;
  inline const ::Packet::GuildBattlePlayerInfo& playerinfo() const;
  inline ::Packet::GuildBattlePlayerInfo* mutable_playerinfo();
  inline ::Packet::GuildBattlePlayerInfo* release_playerinfo();
  inline void set_allocated_playerinfo(::Packet::GuildBattlePlayerInfo* playerinfo);

  // @@protoc_insertion_point(class_scope:Packet.UpdateGuildBattlePlayerInfo)
 private:
  inline void set_has_playerinfo();
  inline void clear_has_playerinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Packet::GuildBattlePlayerInfo* playerinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static UpdateGuildBattlePlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class UpdateGuildBattleStage : public ::google::protobuf::Message {
 public:
  UpdateGuildBattleStage();
  virtual ~UpdateGuildBattleStage();

  UpdateGuildBattleStage(const UpdateGuildBattleStage& from);

  inline UpdateGuildBattleStage& operator=(const UpdateGuildBattleStage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateGuildBattleStage& default_instance();

  void Swap(UpdateGuildBattleStage* other);

  // implements Message ----------------------------------------------

  UpdateGuildBattleStage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateGuildBattleStage& from);
  void MergeFrom(const UpdateGuildBattleStage& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Packet.GuildBattle_Stage stage = 1;
  inline bool has_stage() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 1;
  inline ::Packet::GuildBattle_Stage stage() const;
  inline void set_stage(::Packet::GuildBattle_Stage value);

  // required bool dialog = 2;
  inline bool has_dialog() const;
  inline void clear_dialog();
  static const int kDialogFieldNumber = 2;
  inline bool dialog() const;
  inline void set_dialog(bool value);

  // @@protoc_insertion_point(class_scope:Packet.UpdateGuildBattleStage)
 private:
  inline void set_has_stage();
  inline void clear_has_stage();
  inline void set_has_dialog();
  inline void clear_has_dialog();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int stage_;
  bool dialog_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static UpdateGuildBattleStage* default_instance_;
};
// -------------------------------------------------------------------

class GuildBattleFightTarget : public ::google::protobuf::Message {
 public:
  GuildBattleFightTarget();
  virtual ~GuildBattleFightTarget();

  GuildBattleFightTarget(const GuildBattleFightTarget& from);

  inline GuildBattleFightTarget& operator=(const GuildBattleFightTarget& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildBattleFightTarget& default_instance();

  void Swap(GuildBattleFightTarget* other);

  // implements Message ----------------------------------------------

  GuildBattleFightTarget* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildBattleFightTarget& from);
  void MergeFrom(const GuildBattleFightTarget& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 target_guid = 1;
  inline bool has_target_guid() const;
  inline void clear_target_guid();
  static const int kTargetGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 target_guid() const;
  inline void set_target_guid(::google::protobuf::uint64 value);

  // required int32 battle_group_id = 2;
  inline bool has_battle_group_id() const;
  inline void clear_battle_group_id();
  static const int kBattleGroupIdFieldNumber = 2;
  inline ::google::protobuf::int32 battle_group_id() const;
  inline void set_battle_group_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.GuildBattleFightTarget)
 private:
  inline void set_has_target_guid();
  inline void clear_has_target_guid();
  inline void set_has_battle_group_id();
  inline void clear_has_battle_group_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 target_guid_;
  ::google::protobuf::int32 battle_group_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildBattleFightTarget* default_instance_;
};
// -------------------------------------------------------------------

class GuildWarehouse : public ::google::protobuf::Message {
 public:
  GuildWarehouse();
  virtual ~GuildWarehouse();

  GuildWarehouse(const GuildWarehouse& from);

  inline GuildWarehouse& operator=(const GuildWarehouse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildWarehouse& default_instance();

  void Swap(GuildWarehouse* other);

  // implements Message ----------------------------------------------

  GuildWarehouse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildWarehouse& from);
  void MergeFrom(const GuildWarehouse& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guildid = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildidFieldNumber = 1;
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // required int32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required int32 itemid = 3;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 3;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // required fixed64 receiveplayerid = 4;
  inline bool has_receiveplayerid() const;
  inline void clear_receiveplayerid();
  static const int kReceiveplayeridFieldNumber = 4;
  inline ::google::protobuf::uint64 receiveplayerid() const;
  inline void set_receiveplayerid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Packet.GuildWarehouse)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_receiveplayerid();
  inline void clear_has_receiveplayerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guildid_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::uint64 receiveplayerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildWarehouse* default_instance_;
};
// -------------------------------------------------------------------

class GuildWarehouseReq : public ::google::protobuf::Message {
 public:
  GuildWarehouseReq();
  virtual ~GuildWarehouseReq();

  GuildWarehouseReq(const GuildWarehouseReq& from);

  inline GuildWarehouseReq& operator=(const GuildWarehouseReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildWarehouseReq& default_instance();

  void Swap(GuildWarehouseReq* other);

  // implements Message ----------------------------------------------

  GuildWarehouseReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildWarehouseReq& from);
  void MergeFrom(const GuildWarehouseReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Packet.GuildWarehouseReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildWarehouseReq* default_instance_;
};
// -------------------------------------------------------------------

class GuildWarehouseReply : public ::google::protobuf::Message {
 public:
  GuildWarehouseReply();
  virtual ~GuildWarehouseReply();

  GuildWarehouseReply(const GuildWarehouseReply& from);

  inline GuildWarehouseReply& operator=(const GuildWarehouseReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildWarehouseReply& default_instance();

  void Swap(GuildWarehouseReply* other);

  // implements Message ----------------------------------------------

  GuildWarehouseReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildWarehouseReply& from);
  void MergeFrom(const GuildWarehouseReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Packet.GuildWarehouse whlist = 1;
  inline int whlist_size() const;
  inline void clear_whlist();
  static const int kWhlistFieldNumber = 1;
  inline const ::Packet::GuildWarehouse& whlist(int index) const;
  inline ::Packet::GuildWarehouse* mutable_whlist(int index);
  inline ::Packet::GuildWarehouse* add_whlist();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::GuildWarehouse >&
      whlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::GuildWarehouse >*
      mutable_whlist();

  // @@protoc_insertion_point(class_scope:Packet.GuildWarehouseReply)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::GuildWarehouse > whlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildWarehouseReply* default_instance_;
};
// -------------------------------------------------------------------

class GuildWarehouseReceiveReq : public ::google::protobuf::Message {
 public:
  GuildWarehouseReceiveReq();
  virtual ~GuildWarehouseReceiveReq();

  GuildWarehouseReceiveReq(const GuildWarehouseReceiveReq& from);

  inline GuildWarehouseReceiveReq& operator=(const GuildWarehouseReceiveReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildWarehouseReceiveReq& default_instance();

  void Swap(GuildWarehouseReceiveReq* other);

  // implements Message ----------------------------------------------

  GuildWarehouseReceiveReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildWarehouseReceiveReq& from);
  void MergeFrom(const GuildWarehouseReceiveReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.GuildWarehouseReceiveReq)
 private:
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildWarehouseReceiveReq* default_instance_;
};
// -------------------------------------------------------------------

class GuildWarehouseSetReceivePlayerReq : public ::google::protobuf::Message {
 public:
  GuildWarehouseSetReceivePlayerReq();
  virtual ~GuildWarehouseSetReceivePlayerReq();

  GuildWarehouseSetReceivePlayerReq(const GuildWarehouseSetReceivePlayerReq& from);

  inline GuildWarehouseSetReceivePlayerReq& operator=(const GuildWarehouseSetReceivePlayerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildWarehouseSetReceivePlayerReq& default_instance();

  void Swap(GuildWarehouseSetReceivePlayerReq* other);

  // implements Message ----------------------------------------------

  GuildWarehouseSetReceivePlayerReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildWarehouseSetReceivePlayerReq& from);
  void MergeFrom(const GuildWarehouseSetReceivePlayerReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required fixed64 receiveplayerid = 2;
  inline bool has_receiveplayerid() const;
  inline void clear_receiveplayerid();
  static const int kReceiveplayeridFieldNumber = 2;
  inline ::google::protobuf::uint64 receiveplayerid() const;
  inline void set_receiveplayerid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Packet.GuildWarehouseSetReceivePlayerReq)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_receiveplayerid();
  inline void clear_has_receiveplayerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 receiveplayerid_;
  ::google::protobuf::int32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildWarehouseSetReceivePlayerReq* default_instance_;
};
// -------------------------------------------------------------------

class GuildWarehouseUpdate : public ::google::protobuf::Message {
 public:
  GuildWarehouseUpdate();
  virtual ~GuildWarehouseUpdate();

  GuildWarehouseUpdate(const GuildWarehouseUpdate& from);

  inline GuildWarehouseUpdate& operator=(const GuildWarehouseUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildWarehouseUpdate& default_instance();

  void Swap(GuildWarehouseUpdate* other);

  // implements Message ----------------------------------------------

  GuildWarehouseUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildWarehouseUpdate& from);
  void MergeFrom(const GuildWarehouseUpdate& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Packet.GuildWarehouse item = 1;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 1;
  inline const ::Packet::GuildWarehouse& item() const;
  inline ::Packet::GuildWarehouse* mutable_item();
  inline ::Packet::GuildWarehouse* release_item();
  inline void set_allocated_item(::Packet::GuildWarehouse* item);

  // @@protoc_insertion_point(class_scope:Packet.GuildWarehouseUpdate)
 private:
  inline void set_has_item();
  inline void clear_has_item();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Packet::GuildWarehouse* item_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildWarehouseUpdate* default_instance_;
};
// -------------------------------------------------------------------

class GuildWarehouseRecord : public ::google::protobuf::Message {
 public:
  GuildWarehouseRecord();
  virtual ~GuildWarehouseRecord();

  GuildWarehouseRecord(const GuildWarehouseRecord& from);

  inline GuildWarehouseRecord& operator=(const GuildWarehouseRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildWarehouseRecord& default_instance();

  void Swap(GuildWarehouseRecord* other);

  // implements Message ----------------------------------------------

  GuildWarehouseRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildWarehouseRecord& from);
  void MergeFrom(const GuildWarehouseRecord& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guildid = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildidFieldNumber = 1;
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // required fixed64 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // required uint32 date = 3;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 3;
  inline ::google::protobuf::uint32 date() const;
  inline void set_date(::google::protobuf::uint32 value);

  // required string player_name = 4;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 4;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // required int32 itemid = 5;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 5;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.GuildWarehouseRecord)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_itemid();
  inline void clear_has_itemid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guildid_;
  ::google::protobuf::uint64 id_;
  ::std::string* player_name_;
  ::google::protobuf::uint32 date_;
  ::google::protobuf::int32 itemid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildWarehouseRecord* default_instance_;
};
// -------------------------------------------------------------------

class GuildWarehouseRecordReq : public ::google::protobuf::Message {
 public:
  GuildWarehouseRecordReq();
  virtual ~GuildWarehouseRecordReq();

  GuildWarehouseRecordReq(const GuildWarehouseRecordReq& from);

  inline GuildWarehouseRecordReq& operator=(const GuildWarehouseRecordReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildWarehouseRecordReq& default_instance();

  void Swap(GuildWarehouseRecordReq* other);

  // implements Message ----------------------------------------------

  GuildWarehouseRecordReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildWarehouseRecordReq& from);
  void MergeFrom(const GuildWarehouseRecordReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Packet.GuildWarehouseRecordReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildWarehouseRecordReq* default_instance_;
};
// -------------------------------------------------------------------

class GuildWarehouseRecordReply : public ::google::protobuf::Message {
 public:
  GuildWarehouseRecordReply();
  virtual ~GuildWarehouseRecordReply();

  GuildWarehouseRecordReply(const GuildWarehouseRecordReply& from);

  inline GuildWarehouseRecordReply& operator=(const GuildWarehouseRecordReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildWarehouseRecordReply& default_instance();

  void Swap(GuildWarehouseRecordReply* other);

  // implements Message ----------------------------------------------

  GuildWarehouseRecordReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildWarehouseRecordReply& from);
  void MergeFrom(const GuildWarehouseRecordReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Packet.GuildWarehouseRecord record = 1;
  inline int record_size() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 1;
  inline const ::Packet::GuildWarehouseRecord& record(int index) const;
  inline ::Packet::GuildWarehouseRecord* mutable_record(int index);
  inline ::Packet::GuildWarehouseRecord* add_record();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::GuildWarehouseRecord >&
      record() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::GuildWarehouseRecord >*
      mutable_record();

  // @@protoc_insertion_point(class_scope:Packet.GuildWarehouseRecordReply)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::GuildWarehouseRecord > record_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildWarehouseRecordReply* default_instance_;
};
// -------------------------------------------------------------------

class GuildSpoilItem : public ::google::protobuf::Message {
 public:
  GuildSpoilItem();
  virtual ~GuildSpoilItem();

  GuildSpoilItem(const GuildSpoilItem& from);

  inline GuildSpoilItem& operator=(const GuildSpoilItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildSpoilItem& default_instance();

  void Swap(GuildSpoilItem* other);

  // implements Message ----------------------------------------------

  GuildSpoilItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildSpoilItem& from);
  void MergeFrom(const GuildSpoilItem& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guildid = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildidFieldNumber = 1;
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // required int32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required int32 copyid = 3;
  inline bool has_copyid() const;
  inline void clear_copyid();
  static const int kCopyidFieldNumber = 3;
  inline ::google::protobuf::int32 copyid() const;
  inline void set_copyid(::google::protobuf::int32 value);

  // required int32 itemid = 4;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 4;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // required int32 timecd = 5;
  inline bool has_timecd() const;
  inline void clear_timecd();
  static const int kTimecdFieldNumber = 5;
  inline ::google::protobuf::int32 timecd() const;
  inline void set_timecd(::google::protobuf::int32 value);

  // repeated fixed64 playerid = 6;
  inline int playerid_size() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 6;
  inline ::google::protobuf::uint64 playerid(int index) const;
  inline void set_playerid(int index, ::google::protobuf::uint64 value);
  inline void add_playerid(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      playerid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_playerid();

  // @@protoc_insertion_point(class_scope:Packet.GuildSpoilItem)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_copyid();
  inline void clear_has_copyid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_timecd();
  inline void clear_has_timecd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guildid_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 copyid_;
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 timecd_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildSpoilItem* default_instance_;
};
// -------------------------------------------------------------------

class GuildRecord : public ::google::protobuf::Message {
 public:
  GuildRecord();
  virtual ~GuildRecord();

  GuildRecord(const GuildRecord& from);

  inline GuildRecord& operator=(const GuildRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRecord& default_instance();

  void Swap(GuildRecord* other);

  // implements Message ----------------------------------------------

  GuildRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRecord& from);
  void MergeFrom(const GuildRecord& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guildid = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildidFieldNumber = 1;
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // required int32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required string record = 3;
  inline bool has_record() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 3;
  inline const ::std::string& record() const;
  inline void set_record(const ::std::string& value);
  inline void set_record(const char* value);
  inline void set_record(const char* value, size_t size);
  inline ::std::string* mutable_record();
  inline ::std::string* release_record();
  inline void set_allocated_record(::std::string* record);

  // required uint32 date = 4;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 4;
  inline ::google::protobuf::uint32 date() const;
  inline void set_date(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Packet.GuildRecord)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_record();
  inline void clear_has_record();
  inline void set_has_date();
  inline void clear_has_date();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guildid_;
  ::std::string* record_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::uint32 date_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildRecord* default_instance_;
};
// -------------------------------------------------------------------

class GuildRecordReply : public ::google::protobuf::Message {
 public:
  GuildRecordReply();
  virtual ~GuildRecordReply();

  GuildRecordReply(const GuildRecordReply& from);

  inline GuildRecordReply& operator=(const GuildRecordReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRecordReply& default_instance();

  void Swap(GuildRecordReply* other);

  // implements Message ----------------------------------------------

  GuildRecordReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRecordReply& from);
  void MergeFrom(const GuildRecordReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Packet.GuildRecord records = 1;
  inline int records_size() const;
  inline void clear_records();
  static const int kRecordsFieldNumber = 1;
  inline const ::Packet::GuildRecord& records(int index) const;
  inline ::Packet::GuildRecord* mutable_records(int index);
  inline ::Packet::GuildRecord* add_records();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::GuildRecord >&
      records() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::GuildRecord >*
      mutable_records();

  // @@protoc_insertion_point(class_scope:Packet.GuildRecordReply)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::GuildRecord > records_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildRecordReply* default_instance_;
};
// -------------------------------------------------------------------

class GuildUserName : public ::google::protobuf::Message {
 public:
  GuildUserName();
  virtual ~GuildUserName();

  GuildUserName(const GuildUserName& from);

  inline GuildUserName& operator=(const GuildUserName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildUserName& default_instance();

  void Swap(GuildUserName* other);

  // implements Message ----------------------------------------------

  GuildUserName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildUserName& from);
  void MergeFrom(const GuildUserName& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint64 playerid() const;
  inline void set_playerid(::google::protobuf::uint64 value);

  // required string playername = 2;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayernameFieldNumber = 2;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // required int32 hair = 3;
  inline bool has_hair() const;
  inline void clear_hair();
  static const int kHairFieldNumber = 3;
  inline ::google::protobuf::int32 hair() const;
  inline void set_hair(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.GuildUserName)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_hair();
  inline void clear_has_hair();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 playerid_;
  ::std::string* playername_;
  ::google::protobuf::int32 hair_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildUserName* default_instance_;
};
// -------------------------------------------------------------------

class GuildSpoilItemClient : public ::google::protobuf::Message {
 public:
  GuildSpoilItemClient();
  virtual ~GuildSpoilItemClient();

  GuildSpoilItemClient(const GuildSpoilItemClient& from);

  inline GuildSpoilItemClient& operator=(const GuildSpoilItemClient& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildSpoilItemClient& default_instance();

  void Swap(GuildSpoilItemClient* other);

  // implements Message ----------------------------------------------

  GuildSpoilItemClient* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildSpoilItemClient& from);
  void MergeFrom(const GuildSpoilItemClient& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required int32 copyid = 2;
  inline bool has_copyid() const;
  inline void clear_copyid();
  static const int kCopyidFieldNumber = 2;
  inline ::google::protobuf::int32 copyid() const;
  inline void set_copyid(::google::protobuf::int32 value);

  // required int32 itemid = 3;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 3;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // required int32 timecd = 4;
  inline bool has_timecd() const;
  inline void clear_timecd();
  static const int kTimecdFieldNumber = 4;
  inline ::google::protobuf::int32 timecd() const;
  inline void set_timecd(::google::protobuf::int32 value);

  // repeated .Packet.GuildUserName applyplayer = 5;
  inline int applyplayer_size() const;
  inline void clear_applyplayer();
  static const int kApplyplayerFieldNumber = 5;
  inline const ::Packet::GuildUserName& applyplayer(int index) const;
  inline ::Packet::GuildUserName* mutable_applyplayer(int index);
  inline ::Packet::GuildUserName* add_applyplayer();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::GuildUserName >&
      applyplayer() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::GuildUserName >*
      mutable_applyplayer();

  // @@protoc_insertion_point(class_scope:Packet.GuildSpoilItemClient)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_copyid();
  inline void clear_has_copyid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_timecd();
  inline void clear_has_timecd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 copyid_;
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 timecd_;
  ::google::protobuf::RepeatedPtrField< ::Packet::GuildUserName > applyplayer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildSpoilItemClient* default_instance_;
};
// -------------------------------------------------------------------

class GuildSpoilItemReply : public ::google::protobuf::Message {
 public:
  GuildSpoilItemReply();
  virtual ~GuildSpoilItemReply();

  GuildSpoilItemReply(const GuildSpoilItemReply& from);

  inline GuildSpoilItemReply& operator=(const GuildSpoilItemReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildSpoilItemReply& default_instance();

  void Swap(GuildSpoilItemReply* other);

  // implements Message ----------------------------------------------

  GuildSpoilItemReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildSpoilItemReply& from);
  void MergeFrom(const GuildSpoilItemReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Packet.GuildSpoilItemClient items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::Packet::GuildSpoilItemClient& items(int index) const;
  inline ::Packet::GuildSpoilItemClient* mutable_items(int index);
  inline ::Packet::GuildSpoilItemClient* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::GuildSpoilItemClient >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::GuildSpoilItemClient >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Packet.GuildSpoilItemReply)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::GuildSpoilItemClient > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static GuildSpoilItemReply* default_instance_;
};
// -------------------------------------------------------------------

class UpdateGuildSpoilItemClient : public ::google::protobuf::Message {
 public:
  UpdateGuildSpoilItemClient();
  virtual ~UpdateGuildSpoilItemClient();

  UpdateGuildSpoilItemClient(const UpdateGuildSpoilItemClient& from);

  inline UpdateGuildSpoilItemClient& operator=(const UpdateGuildSpoilItemClient& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateGuildSpoilItemClient& default_instance();

  void Swap(UpdateGuildSpoilItemClient* other);

  // implements Message ----------------------------------------------

  UpdateGuildSpoilItemClient* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateGuildSpoilItemClient& from);
  void MergeFrom(const UpdateGuildSpoilItemClient& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // repeated .Packet.GuildUserName applyplayer = 2;
  inline int applyplayer_size() const;
  inline void clear_applyplayer();
  static const int kApplyplayerFieldNumber = 2;
  inline const ::Packet::GuildUserName& applyplayer(int index) const;
  inline ::Packet::GuildUserName* mutable_applyplayer(int index);
  inline ::Packet::GuildUserName* add_applyplayer();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::GuildUserName >&
      applyplayer() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::GuildUserName >*
      mutable_applyplayer();

  // @@protoc_insertion_point(class_scope:Packet.UpdateGuildSpoilItemClient)
 private:
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::GuildUserName > applyplayer_;
  ::google::protobuf::int32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Guild_2eproto();
  friend void protobuf_AssignDesc_Guild_2eproto();
  friend void protobuf_ShutdownFile_Guild_2eproto();

  void InitAsDefaultInstance();
  static UpdateGuildSpoilItemClient* default_instance_;
};
// ===================================================================


// ===================================================================

// PlayerGuildUserData

// required .Packet.GuildPosition position = 1;
inline bool PlayerGuildUserData::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerGuildUserData::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerGuildUserData::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerGuildUserData::clear_position() {
  position_ = 0;
  clear_has_position();
  SetDirty();
}
inline ::Packet::GuildPosition PlayerGuildUserData::position() const {
  return static_cast< ::Packet::GuildPosition >(position_);
}
inline void PlayerGuildUserData::set_position(::Packet::GuildPosition value) {
  assert(::Packet::GuildPosition_IsValid(value));
  SetDirty();
  set_has_position();
  position_ = value;
}

// required int32 bdonation = 2;
inline bool PlayerGuildUserData::has_bdonation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerGuildUserData::set_has_bdonation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerGuildUserData::clear_has_bdonation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerGuildUserData::clear_bdonation() {
  bdonation_ = 0;
  clear_has_bdonation();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerGuildUserData::bdonation() const {
  return bdonation_;
}
inline void PlayerGuildUserData::set_bdonation(::google::protobuf::int32 value) {
  SetDirty();
  set_has_bdonation();
  bdonation_ = value;
}

// required int32 bbonus = 3;
inline bool PlayerGuildUserData::has_bbonus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerGuildUserData::set_has_bbonus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerGuildUserData::clear_has_bbonus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerGuildUserData::clear_bbonus() {
  bbonus_ = 0;
  clear_has_bbonus();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerGuildUserData::bbonus() const {
  return bbonus_;
}
inline void PlayerGuildUserData::set_bbonus(::google::protobuf::int32 value) {
  SetDirty();
  set_has_bbonus();
  bbonus_ = value;
}

// required int32 curcontribution = 4;
inline bool PlayerGuildUserData::has_curcontribution() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerGuildUserData::set_has_curcontribution() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerGuildUserData::clear_has_curcontribution() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerGuildUserData::clear_curcontribution() {
  curcontribution_ = 0;
  clear_has_curcontribution();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerGuildUserData::curcontribution() const {
  return curcontribution_;
}
inline void PlayerGuildUserData::set_curcontribution(::google::protobuf::int32 value) {
  SetDirty();
  set_has_curcontribution();
  curcontribution_ = value;
}

// required int32 weekcontribution = 5;
inline bool PlayerGuildUserData::has_weekcontribution() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerGuildUserData::set_has_weekcontribution() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerGuildUserData::clear_has_weekcontribution() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerGuildUserData::clear_weekcontribution() {
  weekcontribution_ = 0;
  clear_has_weekcontribution();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerGuildUserData::weekcontribution() const {
  return weekcontribution_;
}
inline void PlayerGuildUserData::set_weekcontribution(::google::protobuf::int32 value) {
  SetDirty();
  set_has_weekcontribution();
  weekcontribution_ = value;
}

// required int32 allcontribution = 6;
inline bool PlayerGuildUserData::has_allcontribution() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerGuildUserData::set_has_allcontribution() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerGuildUserData::clear_has_allcontribution() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerGuildUserData::clear_allcontribution() {
  allcontribution_ = 0;
  clear_has_allcontribution();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerGuildUserData::allcontribution() const {
  return allcontribution_;
}
inline void PlayerGuildUserData::set_allcontribution(::google::protobuf::int32 value) {
  SetDirty();
  set_has_allcontribution();
  allcontribution_ = value;
}

// required uint32 jointime = 7;
inline bool PlayerGuildUserData::has_jointime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerGuildUserData::set_has_jointime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerGuildUserData::clear_has_jointime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerGuildUserData::clear_jointime() {
  jointime_ = 0u;
  clear_has_jointime();
  SetDirty();
}
inline ::google::protobuf::uint32 PlayerGuildUserData::jointime() const {
  return jointime_;
}
inline void PlayerGuildUserData::set_jointime(::google::protobuf::uint32 value) {
  SetDirty();
  set_has_jointime();
  jointime_ = value;
}

// required int32 guildlevel = 8;
inline bool PlayerGuildUserData::has_guildlevel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerGuildUserData::set_has_guildlevel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayerGuildUserData::clear_has_guildlevel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayerGuildUserData::clear_guildlevel() {
  guildlevel_ = 0;
  clear_has_guildlevel();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerGuildUserData::guildlevel() const {
  return guildlevel_;
}
inline void PlayerGuildUserData::set_guildlevel(::google::protobuf::int32 value) {
  SetDirty();
  set_has_guildlevel();
  guildlevel_ = value;
}

// required int32 cashboxlevel = 9;
inline bool PlayerGuildUserData::has_cashboxlevel() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlayerGuildUserData::set_has_cashboxlevel() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlayerGuildUserData::clear_has_cashboxlevel() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlayerGuildUserData::clear_cashboxlevel() {
  cashboxlevel_ = 0;
  clear_has_cashboxlevel();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerGuildUserData::cashboxlevel() const {
  return cashboxlevel_;
}
inline void PlayerGuildUserData::set_cashboxlevel(::google::protobuf::int32 value) {
  SetDirty();
  set_has_cashboxlevel();
  cashboxlevel_ = value;
}

// required int32 shoplevel = 10;
inline bool PlayerGuildUserData::has_shoplevel() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlayerGuildUserData::set_has_shoplevel() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlayerGuildUserData::clear_has_shoplevel() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlayerGuildUserData::clear_shoplevel() {
  shoplevel_ = 0;
  clear_has_shoplevel();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerGuildUserData::shoplevel() const {
  return shoplevel_;
}
inline void PlayerGuildUserData::set_shoplevel(::google::protobuf::int32 value) {
  SetDirty();
  set_has_shoplevel();
  shoplevel_ = value;
}

// required int32 storagelevel = 11;
inline bool PlayerGuildUserData::has_storagelevel() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PlayerGuildUserData::set_has_storagelevel() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PlayerGuildUserData::clear_has_storagelevel() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PlayerGuildUserData::clear_storagelevel() {
  storagelevel_ = 0;
  clear_has_storagelevel();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerGuildUserData::storagelevel() const {
  return storagelevel_;
}
inline void PlayerGuildUserData::set_storagelevel(::google::protobuf::int32 value) {
  SetDirty();
  set_has_storagelevel();
  storagelevel_ = value;
}

// optional string guildname = 12;
inline bool PlayerGuildUserData::has_guildname() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PlayerGuildUserData::set_has_guildname() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PlayerGuildUserData::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PlayerGuildUserData::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
  SetDirty();
}
inline const ::std::string& PlayerGuildUserData::guildname() const {
  return *guildname_;
}
inline void PlayerGuildUserData::set_guildname(const ::std::string& value) {
  SetDirty();
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void PlayerGuildUserData::set_guildname(const char* value) {
  SetDirty();
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void PlayerGuildUserData::set_guildname(const char* value, size_t size) {
  SetDirty();
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerGuildUserData::mutable_guildname() {
  SetDirty();
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* PlayerGuildUserData::release_guildname() {
  SetDirty();
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerGuildUserData::set_allocated_guildname(::std::string* guildname) {
  SetDirty();
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GuildUser

// required fixed64 playerguid = 1;
inline bool GuildUser::has_playerguid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildUser::set_has_playerguid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildUser::clear_has_playerguid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildUser::clear_playerguid() {
  playerguid_ = GOOGLE_ULONGLONG(0);
  clear_has_playerguid();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildUser::playerguid() const {
  return playerguid_;
}
inline void GuildUser::set_playerguid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_playerguid();
  playerguid_ = value;
}

// required fixed64 guildid = 2;
inline bool GuildUser::has_guildid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildUser::set_has_guildid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildUser::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildUser::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildUser::guildid() const {
  return guildid_;
}
inline void GuildUser::set_guildid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guildid();
  guildid_ = value;
}

// required string playername = 3;
inline bool GuildUser::has_playername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildUser::set_has_playername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildUser::clear_has_playername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildUser::clear_playername() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    playername_->clear();
  }
  clear_has_playername();
  SetDirty();
}
inline const ::std::string& GuildUser::playername() const {
  return *playername_;
}
inline void GuildUser::set_playername(const ::std::string& value) {
  SetDirty();
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void GuildUser::set_playername(const char* value) {
  SetDirty();
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void GuildUser::set_playername(const char* value, size_t size) {
  SetDirty();
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildUser::mutable_playername() {
  SetDirty();
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  return playername_;
}
inline ::std::string* GuildUser::release_playername() {
  SetDirty();
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildUser::set_allocated_playername(::std::string* playername) {
  SetDirty();
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 playerlevel = 4;
inline bool GuildUser::has_playerlevel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildUser::set_has_playerlevel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildUser::clear_has_playerlevel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildUser::clear_playerlevel() {
  playerlevel_ = 0;
  clear_has_playerlevel();
  SetDirty();
}
inline ::google::protobuf::int32 GuildUser::playerlevel() const {
  return playerlevel_;
}
inline void GuildUser::set_playerlevel(::google::protobuf::int32 value) {
  SetDirty();
  set_has_playerlevel();
  playerlevel_ = value;
}

// required .Packet.GuildPosition position = 5;
inline bool GuildUser::has_position() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuildUser::set_has_position() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuildUser::clear_has_position() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuildUser::clear_position() {
  position_ = 0;
  clear_has_position();
  SetDirty();
}
inline ::Packet::GuildPosition GuildUser::position() const {
  return static_cast< ::Packet::GuildPosition >(position_);
}
inline void GuildUser::set_position(::Packet::GuildPosition value) {
  assert(::Packet::GuildPosition_IsValid(value));
  SetDirty();
  set_has_position();
  position_ = value;
}

// required int32 online = 6;
inline bool GuildUser::has_online() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GuildUser::set_has_online() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GuildUser::clear_has_online() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GuildUser::clear_online() {
  online_ = 0;
  clear_has_online();
  SetDirty();
}
inline ::google::protobuf::int32 GuildUser::online() const {
  return online_;
}
inline void GuildUser::set_online(::google::protobuf::int32 value) {
  SetDirty();
  set_has_online();
  online_ = value;
}

// required int32 bdonation = 7;
inline bool GuildUser::has_bdonation() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GuildUser::set_has_bdonation() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GuildUser::clear_has_bdonation() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GuildUser::clear_bdonation() {
  bdonation_ = 0;
  clear_has_bdonation();
  SetDirty();
}
inline ::google::protobuf::int32 GuildUser::bdonation() const {
  return bdonation_;
}
inline void GuildUser::set_bdonation(::google::protobuf::int32 value) {
  SetDirty();
  set_has_bdonation();
  bdonation_ = value;
}

// required int32 bbonus = 8;
inline bool GuildUser::has_bbonus() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GuildUser::set_has_bbonus() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GuildUser::clear_has_bbonus() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GuildUser::clear_bbonus() {
  bbonus_ = 0;
  clear_has_bbonus();
  SetDirty();
}
inline ::google::protobuf::int32 GuildUser::bbonus() const {
  return bbonus_;
}
inline void GuildUser::set_bbonus(::google::protobuf::int32 value) {
  SetDirty();
  set_has_bbonus();
  bbonus_ = value;
}

// required int32 curcontribution = 9;
inline bool GuildUser::has_curcontribution() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GuildUser::set_has_curcontribution() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GuildUser::clear_has_curcontribution() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GuildUser::clear_curcontribution() {
  curcontribution_ = 0;
  clear_has_curcontribution();
  SetDirty();
}
inline ::google::protobuf::int32 GuildUser::curcontribution() const {
  return curcontribution_;
}
inline void GuildUser::set_curcontribution(::google::protobuf::int32 value) {
  SetDirty();
  set_has_curcontribution();
  curcontribution_ = value;
}

// required int32 weekcontribution = 10;
inline bool GuildUser::has_weekcontribution() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GuildUser::set_has_weekcontribution() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GuildUser::clear_has_weekcontribution() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GuildUser::clear_weekcontribution() {
  weekcontribution_ = 0;
  clear_has_weekcontribution();
  SetDirty();
}
inline ::google::protobuf::int32 GuildUser::weekcontribution() const {
  return weekcontribution_;
}
inline void GuildUser::set_weekcontribution(::google::protobuf::int32 value) {
  SetDirty();
  set_has_weekcontribution();
  weekcontribution_ = value;
}

// required int32 allcontribution = 11;
inline bool GuildUser::has_allcontribution() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GuildUser::set_has_allcontribution() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GuildUser::clear_has_allcontribution() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GuildUser::clear_allcontribution() {
  allcontribution_ = 0;
  clear_has_allcontribution();
  SetDirty();
}
inline ::google::protobuf::int32 GuildUser::allcontribution() const {
  return allcontribution_;
}
inline void GuildUser::set_allcontribution(::google::protobuf::int32 value) {
  SetDirty();
  set_has_allcontribution();
  allcontribution_ = value;
}

// required int32 battletime = 12;
inline bool GuildUser::has_battletime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GuildUser::set_has_battletime() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GuildUser::clear_has_battletime() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GuildUser::clear_battletime() {
  battletime_ = 0;
  clear_has_battletime();
  SetDirty();
}
inline ::google::protobuf::int32 GuildUser::battletime() const {
  return battletime_;
}
inline void GuildUser::set_battletime(::google::protobuf::int32 value) {
  SetDirty();
  set_has_battletime();
  battletime_ = value;
}

// required uint32 lastlogouttime = 13;
inline bool GuildUser::has_lastlogouttime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GuildUser::set_has_lastlogouttime() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GuildUser::clear_has_lastlogouttime() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GuildUser::clear_lastlogouttime() {
  lastlogouttime_ = 0u;
  clear_has_lastlogouttime();
  SetDirty();
}
inline ::google::protobuf::uint32 GuildUser::lastlogouttime() const {
  return lastlogouttime_;
}
inline void GuildUser::set_lastlogouttime(::google::protobuf::uint32 value) {
  SetDirty();
  set_has_lastlogouttime();
  lastlogouttime_ = value;
}

// required uint32 jointime = 14;
inline bool GuildUser::has_jointime() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GuildUser::set_has_jointime() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GuildUser::clear_has_jointime() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GuildUser::clear_jointime() {
  jointime_ = 0u;
  clear_has_jointime();
  SetDirty();
}
inline ::google::protobuf::uint32 GuildUser::jointime() const {
  return jointime_;
}
inline void GuildUser::set_jointime(::google::protobuf::uint32 value) {
  SetDirty();
  set_has_jointime();
  jointime_ = value;
}

// required int32 bossdamage = 15;
inline bool GuildUser::has_bossdamage() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GuildUser::set_has_bossdamage() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GuildUser::clear_has_bossdamage() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GuildUser::clear_bossdamage() {
  bossdamage_ = 0;
  clear_has_bossdamage();
  SetDirty();
}
inline ::google::protobuf::int32 GuildUser::bossdamage() const {
  return bossdamage_;
}
inline void GuildUser::set_bossdamage(::google::protobuf::int32 value) {
  SetDirty();
  set_has_bossdamage();
  bossdamage_ = value;
}

// required int32 main_actor_config_id = 16;
inline bool GuildUser::has_main_actor_config_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GuildUser::set_has_main_actor_config_id() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GuildUser::clear_has_main_actor_config_id() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GuildUser::clear_main_actor_config_id() {
  main_actor_config_id_ = 0;
  clear_has_main_actor_config_id();
  SetDirty();
}
inline ::google::protobuf::int32 GuildUser::main_actor_config_id() const {
  return main_actor_config_id_;
}
inline void GuildUser::set_main_actor_config_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_main_actor_config_id();
  main_actor_config_id_ = value;
}

// required int32 main_actor_score = 17;
inline bool GuildUser::has_main_actor_score() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void GuildUser::set_has_main_actor_score() {
  _has_bits_[0] |= 0x00010000u;
}
inline void GuildUser::clear_has_main_actor_score() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void GuildUser::clear_main_actor_score() {
  main_actor_score_ = 0;
  clear_has_main_actor_score();
  SetDirty();
}
inline ::google::protobuf::int32 GuildUser::main_actor_score() const {
  return main_actor_score_;
}
inline void GuildUser::set_main_actor_score(::google::protobuf::int32 value) {
  SetDirty();
  set_has_main_actor_score();
  main_actor_score_ = value;
}

// required .Packet.ActorColor main_actor_color = 18;
inline bool GuildUser::has_main_actor_color() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void GuildUser::set_has_main_actor_color() {
  _has_bits_[0] |= 0x00020000u;
}
inline void GuildUser::clear_has_main_actor_color() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void GuildUser::clear_main_actor_color() {
  main_actor_color_ = 1;
  clear_has_main_actor_color();
  SetDirty();
}
inline ::Packet::ActorColor GuildUser::main_actor_color() const {
  return static_cast< ::Packet::ActorColor >(main_actor_color_);
}
inline void GuildUser::set_main_actor_color(::Packet::ActorColor value) {
  assert(::Packet::ActorColor_IsValid(value));
  SetDirty();
  set_has_main_actor_color();
  main_actor_color_ = value;
}

// required .Packet.ActorStar main_actor_star = 19;
inline bool GuildUser::has_main_actor_star() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void GuildUser::set_has_main_actor_star() {
  _has_bits_[0] |= 0x00040000u;
}
inline void GuildUser::clear_has_main_actor_star() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void GuildUser::clear_main_actor_star() {
  main_actor_star_ = 1;
  clear_has_main_actor_star();
  SetDirty();
}
inline ::Packet::ActorStar GuildUser::main_actor_star() const {
  return static_cast< ::Packet::ActorStar >(main_actor_star_);
}
inline void GuildUser::set_main_actor_star(::Packet::ActorStar value) {
  assert(::Packet::ActorStar_IsValid(value));
  SetDirty();
  set_has_main_actor_star();
  main_actor_star_ = value;
}

// required int32 wetcopytimes = 20;
inline bool GuildUser::has_wetcopytimes() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void GuildUser::set_has_wetcopytimes() {
  _has_bits_[0] |= 0x00080000u;
}
inline void GuildUser::clear_has_wetcopytimes() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void GuildUser::clear_wetcopytimes() {
  wetcopytimes_ = 0;
  clear_has_wetcopytimes();
  SetDirty();
}
inline ::google::protobuf::int32 GuildUser::wetcopytimes() const {
  return wetcopytimes_;
}
inline void GuildUser::set_wetcopytimes(::google::protobuf::int32 value) {
  SetDirty();
  set_has_wetcopytimes();
  wetcopytimes_ = value;
}

// required int32 spoiljumptimes = 21;
inline bool GuildUser::has_spoiljumptimes() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void GuildUser::set_has_spoiljumptimes() {
  _has_bits_[0] |= 0x00100000u;
}
inline void GuildUser::clear_has_spoiljumptimes() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void GuildUser::clear_spoiljumptimes() {
  spoiljumptimes_ = 0;
  clear_has_spoiljumptimes();
  SetDirty();
}
inline ::google::protobuf::int32 GuildUser::spoiljumptimes() const {
  return spoiljumptimes_;
}
inline void GuildUser::set_spoiljumptimes(::google::protobuf::int32 value) {
  SetDirty();
  set_has_spoiljumptimes();
  spoiljumptimes_ = value;
}

// required int32 hair = 26;
inline bool GuildUser::has_hair() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void GuildUser::set_has_hair() {
  _has_bits_[0] |= 0x00200000u;
}
inline void GuildUser::clear_has_hair() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void GuildUser::clear_hair() {
  hair_ = 0;
  clear_has_hair();
  SetDirty();
}
inline ::google::protobuf::int32 GuildUser::hair() const {
  return hair_;
}
inline void GuildUser::set_hair(::google::protobuf::int32 value) {
  SetDirty();
  set_has_hair();
  hair_ = value;
}

// required fixed64 lastguildid = 27;
inline bool GuildUser::has_lastguildid() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void GuildUser::set_has_lastguildid() {
  _has_bits_[0] |= 0x00400000u;
}
inline void GuildUser::clear_has_lastguildid() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void GuildUser::clear_lastguildid() {
  lastguildid_ = GOOGLE_ULONGLONG(0);
  clear_has_lastguildid();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildUser::lastguildid() const {
  return lastguildid_;
}
inline void GuildUser::set_lastguildid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_lastguildid();
  lastguildid_ = value;
}

// -------------------------------------------------------------------

// GuildImpeach

// required fixed64 impeachguild = 1;
inline bool GuildImpeach::has_impeachguild() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildImpeach::set_has_impeachguild() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildImpeach::clear_has_impeachguild() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildImpeach::clear_impeachguild() {
  impeachguild_ = GOOGLE_ULONGLONG(0);
  clear_has_impeachguild();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildImpeach::impeachguild() const {
  return impeachguild_;
}
inline void GuildImpeach::set_impeachguild(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_impeachguild();
  impeachguild_ = value;
}

// required string impeachname = 2;
inline bool GuildImpeach::has_impeachname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildImpeach::set_has_impeachname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildImpeach::clear_has_impeachname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildImpeach::clear_impeachname() {
  if (impeachname_ != &::google::protobuf::internal::kEmptyString) {
    impeachname_->clear();
  }
  clear_has_impeachname();
  SetDirty();
}
inline const ::std::string& GuildImpeach::impeachname() const {
  return *impeachname_;
}
inline void GuildImpeach::set_impeachname(const ::std::string& value) {
  SetDirty();
  set_has_impeachname();
  if (impeachname_ == &::google::protobuf::internal::kEmptyString) {
    impeachname_ = new ::std::string;
  }
  impeachname_->assign(value);
}
inline void GuildImpeach::set_impeachname(const char* value) {
  SetDirty();
  set_has_impeachname();
  if (impeachname_ == &::google::protobuf::internal::kEmptyString) {
    impeachname_ = new ::std::string;
  }
  impeachname_->assign(value);
}
inline void GuildImpeach::set_impeachname(const char* value, size_t size) {
  SetDirty();
  set_has_impeachname();
  if (impeachname_ == &::google::protobuf::internal::kEmptyString) {
    impeachname_ = new ::std::string;
  }
  impeachname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildImpeach::mutable_impeachname() {
  SetDirty();
  set_has_impeachname();
  if (impeachname_ == &::google::protobuf::internal::kEmptyString) {
    impeachname_ = new ::std::string;
  }
  return impeachname_;
}
inline ::std::string* GuildImpeach::release_impeachname() {
  SetDirty();
  clear_has_impeachname();
  if (impeachname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = impeachname_;
    impeachname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildImpeach::set_allocated_impeachname(::std::string* impeachname) {
  SetDirty();
  if (impeachname_ != &::google::protobuf::internal::kEmptyString) {
    delete impeachname_;
  }
  if (impeachname) {
    set_has_impeachname();
    impeachname_ = impeachname;
  } else {
    clear_has_impeachname();
    impeachname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 needcount = 3;
inline bool GuildImpeach::has_needcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildImpeach::set_has_needcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildImpeach::clear_has_needcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildImpeach::clear_needcount() {
  needcount_ = 0;
  clear_has_needcount();
  SetDirty();
}
inline ::google::protobuf::int32 GuildImpeach::needcount() const {
  return needcount_;
}
inline void GuildImpeach::set_needcount(::google::protobuf::int32 value) {
  SetDirty();
  set_has_needcount();
  needcount_ = value;
}

// required int32 endtime = 4;
inline bool GuildImpeach::has_endtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildImpeach::set_has_endtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildImpeach::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildImpeach::clear_endtime() {
  endtime_ = 0;
  clear_has_endtime();
  SetDirty();
}
inline ::google::protobuf::int32 GuildImpeach::endtime() const {
  return endtime_;
}
inline void GuildImpeach::set_endtime(::google::protobuf::int32 value) {
  SetDirty();
  set_has_endtime();
  endtime_ = value;
}

// repeated fixed64 respondguild = 5;
inline int GuildImpeach::respondguild_size() const {
  return respondguild_.size();
}
inline void GuildImpeach::clear_respondguild() {
  respondguild_.Clear();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildImpeach::respondguild(int index) const {
  return respondguild_.Get(index);
}
inline void GuildImpeach::set_respondguild(int index, ::google::protobuf::uint64 value) {
  SetDirty();
  respondguild_.Set(index, value);
}
inline void GuildImpeach::add_respondguild(::google::protobuf::uint64 value) {
  SetDirty();
  respondguild_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
GuildImpeach::respondguild() const {
  return respondguild_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
GuildImpeach::mutable_respondguild() {
  SetDirty();
  return &respondguild_;
}

// -------------------------------------------------------------------

// GuildDBInfo

// required fixed64 guid = 1;
inline bool GuildDBInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildDBInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildDBInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildDBInfo::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildDBInfo::guid() const {
  return guid_;
}
inline void GuildDBInfo::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// required string name = 2;
inline bool GuildDBInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildDBInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildDBInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildDBInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
  SetDirty();
}
inline const ::std::string& GuildDBInfo::name() const {
  return *name_;
}
inline void GuildDBInfo::set_name(const ::std::string& value) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GuildDBInfo::set_name(const char* value) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GuildDBInfo::set_name(const char* value, size_t size) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildDBInfo::mutable_name() {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GuildDBInfo::release_name() {
  SetDirty();
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildDBInfo::set_allocated_name(::std::string* name) {
  SetDirty();
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string lastname = 3;
inline bool GuildDBInfo::has_lastname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildDBInfo::set_has_lastname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildDBInfo::clear_has_lastname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildDBInfo::clear_lastname() {
  if (lastname_ != &::google::protobuf::internal::kEmptyString) {
    lastname_->clear();
  }
  clear_has_lastname();
  SetDirty();
}
inline const ::std::string& GuildDBInfo::lastname() const {
  return *lastname_;
}
inline void GuildDBInfo::set_lastname(const ::std::string& value) {
  SetDirty();
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    lastname_ = new ::std::string;
  }
  lastname_->assign(value);
}
inline void GuildDBInfo::set_lastname(const char* value) {
  SetDirty();
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    lastname_ = new ::std::string;
  }
  lastname_->assign(value);
}
inline void GuildDBInfo::set_lastname(const char* value, size_t size) {
  SetDirty();
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    lastname_ = new ::std::string;
  }
  lastname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildDBInfo::mutable_lastname() {
  SetDirty();
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    lastname_ = new ::std::string;
  }
  return lastname_;
}
inline ::std::string* GuildDBInfo::release_lastname() {
  SetDirty();
  clear_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lastname_;
    lastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildDBInfo::set_allocated_lastname(::std::string* lastname) {
  SetDirty();
  if (lastname_ != &::google::protobuf::internal::kEmptyString) {
    delete lastname_;
  }
  if (lastname) {
    set_has_lastname();
    lastname_ = lastname;
  } else {
    clear_has_lastname();
    lastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string notice = 4;
inline bool GuildDBInfo::has_notice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildDBInfo::set_has_notice() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildDBInfo::clear_has_notice() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildDBInfo::clear_notice() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    notice_->clear();
  }
  clear_has_notice();
  SetDirty();
}
inline const ::std::string& GuildDBInfo::notice() const {
  return *notice_;
}
inline void GuildDBInfo::set_notice(const ::std::string& value) {
  SetDirty();
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void GuildDBInfo::set_notice(const char* value) {
  SetDirty();
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void GuildDBInfo::set_notice(const char* value, size_t size) {
  SetDirty();
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildDBInfo::mutable_notice() {
  SetDirty();
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  return notice_;
}
inline ::std::string* GuildDBInfo::release_notice() {
  SetDirty();
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildDBInfo::set_allocated_notice(::std::string* notice) {
  SetDirty();
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string icon = 5;
inline bool GuildDBInfo::has_icon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuildDBInfo::set_has_icon() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuildDBInfo::clear_has_icon() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuildDBInfo::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
  SetDirty();
}
inline const ::std::string& GuildDBInfo::icon() const {
  return *icon_;
}
inline void GuildDBInfo::set_icon(const ::std::string& value) {
  SetDirty();
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void GuildDBInfo::set_icon(const char* value) {
  SetDirty();
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void GuildDBInfo::set_icon(const char* value, size_t size) {
  SetDirty();
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildDBInfo::mutable_icon() {
  SetDirty();
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* GuildDBInfo::release_icon() {
  SetDirty();
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildDBInfo::set_allocated_icon(::std::string* icon) {
  SetDirty();
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required fixed64 chieftain = 6;
inline bool GuildDBInfo::has_chieftain() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GuildDBInfo::set_has_chieftain() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GuildDBInfo::clear_has_chieftain() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GuildDBInfo::clear_chieftain() {
  chieftain_ = GOOGLE_ULONGLONG(0);
  clear_has_chieftain();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildDBInfo::chieftain() const {
  return chieftain_;
}
inline void GuildDBInfo::set_chieftain(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_chieftain();
  chieftain_ = value;
}

// required string chieftainname = 7;
inline bool GuildDBInfo::has_chieftainname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GuildDBInfo::set_has_chieftainname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GuildDBInfo::clear_has_chieftainname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GuildDBInfo::clear_chieftainname() {
  if (chieftainname_ != &::google::protobuf::internal::kEmptyString) {
    chieftainname_->clear();
  }
  clear_has_chieftainname();
  SetDirty();
}
inline const ::std::string& GuildDBInfo::chieftainname() const {
  return *chieftainname_;
}
inline void GuildDBInfo::set_chieftainname(const ::std::string& value) {
  SetDirty();
  set_has_chieftainname();
  if (chieftainname_ == &::google::protobuf::internal::kEmptyString) {
    chieftainname_ = new ::std::string;
  }
  chieftainname_->assign(value);
}
inline void GuildDBInfo::set_chieftainname(const char* value) {
  SetDirty();
  set_has_chieftainname();
  if (chieftainname_ == &::google::protobuf::internal::kEmptyString) {
    chieftainname_ = new ::std::string;
  }
  chieftainname_->assign(value);
}
inline void GuildDBInfo::set_chieftainname(const char* value, size_t size) {
  SetDirty();
  set_has_chieftainname();
  if (chieftainname_ == &::google::protobuf::internal::kEmptyString) {
    chieftainname_ = new ::std::string;
  }
  chieftainname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildDBInfo::mutable_chieftainname() {
  SetDirty();
  set_has_chieftainname();
  if (chieftainname_ == &::google::protobuf::internal::kEmptyString) {
    chieftainname_ = new ::std::string;
  }
  return chieftainname_;
}
inline ::std::string* GuildDBInfo::release_chieftainname() {
  SetDirty();
  clear_has_chieftainname();
  if (chieftainname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = chieftainname_;
    chieftainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildDBInfo::set_allocated_chieftainname(::std::string* chieftainname) {
  SetDirty();
  if (chieftainname_ != &::google::protobuf::internal::kEmptyString) {
    delete chieftainname_;
  }
  if (chieftainname) {
    set_has_chieftainname();
    chieftainname_ = chieftainname;
  } else {
    clear_has_chieftainname();
    chieftainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 guildlevel = 8;
inline bool GuildDBInfo::has_guildlevel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GuildDBInfo::set_has_guildlevel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GuildDBInfo::clear_has_guildlevel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GuildDBInfo::clear_guildlevel() {
  guildlevel_ = 0;
  clear_has_guildlevel();
  SetDirty();
}
inline ::google::protobuf::int32 GuildDBInfo::guildlevel() const {
  return guildlevel_;
}
inline void GuildDBInfo::set_guildlevel(::google::protobuf::int32 value) {
  SetDirty();
  set_has_guildlevel();
  guildlevel_ = value;
}

// required int32 cashboxlevel = 9;
inline bool GuildDBInfo::has_cashboxlevel() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GuildDBInfo::set_has_cashboxlevel() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GuildDBInfo::clear_has_cashboxlevel() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GuildDBInfo::clear_cashboxlevel() {
  cashboxlevel_ = 0;
  clear_has_cashboxlevel();
  SetDirty();
}
inline ::google::protobuf::int32 GuildDBInfo::cashboxlevel() const {
  return cashboxlevel_;
}
inline void GuildDBInfo::set_cashboxlevel(::google::protobuf::int32 value) {
  SetDirty();
  set_has_cashboxlevel();
  cashboxlevel_ = value;
}

// required int32 shoplevel = 10;
inline bool GuildDBInfo::has_shoplevel() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GuildDBInfo::set_has_shoplevel() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GuildDBInfo::clear_has_shoplevel() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GuildDBInfo::clear_shoplevel() {
  shoplevel_ = 0;
  clear_has_shoplevel();
  SetDirty();
}
inline ::google::protobuf::int32 GuildDBInfo::shoplevel() const {
  return shoplevel_;
}
inline void GuildDBInfo::set_shoplevel(::google::protobuf::int32 value) {
  SetDirty();
  set_has_shoplevel();
  shoplevel_ = value;
}

// required int32 storagelevel = 11;
inline bool GuildDBInfo::has_storagelevel() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GuildDBInfo::set_has_storagelevel() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GuildDBInfo::clear_has_storagelevel() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GuildDBInfo::clear_storagelevel() {
  storagelevel_ = 0;
  clear_has_storagelevel();
  SetDirty();
}
inline ::google::protobuf::int32 GuildDBInfo::storagelevel() const {
  return storagelevel_;
}
inline void GuildDBInfo::set_storagelevel(::google::protobuf::int32 value) {
  SetDirty();
  set_has_storagelevel();
  storagelevel_ = value;
}

// required uint32 guildcd = 12;
inline bool GuildDBInfo::has_guildcd() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GuildDBInfo::set_has_guildcd() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GuildDBInfo::clear_has_guildcd() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GuildDBInfo::clear_guildcd() {
  guildcd_ = 0u;
  clear_has_guildcd();
  SetDirty();
}
inline ::google::protobuf::uint32 GuildDBInfo::guildcd() const {
  return guildcd_;
}
inline void GuildDBInfo::set_guildcd(::google::protobuf::uint32 value) {
  SetDirty();
  set_has_guildcd();
  guildcd_ = value;
}

// required uint32 cashboxcd = 13;
inline bool GuildDBInfo::has_cashboxcd() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GuildDBInfo::set_has_cashboxcd() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GuildDBInfo::clear_has_cashboxcd() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GuildDBInfo::clear_cashboxcd() {
  cashboxcd_ = 0u;
  clear_has_cashboxcd();
  SetDirty();
}
inline ::google::protobuf::uint32 GuildDBInfo::cashboxcd() const {
  return cashboxcd_;
}
inline void GuildDBInfo::set_cashboxcd(::google::protobuf::uint32 value) {
  SetDirty();
  set_has_cashboxcd();
  cashboxcd_ = value;
}

// required uint32 shopcd = 14;
inline bool GuildDBInfo::has_shopcd() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GuildDBInfo::set_has_shopcd() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GuildDBInfo::clear_has_shopcd() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GuildDBInfo::clear_shopcd() {
  shopcd_ = 0u;
  clear_has_shopcd();
  SetDirty();
}
inline ::google::protobuf::uint32 GuildDBInfo::shopcd() const {
  return shopcd_;
}
inline void GuildDBInfo::set_shopcd(::google::protobuf::uint32 value) {
  SetDirty();
  set_has_shopcd();
  shopcd_ = value;
}

// required uint32 storagecd = 15;
inline bool GuildDBInfo::has_storagecd() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GuildDBInfo::set_has_storagecd() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GuildDBInfo::clear_has_storagecd() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GuildDBInfo::clear_storagecd() {
  storagecd_ = 0u;
  clear_has_storagecd();
  SetDirty();
}
inline ::google::protobuf::uint32 GuildDBInfo::storagecd() const {
  return storagecd_;
}
inline void GuildDBInfo::set_storagecd(::google::protobuf::uint32 value) {
  SetDirty();
  set_has_storagecd();
  storagecd_ = value;
}

// required int32 guildmoney = 16;
inline bool GuildDBInfo::has_guildmoney() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GuildDBInfo::set_has_guildmoney() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GuildDBInfo::clear_has_guildmoney() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GuildDBInfo::clear_guildmoney() {
  guildmoney_ = 0;
  clear_has_guildmoney();
  SetDirty();
}
inline ::google::protobuf::int32 GuildDBInfo::guildmoney() const {
  return guildmoney_;
}
inline void GuildDBInfo::set_guildmoney(::google::protobuf::int32 value) {
  SetDirty();
  set_has_guildmoney();
  guildmoney_ = value;
}

// required int32 limitapplylevel = 17;
inline bool GuildDBInfo::has_limitapplylevel() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void GuildDBInfo::set_has_limitapplylevel() {
  _has_bits_[0] |= 0x00010000u;
}
inline void GuildDBInfo::clear_has_limitapplylevel() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void GuildDBInfo::clear_limitapplylevel() {
  limitapplylevel_ = 0;
  clear_has_limitapplylevel();
  SetDirty();
}
inline ::google::protobuf::int32 GuildDBInfo::limitapplylevel() const {
  return limitapplylevel_;
}
inline void GuildDBInfo::set_limitapplylevel(::google::protobuf::int32 value) {
  SetDirty();
  set_has_limitapplylevel();
  limitapplylevel_ = value;
}

// required int32 maxwetcopyid = 18;
inline bool GuildDBInfo::has_maxwetcopyid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void GuildDBInfo::set_has_maxwetcopyid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void GuildDBInfo::clear_has_maxwetcopyid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void GuildDBInfo::clear_maxwetcopyid() {
  maxwetcopyid_ = 0;
  clear_has_maxwetcopyid();
  SetDirty();
}
inline ::google::protobuf::int32 GuildDBInfo::maxwetcopyid() const {
  return maxwetcopyid_;
}
inline void GuildDBInfo::set_maxwetcopyid(::google::protobuf::int32 value) {
  SetDirty();
  set_has_maxwetcopyid();
  maxwetcopyid_ = value;
}

// required int32 weekbonus = 19;
inline bool GuildDBInfo::has_weekbonus() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void GuildDBInfo::set_has_weekbonus() {
  _has_bits_[0] |= 0x00040000u;
}
inline void GuildDBInfo::clear_has_weekbonus() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void GuildDBInfo::clear_weekbonus() {
  weekbonus_ = 0;
  clear_has_weekbonus();
  SetDirty();
}
inline ::google::protobuf::int32 GuildDBInfo::weekbonus() const {
  return weekbonus_;
}
inline void GuildDBInfo::set_weekbonus(::google::protobuf::int32 value) {
  SetDirty();
  set_has_weekbonus();
  weekbonus_ = value;
}

// required fixed32 lowmaintainday = 20;
inline bool GuildDBInfo::has_lowmaintainday() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void GuildDBInfo::set_has_lowmaintainday() {
  _has_bits_[0] |= 0x00080000u;
}
inline void GuildDBInfo::clear_has_lowmaintainday() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void GuildDBInfo::clear_lowmaintainday() {
  lowmaintainday_ = 0u;
  clear_has_lowmaintainday();
  SetDirty();
}
inline ::google::protobuf::uint32 GuildDBInfo::lowmaintainday() const {
  return lowmaintainday_;
}
inline void GuildDBInfo::set_lowmaintainday(::google::protobuf::uint32 value) {
  SetDirty();
  set_has_lowmaintainday();
  lowmaintainday_ = value;
}

// required int32 battlewintimes = 21;
inline bool GuildDBInfo::has_battlewintimes() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void GuildDBInfo::set_has_battlewintimes() {
  _has_bits_[0] |= 0x00100000u;
}
inline void GuildDBInfo::clear_has_battlewintimes() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void GuildDBInfo::clear_battlewintimes() {
  battlewintimes_ = 0;
  clear_has_battlewintimes();
  SetDirty();
}
inline ::google::protobuf::int32 GuildDBInfo::battlewintimes() const {
  return battlewintimes_;
}
inline void GuildDBInfo::set_battlewintimes(::google::protobuf::int32 value) {
  SetDirty();
  set_has_battlewintimes();
  battlewintimes_ = value;
}

// required int32 battletimes = 22;
inline bool GuildDBInfo::has_battletimes() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void GuildDBInfo::set_has_battletimes() {
  _has_bits_[0] |= 0x00200000u;
}
inline void GuildDBInfo::clear_has_battletimes() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void GuildDBInfo::clear_battletimes() {
  battletimes_ = 0;
  clear_has_battletimes();
  SetDirty();
}
inline ::google::protobuf::int32 GuildDBInfo::battletimes() const {
  return battletimes_;
}
inline void GuildDBInfo::set_battletimes(::google::protobuf::int32 value) {
  SetDirty();
  set_has_battletimes();
  battletimes_ = value;
}

// required int32 battlelefttimes = 23;
inline bool GuildDBInfo::has_battlelefttimes() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void GuildDBInfo::set_has_battlelefttimes() {
  _has_bits_[0] |= 0x00400000u;
}
inline void GuildDBInfo::clear_has_battlelefttimes() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void GuildDBInfo::clear_battlelefttimes() {
  battlelefttimes_ = 0;
  clear_has_battlelefttimes();
  SetDirty();
}
inline ::google::protobuf::int32 GuildDBInfo::battlelefttimes() const {
  return battlelefttimes_;
}
inline void GuildDBInfo::set_battlelefttimes(::google::protobuf::int32 value) {
  SetDirty();
  set_has_battlelefttimes();
  battlelefttimes_ = value;
}

// required int32 battleroundwintimes = 24;
inline bool GuildDBInfo::has_battleroundwintimes() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void GuildDBInfo::set_has_battleroundwintimes() {
  _has_bits_[0] |= 0x00800000u;
}
inline void GuildDBInfo::clear_has_battleroundwintimes() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void GuildDBInfo::clear_battleroundwintimes() {
  battleroundwintimes_ = 0;
  clear_has_battleroundwintimes();
  SetDirty();
}
inline ::google::protobuf::int32 GuildDBInfo::battleroundwintimes() const {
  return battleroundwintimes_;
}
inline void GuildDBInfo::set_battleroundwintimes(::google::protobuf::int32 value) {
  SetDirty();
  set_has_battleroundwintimes();
  battleroundwintimes_ = value;
}

// required int32 battleroundtimes = 25;
inline bool GuildDBInfo::has_battleroundtimes() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void GuildDBInfo::set_has_battleroundtimes() {
  _has_bits_[0] |= 0x01000000u;
}
inline void GuildDBInfo::clear_has_battleroundtimes() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void GuildDBInfo::clear_battleroundtimes() {
  battleroundtimes_ = 0;
  clear_has_battleroundtimes();
  SetDirty();
}
inline ::google::protobuf::int32 GuildDBInfo::battleroundtimes() const {
  return battleroundtimes_;
}
inline void GuildDBInfo::set_battleroundtimes(::google::protobuf::int32 value) {
  SetDirty();
  set_has_battleroundtimes();
  battleroundtimes_ = value;
}

// required int32 battlescore = 26;
inline bool GuildDBInfo::has_battlescore() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void GuildDBInfo::set_has_battlescore() {
  _has_bits_[0] |= 0x02000000u;
}
inline void GuildDBInfo::clear_has_battlescore() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void GuildDBInfo::clear_battlescore() {
  battlescore_ = 0;
  clear_has_battlescore();
  SetDirty();
}
inline ::google::protobuf::int32 GuildDBInfo::battlescore() const {
  return battlescore_;
}
inline void GuildDBInfo::set_battlescore(::google::protobuf::int32 value) {
  SetDirty();
  set_has_battlescore();
  battlescore_ = value;
}

// required fixed32 createtime = 27;
inline bool GuildDBInfo::has_createtime() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void GuildDBInfo::set_has_createtime() {
  _has_bits_[0] |= 0x04000000u;
}
inline void GuildDBInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void GuildDBInfo::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
  SetDirty();
}
inline ::google::protobuf::uint32 GuildDBInfo::createtime() const {
  return createtime_;
}
inline void GuildDBInfo::set_createtime(::google::protobuf::uint32 value) {
  SetDirty();
  set_has_createtime();
  createtime_ = value;
}

// required fixed64 createguid = 28;
inline bool GuildDBInfo::has_createguid() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void GuildDBInfo::set_has_createguid() {
  _has_bits_[0] |= 0x08000000u;
}
inline void GuildDBInfo::clear_has_createguid() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void GuildDBInfo::clear_createguid() {
  createguid_ = GOOGLE_ULONGLONG(0);
  clear_has_createguid();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildDBInfo::createguid() const {
  return createguid_;
}
inline void GuildDBInfo::set_createguid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_createguid();
  createguid_ = value;
}

// required string createname = 29;
inline bool GuildDBInfo::has_createname() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void GuildDBInfo::set_has_createname() {
  _has_bits_[0] |= 0x10000000u;
}
inline void GuildDBInfo::clear_has_createname() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void GuildDBInfo::clear_createname() {
  if (createname_ != &::google::protobuf::internal::kEmptyString) {
    createname_->clear();
  }
  clear_has_createname();
  SetDirty();
}
inline const ::std::string& GuildDBInfo::createname() const {
  return *createname_;
}
inline void GuildDBInfo::set_createname(const ::std::string& value) {
  SetDirty();
  set_has_createname();
  if (createname_ == &::google::protobuf::internal::kEmptyString) {
    createname_ = new ::std::string;
  }
  createname_->assign(value);
}
inline void GuildDBInfo::set_createname(const char* value) {
  SetDirty();
  set_has_createname();
  if (createname_ == &::google::protobuf::internal::kEmptyString) {
    createname_ = new ::std::string;
  }
  createname_->assign(value);
}
inline void GuildDBInfo::set_createname(const char* value, size_t size) {
  SetDirty();
  set_has_createname();
  if (createname_ == &::google::protobuf::internal::kEmptyString) {
    createname_ = new ::std::string;
  }
  createname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildDBInfo::mutable_createname() {
  SetDirty();
  set_has_createname();
  if (createname_ == &::google::protobuf::internal::kEmptyString) {
    createname_ = new ::std::string;
  }
  return createname_;
}
inline ::std::string* GuildDBInfo::release_createname() {
  SetDirty();
  clear_has_createname();
  if (createname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = createname_;
    createname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildDBInfo::set_allocated_createname(::std::string* createname) {
  SetDirty();
  if (createname_ != &::google::protobuf::internal::kEmptyString) {
    delete createname_;
  }
  if (createname) {
    set_has_createname();
    createname_ = createname;
  } else {
    clear_has_createname();
    createname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SetGuildIconRR

// required string icon = 1;
inline bool SetGuildIconRR::has_icon() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetGuildIconRR::set_has_icon() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetGuildIconRR::clear_has_icon() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetGuildIconRR::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
  SetDirty();
}
inline const ::std::string& SetGuildIconRR::icon() const {
  return *icon_;
}
inline void SetGuildIconRR::set_icon(const ::std::string& value) {
  SetDirty();
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void SetGuildIconRR::set_icon(const char* value) {
  SetDirty();
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void SetGuildIconRR::set_icon(const char* value, size_t size) {
  SetDirty();
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetGuildIconRR::mutable_icon() {
  SetDirty();
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* SetGuildIconRR::release_icon() {
  SetDirty();
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SetGuildIconRR::set_allocated_icon(::std::string* icon) {
  SetDirty();
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PracticeInfo

// required fixed64 playerguid = 1;
inline bool PracticeInfo::has_playerguid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PracticeInfo::set_has_playerguid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PracticeInfo::clear_has_playerguid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PracticeInfo::clear_playerguid() {
  playerguid_ = GOOGLE_ULONGLONG(0);
  clear_has_playerguid();
  SetDirty();
}
inline ::google::protobuf::uint64 PracticeInfo::playerguid() const {
  return playerguid_;
}
inline void PracticeInfo::set_playerguid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_playerguid();
  playerguid_ = value;
}

// required int32 id = 2;
inline bool PracticeInfo::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PracticeInfo::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PracticeInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PracticeInfo::clear_id() {
  id_ = 0;
  clear_has_id();
  SetDirty();
}
inline ::google::protobuf::int32 PracticeInfo::id() const {
  return id_;
}
inline void PracticeInfo::set_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_id();
  id_ = value;
}

// required int32 level = 3;
inline bool PracticeInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PracticeInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PracticeInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PracticeInfo::clear_level() {
  level_ = 0;
  clear_has_level();
  SetDirty();
}
inline ::google::protobuf::int32 PracticeInfo::level() const {
  return level_;
}
inline void PracticeInfo::set_level(::google::protobuf::int32 value) {
  SetDirty();
  set_has_level();
  level_ = value;
}

// required int32 exp = 4;
inline bool PracticeInfo::has_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PracticeInfo::set_has_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PracticeInfo::clear_has_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PracticeInfo::clear_exp() {
  exp_ = 0;
  clear_has_exp();
  SetDirty();
}
inline ::google::protobuf::int32 PracticeInfo::exp() const {
  return exp_;
}
inline void PracticeInfo::set_exp(::google::protobuf::int32 value) {
  SetDirty();
  set_has_exp();
  exp_ = value;
}

// -------------------------------------------------------------------

// PlayerPracticeReq

// required int32 type = 1;
inline bool PlayerPracticeReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerPracticeReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerPracticeReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerPracticeReq::clear_type() {
  type_ = 0;
  clear_has_type();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerPracticeReq::type() const {
  return type_;
}
inline void PlayerPracticeReq::set_type(::google::protobuf::int32 value) {
  SetDirty();
  set_has_type();
  type_ = value;
}

// required int32 id = 2;
inline bool PlayerPracticeReq::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerPracticeReq::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerPracticeReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerPracticeReq::clear_id() {
  id_ = 0;
  clear_has_id();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerPracticeReq::id() const {
  return id_;
}
inline void PlayerPracticeReq::set_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// GetPracticeReq

// -------------------------------------------------------------------

// GetPracticeReply

// repeated .Packet.PracticeInfo list = 1;
inline int GetPracticeReply::list_size() const {
  return list_.size();
}
inline void GetPracticeReply::clear_list() {
  list_.Clear();
  SetDirty();
}
inline const ::Packet::PracticeInfo& GetPracticeReply::list(int index) const {
  return list_.Get(index);
}
inline ::Packet::PracticeInfo* GetPracticeReply::mutable_list(int index) {
  SetDirty();
  return list_.Mutable(index);
}
inline ::Packet::PracticeInfo* GetPracticeReply::add_list() {
  SetDirty();
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::PracticeInfo >&
GetPracticeReply::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::PracticeInfo >*
GetPracticeReply::mutable_list() {
  SetDirty();
  return &list_;
}

// -------------------------------------------------------------------

// GetGuildInfoReq

// -------------------------------------------------------------------

// GetGuildInfoReply

// required .Packet.GuildDBInfo info = 1;
inline bool GetGuildInfoReply::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetGuildInfoReply::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetGuildInfoReply::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetGuildInfoReply::clear_info() {
  if (info_ != NULL) info_->::Packet::GuildDBInfo::Clear();
  clear_has_info();
  SetDirty();
}
inline const ::Packet::GuildDBInfo& GetGuildInfoReply::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::Packet::GuildDBInfo* GetGuildInfoReply::mutable_info() {
  SetDirty();
  set_has_info();
  if (info_ == NULL) info_ = new ::Packet::GuildDBInfo;
  return info_;
}
inline ::Packet::GuildDBInfo* GetGuildInfoReply::release_info() {
  SetDirty();
  clear_has_info();
  ::Packet::GuildDBInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void GetGuildInfoReply::set_allocated_info(::Packet::GuildDBInfo* info) {
  SetDirty();
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// required int32 membersize = 2;
inline bool GetGuildInfoReply::has_membersize() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetGuildInfoReply::set_has_membersize() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetGuildInfoReply::clear_has_membersize() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetGuildInfoReply::clear_membersize() {
  membersize_ = 0;
  clear_has_membersize();
  SetDirty();
}
inline ::google::protobuf::int32 GetGuildInfoReply::membersize() const {
  return membersize_;
}
inline void GetGuildInfoReply::set_membersize(::google::protobuf::int32 value) {
  SetDirty();
  set_has_membersize();
  membersize_ = value;
}

// required int32 maxmembersize = 3;
inline bool GetGuildInfoReply::has_maxmembersize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetGuildInfoReply::set_has_maxmembersize() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetGuildInfoReply::clear_has_maxmembersize() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetGuildInfoReply::clear_maxmembersize() {
  maxmembersize_ = 0;
  clear_has_maxmembersize();
  SetDirty();
}
inline ::google::protobuf::int32 GetGuildInfoReply::maxmembersize() const {
  return maxmembersize_;
}
inline void GetGuildInfoReply::set_maxmembersize(::google::protobuf::int32 value) {
  SetDirty();
  set_has_maxmembersize();
  maxmembersize_ = value;
}

// required .Packet.GuildUser selfinfo = 4;
inline bool GetGuildInfoReply::has_selfinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetGuildInfoReply::set_has_selfinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetGuildInfoReply::clear_has_selfinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetGuildInfoReply::clear_selfinfo() {
  if (selfinfo_ != NULL) selfinfo_->::Packet::GuildUser::Clear();
  clear_has_selfinfo();
  SetDirty();
}
inline const ::Packet::GuildUser& GetGuildInfoReply::selfinfo() const {
  return selfinfo_ != NULL ? *selfinfo_ : *default_instance_->selfinfo_;
}
inline ::Packet::GuildUser* GetGuildInfoReply::mutable_selfinfo() {
  SetDirty();
  set_has_selfinfo();
  if (selfinfo_ == NULL) selfinfo_ = new ::Packet::GuildUser;
  return selfinfo_;
}
inline ::Packet::GuildUser* GetGuildInfoReply::release_selfinfo() {
  SetDirty();
  clear_has_selfinfo();
  ::Packet::GuildUser* temp = selfinfo_;
  selfinfo_ = NULL;
  return temp;
}
inline void GetGuildInfoReply::set_allocated_selfinfo(::Packet::GuildUser* selfinfo) {
  SetDirty();
  delete selfinfo_;
  selfinfo_ = selfinfo;
  if (selfinfo) {
    set_has_selfinfo();
  } else {
    clear_has_selfinfo();
  }
}

// -------------------------------------------------------------------

// GetGuildUserListInfoReq

// -------------------------------------------------------------------

// GetGuildUserListInfoReply

// repeated .Packet.GuildUser userlist = 1;
inline int GetGuildUserListInfoReply::userlist_size() const {
  return userlist_.size();
}
inline void GetGuildUserListInfoReply::clear_userlist() {
  userlist_.Clear();
  SetDirty();
}
inline const ::Packet::GuildUser& GetGuildUserListInfoReply::userlist(int index) const {
  return userlist_.Get(index);
}
inline ::Packet::GuildUser* GetGuildUserListInfoReply::mutable_userlist(int index) {
  SetDirty();
  return userlist_.Mutable(index);
}
inline ::Packet::GuildUser* GetGuildUserListInfoReply::add_userlist() {
  SetDirty();
  return userlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::GuildUser >&
GetGuildUserListInfoReply::userlist() const {
  return userlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::GuildUser >*
GetGuildUserListInfoReply::mutable_userlist() {
  SetDirty();
  return &userlist_;
}

// -------------------------------------------------------------------

// CreateGuildReq

// required string name = 1;
inline bool CreateGuildReq::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateGuildReq::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateGuildReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateGuildReq::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
  SetDirty();
}
inline const ::std::string& CreateGuildReq::name() const {
  return *name_;
}
inline void CreateGuildReq::set_name(const ::std::string& value) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CreateGuildReq::set_name(const char* value) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CreateGuildReq::set_name(const char* value, size_t size) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateGuildReq::mutable_name() {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CreateGuildReq::release_name() {
  SetDirty();
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreateGuildReq::set_allocated_name(::std::string* name) {
  SetDirty();
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string notice = 2;
inline bool CreateGuildReq::has_notice() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateGuildReq::set_has_notice() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateGuildReq::clear_has_notice() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateGuildReq::clear_notice() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    notice_->clear();
  }
  clear_has_notice();
  SetDirty();
}
inline const ::std::string& CreateGuildReq::notice() const {
  return *notice_;
}
inline void CreateGuildReq::set_notice(const ::std::string& value) {
  SetDirty();
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void CreateGuildReq::set_notice(const char* value) {
  SetDirty();
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void CreateGuildReq::set_notice(const char* value, size_t size) {
  SetDirty();
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateGuildReq::mutable_notice() {
  SetDirty();
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  return notice_;
}
inline ::std::string* CreateGuildReq::release_notice() {
  SetDirty();
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreateGuildReq::set_allocated_notice(::std::string* notice) {
  SetDirty();
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FindGuildReq

// optional string name = 1;
inline bool FindGuildReq::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FindGuildReq::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FindGuildReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FindGuildReq::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
  SetDirty();
}
inline const ::std::string& FindGuildReq::name() const {
  return *name_;
}
inline void FindGuildReq::set_name(const ::std::string& value) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FindGuildReq::set_name(const char* value) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FindGuildReq::set_name(const char* value, size_t size) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FindGuildReq::mutable_name() {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FindGuildReq::release_name() {
  SetDirty();
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FindGuildReq::set_allocated_name(::std::string* name) {
  SetDirty();
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional fixed64 guid = 2;
inline bool FindGuildReq::has_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FindGuildReq::set_has_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FindGuildReq::clear_has_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FindGuildReq::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 FindGuildReq::guid() const {
  return guid_;
}
inline void FindGuildReq::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// -------------------------------------------------------------------

// ApplyGuildReq

// required fixed64 guid = 1;
inline bool ApplyGuildReq::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ApplyGuildReq::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ApplyGuildReq::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ApplyGuildReq::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 ApplyGuildReq::guid() const {
  return guid_;
}
inline void ApplyGuildReq::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// -------------------------------------------------------------------

// OneKeyApplyGuildReq

// -------------------------------------------------------------------

// InviteyAddGuildReq

// required fixed64 playerguid = 1;
inline bool InviteyAddGuildReq::has_playerguid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InviteyAddGuildReq::set_has_playerguid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InviteyAddGuildReq::clear_has_playerguid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InviteyAddGuildReq::clear_playerguid() {
  playerguid_ = GOOGLE_ULONGLONG(0);
  clear_has_playerguid();
  SetDirty();
}
inline ::google::protobuf::uint64 InviteyAddGuildReq::playerguid() const {
  return playerguid_;
}
inline void InviteyAddGuildReq::set_playerguid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_playerguid();
  playerguid_ = value;
}

// -------------------------------------------------------------------

// AskInviteyAgreeGuildReply

// required fixed64 guildid = 1;
inline bool AskInviteyAgreeGuildReply::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskInviteyAgreeGuildReply::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskInviteyAgreeGuildReply::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskInviteyAgreeGuildReply::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
  SetDirty();
}
inline ::google::protobuf::uint64 AskInviteyAgreeGuildReply::guildid() const {
  return guildid_;
}
inline void AskInviteyAgreeGuildReply::set_guildid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guildid();
  guildid_ = value;
}

// required string guildname = 2;
inline bool AskInviteyAgreeGuildReply::has_guildname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AskInviteyAgreeGuildReply::set_has_guildname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AskInviteyAgreeGuildReply::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AskInviteyAgreeGuildReply::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
  SetDirty();
}
inline const ::std::string& AskInviteyAgreeGuildReply::guildname() const {
  return *guildname_;
}
inline void AskInviteyAgreeGuildReply::set_guildname(const ::std::string& value) {
  SetDirty();
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void AskInviteyAgreeGuildReply::set_guildname(const char* value) {
  SetDirty();
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void AskInviteyAgreeGuildReply::set_guildname(const char* value, size_t size) {
  SetDirty();
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AskInviteyAgreeGuildReply::mutable_guildname() {
  SetDirty();
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* AskInviteyAgreeGuildReply::release_guildname() {
  SetDirty();
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AskInviteyAgreeGuildReply::set_allocated_guildname(::std::string* guildname) {
  SetDirty();
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string guildinvitename = 3;
inline bool AskInviteyAgreeGuildReply::has_guildinvitename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AskInviteyAgreeGuildReply::set_has_guildinvitename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AskInviteyAgreeGuildReply::clear_has_guildinvitename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AskInviteyAgreeGuildReply::clear_guildinvitename() {
  if (guildinvitename_ != &::google::protobuf::internal::kEmptyString) {
    guildinvitename_->clear();
  }
  clear_has_guildinvitename();
  SetDirty();
}
inline const ::std::string& AskInviteyAgreeGuildReply::guildinvitename() const {
  return *guildinvitename_;
}
inline void AskInviteyAgreeGuildReply::set_guildinvitename(const ::std::string& value) {
  SetDirty();
  set_has_guildinvitename();
  if (guildinvitename_ == &::google::protobuf::internal::kEmptyString) {
    guildinvitename_ = new ::std::string;
  }
  guildinvitename_->assign(value);
}
inline void AskInviteyAgreeGuildReply::set_guildinvitename(const char* value) {
  SetDirty();
  set_has_guildinvitename();
  if (guildinvitename_ == &::google::protobuf::internal::kEmptyString) {
    guildinvitename_ = new ::std::string;
  }
  guildinvitename_->assign(value);
}
inline void AskInviteyAgreeGuildReply::set_guildinvitename(const char* value, size_t size) {
  SetDirty();
  set_has_guildinvitename();
  if (guildinvitename_ == &::google::protobuf::internal::kEmptyString) {
    guildinvitename_ = new ::std::string;
  }
  guildinvitename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AskInviteyAgreeGuildReply::mutable_guildinvitename() {
  SetDirty();
  set_has_guildinvitename();
  if (guildinvitename_ == &::google::protobuf::internal::kEmptyString) {
    guildinvitename_ = new ::std::string;
  }
  return guildinvitename_;
}
inline ::std::string* AskInviteyAgreeGuildReply::release_guildinvitename() {
  SetDirty();
  clear_has_guildinvitename();
  if (guildinvitename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildinvitename_;
    guildinvitename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AskInviteyAgreeGuildReply::set_allocated_guildinvitename(::std::string* guildinvitename) {
  SetDirty();
  if (guildinvitename_ != &::google::protobuf::internal::kEmptyString) {
    delete guildinvitename_;
  }
  if (guildinvitename) {
    set_has_guildinvitename();
    guildinvitename_ = guildinvitename;
  } else {
    clear_has_guildinvitename();
    guildinvitename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required fixed64 guildinviteguid = 4;
inline bool AskInviteyAgreeGuildReply::has_guildinviteguid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AskInviteyAgreeGuildReply::set_has_guildinviteguid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AskInviteyAgreeGuildReply::clear_has_guildinviteguid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AskInviteyAgreeGuildReply::clear_guildinviteguid() {
  guildinviteguid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildinviteguid();
  SetDirty();
}
inline ::google::protobuf::uint64 AskInviteyAgreeGuildReply::guildinviteguid() const {
  return guildinviteguid_;
}
inline void AskInviteyAgreeGuildReply::set_guildinviteguid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guildinviteguid();
  guildinviteguid_ = value;
}

// -------------------------------------------------------------------

// InviteyAgreeGuildReq

// required fixed64 guildid = 1;
inline bool InviteyAgreeGuildReq::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InviteyAgreeGuildReq::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InviteyAgreeGuildReq::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InviteyAgreeGuildReq::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
  SetDirty();
}
inline ::google::protobuf::uint64 InviteyAgreeGuildReq::guildid() const {
  return guildid_;
}
inline void InviteyAgreeGuildReq::set_guildid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guildid();
  guildid_ = value;
}

// required bool agree = 2;
inline bool InviteyAgreeGuildReq::has_agree() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InviteyAgreeGuildReq::set_has_agree() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InviteyAgreeGuildReq::clear_has_agree() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InviteyAgreeGuildReq::clear_agree() {
  agree_ = false;
  clear_has_agree();
  SetDirty();
}
inline bool InviteyAgreeGuildReq::agree() const {
  return agree_;
}
inline void InviteyAgreeGuildReq::set_agree(bool value) {
  SetDirty();
  set_has_agree();
  agree_ = value;
}

// required fixed64 guildidinviteguid = 3;
inline bool InviteyAgreeGuildReq::has_guildidinviteguid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InviteyAgreeGuildReq::set_has_guildidinviteguid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InviteyAgreeGuildReq::clear_has_guildidinviteguid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InviteyAgreeGuildReq::clear_guildidinviteguid() {
  guildidinviteguid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildidinviteguid();
  SetDirty();
}
inline ::google::protobuf::uint64 InviteyAgreeGuildReq::guildidinviteguid() const {
  return guildidinviteguid_;
}
inline void InviteyAgreeGuildReq::set_guildidinviteguid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guildidinviteguid();
  guildidinviteguid_ = value;
}

// -------------------------------------------------------------------

// AgreeApplyGuildReq

// required fixed64 playerguid = 1;
inline bool AgreeApplyGuildReq::has_playerguid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AgreeApplyGuildReq::set_has_playerguid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AgreeApplyGuildReq::clear_has_playerguid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AgreeApplyGuildReq::clear_playerguid() {
  playerguid_ = GOOGLE_ULONGLONG(0);
  clear_has_playerguid();
  SetDirty();
}
inline ::google::protobuf::uint64 AgreeApplyGuildReq::playerguid() const {
  return playerguid_;
}
inline void AgreeApplyGuildReq::set_playerguid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_playerguid();
  playerguid_ = value;
}

// required bool agree = 2;
inline bool AgreeApplyGuildReq::has_agree() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AgreeApplyGuildReq::set_has_agree() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AgreeApplyGuildReq::clear_has_agree() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AgreeApplyGuildReq::clear_agree() {
  agree_ = false;
  clear_has_agree();
  SetDirty();
}
inline bool AgreeApplyGuildReq::agree() const {
  return agree_;
}
inline void AgreeApplyGuildReq::set_agree(bool value) {
  SetDirty();
  set_has_agree();
  agree_ = value;
}

// -------------------------------------------------------------------

// UpdatePlayerGuildInfo

// required fixed64 guildid = 1;
inline bool UpdatePlayerGuildInfo::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdatePlayerGuildInfo::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdatePlayerGuildInfo::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdatePlayerGuildInfo::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
  SetDirty();
}
inline ::google::protobuf::uint64 UpdatePlayerGuildInfo::guildid() const {
  return guildid_;
}
inline void UpdatePlayerGuildInfo::set_guildid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guildid();
  guildid_ = value;
}

// required string guildname = 2;
inline bool UpdatePlayerGuildInfo::has_guildname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdatePlayerGuildInfo::set_has_guildname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdatePlayerGuildInfo::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdatePlayerGuildInfo::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
  SetDirty();
}
inline const ::std::string& UpdatePlayerGuildInfo::guildname() const {
  return *guildname_;
}
inline void UpdatePlayerGuildInfo::set_guildname(const ::std::string& value) {
  SetDirty();
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void UpdatePlayerGuildInfo::set_guildname(const char* value) {
  SetDirty();
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void UpdatePlayerGuildInfo::set_guildname(const char* value, size_t size) {
  SetDirty();
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdatePlayerGuildInfo::mutable_guildname() {
  SetDirty();
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* UpdatePlayerGuildInfo::release_guildname() {
  SetDirty();
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UpdatePlayerGuildInfo::set_allocated_guildname(::std::string* guildname) {
  SetDirty();
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GuildBaseInfo

// required fixed64 guid = 1;
inline bool GuildBaseInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildBaseInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildBaseInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildBaseInfo::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildBaseInfo::guid() const {
  return guid_;
}
inline void GuildBaseInfo::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// required string name = 2;
inline bool GuildBaseInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildBaseInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildBaseInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildBaseInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
  SetDirty();
}
inline const ::std::string& GuildBaseInfo::name() const {
  return *name_;
}
inline void GuildBaseInfo::set_name(const ::std::string& value) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GuildBaseInfo::set_name(const char* value) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GuildBaseInfo::set_name(const char* value, size_t size) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildBaseInfo::mutable_name() {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GuildBaseInfo::release_name() {
  SetDirty();
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildBaseInfo::set_allocated_name(::std::string* name) {
  SetDirty();
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string lastname = 3;
inline bool GuildBaseInfo::has_lastname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildBaseInfo::set_has_lastname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildBaseInfo::clear_has_lastname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildBaseInfo::clear_lastname() {
  if (lastname_ != &::google::protobuf::internal::kEmptyString) {
    lastname_->clear();
  }
  clear_has_lastname();
  SetDirty();
}
inline const ::std::string& GuildBaseInfo::lastname() const {
  return *lastname_;
}
inline void GuildBaseInfo::set_lastname(const ::std::string& value) {
  SetDirty();
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    lastname_ = new ::std::string;
  }
  lastname_->assign(value);
}
inline void GuildBaseInfo::set_lastname(const char* value) {
  SetDirty();
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    lastname_ = new ::std::string;
  }
  lastname_->assign(value);
}
inline void GuildBaseInfo::set_lastname(const char* value, size_t size) {
  SetDirty();
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    lastname_ = new ::std::string;
  }
  lastname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildBaseInfo::mutable_lastname() {
  SetDirty();
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    lastname_ = new ::std::string;
  }
  return lastname_;
}
inline ::std::string* GuildBaseInfo::release_lastname() {
  SetDirty();
  clear_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lastname_;
    lastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildBaseInfo::set_allocated_lastname(::std::string* lastname) {
  SetDirty();
  if (lastname_ != &::google::protobuf::internal::kEmptyString) {
    delete lastname_;
  }
  if (lastname) {
    set_has_lastname();
    lastname_ = lastname;
  } else {
    clear_has_lastname();
    lastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string notice = 4;
inline bool GuildBaseInfo::has_notice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildBaseInfo::set_has_notice() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildBaseInfo::clear_has_notice() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildBaseInfo::clear_notice() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    notice_->clear();
  }
  clear_has_notice();
  SetDirty();
}
inline const ::std::string& GuildBaseInfo::notice() const {
  return *notice_;
}
inline void GuildBaseInfo::set_notice(const ::std::string& value) {
  SetDirty();
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void GuildBaseInfo::set_notice(const char* value) {
  SetDirty();
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void GuildBaseInfo::set_notice(const char* value, size_t size) {
  SetDirty();
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildBaseInfo::mutable_notice() {
  SetDirty();
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  return notice_;
}
inline ::std::string* GuildBaseInfo::release_notice() {
  SetDirty();
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildBaseInfo::set_allocated_notice(::std::string* notice) {
  SetDirty();
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 guildlevel = 5;
inline bool GuildBaseInfo::has_guildlevel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuildBaseInfo::set_has_guildlevel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuildBaseInfo::clear_has_guildlevel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuildBaseInfo::clear_guildlevel() {
  guildlevel_ = 0;
  clear_has_guildlevel();
  SetDirty();
}
inline ::google::protobuf::int32 GuildBaseInfo::guildlevel() const {
  return guildlevel_;
}
inline void GuildBaseInfo::set_guildlevel(::google::protobuf::int32 value) {
  SetDirty();
  set_has_guildlevel();
  guildlevel_ = value;
}

// required int32 membersize = 6;
inline bool GuildBaseInfo::has_membersize() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GuildBaseInfo::set_has_membersize() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GuildBaseInfo::clear_has_membersize() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GuildBaseInfo::clear_membersize() {
  membersize_ = 0;
  clear_has_membersize();
  SetDirty();
}
inline ::google::protobuf::int32 GuildBaseInfo::membersize() const {
  return membersize_;
}
inline void GuildBaseInfo::set_membersize(::google::protobuf::int32 value) {
  SetDirty();
  set_has_membersize();
  membersize_ = value;
}

// required int32 maxmembersize = 7;
inline bool GuildBaseInfo::has_maxmembersize() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GuildBaseInfo::set_has_maxmembersize() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GuildBaseInfo::clear_has_maxmembersize() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GuildBaseInfo::clear_maxmembersize() {
  maxmembersize_ = 0;
  clear_has_maxmembersize();
  SetDirty();
}
inline ::google::protobuf::int32 GuildBaseInfo::maxmembersize() const {
  return maxmembersize_;
}
inline void GuildBaseInfo::set_maxmembersize(::google::protobuf::int32 value) {
  SetDirty();
  set_has_maxmembersize();
  maxmembersize_ = value;
}

// required string chieftainname = 8;
inline bool GuildBaseInfo::has_chieftainname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GuildBaseInfo::set_has_chieftainname() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GuildBaseInfo::clear_has_chieftainname() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GuildBaseInfo::clear_chieftainname() {
  if (chieftainname_ != &::google::protobuf::internal::kEmptyString) {
    chieftainname_->clear();
  }
  clear_has_chieftainname();
  SetDirty();
}
inline const ::std::string& GuildBaseInfo::chieftainname() const {
  return *chieftainname_;
}
inline void GuildBaseInfo::set_chieftainname(const ::std::string& value) {
  SetDirty();
  set_has_chieftainname();
  if (chieftainname_ == &::google::protobuf::internal::kEmptyString) {
    chieftainname_ = new ::std::string;
  }
  chieftainname_->assign(value);
}
inline void GuildBaseInfo::set_chieftainname(const char* value) {
  SetDirty();
  set_has_chieftainname();
  if (chieftainname_ == &::google::protobuf::internal::kEmptyString) {
    chieftainname_ = new ::std::string;
  }
  chieftainname_->assign(value);
}
inline void GuildBaseInfo::set_chieftainname(const char* value, size_t size) {
  SetDirty();
  set_has_chieftainname();
  if (chieftainname_ == &::google::protobuf::internal::kEmptyString) {
    chieftainname_ = new ::std::string;
  }
  chieftainname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildBaseInfo::mutable_chieftainname() {
  SetDirty();
  set_has_chieftainname();
  if (chieftainname_ == &::google::protobuf::internal::kEmptyString) {
    chieftainname_ = new ::std::string;
  }
  return chieftainname_;
}
inline ::std::string* GuildBaseInfo::release_chieftainname() {
  SetDirty();
  clear_has_chieftainname();
  if (chieftainname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = chieftainname_;
    chieftainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildBaseInfo::set_allocated_chieftainname(::std::string* chieftainname) {
  SetDirty();
  if (chieftainname_ != &::google::protobuf::internal::kEmptyString) {
    delete chieftainname_;
  }
  if (chieftainname) {
    set_has_chieftainname();
    chieftainname_ = chieftainname;
  } else {
    clear_has_chieftainname();
    chieftainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required fixed64 chieftainguid = 9;
inline bool GuildBaseInfo::has_chieftainguid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GuildBaseInfo::set_has_chieftainguid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GuildBaseInfo::clear_has_chieftainguid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GuildBaseInfo::clear_chieftainguid() {
  chieftainguid_ = GOOGLE_ULONGLONG(0);
  clear_has_chieftainguid();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildBaseInfo::chieftainguid() const {
  return chieftainguid_;
}
inline void GuildBaseInfo::set_chieftainguid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_chieftainguid();
  chieftainguid_ = value;
}

// required fixed32 createtime = 10;
inline bool GuildBaseInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GuildBaseInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GuildBaseInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GuildBaseInfo::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
  SetDirty();
}
inline ::google::protobuf::uint32 GuildBaseInfo::createtime() const {
  return createtime_;
}
inline void GuildBaseInfo::set_createtime(::google::protobuf::uint32 value) {
  SetDirty();
  set_has_createtime();
  createtime_ = value;
}

// -------------------------------------------------------------------

// GetGuildListReq

// -------------------------------------------------------------------

// GuildBaseListReply

// repeated .Packet.GuildBaseInfo list = 1;
inline int GuildBaseListReply::list_size() const {
  return list_.size();
}
inline void GuildBaseListReply::clear_list() {
  list_.Clear();
  SetDirty();
}
inline const ::Packet::GuildBaseInfo& GuildBaseListReply::list(int index) const {
  return list_.Get(index);
}
inline ::Packet::GuildBaseInfo* GuildBaseListReply::mutable_list(int index) {
  SetDirty();
  return list_.Mutable(index);
}
inline ::Packet::GuildBaseInfo* GuildBaseListReply::add_list() {
  SetDirty();
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::GuildBaseInfo >&
GuildBaseListReply::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::GuildBaseInfo >*
GuildBaseListReply::mutable_list() {
  SetDirty();
  return &list_;
}

// -------------------------------------------------------------------

// ApplyGuildPlayerInfo

// required fixed64 playerguid = 1;
inline bool ApplyGuildPlayerInfo::has_playerguid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ApplyGuildPlayerInfo::set_has_playerguid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ApplyGuildPlayerInfo::clear_has_playerguid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ApplyGuildPlayerInfo::clear_playerguid() {
  playerguid_ = GOOGLE_ULONGLONG(0);
  clear_has_playerguid();
  SetDirty();
}
inline ::google::protobuf::uint64 ApplyGuildPlayerInfo::playerguid() const {
  return playerguid_;
}
inline void ApplyGuildPlayerInfo::set_playerguid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_playerguid();
  playerguid_ = value;
}

// required string playername = 2;
inline bool ApplyGuildPlayerInfo::has_playername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ApplyGuildPlayerInfo::set_has_playername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ApplyGuildPlayerInfo::clear_has_playername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ApplyGuildPlayerInfo::clear_playername() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    playername_->clear();
  }
  clear_has_playername();
  SetDirty();
}
inline const ::std::string& ApplyGuildPlayerInfo::playername() const {
  return *playername_;
}
inline void ApplyGuildPlayerInfo::set_playername(const ::std::string& value) {
  SetDirty();
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void ApplyGuildPlayerInfo::set_playername(const char* value) {
  SetDirty();
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void ApplyGuildPlayerInfo::set_playername(const char* value, size_t size) {
  SetDirty();
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ApplyGuildPlayerInfo::mutable_playername() {
  SetDirty();
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  return playername_;
}
inline ::std::string* ApplyGuildPlayerInfo::release_playername() {
  SetDirty();
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ApplyGuildPlayerInfo::set_allocated_playername(::std::string* playername) {
  SetDirty();
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 playerlevel = 3;
inline bool ApplyGuildPlayerInfo::has_playerlevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ApplyGuildPlayerInfo::set_has_playerlevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ApplyGuildPlayerInfo::clear_has_playerlevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ApplyGuildPlayerInfo::clear_playerlevel() {
  playerlevel_ = 0;
  clear_has_playerlevel();
  SetDirty();
}
inline ::google::protobuf::int32 ApplyGuildPlayerInfo::playerlevel() const {
  return playerlevel_;
}
inline void ApplyGuildPlayerInfo::set_playerlevel(::google::protobuf::int32 value) {
  SetDirty();
  set_has_playerlevel();
  playerlevel_ = value;
}

// required .Packet.Professions profession = 4;
inline bool ApplyGuildPlayerInfo::has_profession() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ApplyGuildPlayerInfo::set_has_profession() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ApplyGuildPlayerInfo::clear_has_profession() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ApplyGuildPlayerInfo::clear_profession() {
  profession_ = 0;
  clear_has_profession();
  SetDirty();
}
inline ::Packet::Professions ApplyGuildPlayerInfo::profession() const {
  return static_cast< ::Packet::Professions >(profession_);
}
inline void ApplyGuildPlayerInfo::set_profession(::Packet::Professions value) {
  assert(::Packet::Professions_IsValid(value));
  SetDirty();
  set_has_profession();
  profession_ = value;
}

// -------------------------------------------------------------------

// ApplyGuildPlayerListReq

// -------------------------------------------------------------------

// ApplyGuildPlayerListReply

// repeated .Packet.ApplyGuildPlayerInfo list = 1;
inline int ApplyGuildPlayerListReply::list_size() const {
  return list_.size();
}
inline void ApplyGuildPlayerListReply::clear_list() {
  list_.Clear();
  SetDirty();
}
inline const ::Packet::ApplyGuildPlayerInfo& ApplyGuildPlayerListReply::list(int index) const {
  return list_.Get(index);
}
inline ::Packet::ApplyGuildPlayerInfo* ApplyGuildPlayerListReply::mutable_list(int index) {
  SetDirty();
  return list_.Mutable(index);
}
inline ::Packet::ApplyGuildPlayerInfo* ApplyGuildPlayerListReply::add_list() {
  SetDirty();
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::ApplyGuildPlayerInfo >&
ApplyGuildPlayerListReply::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::ApplyGuildPlayerInfo >*
ApplyGuildPlayerListReply::mutable_list() {
  SetDirty();
  return &list_;
}

// -------------------------------------------------------------------

// ClearApplyGuildPlayerListReq

// -------------------------------------------------------------------

// SetGuildNameRR

// required string name = 1;
inline bool SetGuildNameRR::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetGuildNameRR::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetGuildNameRR::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetGuildNameRR::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
  SetDirty();
}
inline const ::std::string& SetGuildNameRR::name() const {
  return *name_;
}
inline void SetGuildNameRR::set_name(const ::std::string& value) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SetGuildNameRR::set_name(const char* value) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SetGuildNameRR::set_name(const char* value, size_t size) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetGuildNameRR::mutable_name() {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SetGuildNameRR::release_name() {
  SetDirty();
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SetGuildNameRR::set_allocated_name(::std::string* name) {
  SetDirty();
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string lastname = 2;
inline bool SetGuildNameRR::has_lastname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetGuildNameRR::set_has_lastname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetGuildNameRR::clear_has_lastname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetGuildNameRR::clear_lastname() {
  if (lastname_ != &::google::protobuf::internal::kEmptyString) {
    lastname_->clear();
  }
  clear_has_lastname();
  SetDirty();
}
inline const ::std::string& SetGuildNameRR::lastname() const {
  return *lastname_;
}
inline void SetGuildNameRR::set_lastname(const ::std::string& value) {
  SetDirty();
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    lastname_ = new ::std::string;
  }
  lastname_->assign(value);
}
inline void SetGuildNameRR::set_lastname(const char* value) {
  SetDirty();
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    lastname_ = new ::std::string;
  }
  lastname_->assign(value);
}
inline void SetGuildNameRR::set_lastname(const char* value, size_t size) {
  SetDirty();
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    lastname_ = new ::std::string;
  }
  lastname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetGuildNameRR::mutable_lastname() {
  SetDirty();
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    lastname_ = new ::std::string;
  }
  return lastname_;
}
inline ::std::string* SetGuildNameRR::release_lastname() {
  SetDirty();
  clear_has_lastname();
  if (lastname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lastname_;
    lastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SetGuildNameRR::set_allocated_lastname(::std::string* lastname) {
  SetDirty();
  if (lastname_ != &::google::protobuf::internal::kEmptyString) {
    delete lastname_;
  }
  if (lastname) {
    set_has_lastname();
    lastname_ = lastname;
  } else {
    clear_has_lastname();
    lastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SetGuildNoticeRR

// required string notice = 1;
inline bool SetGuildNoticeRR::has_notice() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetGuildNoticeRR::set_has_notice() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetGuildNoticeRR::clear_has_notice() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetGuildNoticeRR::clear_notice() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    notice_->clear();
  }
  clear_has_notice();
  SetDirty();
}
inline const ::std::string& SetGuildNoticeRR::notice() const {
  return *notice_;
}
inline void SetGuildNoticeRR::set_notice(const ::std::string& value) {
  SetDirty();
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void SetGuildNoticeRR::set_notice(const char* value) {
  SetDirty();
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void SetGuildNoticeRR::set_notice(const char* value, size_t size) {
  SetDirty();
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetGuildNoticeRR::mutable_notice() {
  SetDirty();
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  return notice_;
}
inline ::std::string* SetGuildNoticeRR::release_notice() {
  SetDirty();
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SetGuildNoticeRR::set_allocated_notice(::std::string* notice) {
  SetDirty();
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GuildDonationReq

// required int32 type = 1;
inline bool GuildDonationReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildDonationReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildDonationReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildDonationReq::clear_type() {
  type_ = 0;
  clear_has_type();
  SetDirty();
}
inline ::google::protobuf::int32 GuildDonationReq::type() const {
  return type_;
}
inline void GuildDonationReq::set_type(::google::protobuf::int32 value) {
  SetDirty();
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// DonationFlagUpdate

// required int32 bdonation = 7;
inline bool DonationFlagUpdate::has_bdonation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DonationFlagUpdate::set_has_bdonation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DonationFlagUpdate::clear_has_bdonation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DonationFlagUpdate::clear_bdonation() {
  bdonation_ = 0;
  clear_has_bdonation();
  SetDirty();
}
inline ::google::protobuf::int32 DonationFlagUpdate::bdonation() const {
  return bdonation_;
}
inline void DonationFlagUpdate::set_bdonation(::google::protobuf::int32 value) {
  SetDirty();
  set_has_bdonation();
  bdonation_ = value;
}

// -------------------------------------------------------------------

// GuildMoneyUpdate

// required int32 guildmoney = 1;
inline bool GuildMoneyUpdate::has_guildmoney() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildMoneyUpdate::set_has_guildmoney() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildMoneyUpdate::clear_has_guildmoney() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildMoneyUpdate::clear_guildmoney() {
  guildmoney_ = 0;
  clear_has_guildmoney();
  SetDirty();
}
inline ::google::protobuf::int32 GuildMoneyUpdate::guildmoney() const {
  return guildmoney_;
}
inline void GuildMoneyUpdate::set_guildmoney(::google::protobuf::int32 value) {
  SetDirty();
  set_has_guildmoney();
  guildmoney_ = value;
}

// -------------------------------------------------------------------

// GuildImpeachReply

// required .Packet.GuildImpeach impeach = 1;
inline bool GuildImpeachReply::has_impeach() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildImpeachReply::set_has_impeach() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildImpeachReply::clear_has_impeach() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildImpeachReply::clear_impeach() {
  if (impeach_ != NULL) impeach_->::Packet::GuildImpeach::Clear();
  clear_has_impeach();
  SetDirty();
}
inline const ::Packet::GuildImpeach& GuildImpeachReply::impeach() const {
  return impeach_ != NULL ? *impeach_ : *default_instance_->impeach_;
}
inline ::Packet::GuildImpeach* GuildImpeachReply::mutable_impeach() {
  SetDirty();
  set_has_impeach();
  if (impeach_ == NULL) impeach_ = new ::Packet::GuildImpeach;
  return impeach_;
}
inline ::Packet::GuildImpeach* GuildImpeachReply::release_impeach() {
  SetDirty();
  clear_has_impeach();
  ::Packet::GuildImpeach* temp = impeach_;
  impeach_ = NULL;
  return temp;
}
inline void GuildImpeachReply::set_allocated_impeach(::Packet::GuildImpeach* impeach) {
  SetDirty();
  delete impeach_;
  impeach_ = impeach;
  if (impeach) {
    set_has_impeach();
  } else {
    clear_has_impeach();
  }
}

// -------------------------------------------------------------------

// SetGuildUserPositionRR

// required fixed64 playerguid = 1;
inline bool SetGuildUserPositionRR::has_playerguid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetGuildUserPositionRR::set_has_playerguid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetGuildUserPositionRR::clear_has_playerguid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetGuildUserPositionRR::clear_playerguid() {
  playerguid_ = GOOGLE_ULONGLONG(0);
  clear_has_playerguid();
  SetDirty();
}
inline ::google::protobuf::uint64 SetGuildUserPositionRR::playerguid() const {
  return playerguid_;
}
inline void SetGuildUserPositionRR::set_playerguid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_playerguid();
  playerguid_ = value;
}

// required .Packet.GuildPosition position = 2;
inline bool SetGuildUserPositionRR::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetGuildUserPositionRR::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetGuildUserPositionRR::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetGuildUserPositionRR::clear_position() {
  position_ = 0;
  clear_has_position();
  SetDirty();
}
inline ::Packet::GuildPosition SetGuildUserPositionRR::position() const {
  return static_cast< ::Packet::GuildPosition >(position_);
}
inline void SetGuildUserPositionRR::set_position(::Packet::GuildPosition value) {
  assert(::Packet::GuildPosition_IsValid(value));
  SetDirty();
  set_has_position();
  position_ = value;
}

// -------------------------------------------------------------------

// GetGuildBonusReq

// -------------------------------------------------------------------

// GuildCDKInfo

// required fixed64 guid = 1;
inline bool GuildCDKInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildCDKInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildCDKInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildCDKInfo::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildCDKInfo::guid() const {
  return guid_;
}
inline void GuildCDKInfo::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// required fixed64 playerid = 2;
inline bool GuildCDKInfo::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildCDKInfo::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildCDKInfo::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildCDKInfo::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
  clear_has_playerid();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildCDKInfo::playerid() const {
  return playerid_;
}
inline void GuildCDKInfo::set_playerid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_playerid();
  playerid_ = value;
}

// required int32 configid = 3;
inline bool GuildCDKInfo::has_configid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildCDKInfo::set_has_configid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildCDKInfo::clear_has_configid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildCDKInfo::clear_configid() {
  configid_ = 0;
  clear_has_configid();
  SetDirty();
}
inline ::google::protobuf::int32 GuildCDKInfo::configid() const {
  return configid_;
}
inline void GuildCDKInfo::set_configid(::google::protobuf::int32 value) {
  SetDirty();
  set_has_configid();
  configid_ = value;
}

// required int32 count = 4;
inline bool GuildCDKInfo::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildCDKInfo::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildCDKInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildCDKInfo::clear_count() {
  count_ = 0;
  clear_has_count();
  SetDirty();
}
inline ::google::protobuf::int32 GuildCDKInfo::count() const {
  return count_;
}
inline void GuildCDKInfo::set_count(::google::protobuf::int32 value) {
  SetDirty();
  set_has_count();
  count_ = value;
}

// required string playername = 5;
inline bool GuildCDKInfo::has_playername() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuildCDKInfo::set_has_playername() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuildCDKInfo::clear_has_playername() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuildCDKInfo::clear_playername() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    playername_->clear();
  }
  clear_has_playername();
  SetDirty();
}
inline const ::std::string& GuildCDKInfo::playername() const {
  return *playername_;
}
inline void GuildCDKInfo::set_playername(const ::std::string& value) {
  SetDirty();
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void GuildCDKInfo::set_playername(const char* value) {
  SetDirty();
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void GuildCDKInfo::set_playername(const char* value, size_t size) {
  SetDirty();
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildCDKInfo::mutable_playername() {
  SetDirty();
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  return playername_;
}
inline ::std::string* GuildCDKInfo::release_playername() {
  SetDirty();
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildCDKInfo::set_allocated_playername(::std::string* playername) {
  SetDirty();
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 limitlevel = 6;
inline bool GuildCDKInfo::has_limitlevel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GuildCDKInfo::set_has_limitlevel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GuildCDKInfo::clear_has_limitlevel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GuildCDKInfo::clear_limitlevel() {
  limitlevel_ = 0;
  clear_has_limitlevel();
  SetDirty();
}
inline ::google::protobuf::int32 GuildCDKInfo::limitlevel() const {
  return limitlevel_;
}
inline void GuildCDKInfo::set_limitlevel(::google::protobuf::int32 value) {
  SetDirty();
  set_has_limitlevel();
  limitlevel_ = value;
}

// required int32 limitday = 7;
inline bool GuildCDKInfo::has_limitday() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GuildCDKInfo::set_has_limitday() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GuildCDKInfo::clear_has_limitday() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GuildCDKInfo::clear_limitday() {
  limitday_ = 0;
  clear_has_limitday();
  SetDirty();
}
inline ::google::protobuf::int32 GuildCDKInfo::limitday() const {
  return limitday_;
}
inline void GuildCDKInfo::set_limitday(::google::protobuf::int32 value) {
  SetDirty();
  set_has_limitday();
  limitday_ = value;
}

// required int32 limitdonation = 8;
inline bool GuildCDKInfo::has_limitdonation() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GuildCDKInfo::set_has_limitdonation() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GuildCDKInfo::clear_has_limitdonation() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GuildCDKInfo::clear_limitdonation() {
  limitdonation_ = 0;
  clear_has_limitdonation();
  SetDirty();
}
inline ::google::protobuf::int32 GuildCDKInfo::limitdonation() const {
  return limitdonation_;
}
inline void GuildCDKInfo::set_limitdonation(::google::protobuf::int32 value) {
  SetDirty();
  set_has_limitdonation();
  limitdonation_ = value;
}

// required fixed32 datetime = 9;
inline bool GuildCDKInfo::has_datetime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GuildCDKInfo::set_has_datetime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GuildCDKInfo::clear_has_datetime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GuildCDKInfo::clear_datetime() {
  datetime_ = 0u;
  clear_has_datetime();
  SetDirty();
}
inline ::google::protobuf::uint32 GuildCDKInfo::datetime() const {
  return datetime_;
}
inline void GuildCDKInfo::set_datetime(::google::protobuf::uint32 value) {
  SetDirty();
  set_has_datetime();
  datetime_ = value;
}

// required string wish = 10;
inline bool GuildCDKInfo::has_wish() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GuildCDKInfo::set_has_wish() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GuildCDKInfo::clear_has_wish() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GuildCDKInfo::clear_wish() {
  if (wish_ != &::google::protobuf::internal::kEmptyString) {
    wish_->clear();
  }
  clear_has_wish();
  SetDirty();
}
inline const ::std::string& GuildCDKInfo::wish() const {
  return *wish_;
}
inline void GuildCDKInfo::set_wish(const ::std::string& value) {
  SetDirty();
  set_has_wish();
  if (wish_ == &::google::protobuf::internal::kEmptyString) {
    wish_ = new ::std::string;
  }
  wish_->assign(value);
}
inline void GuildCDKInfo::set_wish(const char* value) {
  SetDirty();
  set_has_wish();
  if (wish_ == &::google::protobuf::internal::kEmptyString) {
    wish_ = new ::std::string;
  }
  wish_->assign(value);
}
inline void GuildCDKInfo::set_wish(const char* value, size_t size) {
  SetDirty();
  set_has_wish();
  if (wish_ == &::google::protobuf::internal::kEmptyString) {
    wish_ = new ::std::string;
  }
  wish_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildCDKInfo::mutable_wish() {
  SetDirty();
  set_has_wish();
  if (wish_ == &::google::protobuf::internal::kEmptyString) {
    wish_ = new ::std::string;
  }
  return wish_;
}
inline ::std::string* GuildCDKInfo::release_wish() {
  SetDirty();
  clear_has_wish();
  if (wish_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wish_;
    wish_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildCDKInfo::set_allocated_wish(::std::string* wish) {
  SetDirty();
  if (wish_ != &::google::protobuf::internal::kEmptyString) {
    delete wish_;
  }
  if (wish) {
    set_has_wish();
    wish_ = wish;
  } else {
    clear_has_wish();
    wish_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated fixed64 getplayerid = 11;
inline int GuildCDKInfo::getplayerid_size() const {
  return getplayerid_.size();
}
inline void GuildCDKInfo::clear_getplayerid() {
  getplayerid_.Clear();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildCDKInfo::getplayerid(int index) const {
  return getplayerid_.Get(index);
}
inline void GuildCDKInfo::set_getplayerid(int index, ::google::protobuf::uint64 value) {
  SetDirty();
  getplayerid_.Set(index, value);
}
inline void GuildCDKInfo::add_getplayerid(::google::protobuf::uint64 value) {
  SetDirty();
  getplayerid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
GuildCDKInfo::getplayerid() const {
  return getplayerid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
GuildCDKInfo::mutable_getplayerid() {
  SetDirty();
  return &getplayerid_;
}

// -------------------------------------------------------------------

// CreateGuildCDK

// required int32 configid = 1;
inline bool CreateGuildCDK::has_configid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateGuildCDK::set_has_configid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateGuildCDK::clear_has_configid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateGuildCDK::clear_configid() {
  configid_ = 0;
  clear_has_configid();
  SetDirty();
}
inline ::google::protobuf::int32 CreateGuildCDK::configid() const {
  return configid_;
}
inline void CreateGuildCDK::set_configid(::google::protobuf::int32 value) {
  SetDirty();
  set_has_configid();
  configid_ = value;
}

// required int32 count = 2;
inline bool CreateGuildCDK::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateGuildCDK::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateGuildCDK::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateGuildCDK::clear_count() {
  count_ = 0;
  clear_has_count();
  SetDirty();
}
inline ::google::protobuf::int32 CreateGuildCDK::count() const {
  return count_;
}
inline void CreateGuildCDK::set_count(::google::protobuf::int32 value) {
  SetDirty();
  set_has_count();
  count_ = value;
}

// required int32 limitlevel = 3;
inline bool CreateGuildCDK::has_limitlevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateGuildCDK::set_has_limitlevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateGuildCDK::clear_has_limitlevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateGuildCDK::clear_limitlevel() {
  limitlevel_ = 0;
  clear_has_limitlevel();
  SetDirty();
}
inline ::google::protobuf::int32 CreateGuildCDK::limitlevel() const {
  return limitlevel_;
}
inline void CreateGuildCDK::set_limitlevel(::google::protobuf::int32 value) {
  SetDirty();
  set_has_limitlevel();
  limitlevel_ = value;
}

// required int32 limitday = 4;
inline bool CreateGuildCDK::has_limitday() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreateGuildCDK::set_has_limitday() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreateGuildCDK::clear_has_limitday() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreateGuildCDK::clear_limitday() {
  limitday_ = 0;
  clear_has_limitday();
  SetDirty();
}
inline ::google::protobuf::int32 CreateGuildCDK::limitday() const {
  return limitday_;
}
inline void CreateGuildCDK::set_limitday(::google::protobuf::int32 value) {
  SetDirty();
  set_has_limitday();
  limitday_ = value;
}

// required int32 limitdonation = 5;
inline bool CreateGuildCDK::has_limitdonation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CreateGuildCDK::set_has_limitdonation() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CreateGuildCDK::clear_has_limitdonation() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CreateGuildCDK::clear_limitdonation() {
  limitdonation_ = 0;
  clear_has_limitdonation();
  SetDirty();
}
inline ::google::protobuf::int32 CreateGuildCDK::limitdonation() const {
  return limitdonation_;
}
inline void CreateGuildCDK::set_limitdonation(::google::protobuf::int32 value) {
  SetDirty();
  set_has_limitdonation();
  limitdonation_ = value;
}

// required string wish = 6;
inline bool CreateGuildCDK::has_wish() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CreateGuildCDK::set_has_wish() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CreateGuildCDK::clear_has_wish() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CreateGuildCDK::clear_wish() {
  if (wish_ != &::google::protobuf::internal::kEmptyString) {
    wish_->clear();
  }
  clear_has_wish();
  SetDirty();
}
inline const ::std::string& CreateGuildCDK::wish() const {
  return *wish_;
}
inline void CreateGuildCDK::set_wish(const ::std::string& value) {
  SetDirty();
  set_has_wish();
  if (wish_ == &::google::protobuf::internal::kEmptyString) {
    wish_ = new ::std::string;
  }
  wish_->assign(value);
}
inline void CreateGuildCDK::set_wish(const char* value) {
  SetDirty();
  set_has_wish();
  if (wish_ == &::google::protobuf::internal::kEmptyString) {
    wish_ = new ::std::string;
  }
  wish_->assign(value);
}
inline void CreateGuildCDK::set_wish(const char* value, size_t size) {
  SetDirty();
  set_has_wish();
  if (wish_ == &::google::protobuf::internal::kEmptyString) {
    wish_ = new ::std::string;
  }
  wish_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateGuildCDK::mutable_wish() {
  SetDirty();
  set_has_wish();
  if (wish_ == &::google::protobuf::internal::kEmptyString) {
    wish_ = new ::std::string;
  }
  return wish_;
}
inline ::std::string* CreateGuildCDK::release_wish() {
  SetDirty();
  clear_has_wish();
  if (wish_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wish_;
    wish_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreateGuildCDK::set_allocated_wish(::std::string* wish) {
  SetDirty();
  if (wish_ != &::google::protobuf::internal::kEmptyString) {
    delete wish_;
  }
  if (wish) {
    set_has_wish();
    wish_ = wish;
  } else {
    clear_has_wish();
    wish_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CreateGuildCDKReq

// repeated .Packet.CreateGuildCDK cdks = 1;
inline int CreateGuildCDKReq::cdks_size() const {
  return cdks_.size();
}
inline void CreateGuildCDKReq::clear_cdks() {
  cdks_.Clear();
  SetDirty();
}
inline const ::Packet::CreateGuildCDK& CreateGuildCDKReq::cdks(int index) const {
  return cdks_.Get(index);
}
inline ::Packet::CreateGuildCDK* CreateGuildCDKReq::mutable_cdks(int index) {
  SetDirty();
  return cdks_.Mutable(index);
}
inline ::Packet::CreateGuildCDK* CreateGuildCDKReq::add_cdks() {
  SetDirty();
  return cdks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::CreateGuildCDK >&
CreateGuildCDKReq::cdks() const {
  return cdks_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::CreateGuildCDK >*
CreateGuildCDKReq::mutable_cdks() {
  SetDirty();
  return &cdks_;
}

// -------------------------------------------------------------------

// GetGuildCDKReq

// required fixed64 guid = 1;
inline bool GetGuildCDKReq::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetGuildCDKReq::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetGuildCDKReq::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetGuildCDKReq::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 GetGuildCDKReq::guid() const {
  return guid_;
}
inline void GetGuildCDKReq::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// -------------------------------------------------------------------

// GetGuildCDKListReq

// -------------------------------------------------------------------

// GetGuildCDKListReply

// repeated .Packet.GuildCDKInfo cdks = 1;
inline int GetGuildCDKListReply::cdks_size() const {
  return cdks_.size();
}
inline void GetGuildCDKListReply::clear_cdks() {
  cdks_.Clear();
  SetDirty();
}
inline const ::Packet::GuildCDKInfo& GetGuildCDKListReply::cdks(int index) const {
  return cdks_.Get(index);
}
inline ::Packet::GuildCDKInfo* GetGuildCDKListReply::mutable_cdks(int index) {
  SetDirty();
  return cdks_.Mutable(index);
}
inline ::Packet::GuildCDKInfo* GetGuildCDKListReply::add_cdks() {
  SetDirty();
  return cdks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::GuildCDKInfo >&
GetGuildCDKListReply::cdks() const {
  return cdks_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::GuildCDKInfo >*
GetGuildCDKListReply::mutable_cdks() {
  SetDirty();
  return &cdks_;
}

// -------------------------------------------------------------------

// BuildLevelUpReq

// required int32 buildtype = 1;
inline bool BuildLevelUpReq::has_buildtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuildLevelUpReq::set_has_buildtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuildLevelUpReq::clear_has_buildtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuildLevelUpReq::clear_buildtype() {
  buildtype_ = 0;
  clear_has_buildtype();
  SetDirty();
}
inline ::google::protobuf::int32 BuildLevelUpReq::buildtype() const {
  return buildtype_;
}
inline void BuildLevelUpReq::set_buildtype(::google::protobuf::int32 value) {
  SetDirty();
  set_has_buildtype();
  buildtype_ = value;
}

// -------------------------------------------------------------------

// BuildLevelUpReply

// required int32 buildtype = 1;
inline bool BuildLevelUpReply::has_buildtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuildLevelUpReply::set_has_buildtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuildLevelUpReply::clear_has_buildtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuildLevelUpReply::clear_buildtype() {
  buildtype_ = 0;
  clear_has_buildtype();
  SetDirty();
}
inline ::google::protobuf::int32 BuildLevelUpReply::buildtype() const {
  return buildtype_;
}
inline void BuildLevelUpReply::set_buildtype(::google::protobuf::int32 value) {
  SetDirty();
  set_has_buildtype();
  buildtype_ = value;
}

// required int32 buildlevel = 2;
inline bool BuildLevelUpReply::has_buildlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuildLevelUpReply::set_has_buildlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuildLevelUpReply::clear_has_buildlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuildLevelUpReply::clear_buildlevel() {
  buildlevel_ = 0;
  clear_has_buildlevel();
  SetDirty();
}
inline ::google::protobuf::int32 BuildLevelUpReply::buildlevel() const {
  return buildlevel_;
}
inline void BuildLevelUpReply::set_buildlevel(::google::protobuf::int32 value) {
  SetDirty();
  set_has_buildlevel();
  buildlevel_ = value;
}

// required uint32 cdtime = 3;
inline bool BuildLevelUpReply::has_cdtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuildLevelUpReply::set_has_cdtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuildLevelUpReply::clear_has_cdtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuildLevelUpReply::clear_cdtime() {
  cdtime_ = 0u;
  clear_has_cdtime();
  SetDirty();
}
inline ::google::protobuf::uint32 BuildLevelUpReply::cdtime() const {
  return cdtime_;
}
inline void BuildLevelUpReply::set_cdtime(::google::protobuf::uint32 value) {
  SetDirty();
  set_has_cdtime();
  cdtime_ = value;
}

// -------------------------------------------------------------------

// GuildBossCompetitionDbInfo

// required int32 bosslevel = 1;
inline bool GuildBossCompetitionDbInfo::has_bosslevel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildBossCompetitionDbInfo::set_has_bosslevel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildBossCompetitionDbInfo::clear_has_bosslevel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildBossCompetitionDbInfo::clear_bosslevel() {
  bosslevel_ = 0;
  clear_has_bosslevel();
  SetDirty();
}
inline ::google::protobuf::int32 GuildBossCompetitionDbInfo::bosslevel() const {
  return bosslevel_;
}
inline void GuildBossCompetitionDbInfo::set_bosslevel(::google::protobuf::int32 value) {
  SetDirty();
  set_has_bosslevel();
  bosslevel_ = value;
}

// required int64 hp = 2;
inline bool GuildBossCompetitionDbInfo::has_hp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildBossCompetitionDbInfo::set_has_hp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildBossCompetitionDbInfo::clear_has_hp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildBossCompetitionDbInfo::clear_hp() {
  hp_ = GOOGLE_LONGLONG(0);
  clear_has_hp();
  SetDirty();
}
inline ::google::protobuf::int64 GuildBossCompetitionDbInfo::hp() const {
  return hp_;
}
inline void GuildBossCompetitionDbInfo::set_hp(::google::protobuf::int64 value) {
  SetDirty();
  set_has_hp();
  hp_ = value;
}

// -------------------------------------------------------------------

// GetGuildBossCompetitionReq

// -------------------------------------------------------------------

// GetGuildBossCompetitionReply

// required .Packet.GuildBossCompetitionDbInfo info = 1;
inline bool GetGuildBossCompetitionReply::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetGuildBossCompetitionReply::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetGuildBossCompetitionReply::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetGuildBossCompetitionReply::clear_info() {
  if (info_ != NULL) info_->::Packet::GuildBossCompetitionDbInfo::Clear();
  clear_has_info();
  SetDirty();
}
inline const ::Packet::GuildBossCompetitionDbInfo& GetGuildBossCompetitionReply::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::Packet::GuildBossCompetitionDbInfo* GetGuildBossCompetitionReply::mutable_info() {
  SetDirty();
  set_has_info();
  if (info_ == NULL) info_ = new ::Packet::GuildBossCompetitionDbInfo;
  return info_;
}
inline ::Packet::GuildBossCompetitionDbInfo* GetGuildBossCompetitionReply::release_info() {
  SetDirty();
  clear_has_info();
  ::Packet::GuildBossCompetitionDbInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void GetGuildBossCompetitionReply::set_allocated_info(::Packet::GuildBossCompetitionDbInfo* info) {
  SetDirty();
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// GuildUserDamage

// required fixed64 guid = 1;
inline bool GuildUserDamage::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildUserDamage::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildUserDamage::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildUserDamage::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildUserDamage::guid() const {
  return guid_;
}
inline void GuildUserDamage::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// required fixed64 playerid_ = 2;
inline bool GuildUserDamage::has_playerid_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildUserDamage::set_has_playerid_() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildUserDamage::clear_has_playerid_() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildUserDamage::clear_playerid_() {
  playerid__ = GOOGLE_ULONGLONG(0);
  clear_has_playerid_();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildUserDamage::playerid_() const {
  return playerid__;
}
inline void GuildUserDamage::set_playerid_(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_playerid_();
  playerid__ = value;
}

// required fixed64 guildid_ = 3;
inline bool GuildUserDamage::has_guildid_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildUserDamage::set_has_guildid_() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildUserDamage::clear_has_guildid_() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildUserDamage::clear_guildid_() {
  guildid__ = GOOGLE_ULONGLONG(0);
  clear_has_guildid_();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildUserDamage::guildid_() const {
  return guildid__;
}
inline void GuildUserDamage::set_guildid_(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guildid_();
  guildid__ = value;
}

// required int32 paramid_ = 4;
inline bool GuildUserDamage::has_paramid_() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildUserDamage::set_has_paramid_() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildUserDamage::clear_has_paramid_() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildUserDamage::clear_paramid_() {
  paramid__ = 0;
  clear_has_paramid_();
  SetDirty();
}
inline ::google::protobuf::int32 GuildUserDamage::paramid_() const {
  return paramid__;
}
inline void GuildUserDamage::set_paramid_(::google::protobuf::int32 value) {
  SetDirty();
  set_has_paramid_();
  paramid__ = value;
}

// required string playername_ = 5;
inline bool GuildUserDamage::has_playername_() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuildUserDamage::set_has_playername_() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuildUserDamage::clear_has_playername_() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuildUserDamage::clear_playername_() {
  if (playername__ != &::google::protobuf::internal::kEmptyString) {
    playername__->clear();
  }
  clear_has_playername_();
  SetDirty();
}
inline const ::std::string& GuildUserDamage::playername_() const {
  return *playername__;
}
inline void GuildUserDamage::set_playername_(const ::std::string& value) {
  SetDirty();
  set_has_playername_();
  if (playername__ == &::google::protobuf::internal::kEmptyString) {
    playername__ = new ::std::string;
  }
  playername__->assign(value);
}
inline void GuildUserDamage::set_playername_(const char* value) {
  SetDirty();
  set_has_playername_();
  if (playername__ == &::google::protobuf::internal::kEmptyString) {
    playername__ = new ::std::string;
  }
  playername__->assign(value);
}
inline void GuildUserDamage::set_playername_(const char* value, size_t size) {
  SetDirty();
  set_has_playername_();
  if (playername__ == &::google::protobuf::internal::kEmptyString) {
    playername__ = new ::std::string;
  }
  playername__->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildUserDamage::mutable_playername_() {
  SetDirty();
  set_has_playername_();
  if (playername__ == &::google::protobuf::internal::kEmptyString) {
    playername__ = new ::std::string;
  }
  return playername__;
}
inline ::std::string* GuildUserDamage::release_playername_() {
  SetDirty();
  clear_has_playername_();
  if (playername__ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername__;
    playername__ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildUserDamage::set_allocated_playername_(::std::string* playername_) {
  SetDirty();
  if (playername__ != &::google::protobuf::internal::kEmptyString) {
    delete playername__;
  }
  if (playername_) {
    set_has_playername_();
    playername__ = playername_;
  } else {
    clear_has_playername_();
    playername__ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string guildname_ = 6;
inline bool GuildUserDamage::has_guildname_() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GuildUserDamage::set_has_guildname_() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GuildUserDamage::clear_has_guildname_() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GuildUserDamage::clear_guildname_() {
  if (guildname__ != &::google::protobuf::internal::kEmptyString) {
    guildname__->clear();
  }
  clear_has_guildname_();
  SetDirty();
}
inline const ::std::string& GuildUserDamage::guildname_() const {
  return *guildname__;
}
inline void GuildUserDamage::set_guildname_(const ::std::string& value) {
  SetDirty();
  set_has_guildname_();
  if (guildname__ == &::google::protobuf::internal::kEmptyString) {
    guildname__ = new ::std::string;
  }
  guildname__->assign(value);
}
inline void GuildUserDamage::set_guildname_(const char* value) {
  SetDirty();
  set_has_guildname_();
  if (guildname__ == &::google::protobuf::internal::kEmptyString) {
    guildname__ = new ::std::string;
  }
  guildname__->assign(value);
}
inline void GuildUserDamage::set_guildname_(const char* value, size_t size) {
  SetDirty();
  set_has_guildname_();
  if (guildname__ == &::google::protobuf::internal::kEmptyString) {
    guildname__ = new ::std::string;
  }
  guildname__->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildUserDamage::mutable_guildname_() {
  SetDirty();
  set_has_guildname_();
  if (guildname__ == &::google::protobuf::internal::kEmptyString) {
    guildname__ = new ::std::string;
  }
  return guildname__;
}
inline ::std::string* GuildUserDamage::release_guildname_() {
  SetDirty();
  clear_has_guildname_();
  if (guildname__ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname__;
    guildname__ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildUserDamage::set_allocated_guildname_(::std::string* guildname_) {
  SetDirty();
  if (guildname__ != &::google::protobuf::internal::kEmptyString) {
    delete guildname__;
  }
  if (guildname_) {
    set_has_guildname_();
    guildname__ = guildname_;
  } else {
    clear_has_guildname_();
    guildname__ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 playerhair_ = 7;
inline bool GuildUserDamage::has_playerhair_() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GuildUserDamage::set_has_playerhair_() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GuildUserDamage::clear_has_playerhair_() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GuildUserDamage::clear_playerhair_() {
  playerhair__ = 0;
  clear_has_playerhair_();
  SetDirty();
}
inline ::google::protobuf::int32 GuildUserDamage::playerhair_() const {
  return playerhair__;
}
inline void GuildUserDamage::set_playerhair_(::google::protobuf::int32 value) {
  SetDirty();
  set_has_playerhair_();
  playerhair__ = value;
}

// required int32 damagevalue_ = 8;
inline bool GuildUserDamage::has_damagevalue_() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GuildUserDamage::set_has_damagevalue_() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GuildUserDamage::clear_has_damagevalue_() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GuildUserDamage::clear_damagevalue_() {
  damagevalue__ = 0;
  clear_has_damagevalue_();
  SetDirty();
}
inline ::google::protobuf::int32 GuildUserDamage::damagevalue_() const {
  return damagevalue__;
}
inline void GuildUserDamage::set_damagevalue_(::google::protobuf::int32 value) {
  SetDirty();
  set_has_damagevalue_();
  damagevalue__ = value;
}

// repeated int32 actor_config_id_ = 9;
inline int GuildUserDamage::actor_config_id__size() const {
  return actor_config_id__.size();
}
inline void GuildUserDamage::clear_actor_config_id_() {
  actor_config_id__.Clear();
  SetDirty();
}
inline ::google::protobuf::int32 GuildUserDamage::actor_config_id_(int index) const {
  return actor_config_id__.Get(index);
}
inline void GuildUserDamage::set_actor_config_id_(int index, ::google::protobuf::int32 value) {
  SetDirty();
  actor_config_id__.Set(index, value);
}
inline void GuildUserDamage::add_actor_config_id_(::google::protobuf::int32 value) {
  SetDirty();
  actor_config_id__.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GuildUserDamage::actor_config_id_() const {
  return actor_config_id__;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GuildUserDamage::mutable_actor_config_id_() {
  SetDirty();
  return &actor_config_id__;
}

// -------------------------------------------------------------------

// GuildAllDamage

// required fixed64 guildid_ = 1;
inline bool GuildAllDamage::has_guildid_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildAllDamage::set_has_guildid_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildAllDamage::clear_has_guildid_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildAllDamage::clear_guildid_() {
  guildid__ = GOOGLE_ULONGLONG(0);
  clear_has_guildid_();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildAllDamage::guildid_() const {
  return guildid__;
}
inline void GuildAllDamage::set_guildid_(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guildid_();
  guildid__ = value;
}

// required string guildname_ = 2;
inline bool GuildAllDamage::has_guildname_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildAllDamage::set_has_guildname_() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildAllDamage::clear_has_guildname_() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildAllDamage::clear_guildname_() {
  if (guildname__ != &::google::protobuf::internal::kEmptyString) {
    guildname__->clear();
  }
  clear_has_guildname_();
  SetDirty();
}
inline const ::std::string& GuildAllDamage::guildname_() const {
  return *guildname__;
}
inline void GuildAllDamage::set_guildname_(const ::std::string& value) {
  SetDirty();
  set_has_guildname_();
  if (guildname__ == &::google::protobuf::internal::kEmptyString) {
    guildname__ = new ::std::string;
  }
  guildname__->assign(value);
}
inline void GuildAllDamage::set_guildname_(const char* value) {
  SetDirty();
  set_has_guildname_();
  if (guildname__ == &::google::protobuf::internal::kEmptyString) {
    guildname__ = new ::std::string;
  }
  guildname__->assign(value);
}
inline void GuildAllDamage::set_guildname_(const char* value, size_t size) {
  SetDirty();
  set_has_guildname_();
  if (guildname__ == &::google::protobuf::internal::kEmptyString) {
    guildname__ = new ::std::string;
  }
  guildname__->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildAllDamage::mutable_guildname_() {
  SetDirty();
  set_has_guildname_();
  if (guildname__ == &::google::protobuf::internal::kEmptyString) {
    guildname__ = new ::std::string;
  }
  return guildname__;
}
inline ::std::string* GuildAllDamage::release_guildname_() {
  SetDirty();
  clear_has_guildname_();
  if (guildname__ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname__;
    guildname__ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildAllDamage::set_allocated_guildname_(::std::string* guildname_) {
  SetDirty();
  if (guildname__ != &::google::protobuf::internal::kEmptyString) {
    delete guildname__;
  }
  if (guildname_) {
    set_has_guildname_();
    guildname__ = guildname_;
  } else {
    clear_has_guildname_();
    guildname__ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 damagevalue_ = 3;
inline bool GuildAllDamage::has_damagevalue_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildAllDamage::set_has_damagevalue_() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildAllDamage::clear_has_damagevalue_() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildAllDamage::clear_damagevalue_() {
  damagevalue__ = 0;
  clear_has_damagevalue_();
  SetDirty();
}
inline ::google::protobuf::int32 GuildAllDamage::damagevalue_() const {
  return damagevalue__;
}
inline void GuildAllDamage::set_damagevalue_(::google::protobuf::int32 value) {
  SetDirty();
  set_has_damagevalue_();
  damagevalue__ = value;
}

// -------------------------------------------------------------------

// GuildBossUserDamage

// required fixed64 playerid_ = 1;
inline bool GuildBossUserDamage::has_playerid_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildBossUserDamage::set_has_playerid_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildBossUserDamage::clear_has_playerid_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildBossUserDamage::clear_playerid_() {
  playerid__ = GOOGLE_ULONGLONG(0);
  clear_has_playerid_();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildBossUserDamage::playerid_() const {
  return playerid__;
}
inline void GuildBossUserDamage::set_playerid_(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_playerid_();
  playerid__ = value;
}

// required string playername_ = 2;
inline bool GuildBossUserDamage::has_playername_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildBossUserDamage::set_has_playername_() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildBossUserDamage::clear_has_playername_() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildBossUserDamage::clear_playername_() {
  if (playername__ != &::google::protobuf::internal::kEmptyString) {
    playername__->clear();
  }
  clear_has_playername_();
  SetDirty();
}
inline const ::std::string& GuildBossUserDamage::playername_() const {
  return *playername__;
}
inline void GuildBossUserDamage::set_playername_(const ::std::string& value) {
  SetDirty();
  set_has_playername_();
  if (playername__ == &::google::protobuf::internal::kEmptyString) {
    playername__ = new ::std::string;
  }
  playername__->assign(value);
}
inline void GuildBossUserDamage::set_playername_(const char* value) {
  SetDirty();
  set_has_playername_();
  if (playername__ == &::google::protobuf::internal::kEmptyString) {
    playername__ = new ::std::string;
  }
  playername__->assign(value);
}
inline void GuildBossUserDamage::set_playername_(const char* value, size_t size) {
  SetDirty();
  set_has_playername_();
  if (playername__ == &::google::protobuf::internal::kEmptyString) {
    playername__ = new ::std::string;
  }
  playername__->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildBossUserDamage::mutable_playername_() {
  SetDirty();
  set_has_playername_();
  if (playername__ == &::google::protobuf::internal::kEmptyString) {
    playername__ = new ::std::string;
  }
  return playername__;
}
inline ::std::string* GuildBossUserDamage::release_playername_() {
  SetDirty();
  clear_has_playername_();
  if (playername__ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername__;
    playername__ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildBossUserDamage::set_allocated_playername_(::std::string* playername_) {
  SetDirty();
  if (playername__ != &::google::protobuf::internal::kEmptyString) {
    delete playername__;
  }
  if (playername_) {
    set_has_playername_();
    playername__ = playername_;
  } else {
    clear_has_playername_();
    playername__ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 playerhair_ = 3;
inline bool GuildBossUserDamage::has_playerhair_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildBossUserDamage::set_has_playerhair_() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildBossUserDamage::clear_has_playerhair_() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildBossUserDamage::clear_playerhair_() {
  playerhair__ = 0;
  clear_has_playerhair_();
  SetDirty();
}
inline ::google::protobuf::int32 GuildBossUserDamage::playerhair_() const {
  return playerhair__;
}
inline void GuildBossUserDamage::set_playerhair_(::google::protobuf::int32 value) {
  SetDirty();
  set_has_playerhair_();
  playerhair__ = value;
}

// required int32 damagevalue_ = 4;
inline bool GuildBossUserDamage::has_damagevalue_() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildBossUserDamage::set_has_damagevalue_() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildBossUserDamage::clear_has_damagevalue_() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildBossUserDamage::clear_damagevalue_() {
  damagevalue__ = 0;
  clear_has_damagevalue_();
  SetDirty();
}
inline ::google::protobuf::int32 GuildBossUserDamage::damagevalue_() const {
  return damagevalue__;
}
inline void GuildBossUserDamage::set_damagevalue_(::google::protobuf::int32 value) {
  SetDirty();
  set_has_damagevalue_();
  damagevalue__ = value;
}

// -------------------------------------------------------------------

// GetGuildUserDamageReq

// -------------------------------------------------------------------

// GetGuildUserDamageReply

// repeated .Packet.GuildUserDamage users_ = 1;
inline int GetGuildUserDamageReply::users__size() const {
  return users__.size();
}
inline void GetGuildUserDamageReply::clear_users_() {
  users__.Clear();
  SetDirty();
}
inline const ::Packet::GuildUserDamage& GetGuildUserDamageReply::users_(int index) const {
  return users__.Get(index);
}
inline ::Packet::GuildUserDamage* GetGuildUserDamageReply::mutable_users_(int index) {
  SetDirty();
  return users__.Mutable(index);
}
inline ::Packet::GuildUserDamage* GetGuildUserDamageReply::add_users_() {
  SetDirty();
  return users__.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::GuildUserDamage >&
GetGuildUserDamageReply::users_() const {
  return users__;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::GuildUserDamage >*
GetGuildUserDamageReply::mutable_users_() {
  SetDirty();
  return &users__;
}

// -------------------------------------------------------------------

// GetServerUserDamageReq

// -------------------------------------------------------------------

// GetGuildAllDamageReply

// repeated .Packet.GuildAllDamage guilds_ = 1;
inline int GetGuildAllDamageReply::guilds__size() const {
  return guilds__.size();
}
inline void GetGuildAllDamageReply::clear_guilds_() {
  guilds__.Clear();
  SetDirty();
}
inline const ::Packet::GuildAllDamage& GetGuildAllDamageReply::guilds_(int index) const {
  return guilds__.Get(index);
}
inline ::Packet::GuildAllDamage* GetGuildAllDamageReply::mutable_guilds_(int index) {
  SetDirty();
  return guilds__.Mutable(index);
}
inline ::Packet::GuildAllDamage* GetGuildAllDamageReply::add_guilds_() {
  SetDirty();
  return guilds__.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::GuildAllDamage >&
GetGuildAllDamageReply::guilds_() const {
  return guilds__;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::GuildAllDamage >*
GetGuildAllDamageReply::mutable_guilds_() {
  SetDirty();
  return &guilds__;
}

// -------------------------------------------------------------------

// GetGuildBossUserDamageReply

// repeated .Packet.GuildBossUserDamage users_ = 1;
inline int GetGuildBossUserDamageReply::users__size() const {
  return users__.size();
}
inline void GetGuildBossUserDamageReply::clear_users_() {
  users__.Clear();
  SetDirty();
}
inline const ::Packet::GuildBossUserDamage& GetGuildBossUserDamageReply::users_(int index) const {
  return users__.Get(index);
}
inline ::Packet::GuildBossUserDamage* GetGuildBossUserDamageReply::mutable_users_(int index) {
  SetDirty();
  return users__.Mutable(index);
}
inline ::Packet::GuildBossUserDamage* GetGuildBossUserDamageReply::add_users_() {
  SetDirty();
  return users__.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::GuildBossUserDamage >&
GetGuildBossUserDamageReply::users_() const {
  return users__;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::GuildBossUserDamage >*
GetGuildBossUserDamageReply::mutable_users_() {
  SetDirty();
  return &users__;
}

// -------------------------------------------------------------------

// UpdateGuildBossUserDamage

// required int32 opt = 1;
inline bool UpdateGuildBossUserDamage::has_opt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateGuildBossUserDamage::set_has_opt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateGuildBossUserDamage::clear_has_opt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateGuildBossUserDamage::clear_opt() {
  opt_ = 0;
  clear_has_opt();
  SetDirty();
}
inline ::google::protobuf::int32 UpdateGuildBossUserDamage::opt() const {
  return opt_;
}
inline void UpdateGuildBossUserDamage::set_opt(::google::protobuf::int32 value) {
  SetDirty();
  set_has_opt();
  opt_ = value;
}

// required int32 damagevalue = 2;
inline bool UpdateGuildBossUserDamage::has_damagevalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateGuildBossUserDamage::set_has_damagevalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateGuildBossUserDamage::clear_has_damagevalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateGuildBossUserDamage::clear_damagevalue() {
  damagevalue_ = 0;
  clear_has_damagevalue();
  SetDirty();
}
inline ::google::protobuf::int32 UpdateGuildBossUserDamage::damagevalue() const {
  return damagevalue_;
}
inline void UpdateGuildBossUserDamage::set_damagevalue(::google::protobuf::int32 value) {
  SetDirty();
  set_has_damagevalue();
  damagevalue_ = value;
}

// -------------------------------------------------------------------

// GuildWetCopyInfo

// required fixed64 guildid = 1;
inline bool GuildWetCopyInfo::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildWetCopyInfo::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildWetCopyInfo::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildWetCopyInfo::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildWetCopyInfo::guildid() const {
  return guildid_;
}
inline void GuildWetCopyInfo::set_guildid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guildid();
  guildid_ = value;
}

// required int32 copyid = 2;
inline bool GuildWetCopyInfo::has_copyid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildWetCopyInfo::set_has_copyid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildWetCopyInfo::clear_has_copyid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildWetCopyInfo::clear_copyid() {
  copyid_ = 0;
  clear_has_copyid();
  SetDirty();
}
inline ::google::protobuf::int32 GuildWetCopyInfo::copyid() const {
  return copyid_;
}
inline void GuildWetCopyInfo::set_copyid(::google::protobuf::int32 value) {
  SetDirty();
  set_has_copyid();
  copyid_ = value;
}

// required int32 stageid = 3;
inline bool GuildWetCopyInfo::has_stageid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildWetCopyInfo::set_has_stageid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildWetCopyInfo::clear_has_stageid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildWetCopyInfo::clear_stageid() {
  stageid_ = 0;
  clear_has_stageid();
  SetDirty();
}
inline ::google::protobuf::int32 GuildWetCopyInfo::stageid() const {
  return stageid_;
}
inline void GuildWetCopyInfo::set_stageid(::google::protobuf::int32 value) {
  SetDirty();
  set_has_stageid();
  stageid_ = value;
}

// required bool status = 4;
inline bool GuildWetCopyInfo::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildWetCopyInfo::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildWetCopyInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildWetCopyInfo::clear_status() {
  status_ = false;
  clear_has_status();
  SetDirty();
}
inline bool GuildWetCopyInfo::status() const {
  return status_;
}
inline void GuildWetCopyInfo::set_status(bool value) {
  SetDirty();
  set_has_status();
  status_ = value;
}

// repeated fixed64 bosshp = 5;
inline int GuildWetCopyInfo::bosshp_size() const {
  return bosshp_.size();
}
inline void GuildWetCopyInfo::clear_bosshp() {
  bosshp_.Clear();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildWetCopyInfo::bosshp(int index) const {
  return bosshp_.Get(index);
}
inline void GuildWetCopyInfo::set_bosshp(int index, ::google::protobuf::uint64 value) {
  SetDirty();
  bosshp_.Set(index, value);
}
inline void GuildWetCopyInfo::add_bosshp(::google::protobuf::uint64 value) {
  SetDirty();
  bosshp_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
GuildWetCopyInfo::bosshp() const {
  return bosshp_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
GuildWetCopyInfo::mutable_bosshp() {
  SetDirty();
  return &bosshp_;
}

// required fixed64 maxbosshp = 6;
inline bool GuildWetCopyInfo::has_maxbosshp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GuildWetCopyInfo::set_has_maxbosshp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GuildWetCopyInfo::clear_has_maxbosshp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GuildWetCopyInfo::clear_maxbosshp() {
  maxbosshp_ = GOOGLE_ULONGLONG(0);
  clear_has_maxbosshp();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildWetCopyInfo::maxbosshp() const {
  return maxbosshp_;
}
inline void GuildWetCopyInfo::set_maxbosshp(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_maxbosshp();
  maxbosshp_ = value;
}

// required fixed64 fighterid = 7;
inline bool GuildWetCopyInfo::has_fighterid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GuildWetCopyInfo::set_has_fighterid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GuildWetCopyInfo::clear_has_fighterid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GuildWetCopyInfo::clear_fighterid() {
  fighterid_ = GOOGLE_ULONGLONG(0);
  clear_has_fighterid();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildWetCopyInfo::fighterid() const {
  return fighterid_;
}
inline void GuildWetCopyInfo::set_fighterid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_fighterid();
  fighterid_ = value;
}

// required string fightname = 8;
inline bool GuildWetCopyInfo::has_fightname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GuildWetCopyInfo::set_has_fightname() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GuildWetCopyInfo::clear_has_fightname() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GuildWetCopyInfo::clear_fightname() {
  if (fightname_ != &::google::protobuf::internal::kEmptyString) {
    fightname_->clear();
  }
  clear_has_fightname();
  SetDirty();
}
inline const ::std::string& GuildWetCopyInfo::fightname() const {
  return *fightname_;
}
inline void GuildWetCopyInfo::set_fightname(const ::std::string& value) {
  SetDirty();
  set_has_fightname();
  if (fightname_ == &::google::protobuf::internal::kEmptyString) {
    fightname_ = new ::std::string;
  }
  fightname_->assign(value);
}
inline void GuildWetCopyInfo::set_fightname(const char* value) {
  SetDirty();
  set_has_fightname();
  if (fightname_ == &::google::protobuf::internal::kEmptyString) {
    fightname_ = new ::std::string;
  }
  fightname_->assign(value);
}
inline void GuildWetCopyInfo::set_fightname(const char* value, size_t size) {
  SetDirty();
  set_has_fightname();
  if (fightname_ == &::google::protobuf::internal::kEmptyString) {
    fightname_ = new ::std::string;
  }
  fightname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildWetCopyInfo::mutable_fightname() {
  SetDirty();
  set_has_fightname();
  if (fightname_ == &::google::protobuf::internal::kEmptyString) {
    fightname_ = new ::std::string;
  }
  return fightname_;
}
inline ::std::string* GuildWetCopyInfo::release_fightname() {
  SetDirty();
  clear_has_fightname();
  if (fightname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fightname_;
    fightname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildWetCopyInfo::set_allocated_fightname(::std::string* fightname) {
  SetDirty();
  if (fightname_ != &::google::protobuf::internal::kEmptyString) {
    delete fightname_;
  }
  if (fightname) {
    set_has_fightname();
    fightname_ = fightname;
  } else {
    clear_has_fightname();
    fightname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 opentime = 9;
inline bool GuildWetCopyInfo::has_opentime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GuildWetCopyInfo::set_has_opentime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GuildWetCopyInfo::clear_has_opentime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GuildWetCopyInfo::clear_opentime() {
  opentime_ = 0u;
  clear_has_opentime();
  SetDirty();
}
inline ::google::protobuf::uint32 GuildWetCopyInfo::opentime() const {
  return opentime_;
}
inline void GuildWetCopyInfo::set_opentime(::google::protobuf::uint32 value) {
  SetDirty();
  set_has_opentime();
  opentime_ = value;
}

// -------------------------------------------------------------------

// GetGuildWetCopyInfosReq

// -------------------------------------------------------------------

// GetGuildWetCopyInfosReply

// repeated .Packet.GuildWetCopyInfo wetcopys_ = 1;
inline int GetGuildWetCopyInfosReply::wetcopys__size() const {
  return wetcopys__.size();
}
inline void GetGuildWetCopyInfosReply::clear_wetcopys_() {
  wetcopys__.Clear();
  SetDirty();
}
inline const ::Packet::GuildWetCopyInfo& GetGuildWetCopyInfosReply::wetcopys_(int index) const {
  return wetcopys__.Get(index);
}
inline ::Packet::GuildWetCopyInfo* GetGuildWetCopyInfosReply::mutable_wetcopys_(int index) {
  SetDirty();
  return wetcopys__.Mutable(index);
}
inline ::Packet::GuildWetCopyInfo* GetGuildWetCopyInfosReply::add_wetcopys_() {
  SetDirty();
  return wetcopys__.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::GuildWetCopyInfo >&
GetGuildWetCopyInfosReply::wetcopys_() const {
  return wetcopys__;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::GuildWetCopyInfo >*
GetGuildWetCopyInfosReply::mutable_wetcopys_() {
  SetDirty();
  return &wetcopys__;
}

// required int32 times = 2;
inline bool GetGuildWetCopyInfosReply::has_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetGuildWetCopyInfosReply::set_has_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetGuildWetCopyInfosReply::clear_has_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetGuildWetCopyInfosReply::clear_times() {
  times_ = 0;
  clear_has_times();
  SetDirty();
}
inline ::google::protobuf::int32 GetGuildWetCopyInfosReply::times() const {
  return times_;
}
inline void GetGuildWetCopyInfosReply::set_times(::google::protobuf::int32 value) {
  SetDirty();
  set_has_times();
  times_ = value;
}

// -------------------------------------------------------------------

// GuildWetCopyInfoUpdate

// required .Packet.GuildWetCopyInfo wetcopy = 1;
inline bool GuildWetCopyInfoUpdate::has_wetcopy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildWetCopyInfoUpdate::set_has_wetcopy() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildWetCopyInfoUpdate::clear_has_wetcopy() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildWetCopyInfoUpdate::clear_wetcopy() {
  if (wetcopy_ != NULL) wetcopy_->::Packet::GuildWetCopyInfo::Clear();
  clear_has_wetcopy();
  SetDirty();
}
inline const ::Packet::GuildWetCopyInfo& GuildWetCopyInfoUpdate::wetcopy() const {
  return wetcopy_ != NULL ? *wetcopy_ : *default_instance_->wetcopy_;
}
inline ::Packet::GuildWetCopyInfo* GuildWetCopyInfoUpdate::mutable_wetcopy() {
  SetDirty();
  set_has_wetcopy();
  if (wetcopy_ == NULL) wetcopy_ = new ::Packet::GuildWetCopyInfo;
  return wetcopy_;
}
inline ::Packet::GuildWetCopyInfo* GuildWetCopyInfoUpdate::release_wetcopy() {
  SetDirty();
  clear_has_wetcopy();
  ::Packet::GuildWetCopyInfo* temp = wetcopy_;
  wetcopy_ = NULL;
  return temp;
}
inline void GuildWetCopyInfoUpdate::set_allocated_wetcopy(::Packet::GuildWetCopyInfo* wetcopy) {
  SetDirty();
  delete wetcopy_;
  wetcopy_ = wetcopy;
  if (wetcopy) {
    set_has_wetcopy();
  } else {
    clear_has_wetcopy();
  }
}

// -------------------------------------------------------------------

// OpenGuildWetCopy

// required int32 copyid = 1;
inline bool OpenGuildWetCopy::has_copyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpenGuildWetCopy::set_has_copyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpenGuildWetCopy::clear_has_copyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpenGuildWetCopy::clear_copyid() {
  copyid_ = 0;
  clear_has_copyid();
  SetDirty();
}
inline ::google::protobuf::int32 OpenGuildWetCopy::copyid() const {
  return copyid_;
}
inline void OpenGuildWetCopy::set_copyid(::google::protobuf::int32 value) {
  SetDirty();
  set_has_copyid();
  copyid_ = value;
}

// -------------------------------------------------------------------

// ResetGuildWetCopy

// required int32 copyid = 1;
inline bool ResetGuildWetCopy::has_copyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResetGuildWetCopy::set_has_copyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResetGuildWetCopy::clear_has_copyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResetGuildWetCopy::clear_copyid() {
  copyid_ = 0;
  clear_has_copyid();
  SetDirty();
}
inline ::google::protobuf::int32 ResetGuildWetCopy::copyid() const {
  return copyid_;
}
inline void ResetGuildWetCopy::set_copyid(::google::protobuf::int32 value) {
  SetDirty();
  set_has_copyid();
  copyid_ = value;
}

// -------------------------------------------------------------------

// GuildBattleInfo

// required fixed64 a_guildid = 1;
inline bool GuildBattleInfo::has_a_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildBattleInfo::set_has_a_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildBattleInfo::clear_has_a_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildBattleInfo::clear_a_guildid() {
  a_guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_a_guildid();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildBattleInfo::a_guildid() const {
  return a_guildid_;
}
inline void GuildBattleInfo::set_a_guildid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_a_guildid();
  a_guildid_ = value;
}

// required fixed64 b_guildid = 2;
inline bool GuildBattleInfo::has_b_guildid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildBattleInfo::set_has_b_guildid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildBattleInfo::clear_has_b_guildid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildBattleInfo::clear_b_guildid() {
  b_guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_b_guildid();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildBattleInfo::b_guildid() const {
  return b_guildid_;
}
inline void GuildBattleInfo::set_b_guildid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_b_guildid();
  b_guildid_ = value;
}

// required string a_guildname = 3;
inline bool GuildBattleInfo::has_a_guildname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildBattleInfo::set_has_a_guildname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildBattleInfo::clear_has_a_guildname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildBattleInfo::clear_a_guildname() {
  if (a_guildname_ != &::google::protobuf::internal::kEmptyString) {
    a_guildname_->clear();
  }
  clear_has_a_guildname();
  SetDirty();
}
inline const ::std::string& GuildBattleInfo::a_guildname() const {
  return *a_guildname_;
}
inline void GuildBattleInfo::set_a_guildname(const ::std::string& value) {
  SetDirty();
  set_has_a_guildname();
  if (a_guildname_ == &::google::protobuf::internal::kEmptyString) {
    a_guildname_ = new ::std::string;
  }
  a_guildname_->assign(value);
}
inline void GuildBattleInfo::set_a_guildname(const char* value) {
  SetDirty();
  set_has_a_guildname();
  if (a_guildname_ == &::google::protobuf::internal::kEmptyString) {
    a_guildname_ = new ::std::string;
  }
  a_guildname_->assign(value);
}
inline void GuildBattleInfo::set_a_guildname(const char* value, size_t size) {
  SetDirty();
  set_has_a_guildname();
  if (a_guildname_ == &::google::protobuf::internal::kEmptyString) {
    a_guildname_ = new ::std::string;
  }
  a_guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildBattleInfo::mutable_a_guildname() {
  SetDirty();
  set_has_a_guildname();
  if (a_guildname_ == &::google::protobuf::internal::kEmptyString) {
    a_guildname_ = new ::std::string;
  }
  return a_guildname_;
}
inline ::std::string* GuildBattleInfo::release_a_guildname() {
  SetDirty();
  clear_has_a_guildname();
  if (a_guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = a_guildname_;
    a_guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildBattleInfo::set_allocated_a_guildname(::std::string* a_guildname) {
  SetDirty();
  if (a_guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete a_guildname_;
  }
  if (a_guildname) {
    set_has_a_guildname();
    a_guildname_ = a_guildname;
  } else {
    clear_has_a_guildname();
    a_guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string b_guildname = 4;
inline bool GuildBattleInfo::has_b_guildname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildBattleInfo::set_has_b_guildname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildBattleInfo::clear_has_b_guildname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildBattleInfo::clear_b_guildname() {
  if (b_guildname_ != &::google::protobuf::internal::kEmptyString) {
    b_guildname_->clear();
  }
  clear_has_b_guildname();
  SetDirty();
}
inline const ::std::string& GuildBattleInfo::b_guildname() const {
  return *b_guildname_;
}
inline void GuildBattleInfo::set_b_guildname(const ::std::string& value) {
  SetDirty();
  set_has_b_guildname();
  if (b_guildname_ == &::google::protobuf::internal::kEmptyString) {
    b_guildname_ = new ::std::string;
  }
  b_guildname_->assign(value);
}
inline void GuildBattleInfo::set_b_guildname(const char* value) {
  SetDirty();
  set_has_b_guildname();
  if (b_guildname_ == &::google::protobuf::internal::kEmptyString) {
    b_guildname_ = new ::std::string;
  }
  b_guildname_->assign(value);
}
inline void GuildBattleInfo::set_b_guildname(const char* value, size_t size) {
  SetDirty();
  set_has_b_guildname();
  if (b_guildname_ == &::google::protobuf::internal::kEmptyString) {
    b_guildname_ = new ::std::string;
  }
  b_guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildBattleInfo::mutable_b_guildname() {
  SetDirty();
  set_has_b_guildname();
  if (b_guildname_ == &::google::protobuf::internal::kEmptyString) {
    b_guildname_ = new ::std::string;
  }
  return b_guildname_;
}
inline ::std::string* GuildBattleInfo::release_b_guildname() {
  SetDirty();
  clear_has_b_guildname();
  if (b_guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = b_guildname_;
    b_guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildBattleInfo::set_allocated_b_guildname(::std::string* b_guildname) {
  SetDirty();
  if (b_guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete b_guildname_;
  }
  if (b_guildname) {
    set_has_b_guildname();
    b_guildname_ = b_guildname;
  } else {
    clear_has_b_guildname();
    b_guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 raidid = 5;
inline bool GuildBattleInfo::has_raidid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuildBattleInfo::set_has_raidid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuildBattleInfo::clear_has_raidid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuildBattleInfo::clear_raidid() {
  raidid_ = 0;
  clear_has_raidid();
  SetDirty();
}
inline ::google::protobuf::int32 GuildBattleInfo::raidid() const {
  return raidid_;
}
inline void GuildBattleInfo::set_raidid(::google::protobuf::int32 value) {
  SetDirty();
  set_has_raidid();
  raidid_ = value;
}

// required fixed64 win_guildid = 6;
inline bool GuildBattleInfo::has_win_guildid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GuildBattleInfo::set_has_win_guildid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GuildBattleInfo::clear_has_win_guildid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GuildBattleInfo::clear_win_guildid() {
  win_guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_win_guildid();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildBattleInfo::win_guildid() const {
  return win_guildid_;
}
inline void GuildBattleInfo::set_win_guildid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_win_guildid();
  win_guildid_ = value;
}

// -------------------------------------------------------------------

// GuildBattleInfoList

// repeated .Packet.GuildBattleInfo gblist = 1;
inline int GuildBattleInfoList::gblist_size() const {
  return gblist_.size();
}
inline void GuildBattleInfoList::clear_gblist() {
  gblist_.Clear();
  SetDirty();
}
inline const ::Packet::GuildBattleInfo& GuildBattleInfoList::gblist(int index) const {
  return gblist_.Get(index);
}
inline ::Packet::GuildBattleInfo* GuildBattleInfoList::mutable_gblist(int index) {
  SetDirty();
  return gblist_.Mutable(index);
}
inline ::Packet::GuildBattleInfo* GuildBattleInfoList::add_gblist() {
  SetDirty();
  return gblist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::GuildBattleInfo >&
GuildBattleInfoList::gblist() const {
  return gblist_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::GuildBattleInfo >*
GuildBattleInfoList::mutable_gblist() {
  SetDirty();
  return &gblist_;
}

// required int32 battletimes = 2;
inline bool GuildBattleInfoList::has_battletimes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildBattleInfoList::set_has_battletimes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildBattleInfoList::clear_has_battletimes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildBattleInfoList::clear_battletimes() {
  battletimes_ = 0;
  clear_has_battletimes();
  SetDirty();
}
inline ::google::protobuf::int32 GuildBattleInfoList::battletimes() const {
  return battletimes_;
}
inline void GuildBattleInfoList::set_battletimes(::google::protobuf::int32 value) {
  SetDirty();
  set_has_battletimes();
  battletimes_ = value;
}

// -------------------------------------------------------------------

// SelfGuildBattleInfo

// required .Packet.GuildBattleInfo gbinfo = 1;
inline bool SelfGuildBattleInfo::has_gbinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SelfGuildBattleInfo::set_has_gbinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SelfGuildBattleInfo::clear_has_gbinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SelfGuildBattleInfo::clear_gbinfo() {
  if (gbinfo_ != NULL) gbinfo_->::Packet::GuildBattleInfo::Clear();
  clear_has_gbinfo();
  SetDirty();
}
inline const ::Packet::GuildBattleInfo& SelfGuildBattleInfo::gbinfo() const {
  return gbinfo_ != NULL ? *gbinfo_ : *default_instance_->gbinfo_;
}
inline ::Packet::GuildBattleInfo* SelfGuildBattleInfo::mutable_gbinfo() {
  SetDirty();
  set_has_gbinfo();
  if (gbinfo_ == NULL) gbinfo_ = new ::Packet::GuildBattleInfo;
  return gbinfo_;
}
inline ::Packet::GuildBattleInfo* SelfGuildBattleInfo::release_gbinfo() {
  SetDirty();
  clear_has_gbinfo();
  ::Packet::GuildBattleInfo* temp = gbinfo_;
  gbinfo_ = NULL;
  return temp;
}
inline void SelfGuildBattleInfo::set_allocated_gbinfo(::Packet::GuildBattleInfo* gbinfo) {
  SetDirty();
  delete gbinfo_;
  gbinfo_ = gbinfo;
  if (gbinfo) {
    set_has_gbinfo();
  } else {
    clear_has_gbinfo();
  }
}

// -------------------------------------------------------------------

// GuildBattleListReq

// -------------------------------------------------------------------

// GuildBattleWeekRankInfo

// required fixed64 guildid = 1;
inline bool GuildBattleWeekRankInfo::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildBattleWeekRankInfo::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildBattleWeekRankInfo::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildBattleWeekRankInfo::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildBattleWeekRankInfo::guildid() const {
  return guildid_;
}
inline void GuildBattleWeekRankInfo::set_guildid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guildid();
  guildid_ = value;
}

// required string guildname = 2;
inline bool GuildBattleWeekRankInfo::has_guildname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildBattleWeekRankInfo::set_has_guildname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildBattleWeekRankInfo::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildBattleWeekRankInfo::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
  SetDirty();
}
inline const ::std::string& GuildBattleWeekRankInfo::guildname() const {
  return *guildname_;
}
inline void GuildBattleWeekRankInfo::set_guildname(const ::std::string& value) {
  SetDirty();
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void GuildBattleWeekRankInfo::set_guildname(const char* value) {
  SetDirty();
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void GuildBattleWeekRankInfo::set_guildname(const char* value, size_t size) {
  SetDirty();
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildBattleWeekRankInfo::mutable_guildname() {
  SetDirty();
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* GuildBattleWeekRankInfo::release_guildname() {
  SetDirty();
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildBattleWeekRankInfo::set_allocated_guildname(::std::string* guildname) {
  SetDirty();
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 level = 3;
inline bool GuildBattleWeekRankInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildBattleWeekRankInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildBattleWeekRankInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildBattleWeekRankInfo::clear_level() {
  level_ = 0;
  clear_has_level();
  SetDirty();
}
inline ::google::protobuf::int32 GuildBattleWeekRankInfo::level() const {
  return level_;
}
inline void GuildBattleWeekRankInfo::set_level(::google::protobuf::int32 value) {
  SetDirty();
  set_has_level();
  level_ = value;
}

// required int32 score = 4;
inline bool GuildBattleWeekRankInfo::has_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildBattleWeekRankInfo::set_has_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildBattleWeekRankInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildBattleWeekRankInfo::clear_score() {
  score_ = 0;
  clear_has_score();
  SetDirty();
}
inline ::google::protobuf::int32 GuildBattleWeekRankInfo::score() const {
  return score_;
}
inline void GuildBattleWeekRankInfo::set_score(::google::protobuf::int32 value) {
  SetDirty();
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// GuildBattleWeekRankReq

// -------------------------------------------------------------------

// GuildBattleWeekRankReply

// repeated .Packet.GuildBattleWeekRankInfo list = 1;
inline int GuildBattleWeekRankReply::list_size() const {
  return list_.size();
}
inline void GuildBattleWeekRankReply::clear_list() {
  list_.Clear();
  SetDirty();
}
inline const ::Packet::GuildBattleWeekRankInfo& GuildBattleWeekRankReply::list(int index) const {
  return list_.Get(index);
}
inline ::Packet::GuildBattleWeekRankInfo* GuildBattleWeekRankReply::mutable_list(int index) {
  SetDirty();
  return list_.Mutable(index);
}
inline ::Packet::GuildBattleWeekRankInfo* GuildBattleWeekRankReply::add_list() {
  SetDirty();
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::GuildBattleWeekRankInfo >&
GuildBattleWeekRankReply::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::GuildBattleWeekRankInfo >*
GuildBattleWeekRankReply::mutable_list() {
  SetDirty();
  return &list_;
}

// -------------------------------------------------------------------

// GuildBattleAllRankInfo

// required fixed64 guildid = 1;
inline bool GuildBattleAllRankInfo::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildBattleAllRankInfo::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildBattleAllRankInfo::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildBattleAllRankInfo::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildBattleAllRankInfo::guildid() const {
  return guildid_;
}
inline void GuildBattleAllRankInfo::set_guildid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guildid();
  guildid_ = value;
}

// required string guildname = 2;
inline bool GuildBattleAllRankInfo::has_guildname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildBattleAllRankInfo::set_has_guildname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildBattleAllRankInfo::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildBattleAllRankInfo::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
  SetDirty();
}
inline const ::std::string& GuildBattleAllRankInfo::guildname() const {
  return *guildname_;
}
inline void GuildBattleAllRankInfo::set_guildname(const ::std::string& value) {
  SetDirty();
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void GuildBattleAllRankInfo::set_guildname(const char* value) {
  SetDirty();
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void GuildBattleAllRankInfo::set_guildname(const char* value, size_t size) {
  SetDirty();
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildBattleAllRankInfo::mutable_guildname() {
  SetDirty();
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* GuildBattleAllRankInfo::release_guildname() {
  SetDirty();
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildBattleAllRankInfo::set_allocated_guildname(::std::string* guildname) {
  SetDirty();
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 level = 3;
inline bool GuildBattleAllRankInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildBattleAllRankInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildBattleAllRankInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildBattleAllRankInfo::clear_level() {
  level_ = 0;
  clear_has_level();
  SetDirty();
}
inline ::google::protobuf::int32 GuildBattleAllRankInfo::level() const {
  return level_;
}
inline void GuildBattleAllRankInfo::set_level(::google::protobuf::int32 value) {
  SetDirty();
  set_has_level();
  level_ = value;
}

// required int32 battlewintimes = 4;
inline bool GuildBattleAllRankInfo::has_battlewintimes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildBattleAllRankInfo::set_has_battlewintimes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildBattleAllRankInfo::clear_has_battlewintimes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildBattleAllRankInfo::clear_battlewintimes() {
  battlewintimes_ = 0;
  clear_has_battlewintimes();
  SetDirty();
}
inline ::google::protobuf::int32 GuildBattleAllRankInfo::battlewintimes() const {
  return battlewintimes_;
}
inline void GuildBattleAllRankInfo::set_battlewintimes(::google::protobuf::int32 value) {
  SetDirty();
  set_has_battlewintimes();
  battlewintimes_ = value;
}

// required int32 battletimes = 5;
inline bool GuildBattleAllRankInfo::has_battletimes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuildBattleAllRankInfo::set_has_battletimes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuildBattleAllRankInfo::clear_has_battletimes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuildBattleAllRankInfo::clear_battletimes() {
  battletimes_ = 0;
  clear_has_battletimes();
  SetDirty();
}
inline ::google::protobuf::int32 GuildBattleAllRankInfo::battletimes() const {
  return battletimes_;
}
inline void GuildBattleAllRankInfo::set_battletimes(::google::protobuf::int32 value) {
  SetDirty();
  set_has_battletimes();
  battletimes_ = value;
}

// required float winrate = 6;
inline bool GuildBattleAllRankInfo::has_winrate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GuildBattleAllRankInfo::set_has_winrate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GuildBattleAllRankInfo::clear_has_winrate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GuildBattleAllRankInfo::clear_winrate() {
  winrate_ = 0;
  clear_has_winrate();
  SetDirty();
}
inline float GuildBattleAllRankInfo::winrate() const {
  return winrate_;
}
inline void GuildBattleAllRankInfo::set_winrate(float value) {
  SetDirty();
  set_has_winrate();
  winrate_ = value;
}

// -------------------------------------------------------------------

// GuildBattleAllRankReq

// -------------------------------------------------------------------

// GuildBattleAllRankReply

// repeated .Packet.GuildBattleAllRankInfo list = 1;
inline int GuildBattleAllRankReply::list_size() const {
  return list_.size();
}
inline void GuildBattleAllRankReply::clear_list() {
  list_.Clear();
  SetDirty();
}
inline const ::Packet::GuildBattleAllRankInfo& GuildBattleAllRankReply::list(int index) const {
  return list_.Get(index);
}
inline ::Packet::GuildBattleAllRankInfo* GuildBattleAllRankReply::mutable_list(int index) {
  SetDirty();
  return list_.Mutable(index);
}
inline ::Packet::GuildBattleAllRankInfo* GuildBattleAllRankReply::add_list() {
  SetDirty();
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::GuildBattleAllRankInfo >&
GuildBattleAllRankReply::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::GuildBattleAllRankInfo >*
GuildBattleAllRankReply::mutable_list() {
  SetDirty();
  return &list_;
}

// -------------------------------------------------------------------

// GuildBattleResultReply

// required bool win = 1;
inline bool GuildBattleResultReply::has_win() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildBattleResultReply::set_has_win() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildBattleResultReply::clear_has_win() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildBattleResultReply::clear_win() {
  win_ = false;
  clear_has_win();
  SetDirty();
}
inline bool GuildBattleResultReply::win() const {
  return win_;
}
inline void GuildBattleResultReply::set_win(bool value) {
  SetDirty();
  set_has_win();
  win_ = value;
}

// required int32 time = 2;
inline bool GuildBattleResultReply::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildBattleResultReply::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildBattleResultReply::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildBattleResultReply::clear_time() {
  time_ = 0;
  clear_has_time();
  SetDirty();
}
inline ::google::protobuf::int32 GuildBattleResultReply::time() const {
  return time_;
}
inline void GuildBattleResultReply::set_time(::google::protobuf::int32 value) {
  SetDirty();
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// GuildBattlePlayerInfo

// required fixed64 player_id = 1;
inline bool GuildBattlePlayerInfo::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildBattlePlayerInfo::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildBattlePlayerInfo::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildBattlePlayerInfo::clear_player_id() {
  player_id_ = GOOGLE_ULONGLONG(0);
  clear_has_player_id();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildBattlePlayerInfo::player_id() const {
  return player_id_;
}
inline void GuildBattlePlayerInfo::set_player_id(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_player_id();
  player_id_ = value;
}

// required string player_name = 2;
inline bool GuildBattlePlayerInfo::has_player_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildBattlePlayerInfo::set_has_player_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildBattlePlayerInfo::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildBattlePlayerInfo::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
  SetDirty();
}
inline const ::std::string& GuildBattlePlayerInfo::player_name() const {
  return *player_name_;
}
inline void GuildBattlePlayerInfo::set_player_name(const ::std::string& value) {
  SetDirty();
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void GuildBattlePlayerInfo::set_player_name(const char* value) {
  SetDirty();
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void GuildBattlePlayerInfo::set_player_name(const char* value, size_t size) {
  SetDirty();
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildBattlePlayerInfo::mutable_player_name() {
  SetDirty();
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* GuildBattlePlayerInfo::release_player_name() {
  SetDirty();
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildBattlePlayerInfo::set_allocated_player_name(::std::string* player_name) {
  SetDirty();
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required fixed64 guild_id = 3;
inline bool GuildBattlePlayerInfo::has_guild_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildBattlePlayerInfo::set_has_guild_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildBattlePlayerInfo::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildBattlePlayerInfo::clear_guild_id() {
  guild_id_ = GOOGLE_ULONGLONG(0);
  clear_has_guild_id();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildBattlePlayerInfo::guild_id() const {
  return guild_id_;
}
inline void GuildBattlePlayerInfo::set_guild_id(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guild_id();
  guild_id_ = value;
}

// required int32 score = 4;
inline bool GuildBattlePlayerInfo::has_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildBattlePlayerInfo::set_has_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildBattlePlayerInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildBattlePlayerInfo::clear_score() {
  score_ = 0;
  clear_has_score();
  SetDirty();
}
inline ::google::protobuf::int32 GuildBattlePlayerInfo::score() const {
  return score_;
}
inline void GuildBattlePlayerInfo::set_score(::google::protobuf::int32 value) {
  SetDirty();
  set_has_score();
  score_ = value;
}

// required bool fighting = 5;
inline bool GuildBattlePlayerInfo::has_fighting() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuildBattlePlayerInfo::set_has_fighting() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuildBattlePlayerInfo::clear_has_fighting() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuildBattlePlayerInfo::clear_fighting() {
  fighting_ = false;
  clear_has_fighting();
  SetDirty();
}
inline bool GuildBattlePlayerInfo::fighting() const {
  return fighting_;
}
inline void GuildBattlePlayerInfo::set_fighting(bool value) {
  SetDirty();
  set_has_fighting();
  fighting_ = value;
}

// required int32 streakwin = 6;
inline bool GuildBattlePlayerInfo::has_streakwin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GuildBattlePlayerInfo::set_has_streakwin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GuildBattlePlayerInfo::clear_has_streakwin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GuildBattlePlayerInfo::clear_streakwin() {
  streakwin_ = 0;
  clear_has_streakwin();
  SetDirty();
}
inline ::google::protobuf::int32 GuildBattlePlayerInfo::streakwin() const {
  return streakwin_;
}
inline void GuildBattlePlayerInfo::set_streakwin(::google::protobuf::int32 value) {
  SetDirty();
  set_has_streakwin();
  streakwin_ = value;
}

// required int32 mobility = 7;
inline bool GuildBattlePlayerInfo::has_mobility() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GuildBattlePlayerInfo::set_has_mobility() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GuildBattlePlayerInfo::clear_has_mobility() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GuildBattlePlayerInfo::clear_mobility() {
  mobility_ = 0;
  clear_has_mobility();
  SetDirty();
}
inline ::google::protobuf::int32 GuildBattlePlayerInfo::mobility() const {
  return mobility_;
}
inline void GuildBattlePlayerInfo::set_mobility(::google::protobuf::int32 value) {
  SetDirty();
  set_has_mobility();
  mobility_ = value;
}

// required int32 protectcd = 8;
inline bool GuildBattlePlayerInfo::has_protectcd() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GuildBattlePlayerInfo::set_has_protectcd() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GuildBattlePlayerInfo::clear_has_protectcd() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GuildBattlePlayerInfo::clear_protectcd() {
  protectcd_ = 0;
  clear_has_protectcd();
  SetDirty();
}
inline ::google::protobuf::int32 GuildBattlePlayerInfo::protectcd() const {
  return protectcd_;
}
inline void GuildBattlePlayerInfo::set_protectcd(::google::protobuf::int32 value) {
  SetDirty();
  set_has_protectcd();
  protectcd_ = value;
}

// required int32 battlereward = 9;
inline bool GuildBattlePlayerInfo::has_battlereward() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GuildBattlePlayerInfo::set_has_battlereward() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GuildBattlePlayerInfo::clear_has_battlereward() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GuildBattlePlayerInfo::clear_battlereward() {
  battlereward_ = 0;
  clear_has_battlereward();
  SetDirty();
}
inline ::google::protobuf::int32 GuildBattlePlayerInfo::battlereward() const {
  return battlereward_;
}
inline void GuildBattlePlayerInfo::set_battlereward(::google::protobuf::int32 value) {
  SetDirty();
  set_has_battlereward();
  battlereward_ = value;
}

// required int32 init_actorid = 10;
inline bool GuildBattlePlayerInfo::has_init_actorid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GuildBattlePlayerInfo::set_has_init_actorid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GuildBattlePlayerInfo::clear_has_init_actorid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GuildBattlePlayerInfo::clear_init_actorid() {
  init_actorid_ = 0;
  clear_has_init_actorid();
  SetDirty();
}
inline ::google::protobuf::int32 GuildBattlePlayerInfo::init_actorid() const {
  return init_actorid_;
}
inline void GuildBattlePlayerInfo::set_init_actorid(::google::protobuf::int32 value) {
  SetDirty();
  set_has_init_actorid();
  init_actorid_ = value;
}

// -------------------------------------------------------------------

// GuildBattlePlayerListInfo

// repeated .Packet.GuildBattlePlayerInfo playerlist = 1;
inline int GuildBattlePlayerListInfo::playerlist_size() const {
  return playerlist_.size();
}
inline void GuildBattlePlayerListInfo::clear_playerlist() {
  playerlist_.Clear();
  SetDirty();
}
inline const ::Packet::GuildBattlePlayerInfo& GuildBattlePlayerListInfo::playerlist(int index) const {
  return playerlist_.Get(index);
}
inline ::Packet::GuildBattlePlayerInfo* GuildBattlePlayerListInfo::mutable_playerlist(int index) {
  SetDirty();
  return playerlist_.Mutable(index);
}
inline ::Packet::GuildBattlePlayerInfo* GuildBattlePlayerListInfo::add_playerlist() {
  SetDirty();
  return playerlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::GuildBattlePlayerInfo >&
GuildBattlePlayerListInfo::playerlist() const {
  return playerlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::GuildBattlePlayerInfo >*
GuildBattlePlayerListInfo::mutable_playerlist() {
  SetDirty();
  return &playerlist_;
}

// -------------------------------------------------------------------

// UpdateGuildBattlePlayerInfo

// required .Packet.GuildBattlePlayerInfo playerinfo = 1;
inline bool UpdateGuildBattlePlayerInfo::has_playerinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateGuildBattlePlayerInfo::set_has_playerinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateGuildBattlePlayerInfo::clear_has_playerinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateGuildBattlePlayerInfo::clear_playerinfo() {
  if (playerinfo_ != NULL) playerinfo_->::Packet::GuildBattlePlayerInfo::Clear();
  clear_has_playerinfo();
  SetDirty();
}
inline const ::Packet::GuildBattlePlayerInfo& UpdateGuildBattlePlayerInfo::playerinfo() const {
  return playerinfo_ != NULL ? *playerinfo_ : *default_instance_->playerinfo_;
}
inline ::Packet::GuildBattlePlayerInfo* UpdateGuildBattlePlayerInfo::mutable_playerinfo() {
  SetDirty();
  set_has_playerinfo();
  if (playerinfo_ == NULL) playerinfo_ = new ::Packet::GuildBattlePlayerInfo;
  return playerinfo_;
}
inline ::Packet::GuildBattlePlayerInfo* UpdateGuildBattlePlayerInfo::release_playerinfo() {
  SetDirty();
  clear_has_playerinfo();
  ::Packet::GuildBattlePlayerInfo* temp = playerinfo_;
  playerinfo_ = NULL;
  return temp;
}
inline void UpdateGuildBattlePlayerInfo::set_allocated_playerinfo(::Packet::GuildBattlePlayerInfo* playerinfo) {
  SetDirty();
  delete playerinfo_;
  playerinfo_ = playerinfo;
  if (playerinfo) {
    set_has_playerinfo();
  } else {
    clear_has_playerinfo();
  }
}

// -------------------------------------------------------------------

// UpdateGuildBattleStage

// required .Packet.GuildBattle_Stage stage = 1;
inline bool UpdateGuildBattleStage::has_stage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateGuildBattleStage::set_has_stage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateGuildBattleStage::clear_has_stage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateGuildBattleStage::clear_stage() {
  stage_ = 0;
  clear_has_stage();
  SetDirty();
}
inline ::Packet::GuildBattle_Stage UpdateGuildBattleStage::stage() const {
  return static_cast< ::Packet::GuildBattle_Stage >(stage_);
}
inline void UpdateGuildBattleStage::set_stage(::Packet::GuildBattle_Stage value) {
  assert(::Packet::GuildBattle_Stage_IsValid(value));
  SetDirty();
  set_has_stage();
  stage_ = value;
}

// required bool dialog = 2;
inline bool UpdateGuildBattleStage::has_dialog() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateGuildBattleStage::set_has_dialog() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateGuildBattleStage::clear_has_dialog() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateGuildBattleStage::clear_dialog() {
  dialog_ = false;
  clear_has_dialog();
  SetDirty();
}
inline bool UpdateGuildBattleStage::dialog() const {
  return dialog_;
}
inline void UpdateGuildBattleStage::set_dialog(bool value) {
  SetDirty();
  set_has_dialog();
  dialog_ = value;
}

// -------------------------------------------------------------------

// GuildBattleFightTarget

// required fixed64 target_guid = 1;
inline bool GuildBattleFightTarget::has_target_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildBattleFightTarget::set_has_target_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildBattleFightTarget::clear_has_target_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildBattleFightTarget::clear_target_guid() {
  target_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_target_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildBattleFightTarget::target_guid() const {
  return target_guid_;
}
inline void GuildBattleFightTarget::set_target_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_target_guid();
  target_guid_ = value;
}

// required int32 battle_group_id = 2;
inline bool GuildBattleFightTarget::has_battle_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildBattleFightTarget::set_has_battle_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildBattleFightTarget::clear_has_battle_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildBattleFightTarget::clear_battle_group_id() {
  battle_group_id_ = 0;
  clear_has_battle_group_id();
  SetDirty();
}
inline ::google::protobuf::int32 GuildBattleFightTarget::battle_group_id() const {
  return battle_group_id_;
}
inline void GuildBattleFightTarget::set_battle_group_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_battle_group_id();
  battle_group_id_ = value;
}

// -------------------------------------------------------------------

// GuildWarehouse

// required fixed64 guildid = 1;
inline bool GuildWarehouse::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildWarehouse::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildWarehouse::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildWarehouse::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildWarehouse::guildid() const {
  return guildid_;
}
inline void GuildWarehouse::set_guildid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guildid();
  guildid_ = value;
}

// required int32 index = 2;
inline bool GuildWarehouse::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildWarehouse::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildWarehouse::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildWarehouse::clear_index() {
  index_ = 0;
  clear_has_index();
  SetDirty();
}
inline ::google::protobuf::int32 GuildWarehouse::index() const {
  return index_;
}
inline void GuildWarehouse::set_index(::google::protobuf::int32 value) {
  SetDirty();
  set_has_index();
  index_ = value;
}

// required int32 itemid = 3;
inline bool GuildWarehouse::has_itemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildWarehouse::set_has_itemid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildWarehouse::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildWarehouse::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
  SetDirty();
}
inline ::google::protobuf::int32 GuildWarehouse::itemid() const {
  return itemid_;
}
inline void GuildWarehouse::set_itemid(::google::protobuf::int32 value) {
  SetDirty();
  set_has_itemid();
  itemid_ = value;
}

// required fixed64 receiveplayerid = 4;
inline bool GuildWarehouse::has_receiveplayerid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildWarehouse::set_has_receiveplayerid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildWarehouse::clear_has_receiveplayerid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildWarehouse::clear_receiveplayerid() {
  receiveplayerid_ = GOOGLE_ULONGLONG(0);
  clear_has_receiveplayerid();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildWarehouse::receiveplayerid() const {
  return receiveplayerid_;
}
inline void GuildWarehouse::set_receiveplayerid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_receiveplayerid();
  receiveplayerid_ = value;
}

// -------------------------------------------------------------------

// GuildWarehouseReq

// -------------------------------------------------------------------

// GuildWarehouseReply

// repeated .Packet.GuildWarehouse whlist = 1;
inline int GuildWarehouseReply::whlist_size() const {
  return whlist_.size();
}
inline void GuildWarehouseReply::clear_whlist() {
  whlist_.Clear();
  SetDirty();
}
inline const ::Packet::GuildWarehouse& GuildWarehouseReply::whlist(int index) const {
  return whlist_.Get(index);
}
inline ::Packet::GuildWarehouse* GuildWarehouseReply::mutable_whlist(int index) {
  SetDirty();
  return whlist_.Mutable(index);
}
inline ::Packet::GuildWarehouse* GuildWarehouseReply::add_whlist() {
  SetDirty();
  return whlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::GuildWarehouse >&
GuildWarehouseReply::whlist() const {
  return whlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::GuildWarehouse >*
GuildWarehouseReply::mutable_whlist() {
  SetDirty();
  return &whlist_;
}

// -------------------------------------------------------------------

// GuildWarehouseReceiveReq

// required int32 index = 1;
inline bool GuildWarehouseReceiveReq::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildWarehouseReceiveReq::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildWarehouseReceiveReq::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildWarehouseReceiveReq::clear_index() {
  index_ = 0;
  clear_has_index();
  SetDirty();
}
inline ::google::protobuf::int32 GuildWarehouseReceiveReq::index() const {
  return index_;
}
inline void GuildWarehouseReceiveReq::set_index(::google::protobuf::int32 value) {
  SetDirty();
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// GuildWarehouseSetReceivePlayerReq

// required int32 index = 1;
inline bool GuildWarehouseSetReceivePlayerReq::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildWarehouseSetReceivePlayerReq::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildWarehouseSetReceivePlayerReq::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildWarehouseSetReceivePlayerReq::clear_index() {
  index_ = 0;
  clear_has_index();
  SetDirty();
}
inline ::google::protobuf::int32 GuildWarehouseSetReceivePlayerReq::index() const {
  return index_;
}
inline void GuildWarehouseSetReceivePlayerReq::set_index(::google::protobuf::int32 value) {
  SetDirty();
  set_has_index();
  index_ = value;
}

// required fixed64 receiveplayerid = 2;
inline bool GuildWarehouseSetReceivePlayerReq::has_receiveplayerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildWarehouseSetReceivePlayerReq::set_has_receiveplayerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildWarehouseSetReceivePlayerReq::clear_has_receiveplayerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildWarehouseSetReceivePlayerReq::clear_receiveplayerid() {
  receiveplayerid_ = GOOGLE_ULONGLONG(0);
  clear_has_receiveplayerid();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildWarehouseSetReceivePlayerReq::receiveplayerid() const {
  return receiveplayerid_;
}
inline void GuildWarehouseSetReceivePlayerReq::set_receiveplayerid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_receiveplayerid();
  receiveplayerid_ = value;
}

// -------------------------------------------------------------------

// GuildWarehouseUpdate

// required .Packet.GuildWarehouse item = 1;
inline bool GuildWarehouseUpdate::has_item() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildWarehouseUpdate::set_has_item() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildWarehouseUpdate::clear_has_item() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildWarehouseUpdate::clear_item() {
  if (item_ != NULL) item_->::Packet::GuildWarehouse::Clear();
  clear_has_item();
  SetDirty();
}
inline const ::Packet::GuildWarehouse& GuildWarehouseUpdate::item() const {
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
inline ::Packet::GuildWarehouse* GuildWarehouseUpdate::mutable_item() {
  SetDirty();
  set_has_item();
  if (item_ == NULL) item_ = new ::Packet::GuildWarehouse;
  return item_;
}
inline ::Packet::GuildWarehouse* GuildWarehouseUpdate::release_item() {
  SetDirty();
  clear_has_item();
  ::Packet::GuildWarehouse* temp = item_;
  item_ = NULL;
  return temp;
}
inline void GuildWarehouseUpdate::set_allocated_item(::Packet::GuildWarehouse* item) {
  SetDirty();
  delete item_;
  item_ = item;
  if (item) {
    set_has_item();
  } else {
    clear_has_item();
  }
}

// -------------------------------------------------------------------

// GuildWarehouseRecord

// required fixed64 guildid = 1;
inline bool GuildWarehouseRecord::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildWarehouseRecord::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildWarehouseRecord::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildWarehouseRecord::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildWarehouseRecord::guildid() const {
  return guildid_;
}
inline void GuildWarehouseRecord::set_guildid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guildid();
  guildid_ = value;
}

// required fixed64 id = 2;
inline bool GuildWarehouseRecord::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildWarehouseRecord::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildWarehouseRecord::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildWarehouseRecord::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildWarehouseRecord::id() const {
  return id_;
}
inline void GuildWarehouseRecord::set_id(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_id();
  id_ = value;
}

// required uint32 date = 3;
inline bool GuildWarehouseRecord::has_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildWarehouseRecord::set_has_date() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildWarehouseRecord::clear_has_date() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildWarehouseRecord::clear_date() {
  date_ = 0u;
  clear_has_date();
  SetDirty();
}
inline ::google::protobuf::uint32 GuildWarehouseRecord::date() const {
  return date_;
}
inline void GuildWarehouseRecord::set_date(::google::protobuf::uint32 value) {
  SetDirty();
  set_has_date();
  date_ = value;
}

// required string player_name = 4;
inline bool GuildWarehouseRecord::has_player_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildWarehouseRecord::set_has_player_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildWarehouseRecord::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildWarehouseRecord::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
  SetDirty();
}
inline const ::std::string& GuildWarehouseRecord::player_name() const {
  return *player_name_;
}
inline void GuildWarehouseRecord::set_player_name(const ::std::string& value) {
  SetDirty();
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void GuildWarehouseRecord::set_player_name(const char* value) {
  SetDirty();
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void GuildWarehouseRecord::set_player_name(const char* value, size_t size) {
  SetDirty();
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildWarehouseRecord::mutable_player_name() {
  SetDirty();
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* GuildWarehouseRecord::release_player_name() {
  SetDirty();
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildWarehouseRecord::set_allocated_player_name(::std::string* player_name) {
  SetDirty();
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 itemid = 5;
inline bool GuildWarehouseRecord::has_itemid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuildWarehouseRecord::set_has_itemid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuildWarehouseRecord::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuildWarehouseRecord::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
  SetDirty();
}
inline ::google::protobuf::int32 GuildWarehouseRecord::itemid() const {
  return itemid_;
}
inline void GuildWarehouseRecord::set_itemid(::google::protobuf::int32 value) {
  SetDirty();
  set_has_itemid();
  itemid_ = value;
}

// -------------------------------------------------------------------

// GuildWarehouseRecordReq

// -------------------------------------------------------------------

// GuildWarehouseRecordReply

// repeated .Packet.GuildWarehouseRecord record = 1;
inline int GuildWarehouseRecordReply::record_size() const {
  return record_.size();
}
inline void GuildWarehouseRecordReply::clear_record() {
  record_.Clear();
  SetDirty();
}
inline const ::Packet::GuildWarehouseRecord& GuildWarehouseRecordReply::record(int index) const {
  return record_.Get(index);
}
inline ::Packet::GuildWarehouseRecord* GuildWarehouseRecordReply::mutable_record(int index) {
  SetDirty();
  return record_.Mutable(index);
}
inline ::Packet::GuildWarehouseRecord* GuildWarehouseRecordReply::add_record() {
  SetDirty();
  return record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::GuildWarehouseRecord >&
GuildWarehouseRecordReply::record() const {
  return record_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::GuildWarehouseRecord >*
GuildWarehouseRecordReply::mutable_record() {
  SetDirty();
  return &record_;
}

// -------------------------------------------------------------------

// GuildSpoilItem

// required fixed64 guildid = 1;
inline bool GuildSpoilItem::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildSpoilItem::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildSpoilItem::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildSpoilItem::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildSpoilItem::guildid() const {
  return guildid_;
}
inline void GuildSpoilItem::set_guildid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guildid();
  guildid_ = value;
}

// required int32 index = 2;
inline bool GuildSpoilItem::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildSpoilItem::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildSpoilItem::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildSpoilItem::clear_index() {
  index_ = 0;
  clear_has_index();
  SetDirty();
}
inline ::google::protobuf::int32 GuildSpoilItem::index() const {
  return index_;
}
inline void GuildSpoilItem::set_index(::google::protobuf::int32 value) {
  SetDirty();
  set_has_index();
  index_ = value;
}

// required int32 copyid = 3;
inline bool GuildSpoilItem::has_copyid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildSpoilItem::set_has_copyid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildSpoilItem::clear_has_copyid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildSpoilItem::clear_copyid() {
  copyid_ = 0;
  clear_has_copyid();
  SetDirty();
}
inline ::google::protobuf::int32 GuildSpoilItem::copyid() const {
  return copyid_;
}
inline void GuildSpoilItem::set_copyid(::google::protobuf::int32 value) {
  SetDirty();
  set_has_copyid();
  copyid_ = value;
}

// required int32 itemid = 4;
inline bool GuildSpoilItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildSpoilItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildSpoilItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildSpoilItem::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
  SetDirty();
}
inline ::google::protobuf::int32 GuildSpoilItem::itemid() const {
  return itemid_;
}
inline void GuildSpoilItem::set_itemid(::google::protobuf::int32 value) {
  SetDirty();
  set_has_itemid();
  itemid_ = value;
}

// required int32 timecd = 5;
inline bool GuildSpoilItem::has_timecd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuildSpoilItem::set_has_timecd() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuildSpoilItem::clear_has_timecd() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuildSpoilItem::clear_timecd() {
  timecd_ = 0;
  clear_has_timecd();
  SetDirty();
}
inline ::google::protobuf::int32 GuildSpoilItem::timecd() const {
  return timecd_;
}
inline void GuildSpoilItem::set_timecd(::google::protobuf::int32 value) {
  SetDirty();
  set_has_timecd();
  timecd_ = value;
}

// repeated fixed64 playerid = 6;
inline int GuildSpoilItem::playerid_size() const {
  return playerid_.size();
}
inline void GuildSpoilItem::clear_playerid() {
  playerid_.Clear();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildSpoilItem::playerid(int index) const {
  return playerid_.Get(index);
}
inline void GuildSpoilItem::set_playerid(int index, ::google::protobuf::uint64 value) {
  SetDirty();
  playerid_.Set(index, value);
}
inline void GuildSpoilItem::add_playerid(::google::protobuf::uint64 value) {
  SetDirty();
  playerid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
GuildSpoilItem::playerid() const {
  return playerid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
GuildSpoilItem::mutable_playerid() {
  SetDirty();
  return &playerid_;
}

// -------------------------------------------------------------------

// GuildRecord

// required fixed64 guildid = 1;
inline bool GuildRecord::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRecord::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRecord::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRecord::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildRecord::guildid() const {
  return guildid_;
}
inline void GuildRecord::set_guildid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guildid();
  guildid_ = value;
}

// required int32 index = 2;
inline bool GuildRecord::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildRecord::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildRecord::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildRecord::clear_index() {
  index_ = 0;
  clear_has_index();
  SetDirty();
}
inline ::google::protobuf::int32 GuildRecord::index() const {
  return index_;
}
inline void GuildRecord::set_index(::google::protobuf::int32 value) {
  SetDirty();
  set_has_index();
  index_ = value;
}

// required string record = 3;
inline bool GuildRecord::has_record() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildRecord::set_has_record() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildRecord::clear_has_record() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildRecord::clear_record() {
  if (record_ != &::google::protobuf::internal::kEmptyString) {
    record_->clear();
  }
  clear_has_record();
  SetDirty();
}
inline const ::std::string& GuildRecord::record() const {
  return *record_;
}
inline void GuildRecord::set_record(const ::std::string& value) {
  SetDirty();
  set_has_record();
  if (record_ == &::google::protobuf::internal::kEmptyString) {
    record_ = new ::std::string;
  }
  record_->assign(value);
}
inline void GuildRecord::set_record(const char* value) {
  SetDirty();
  set_has_record();
  if (record_ == &::google::protobuf::internal::kEmptyString) {
    record_ = new ::std::string;
  }
  record_->assign(value);
}
inline void GuildRecord::set_record(const char* value, size_t size) {
  SetDirty();
  set_has_record();
  if (record_ == &::google::protobuf::internal::kEmptyString) {
    record_ = new ::std::string;
  }
  record_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildRecord::mutable_record() {
  SetDirty();
  set_has_record();
  if (record_ == &::google::protobuf::internal::kEmptyString) {
    record_ = new ::std::string;
  }
  return record_;
}
inline ::std::string* GuildRecord::release_record() {
  SetDirty();
  clear_has_record();
  if (record_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = record_;
    record_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildRecord::set_allocated_record(::std::string* record) {
  SetDirty();
  if (record_ != &::google::protobuf::internal::kEmptyString) {
    delete record_;
  }
  if (record) {
    set_has_record();
    record_ = record;
  } else {
    clear_has_record();
    record_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 date = 4;
inline bool GuildRecord::has_date() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildRecord::set_has_date() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildRecord::clear_has_date() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildRecord::clear_date() {
  date_ = 0u;
  clear_has_date();
  SetDirty();
}
inline ::google::protobuf::uint32 GuildRecord::date() const {
  return date_;
}
inline void GuildRecord::set_date(::google::protobuf::uint32 value) {
  SetDirty();
  set_has_date();
  date_ = value;
}

// -------------------------------------------------------------------

// GuildRecordReply

// repeated .Packet.GuildRecord records = 1;
inline int GuildRecordReply::records_size() const {
  return records_.size();
}
inline void GuildRecordReply::clear_records() {
  records_.Clear();
  SetDirty();
}
inline const ::Packet::GuildRecord& GuildRecordReply::records(int index) const {
  return records_.Get(index);
}
inline ::Packet::GuildRecord* GuildRecordReply::mutable_records(int index) {
  SetDirty();
  return records_.Mutable(index);
}
inline ::Packet::GuildRecord* GuildRecordReply::add_records() {
  SetDirty();
  return records_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::GuildRecord >&
GuildRecordReply::records() const {
  return records_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::GuildRecord >*
GuildRecordReply::mutable_records() {
  SetDirty();
  return &records_;
}

// -------------------------------------------------------------------

// GuildUserName

// required fixed64 playerid = 1;
inline bool GuildUserName::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildUserName::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildUserName::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildUserName::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
  clear_has_playerid();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildUserName::playerid() const {
  return playerid_;
}
inline void GuildUserName::set_playerid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_playerid();
  playerid_ = value;
}

// required string playername = 2;
inline bool GuildUserName::has_playername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildUserName::set_has_playername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildUserName::clear_has_playername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildUserName::clear_playername() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    playername_->clear();
  }
  clear_has_playername();
  SetDirty();
}
inline const ::std::string& GuildUserName::playername() const {
  return *playername_;
}
inline void GuildUserName::set_playername(const ::std::string& value) {
  SetDirty();
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void GuildUserName::set_playername(const char* value) {
  SetDirty();
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void GuildUserName::set_playername(const char* value, size_t size) {
  SetDirty();
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildUserName::mutable_playername() {
  SetDirty();
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  return playername_;
}
inline ::std::string* GuildUserName::release_playername() {
  SetDirty();
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildUserName::set_allocated_playername(::std::string* playername) {
  SetDirty();
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 hair = 3;
inline bool GuildUserName::has_hair() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildUserName::set_has_hair() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildUserName::clear_has_hair() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildUserName::clear_hair() {
  hair_ = 0;
  clear_has_hair();
  SetDirty();
}
inline ::google::protobuf::int32 GuildUserName::hair() const {
  return hair_;
}
inline void GuildUserName::set_hair(::google::protobuf::int32 value) {
  SetDirty();
  set_has_hair();
  hair_ = value;
}

// -------------------------------------------------------------------

// GuildSpoilItemClient

// required int32 index = 1;
inline bool GuildSpoilItemClient::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildSpoilItemClient::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildSpoilItemClient::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildSpoilItemClient::clear_index() {
  index_ = 0;
  clear_has_index();
  SetDirty();
}
inline ::google::protobuf::int32 GuildSpoilItemClient::index() const {
  return index_;
}
inline void GuildSpoilItemClient::set_index(::google::protobuf::int32 value) {
  SetDirty();
  set_has_index();
  index_ = value;
}

// required int32 copyid = 2;
inline bool GuildSpoilItemClient::has_copyid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildSpoilItemClient::set_has_copyid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildSpoilItemClient::clear_has_copyid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildSpoilItemClient::clear_copyid() {
  copyid_ = 0;
  clear_has_copyid();
  SetDirty();
}
inline ::google::protobuf::int32 GuildSpoilItemClient::copyid() const {
  return copyid_;
}
inline void GuildSpoilItemClient::set_copyid(::google::protobuf::int32 value) {
  SetDirty();
  set_has_copyid();
  copyid_ = value;
}

// required int32 itemid = 3;
inline bool GuildSpoilItemClient::has_itemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildSpoilItemClient::set_has_itemid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildSpoilItemClient::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildSpoilItemClient::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
  SetDirty();
}
inline ::google::protobuf::int32 GuildSpoilItemClient::itemid() const {
  return itemid_;
}
inline void GuildSpoilItemClient::set_itemid(::google::protobuf::int32 value) {
  SetDirty();
  set_has_itemid();
  itemid_ = value;
}

// required int32 timecd = 4;
inline bool GuildSpoilItemClient::has_timecd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildSpoilItemClient::set_has_timecd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildSpoilItemClient::clear_has_timecd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildSpoilItemClient::clear_timecd() {
  timecd_ = 0;
  clear_has_timecd();
  SetDirty();
}
inline ::google::protobuf::int32 GuildSpoilItemClient::timecd() const {
  return timecd_;
}
inline void GuildSpoilItemClient::set_timecd(::google::protobuf::int32 value) {
  SetDirty();
  set_has_timecd();
  timecd_ = value;
}

// repeated .Packet.GuildUserName applyplayer = 5;
inline int GuildSpoilItemClient::applyplayer_size() const {
  return applyplayer_.size();
}
inline void GuildSpoilItemClient::clear_applyplayer() {
  applyplayer_.Clear();
  SetDirty();
}
inline const ::Packet::GuildUserName& GuildSpoilItemClient::applyplayer(int index) const {
  return applyplayer_.Get(index);
}
inline ::Packet::GuildUserName* GuildSpoilItemClient::mutable_applyplayer(int index) {
  SetDirty();
  return applyplayer_.Mutable(index);
}
inline ::Packet::GuildUserName* GuildSpoilItemClient::add_applyplayer() {
  SetDirty();
  return applyplayer_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::GuildUserName >&
GuildSpoilItemClient::applyplayer() const {
  return applyplayer_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::GuildUserName >*
GuildSpoilItemClient::mutable_applyplayer() {
  SetDirty();
  return &applyplayer_;
}

// -------------------------------------------------------------------

// GuildSpoilItemReply

// repeated .Packet.GuildSpoilItemClient items = 1;
inline int GuildSpoilItemReply::items_size() const {
  return items_.size();
}
inline void GuildSpoilItemReply::clear_items() {
  items_.Clear();
  SetDirty();
}
inline const ::Packet::GuildSpoilItemClient& GuildSpoilItemReply::items(int index) const {
  return items_.Get(index);
}
inline ::Packet::GuildSpoilItemClient* GuildSpoilItemReply::mutable_items(int index) {
  SetDirty();
  return items_.Mutable(index);
}
inline ::Packet::GuildSpoilItemClient* GuildSpoilItemReply::add_items() {
  SetDirty();
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::GuildSpoilItemClient >&
GuildSpoilItemReply::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::GuildSpoilItemClient >*
GuildSpoilItemReply::mutable_items() {
  SetDirty();
  return &items_;
}

// -------------------------------------------------------------------

// UpdateGuildSpoilItemClient

// required int32 index = 1;
inline bool UpdateGuildSpoilItemClient::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateGuildSpoilItemClient::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateGuildSpoilItemClient::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateGuildSpoilItemClient::clear_index() {
  index_ = 0;
  clear_has_index();
  SetDirty();
}
inline ::google::protobuf::int32 UpdateGuildSpoilItemClient::index() const {
  return index_;
}
inline void UpdateGuildSpoilItemClient::set_index(::google::protobuf::int32 value) {
  SetDirty();
  set_has_index();
  index_ = value;
}

// repeated .Packet.GuildUserName applyplayer = 2;
inline int UpdateGuildSpoilItemClient::applyplayer_size() const {
  return applyplayer_.size();
}
inline void UpdateGuildSpoilItemClient::clear_applyplayer() {
  applyplayer_.Clear();
  SetDirty();
}
inline const ::Packet::GuildUserName& UpdateGuildSpoilItemClient::applyplayer(int index) const {
  return applyplayer_.Get(index);
}
inline ::Packet::GuildUserName* UpdateGuildSpoilItemClient::mutable_applyplayer(int index) {
  SetDirty();
  return applyplayer_.Mutable(index);
}
inline ::Packet::GuildUserName* UpdateGuildSpoilItemClient::add_applyplayer() {
  SetDirty();
  return applyplayer_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::GuildUserName >&
UpdateGuildSpoilItemClient::applyplayer() const {
  return applyplayer_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::GuildUserName >*
UpdateGuildSpoilItemClient::mutable_applyplayer() {
  SetDirty();
  return &applyplayer_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Guild_2eproto__INCLUDED
