// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneBroadCast.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SceneBroadCast.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Packet {

namespace {

const ::google::protobuf::Descriptor* PlayerLoadEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerLoadEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerUnloadEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerUnloadEquip_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SceneBroadCast_2eproto() {
  protobuf_AddDesc_SceneBroadCast_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SceneBroadCast.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerLoadEquip_descriptor_ = file->message_type(0);
  static const int PlayerLoadEquip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoadEquip, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoadEquip, equip_),
  };
  PlayerLoadEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerLoadEquip_descriptor_,
      PlayerLoadEquip::default_instance_,
      PlayerLoadEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoadEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLoadEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerLoadEquip));
  PlayerUnloadEquip_descriptor_ = file->message_type(1);
  static const int PlayerUnloadEquip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerUnloadEquip, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerUnloadEquip, equip_),
  };
  PlayerUnloadEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerUnloadEquip_descriptor_,
      PlayerUnloadEquip::default_instance_,
      PlayerUnloadEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerUnloadEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerUnloadEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerUnloadEquip));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SceneBroadCast_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerLoadEquip_descriptor_, &PlayerLoadEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerUnloadEquip_descriptor_, &PlayerUnloadEquip::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SceneBroadCast_2eproto() {
  delete PlayerLoadEquip::default_instance_;
  delete PlayerLoadEquip_reflection_;
  delete PlayerUnloadEquip::default_instance_;
  delete PlayerUnloadEquip_reflection_;
}

void protobuf_AddDesc_SceneBroadCast_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Packet::protobuf_AddDesc_ItemAndEquip_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024SceneBroadCast.proto\022\006Packet\032\022ItemAndE"
    "quip.proto\"A\n\017PlayerLoadEquip\022\014\n\004guid\030\001 "
    "\002(\006\022 \n\005equip\030\002 \002(\0132\021.Packet.EquipItem\"C\n"
    "\021PlayerUnloadEquip\022\014\n\004guid\030\001 \002(\006\022 \n\005equi"
    "p\030\002 \002(\0132\021.Packet.EquipItem", 186);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SceneBroadCast.proto", &protobuf_RegisterTypes);
  PlayerLoadEquip::default_instance_ = new PlayerLoadEquip();
  PlayerUnloadEquip::default_instance_ = new PlayerUnloadEquip();
  PlayerLoadEquip::default_instance_->InitAsDefaultInstance();
  PlayerUnloadEquip::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SceneBroadCast_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SceneBroadCast_2eproto {
  StaticDescriptorInitializer_SceneBroadCast_2eproto() {
    protobuf_AddDesc_SceneBroadCast_2eproto();
  }
} static_descriptor_initializer_SceneBroadCast_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PlayerLoadEquip::kGuidFieldNumber;
const int PlayerLoadEquip::kEquipFieldNumber;
#endif  // !_MSC_VER

PlayerLoadEquip::PlayerLoadEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerLoadEquip::InitAsDefaultInstance() {
  equip_ = const_cast< ::Packet::EquipItem*>(&::Packet::EquipItem::default_instance());
}

PlayerLoadEquip::PlayerLoadEquip(const PlayerLoadEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerLoadEquip::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  equip_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerLoadEquip::~PlayerLoadEquip() {
  SharedDtor();
}

void PlayerLoadEquip::SharedDtor() {
  if (this != default_instance_) {
    delete equip_;
  }
}

void PlayerLoadEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerLoadEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerLoadEquip_descriptor_;
}

const PlayerLoadEquip& PlayerLoadEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneBroadCast_2eproto();
  return *default_instance_;
}

PlayerLoadEquip* PlayerLoadEquip::default_instance_ = NULL;

PlayerLoadEquip* PlayerLoadEquip::New() const {
  return new PlayerLoadEquip;
}

void PlayerLoadEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    if (has_equip()) {
      if (equip_ != NULL) equip_->::Packet::EquipItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerLoadEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equip;
        break;
      }

      // required .Packet.EquipItem equip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerLoadEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required .Packet.EquipItem equip = 2;
  if (has_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerLoadEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required .Packet.EquipItem equip = 2;
  if (has_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerLoadEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required .Packet.EquipItem equip = 2;
    if (has_equip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerLoadEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerLoadEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerLoadEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerLoadEquip::MergeFrom(const PlayerLoadEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_equip()) {
      mutable_equip()->::Packet::EquipItem::MergeFrom(from.equip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerLoadEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerLoadEquip::CopyFrom(const PlayerLoadEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerLoadEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_equip()) {
    if (!this->equip().IsInitialized()) return false;
  }
  return true;
}

void PlayerLoadEquip::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  if (has_equip()) {
    this->mutable_equip()->SetInitialized();
  }
  return;
}

void PlayerLoadEquip::Swap(PlayerLoadEquip* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(equip_, other->equip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerLoadEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerLoadEquip_descriptor_;
  metadata.reflection = PlayerLoadEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerUnloadEquip::kGuidFieldNumber;
const int PlayerUnloadEquip::kEquipFieldNumber;
#endif  // !_MSC_VER

PlayerUnloadEquip::PlayerUnloadEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerUnloadEquip::InitAsDefaultInstance() {
  equip_ = const_cast< ::Packet::EquipItem*>(&::Packet::EquipItem::default_instance());
}

PlayerUnloadEquip::PlayerUnloadEquip(const PlayerUnloadEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerUnloadEquip::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  equip_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerUnloadEquip::~PlayerUnloadEquip() {
  SharedDtor();
}

void PlayerUnloadEquip::SharedDtor() {
  if (this != default_instance_) {
    delete equip_;
  }
}

void PlayerUnloadEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerUnloadEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerUnloadEquip_descriptor_;
}

const PlayerUnloadEquip& PlayerUnloadEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneBroadCast_2eproto();
  return *default_instance_;
}

PlayerUnloadEquip* PlayerUnloadEquip::default_instance_ = NULL;

PlayerUnloadEquip* PlayerUnloadEquip::New() const {
  return new PlayerUnloadEquip;
}

void PlayerUnloadEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    if (has_equip()) {
      if (equip_ != NULL) equip_->::Packet::EquipItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerUnloadEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equip;
        break;
      }

      // required .Packet.EquipItem equip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerUnloadEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required .Packet.EquipItem equip = 2;
  if (has_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerUnloadEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required .Packet.EquipItem equip = 2;
  if (has_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerUnloadEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required .Packet.EquipItem equip = 2;
    if (has_equip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerUnloadEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerUnloadEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerUnloadEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerUnloadEquip::MergeFrom(const PlayerUnloadEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_equip()) {
      mutable_equip()->::Packet::EquipItem::MergeFrom(from.equip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerUnloadEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerUnloadEquip::CopyFrom(const PlayerUnloadEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerUnloadEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_equip()) {
    if (!this->equip().IsInitialized()) return false;
  }
  return true;
}

void PlayerUnloadEquip::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  if (has_equip()) {
    this->mutable_equip()->SetInitialized();
  }
  return;
}

void PlayerUnloadEquip::Swap(PlayerUnloadEquip* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(equip_, other->equip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerUnloadEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerUnloadEquip_descriptor_;
  metadata.reflection = PlayerUnloadEquip_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

// @@protoc_insertion_point(global_scope)
