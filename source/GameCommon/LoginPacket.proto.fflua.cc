// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LoginPacket.proto
#include "LoginPacket.pb.h"
#include "LoginPacket.proto.fflua.h"
namespace Packet {
bool AccountNameVerify_fflua_reg(lua_State* state)
{
//for decltype
	AccountNameVerify* message(nullptr);
	message;
	ff::fflua_register_t<AccountNameVerify, ctor()>(state, "AccountNameVerify", "google::protobuf::Message")
		// required string userid = 1;
		.def(&AccountNameVerify::userid, "userid")
		.def<void (AccountNameVerify::*)(const std::string&)>(&AccountNameVerify::set_userid, "set_userid")
		.def(&AccountNameVerify::ByteSize, "ByteSize")
		.def(&AccountNameVerify::SetInitialized, "SetInitialized")
		;
	return true;
}
bool AccountNameVerifyReply_fflua_reg(lua_State* state)
{
//for decltype
	AccountNameVerifyReply* message(nullptr);
	message;
	ff::fflua_register_t<AccountNameVerifyReply, ctor()>(state, "AccountNameVerifyReply", "google::protobuf::Message")
		// required .Packet.AccountNameVerify requset = 1;
		.def(&AccountNameVerifyReply::requset, "requset")
		.def(&AccountNameVerifyReply::mutable_requset, "mutable_requset")
		// required .Packet.AccountNameVerifyReply.Result result = 2;
		.def(&AccountNameVerifyReply::result, "result")
		.def(&AccountNameVerifyReply::set_result, "set_result")
		.def(&AccountNameVerifyReply::ByteSize, "ByteSize")
		.def(&AccountNameVerifyReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool AccountRegist_fflua_reg(lua_State* state)
{
//for decltype
	AccountRegist* message(nullptr);
	message;
	ff::fflua_register_t<AccountRegist, ctor()>(state, "AccountRegist", "google::protobuf::Message")
		// required string userid = 1;
		.def(&AccountRegist::userid, "userid")
		.def<void (AccountRegist::*)(const std::string&)>(&AccountRegist::set_userid, "set_userid")
		// required string password = 2;
		.def(&AccountRegist::password, "password")
		.def<void (AccountRegist::*)(const std::string&)>(&AccountRegist::set_password, "set_password")
		// required string udid = 3;
		.def(&AccountRegist::udid, "udid")
		.def<void (AccountRegist::*)(const std::string&)>(&AccountRegist::set_udid, "set_udid")
		// required int32 partnerid = 4;
		.def(&AccountRegist::partnerid, "partnerid")
		.def(&AccountRegist::set_partnerid, "set_partnerid")
		.def(&AccountRegist::ByteSize, "ByteSize")
		.def(&AccountRegist::SetInitialized, "SetInitialized")
		;
	return true;
}
bool AccountRegistReply_fflua_reg(lua_State* state)
{
//for decltype
	AccountRegistReply* message(nullptr);
	message;
	ff::fflua_register_t<AccountRegistReply, ctor()>(state, "AccountRegistReply", "google::protobuf::Message")
		// required .Packet.AccountRegist requset = 1;
		.def(&AccountRegistReply::requset, "requset")
		.def(&AccountRegistReply::mutable_requset, "mutable_requset")
		// required .Packet.AccountRegistReply.Result result = 2;
		.def(&AccountRegistReply::result, "result")
		.def(&AccountRegistReply::set_result, "set_result")
		.def(&AccountRegistReply::ByteSize, "ByteSize")
		.def(&AccountRegistReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool LoginRequest_fflua_reg(lua_State* state)
{
//for decltype
	LoginRequest* message(nullptr);
	message;
	ff::fflua_register_t<LoginRequest, ctor()>(state, "LoginRequest", "google::protobuf::Message")
		// required string version = 1;
		.def(&LoginRequest::version, "version")
		.def<void (LoginRequest::*)(const std::string&)>(&LoginRequest::set_version, "set_version")
		// required string userid = 2;
		.def(&LoginRequest::userid, "userid")
		.def<void (LoginRequest::*)(const std::string&)>(&LoginRequest::set_userid, "set_userid")
		// required string password = 3;
		.def(&LoginRequest::password, "password")
		.def<void (LoginRequest::*)(const std::string&)>(&LoginRequest::set_password, "set_password")
		// required .Packet.AccountType type = 4;
		.def(&LoginRequest::type, "type")
		.def(&LoginRequest::set_type, "set_type")
		// required string loginkey = 5;
		.def(&LoginRequest::loginkey, "loginkey")
		.def<void (LoginRequest::*)(const std::string&)>(&LoginRequest::set_loginkey, "set_loginkey")
		// required int32 partnerid = 6;
		.def(&LoginRequest::partnerid, "partnerid")
		.def(&LoginRequest::set_partnerid, "set_partnerid")
		// required string device_type = 7;
		.def(&LoginRequest::device_type, "device_type")
		.def<void (LoginRequest::*)(const std::string&)>(&LoginRequest::set_device_type, "set_device_type")
		// required string udid = 8;
		.def(&LoginRequest::udid, "udid")
		.def<void (LoginRequest::*)(const std::string&)>(&LoginRequest::set_udid, "set_udid")
		// required string osversion = 9;
		.def(&LoginRequest::osversion, "osversion")
		.def<void (LoginRequest::*)(const std::string&)>(&LoginRequest::set_osversion, "set_osversion")
		// required string login_ip = 10;
		.def(&LoginRequest::login_ip, "login_ip")
		.def<void (LoginRequest::*)(const std::string&)>(&LoginRequest::set_login_ip, "set_login_ip")
		// required int32 gameversionid = 11;
		.def(&LoginRequest::gameversionid, "gameversionid")
		.def(&LoginRequest::set_gameversionid, "set_gameversionid")
		.def(&LoginRequest::ByteSize, "ByteSize")
		.def(&LoginRequest::SetInitialized, "SetInitialized")
		;
	return true;
}
bool LoginReply_fflua_reg(lua_State* state)
{
//for decltype
	LoginReply* message(nullptr);
	message;
	ff::fflua_register_t<LoginReply, ctor()>(state, "LoginReply", "google::protobuf::Message")
		// required .Packet.LoginReply.Result result = 1;
		.def(&LoginReply::result, "result")
		.def(&LoginReply::set_result, "set_result")
		// optional string version = 2;
		.def(&LoginReply::version, "version")
		.def<void (LoginReply::*)(const std::string&)>(&LoginReply::set_version, "set_version")
		.def(&LoginReply::has_version, "has_version")
		.def(&LoginReply::ByteSize, "ByteSize")
		.def(&LoginReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool AccountPlayerList_fflua_reg(lua_State* state)
{
//for decltype
	AccountPlayerList* message(nullptr);
	message;
	ff::fflua_register_t<AccountPlayerList, ctor()>(state, "AccountPlayerList", "google::protobuf::Message");
	return true;
}
bool AccountModel_fflua_reg(lua_State* state)
{
//for decltype
	AccountModel* message(nullptr);
	message;
	ff::fflua_register_t<AccountModel, ctor()>(state, "AccountModel", "google::protobuf::Message")
		// required fixed64 guid = 1;
		.def(&AccountModel::guid, "guid")
		.def(&AccountModel::set_guid, "set_guid")
		// required string userid = 2;
		.def(&AccountModel::userid, "userid")
		.def<void (AccountModel::*)(const std::string&)>(&AccountModel::set_userid, "set_userid")
		// required string password = 3;
		.def(&AccountModel::password, "password")
		.def<void (AccountModel::*)(const std::string&)>(&AccountModel::set_password, "set_password")
		// required .Packet.AccountType account_type = 4;
		.def(&AccountModel::account_type, "account_type")
		.def(&AccountModel::set_account_type, "set_account_type")
		// required string udid = 5;
		.def(&AccountModel::udid, "udid")
		.def<void (AccountModel::*)(const std::string&)>(&AccountModel::set_udid, "set_udid")
		// required int32 partnerid = 6;
		.def(&AccountModel::partnerid, "partnerid")
		.def(&AccountModel::set_partnerid, "set_partnerid")
		.def(&AccountModel::ByteSize, "ByteSize")
		.def(&AccountModel::SetInitialized, "SetInitialized")
		;
	return true;
}
bool AccountPlayerListReply_fflua_reg(lua_State* state)
{
//for decltype
	AccountPlayerListReply* message(nullptr);
	message;
	ff::fflua_register_t<AccountPlayerListReply, ctor()>(state, "AccountPlayerListReply", "google::protobuf::Message")
		// repeated .Packet.PlayerDBInfo player_list = 1;
		.def(&AccountPlayerListReply::player_list_size, "player_list_size")
		.def<decltype(message->player_list(0)) (AccountPlayerListReply::*)(int) const>(&AccountPlayerListReply::player_list, "player_list")
		.def<decltype(message->mutable_player_list(0)) (AccountPlayerListReply::*)(int)>(&AccountPlayerListReply::mutable_player_list, "mutable_player_list")
		.def(&AccountPlayerListReply::add_player_list, "add_player_list")
		.def(&AccountPlayerListReply::ByteSize, "ByteSize")
		.def(&AccountPlayerListReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool LoginPacket_fflua_regist_all(lua_State* state)
{
	AccountNameVerify_fflua_reg(state);
	AccountNameVerifyReply_fflua_reg(state);
	AccountRegist_fflua_reg(state);
	AccountRegistReply_fflua_reg(state);
	LoginRequest_fflua_reg(state);
	LoginReply_fflua_reg(state);
	AccountPlayerList_fflua_reg(state);
	AccountModel_fflua_reg(state);
	AccountPlayerListReply_fflua_reg(state);
	return true;
}
}
