// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EnterScene.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EnterScene.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Packet {

namespace {

const ::google::protobuf::Descriptor* PlayerEnterScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerEnterScene_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerEnterGameRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerEnterGameRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientEnterSceneOk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientEnterSceneOk_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerChangeSceneRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerChangeSceneRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerRaidOver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerRaidOver_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerEnterSceneReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerEnterSceneReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerLeaveScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerLeaveScene_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerLeaveSceneReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerLeaveSceneReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* SessionChanged_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionChanged_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerDisconnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerDisconnect_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_EnterScene_2eproto() {
  protobuf_AddDesc_EnterScene_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "EnterScene.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerEnterScene_descriptor_ = file->message_type(0);
  static const int PlayerEnterScene_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterScene, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterScene, pre_scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterScene, init_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterScene, script_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterScene, rtid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterScene, portal_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterScene, camp_),
  };
  PlayerEnterScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerEnterScene_descriptor_,
      PlayerEnterScene::default_instance_,
      PlayerEnterScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerEnterScene));
  PlayerEnterGameRequest_descriptor_ = file->message_type(1);
  static const int PlayerEnterGameRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterGameRequest, guid_),
  };
  PlayerEnterGameRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerEnterGameRequest_descriptor_,
      PlayerEnterGameRequest::default_instance_,
      PlayerEnterGameRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterGameRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterGameRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerEnterGameRequest));
  ClientEnterSceneOk_descriptor_ = file->message_type(2);
  static const int ClientEnterSceneOk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientEnterSceneOk, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientEnterSceneOk, login_init_),
  };
  ClientEnterSceneOk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientEnterSceneOk_descriptor_,
      ClientEnterSceneOk::default_instance_,
      ClientEnterSceneOk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientEnterSceneOk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientEnterSceneOk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientEnterSceneOk));
  PlayerChangeSceneRequest_descriptor_ = file->message_type(3);
  static const int PlayerChangeSceneRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerChangeSceneRequest, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerChangeSceneRequest, scene_id_),
  };
  PlayerChangeSceneRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerChangeSceneRequest_descriptor_,
      PlayerChangeSceneRequest::default_instance_,
      PlayerChangeSceneRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerChangeSceneRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerChangeSceneRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerChangeSceneRequest));
  PlayerRaidOver_descriptor_ = file->message_type(4);
  static const int PlayerRaidOver_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRaidOver, second_),
  };
  PlayerRaidOver_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerRaidOver_descriptor_,
      PlayerRaidOver::default_instance_,
      PlayerRaidOver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRaidOver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRaidOver, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerRaidOver));
  PlayerEnterSceneReply_descriptor_ = file->message_type(5);
  static const int PlayerEnterSceneReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterSceneReply, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterSceneReply, main_actor_),
  };
  PlayerEnterSceneReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerEnterSceneReply_descriptor_,
      PlayerEnterSceneReply::default_instance_,
      PlayerEnterSceneReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterSceneReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterSceneReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerEnterSceneReply));
  PlayerLeaveScene_descriptor_ = file->message_type(6);
  static const int PlayerLeaveScene_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLeaveScene, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLeaveScene, scene_id_),
  };
  PlayerLeaveScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerLeaveScene_descriptor_,
      PlayerLeaveScene::default_instance_,
      PlayerLeaveScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLeaveScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLeaveScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerLeaveScene));
  PlayerLeaveSceneReply_descriptor_ = file->message_type(7);
  static const int PlayerLeaveSceneReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLeaveSceneReply, scene_id_),
  };
  PlayerLeaveSceneReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerLeaveSceneReply_descriptor_,
      PlayerLeaveSceneReply::default_instance_,
      PlayerLeaveSceneReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLeaveSceneReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLeaveSceneReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerLeaveSceneReply));
  SessionChanged_descriptor_ = file->message_type(8);
  static const int SessionChanged_offsets_[1] = {
  };
  SessionChanged_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SessionChanged_descriptor_,
      SessionChanged::default_instance_,
      SessionChanged_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionChanged, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionChanged, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SessionChanged));
  PlayerDisconnect_descriptor_ = file->message_type(9);
  static const int PlayerDisconnect_offsets_[1] = {
  };
  PlayerDisconnect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerDisconnect_descriptor_,
      PlayerDisconnect::default_instance_,
      PlayerDisconnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDisconnect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDisconnect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerDisconnect));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_EnterScene_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerEnterScene_descriptor_, &PlayerEnterScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerEnterGameRequest_descriptor_, &PlayerEnterGameRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientEnterSceneOk_descriptor_, &ClientEnterSceneOk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerChangeSceneRequest_descriptor_, &PlayerChangeSceneRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerRaidOver_descriptor_, &PlayerRaidOver::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerEnterSceneReply_descriptor_, &PlayerEnterSceneReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerLeaveScene_descriptor_, &PlayerLeaveScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerLeaveSceneReply_descriptor_, &PlayerLeaveSceneReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SessionChanged_descriptor_, &SessionChanged::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerDisconnect_descriptor_, &PlayerDisconnect::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_EnterScene_2eproto() {
  delete PlayerEnterScene::default_instance_;
  delete PlayerEnterScene_reflection_;
  delete PlayerEnterGameRequest::default_instance_;
  delete PlayerEnterGameRequest_reflection_;
  delete ClientEnterSceneOk::default_instance_;
  delete ClientEnterSceneOk_reflection_;
  delete PlayerChangeSceneRequest::default_instance_;
  delete PlayerChangeSceneRequest_reflection_;
  delete PlayerRaidOver::default_instance_;
  delete PlayerRaidOver_reflection_;
  delete PlayerEnterSceneReply::default_instance_;
  delete PlayerEnterSceneReply_reflection_;
  delete PlayerLeaveScene::default_instance_;
  delete PlayerLeaveScene_reflection_;
  delete PlayerLeaveSceneReply::default_instance_;
  delete PlayerLeaveSceneReply_reflection_;
  delete SessionChanged::default_instance_;
  delete SessionChanged_reflection_;
  delete PlayerDisconnect::default_instance_;
  delete PlayerDisconnect_reflection_;
}

void protobuf_AddDesc_EnterScene_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Packet::protobuf_AddDesc_Base_2eproto();
  ::Packet::protobuf_AddDesc_PlayerBasicInfo_2eproto();
  ::Packet::protobuf_AddDesc_ActorBasicInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020EnterScene.proto\022\006Packet\032\nBase.proto\032\025"
    "PlayerBasicInfo.proto\032\024ActorBasicInfo.pr"
    "oto\"\263\001\n\020PlayerEnterScene\022\020\n\010scene_id\030\001 \002"
    "(\005\022\024\n\014pre_scene_id\030\002 \001(\005\022\"\n\010init_pos\030\003 \001"
    "(\0132\020.Packet.Position\022\021\n\tscript_id\030\004 \001(\005\022"
    "\014\n\004rtid\030\005 \001(\005\022$\n\nportal_pos\030\006 \001(\0132\020.Pack"
    "et.Position\022\014\n\004camp\030\007 \001(\005\"&\n\026PlayerEnter"
    "GameRequest\022\014\n\004guid\030\001 \002(\006\"6\n\022ClientEnter"
    "SceneOk\022\014\n\004guid\030\001 \002(\006\022\022\n\nlogin_init\030\002 \001("
    "\010\":\n\030PlayerChangeSceneRequest\022\014\n\004guid\030\001 "
    "\002(\006\022\020\n\010scene_id\030\002 \002(\005\" \n\016PlayerRaidOver\022"
    "\016\n\006second\030\001 \002(\005\"j\n\025PlayerEnterSceneReply"
    "\022%\n\004info\030\001 \002(\0132\027.Packet.PlayerBasicInfo\022"
    "*\n\nmain_actor\030\002 \002(\0132\026.Packet.ActorBasicI"
    "nfo\"2\n\020PlayerLeaveScene\022\014\n\004guid\030\001 \002(\006\022\020\n"
    "\010scene_id\030\002 \002(\005\")\n\025PlayerLeaveSceneReply"
    "\022\020\n\010scene_id\030\001 \002(\005\"\020\n\016SessionChanged\"\022\n\020"
    "PlayerDisconnect", 696);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "EnterScene.proto", &protobuf_RegisterTypes);
  PlayerEnterScene::default_instance_ = new PlayerEnterScene();
  PlayerEnterGameRequest::default_instance_ = new PlayerEnterGameRequest();
  ClientEnterSceneOk::default_instance_ = new ClientEnterSceneOk();
  PlayerChangeSceneRequest::default_instance_ = new PlayerChangeSceneRequest();
  PlayerRaidOver::default_instance_ = new PlayerRaidOver();
  PlayerEnterSceneReply::default_instance_ = new PlayerEnterSceneReply();
  PlayerLeaveScene::default_instance_ = new PlayerLeaveScene();
  PlayerLeaveSceneReply::default_instance_ = new PlayerLeaveSceneReply();
  SessionChanged::default_instance_ = new SessionChanged();
  PlayerDisconnect::default_instance_ = new PlayerDisconnect();
  PlayerEnterScene::default_instance_->InitAsDefaultInstance();
  PlayerEnterGameRequest::default_instance_->InitAsDefaultInstance();
  ClientEnterSceneOk::default_instance_->InitAsDefaultInstance();
  PlayerChangeSceneRequest::default_instance_->InitAsDefaultInstance();
  PlayerRaidOver::default_instance_->InitAsDefaultInstance();
  PlayerEnterSceneReply::default_instance_->InitAsDefaultInstance();
  PlayerLeaveScene::default_instance_->InitAsDefaultInstance();
  PlayerLeaveSceneReply::default_instance_->InitAsDefaultInstance();
  SessionChanged::default_instance_->InitAsDefaultInstance();
  PlayerDisconnect::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EnterScene_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_EnterScene_2eproto {
  StaticDescriptorInitializer_EnterScene_2eproto() {
    protobuf_AddDesc_EnterScene_2eproto();
  }
} static_descriptor_initializer_EnterScene_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PlayerEnterScene::kSceneIdFieldNumber;
const int PlayerEnterScene::kPreSceneIdFieldNumber;
const int PlayerEnterScene::kInitPosFieldNumber;
const int PlayerEnterScene::kScriptIdFieldNumber;
const int PlayerEnterScene::kRtidFieldNumber;
const int PlayerEnterScene::kPortalPosFieldNumber;
const int PlayerEnterScene::kCampFieldNumber;
#endif  // !_MSC_VER

PlayerEnterScene::PlayerEnterScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerEnterScene::InitAsDefaultInstance() {
  init_pos_ = const_cast< ::Packet::Position*>(&::Packet::Position::default_instance());
  portal_pos_ = const_cast< ::Packet::Position*>(&::Packet::Position::default_instance());
}

PlayerEnterScene::PlayerEnterScene(const PlayerEnterScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerEnterScene::SharedCtor() {
  _cached_size_ = 0;
  scene_id_ = 0;
  pre_scene_id_ = 0;
  init_pos_ = NULL;
  script_id_ = 0;
  rtid_ = 0;
  portal_pos_ = NULL;
  camp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerEnterScene::~PlayerEnterScene() {
  SharedDtor();
}

void PlayerEnterScene::SharedDtor() {
  if (this != default_instance_) {
    delete init_pos_;
    delete portal_pos_;
  }
}

void PlayerEnterScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerEnterScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerEnterScene_descriptor_;
}

const PlayerEnterScene& PlayerEnterScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EnterScene_2eproto();
  return *default_instance_;
}

PlayerEnterScene* PlayerEnterScene::default_instance_ = NULL;

PlayerEnterScene* PlayerEnterScene::New() const {
  return new PlayerEnterScene;
}

void PlayerEnterScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scene_id_ = 0;
    pre_scene_id_ = 0;
    if (has_init_pos()) {
      if (init_pos_ != NULL) init_pos_->::Packet::Position::Clear();
    }
    script_id_ = 0;
    rtid_ = 0;
    if (has_portal_pos()) {
      if (portal_pos_ != NULL) portal_pos_->::Packet::Position::Clear();
    }
    camp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerEnterScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 scene_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pre_scene_id;
        break;
      }

      // optional int32 pre_scene_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pre_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pre_scene_id_)));
          set_has_pre_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_init_pos;
        break;
      }

      // optional .Packet.Position init_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_init_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_init_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_script_id;
        break;
      }

      // optional int32 script_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_script_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &script_id_)));
          set_has_script_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rtid;
        break;
      }

      // optional int32 rtid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rtid_)));
          set_has_rtid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_portal_pos;
        break;
      }

      // optional .Packet.Position portal_pos = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_portal_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_portal_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_camp;
        break;
      }

      // optional int32 camp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_)));
          set_has_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerEnterScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 scene_id = 1;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->scene_id(), output);
  }

  // optional int32 pre_scene_id = 2;
  if (has_pre_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pre_scene_id(), output);
  }

  // optional .Packet.Position init_pos = 3;
  if (has_init_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->init_pos(), output);
  }

  // optional int32 script_id = 4;
  if (has_script_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->script_id(), output);
  }

  // optional int32 rtid = 5;
  if (has_rtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rtid(), output);
  }

  // optional .Packet.Position portal_pos = 6;
  if (has_portal_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->portal_pos(), output);
  }

  // optional int32 camp = 7;
  if (has_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->camp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerEnterScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 scene_id = 1;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->scene_id(), target);
  }

  // optional int32 pre_scene_id = 2;
  if (has_pre_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pre_scene_id(), target);
  }

  // optional .Packet.Position init_pos = 3;
  if (has_init_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->init_pos(), target);
  }

  // optional int32 script_id = 4;
  if (has_script_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->script_id(), target);
  }

  // optional int32 rtid = 5;
  if (has_rtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rtid(), target);
  }

  // optional .Packet.Position portal_pos = 6;
  if (has_portal_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->portal_pos(), target);
  }

  // optional int32 camp = 7;
  if (has_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->camp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerEnterScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 scene_id = 1;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }

    // optional int32 pre_scene_id = 2;
    if (has_pre_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pre_scene_id());
    }

    // optional .Packet.Position init_pos = 3;
    if (has_init_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->init_pos());
    }

    // optional int32 script_id = 4;
    if (has_script_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->script_id());
    }

    // optional int32 rtid = 5;
    if (has_rtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rtid());
    }

    // optional .Packet.Position portal_pos = 6;
    if (has_portal_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->portal_pos());
    }

    // optional int32 camp = 7;
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerEnterScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerEnterScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerEnterScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerEnterScene::MergeFrom(const PlayerEnterScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_pre_scene_id()) {
      set_pre_scene_id(from.pre_scene_id());
    }
    if (from.has_init_pos()) {
      mutable_init_pos()->::Packet::Position::MergeFrom(from.init_pos());
    }
    if (from.has_script_id()) {
      set_script_id(from.script_id());
    }
    if (from.has_rtid()) {
      set_rtid(from.rtid());
    }
    if (from.has_portal_pos()) {
      mutable_portal_pos()->::Packet::Position::MergeFrom(from.portal_pos());
    }
    if (from.has_camp()) {
      set_camp(from.camp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerEnterScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerEnterScene::CopyFrom(const PlayerEnterScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerEnterScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_init_pos()) {
    if (!this->init_pos().IsInitialized()) return false;
  }
  if (has_portal_pos()) {
    if (!this->portal_pos().IsInitialized()) return false;
  }
  return true;
}

void PlayerEnterScene::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  if (has_init_pos()) {
    this->mutable_init_pos()->SetInitialized();
  }
  if (has_portal_pos()) {
    this->mutable_portal_pos()->SetInitialized();
  }
  return;
}

void PlayerEnterScene::Swap(PlayerEnterScene* other) {
  if (other != this) {
    std::swap(scene_id_, other->scene_id_);
    std::swap(pre_scene_id_, other->pre_scene_id_);
    std::swap(init_pos_, other->init_pos_);
    std::swap(script_id_, other->script_id_);
    std::swap(rtid_, other->rtid_);
    std::swap(portal_pos_, other->portal_pos_);
    std::swap(camp_, other->camp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerEnterScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerEnterScene_descriptor_;
  metadata.reflection = PlayerEnterScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerEnterGameRequest::kGuidFieldNumber;
#endif  // !_MSC_VER

PlayerEnterGameRequest::PlayerEnterGameRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerEnterGameRequest::InitAsDefaultInstance() {
}

PlayerEnterGameRequest::PlayerEnterGameRequest(const PlayerEnterGameRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerEnterGameRequest::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerEnterGameRequest::~PlayerEnterGameRequest() {
  SharedDtor();
}

void PlayerEnterGameRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerEnterGameRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerEnterGameRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerEnterGameRequest_descriptor_;
}

const PlayerEnterGameRequest& PlayerEnterGameRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EnterScene_2eproto();
  return *default_instance_;
}

PlayerEnterGameRequest* PlayerEnterGameRequest::default_instance_ = NULL;

PlayerEnterGameRequest* PlayerEnterGameRequest::New() const {
  return new PlayerEnterGameRequest;
}

void PlayerEnterGameRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerEnterGameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerEnterGameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerEnterGameRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerEnterGameRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerEnterGameRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerEnterGameRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerEnterGameRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerEnterGameRequest::MergeFrom(const PlayerEnterGameRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerEnterGameRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerEnterGameRequest::CopyFrom(const PlayerEnterGameRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerEnterGameRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayerEnterGameRequest::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void PlayerEnterGameRequest::Swap(PlayerEnterGameRequest* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerEnterGameRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerEnterGameRequest_descriptor_;
  metadata.reflection = PlayerEnterGameRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientEnterSceneOk::kGuidFieldNumber;
const int ClientEnterSceneOk::kLoginInitFieldNumber;
#endif  // !_MSC_VER

ClientEnterSceneOk::ClientEnterSceneOk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientEnterSceneOk::InitAsDefaultInstance() {
}

ClientEnterSceneOk::ClientEnterSceneOk(const ClientEnterSceneOk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientEnterSceneOk::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  login_init_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientEnterSceneOk::~ClientEnterSceneOk() {
  SharedDtor();
}

void ClientEnterSceneOk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientEnterSceneOk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientEnterSceneOk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientEnterSceneOk_descriptor_;
}

const ClientEnterSceneOk& ClientEnterSceneOk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EnterScene_2eproto();
  return *default_instance_;
}

ClientEnterSceneOk* ClientEnterSceneOk::default_instance_ = NULL;

ClientEnterSceneOk* ClientEnterSceneOk::New() const {
  return new ClientEnterSceneOk;
}

void ClientEnterSceneOk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    login_init_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ClientEnterSceneOk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_login_init;
        break;
      }

      // optional bool login_init = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_init:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &login_init_)));
          set_has_login_init();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ClientEnterSceneOk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // optional bool login_init = 2;
  if (has_login_init()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->login_init(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientEnterSceneOk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // optional bool login_init = 2;
  if (has_login_init()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->login_init(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientEnterSceneOk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // optional bool login_init = 2;
    if (has_login_init()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientEnterSceneOk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientEnterSceneOk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientEnterSceneOk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ClientEnterSceneOk::MergeFrom(const ClientEnterSceneOk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_login_init()) {
      set_login_init(from.login_init());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ClientEnterSceneOk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ClientEnterSceneOk::CopyFrom(const ClientEnterSceneOk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ClientEnterSceneOk::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientEnterSceneOk::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void ClientEnterSceneOk::Swap(ClientEnterSceneOk* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(login_init_, other->login_init_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ClientEnterSceneOk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientEnterSceneOk_descriptor_;
  metadata.reflection = ClientEnterSceneOk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerChangeSceneRequest::kGuidFieldNumber;
const int PlayerChangeSceneRequest::kSceneIdFieldNumber;
#endif  // !_MSC_VER

PlayerChangeSceneRequest::PlayerChangeSceneRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerChangeSceneRequest::InitAsDefaultInstance() {
}

PlayerChangeSceneRequest::PlayerChangeSceneRequest(const PlayerChangeSceneRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerChangeSceneRequest::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  scene_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerChangeSceneRequest::~PlayerChangeSceneRequest() {
  SharedDtor();
}

void PlayerChangeSceneRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerChangeSceneRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerChangeSceneRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerChangeSceneRequest_descriptor_;
}

const PlayerChangeSceneRequest& PlayerChangeSceneRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EnterScene_2eproto();
  return *default_instance_;
}

PlayerChangeSceneRequest* PlayerChangeSceneRequest::default_instance_ = NULL;

PlayerChangeSceneRequest* PlayerChangeSceneRequest::New() const {
  return new PlayerChangeSceneRequest;
}

void PlayerChangeSceneRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    scene_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerChangeSceneRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_id;
        break;
      }

      // required int32 scene_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerChangeSceneRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required int32 scene_id = 2;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->scene_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerChangeSceneRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required int32 scene_id = 2;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->scene_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerChangeSceneRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required int32 scene_id = 2;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerChangeSceneRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerChangeSceneRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerChangeSceneRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerChangeSceneRequest::MergeFrom(const PlayerChangeSceneRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerChangeSceneRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerChangeSceneRequest::CopyFrom(const PlayerChangeSceneRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerChangeSceneRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PlayerChangeSceneRequest::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void PlayerChangeSceneRequest::Swap(PlayerChangeSceneRequest* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerChangeSceneRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerChangeSceneRequest_descriptor_;
  metadata.reflection = PlayerChangeSceneRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerRaidOver::kSecondFieldNumber;
#endif  // !_MSC_VER

PlayerRaidOver::PlayerRaidOver()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerRaidOver::InitAsDefaultInstance() {
}

PlayerRaidOver::PlayerRaidOver(const PlayerRaidOver& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerRaidOver::SharedCtor() {
  _cached_size_ = 0;
  second_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerRaidOver::~PlayerRaidOver() {
  SharedDtor();
}

void PlayerRaidOver::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerRaidOver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerRaidOver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerRaidOver_descriptor_;
}

const PlayerRaidOver& PlayerRaidOver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EnterScene_2eproto();
  return *default_instance_;
}

PlayerRaidOver* PlayerRaidOver::default_instance_ = NULL;

PlayerRaidOver* PlayerRaidOver::New() const {
  return new PlayerRaidOver;
}

void PlayerRaidOver::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    second_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerRaidOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 second = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &second_)));
          set_has_second();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerRaidOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 second = 1;
  if (has_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->second(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerRaidOver::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 second = 1;
  if (has_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->second(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerRaidOver::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 second = 1;
    if (has_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->second());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerRaidOver::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerRaidOver* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerRaidOver*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerRaidOver::MergeFrom(const PlayerRaidOver& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_second()) {
      set_second(from.second());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerRaidOver::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerRaidOver::CopyFrom(const PlayerRaidOver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerRaidOver::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayerRaidOver::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void PlayerRaidOver::Swap(PlayerRaidOver* other) {
  if (other != this) {
    std::swap(second_, other->second_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerRaidOver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerRaidOver_descriptor_;
  metadata.reflection = PlayerRaidOver_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerEnterSceneReply::kInfoFieldNumber;
const int PlayerEnterSceneReply::kMainActorFieldNumber;
#endif  // !_MSC_VER

PlayerEnterSceneReply::PlayerEnterSceneReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerEnterSceneReply::InitAsDefaultInstance() {
  info_ = const_cast< ::Packet::PlayerBasicInfo*>(&::Packet::PlayerBasicInfo::default_instance());
  main_actor_ = const_cast< ::Packet::ActorBasicInfo*>(&::Packet::ActorBasicInfo::default_instance());
}

PlayerEnterSceneReply::PlayerEnterSceneReply(const PlayerEnterSceneReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerEnterSceneReply::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  main_actor_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerEnterSceneReply::~PlayerEnterSceneReply() {
  SharedDtor();
}

void PlayerEnterSceneReply::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
    delete main_actor_;
  }
}

void PlayerEnterSceneReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerEnterSceneReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerEnterSceneReply_descriptor_;
}

const PlayerEnterSceneReply& PlayerEnterSceneReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EnterScene_2eproto();
  return *default_instance_;
}

PlayerEnterSceneReply* PlayerEnterSceneReply::default_instance_ = NULL;

PlayerEnterSceneReply* PlayerEnterSceneReply::New() const {
  return new PlayerEnterSceneReply;
}

void PlayerEnterSceneReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::Packet::PlayerBasicInfo::Clear();
    }
    if (has_main_actor()) {
      if (main_actor_ != NULL) main_actor_->::Packet::ActorBasicInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerEnterSceneReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.PlayerBasicInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_main_actor;
        break;
      }

      // required .Packet.ActorBasicInfo main_actor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_main_actor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_main_actor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerEnterSceneReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.PlayerBasicInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // required .Packet.ActorBasicInfo main_actor = 2;
  if (has_main_actor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->main_actor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerEnterSceneReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.PlayerBasicInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // required .Packet.ActorBasicInfo main_actor = 2;
  if (has_main_actor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->main_actor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerEnterSceneReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.PlayerBasicInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // required .Packet.ActorBasicInfo main_actor = 2;
    if (has_main_actor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->main_actor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerEnterSceneReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerEnterSceneReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerEnterSceneReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerEnterSceneReply::MergeFrom(const PlayerEnterSceneReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::Packet::PlayerBasicInfo::MergeFrom(from.info());
    }
    if (from.has_main_actor()) {
      mutable_main_actor()->::Packet::ActorBasicInfo::MergeFrom(from.main_actor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerEnterSceneReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerEnterSceneReply::CopyFrom(const PlayerEnterSceneReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerEnterSceneReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  if (has_main_actor()) {
    if (!this->main_actor().IsInitialized()) return false;
  }
  return true;
}

void PlayerEnterSceneReply::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  if (has_info()) {
    this->mutable_info()->SetInitialized();
  }
  if (has_main_actor()) {
    this->mutable_main_actor()->SetInitialized();
  }
  return;
}

void PlayerEnterSceneReply::Swap(PlayerEnterSceneReply* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(main_actor_, other->main_actor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerEnterSceneReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerEnterSceneReply_descriptor_;
  metadata.reflection = PlayerEnterSceneReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerLeaveScene::kGuidFieldNumber;
const int PlayerLeaveScene::kSceneIdFieldNumber;
#endif  // !_MSC_VER

PlayerLeaveScene::PlayerLeaveScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerLeaveScene::InitAsDefaultInstance() {
}

PlayerLeaveScene::PlayerLeaveScene(const PlayerLeaveScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerLeaveScene::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  scene_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerLeaveScene::~PlayerLeaveScene() {
  SharedDtor();
}

void PlayerLeaveScene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerLeaveScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerLeaveScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerLeaveScene_descriptor_;
}

const PlayerLeaveScene& PlayerLeaveScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EnterScene_2eproto();
  return *default_instance_;
}

PlayerLeaveScene* PlayerLeaveScene::default_instance_ = NULL;

PlayerLeaveScene* PlayerLeaveScene::New() const {
  return new PlayerLeaveScene;
}

void PlayerLeaveScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    scene_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerLeaveScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_id;
        break;
      }

      // required int32 scene_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerLeaveScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required int32 scene_id = 2;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->scene_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerLeaveScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required int32 scene_id = 2;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->scene_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerLeaveScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required int32 scene_id = 2;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerLeaveScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerLeaveScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerLeaveScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerLeaveScene::MergeFrom(const PlayerLeaveScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerLeaveScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerLeaveScene::CopyFrom(const PlayerLeaveScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerLeaveScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PlayerLeaveScene::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void PlayerLeaveScene::Swap(PlayerLeaveScene* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerLeaveScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerLeaveScene_descriptor_;
  metadata.reflection = PlayerLeaveScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerLeaveSceneReply::kSceneIdFieldNumber;
#endif  // !_MSC_VER

PlayerLeaveSceneReply::PlayerLeaveSceneReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerLeaveSceneReply::InitAsDefaultInstance() {
}

PlayerLeaveSceneReply::PlayerLeaveSceneReply(const PlayerLeaveSceneReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerLeaveSceneReply::SharedCtor() {
  _cached_size_ = 0;
  scene_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerLeaveSceneReply::~PlayerLeaveSceneReply() {
  SharedDtor();
}

void PlayerLeaveSceneReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerLeaveSceneReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerLeaveSceneReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerLeaveSceneReply_descriptor_;
}

const PlayerLeaveSceneReply& PlayerLeaveSceneReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EnterScene_2eproto();
  return *default_instance_;
}

PlayerLeaveSceneReply* PlayerLeaveSceneReply::default_instance_ = NULL;

PlayerLeaveSceneReply* PlayerLeaveSceneReply::New() const {
  return new PlayerLeaveSceneReply;
}

void PlayerLeaveSceneReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scene_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerLeaveSceneReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 scene_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerLeaveSceneReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 scene_id = 1;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->scene_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerLeaveSceneReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 scene_id = 1;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->scene_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerLeaveSceneReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 scene_id = 1;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerLeaveSceneReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerLeaveSceneReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerLeaveSceneReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerLeaveSceneReply::MergeFrom(const PlayerLeaveSceneReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerLeaveSceneReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerLeaveSceneReply::CopyFrom(const PlayerLeaveSceneReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerLeaveSceneReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayerLeaveSceneReply::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void PlayerLeaveSceneReply::Swap(PlayerLeaveSceneReply* other) {
  if (other != this) {
    std::swap(scene_id_, other->scene_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerLeaveSceneReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerLeaveSceneReply_descriptor_;
  metadata.reflection = PlayerLeaveSceneReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SessionChanged::SessionChanged()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SessionChanged::InitAsDefaultInstance() {
}

SessionChanged::SessionChanged(const SessionChanged& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SessionChanged::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionChanged::~SessionChanged() {
  SharedDtor();
}

void SessionChanged::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SessionChanged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionChanged::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionChanged_descriptor_;
}

const SessionChanged& SessionChanged::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EnterScene_2eproto();
  return *default_instance_;
}

SessionChanged* SessionChanged::default_instance_ = NULL;

SessionChanged* SessionChanged::New() const {
  return new SessionChanged;
}

void SessionChanged::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SessionChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void SessionChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SessionChanged::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SessionChanged::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionChanged::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SessionChanged* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SessionChanged*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SessionChanged::MergeFrom(const SessionChanged& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SessionChanged::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SessionChanged::CopyFrom(const SessionChanged& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SessionChanged::IsInitialized() const {

  return true;
}

void SessionChanged::SetInitialized() {

  return;
}

void SessionChanged::Swap(SessionChanged* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SessionChanged::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionChanged_descriptor_;
  metadata.reflection = SessionChanged_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PlayerDisconnect::PlayerDisconnect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerDisconnect::InitAsDefaultInstance() {
}

PlayerDisconnect::PlayerDisconnect(const PlayerDisconnect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerDisconnect::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerDisconnect::~PlayerDisconnect() {
  SharedDtor();
}

void PlayerDisconnect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerDisconnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerDisconnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerDisconnect_descriptor_;
}

const PlayerDisconnect& PlayerDisconnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EnterScene_2eproto();
  return *default_instance_;
}

PlayerDisconnect* PlayerDisconnect::default_instance_ = NULL;

PlayerDisconnect* PlayerDisconnect::New() const {
  return new PlayerDisconnect;
}

void PlayerDisconnect::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerDisconnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerDisconnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerDisconnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerDisconnect::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerDisconnect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerDisconnect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerDisconnect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerDisconnect::MergeFrom(const PlayerDisconnect& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerDisconnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerDisconnect::CopyFrom(const PlayerDisconnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerDisconnect::IsInitialized() const {

  return true;
}

void PlayerDisconnect::SetInitialized() {

  return;
}

void PlayerDisconnect::Swap(PlayerDisconnect* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerDisconnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerDisconnect_descriptor_;
  metadata.reflection = PlayerDisconnect_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

// @@protoc_insertion_point(global_scope)
