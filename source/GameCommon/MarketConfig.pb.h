// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MarketConfig.proto

#ifndef PROTOBUF_MarketConfig_2eproto__INCLUDED
#define PROTOBUF_MarketConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "AllConfigEnum.pb.h"
#include "AllPacketEnum.pb.h"
#include "ProtoBufOption.pb.h"
#include "PlayerBasicInfo.pb.h"
// @@protoc_insertion_point(includes)

namespace Config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MarketConfig_2eproto();
void protobuf_AssignDesc_MarketConfig_2eproto();
void protobuf_ShutdownFile_MarketConfig_2eproto();

class MarketConfig;
class MarketItemConfig;
class ChargeItemConfig;
class ChargeList;

// ===================================================================

class MarketConfig : public ::google::protobuf::Message {
 public:
  MarketConfig();
  virtual ~MarketConfig();

  MarketConfig(const MarketConfig& from);

  inline MarketConfig& operator=(const MarketConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarketConfig& default_instance();

  void Swap(MarketConfig* other);

  // implements Message ----------------------------------------------

  MarketConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarketConfig& from);
  void MergeFrom(const MarketConfig& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Config.MarketType market_id = 1;
  inline bool has_market_id() const;
  inline void clear_market_id();
  static const int kMarketIdFieldNumber = 1;
  inline ::Config::MarketType market_id() const;
  inline void set_market_id(::Config::MarketType value);

  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // repeated int32 count_group = 3;
  inline int count_group_size() const;
  inline void clear_count_group();
  static const int kCountGroupFieldNumber = 3;
  inline ::google::protobuf::int32 count_group(int index) const;
  inline void set_count_group(int index, ::google::protobuf::int32 value);
  inline void add_count_group(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      count_group() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_count_group();

  // required int32 refresh_token = 4;
  inline bool has_refresh_token() const;
  inline void clear_refresh_token();
  static const int kRefreshTokenFieldNumber = 4;
  inline ::google::protobuf::int32 refresh_token() const;
  inline void set_refresh_token(::google::protobuf::int32 value);

  // required int32 token_count = 5;
  inline bool has_token_count() const;
  inline void clear_token_count();
  static const int kTokenCountFieldNumber = 5;
  inline ::google::protobuf::int32 token_count() const;
  inline void set_token_count(::google::protobuf::int32 value);

  // required int32 refresh_count = 6;
  inline bool has_refresh_count() const;
  inline void clear_refresh_count();
  static const int kRefreshCountFieldNumber = 6;
  inline ::google::protobuf::int32 refresh_count() const;
  inline void set_refresh_count(::google::protobuf::int32 value);

  // required int32 refresh_cd = 7;
  inline bool has_refresh_cd() const;
  inline void clear_refresh_cd();
  static const int kRefreshCdFieldNumber = 7;
  inline ::google::protobuf::int32 refresh_cd() const;
  inline void set_refresh_cd(::google::protobuf::int32 value);

  // required int32 refresh_rate = 8;
  inline bool has_refresh_rate() const;
  inline void clear_refresh_rate();
  static const int kRefreshRateFieldNumber = 8;
  inline ::google::protobuf::int32 refresh_rate() const;
  inline void set_refresh_rate(::google::protobuf::int32 value);

  // required int32 gen_level = 9;
  inline bool has_gen_level() const;
  inline void clear_gen_level();
  static const int kGenLevelFieldNumber = 9;
  inline ::google::protobuf::int32 gen_level() const;
  inline void set_gen_level(::google::protobuf::int32 value);

  // required int32 open = 10;
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 10;
  inline ::google::protobuf::int32 open() const;
  inline void set_open(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Config.MarketConfig)
 private:
  inline void set_has_market_id();
  inline void clear_has_market_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_refresh_token();
  inline void clear_has_refresh_token();
  inline void set_has_token_count();
  inline void clear_has_token_count();
  inline void set_has_refresh_count();
  inline void clear_has_refresh_count();
  inline void set_has_refresh_cd();
  inline void clear_has_refresh_cd();
  inline void set_has_refresh_rate();
  inline void clear_has_refresh_rate();
  inline void set_has_gen_level();
  inline void clear_has_gen_level();
  inline void set_has_open();
  inline void clear_has_open();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int market_id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > count_group_;
  ::google::protobuf::int32 refresh_token_;
  ::google::protobuf::int32 token_count_;
  ::google::protobuf::int32 refresh_count_;
  ::google::protobuf::int32 refresh_cd_;
  ::google::protobuf::int32 refresh_rate_;
  ::google::protobuf::int32 gen_level_;
  ::google::protobuf::int32 open_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_MarketConfig_2eproto();
  friend void protobuf_AssignDesc_MarketConfig_2eproto();
  friend void protobuf_ShutdownFile_MarketConfig_2eproto();

  void InitAsDefaultInstance();
  static MarketConfig* default_instance_;
};
// -------------------------------------------------------------------

class MarketItemConfig : public ::google::protobuf::Message {
 public:
  MarketItemConfig();
  virtual ~MarketItemConfig();

  MarketItemConfig(const MarketItemConfig& from);

  inline MarketItemConfig& operator=(const MarketItemConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarketItemConfig& default_instance();

  void Swap(MarketItemConfig* other);

  // implements Message ----------------------------------------------

  MarketItemConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarketItemConfig& from);
  void MergeFrom(const MarketItemConfig& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required .Config.MarketType market_id = 2;
  inline bool has_market_id() const;
  inline void clear_market_id();
  static const int kMarketIdFieldNumber = 2;
  inline ::Config::MarketType market_id() const;
  inline void set_market_id(::Config::MarketType value);

  // required .Config.MarketItemGroup count_group = 3;
  inline bool has_count_group() const;
  inline void clear_count_group();
  static const int kCountGroupFieldNumber = 3;
  inline ::Config::MarketItemGroup count_group() const;
  inline void set_count_group(::Config::MarketItemGroup value);

  // required int32 open_level = 4;
  inline bool has_open_level() const;
  inline void clear_open_level();
  static const int kOpenLevelFieldNumber = 4;
  inline ::google::protobuf::int32 open_level() const;
  inline void set_open_level(::google::protobuf::int32 value);

  // required int32 off_level = 5;
  inline bool has_off_level() const;
  inline void clear_off_level();
  static const int kOffLevelFieldNumber = 5;
  inline ::google::protobuf::int32 off_level() const;
  inline void set_off_level(::google::protobuf::int32 value);

  // required int32 gen_weight = 6;
  inline bool has_gen_weight() const;
  inline void clear_gen_weight();
  static const int kGenWeightFieldNumber = 6;
  inline ::google::protobuf::int32 gen_weight() const;
  inline void set_gen_weight(::google::protobuf::int32 value);

  // required int32 item_id = 7;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 7;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);

  // required int32 item_count = 8;
  inline bool has_item_count() const;
  inline void clear_item_count();
  static const int kItemCountFieldNumber = 8;
  inline ::google::protobuf::int32 item_count() const;
  inline void set_item_count(::google::protobuf::int32 value);

  // required int32 price_type = 9;
  inline bool has_price_type() const;
  inline void clear_price_type();
  static const int kPriceTypeFieldNumber = 9;
  inline ::google::protobuf::int32 price_type() const;
  inline void set_price_type(::google::protobuf::int32 value);

  // required int32 price_value = 10;
  inline bool has_price_value() const;
  inline void clear_price_value();
  static const int kPriceValueFieldNumber = 10;
  inline ::google::protobuf::int32 price_value() const;
  inline void set_price_value(::google::protobuf::int32 value);

  // required int32 day_limit_count = 11;
  inline bool has_day_limit_count() const;
  inline void clear_day_limit_count();
  static const int kDayLimitCountFieldNumber = 11;
  inline ::google::protobuf::int32 day_limit_count() const;
  inline void set_day_limit_count(::google::protobuf::int32 value);

  // required int32 open = 12;
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 12;
  inline ::google::protobuf::int32 open() const;
  inline void set_open(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Config.MarketItemConfig)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_market_id();
  inline void clear_has_market_id();
  inline void set_has_count_group();
  inline void clear_has_count_group();
  inline void set_has_open_level();
  inline void clear_has_open_level();
  inline void set_has_off_level();
  inline void clear_has_off_level();
  inline void set_has_gen_weight();
  inline void clear_has_gen_weight();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_count();
  inline void clear_has_item_count();
  inline void set_has_price_type();
  inline void clear_has_price_type();
  inline void set_has_price_value();
  inline void clear_has_price_value();
  inline void set_has_day_limit_count();
  inline void clear_has_day_limit_count();
  inline void set_has_open();
  inline void clear_has_open();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  int market_id_;
  int count_group_;
  ::google::protobuf::int32 open_level_;
  ::google::protobuf::int32 off_level_;
  ::google::protobuf::int32 gen_weight_;
  ::google::protobuf::int32 item_id_;
  ::google::protobuf::int32 item_count_;
  ::google::protobuf::int32 price_type_;
  ::google::protobuf::int32 price_value_;
  ::google::protobuf::int32 day_limit_count_;
  ::google::protobuf::int32 open_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_MarketConfig_2eproto();
  friend void protobuf_AssignDesc_MarketConfig_2eproto();
  friend void protobuf_ShutdownFile_MarketConfig_2eproto();

  void InitAsDefaultInstance();
  static MarketItemConfig* default_instance_;
};
// -------------------------------------------------------------------

class ChargeItemConfig : public ::google::protobuf::Message {
 public:
  ChargeItemConfig();
  virtual ~ChargeItemConfig();

  ChargeItemConfig(const ChargeItemConfig& from);

  inline ChargeItemConfig& operator=(const ChargeItemConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChargeItemConfig& default_instance();

  void Swap(ChargeItemConfig* other);

  // implements Message ----------------------------------------------

  ChargeItemConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChargeItemConfig& from);
  void MergeFrom(const ChargeItemConfig& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string group_type = 2;
  inline bool has_group_type() const;
  inline void clear_group_type();
  static const int kGroupTypeFieldNumber = 2;
  inline const ::std::string& group_type() const;
  inline void set_group_type(const ::std::string& value);
  inline void set_group_type(const char* value);
  inline void set_group_type(const char* value, size_t size);
  inline ::std::string* mutable_group_type();
  inline ::std::string* release_group_type();
  inline void set_allocated_group_type(::std::string* group_type);

  // required string price_type = 3;
  inline bool has_price_type() const;
  inline void clear_price_type();
  static const int kPriceTypeFieldNumber = 3;
  inline const ::std::string& price_type() const;
  inline void set_price_type(const ::std::string& value);
  inline void set_price_type(const char* value);
  inline void set_price_type(const char* value, size_t size);
  inline ::std::string* mutable_price_type();
  inline ::std::string* release_price_type();
  inline void set_allocated_price_type(::std::string* price_type);

  // required int32 effect_value = 4;
  inline bool has_effect_value() const;
  inline void clear_effect_value();
  static const int kEffectValueFieldNumber = 4;
  inline ::google::protobuf::int32 effect_value() const;
  inline void set_effect_value(::google::protobuf::int32 value);

  // required int32 effect_count = 5;
  inline bool has_effect_count() const;
  inline void clear_effect_count();
  static const int kEffectCountFieldNumber = 5;
  inline ::google::protobuf::int32 effect_count() const;
  inline void set_effect_count(::google::protobuf::int32 value);

  // required int32 extra_value = 6;
  inline bool has_extra_value() const;
  inline void clear_extra_value();
  static const int kExtraValueFieldNumber = 6;
  inline ::google::protobuf::int32 extra_value() const;
  inline void set_extra_value(::google::protobuf::int32 value);

  // required float rmb_price = 13;
  inline bool has_rmb_price() const;
  inline void clear_rmb_price();
  static const int kRmbPriceFieldNumber = 13;
  inline float rmb_price() const;
  inline void set_rmb_price(float value);

  // @@protoc_insertion_point(class_scope:Config.ChargeItemConfig)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_group_type();
  inline void clear_has_group_type();
  inline void set_has_price_type();
  inline void clear_has_price_type();
  inline void set_has_effect_value();
  inline void clear_has_effect_value();
  inline void set_has_effect_count();
  inline void clear_has_effect_count();
  inline void set_has_extra_value();
  inline void clear_has_extra_value();
  inline void set_has_rmb_price();
  inline void clear_has_rmb_price();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* group_type_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 effect_value_;
  ::std::string* price_type_;
  ::google::protobuf::int32 effect_count_;
  ::google::protobuf::int32 extra_value_;
  float rmb_price_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_MarketConfig_2eproto();
  friend void protobuf_AssignDesc_MarketConfig_2eproto();
  friend void protobuf_ShutdownFile_MarketConfig_2eproto();

  void InitAsDefaultInstance();
  static ChargeItemConfig* default_instance_;
};
// -------------------------------------------------------------------

class ChargeList : public ::google::protobuf::Message {
 public:
  ChargeList();
  virtual ~ChargeList();

  ChargeList(const ChargeList& from);

  inline ChargeList& operator=(const ChargeList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChargeList& default_instance();

  void Swap(ChargeList* other);

  // implements Message ----------------------------------------------

  ChargeList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChargeList& from);
  void MergeFrom(const ChargeList& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string channel_id = 1;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  inline const ::std::string& channel_id() const;
  inline void set_channel_id(const ::std::string& value);
  inline void set_channel_id(const char* value);
  inline void set_channel_id(const char* value, size_t size);
  inline ::std::string* mutable_channel_id();
  inline ::std::string* release_channel_id();
  inline void set_allocated_channel_id(::std::string* channel_id);

  // required int32 product_index = 2;
  inline bool has_product_index() const;
  inline void clear_product_index();
  static const int kProductIndexFieldNumber = 2;
  inline ::google::protobuf::int32 product_index() const;
  inline void set_product_index(::google::protobuf::int32 value);

  // required string product_id = 3;
  inline bool has_product_id() const;
  inline void clear_product_id();
  static const int kProductIdFieldNumber = 3;
  inline const ::std::string& product_id() const;
  inline void set_product_id(const ::std::string& value);
  inline void set_product_id(const char* value);
  inline void set_product_id(const char* value, size_t size);
  inline ::std::string* mutable_product_id();
  inline ::std::string* release_product_id();
  inline void set_allocated_product_id(::std::string* product_id);

  // @@protoc_insertion_point(class_scope:Config.ChargeList)
 private:
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_product_index();
  inline void clear_has_product_index();
  inline void set_has_product_id();
  inline void clear_has_product_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* channel_id_;
  ::std::string* product_id_;
  ::google::protobuf::int32 product_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_MarketConfig_2eproto();
  friend void protobuf_AssignDesc_MarketConfig_2eproto();
  friend void protobuf_ShutdownFile_MarketConfig_2eproto();

  void InitAsDefaultInstance();
  static ChargeList* default_instance_;
};
// ===================================================================


// ===================================================================

// MarketConfig

// required .Config.MarketType market_id = 1;
inline bool MarketConfig::has_market_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarketConfig::set_has_market_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarketConfig::clear_has_market_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarketConfig::clear_market_id() {
  market_id_ = -1;
  clear_has_market_id();
  SetDirty();
}
inline ::Config::MarketType MarketConfig::market_id() const {
  return static_cast< ::Config::MarketType >(market_id_);
}
inline void MarketConfig::set_market_id(::Config::MarketType value) {
  assert(::Config::MarketType_IsValid(value));
  SetDirty();
  set_has_market_id();
  market_id_ = value;
}

// required int32 type = 2;
inline bool MarketConfig::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarketConfig::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarketConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarketConfig::clear_type() {
  type_ = 0;
  clear_has_type();
  SetDirty();
}
inline ::google::protobuf::int32 MarketConfig::type() const {
  return type_;
}
inline void MarketConfig::set_type(::google::protobuf::int32 value) {
  SetDirty();
  set_has_type();
  type_ = value;
}

// repeated int32 count_group = 3;
inline int MarketConfig::count_group_size() const {
  return count_group_.size();
}
inline void MarketConfig::clear_count_group() {
  count_group_.Clear();
  SetDirty();
}
inline ::google::protobuf::int32 MarketConfig::count_group(int index) const {
  return count_group_.Get(index);
}
inline void MarketConfig::set_count_group(int index, ::google::protobuf::int32 value) {
  SetDirty();
  count_group_.Set(index, value);
}
inline void MarketConfig::add_count_group(::google::protobuf::int32 value) {
  SetDirty();
  count_group_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MarketConfig::count_group() const {
  return count_group_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MarketConfig::mutable_count_group() {
  SetDirty();
  return &count_group_;
}

// required int32 refresh_token = 4;
inline bool MarketConfig::has_refresh_token() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MarketConfig::set_has_refresh_token() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MarketConfig::clear_has_refresh_token() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MarketConfig::clear_refresh_token() {
  refresh_token_ = 0;
  clear_has_refresh_token();
  SetDirty();
}
inline ::google::protobuf::int32 MarketConfig::refresh_token() const {
  return refresh_token_;
}
inline void MarketConfig::set_refresh_token(::google::protobuf::int32 value) {
  SetDirty();
  set_has_refresh_token();
  refresh_token_ = value;
}

// required int32 token_count = 5;
inline bool MarketConfig::has_token_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MarketConfig::set_has_token_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MarketConfig::clear_has_token_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MarketConfig::clear_token_count() {
  token_count_ = 0;
  clear_has_token_count();
  SetDirty();
}
inline ::google::protobuf::int32 MarketConfig::token_count() const {
  return token_count_;
}
inline void MarketConfig::set_token_count(::google::protobuf::int32 value) {
  SetDirty();
  set_has_token_count();
  token_count_ = value;
}

// required int32 refresh_count = 6;
inline bool MarketConfig::has_refresh_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MarketConfig::set_has_refresh_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MarketConfig::clear_has_refresh_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MarketConfig::clear_refresh_count() {
  refresh_count_ = 0;
  clear_has_refresh_count();
  SetDirty();
}
inline ::google::protobuf::int32 MarketConfig::refresh_count() const {
  return refresh_count_;
}
inline void MarketConfig::set_refresh_count(::google::protobuf::int32 value) {
  SetDirty();
  set_has_refresh_count();
  refresh_count_ = value;
}

// required int32 refresh_cd = 7;
inline bool MarketConfig::has_refresh_cd() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MarketConfig::set_has_refresh_cd() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MarketConfig::clear_has_refresh_cd() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MarketConfig::clear_refresh_cd() {
  refresh_cd_ = 0;
  clear_has_refresh_cd();
  SetDirty();
}
inline ::google::protobuf::int32 MarketConfig::refresh_cd() const {
  return refresh_cd_;
}
inline void MarketConfig::set_refresh_cd(::google::protobuf::int32 value) {
  SetDirty();
  set_has_refresh_cd();
  refresh_cd_ = value;
}

// required int32 refresh_rate = 8;
inline bool MarketConfig::has_refresh_rate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MarketConfig::set_has_refresh_rate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MarketConfig::clear_has_refresh_rate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MarketConfig::clear_refresh_rate() {
  refresh_rate_ = 0;
  clear_has_refresh_rate();
  SetDirty();
}
inline ::google::protobuf::int32 MarketConfig::refresh_rate() const {
  return refresh_rate_;
}
inline void MarketConfig::set_refresh_rate(::google::protobuf::int32 value) {
  SetDirty();
  set_has_refresh_rate();
  refresh_rate_ = value;
}

// required int32 gen_level = 9;
inline bool MarketConfig::has_gen_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MarketConfig::set_has_gen_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MarketConfig::clear_has_gen_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MarketConfig::clear_gen_level() {
  gen_level_ = 0;
  clear_has_gen_level();
  SetDirty();
}
inline ::google::protobuf::int32 MarketConfig::gen_level() const {
  return gen_level_;
}
inline void MarketConfig::set_gen_level(::google::protobuf::int32 value) {
  SetDirty();
  set_has_gen_level();
  gen_level_ = value;
}

// required int32 open = 10;
inline bool MarketConfig::has_open() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MarketConfig::set_has_open() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MarketConfig::clear_has_open() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MarketConfig::clear_open() {
  open_ = 0;
  clear_has_open();
  SetDirty();
}
inline ::google::protobuf::int32 MarketConfig::open() const {
  return open_;
}
inline void MarketConfig::set_open(::google::protobuf::int32 value) {
  SetDirty();
  set_has_open();
  open_ = value;
}

// -------------------------------------------------------------------

// MarketItemConfig

// required int32 id = 1;
inline bool MarketItemConfig::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarketItemConfig::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarketItemConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarketItemConfig::clear_id() {
  id_ = 0;
  clear_has_id();
  SetDirty();
}
inline ::google::protobuf::int32 MarketItemConfig::id() const {
  return id_;
}
inline void MarketItemConfig::set_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_id();
  id_ = value;
}

// required .Config.MarketType market_id = 2;
inline bool MarketItemConfig::has_market_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarketItemConfig::set_has_market_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarketItemConfig::clear_has_market_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarketItemConfig::clear_market_id() {
  market_id_ = -1;
  clear_has_market_id();
  SetDirty();
}
inline ::Config::MarketType MarketItemConfig::market_id() const {
  return static_cast< ::Config::MarketType >(market_id_);
}
inline void MarketItemConfig::set_market_id(::Config::MarketType value) {
  assert(::Config::MarketType_IsValid(value));
  SetDirty();
  set_has_market_id();
  market_id_ = value;
}

// required .Config.MarketItemGroup count_group = 3;
inline bool MarketItemConfig::has_count_group() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarketItemConfig::set_has_count_group() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarketItemConfig::clear_has_count_group() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarketItemConfig::clear_count_group() {
  count_group_ = -1;
  clear_has_count_group();
  SetDirty();
}
inline ::Config::MarketItemGroup MarketItemConfig::count_group() const {
  return static_cast< ::Config::MarketItemGroup >(count_group_);
}
inline void MarketItemConfig::set_count_group(::Config::MarketItemGroup value) {
  assert(::Config::MarketItemGroup_IsValid(value));
  SetDirty();
  set_has_count_group();
  count_group_ = value;
}

// required int32 open_level = 4;
inline bool MarketItemConfig::has_open_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MarketItemConfig::set_has_open_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MarketItemConfig::clear_has_open_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MarketItemConfig::clear_open_level() {
  open_level_ = 0;
  clear_has_open_level();
  SetDirty();
}
inline ::google::protobuf::int32 MarketItemConfig::open_level() const {
  return open_level_;
}
inline void MarketItemConfig::set_open_level(::google::protobuf::int32 value) {
  SetDirty();
  set_has_open_level();
  open_level_ = value;
}

// required int32 off_level = 5;
inline bool MarketItemConfig::has_off_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MarketItemConfig::set_has_off_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MarketItemConfig::clear_has_off_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MarketItemConfig::clear_off_level() {
  off_level_ = 0;
  clear_has_off_level();
  SetDirty();
}
inline ::google::protobuf::int32 MarketItemConfig::off_level() const {
  return off_level_;
}
inline void MarketItemConfig::set_off_level(::google::protobuf::int32 value) {
  SetDirty();
  set_has_off_level();
  off_level_ = value;
}

// required int32 gen_weight = 6;
inline bool MarketItemConfig::has_gen_weight() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MarketItemConfig::set_has_gen_weight() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MarketItemConfig::clear_has_gen_weight() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MarketItemConfig::clear_gen_weight() {
  gen_weight_ = 0;
  clear_has_gen_weight();
  SetDirty();
}
inline ::google::protobuf::int32 MarketItemConfig::gen_weight() const {
  return gen_weight_;
}
inline void MarketItemConfig::set_gen_weight(::google::protobuf::int32 value) {
  SetDirty();
  set_has_gen_weight();
  gen_weight_ = value;
}

// required int32 item_id = 7;
inline bool MarketItemConfig::has_item_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MarketItemConfig::set_has_item_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MarketItemConfig::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MarketItemConfig::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
  SetDirty();
}
inline ::google::protobuf::int32 MarketItemConfig::item_id() const {
  return item_id_;
}
inline void MarketItemConfig::set_item_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_item_id();
  item_id_ = value;
}

// required int32 item_count = 8;
inline bool MarketItemConfig::has_item_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MarketItemConfig::set_has_item_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MarketItemConfig::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MarketItemConfig::clear_item_count() {
  item_count_ = 0;
  clear_has_item_count();
  SetDirty();
}
inline ::google::protobuf::int32 MarketItemConfig::item_count() const {
  return item_count_;
}
inline void MarketItemConfig::set_item_count(::google::protobuf::int32 value) {
  SetDirty();
  set_has_item_count();
  item_count_ = value;
}

// required int32 price_type = 9;
inline bool MarketItemConfig::has_price_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MarketItemConfig::set_has_price_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MarketItemConfig::clear_has_price_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MarketItemConfig::clear_price_type() {
  price_type_ = 0;
  clear_has_price_type();
  SetDirty();
}
inline ::google::protobuf::int32 MarketItemConfig::price_type() const {
  return price_type_;
}
inline void MarketItemConfig::set_price_type(::google::protobuf::int32 value) {
  SetDirty();
  set_has_price_type();
  price_type_ = value;
}

// required int32 price_value = 10;
inline bool MarketItemConfig::has_price_value() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MarketItemConfig::set_has_price_value() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MarketItemConfig::clear_has_price_value() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MarketItemConfig::clear_price_value() {
  price_value_ = 0;
  clear_has_price_value();
  SetDirty();
}
inline ::google::protobuf::int32 MarketItemConfig::price_value() const {
  return price_value_;
}
inline void MarketItemConfig::set_price_value(::google::protobuf::int32 value) {
  SetDirty();
  set_has_price_value();
  price_value_ = value;
}

// required int32 day_limit_count = 11;
inline bool MarketItemConfig::has_day_limit_count() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MarketItemConfig::set_has_day_limit_count() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MarketItemConfig::clear_has_day_limit_count() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MarketItemConfig::clear_day_limit_count() {
  day_limit_count_ = 0;
  clear_has_day_limit_count();
  SetDirty();
}
inline ::google::protobuf::int32 MarketItemConfig::day_limit_count() const {
  return day_limit_count_;
}
inline void MarketItemConfig::set_day_limit_count(::google::protobuf::int32 value) {
  SetDirty();
  set_has_day_limit_count();
  day_limit_count_ = value;
}

// required int32 open = 12;
inline bool MarketItemConfig::has_open() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MarketItemConfig::set_has_open() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MarketItemConfig::clear_has_open() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MarketItemConfig::clear_open() {
  open_ = 0;
  clear_has_open();
  SetDirty();
}
inline ::google::protobuf::int32 MarketItemConfig::open() const {
  return open_;
}
inline void MarketItemConfig::set_open(::google::protobuf::int32 value) {
  SetDirty();
  set_has_open();
  open_ = value;
}

// -------------------------------------------------------------------

// ChargeItemConfig

// required int32 id = 1;
inline bool ChargeItemConfig::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChargeItemConfig::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChargeItemConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChargeItemConfig::clear_id() {
  id_ = 0;
  clear_has_id();
  SetDirty();
}
inline ::google::protobuf::int32 ChargeItemConfig::id() const {
  return id_;
}
inline void ChargeItemConfig::set_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_id();
  id_ = value;
}

// required string group_type = 2;
inline bool ChargeItemConfig::has_group_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChargeItemConfig::set_has_group_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChargeItemConfig::clear_has_group_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChargeItemConfig::clear_group_type() {
  if (group_type_ != &::google::protobuf::internal::kEmptyString) {
    group_type_->clear();
  }
  clear_has_group_type();
  SetDirty();
}
inline const ::std::string& ChargeItemConfig::group_type() const {
  return *group_type_;
}
inline void ChargeItemConfig::set_group_type(const ::std::string& value) {
  SetDirty();
  set_has_group_type();
  if (group_type_ == &::google::protobuf::internal::kEmptyString) {
    group_type_ = new ::std::string;
  }
  group_type_->assign(value);
}
inline void ChargeItemConfig::set_group_type(const char* value) {
  SetDirty();
  set_has_group_type();
  if (group_type_ == &::google::protobuf::internal::kEmptyString) {
    group_type_ = new ::std::string;
  }
  group_type_->assign(value);
}
inline void ChargeItemConfig::set_group_type(const char* value, size_t size) {
  SetDirty();
  set_has_group_type();
  if (group_type_ == &::google::protobuf::internal::kEmptyString) {
    group_type_ = new ::std::string;
  }
  group_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChargeItemConfig::mutable_group_type() {
  SetDirty();
  set_has_group_type();
  if (group_type_ == &::google::protobuf::internal::kEmptyString) {
    group_type_ = new ::std::string;
  }
  return group_type_;
}
inline ::std::string* ChargeItemConfig::release_group_type() {
  SetDirty();
  clear_has_group_type();
  if (group_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = group_type_;
    group_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChargeItemConfig::set_allocated_group_type(::std::string* group_type) {
  SetDirty();
  if (group_type_ != &::google::protobuf::internal::kEmptyString) {
    delete group_type_;
  }
  if (group_type) {
    set_has_group_type();
    group_type_ = group_type;
  } else {
    clear_has_group_type();
    group_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string price_type = 3;
inline bool ChargeItemConfig::has_price_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChargeItemConfig::set_has_price_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChargeItemConfig::clear_has_price_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChargeItemConfig::clear_price_type() {
  if (price_type_ != &::google::protobuf::internal::kEmptyString) {
    price_type_->clear();
  }
  clear_has_price_type();
  SetDirty();
}
inline const ::std::string& ChargeItemConfig::price_type() const {
  return *price_type_;
}
inline void ChargeItemConfig::set_price_type(const ::std::string& value) {
  SetDirty();
  set_has_price_type();
  if (price_type_ == &::google::protobuf::internal::kEmptyString) {
    price_type_ = new ::std::string;
  }
  price_type_->assign(value);
}
inline void ChargeItemConfig::set_price_type(const char* value) {
  SetDirty();
  set_has_price_type();
  if (price_type_ == &::google::protobuf::internal::kEmptyString) {
    price_type_ = new ::std::string;
  }
  price_type_->assign(value);
}
inline void ChargeItemConfig::set_price_type(const char* value, size_t size) {
  SetDirty();
  set_has_price_type();
  if (price_type_ == &::google::protobuf::internal::kEmptyString) {
    price_type_ = new ::std::string;
  }
  price_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChargeItemConfig::mutable_price_type() {
  SetDirty();
  set_has_price_type();
  if (price_type_ == &::google::protobuf::internal::kEmptyString) {
    price_type_ = new ::std::string;
  }
  return price_type_;
}
inline ::std::string* ChargeItemConfig::release_price_type() {
  SetDirty();
  clear_has_price_type();
  if (price_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = price_type_;
    price_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChargeItemConfig::set_allocated_price_type(::std::string* price_type) {
  SetDirty();
  if (price_type_ != &::google::protobuf::internal::kEmptyString) {
    delete price_type_;
  }
  if (price_type) {
    set_has_price_type();
    price_type_ = price_type;
  } else {
    clear_has_price_type();
    price_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 effect_value = 4;
inline bool ChargeItemConfig::has_effect_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChargeItemConfig::set_has_effect_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChargeItemConfig::clear_has_effect_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChargeItemConfig::clear_effect_value() {
  effect_value_ = 0;
  clear_has_effect_value();
  SetDirty();
}
inline ::google::protobuf::int32 ChargeItemConfig::effect_value() const {
  return effect_value_;
}
inline void ChargeItemConfig::set_effect_value(::google::protobuf::int32 value) {
  SetDirty();
  set_has_effect_value();
  effect_value_ = value;
}

// required int32 effect_count = 5;
inline bool ChargeItemConfig::has_effect_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChargeItemConfig::set_has_effect_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChargeItemConfig::clear_has_effect_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChargeItemConfig::clear_effect_count() {
  effect_count_ = 0;
  clear_has_effect_count();
  SetDirty();
}
inline ::google::protobuf::int32 ChargeItemConfig::effect_count() const {
  return effect_count_;
}
inline void ChargeItemConfig::set_effect_count(::google::protobuf::int32 value) {
  SetDirty();
  set_has_effect_count();
  effect_count_ = value;
}

// required int32 extra_value = 6;
inline bool ChargeItemConfig::has_extra_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChargeItemConfig::set_has_extra_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChargeItemConfig::clear_has_extra_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChargeItemConfig::clear_extra_value() {
  extra_value_ = 0;
  clear_has_extra_value();
  SetDirty();
}
inline ::google::protobuf::int32 ChargeItemConfig::extra_value() const {
  return extra_value_;
}
inline void ChargeItemConfig::set_extra_value(::google::protobuf::int32 value) {
  SetDirty();
  set_has_extra_value();
  extra_value_ = value;
}

// required float rmb_price = 13;
inline bool ChargeItemConfig::has_rmb_price() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChargeItemConfig::set_has_rmb_price() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChargeItemConfig::clear_has_rmb_price() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChargeItemConfig::clear_rmb_price() {
  rmb_price_ = 0;
  clear_has_rmb_price();
  SetDirty();
}
inline float ChargeItemConfig::rmb_price() const {
  return rmb_price_;
}
inline void ChargeItemConfig::set_rmb_price(float value) {
  SetDirty();
  set_has_rmb_price();
  rmb_price_ = value;
}

// -------------------------------------------------------------------

// ChargeList

// required string channel_id = 1;
inline bool ChargeList::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChargeList::set_has_channel_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChargeList::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChargeList::clear_channel_id() {
  if (channel_id_ != &::google::protobuf::internal::kEmptyString) {
    channel_id_->clear();
  }
  clear_has_channel_id();
  SetDirty();
}
inline const ::std::string& ChargeList::channel_id() const {
  return *channel_id_;
}
inline void ChargeList::set_channel_id(const ::std::string& value) {
  SetDirty();
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_id_ = new ::std::string;
  }
  channel_id_->assign(value);
}
inline void ChargeList::set_channel_id(const char* value) {
  SetDirty();
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_id_ = new ::std::string;
  }
  channel_id_->assign(value);
}
inline void ChargeList::set_channel_id(const char* value, size_t size) {
  SetDirty();
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_id_ = new ::std::string;
  }
  channel_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChargeList::mutable_channel_id() {
  SetDirty();
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::kEmptyString) {
    channel_id_ = new ::std::string;
  }
  return channel_id_;
}
inline ::std::string* ChargeList::release_channel_id() {
  SetDirty();
  clear_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channel_id_;
    channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChargeList::set_allocated_channel_id(::std::string* channel_id) {
  SetDirty();
  if (channel_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_id_;
  }
  if (channel_id) {
    set_has_channel_id();
    channel_id_ = channel_id;
  } else {
    clear_has_channel_id();
    channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 product_index = 2;
inline bool ChargeList::has_product_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChargeList::set_has_product_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChargeList::clear_has_product_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChargeList::clear_product_index() {
  product_index_ = 0;
  clear_has_product_index();
  SetDirty();
}
inline ::google::protobuf::int32 ChargeList::product_index() const {
  return product_index_;
}
inline void ChargeList::set_product_index(::google::protobuf::int32 value) {
  SetDirty();
  set_has_product_index();
  product_index_ = value;
}

// required string product_id = 3;
inline bool ChargeList::has_product_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChargeList::set_has_product_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChargeList::clear_has_product_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChargeList::clear_product_id() {
  if (product_id_ != &::google::protobuf::internal::kEmptyString) {
    product_id_->clear();
  }
  clear_has_product_id();
  SetDirty();
}
inline const ::std::string& ChargeList::product_id() const {
  return *product_id_;
}
inline void ChargeList::set_product_id(const ::std::string& value) {
  SetDirty();
  set_has_product_id();
  if (product_id_ == &::google::protobuf::internal::kEmptyString) {
    product_id_ = new ::std::string;
  }
  product_id_->assign(value);
}
inline void ChargeList::set_product_id(const char* value) {
  SetDirty();
  set_has_product_id();
  if (product_id_ == &::google::protobuf::internal::kEmptyString) {
    product_id_ = new ::std::string;
  }
  product_id_->assign(value);
}
inline void ChargeList::set_product_id(const char* value, size_t size) {
  SetDirty();
  set_has_product_id();
  if (product_id_ == &::google::protobuf::internal::kEmptyString) {
    product_id_ = new ::std::string;
  }
  product_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChargeList::mutable_product_id() {
  SetDirty();
  set_has_product_id();
  if (product_id_ == &::google::protobuf::internal::kEmptyString) {
    product_id_ = new ::std::string;
  }
  return product_id_;
}
inline ::std::string* ChargeList::release_product_id() {
  SetDirty();
  clear_has_product_id();
  if (product_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = product_id_;
    product_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChargeList::set_allocated_product_id(::std::string* product_id) {
  SetDirty();
  if (product_id_ != &::google::protobuf::internal::kEmptyString) {
    delete product_id_;
  }
  if (product_id) {
    set_has_product_id();
    product_id_ = product_id;
  } else {
    clear_has_product_id();
    product_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MarketConfig_2eproto__INCLUDED
