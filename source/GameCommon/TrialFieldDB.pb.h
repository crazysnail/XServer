// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TrialFieldDB.proto

#ifndef PROTOBUF_TrialFieldDB_2eproto__INCLUDED
#define PROTOBUF_TrialFieldDB_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ProtoBufOption.pb.h"
#include "PlayerBasicInfo.pb.h"
#include "ActorBasicInfo.pb.h"
// @@protoc_insertion_point(includes)

namespace DB {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TrialFieldDB_2eproto();
void protobuf_AssignDesc_TrialFieldDB_2eproto();
void protobuf_ShutdownFile_TrialFieldDB_2eproto();

class TrialTarget;
class TrialPlayerInfo;
class TrialTargetFormation;
class PlayerTrialInfo;
class PlayerTowerInfo;

// ===================================================================

class TrialTarget : public ::google::protobuf::Message {
 public:
  TrialTarget();
  virtual ~TrialTarget();

  TrialTarget(const TrialTarget& from);

  inline TrialTarget& operator=(const TrialTarget& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrialTarget& default_instance();

  void Swap(TrialTarget* other);

  // implements Message ----------------------------------------------

  TrialTarget* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrialTarget& from);
  void MergeFrom(const TrialTarget& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .DB.TrialPlayerInfo player = 1;
  inline bool has_player() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 1;
  inline const ::DB::TrialPlayerInfo& player() const;
  inline ::DB::TrialPlayerInfo* mutable_player();
  inline ::DB::TrialPlayerInfo* release_player();
  inline void set_allocated_player(::DB::TrialPlayerInfo* player);

  // repeated .Packet.ActorFullInfo actors = 2;
  inline int actors_size() const;
  inline void clear_actors();
  static const int kActorsFieldNumber = 2;
  inline const ::Packet::ActorFullInfo& actors(int index) const;
  inline ::Packet::ActorFullInfo* mutable_actors(int index);
  inline ::Packet::ActorFullInfo* add_actors();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::ActorFullInfo >&
      actors() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::ActorFullInfo >*
      mutable_actors();

  // required bool passed = 3;
  inline bool has_passed() const;
  inline void clear_passed();
  static const int kPassedFieldNumber = 3;
  inline bool passed() const;
  inline void set_passed(bool value);

  // required int32 posid = 4;
  inline bool has_posid() const;
  inline void clear_posid();
  static const int kPosidFieldNumber = 4;
  inline ::google::protobuf::int32 posid() const;
  inline void set_posid(::google::protobuf::int32 value);

  // required bool rewarded = 5;
  inline bool has_rewarded() const;
  inline void clear_rewarded();
  static const int kRewardedFieldNumber = 5;
  inline bool rewarded() const;
  inline void set_rewarded(bool value);

  // @@protoc_insertion_point(class_scope:DB.TrialTarget)
 private:
  inline void set_has_player();
  inline void clear_has_player();
  inline void set_has_passed();
  inline void clear_has_passed();
  inline void set_has_posid();
  inline void clear_has_posid();
  inline void set_has_rewarded();
  inline void clear_has_rewarded();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::DB::TrialPlayerInfo* player_;
  ::google::protobuf::RepeatedPtrField< ::Packet::ActorFullInfo > actors_;
  ::google::protobuf::int32 posid_;
  bool passed_;
  bool rewarded_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_TrialFieldDB_2eproto();
  friend void protobuf_AssignDesc_TrialFieldDB_2eproto();
  friend void protobuf_ShutdownFile_TrialFieldDB_2eproto();

  void InitAsDefaultInstance();
  static TrialTarget* default_instance_;
};
// -------------------------------------------------------------------

class TrialPlayerInfo : public ::google::protobuf::Message {
 public:
  TrialPlayerInfo();
  virtual ~TrialPlayerInfo();

  TrialPlayerInfo(const TrialPlayerInfo& from);

  inline TrialPlayerInfo& operator=(const TrialPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrialPlayerInfo& default_instance();

  void Swap(TrialPlayerInfo* other);

  // implements Message ----------------------------------------------

  TrialPlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrialPlayerInfo& from);
  void MergeFrom(const TrialPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 actor_config_id = 1;
  inline bool has_actor_config_id() const;
  inline void clear_actor_config_id();
  static const int kActorConfigIdFieldNumber = 1;
  inline ::google::protobuf::int32 actor_config_id() const;
  inline void set_actor_config_id(::google::protobuf::int32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required fixed64 guid = 3;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 3;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:DB.TrialPlayerInfo)
 private:
  inline void set_has_actor_config_id();
  inline void clear_has_actor_config_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_guid();
  inline void clear_has_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint64 guid_;
  ::google::protobuf::int32 actor_config_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_TrialFieldDB_2eproto();
  friend void protobuf_AssignDesc_TrialFieldDB_2eproto();
  friend void protobuf_ShutdownFile_TrialFieldDB_2eproto();

  void InitAsDefaultInstance();
  static TrialPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class TrialTargetFormation : public ::google::protobuf::Message {
 public:
  TrialTargetFormation();
  virtual ~TrialTargetFormation();

  TrialTargetFormation(const TrialTargetFormation& from);

  inline TrialTargetFormation& operator=(const TrialTargetFormation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrialTargetFormation& default_instance();

  void Swap(TrialTargetFormation* other);

  // implements Message ----------------------------------------------

  TrialTargetFormation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrialTargetFormation& from);
  void MergeFrom(const TrialTargetFormation& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .DB.TrialTarget targets = 1;
  inline int targets_size() const;
  inline void clear_targets();
  static const int kTargetsFieldNumber = 1;
  inline const ::DB::TrialTarget& targets(int index) const;
  inline ::DB::TrialTarget* mutable_targets(int index);
  inline ::DB::TrialTarget* add_targets();
  inline const ::google::protobuf::RepeatedPtrField< ::DB::TrialTarget >&
      targets() const;
  inline ::google::protobuf::RepeatedPtrField< ::DB::TrialTarget >*
      mutable_targets();

  // @@protoc_insertion_point(class_scope:DB.TrialTargetFormation)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::DB::TrialTarget > targets_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_TrialFieldDB_2eproto();
  friend void protobuf_AssignDesc_TrialFieldDB_2eproto();
  friend void protobuf_ShutdownFile_TrialFieldDB_2eproto();

  void InitAsDefaultInstance();
  static TrialTargetFormation* default_instance_;
};
// -------------------------------------------------------------------

class PlayerTrialInfo : public ::google::protobuf::Message {
 public:
  PlayerTrialInfo();
  virtual ~PlayerTrialInfo();

  PlayerTrialInfo(const PlayerTrialInfo& from);

  inline PlayerTrialInfo& operator=(const PlayerTrialInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerTrialInfo& default_instance();

  void Swap(PlayerTrialInfo* other);

  // implements Message ----------------------------------------------

  PlayerTrialInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerTrialInfo& from);
  void MergeFrom(const PlayerTrialInfo& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // required .DB.TrialTargetFormation target = 2;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 2;
  inline const ::DB::TrialTargetFormation& target() const;
  inline ::DB::TrialTargetFormation* mutable_target();
  inline ::DB::TrialTargetFormation* release_target();
  inline void set_allocated_target(::DB::TrialTargetFormation* target);

  // @@protoc_insertion_point(class_scope:DB.PlayerTrialInfo)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_target();
  inline void clear_has_target();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::DB::TrialTargetFormation* target_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TrialFieldDB_2eproto();
  friend void protobuf_AssignDesc_TrialFieldDB_2eproto();
  friend void protobuf_ShutdownFile_TrialFieldDB_2eproto();

  void InitAsDefaultInstance();
  static PlayerTrialInfo* default_instance_;
};
// -------------------------------------------------------------------

class PlayerTowerInfo : public ::google::protobuf::Message {
 public:
  PlayerTowerInfo();
  virtual ~PlayerTowerInfo();

  PlayerTowerInfo(const PlayerTowerInfo& from);

  inline PlayerTowerInfo& operator=(const PlayerTowerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerTowerInfo& default_instance();

  void Swap(PlayerTowerInfo* other);

  // implements Message ----------------------------------------------

  PlayerTowerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerTowerInfo& from);
  void MergeFrom(const PlayerTowerInfo& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // required int32 tower_level = 2;
  inline bool has_tower_level() const;
  inline void clear_tower_level();
  static const int kTowerLevelFieldNumber = 2;
  inline ::google::protobuf::int32 tower_level() const;
  inline void set_tower_level(::google::protobuf::int32 value);

  // required int32 tower_time = 3;
  inline bool has_tower_time() const;
  inline void clear_tower_time();
  static const int kTowerTimeFieldNumber = 3;
  inline ::google::protobuf::int32 tower_time() const;
  inline void set_tower_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DB.PlayerTowerInfo)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_tower_level();
  inline void clear_has_tower_level();
  inline void set_has_tower_time();
  inline void clear_has_tower_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::google::protobuf::int32 tower_level_;
  ::google::protobuf::int32 tower_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_TrialFieldDB_2eproto();
  friend void protobuf_AssignDesc_TrialFieldDB_2eproto();
  friend void protobuf_ShutdownFile_TrialFieldDB_2eproto();

  void InitAsDefaultInstance();
  static PlayerTowerInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// TrialTarget

// required .DB.TrialPlayerInfo player = 1;
inline bool TrialTarget::has_player() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrialTarget::set_has_player() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrialTarget::clear_has_player() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrialTarget::clear_player() {
  if (player_ != NULL) player_->::DB::TrialPlayerInfo::Clear();
  clear_has_player();
  SetDirty();
}
inline const ::DB::TrialPlayerInfo& TrialTarget::player() const {
  return player_ != NULL ? *player_ : *default_instance_->player_;
}
inline ::DB::TrialPlayerInfo* TrialTarget::mutable_player() {
  SetDirty();
  set_has_player();
  if (player_ == NULL) player_ = new ::DB::TrialPlayerInfo;
  return player_;
}
inline ::DB::TrialPlayerInfo* TrialTarget::release_player() {
  SetDirty();
  clear_has_player();
  ::DB::TrialPlayerInfo* temp = player_;
  player_ = NULL;
  return temp;
}
inline void TrialTarget::set_allocated_player(::DB::TrialPlayerInfo* player) {
  SetDirty();
  delete player_;
  player_ = player;
  if (player) {
    set_has_player();
  } else {
    clear_has_player();
  }
}

// repeated .Packet.ActorFullInfo actors = 2;
inline int TrialTarget::actors_size() const {
  return actors_.size();
}
inline void TrialTarget::clear_actors() {
  actors_.Clear();
  SetDirty();
}
inline const ::Packet::ActorFullInfo& TrialTarget::actors(int index) const {
  return actors_.Get(index);
}
inline ::Packet::ActorFullInfo* TrialTarget::mutable_actors(int index) {
  SetDirty();
  return actors_.Mutable(index);
}
inline ::Packet::ActorFullInfo* TrialTarget::add_actors() {
  SetDirty();
  return actors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::ActorFullInfo >&
TrialTarget::actors() const {
  return actors_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::ActorFullInfo >*
TrialTarget::mutable_actors() {
  SetDirty();
  return &actors_;
}

// required bool passed = 3;
inline bool TrialTarget::has_passed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrialTarget::set_has_passed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrialTarget::clear_has_passed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrialTarget::clear_passed() {
  passed_ = false;
  clear_has_passed();
  SetDirty();
}
inline bool TrialTarget::passed() const {
  return passed_;
}
inline void TrialTarget::set_passed(bool value) {
  SetDirty();
  set_has_passed();
  passed_ = value;
}

// required int32 posid = 4;
inline bool TrialTarget::has_posid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrialTarget::set_has_posid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrialTarget::clear_has_posid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrialTarget::clear_posid() {
  posid_ = 0;
  clear_has_posid();
  SetDirty();
}
inline ::google::protobuf::int32 TrialTarget::posid() const {
  return posid_;
}
inline void TrialTarget::set_posid(::google::protobuf::int32 value) {
  SetDirty();
  set_has_posid();
  posid_ = value;
}

// required bool rewarded = 5;
inline bool TrialTarget::has_rewarded() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrialTarget::set_has_rewarded() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrialTarget::clear_has_rewarded() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrialTarget::clear_rewarded() {
  rewarded_ = false;
  clear_has_rewarded();
  SetDirty();
}
inline bool TrialTarget::rewarded() const {
  return rewarded_;
}
inline void TrialTarget::set_rewarded(bool value) {
  SetDirty();
  set_has_rewarded();
  rewarded_ = value;
}

// -------------------------------------------------------------------

// TrialPlayerInfo

// required int32 actor_config_id = 1;
inline bool TrialPlayerInfo::has_actor_config_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrialPlayerInfo::set_has_actor_config_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrialPlayerInfo::clear_has_actor_config_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrialPlayerInfo::clear_actor_config_id() {
  actor_config_id_ = 0;
  clear_has_actor_config_id();
  SetDirty();
}
inline ::google::protobuf::int32 TrialPlayerInfo::actor_config_id() const {
  return actor_config_id_;
}
inline void TrialPlayerInfo::set_actor_config_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_actor_config_id();
  actor_config_id_ = value;
}

// required string name = 2;
inline bool TrialPlayerInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrialPlayerInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrialPlayerInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrialPlayerInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
  SetDirty();
}
inline const ::std::string& TrialPlayerInfo::name() const {
  return *name_;
}
inline void TrialPlayerInfo::set_name(const ::std::string& value) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TrialPlayerInfo::set_name(const char* value) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void TrialPlayerInfo::set_name(const char* value, size_t size) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TrialPlayerInfo::mutable_name() {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* TrialPlayerInfo::release_name() {
  SetDirty();
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TrialPlayerInfo::set_allocated_name(::std::string* name) {
  SetDirty();
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required fixed64 guid = 3;
inline bool TrialPlayerInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrialPlayerInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrialPlayerInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrialPlayerInfo::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 TrialPlayerInfo::guid() const {
  return guid_;
}
inline void TrialPlayerInfo::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// -------------------------------------------------------------------

// TrialTargetFormation

// repeated .DB.TrialTarget targets = 1;
inline int TrialTargetFormation::targets_size() const {
  return targets_.size();
}
inline void TrialTargetFormation::clear_targets() {
  targets_.Clear();
  SetDirty();
}
inline const ::DB::TrialTarget& TrialTargetFormation::targets(int index) const {
  return targets_.Get(index);
}
inline ::DB::TrialTarget* TrialTargetFormation::mutable_targets(int index) {
  SetDirty();
  return targets_.Mutable(index);
}
inline ::DB::TrialTarget* TrialTargetFormation::add_targets() {
  SetDirty();
  return targets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DB::TrialTarget >&
TrialTargetFormation::targets() const {
  return targets_;
}
inline ::google::protobuf::RepeatedPtrField< ::DB::TrialTarget >*
TrialTargetFormation::mutable_targets() {
  SetDirty();
  return &targets_;
}

// -------------------------------------------------------------------

// PlayerTrialInfo

// required fixed64 guid = 1;
inline bool PlayerTrialInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerTrialInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerTrialInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerTrialInfo::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 PlayerTrialInfo::guid() const {
  return guid_;
}
inline void PlayerTrialInfo::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// required .DB.TrialTargetFormation target = 2;
inline bool PlayerTrialInfo::has_target() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerTrialInfo::set_has_target() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerTrialInfo::clear_has_target() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerTrialInfo::clear_target() {
  if (target_ != NULL) target_->::DB::TrialTargetFormation::Clear();
  clear_has_target();
  SetDirty();
}
inline const ::DB::TrialTargetFormation& PlayerTrialInfo::target() const {
  return target_ != NULL ? *target_ : *default_instance_->target_;
}
inline ::DB::TrialTargetFormation* PlayerTrialInfo::mutable_target() {
  SetDirty();
  set_has_target();
  if (target_ == NULL) target_ = new ::DB::TrialTargetFormation;
  return target_;
}
inline ::DB::TrialTargetFormation* PlayerTrialInfo::release_target() {
  SetDirty();
  clear_has_target();
  ::DB::TrialTargetFormation* temp = target_;
  target_ = NULL;
  return temp;
}
inline void PlayerTrialInfo::set_allocated_target(::DB::TrialTargetFormation* target) {
  SetDirty();
  delete target_;
  target_ = target;
  if (target) {
    set_has_target();
  } else {
    clear_has_target();
  }
}

// -------------------------------------------------------------------

// PlayerTowerInfo

// required fixed64 guid = 1;
inline bool PlayerTowerInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerTowerInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerTowerInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerTowerInfo::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 PlayerTowerInfo::guid() const {
  return guid_;
}
inline void PlayerTowerInfo::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// required int32 tower_level = 2;
inline bool PlayerTowerInfo::has_tower_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerTowerInfo::set_has_tower_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerTowerInfo::clear_has_tower_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerTowerInfo::clear_tower_level() {
  tower_level_ = 0;
  clear_has_tower_level();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerTowerInfo::tower_level() const {
  return tower_level_;
}
inline void PlayerTowerInfo::set_tower_level(::google::protobuf::int32 value) {
  SetDirty();
  set_has_tower_level();
  tower_level_ = value;
}

// required int32 tower_time = 3;
inline bool PlayerTowerInfo::has_tower_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerTowerInfo::set_has_tower_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerTowerInfo::clear_has_tower_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerTowerInfo::clear_tower_time() {
  tower_time_ = 0;
  clear_has_tower_time();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerTowerInfo::tower_time() const {
  return tower_time_;
}
inline void PlayerTowerInfo::set_tower_time(::google::protobuf::int32 value) {
  SetDirty();
  set_has_tower_time();
  tower_time_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DB

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TrialFieldDB_2eproto__INCLUDED
