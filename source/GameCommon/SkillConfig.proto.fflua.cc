// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SkillConfig.proto
#include "SkillConfig.pb.h"
#include "SkillConfig.proto.fflua.h"
namespace Config {
bool TargetSelectLogic_fflua_reg(lua_State* state)
{
//for decltype
	TargetSelectLogic* message(nullptr);
	message;
	ff::fflua_register_t<TargetSelectLogic, ctor()>(state, "TargetSelectLogic", "google::protobuf::Message")
		// required .Config.TargetSortType sort_type = 1;
		.def(&TargetSelectLogic::sort_type, "sort_type")
		.def(&TargetSelectLogic::set_sort_type, "set_sort_type")
		// required .Config.TargetCamp target_camp = 2;
		.def(&TargetSelectLogic::target_camp, "target_camp")
		.def(&TargetSelectLogic::set_target_camp, "set_target_camp")
		// required int32 range = 3;
		.def(&TargetSelectLogic::range, "range")
		.def(&TargetSelectLogic::set_range, "set_range")
		// required int32 min_count = 4;
		.def(&TargetSelectLogic::min_count, "min_count")
		.def(&TargetSelectLogic::set_min_count, "set_min_count")
		// required int32 max_count = 5;
		.def(&TargetSelectLogic::max_count, "max_count")
		.def(&TargetSelectLogic::set_max_count, "set_max_count")
		// required .Config.AreaType area_type = 6;
		.def(&TargetSelectLogic::area_type, "area_type")
		.def(&TargetSelectLogic::set_area_type, "set_area_type")
		// required int32 param_1 = 7;
		.def(&TargetSelectLogic::param_1, "param_1")
		.def(&TargetSelectLogic::set_param_1, "set_param_1")
		.def(&TargetSelectLogic::ByteSize, "ByteSize")
		.def(&TargetSelectLogic::SetInitialized, "SetInitialized")
		;
	return true;
}
bool TargetSelectExtra_fflua_reg(lua_State* state)
{
//for decltype
	TargetSelectExtra* message(nullptr);
	message;
	ff::fflua_register_t<TargetSelectExtra, ctor()>(state, "TargetSelectExtra", "google::protobuf::Message")
		// required .Config.TargetSortType sort_type = 1;
		.def(&TargetSelectExtra::sort_type, "sort_type")
		.def(&TargetSelectExtra::set_sort_type, "set_sort_type")
		// required int32 range = 2;
		.def(&TargetSelectExtra::range, "range")
		.def(&TargetSelectExtra::set_range, "set_range")
		// required int32 max_count = 3;
		.def(&TargetSelectExtra::max_count, "max_count")
		.def(&TargetSelectExtra::set_max_count, "set_max_count")
		.def(&TargetSelectExtra::ByteSize, "ByteSize")
		.def(&TargetSelectExtra::SetInitialized, "SetInitialized")
		;
	return true;
}
bool SkillConfig_fflua_reg(lua_State* state)
{
//for decltype
	SkillConfig* message(nullptr);
	message;
	ff::fflua_register_t<SkillConfig, ctor()>(state, "SkillConfig", "google::protobuf::Message")
		// required int32 id = 1;
		.def(&SkillConfig::id, "id")
		.def(&SkillConfig::set_id, "set_id")
		// required int32 level = 2;
		.def(&SkillConfig::level, "level")
		.def(&SkillConfig::set_level, "set_level")
		// required int32 prefix_time = 3;
		.def(&SkillConfig::prefix_time, "prefix_time")
		.def(&SkillConfig::set_prefix_time, "set_prefix_time")
		// required float bullet_speed = 4;
		.def(&SkillConfig::bullet_speed, "bullet_speed")
		.def(&SkillConfig::set_bullet_speed, "set_bullet_speed")
		// required int32 surffix_time = 5;
		.def(&SkillConfig::surffix_time, "surffix_time")
		.def(&SkillConfig::set_surffix_time, "set_surffix_time")
		// required int32 cd_time = 6;
		.def(&SkillConfig::cd_time, "cd_time")
		.def(&SkillConfig::set_cd_time, "set_cd_time")
		// required .Config.TargetSelectLogic skill_tar_logic = 7;
		.def(&SkillConfig::skill_tar_logic, "skill_tar_logic")
		.def(&SkillConfig::mutable_skill_tar_logic, "mutable_skill_tar_logic")
		// required .Config.TargetSelectExtra tar_extra = 8;
		.def(&SkillConfig::tar_extra, "tar_extra")
		.def(&SkillConfig::mutable_tar_extra, "mutable_tar_extra")
		// required .Config.SkillType skill_type = 9;
		.def(&SkillConfig::skill_type, "skill_type")
		.def(&SkillConfig::set_skill_type, "set_skill_type")
		// required .Packet.Property self_property = 14;
		.def(&SkillConfig::self_property, "self_property")
		.def(&SkillConfig::set_self_property, "set_self_property")
		// required .Packet.Property target_property = 15;
		.def(&SkillConfig::target_property, "target_property")
		.def(&SkillConfig::set_target_property, "set_target_property")
		// required string skill_effect = 16;
		.def(&SkillConfig::skill_effect, "skill_effect")
		.def<void (SkillConfig::*)(const std::string&)>(&SkillConfig::set_skill_effect, "set_skill_effect")
		// required int32 self_buff = 17;
		.def(&SkillConfig::self_buff, "self_buff")
		.def(&SkillConfig::set_self_buff, "set_self_buff")
		// repeated int32 buffs = 18;
		.def(&SkillConfig::buffs_size, "buffs_size")
		.def<decltype(message->buffs(0)) (SkillConfig::*)(int) const>(&SkillConfig::buffs, "buffs")
		.def<void(SkillConfig::*)(int, const decltype(message->buffs(0)))>(&SkillConfig::set_buffs, "set_buffs")
		.def(&SkillConfig::add_buffs, "add_buffs")
		// repeated .Config.TargetSelectLogic buff_tar_logics = 19;
		.def(&SkillConfig::buff_tar_logics_size, "buff_tar_logics_size")
		.def<decltype(message->buff_tar_logics(0)) (SkillConfig::*)(int) const>(&SkillConfig::buff_tar_logics, "buff_tar_logics")
		.def<decltype(message->mutable_buff_tar_logics(0)) (SkillConfig::*)(int)>(&SkillConfig::mutable_buff_tar_logics, "mutable_buff_tar_logics")
		.def(&SkillConfig::add_buff_tar_logics, "add_buff_tar_logics")
		// repeated .Config.SkillConfig sub_skills = 20;
		.def(&SkillConfig::sub_skills_size, "sub_skills_size")
		.def<decltype(message->sub_skills(0)) (SkillConfig::*)(int) const>(&SkillConfig::sub_skills, "sub_skills")
		.def<decltype(message->mutable_sub_skills(0)) (SkillConfig::*)(int)>(&SkillConfig::mutable_sub_skills, "mutable_sub_skills")
		.def(&SkillConfig::add_sub_skills, "add_sub_skills")
		// required int32 parent_skill = 21;
		.def(&SkillConfig::parent_skill, "parent_skill")
		.def(&SkillConfig::set_parent_skill, "set_parent_skill")
		// required float acce_factor = 22;
		.def(&SkillConfig::acce_factor, "acce_factor")
		.def(&SkillConfig::set_acce_factor, "set_acce_factor")
		// required .Packet.Property self_property_revise_0 = 23;
		.def(&SkillConfig::self_property_revise_0, "self_property_revise_0")
		.def(&SkillConfig::set_self_property_revise_0, "set_self_property_revise_0")
		// required float self_property_revise_value_0 = 24;
		.def(&SkillConfig::self_property_revise_value_0, "self_property_revise_value_0")
		.def(&SkillConfig::set_self_property_revise_value_0, "set_self_property_revise_value_0")
		// required .Config.PropertyReviseValueType self_property_revise_value_type_0 = 25;
		.def(&SkillConfig::self_property_revise_value_type_0, "self_property_revise_value_type_0")
		.def(&SkillConfig::set_self_property_revise_value_type_0, "set_self_property_revise_value_type_0")
		// required .Packet.Property buff_property_revise_0 = 26;
		.def(&SkillConfig::buff_property_revise_0, "buff_property_revise_0")
		.def(&SkillConfig::set_buff_property_revise_0, "set_buff_property_revise_0")
		// required float buff_property_revise_value_0 = 27;
		.def(&SkillConfig::buff_property_revise_value_0, "buff_property_revise_value_0")
		.def(&SkillConfig::set_buff_property_revise_value_0, "set_buff_property_revise_value_0")
		// required .Config.PropertyReviseValueType buff_property_revise_value_type_0 = 28;
		.def(&SkillConfig::buff_property_revise_value_type_0, "buff_property_revise_value_type_0")
		.def(&SkillConfig::set_buff_property_revise_value_type_0, "set_buff_property_revise_value_type_0")
		// required string position_effect = 29;
		.def(&SkillConfig::position_effect, "position_effect")
		.def<void (SkillConfig::*)(const std::string&)>(&SkillConfig::set_position_effect, "set_position_effect")
		// required int32 effect_param_0 = 30;
		.def(&SkillConfig::effect_param_0, "effect_param_0")
		.def(&SkillConfig::set_effect_param_0, "set_effect_param_0")
		// required int32 effect_param_1 = 31;
		.def(&SkillConfig::effect_param_1, "effect_param_1")
		.def(&SkillConfig::set_effect_param_1, "set_effect_param_1")
		// required int32 effect_param_2 = 32;
		.def(&SkillConfig::effect_param_2, "effect_param_2")
		.def(&SkillConfig::set_effect_param_2, "set_effect_param_2")
		// repeated string effect_param_str = 33;
		.def(&SkillConfig::effect_param_str_size, "effect_param_str_size")
		.def<const std::string& (SkillConfig::*)(int) const>(&SkillConfig::effect_param_str, "effect_param_str")
		.def<void (SkillConfig::*)(int, const std::string&)>(&SkillConfig::set_effect_param_str, "set_effect_param_str")
		.def<void (SkillConfig::*)(const std::string&)>(&SkillConfig::add_effect_param_str, "add_effect_param_str")
		// required bool is_sneak = 34;
		.def(&SkillConfig::is_sneak, "is_sneak")
		.def(&SkillConfig::set_is_sneak, "set_is_sneak")
		.def(&SkillConfig::ByteSize, "ByteSize")
		.def(&SkillConfig::SetInitialized, "SetInitialized")
		;
	return true;
}
bool ImpactConfig_fflua_reg(lua_State* state)
{
//for decltype
	ImpactConfig* message(nullptr);
	message;
	ff::fflua_register_t<ImpactConfig, ctor()>(state, "ImpactConfig", "google::protobuf::Message")
		// required int32 id = 1;
		.def(&ImpactConfig::id, "id")
		.def(&ImpactConfig::set_id, "set_id")
		// required string impact_logic = 2;
		.def(&ImpactConfig::impact_logic, "impact_logic")
		.def<void (ImpactConfig::*)(const std::string&)>(&ImpactConfig::set_impact_logic, "set_impact_logic")
		// required .Config.ImpactEffectType effect_type = 3;
		.def(&ImpactConfig::effect_type, "effect_type")
		.def(&ImpactConfig::set_effect_type, "set_effect_type")
		// required int32 max_layer = 4;
		.def(&ImpactConfig::max_layer, "max_layer")
		.def(&ImpactConfig::set_max_layer, "set_max_layer")
		// required int32 mutex_id = 5;
		.def(&ImpactConfig::mutex_id, "mutex_id")
		.def(&ImpactConfig::set_mutex_id, "set_mutex_id")
		// required int32 priority = 6;
		.def(&ImpactConfig::priority, "priority")
		.def(&ImpactConfig::set_priority, "set_priority")
		// required int32 last_time = 7;
		.def(&ImpactConfig::last_time, "last_time")
		.def(&ImpactConfig::set_last_time, "set_last_time")
		// required int32 trigger_freq = 8;
		.def(&ImpactConfig::trigger_freq, "trigger_freq")
		.def(&ImpactConfig::set_trigger_freq, "set_trigger_freq")
		// required int32 effect_times = 9;
		.def(&ImpactConfig::effect_times, "effect_times")
		.def(&ImpactConfig::set_effect_times, "set_effect_times")
		// repeated int32 param_types = 10;
		.def(&ImpactConfig::param_types_size, "param_types_size")
		.def<decltype(message->param_types(0)) (ImpactConfig::*)(int) const>(&ImpactConfig::param_types, "param_types")
		.def<void(ImpactConfig::*)(int, const decltype(message->param_types(0)))>(&ImpactConfig::set_param_types, "set_param_types")
		.def(&ImpactConfig::add_param_types, "add_param_types")
		// repeated float param_values = 11;
		.def(&ImpactConfig::param_values_size, "param_values_size")
		.def<decltype(message->param_values(0)) (ImpactConfig::*)(int) const>(&ImpactConfig::param_values, "param_values")
		.def<void(ImpactConfig::*)(int, const decltype(message->param_values(0)))>(&ImpactConfig::set_param_values, "set_param_values")
		.def(&ImpactConfig::add_param_values, "add_param_values")
		// required .Config.TargetSelectLogic buff_tar_logic = 12;
		.def(&ImpactConfig::buff_tar_logic, "buff_tar_logic")
		.def(&ImpactConfig::mutable_buff_tar_logic, "mutable_buff_tar_logic")
		.def(&ImpactConfig::ByteSize, "ByteSize")
		.def(&ImpactConfig::SetInitialized, "SetInitialized")
		;
	return true;
}
bool SkillBuildConfig_fflua_reg(lua_State* state)
{
//for decltype
	SkillBuildConfig* message(nullptr);
	message;
	ff::fflua_register_t<SkillBuildConfig, ctor()>(state, "SkillBuildConfig", "google::protobuf::Message")
		// required int32 actor_id = 1;
		.def(&SkillBuildConfig::actor_id, "actor_id")
		.def(&SkillBuildConfig::set_actor_id, "set_actor_id")
		// required .Packet.ActorColor color = 2;
		.def(&SkillBuildConfig::color, "color")
		.def(&SkillBuildConfig::set_color, "set_color")
		// repeated int32 skill_ids = 3;
		.def(&SkillBuildConfig::skill_ids_size, "skill_ids_size")
		.def<decltype(message->skill_ids(0)) (SkillBuildConfig::*)(int) const>(&SkillBuildConfig::skill_ids, "skill_ids")
		.def<void(SkillBuildConfig::*)(int, const decltype(message->skill_ids(0)))>(&SkillBuildConfig::set_skill_ids, "set_skill_ids")
		.def(&SkillBuildConfig::add_skill_ids, "add_skill_ids")
		.def(&SkillBuildConfig::ByteSize, "ByteSize")
		.def(&SkillBuildConfig::SetInitialized, "SetInitialized")
		;
	return true;
}
bool BuffDefine_fflua_reg(lua_State* state)
{
//for decltype
	BuffDefine* message(nullptr);
	message;
	ff::fflua_register_t<BuffDefine, ctor()>(state, "BuffDefine", "google::protobuf::Message")
		// required .Config.BuffType type = 1;
		.def(&BuffDefine::type, "type")
		.def(&BuffDefine::set_type, "set_type")
		// required bool is_debuff = 2;
		.def(&BuffDefine::is_debuff, "is_debuff")
		.def(&BuffDefine::set_is_debuff, "set_is_debuff")
		// required bool can_despell = 3;
		.def(&BuffDefine::can_despell, "can_despell")
		.def(&BuffDefine::set_can_despell, "set_can_despell")
		.def(&BuffDefine::ByteSize, "ByteSize")
		.def(&BuffDefine::SetInitialized, "SetInitialized")
		;
	return true;
}
bool SkillConfig_fflua_regist_all(lua_State* state)
{
	TargetSelectLogic_fflua_reg(state);
	TargetSelectExtra_fflua_reg(state);
	SkillConfig_fflua_reg(state);
	ImpactConfig_fflua_reg(state);
	SkillBuildConfig_fflua_reg(state);
	BuffDefine_fflua_reg(state);
	return true;
}
}
