// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: G2SMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "G2SMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace G2S {

namespace {

const ::google::protobuf::Descriptor* CacheAllNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CacheAllNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewDayNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewDayNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewWeekNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewWeekNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* XLuaRegNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  XLuaRegNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* LuaLoadNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LuaLoadNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerOnline_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerOnline_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncPlayerTeamData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncPlayerTeamData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResetPlayerTeamData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResetPlayerTeamData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncPlayerGuildData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncPlayerGuildData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2SAddMailToPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2SAddMailToPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* G2SCodeCheckDone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  G2SCodeCheckDone_reflection_ = NULL;
const ::google::protobuf::Descriptor* G2SCommonMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  G2SCommonMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_G2SMessage_2eproto() {
  protobuf_AddDesc_G2SMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "G2SMessage.proto");
  GOOGLE_CHECK(file != NULL);
  CacheAllNotify_descriptor_ = file->message_type(0);
  static const int CacheAllNotify_offsets_[1] = {
  };
  CacheAllNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CacheAllNotify_descriptor_,
      CacheAllNotify::default_instance_,
      CacheAllNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheAllNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheAllNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CacheAllNotify));
  NewDayNotify_descriptor_ = file->message_type(1);
  static const int NewDayNotify_offsets_[1] = {
  };
  NewDayNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewDayNotify_descriptor_,
      NewDayNotify::default_instance_,
      NewDayNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDayNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDayNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewDayNotify));
  NewWeekNotify_descriptor_ = file->message_type(2);
  static const int NewWeekNotify_offsets_[1] = {
  };
  NewWeekNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewWeekNotify_descriptor_,
      NewWeekNotify::default_instance_,
      NewWeekNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWeekNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWeekNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewWeekNotify));
  XLuaRegNotify_descriptor_ = file->message_type(3);
  static const int XLuaRegNotify_offsets_[1] = {
  };
  XLuaRegNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      XLuaRegNotify_descriptor_,
      XLuaRegNotify::default_instance_,
      XLuaRegNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XLuaRegNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XLuaRegNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(XLuaRegNotify));
  LuaLoadNotify_descriptor_ = file->message_type(4);
  static const int LuaLoadNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuaLoadNotify, ids_),
  };
  LuaLoadNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LuaLoadNotify_descriptor_,
      LuaLoadNotify::default_instance_,
      LuaLoadNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuaLoadNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuaLoadNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LuaLoadNotify));
  PlayerOnline_descriptor_ = file->message_type(5);
  static const int PlayerOnline_offsets_[1] = {
  };
  PlayerOnline_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerOnline_descriptor_,
      PlayerOnline::default_instance_,
      PlayerOnline_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerOnline, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerOnline, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerOnline));
  SyncPlayerTeamData_descriptor_ = file->message_type(6);
  static const int SyncPlayerTeamData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncPlayerTeamData, team_),
  };
  SyncPlayerTeamData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncPlayerTeamData_descriptor_,
      SyncPlayerTeamData::default_instance_,
      SyncPlayerTeamData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncPlayerTeamData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncPlayerTeamData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncPlayerTeamData));
  ResetPlayerTeamData_descriptor_ = file->message_type(7);
  static const int ResetPlayerTeamData_offsets_[1] = {
  };
  ResetPlayerTeamData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResetPlayerTeamData_descriptor_,
      ResetPlayerTeamData::default_instance_,
      ResetPlayerTeamData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetPlayerTeamData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetPlayerTeamData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResetPlayerTeamData));
  SyncPlayerGuildData_descriptor_ = file->message_type(8);
  static const int SyncPlayerGuildData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncPlayerGuildData, guild_),
  };
  SyncPlayerGuildData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncPlayerGuildData_descriptor_,
      SyncPlayerGuildData::default_instance_,
      SyncPlayerGuildData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncPlayerGuildData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncPlayerGuildData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncPlayerGuildData));
  GS2SAddMailToPlayer_descriptor_ = file->message_type(9);
  static const int GS2SAddMailToPlayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2SAddMailToPlayer, mail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2SAddMailToPlayer, addtype_),
  };
  GS2SAddMailToPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2SAddMailToPlayer_descriptor_,
      GS2SAddMailToPlayer::default_instance_,
      GS2SAddMailToPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2SAddMailToPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2SAddMailToPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2SAddMailToPlayer));
  G2SCodeCheckDone_descriptor_ = file->message_type(10);
  static const int G2SCodeCheckDone_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(G2SCodeCheckDone, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(G2SCodeCheckDone, items_),
  };
  G2SCodeCheckDone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      G2SCodeCheckDone_descriptor_,
      G2SCodeCheckDone::default_instance_,
      G2SCodeCheckDone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(G2SCodeCheckDone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(G2SCodeCheckDone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(G2SCodeCheckDone));
  G2SCommonMessage_descriptor_ = file->message_type(11);
  static const int G2SCommonMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(G2SCommonMessage, request_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(G2SCommonMessage, int32_params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(G2SCommonMessage, int64_params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(G2SCommonMessage, string_params_),
  };
  G2SCommonMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      G2SCommonMessage_descriptor_,
      G2SCommonMessage::default_instance_,
      G2SCommonMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(G2SCommonMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(G2SCommonMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(G2SCommonMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_G2SMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CacheAllNotify_descriptor_, &CacheAllNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewDayNotify_descriptor_, &NewDayNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewWeekNotify_descriptor_, &NewWeekNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    XLuaRegNotify_descriptor_, &XLuaRegNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LuaLoadNotify_descriptor_, &LuaLoadNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerOnline_descriptor_, &PlayerOnline::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncPlayerTeamData_descriptor_, &SyncPlayerTeamData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResetPlayerTeamData_descriptor_, &ResetPlayerTeamData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncPlayerGuildData_descriptor_, &SyncPlayerGuildData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2SAddMailToPlayer_descriptor_, &GS2SAddMailToPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    G2SCodeCheckDone_descriptor_, &G2SCodeCheckDone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    G2SCommonMessage_descriptor_, &G2SCommonMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_G2SMessage_2eproto() {
  delete CacheAllNotify::default_instance_;
  delete CacheAllNotify_reflection_;
  delete NewDayNotify::default_instance_;
  delete NewDayNotify_reflection_;
  delete NewWeekNotify::default_instance_;
  delete NewWeekNotify_reflection_;
  delete XLuaRegNotify::default_instance_;
  delete XLuaRegNotify_reflection_;
  delete LuaLoadNotify::default_instance_;
  delete LuaLoadNotify_reflection_;
  delete PlayerOnline::default_instance_;
  delete PlayerOnline_reflection_;
  delete SyncPlayerTeamData::default_instance_;
  delete SyncPlayerTeamData_reflection_;
  delete ResetPlayerTeamData::default_instance_;
  delete ResetPlayerTeamData_reflection_;
  delete SyncPlayerGuildData::default_instance_;
  delete SyncPlayerGuildData_reflection_;
  delete GS2SAddMailToPlayer::default_instance_;
  delete GS2SAddMailToPlayer_reflection_;
  delete G2SCodeCheckDone::default_instance_;
  delete G2SCodeCheckDone_reflection_;
  delete G2SCommonMessage::default_instance_;
  delete G2SCommonMessage_reflection_;
}

void protobuf_AddDesc_G2SMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Packet::protobuf_AddDesc_AllPacketEnum_2eproto();
  ::Packet::protobuf_AddDesc_ClientMove_2eproto();
  ::Packet::protobuf_AddDesc_Guild_2eproto();
  ::Packet::protobuf_AddDesc_FriendMail_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020G2SMessage.proto\022\003G2S\032\023AllPacketEnum.p"
    "roto\032\020ClientMove.proto\032\013Guild.proto\032\020Fri"
    "endMail.proto\"\020\n\016CacheAllNotify\"\016\n\014NewDa"
    "yNotify\"\017\n\rNewWeekNotify\"\017\n\rXLuaRegNotif"
    "y\"\034\n\rLuaLoadNotify\022\013\n\003ids\030\001 \003(\005\"\016\n\014Playe"
    "rOnline\":\n\022SyncPlayerTeamData\022$\n\004team\030\001 "
    "\002(\0132\026.Packet.PlayerTeamData\"\025\n\023ResetPlay"
    "erTeamData\"A\n\023SyncPlayerGuildData\022*\n\005gui"
    "ld\030\001 \002(\0132\033.Packet.PlayerGuildUserData\"I\n"
    "\023GS2SAddMailToPlayer\022!\n\004mail\030\001 \002(\0132\023.Pac"
    "ket.MessageInfo\022\017\n\007addtype\030\002 \002(\005\"A\n\020G2SC"
    "odeCheckDone\022\013\n\003ret\030\001 \002(\005\022 \n\005items\030\002 \003(\013"
    "2\021.Packet.ItemCount\"k\n\020G2SCommonMessage\022"
    "\024\n\014request_name\030\001 \002(\t\022\024\n\014int32_params\030\002 "
    "\003(\005\022\024\n\014int64_params\030\003 \003(\006\022\025\n\rstring_para"
    "ms\030\004 \003(\t", 608);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "G2SMessage.proto", &protobuf_RegisterTypes);
  CacheAllNotify::default_instance_ = new CacheAllNotify();
  NewDayNotify::default_instance_ = new NewDayNotify();
  NewWeekNotify::default_instance_ = new NewWeekNotify();
  XLuaRegNotify::default_instance_ = new XLuaRegNotify();
  LuaLoadNotify::default_instance_ = new LuaLoadNotify();
  PlayerOnline::default_instance_ = new PlayerOnline();
  SyncPlayerTeamData::default_instance_ = new SyncPlayerTeamData();
  ResetPlayerTeamData::default_instance_ = new ResetPlayerTeamData();
  SyncPlayerGuildData::default_instance_ = new SyncPlayerGuildData();
  GS2SAddMailToPlayer::default_instance_ = new GS2SAddMailToPlayer();
  G2SCodeCheckDone::default_instance_ = new G2SCodeCheckDone();
  G2SCommonMessage::default_instance_ = new G2SCommonMessage();
  CacheAllNotify::default_instance_->InitAsDefaultInstance();
  NewDayNotify::default_instance_->InitAsDefaultInstance();
  NewWeekNotify::default_instance_->InitAsDefaultInstance();
  XLuaRegNotify::default_instance_->InitAsDefaultInstance();
  LuaLoadNotify::default_instance_->InitAsDefaultInstance();
  PlayerOnline::default_instance_->InitAsDefaultInstance();
  SyncPlayerTeamData::default_instance_->InitAsDefaultInstance();
  ResetPlayerTeamData::default_instance_->InitAsDefaultInstance();
  SyncPlayerGuildData::default_instance_->InitAsDefaultInstance();
  GS2SAddMailToPlayer::default_instance_->InitAsDefaultInstance();
  G2SCodeCheckDone::default_instance_->InitAsDefaultInstance();
  G2SCommonMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_G2SMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_G2SMessage_2eproto {
  StaticDescriptorInitializer_G2SMessage_2eproto() {
    protobuf_AddDesc_G2SMessage_2eproto();
  }
} static_descriptor_initializer_G2SMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CacheAllNotify::CacheAllNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CacheAllNotify::InitAsDefaultInstance() {
}

CacheAllNotify::CacheAllNotify(const CacheAllNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CacheAllNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CacheAllNotify::~CacheAllNotify() {
  SharedDtor();
}

void CacheAllNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CacheAllNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CacheAllNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CacheAllNotify_descriptor_;
}

const CacheAllNotify& CacheAllNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_G2SMessage_2eproto();
  return *default_instance_;
}

CacheAllNotify* CacheAllNotify::default_instance_ = NULL;

CacheAllNotify* CacheAllNotify::New() const {
  return new CacheAllNotify;
}

void CacheAllNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool CacheAllNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void CacheAllNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CacheAllNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CacheAllNotify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CacheAllNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CacheAllNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CacheAllNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void CacheAllNotify::MergeFrom(const CacheAllNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void CacheAllNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void CacheAllNotify::CopyFrom(const CacheAllNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool CacheAllNotify::IsInitialized() const {

  return true;
}

void CacheAllNotify::SetInitialized() {

  return;
}

void CacheAllNotify::Swap(CacheAllNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata CacheAllNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CacheAllNotify_descriptor_;
  metadata.reflection = CacheAllNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NewDayNotify::NewDayNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NewDayNotify::InitAsDefaultInstance() {
}

NewDayNotify::NewDayNotify(const NewDayNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NewDayNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewDayNotify::~NewDayNotify() {
  SharedDtor();
}

void NewDayNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewDayNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewDayNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewDayNotify_descriptor_;
}

const NewDayNotify& NewDayNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_G2SMessage_2eproto();
  return *default_instance_;
}

NewDayNotify* NewDayNotify::default_instance_ = NULL;

NewDayNotify* NewDayNotify::New() const {
  return new NewDayNotify;
}

void NewDayNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool NewDayNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void NewDayNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NewDayNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NewDayNotify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewDayNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewDayNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewDayNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void NewDayNotify::MergeFrom(const NewDayNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void NewDayNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void NewDayNotify::CopyFrom(const NewDayNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool NewDayNotify::IsInitialized() const {

  return true;
}

void NewDayNotify::SetInitialized() {

  return;
}

void NewDayNotify::Swap(NewDayNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata NewDayNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewDayNotify_descriptor_;
  metadata.reflection = NewDayNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NewWeekNotify::NewWeekNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NewWeekNotify::InitAsDefaultInstance() {
}

NewWeekNotify::NewWeekNotify(const NewWeekNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NewWeekNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewWeekNotify::~NewWeekNotify() {
  SharedDtor();
}

void NewWeekNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewWeekNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewWeekNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewWeekNotify_descriptor_;
}

const NewWeekNotify& NewWeekNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_G2SMessage_2eproto();
  return *default_instance_;
}

NewWeekNotify* NewWeekNotify::default_instance_ = NULL;

NewWeekNotify* NewWeekNotify::New() const {
  return new NewWeekNotify;
}

void NewWeekNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool NewWeekNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void NewWeekNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NewWeekNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NewWeekNotify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewWeekNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewWeekNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewWeekNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void NewWeekNotify::MergeFrom(const NewWeekNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void NewWeekNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void NewWeekNotify::CopyFrom(const NewWeekNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool NewWeekNotify::IsInitialized() const {

  return true;
}

void NewWeekNotify::SetInitialized() {

  return;
}

void NewWeekNotify::Swap(NewWeekNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata NewWeekNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewWeekNotify_descriptor_;
  metadata.reflection = NewWeekNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

XLuaRegNotify::XLuaRegNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void XLuaRegNotify::InitAsDefaultInstance() {
}

XLuaRegNotify::XLuaRegNotify(const XLuaRegNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void XLuaRegNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

XLuaRegNotify::~XLuaRegNotify() {
  SharedDtor();
}

void XLuaRegNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void XLuaRegNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XLuaRegNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XLuaRegNotify_descriptor_;
}

const XLuaRegNotify& XLuaRegNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_G2SMessage_2eproto();
  return *default_instance_;
}

XLuaRegNotify* XLuaRegNotify::default_instance_ = NULL;

XLuaRegNotify* XLuaRegNotify::New() const {
  return new XLuaRegNotify;
}

void XLuaRegNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool XLuaRegNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void XLuaRegNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* XLuaRegNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int XLuaRegNotify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XLuaRegNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const XLuaRegNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const XLuaRegNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void XLuaRegNotify::MergeFrom(const XLuaRegNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void XLuaRegNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void XLuaRegNotify::CopyFrom(const XLuaRegNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool XLuaRegNotify::IsInitialized() const {

  return true;
}

void XLuaRegNotify::SetInitialized() {

  return;
}

void XLuaRegNotify::Swap(XLuaRegNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata XLuaRegNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = XLuaRegNotify_descriptor_;
  metadata.reflection = XLuaRegNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LuaLoadNotify::kIdsFieldNumber;
#endif  // !_MSC_VER

LuaLoadNotify::LuaLoadNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LuaLoadNotify::InitAsDefaultInstance() {
}

LuaLoadNotify::LuaLoadNotify(const LuaLoadNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LuaLoadNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LuaLoadNotify::~LuaLoadNotify() {
  SharedDtor();
}

void LuaLoadNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LuaLoadNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LuaLoadNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LuaLoadNotify_descriptor_;
}

const LuaLoadNotify& LuaLoadNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_G2SMessage_2eproto();
  return *default_instance_;
}

LuaLoadNotify* LuaLoadNotify::default_instance_ = NULL;

LuaLoadNotify* LuaLoadNotify::New() const {
  return new LuaLoadNotify;
}

void LuaLoadNotify::Clear() {
  ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool LuaLoadNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void LuaLoadNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LuaLoadNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LuaLoadNotify::ByteSize() const {
  int total_size = 0;

  // repeated int32 ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ids(i));
    }
    total_size += 1 * this->ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LuaLoadNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LuaLoadNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LuaLoadNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void LuaLoadNotify::MergeFrom(const LuaLoadNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  ids_.MergeFrom(from.ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void LuaLoadNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void LuaLoadNotify::CopyFrom(const LuaLoadNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool LuaLoadNotify::IsInitialized() const {

  return true;
}

void LuaLoadNotify::SetInitialized() {

  return;
}

void LuaLoadNotify::Swap(LuaLoadNotify* other) {
  if (other != this) {
    ids_.Swap(&other->ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata LuaLoadNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LuaLoadNotify_descriptor_;
  metadata.reflection = LuaLoadNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PlayerOnline::PlayerOnline()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerOnline::InitAsDefaultInstance() {
}

PlayerOnline::PlayerOnline(const PlayerOnline& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerOnline::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerOnline::~PlayerOnline() {
  SharedDtor();
}

void PlayerOnline::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerOnline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerOnline::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerOnline_descriptor_;
}

const PlayerOnline& PlayerOnline::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_G2SMessage_2eproto();
  return *default_instance_;
}

PlayerOnline* PlayerOnline::default_instance_ = NULL;

PlayerOnline* PlayerOnline::New() const {
  return new PlayerOnline;
}

void PlayerOnline::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerOnline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerOnline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerOnline::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerOnline::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerOnline::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerOnline* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerOnline*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerOnline::MergeFrom(const PlayerOnline& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerOnline::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerOnline::CopyFrom(const PlayerOnline& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerOnline::IsInitialized() const {

  return true;
}

void PlayerOnline::SetInitialized() {

  return;
}

void PlayerOnline::Swap(PlayerOnline* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerOnline::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerOnline_descriptor_;
  metadata.reflection = PlayerOnline_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncPlayerTeamData::kTeamFieldNumber;
#endif  // !_MSC_VER

SyncPlayerTeamData::SyncPlayerTeamData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncPlayerTeamData::InitAsDefaultInstance() {
  team_ = const_cast< ::Packet::PlayerTeamData*>(&::Packet::PlayerTeamData::default_instance());
}

SyncPlayerTeamData::SyncPlayerTeamData(const SyncPlayerTeamData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncPlayerTeamData::SharedCtor() {
  _cached_size_ = 0;
  team_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncPlayerTeamData::~SyncPlayerTeamData() {
  SharedDtor();
}

void SyncPlayerTeamData::SharedDtor() {
  if (this != default_instance_) {
    delete team_;
  }
}

void SyncPlayerTeamData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncPlayerTeamData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncPlayerTeamData_descriptor_;
}

const SyncPlayerTeamData& SyncPlayerTeamData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_G2SMessage_2eproto();
  return *default_instance_;
}

SyncPlayerTeamData* SyncPlayerTeamData::default_instance_ = NULL;

SyncPlayerTeamData* SyncPlayerTeamData::New() const {
  return new SyncPlayerTeamData;
}

void SyncPlayerTeamData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_team()) {
      if (team_ != NULL) team_->::Packet::PlayerTeamData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SyncPlayerTeamData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.PlayerTeamData team = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SyncPlayerTeamData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.PlayerTeamData team = 1;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncPlayerTeamData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.PlayerTeamData team = 1;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncPlayerTeamData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.PlayerTeamData team = 1;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncPlayerTeamData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncPlayerTeamData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncPlayerTeamData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SyncPlayerTeamData::MergeFrom(const SyncPlayerTeamData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team()) {
      mutable_team()->::Packet::PlayerTeamData::MergeFrom(from.team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SyncPlayerTeamData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SyncPlayerTeamData::CopyFrom(const SyncPlayerTeamData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SyncPlayerTeamData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_team()) {
    if (!this->team().IsInitialized()) return false;
  }
  return true;
}

void SyncPlayerTeamData::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  if (has_team()) {
    this->mutable_team()->SetInitialized();
  }
  return;
}

void SyncPlayerTeamData::Swap(SyncPlayerTeamData* other) {
  if (other != this) {
    std::swap(team_, other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SyncPlayerTeamData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncPlayerTeamData_descriptor_;
  metadata.reflection = SyncPlayerTeamData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ResetPlayerTeamData::ResetPlayerTeamData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResetPlayerTeamData::InitAsDefaultInstance() {
}

ResetPlayerTeamData::ResetPlayerTeamData(const ResetPlayerTeamData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResetPlayerTeamData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResetPlayerTeamData::~ResetPlayerTeamData() {
  SharedDtor();
}

void ResetPlayerTeamData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResetPlayerTeamData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetPlayerTeamData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResetPlayerTeamData_descriptor_;
}

const ResetPlayerTeamData& ResetPlayerTeamData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_G2SMessage_2eproto();
  return *default_instance_;
}

ResetPlayerTeamData* ResetPlayerTeamData::default_instance_ = NULL;

ResetPlayerTeamData* ResetPlayerTeamData::New() const {
  return new ResetPlayerTeamData;
}

void ResetPlayerTeamData::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ResetPlayerTeamData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void ResetPlayerTeamData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResetPlayerTeamData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResetPlayerTeamData::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetPlayerTeamData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResetPlayerTeamData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResetPlayerTeamData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ResetPlayerTeamData::MergeFrom(const ResetPlayerTeamData& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ResetPlayerTeamData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ResetPlayerTeamData::CopyFrom(const ResetPlayerTeamData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ResetPlayerTeamData::IsInitialized() const {

  return true;
}

void ResetPlayerTeamData::SetInitialized() {

  return;
}

void ResetPlayerTeamData::Swap(ResetPlayerTeamData* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ResetPlayerTeamData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResetPlayerTeamData_descriptor_;
  metadata.reflection = ResetPlayerTeamData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncPlayerGuildData::kGuildFieldNumber;
#endif  // !_MSC_VER

SyncPlayerGuildData::SyncPlayerGuildData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncPlayerGuildData::InitAsDefaultInstance() {
  guild_ = const_cast< ::Packet::PlayerGuildUserData*>(&::Packet::PlayerGuildUserData::default_instance());
}

SyncPlayerGuildData::SyncPlayerGuildData(const SyncPlayerGuildData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncPlayerGuildData::SharedCtor() {
  _cached_size_ = 0;
  guild_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncPlayerGuildData::~SyncPlayerGuildData() {
  SharedDtor();
}

void SyncPlayerGuildData::SharedDtor() {
  if (this != default_instance_) {
    delete guild_;
  }
}

void SyncPlayerGuildData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncPlayerGuildData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncPlayerGuildData_descriptor_;
}

const SyncPlayerGuildData& SyncPlayerGuildData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_G2SMessage_2eproto();
  return *default_instance_;
}

SyncPlayerGuildData* SyncPlayerGuildData::default_instance_ = NULL;

SyncPlayerGuildData* SyncPlayerGuildData::New() const {
  return new SyncPlayerGuildData;
}

void SyncPlayerGuildData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guild()) {
      if (guild_ != NULL) guild_->::Packet::PlayerGuildUserData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SyncPlayerGuildData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.PlayerGuildUserData guild = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guild()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SyncPlayerGuildData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.PlayerGuildUserData guild = 1;
  if (has_guild()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guild(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncPlayerGuildData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.PlayerGuildUserData guild = 1;
  if (has_guild()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guild(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncPlayerGuildData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.PlayerGuildUserData guild = 1;
    if (has_guild()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guild());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncPlayerGuildData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncPlayerGuildData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncPlayerGuildData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SyncPlayerGuildData::MergeFrom(const SyncPlayerGuildData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild()) {
      mutable_guild()->::Packet::PlayerGuildUserData::MergeFrom(from.guild());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SyncPlayerGuildData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SyncPlayerGuildData::CopyFrom(const SyncPlayerGuildData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SyncPlayerGuildData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_guild()) {
    if (!this->guild().IsInitialized()) return false;
  }
  return true;
}

void SyncPlayerGuildData::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  if (has_guild()) {
    this->mutable_guild()->SetInitialized();
  }
  return;
}

void SyncPlayerGuildData::Swap(SyncPlayerGuildData* other) {
  if (other != this) {
    std::swap(guild_, other->guild_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SyncPlayerGuildData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncPlayerGuildData_descriptor_;
  metadata.reflection = SyncPlayerGuildData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2SAddMailToPlayer::kMailFieldNumber;
const int GS2SAddMailToPlayer::kAddtypeFieldNumber;
#endif  // !_MSC_VER

GS2SAddMailToPlayer::GS2SAddMailToPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2SAddMailToPlayer::InitAsDefaultInstance() {
  mail_ = const_cast< ::Packet::MessageInfo*>(&::Packet::MessageInfo::default_instance());
}

GS2SAddMailToPlayer::GS2SAddMailToPlayer(const GS2SAddMailToPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2SAddMailToPlayer::SharedCtor() {
  _cached_size_ = 0;
  mail_ = NULL;
  addtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2SAddMailToPlayer::~GS2SAddMailToPlayer() {
  SharedDtor();
}

void GS2SAddMailToPlayer::SharedDtor() {
  if (this != default_instance_) {
    delete mail_;
  }
}

void GS2SAddMailToPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2SAddMailToPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2SAddMailToPlayer_descriptor_;
}

const GS2SAddMailToPlayer& GS2SAddMailToPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_G2SMessage_2eproto();
  return *default_instance_;
}

GS2SAddMailToPlayer* GS2SAddMailToPlayer::default_instance_ = NULL;

GS2SAddMailToPlayer* GS2SAddMailToPlayer::New() const {
  return new GS2SAddMailToPlayer;
}

void GS2SAddMailToPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mail()) {
      if (mail_ != NULL) mail_->::Packet::MessageInfo::Clear();
    }
    addtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GS2SAddMailToPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.MessageInfo mail = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_addtype;
        break;
      }

      // required int32 addtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addtype_)));
          set_has_addtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GS2SAddMailToPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.MessageInfo mail = 1;
  if (has_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mail(), output);
  }

  // required int32 addtype = 2;
  if (has_addtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->addtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2SAddMailToPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.MessageInfo mail = 1;
  if (has_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mail(), target);
  }

  // required int32 addtype = 2;
  if (has_addtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->addtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2SAddMailToPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.MessageInfo mail = 1;
    if (has_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mail());
    }

    // required int32 addtype = 2;
    if (has_addtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2SAddMailToPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2SAddMailToPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2SAddMailToPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GS2SAddMailToPlayer::MergeFrom(const GS2SAddMailToPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail()) {
      mutable_mail()->::Packet::MessageInfo::MergeFrom(from.mail());
    }
    if (from.has_addtype()) {
      set_addtype(from.addtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GS2SAddMailToPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GS2SAddMailToPlayer::CopyFrom(const GS2SAddMailToPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GS2SAddMailToPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_mail()) {
    if (!this->mail().IsInitialized()) return false;
  }
  return true;
}

void GS2SAddMailToPlayer::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  if (has_mail()) {
    this->mutable_mail()->SetInitialized();
  }
  return;
}

void GS2SAddMailToPlayer::Swap(GS2SAddMailToPlayer* other) {
  if (other != this) {
    std::swap(mail_, other->mail_);
    std::swap(addtype_, other->addtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GS2SAddMailToPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2SAddMailToPlayer_descriptor_;
  metadata.reflection = GS2SAddMailToPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int G2SCodeCheckDone::kRetFieldNumber;
const int G2SCodeCheckDone::kItemsFieldNumber;
#endif  // !_MSC_VER

G2SCodeCheckDone::G2SCodeCheckDone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void G2SCodeCheckDone::InitAsDefaultInstance() {
}

G2SCodeCheckDone::G2SCodeCheckDone(const G2SCodeCheckDone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void G2SCodeCheckDone::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

G2SCodeCheckDone::~G2SCodeCheckDone() {
  SharedDtor();
}

void G2SCodeCheckDone::SharedDtor() {
  if (this != default_instance_) {
  }
}

void G2SCodeCheckDone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* G2SCodeCheckDone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return G2SCodeCheckDone_descriptor_;
}

const G2SCodeCheckDone& G2SCodeCheckDone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_G2SMessage_2eproto();
  return *default_instance_;
}

G2SCodeCheckDone* G2SCodeCheckDone::default_instance_ = NULL;

G2SCodeCheckDone* G2SCodeCheckDone::New() const {
  return new G2SCodeCheckDone;
}

void G2SCodeCheckDone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool G2SCodeCheckDone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .Packet.ItemCount items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void G2SCodeCheckDone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // repeated .Packet.ItemCount items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* G2SCodeCheckDone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // repeated .Packet.ItemCount items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int G2SCodeCheckDone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated .Packet.ItemCount items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void G2SCodeCheckDone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const G2SCodeCheckDone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const G2SCodeCheckDone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void G2SCodeCheckDone::MergeFrom(const G2SCodeCheckDone& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void G2SCodeCheckDone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void G2SCodeCheckDone::CopyFrom(const G2SCodeCheckDone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool G2SCodeCheckDone::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void G2SCodeCheckDone::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  for (int i = 0; i < items_size(); i++) {
    this->mutable_items(i)->SetInitialized();
  }
  return;
}

void G2SCodeCheckDone::Swap(G2SCodeCheckDone* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata G2SCodeCheckDone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = G2SCodeCheckDone_descriptor_;
  metadata.reflection = G2SCodeCheckDone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int G2SCommonMessage::kRequestNameFieldNumber;
const int G2SCommonMessage::kInt32ParamsFieldNumber;
const int G2SCommonMessage::kInt64ParamsFieldNumber;
const int G2SCommonMessage::kStringParamsFieldNumber;
#endif  // !_MSC_VER

G2SCommonMessage::G2SCommonMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void G2SCommonMessage::InitAsDefaultInstance() {
}

G2SCommonMessage::G2SCommonMessage(const G2SCommonMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void G2SCommonMessage::SharedCtor() {
  _cached_size_ = 0;
  request_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

G2SCommonMessage::~G2SCommonMessage() {
  SharedDtor();
}

void G2SCommonMessage::SharedDtor() {
  if (request_name_ != &::google::protobuf::internal::kEmptyString) {
    delete request_name_;
  }
  if (this != default_instance_) {
  }
}

void G2SCommonMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* G2SCommonMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return G2SCommonMessage_descriptor_;
}

const G2SCommonMessage& G2SCommonMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_G2SMessage_2eproto();
  return *default_instance_;
}

G2SCommonMessage* G2SCommonMessage::default_instance_ = NULL;

G2SCommonMessage* G2SCommonMessage::New() const {
  return new G2SCommonMessage;
}

void G2SCommonMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request_name()) {
      if (request_name_ != &::google::protobuf::internal::kEmptyString) {
        request_name_->clear();
      }
    }
  }
  int32_params_.Clear();
  int64_params_.Clear();
  string_params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool G2SCommonMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string request_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->request_name().data(), this->request_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_int32_params;
        break;
      }

      // repeated int32 int32_params = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int32_params:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_int32_params())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_int32_params())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_int32_params;
        if (input->ExpectTag(25)) goto parse_int64_params;
        break;
      }

      // repeated fixed64 int64_params = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_int64_params:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 25, input, this->mutable_int64_params())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_int64_params())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_int64_params;
        if (input->ExpectTag(34)) goto parse_string_params;
        break;
      }

      // repeated string string_params = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_string_params()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->string_params(this->string_params_size() - 1).data(),
            this->string_params(this->string_params_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_string_params;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void G2SCommonMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string request_name = 1;
  if (has_request_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_name().data(), this->request_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->request_name(), output);
  }

  // repeated int32 int32_params = 2;
  for (int i = 0; i < this->int32_params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->int32_params(i), output);
  }

  // repeated fixed64 int64_params = 3;
  for (int i = 0; i < this->int64_params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      3, this->int64_params(i), output);
  }

  // repeated string string_params = 4;
  for (int i = 0; i < this->string_params_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->string_params(i).data(), this->string_params(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->string_params(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* G2SCommonMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string request_name = 1;
  if (has_request_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_name().data(), this->request_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_name(), target);
  }

  // repeated int32 int32_params = 2;
  for (int i = 0; i < this->int32_params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->int32_params(i), target);
  }

  // repeated fixed64 int64_params = 3;
  for (int i = 0; i < this->int64_params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(3, this->int64_params(i), target);
  }

  // repeated string string_params = 4;
  for (int i = 0; i < this->string_params_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_params(i).data(), this->string_params(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->string_params(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int G2SCommonMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string request_name = 1;
    if (has_request_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_name());
    }

  }
  // repeated int32 int32_params = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->int32_params_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->int32_params(i));
    }
    total_size += 1 * this->int32_params_size() + data_size;
  }

  // repeated fixed64 int64_params = 3;
  {
    int data_size = 0;
    data_size = 8 * this->int64_params_size();
    total_size += 1 * this->int64_params_size() + data_size;
  }

  // repeated string string_params = 4;
  total_size += 1 * this->string_params_size();
  for (int i = 0; i < this->string_params_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->string_params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void G2SCommonMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const G2SCommonMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const G2SCommonMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void G2SCommonMessage::MergeFrom(const G2SCommonMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  int32_params_.MergeFrom(from.int32_params_);
  int64_params_.MergeFrom(from.int64_params_);
  string_params_.MergeFrom(from.string_params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_name()) {
      set_request_name(from.request_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void G2SCommonMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void G2SCommonMessage::CopyFrom(const G2SCommonMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool G2SCommonMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void G2SCommonMessage::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void G2SCommonMessage::Swap(G2SCommonMessage* other) {
  if (other != this) {
    std::swap(request_name_, other->request_name_);
    int32_params_.Swap(&other->int32_params_);
    int64_params_.Swap(&other->int64_params_);
    string_params_.Swap(&other->string_params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata G2SCommonMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = G2SCommonMessage_descriptor_;
  metadata.reflection = G2SCommonMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace G2S

// @@protoc_insertion_point(global_scope)
