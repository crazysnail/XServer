// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SceneConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Config {

namespace {

const ::google::protobuf::Descriptor* Scene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Scene_reflection_ = NULL;
const ::google::protobuf::Descriptor* SceneBattleGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneBattleGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* SceneStage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneStage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SceneConfig_2eproto() {
  protobuf_AddDesc_SceneConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SceneConfig.proto");
  GOOGLE_CHECK(file != NULL);
  Scene_descriptor_ = file->message_type(0);
  static const int Scene_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, scene_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, areas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, spawn_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, battle_groups_),
  };
  Scene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Scene_descriptor_,
      Scene::default_instance_,
      Scene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Scene));
  SceneBattleGroup_descriptor_ = file->message_type(1);
  static const int SceneBattleGroup_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneBattleGroup, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneBattleGroup, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneBattleGroup, area_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneBattleGroup, player_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneBattleGroup, enemy_pos_),
  };
  SceneBattleGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SceneBattleGroup_descriptor_,
      SceneBattleGroup::default_instance_,
      SceneBattleGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneBattleGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneBattleGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SceneBattleGroup));
  SceneStage_descriptor_ = file->message_type(2);
  static const int SceneStage_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStage, min_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStage, pre_stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStage, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStage, refresh_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStage, raid_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStage, rush_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStage, monster_group_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStage, boss_group_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStage, guard_id_),
  };
  SceneStage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SceneStage_descriptor_,
      SceneStage::default_instance_,
      SceneStage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneStage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SceneStage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SceneConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Scene_descriptor_, &Scene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SceneBattleGroup_descriptor_, &SceneBattleGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SceneStage_descriptor_, &SceneStage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SceneConfig_2eproto() {
  delete Scene::default_instance_;
  delete Scene_reflection_;
  delete SceneBattleGroup::default_instance_;
  delete SceneBattleGroup_reflection_;
  delete SceneStage::default_instance_;
  delete SceneStage_reflection_;
}

void protobuf_AddDesc_SceneConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Packet::protobuf_AddDesc_Base_2eproto();
  ::Packet::protobuf_AddDesc_ProtoBufOption_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021SceneConfig.proto\022\006Config\032\nBase.proto\032"
    "\024ProtoBufOption.proto\"\252\001\n\005Scene\022\n\n\002id\030\001 "
    "\002(\005\022\022\n\nscene_name\030\002 \002(\t\022%\n\005areas\030\003 \003(\0132\020"
    ".Packet.PositionB\004\300\363\030\004\022)\n\tspawn_pos\030\004 \003("
    "\0132\020.Packet.PositionB\004\300\363\030\005\022/\n\rbattle_grou"
    "ps\030\005 \003(\0132\030.Config.SceneBattleGroup\"\256\001\n\020S"
    "ceneBattleGroup\022\n\n\002id\030\001 \002(\005\022\r\n\005index\030\002 \002"
    "(\005\022(\n\010area_pos\030\003 \003(\0132\020.Packet.PositionB\004"
    "\300\363\030\004\022*\n\nplayer_pos\030\004 \003(\0132\020.Packet.Positi"
    "onB\004\300\363\030\017\022)\n\tenemy_pos\030\005 \003(\0132\020.Packet.Pos"
    "itionB\004\300\363\030\017\"\323\001\n\nSceneStage\022\n\n\002id\030\001 \002(\005\022\021"
    "\n\tmin_level\030\002 \002(\005\022\021\n\tpre_stage\030\003 \002(\005\022\020\n\010"
    "scene_id\030\004 \002(\005\022\024\n\014refresh_time\030\005 \002(\005\022\022\n\n"
    "raid_count\030\006 \002(\005\022\022\n\nrush_count\030\007 \002(\005\022\031\n\021"
    "monster_group_ids\030\010 \003(\005\022\026\n\016boss_group_id"
    "s\030\t \003(\005\022\020\n\010guard_id\030\n \002(\005", 625);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SceneConfig.proto", &protobuf_RegisterTypes);
  Scene::default_instance_ = new Scene();
  SceneBattleGroup::default_instance_ = new SceneBattleGroup();
  SceneStage::default_instance_ = new SceneStage();
  Scene::default_instance_->InitAsDefaultInstance();
  SceneBattleGroup::default_instance_->InitAsDefaultInstance();
  SceneStage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SceneConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SceneConfig_2eproto {
  StaticDescriptorInitializer_SceneConfig_2eproto() {
    protobuf_AddDesc_SceneConfig_2eproto();
  }
} static_descriptor_initializer_SceneConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Scene::kIdFieldNumber;
const int Scene::kSceneNameFieldNumber;
const int Scene::kAreasFieldNumber;
const int Scene::kSpawnPosFieldNumber;
const int Scene::kBattleGroupsFieldNumber;
#endif  // !_MSC_VER

Scene::Scene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Scene::InitAsDefaultInstance() {
}

Scene::Scene(const Scene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Scene::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  scene_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Scene::~Scene() {
  SharedDtor();
}

void Scene::SharedDtor() {
  if (scene_name_ != &::google::protobuf::internal::kEmptyString) {
    delete scene_name_;
  }
  if (this != default_instance_) {
  }
}

void Scene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Scene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Scene_descriptor_;
}

const Scene& Scene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneConfig_2eproto();
  return *default_instance_;
}

Scene* Scene::default_instance_ = NULL;

Scene* Scene::New() const {
  return new Scene;
}

void Scene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_scene_name()) {
      if (scene_name_ != &::google::protobuf::internal::kEmptyString) {
        scene_name_->clear();
      }
    }
  }
  areas_.Clear();
  spawn_pos_.Clear();
  battle_groups_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool Scene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_scene_name;
        break;
      }

      // required string scene_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scene_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scene_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scene_name().data(), this->scene_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_areas;
        break;
      }

      // repeated .Packet.Position areas = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_areas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_areas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_areas;
        if (input->ExpectTag(34)) goto parse_spawn_pos;
        break;
      }

      // repeated .Packet.Position spawn_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spawn_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spawn_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_spawn_pos;
        if (input->ExpectTag(42)) goto parse_battle_groups;
        break;
      }

      // repeated .Config.SceneBattleGroup battle_groups = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battle_groups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_battle_groups;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void Scene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string scene_name = 2;
  if (has_scene_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scene_name().data(), this->scene_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->scene_name(), output);
  }

  // repeated .Packet.Position areas = 3;
  for (int i = 0; i < this->areas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->areas(i), output);
  }

  // repeated .Packet.Position spawn_pos = 4;
  for (int i = 0; i < this->spawn_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->spawn_pos(i), output);
  }

  // repeated .Config.SceneBattleGroup battle_groups = 5;
  for (int i = 0; i < this->battle_groups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->battle_groups(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Scene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string scene_name = 2;
  if (has_scene_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scene_name().data(), this->scene_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->scene_name(), target);
  }

  // repeated .Packet.Position areas = 3;
  for (int i = 0; i < this->areas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->areas(i), target);
  }

  // repeated .Packet.Position spawn_pos = 4;
  for (int i = 0; i < this->spawn_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->spawn_pos(i), target);
  }

  // repeated .Config.SceneBattleGroup battle_groups = 5;
  for (int i = 0; i < this->battle_groups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->battle_groups(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Scene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string scene_name = 2;
    if (has_scene_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scene_name());
    }

  }
  // repeated .Packet.Position areas = 3;
  total_size += 1 * this->areas_size();
  for (int i = 0; i < this->areas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->areas(i));
  }

  // repeated .Packet.Position spawn_pos = 4;
  total_size += 1 * this->spawn_pos_size();
  for (int i = 0; i < this->spawn_pos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spawn_pos(i));
  }

  // repeated .Config.SceneBattleGroup battle_groups = 5;
  total_size += 1 * this->battle_groups_size();
  for (int i = 0; i < this->battle_groups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battle_groups(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Scene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Scene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Scene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void Scene::MergeFrom(const Scene& from) {
  GOOGLE_CHECK_NE(&from, this);
  areas_.MergeFrom(from.areas_);
  spawn_pos_.MergeFrom(from.spawn_pos_);
  battle_groups_.MergeFrom(from.battle_groups_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_scene_name()) {
      set_scene_name(from.scene_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void Scene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void Scene::CopyFrom(const Scene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool Scene::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < areas_size(); i++) {
    if (!this->areas(i).IsInitialized()) return false;
  }
  for (int i = 0; i < spawn_pos_size(); i++) {
    if (!this->spawn_pos(i).IsInitialized()) return false;
  }
  for (int i = 0; i < battle_groups_size(); i++) {
    if (!this->battle_groups(i).IsInitialized()) return false;
  }
  return true;
}

void Scene::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  for (int i = 0; i < areas_size(); i++) {
    this->mutable_areas(i)->SetInitialized();
  }
  for (int i = 0; i < spawn_pos_size(); i++) {
    this->mutable_spawn_pos(i)->SetInitialized();
  }
  for (int i = 0; i < battle_groups_size(); i++) {
    this->mutable_battle_groups(i)->SetInitialized();
  }
  return;
}

void Scene::Swap(Scene* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(scene_name_, other->scene_name_);
    areas_.Swap(&other->areas_);
    spawn_pos_.Swap(&other->spawn_pos_);
    battle_groups_.Swap(&other->battle_groups_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata Scene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Scene_descriptor_;
  metadata.reflection = Scene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SceneBattleGroup::kIdFieldNumber;
const int SceneBattleGroup::kIndexFieldNumber;
const int SceneBattleGroup::kAreaPosFieldNumber;
const int SceneBattleGroup::kPlayerPosFieldNumber;
const int SceneBattleGroup::kEnemyPosFieldNumber;
#endif  // !_MSC_VER

SceneBattleGroup::SceneBattleGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SceneBattleGroup::InitAsDefaultInstance() {
}

SceneBattleGroup::SceneBattleGroup(const SceneBattleGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SceneBattleGroup::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneBattleGroup::~SceneBattleGroup() {
  SharedDtor();
}

void SceneBattleGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SceneBattleGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneBattleGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneBattleGroup_descriptor_;
}

const SceneBattleGroup& SceneBattleGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneConfig_2eproto();
  return *default_instance_;
}

SceneBattleGroup* SceneBattleGroup::default_instance_ = NULL;

SceneBattleGroup* SceneBattleGroup::New() const {
  return new SceneBattleGroup;
}

void SceneBattleGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    index_ = 0;
  }
  area_pos_.Clear();
  player_pos_.Clear();
  enemy_pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SceneBattleGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_area_pos;
        break;
      }

      // repeated .Packet.Position area_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_area_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_area_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_area_pos;
        if (input->ExpectTag(34)) goto parse_player_pos;
        break;
      }

      // repeated .Packet.Position player_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_player_pos;
        if (input->ExpectTag(42)) goto parse_enemy_pos;
        break;
      }

      // repeated .Packet.Position enemy_pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enemy_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enemy_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_enemy_pos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SceneBattleGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // repeated .Packet.Position area_pos = 3;
  for (int i = 0; i < this->area_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->area_pos(i), output);
  }

  // repeated .Packet.Position player_pos = 4;
  for (int i = 0; i < this->player_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->player_pos(i), output);
  }

  // repeated .Packet.Position enemy_pos = 5;
  for (int i = 0; i < this->enemy_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->enemy_pos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SceneBattleGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // repeated .Packet.Position area_pos = 3;
  for (int i = 0; i < this->area_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->area_pos(i), target);
  }

  // repeated .Packet.Position player_pos = 4;
  for (int i = 0; i < this->player_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->player_pos(i), target);
  }

  // repeated .Packet.Position enemy_pos = 5;
  for (int i = 0; i < this->enemy_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->enemy_pos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SceneBattleGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  // repeated .Packet.Position area_pos = 3;
  total_size += 1 * this->area_pos_size();
  for (int i = 0; i < this->area_pos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->area_pos(i));
  }

  // repeated .Packet.Position player_pos = 4;
  total_size += 1 * this->player_pos_size();
  for (int i = 0; i < this->player_pos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_pos(i));
  }

  // repeated .Packet.Position enemy_pos = 5;
  total_size += 1 * this->enemy_pos_size();
  for (int i = 0; i < this->enemy_pos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enemy_pos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneBattleGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SceneBattleGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SceneBattleGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SceneBattleGroup::MergeFrom(const SceneBattleGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  area_pos_.MergeFrom(from.area_pos_);
  player_pos_.MergeFrom(from.player_pos_);
  enemy_pos_.MergeFrom(from.enemy_pos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SceneBattleGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SceneBattleGroup::CopyFrom(const SceneBattleGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SceneBattleGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < area_pos_size(); i++) {
    if (!this->area_pos(i).IsInitialized()) return false;
  }
  for (int i = 0; i < player_pos_size(); i++) {
    if (!this->player_pos(i).IsInitialized()) return false;
  }
  for (int i = 0; i < enemy_pos_size(); i++) {
    if (!this->enemy_pos(i).IsInitialized()) return false;
  }
  return true;
}

void SceneBattleGroup::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  for (int i = 0; i < area_pos_size(); i++) {
    this->mutable_area_pos(i)->SetInitialized();
  }
  for (int i = 0; i < player_pos_size(); i++) {
    this->mutable_player_pos(i)->SetInitialized();
  }
  for (int i = 0; i < enemy_pos_size(); i++) {
    this->mutable_enemy_pos(i)->SetInitialized();
  }
  return;
}

void SceneBattleGroup::Swap(SceneBattleGroup* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(index_, other->index_);
    area_pos_.Swap(&other->area_pos_);
    player_pos_.Swap(&other->player_pos_);
    enemy_pos_.Swap(&other->enemy_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SceneBattleGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneBattleGroup_descriptor_;
  metadata.reflection = SceneBattleGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SceneStage::kIdFieldNumber;
const int SceneStage::kMinLevelFieldNumber;
const int SceneStage::kPreStageFieldNumber;
const int SceneStage::kSceneIdFieldNumber;
const int SceneStage::kRefreshTimeFieldNumber;
const int SceneStage::kRaidCountFieldNumber;
const int SceneStage::kRushCountFieldNumber;
const int SceneStage::kMonsterGroupIdsFieldNumber;
const int SceneStage::kBossGroupIdsFieldNumber;
const int SceneStage::kGuardIdFieldNumber;
#endif  // !_MSC_VER

SceneStage::SceneStage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SceneStage::InitAsDefaultInstance() {
}

SceneStage::SceneStage(const SceneStage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SceneStage::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  min_level_ = 0;
  pre_stage_ = 0;
  scene_id_ = 0;
  refresh_time_ = 0;
  raid_count_ = 0;
  rush_count_ = 0;
  guard_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneStage::~SceneStage() {
  SharedDtor();
}

void SceneStage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SceneStage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneStage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneStage_descriptor_;
}

const SceneStage& SceneStage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneConfig_2eproto();
  return *default_instance_;
}

SceneStage* SceneStage::default_instance_ = NULL;

SceneStage* SceneStage::New() const {
  return new SceneStage;
}

void SceneStage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    min_level_ = 0;
    pre_stage_ = 0;
    scene_id_ = 0;
    refresh_time_ = 0;
    raid_count_ = 0;
    rush_count_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    guard_id_ = 0;
  }
  monster_group_ids_.Clear();
  boss_group_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SceneStage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_min_level;
        break;
      }

      // required int32 min_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_level_)));
          set_has_min_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pre_stage;
        break;
      }

      // required int32 pre_stage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pre_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pre_stage_)));
          set_has_pre_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scene_id;
        break;
      }

      // required int32 scene_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_refresh_time;
        break;
      }

      // required int32 refresh_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refresh_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refresh_time_)));
          set_has_refresh_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_raid_count;
        break;
      }

      // required int32 raid_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raid_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &raid_count_)));
          set_has_raid_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_rush_count;
        break;
      }

      // required int32 rush_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rush_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rush_count_)));
          set_has_rush_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_monster_group_ids;
        break;
      }

      // repeated int32 monster_group_ids = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_group_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_monster_group_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_monster_group_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_monster_group_ids;
        if (input->ExpectTag(72)) goto parse_boss_group_ids;
        break;
      }

      // repeated int32 boss_group_ids = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_group_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_boss_group_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_boss_group_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_boss_group_ids;
        if (input->ExpectTag(80)) goto parse_guard_id;
        break;
      }

      // required int32 guard_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guard_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guard_id_)));
          set_has_guard_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SceneStage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 min_level = 2;
  if (has_min_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->min_level(), output);
  }

  // required int32 pre_stage = 3;
  if (has_pre_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pre_stage(), output);
  }

  // required int32 scene_id = 4;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->scene_id(), output);
  }

  // required int32 refresh_time = 5;
  if (has_refresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->refresh_time(), output);
  }

  // required int32 raid_count = 6;
  if (has_raid_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->raid_count(), output);
  }

  // required int32 rush_count = 7;
  if (has_rush_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->rush_count(), output);
  }

  // repeated int32 monster_group_ids = 8;
  for (int i = 0; i < this->monster_group_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->monster_group_ids(i), output);
  }

  // repeated int32 boss_group_ids = 9;
  for (int i = 0; i < this->boss_group_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->boss_group_ids(i), output);
  }

  // required int32 guard_id = 10;
  if (has_guard_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->guard_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SceneStage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 min_level = 2;
  if (has_min_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->min_level(), target);
  }

  // required int32 pre_stage = 3;
  if (has_pre_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pre_stage(), target);
  }

  // required int32 scene_id = 4;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->scene_id(), target);
  }

  // required int32 refresh_time = 5;
  if (has_refresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->refresh_time(), target);
  }

  // required int32 raid_count = 6;
  if (has_raid_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->raid_count(), target);
  }

  // required int32 rush_count = 7;
  if (has_rush_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->rush_count(), target);
  }

  // repeated int32 monster_group_ids = 8;
  for (int i = 0; i < this->monster_group_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->monster_group_ids(i), target);
  }

  // repeated int32 boss_group_ids = 9;
  for (int i = 0; i < this->boss_group_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->boss_group_ids(i), target);
  }

  // required int32 guard_id = 10;
  if (has_guard_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->guard_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SceneStage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 min_level = 2;
    if (has_min_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_level());
    }

    // required int32 pre_stage = 3;
    if (has_pre_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pre_stage());
    }

    // required int32 scene_id = 4;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }

    // required int32 refresh_time = 5;
    if (has_refresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refresh_time());
    }

    // required int32 raid_count = 6;
    if (has_raid_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->raid_count());
    }

    // required int32 rush_count = 7;
    if (has_rush_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rush_count());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // required int32 guard_id = 10;
    if (has_guard_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guard_id());
    }

  }
  // repeated int32 monster_group_ids = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->monster_group_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->monster_group_ids(i));
    }
    total_size += 1 * this->monster_group_ids_size() + data_size;
  }

  // repeated int32 boss_group_ids = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->boss_group_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->boss_group_ids(i));
    }
    total_size += 1 * this->boss_group_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneStage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SceneStage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SceneStage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SceneStage::MergeFrom(const SceneStage& from) {
  GOOGLE_CHECK_NE(&from, this);
  monster_group_ids_.MergeFrom(from.monster_group_ids_);
  boss_group_ids_.MergeFrom(from.boss_group_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_min_level()) {
      set_min_level(from.min_level());
    }
    if (from.has_pre_stage()) {
      set_pre_stage(from.pre_stage());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_refresh_time()) {
      set_refresh_time(from.refresh_time());
    }
    if (from.has_raid_count()) {
      set_raid_count(from.raid_count());
    }
    if (from.has_rush_count()) {
      set_rush_count(from.rush_count());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_guard_id()) {
      set_guard_id(from.guard_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SceneStage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SceneStage::CopyFrom(const SceneStage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SceneStage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000027f) != 0x0000027f) return false;

  return true;
}

void SceneStage::SetInitialized() {
  _has_bits_[0] |= 0x0000027f;

  return;
}

void SceneStage::Swap(SceneStage* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(min_level_, other->min_level_);
    std::swap(pre_stage_, other->pre_stage_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(refresh_time_, other->refresh_time_);
    std::swap(raid_count_, other->raid_count_);
    std::swap(rush_count_, other->rush_count_);
    monster_group_ids_.Swap(&other->monster_group_ids_);
    boss_group_ids_.Swap(&other->boss_group_ids_);
    std::swap(guard_id_, other->guard_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SceneStage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneStage_descriptor_;
  metadata.reflection = SceneStage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config

// @@protoc_insertion_point(global_scope)
