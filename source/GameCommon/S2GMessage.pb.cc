// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: S2GMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "S2GMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace S2G {

namespace {

const ::google::protobuf::Descriptor* S2GCommonMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2GCommonMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveBattleReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveBattleReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamMemberChangeScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamMemberChangeScene_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamChat_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildChat_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldChat_reflection_ = NULL;
const ::google::protobuf::Descriptor* InsertScenePlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InsertScenePlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetOperateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetOperateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DestroyRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DestroyRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerAutoMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerAutoMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* EndGuildBoss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EndGuildBoss_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefreshTarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefreshTarget_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckOffLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckOffLine_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildBattleWeekRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildBattleWeekRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildBattleAllRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildBattleAllRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* XLuaRegNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  XLuaRegNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* LuaLoadNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LuaLoadNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerCaptureStatge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerCaptureStatge_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerHookDataUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerHookDataUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* HookStageDistributeUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HookStageDistributeUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerUpdateCaptureForm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerUpdateCaptureForm_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddGuildMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddGuildMoney_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_S2GMessage_2eproto() {
  protobuf_AddDesc_S2GMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "S2GMessage.proto");
  GOOGLE_CHECK(file != NULL);
  S2GCommonMessage_descriptor_ = file->message_type(0);
  static const int S2GCommonMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2GCommonMessage, request_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2GCommonMessage, int32_params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2GCommonMessage, int64_params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2GCommonMessage, string_params_),
  };
  S2GCommonMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2GCommonMessage_descriptor_,
      S2GCommonMessage::default_instance_,
      S2GCommonMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2GCommonMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2GCommonMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2GCommonMessage));
  SaveBattleReply_descriptor_ = file->message_type(1);
  static const int SaveBattleReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveBattleReply, reply_),
  };
  SaveBattleReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveBattleReply_descriptor_,
      SaveBattleReply::default_instance_,
      SaveBattleReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveBattleReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveBattleReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveBattleReply));
  TeamMemberChangeScene_descriptor_ = file->message_type(2);
  static const int TeamMemberChangeScene_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberChangeScene, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberChangeScene, init_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberChangeScene, script_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberChangeScene, rtid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberChangeScene, camp_),
  };
  TeamMemberChangeScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamMemberChangeScene_descriptor_,
      TeamMemberChangeScene::default_instance_,
      TeamMemberChangeScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberChangeScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberChangeScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamMemberChangeScene));
  TeamChat_descriptor_ = file->message_type(3);
  static const int TeamChat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamChat, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamChat, msg_),
  };
  TeamChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamChat_descriptor_,
      TeamChat::default_instance_,
      TeamChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamChat));
  GuildChat_descriptor_ = file->message_type(4);
  static const int GuildChat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildChat, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildChat, msg_),
  };
  GuildChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildChat_descriptor_,
      GuildChat::default_instance_,
      GuildChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildChat));
  WorldChat_descriptor_ = file->message_type(5);
  static const int WorldChat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldChat, msg_),
  };
  WorldChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldChat_descriptor_,
      WorldChat::default_instance_,
      WorldChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldChat));
  InsertScenePlayer_descriptor_ = file->message_type(6);
  static const int InsertScenePlayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertScenePlayer, msg_),
  };
  InsertScenePlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InsertScenePlayer_descriptor_,
      InsertScenePlayer::default_instance_,
      InsertScenePlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertScenePlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertScenePlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InsertScenePlayer));
  GetOperateInfo_descriptor_ = file->message_type(7);
  static const int GetOperateInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOperateInfo, playerid_),
  };
  GetOperateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetOperateInfo_descriptor_,
      GetOperateInfo::default_instance_,
      GetOperateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOperateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOperateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetOperateInfo));
  DestroyRoom_descriptor_ = file->message_type(8);
  static const int DestroyRoom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyRoom, rtid_),
  };
  DestroyRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DestroyRoom_descriptor_,
      DestroyRoom::default_instance_,
      DestroyRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DestroyRoom));
  PlayerAutoMatch_descriptor_ = file->message_type(9);
  static const int PlayerAutoMatch_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAutoMatch, purpose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAutoMatch, setauto_),
  };
  PlayerAutoMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerAutoMatch_descriptor_,
      PlayerAutoMatch::default_instance_,
      PlayerAutoMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAutoMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAutoMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerAutoMatch));
  EndGuildBoss_descriptor_ = file->message_type(10);
  static const int EndGuildBoss_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndGuildBoss, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndGuildBoss, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndGuildBoss, damage_),
  };
  EndGuildBoss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EndGuildBoss_descriptor_,
      EndGuildBoss::default_instance_,
      EndGuildBoss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndGuildBoss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndGuildBoss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EndGuildBoss));
  RefreshTarget_descriptor_ = file->message_type(11);
  static const int RefreshTarget_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshTarget, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshTarget, wave_),
  };
  RefreshTarget_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RefreshTarget_descriptor_,
      RefreshTarget::default_instance_,
      RefreshTarget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshTarget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshTarget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RefreshTarget));
  CheckOffLine_descriptor_ = file->message_type(12);
  static const int CheckOffLine_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckOffLine, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckOffLine, stamp_),
  };
  CheckOffLine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckOffLine_descriptor_,
      CheckOffLine::default_instance_,
      CheckOffLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckOffLine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckOffLine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckOffLine));
  GuildBattleWeekRank_descriptor_ = file->message_type(13);
  static const int GuildBattleWeekRank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleWeekRank, info_),
  };
  GuildBattleWeekRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildBattleWeekRank_descriptor_,
      GuildBattleWeekRank::default_instance_,
      GuildBattleWeekRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleWeekRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleWeekRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildBattleWeekRank));
  GuildBattleAllRank_descriptor_ = file->message_type(14);
  static const int GuildBattleAllRank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleAllRank, info_),
  };
  GuildBattleAllRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildBattleAllRank_descriptor_,
      GuildBattleAllRank::default_instance_,
      GuildBattleAllRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleAllRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleAllRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildBattleAllRank));
  XLuaRegNotify_descriptor_ = file->message_type(15);
  static const int XLuaRegNotify_offsets_[1] = {
  };
  XLuaRegNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      XLuaRegNotify_descriptor_,
      XLuaRegNotify::default_instance_,
      XLuaRegNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XLuaRegNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(XLuaRegNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(XLuaRegNotify));
  LuaLoadNotify_descriptor_ = file->message_type(16);
  static const int LuaLoadNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuaLoadNotify, ids_),
  };
  LuaLoadNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LuaLoadNotify_descriptor_,
      LuaLoadNotify::default_instance_,
      LuaLoadNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuaLoadNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuaLoadNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LuaLoadNotify));
  BuffPoint_descriptor_ = file->message_type(17);
  static const int BuffPoint_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffPoint, posindex_),
  };
  BuffPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffPoint_descriptor_,
      BuffPoint::default_instance_,
      BuffPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffPoint));
  PlayerCaptureStatge_descriptor_ = file->message_type(18);
  static const int PlayerCaptureStatge_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCaptureStatge, stage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCaptureStatge, win_battle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCaptureStatge, player_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCaptureStatge, actors_),
  };
  PlayerCaptureStatge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerCaptureStatge_descriptor_,
      PlayerCaptureStatge::default_instance_,
      PlayerCaptureStatge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCaptureStatge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCaptureStatge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerCaptureStatge));
  PlayerHookDataUpdate_descriptor_ = file->message_type(19);
  static const int PlayerHookDataUpdate_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHookDataUpdate, stage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHookDataUpdate, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHookDataUpdate, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHookDataUpdate, form_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHookDataUpdate, time_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHookDataUpdate, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHookDataUpdate, hook_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHookDataUpdate, income_per_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHookDataUpdate, exp_pre_min_),
  };
  PlayerHookDataUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerHookDataUpdate_descriptor_,
      PlayerHookDataUpdate::default_instance_,
      PlayerHookDataUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHookDataUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHookDataUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerHookDataUpdate));
  HookStageDistributeUpdate_descriptor_ = file->message_type(20);
  static const int HookStageDistributeUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HookStageDistributeUpdate, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HookStageDistributeUpdate, stage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HookStageDistributeUpdate, player_count_),
  };
  HookStageDistributeUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HookStageDistributeUpdate_descriptor_,
      HookStageDistributeUpdate::default_instance_,
      HookStageDistributeUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HookStageDistributeUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HookStageDistributeUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HookStageDistributeUpdate));
  PlayerUpdateCaptureForm_descriptor_ = file->message_type(21);
  static const int PlayerUpdateCaptureForm_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerUpdateCaptureForm, player_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerUpdateCaptureForm, actors_),
  };
  PlayerUpdateCaptureForm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerUpdateCaptureForm_descriptor_,
      PlayerUpdateCaptureForm::default_instance_,
      PlayerUpdateCaptureForm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerUpdateCaptureForm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerUpdateCaptureForm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerUpdateCaptureForm));
  AddGuildMoney_descriptor_ = file->message_type(22);
  static const int AddGuildMoney_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGuildMoney, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGuildMoney, addcount_),
  };
  AddGuildMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddGuildMoney_descriptor_,
      AddGuildMoney::default_instance_,
      AddGuildMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGuildMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddGuildMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddGuildMoney));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_S2GMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2GCommonMessage_descriptor_, &S2GCommonMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveBattleReply_descriptor_, &SaveBattleReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamMemberChangeScene_descriptor_, &TeamMemberChangeScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamChat_descriptor_, &TeamChat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildChat_descriptor_, &GuildChat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldChat_descriptor_, &WorldChat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InsertScenePlayer_descriptor_, &InsertScenePlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetOperateInfo_descriptor_, &GetOperateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DestroyRoom_descriptor_, &DestroyRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerAutoMatch_descriptor_, &PlayerAutoMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EndGuildBoss_descriptor_, &EndGuildBoss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RefreshTarget_descriptor_, &RefreshTarget::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckOffLine_descriptor_, &CheckOffLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildBattleWeekRank_descriptor_, &GuildBattleWeekRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildBattleAllRank_descriptor_, &GuildBattleAllRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    XLuaRegNotify_descriptor_, &XLuaRegNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LuaLoadNotify_descriptor_, &LuaLoadNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffPoint_descriptor_, &BuffPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerCaptureStatge_descriptor_, &PlayerCaptureStatge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerHookDataUpdate_descriptor_, &PlayerHookDataUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HookStageDistributeUpdate_descriptor_, &HookStageDistributeUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerUpdateCaptureForm_descriptor_, &PlayerUpdateCaptureForm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddGuildMoney_descriptor_, &AddGuildMoney::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_S2GMessage_2eproto() {
  delete S2GCommonMessage::default_instance_;
  delete S2GCommonMessage_reflection_;
  delete SaveBattleReply::default_instance_;
  delete SaveBattleReply_reflection_;
  delete TeamMemberChangeScene::default_instance_;
  delete TeamMemberChangeScene_reflection_;
  delete TeamChat::default_instance_;
  delete TeamChat_reflection_;
  delete GuildChat::default_instance_;
  delete GuildChat_reflection_;
  delete WorldChat::default_instance_;
  delete WorldChat_reflection_;
  delete InsertScenePlayer::default_instance_;
  delete InsertScenePlayer_reflection_;
  delete GetOperateInfo::default_instance_;
  delete GetOperateInfo_reflection_;
  delete DestroyRoom::default_instance_;
  delete DestroyRoom_reflection_;
  delete PlayerAutoMatch::default_instance_;
  delete PlayerAutoMatch_reflection_;
  delete EndGuildBoss::default_instance_;
  delete EndGuildBoss_reflection_;
  delete RefreshTarget::default_instance_;
  delete RefreshTarget_reflection_;
  delete CheckOffLine::default_instance_;
  delete CheckOffLine_reflection_;
  delete GuildBattleWeekRank::default_instance_;
  delete GuildBattleWeekRank_reflection_;
  delete GuildBattleAllRank::default_instance_;
  delete GuildBattleAllRank_reflection_;
  delete XLuaRegNotify::default_instance_;
  delete XLuaRegNotify_reflection_;
  delete LuaLoadNotify::default_instance_;
  delete LuaLoadNotify_reflection_;
  delete BuffPoint::default_instance_;
  delete BuffPoint_reflection_;
  delete PlayerCaptureStatge::default_instance_;
  delete PlayerCaptureStatge_reflection_;
  delete PlayerHookDataUpdate::default_instance_;
  delete PlayerHookDataUpdate_reflection_;
  delete HookStageDistributeUpdate::default_instance_;
  delete HookStageDistributeUpdate_reflection_;
  delete PlayerUpdateCaptureForm::default_instance_;
  delete PlayerUpdateCaptureForm_reflection_;
  delete AddGuildMoney::default_instance_;
  delete AddGuildMoney_reflection_;
}

void protobuf_AddDesc_S2GMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Packet::protobuf_AddDesc_Base_2eproto();
  ::Packet::protobuf_AddDesc_ChatMessage_2eproto();
  ::Packet::protobuf_AddDesc_ClientMove_2eproto();
  ::Packet::protobuf_AddDesc_PlayerBasicInfo_2eproto();
  ::Packet::protobuf_AddDesc_SceneStage_2eproto();
  ::Packet::protobuf_AddDesc_ActorBasicInfo_2eproto();
  ::Packet::protobuf_AddDesc_Guild_2eproto();
  ::Packet::protobuf_AddDesc_BattleReply_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020S2GMessage.proto\022\003S2G\032\nBase.proto\032\021Cha"
    "tMessage.proto\032\020ClientMove.proto\032\025Player"
    "BasicInfo.proto\032\020SceneStage.proto\032\024Actor"
    "BasicInfo.proto\032\013Guild.proto\032\021BattleRepl"
    "y.proto\"k\n\020S2GCommonMessage\022\024\n\014request_n"
    "ame\030\001 \002(\t\022\024\n\014int32_params\030\002 \003(\005\022\024\n\014int64"
    "_params\030\003 \003(\006\022\025\n\rstring_params\030\004 \003(\t\"5\n\017"
    "SaveBattleReply\022\"\n\005reply\030\001 \002(\0132\023.Packet."
    "BattleReply\"|\n\025TeamMemberChangeScene\022\020\n\010"
    "scene_id\030\001 \002(\005\022\"\n\010init_pos\030\002 \001(\0132\020.Packe"
    "t.Position\022\021\n\tscript_id\030\003 \001(\005\022\014\n\004rtid\030\004 "
    "\001(\005\022\014\n\004camp\030\005 \001(\005\"<\n\010TeamChat\022\016\n\006teamid\030"
    "\001 \002(\006\022 \n\003msg\030\002 \002(\0132\023.Packet.ChatMessage\""
    ">\n\tGuildChat\022\017\n\007guildid\030\001 \002(\006\022 \n\003msg\030\002 \002"
    "(\0132\023.Packet.ChatMessage\"-\n\tWorldChat\022 \n\003"
    "msg\030\001 \002(\0132\023.Packet.ChatMessage\"9\n\021Insert"
    "ScenePlayer\022$\n\003msg\030\001 \002(\0132\027.Packet.SceneP"
    "layerInfo\"\"\n\016GetOperateInfo\022\020\n\010playerid\030"
    "\001 \002(\006\"\033\n\013DestroyRoom\022\014\n\004rtid\030\001 \002(\005\"3\n\017Pl"
    "ayerAutoMatch\022\017\n\007purpose\030\001 \002(\005\022\017\n\007setaut"
    "o\030\002 \002(\010\">\n\014EndGuildBoss\022\014\n\004guid\030\001 \002(\006\022\020\n"
    "\010guild_id\030\002 \002(\006\022\016\n\006damage\030\003 \002(\005\"+\n\rRefre"
    "shTarget\022\014\n\004guid\030\001 \002(\006\022\014\n\004wave\030\002 \002(\005\"+\n\014"
    "CheckOffLine\022\014\n\004guid\030\001 \003(\006\022\r\n\005stamp\030\002 \003("
    "\r\"D\n\023GuildBattleWeekRank\022-\n\004info\030\001 \002(\0132\037"
    ".Packet.GuildBattleWeekRankInfo\"B\n\022Guild"
    "BattleAllRank\022,\n\004info\030\001 \002(\0132\036.Packet.Gui"
    "ldBattleAllRankInfo\"\017\n\rXLuaRegNotify\"\034\n\r"
    "LuaLoadNotify\022\013\n\003ids\030\001 \003(\005\"\035\n\tBuffPoint\022"
    "\020\n\010posindex\030\001 \002(\005\"\220\001\n\023PlayerCaptureStatg"
    "e\022\020\n\010stage_id\030\001 \002(\005\022\022\n\nwin_battle\030\002 \002(\010\022"
    ",\n\013player_info\030\003 \001(\0132\027.Packet.PlayerBasi"
    "cInfo\022%\n\006actors\030\004 \003(\0132\025.Packet.ActorFull"
    "Info\"\315\001\n\024PlayerHookDataUpdate\022\020\n\010stage_i"
    "d\030\001 \002(\005\022\014\n\004guid\030\002 \002(\006\022\014\n\004name\030\003 \002(\t\022%\n\004f"
    "orm\030\004 \002(\0132\027.Packet.BattleFormation\022\021\n\tti"
    "me_cost\030\005 \002(\005\022\r\n\005score\030\006 \002(\005\022\021\n\thook_tim"
    "e\030\007 \002(\005\022\026\n\016income_per_min\030\010 \002(\005\022\023\n\013exp_p"
    "re_min\030\t \002(\005\"U\n\031HookStageDistributeUpdat"
    "e\022\020\n\010scene_id\030\001 \002(\005\022\020\n\010stage_id\030\002 \003(\005\022\024\n"
    "\014player_count\030\003 \003(\005\"n\n\027PlayerUpdateCaptu"
    "reForm\022,\n\013player_info\030\001 \002(\0132\027.Packet.Pla"
    "yerBasicInfo\022%\n\006actors\030\002 \003(\0132\025.Packet.Ac"
    "torFullInfo\"2\n\rAddGuildMoney\022\017\n\007guildid\030"
    "\001 \002(\006\022\020\n\010addcount\030\002 \002(\005", 1783);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "S2GMessage.proto", &protobuf_RegisterTypes);
  S2GCommonMessage::default_instance_ = new S2GCommonMessage();
  SaveBattleReply::default_instance_ = new SaveBattleReply();
  TeamMemberChangeScene::default_instance_ = new TeamMemberChangeScene();
  TeamChat::default_instance_ = new TeamChat();
  GuildChat::default_instance_ = new GuildChat();
  WorldChat::default_instance_ = new WorldChat();
  InsertScenePlayer::default_instance_ = new InsertScenePlayer();
  GetOperateInfo::default_instance_ = new GetOperateInfo();
  DestroyRoom::default_instance_ = new DestroyRoom();
  PlayerAutoMatch::default_instance_ = new PlayerAutoMatch();
  EndGuildBoss::default_instance_ = new EndGuildBoss();
  RefreshTarget::default_instance_ = new RefreshTarget();
  CheckOffLine::default_instance_ = new CheckOffLine();
  GuildBattleWeekRank::default_instance_ = new GuildBattleWeekRank();
  GuildBattleAllRank::default_instance_ = new GuildBattleAllRank();
  XLuaRegNotify::default_instance_ = new XLuaRegNotify();
  LuaLoadNotify::default_instance_ = new LuaLoadNotify();
  BuffPoint::default_instance_ = new BuffPoint();
  PlayerCaptureStatge::default_instance_ = new PlayerCaptureStatge();
  PlayerHookDataUpdate::default_instance_ = new PlayerHookDataUpdate();
  HookStageDistributeUpdate::default_instance_ = new HookStageDistributeUpdate();
  PlayerUpdateCaptureForm::default_instance_ = new PlayerUpdateCaptureForm();
  AddGuildMoney::default_instance_ = new AddGuildMoney();
  S2GCommonMessage::default_instance_->InitAsDefaultInstance();
  SaveBattleReply::default_instance_->InitAsDefaultInstance();
  TeamMemberChangeScene::default_instance_->InitAsDefaultInstance();
  TeamChat::default_instance_->InitAsDefaultInstance();
  GuildChat::default_instance_->InitAsDefaultInstance();
  WorldChat::default_instance_->InitAsDefaultInstance();
  InsertScenePlayer::default_instance_->InitAsDefaultInstance();
  GetOperateInfo::default_instance_->InitAsDefaultInstance();
  DestroyRoom::default_instance_->InitAsDefaultInstance();
  PlayerAutoMatch::default_instance_->InitAsDefaultInstance();
  EndGuildBoss::default_instance_->InitAsDefaultInstance();
  RefreshTarget::default_instance_->InitAsDefaultInstance();
  CheckOffLine::default_instance_->InitAsDefaultInstance();
  GuildBattleWeekRank::default_instance_->InitAsDefaultInstance();
  GuildBattleAllRank::default_instance_->InitAsDefaultInstance();
  XLuaRegNotify::default_instance_->InitAsDefaultInstance();
  LuaLoadNotify::default_instance_->InitAsDefaultInstance();
  BuffPoint::default_instance_->InitAsDefaultInstance();
  PlayerCaptureStatge::default_instance_->InitAsDefaultInstance();
  PlayerHookDataUpdate::default_instance_->InitAsDefaultInstance();
  HookStageDistributeUpdate::default_instance_->InitAsDefaultInstance();
  PlayerUpdateCaptureForm::default_instance_->InitAsDefaultInstance();
  AddGuildMoney::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_S2GMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_S2GMessage_2eproto {
  StaticDescriptorInitializer_S2GMessage_2eproto() {
    protobuf_AddDesc_S2GMessage_2eproto();
  }
} static_descriptor_initializer_S2GMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int S2GCommonMessage::kRequestNameFieldNumber;
const int S2GCommonMessage::kInt32ParamsFieldNumber;
const int S2GCommonMessage::kInt64ParamsFieldNumber;
const int S2GCommonMessage::kStringParamsFieldNumber;
#endif  // !_MSC_VER

S2GCommonMessage::S2GCommonMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2GCommonMessage::InitAsDefaultInstance() {
}

S2GCommonMessage::S2GCommonMessage(const S2GCommonMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2GCommonMessage::SharedCtor() {
  _cached_size_ = 0;
  request_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2GCommonMessage::~S2GCommonMessage() {
  SharedDtor();
}

void S2GCommonMessage::SharedDtor() {
  if (request_name_ != &::google::protobuf::internal::kEmptyString) {
    delete request_name_;
  }
  if (this != default_instance_) {
  }
}

void S2GCommonMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2GCommonMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2GCommonMessage_descriptor_;
}

const S2GCommonMessage& S2GCommonMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_S2GMessage_2eproto();
  return *default_instance_;
}

S2GCommonMessage* S2GCommonMessage::default_instance_ = NULL;

S2GCommonMessage* S2GCommonMessage::New() const {
  return new S2GCommonMessage;
}

void S2GCommonMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request_name()) {
      if (request_name_ != &::google::protobuf::internal::kEmptyString) {
        request_name_->clear();
      }
    }
  }
  int32_params_.Clear();
  int64_params_.Clear();
  string_params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool S2GCommonMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string request_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->request_name().data(), this->request_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_int32_params;
        break;
      }

      // repeated int32 int32_params = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int32_params:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_int32_params())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_int32_params())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_int32_params;
        if (input->ExpectTag(25)) goto parse_int64_params;
        break;
      }

      // repeated fixed64 int64_params = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_int64_params:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 25, input, this->mutable_int64_params())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_int64_params())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_int64_params;
        if (input->ExpectTag(34)) goto parse_string_params;
        break;
      }

      // repeated string string_params = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_string_params()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->string_params(this->string_params_size() - 1).data(),
            this->string_params(this->string_params_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_string_params;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void S2GCommonMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string request_name = 1;
  if (has_request_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_name().data(), this->request_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->request_name(), output);
  }

  // repeated int32 int32_params = 2;
  for (int i = 0; i < this->int32_params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->int32_params(i), output);
  }

  // repeated fixed64 int64_params = 3;
  for (int i = 0; i < this->int64_params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      3, this->int64_params(i), output);
  }

  // repeated string string_params = 4;
  for (int i = 0; i < this->string_params_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->string_params(i).data(), this->string_params(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->string_params(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2GCommonMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string request_name = 1;
  if (has_request_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_name().data(), this->request_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_name(), target);
  }

  // repeated int32 int32_params = 2;
  for (int i = 0; i < this->int32_params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->int32_params(i), target);
  }

  // repeated fixed64 int64_params = 3;
  for (int i = 0; i < this->int64_params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(3, this->int64_params(i), target);
  }

  // repeated string string_params = 4;
  for (int i = 0; i < this->string_params_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_params(i).data(), this->string_params(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->string_params(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2GCommonMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string request_name = 1;
    if (has_request_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_name());
    }

  }
  // repeated int32 int32_params = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->int32_params_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->int32_params(i));
    }
    total_size += 1 * this->int32_params_size() + data_size;
  }

  // repeated fixed64 int64_params = 3;
  {
    int data_size = 0;
    data_size = 8 * this->int64_params_size();
    total_size += 1 * this->int64_params_size() + data_size;
  }

  // repeated string string_params = 4;
  total_size += 1 * this->string_params_size();
  for (int i = 0; i < this->string_params_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->string_params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2GCommonMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2GCommonMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2GCommonMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void S2GCommonMessage::MergeFrom(const S2GCommonMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  int32_params_.MergeFrom(from.int32_params_);
  int64_params_.MergeFrom(from.int64_params_);
  string_params_.MergeFrom(from.string_params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_name()) {
      set_request_name(from.request_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void S2GCommonMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void S2GCommonMessage::CopyFrom(const S2GCommonMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool S2GCommonMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S2GCommonMessage::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void S2GCommonMessage::Swap(S2GCommonMessage* other) {
  if (other != this) {
    std::swap(request_name_, other->request_name_);
    int32_params_.Swap(&other->int32_params_);
    int64_params_.Swap(&other->int64_params_);
    string_params_.Swap(&other->string_params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata S2GCommonMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2GCommonMessage_descriptor_;
  metadata.reflection = S2GCommonMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveBattleReply::kReplyFieldNumber;
#endif  // !_MSC_VER

SaveBattleReply::SaveBattleReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaveBattleReply::InitAsDefaultInstance() {
  reply_ = const_cast< ::Packet::BattleReply*>(&::Packet::BattleReply::default_instance());
}

SaveBattleReply::SaveBattleReply(const SaveBattleReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaveBattleReply::SharedCtor() {
  _cached_size_ = 0;
  reply_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveBattleReply::~SaveBattleReply() {
  SharedDtor();
}

void SaveBattleReply::SharedDtor() {
  if (this != default_instance_) {
    delete reply_;
  }
}

void SaveBattleReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveBattleReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveBattleReply_descriptor_;
}

const SaveBattleReply& SaveBattleReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_S2GMessage_2eproto();
  return *default_instance_;
}

SaveBattleReply* SaveBattleReply::default_instance_ = NULL;

SaveBattleReply* SaveBattleReply::New() const {
  return new SaveBattleReply;
}

void SaveBattleReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_reply()) {
      if (reply_ != NULL) reply_->::Packet::BattleReply::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SaveBattleReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.BattleReply reply = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reply()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SaveBattleReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.BattleReply reply = 1;
  if (has_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reply(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaveBattleReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.BattleReply reply = 1;
  if (has_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reply(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaveBattleReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.BattleReply reply = 1;
    if (has_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reply());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveBattleReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveBattleReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveBattleReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SaveBattleReply::MergeFrom(const SaveBattleReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply()) {
      mutable_reply()->::Packet::BattleReply::MergeFrom(from.reply());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SaveBattleReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SaveBattleReply::CopyFrom(const SaveBattleReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SaveBattleReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_reply()) {
    if (!this->reply().IsInitialized()) return false;
  }
  return true;
}

void SaveBattleReply::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  if (has_reply()) {
    this->mutable_reply()->SetInitialized();
  }
  return;
}

void SaveBattleReply::Swap(SaveBattleReply* other) {
  if (other != this) {
    std::swap(reply_, other->reply_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SaveBattleReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveBattleReply_descriptor_;
  metadata.reflection = SaveBattleReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamMemberChangeScene::kSceneIdFieldNumber;
const int TeamMemberChangeScene::kInitPosFieldNumber;
const int TeamMemberChangeScene::kScriptIdFieldNumber;
const int TeamMemberChangeScene::kRtidFieldNumber;
const int TeamMemberChangeScene::kCampFieldNumber;
#endif  // !_MSC_VER

TeamMemberChangeScene::TeamMemberChangeScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamMemberChangeScene::InitAsDefaultInstance() {
  init_pos_ = const_cast< ::Packet::Position*>(&::Packet::Position::default_instance());
}

TeamMemberChangeScene::TeamMemberChangeScene(const TeamMemberChangeScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamMemberChangeScene::SharedCtor() {
  _cached_size_ = 0;
  scene_id_ = 0;
  init_pos_ = NULL;
  script_id_ = 0;
  rtid_ = 0;
  camp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamMemberChangeScene::~TeamMemberChangeScene() {
  SharedDtor();
}

void TeamMemberChangeScene::SharedDtor() {
  if (this != default_instance_) {
    delete init_pos_;
  }
}

void TeamMemberChangeScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamMemberChangeScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamMemberChangeScene_descriptor_;
}

const TeamMemberChangeScene& TeamMemberChangeScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_S2GMessage_2eproto();
  return *default_instance_;
}

TeamMemberChangeScene* TeamMemberChangeScene::default_instance_ = NULL;

TeamMemberChangeScene* TeamMemberChangeScene::New() const {
  return new TeamMemberChangeScene;
}

void TeamMemberChangeScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scene_id_ = 0;
    if (has_init_pos()) {
      if (init_pos_ != NULL) init_pos_->::Packet::Position::Clear();
    }
    script_id_ = 0;
    rtid_ = 0;
    camp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool TeamMemberChangeScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 scene_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_init_pos;
        break;
      }

      // optional .Packet.Position init_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_init_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_init_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_script_id;
        break;
      }

      // optional int32 script_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_script_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &script_id_)));
          set_has_script_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rtid;
        break;
      }

      // optional int32 rtid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rtid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rtid_)));
          set_has_rtid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_camp;
        break;
      }

      // optional int32 camp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camp_)));
          set_has_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void TeamMemberChangeScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 scene_id = 1;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->scene_id(), output);
  }

  // optional .Packet.Position init_pos = 2;
  if (has_init_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->init_pos(), output);
  }

  // optional int32 script_id = 3;
  if (has_script_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->script_id(), output);
  }

  // optional int32 rtid = 4;
  if (has_rtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rtid(), output);
  }

  // optional int32 camp = 5;
  if (has_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->camp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamMemberChangeScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 scene_id = 1;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->scene_id(), target);
  }

  // optional .Packet.Position init_pos = 2;
  if (has_init_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->init_pos(), target);
  }

  // optional int32 script_id = 3;
  if (has_script_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->script_id(), target);
  }

  // optional int32 rtid = 4;
  if (has_rtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rtid(), target);
  }

  // optional int32 camp = 5;
  if (has_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->camp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamMemberChangeScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 scene_id = 1;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }

    // optional .Packet.Position init_pos = 2;
    if (has_init_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->init_pos());
    }

    // optional int32 script_id = 3;
    if (has_script_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->script_id());
    }

    // optional int32 rtid = 4;
    if (has_rtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rtid());
    }

    // optional int32 camp = 5;
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamMemberChangeScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamMemberChangeScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamMemberChangeScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void TeamMemberChangeScene::MergeFrom(const TeamMemberChangeScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_init_pos()) {
      mutable_init_pos()->::Packet::Position::MergeFrom(from.init_pos());
    }
    if (from.has_script_id()) {
      set_script_id(from.script_id());
    }
    if (from.has_rtid()) {
      set_rtid(from.rtid());
    }
    if (from.has_camp()) {
      set_camp(from.camp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void TeamMemberChangeScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void TeamMemberChangeScene::CopyFrom(const TeamMemberChangeScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool TeamMemberChangeScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_init_pos()) {
    if (!this->init_pos().IsInitialized()) return false;
  }
  return true;
}

void TeamMemberChangeScene::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  if (has_init_pos()) {
    this->mutable_init_pos()->SetInitialized();
  }
  return;
}

void TeamMemberChangeScene::Swap(TeamMemberChangeScene* other) {
  if (other != this) {
    std::swap(scene_id_, other->scene_id_);
    std::swap(init_pos_, other->init_pos_);
    std::swap(script_id_, other->script_id_);
    std::swap(rtid_, other->rtid_);
    std::swap(camp_, other->camp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata TeamMemberChangeScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamMemberChangeScene_descriptor_;
  metadata.reflection = TeamMemberChangeScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamChat::kTeamidFieldNumber;
const int TeamChat::kMsgFieldNumber;
#endif  // !_MSC_VER

TeamChat::TeamChat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamChat::InitAsDefaultInstance() {
  msg_ = const_cast< ::Packet::ChatMessage*>(&::Packet::ChatMessage::default_instance());
}

TeamChat::TeamChat(const TeamChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamChat::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamChat::~TeamChat() {
  SharedDtor();
}

void TeamChat::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

void TeamChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamChat_descriptor_;
}

const TeamChat& TeamChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_S2GMessage_2eproto();
  return *default_instance_;
}

TeamChat* TeamChat::default_instance_ = NULL;

TeamChat* TeamChat::New() const {
  return new TeamChat;
}

void TeamChat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = GOOGLE_ULONGLONG(0);
    if (has_msg()) {
      if (msg_ != NULL) msg_->::Packet::ChatMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool TeamChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 teamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // required .Packet.ChatMessage msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void TeamChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 teamid = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->teamid(), output);
  }

  // required .Packet.ChatMessage msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 teamid = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->teamid(), target);
  }

  // required .Packet.ChatMessage msg = 2;
  if (has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamChat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 teamid = 1;
    if (has_teamid()) {
      total_size += 1 + 8;
    }

    // required .Packet.ChatMessage msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void TeamChat::MergeFrom(const TeamChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_msg()) {
      mutable_msg()->::Packet::ChatMessage::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void TeamChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void TeamChat::CopyFrom(const TeamChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool TeamChat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msg()) {
    if (!this->msg().IsInitialized()) return false;
  }
  return true;
}

void TeamChat::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  if (has_msg()) {
    this->mutable_msg()->SetInitialized();
  }
  return;
}

void TeamChat::Swap(TeamChat* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata TeamChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamChat_descriptor_;
  metadata.reflection = TeamChat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildChat::kGuildidFieldNumber;
const int GuildChat::kMsgFieldNumber;
#endif  // !_MSC_VER

GuildChat::GuildChat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildChat::InitAsDefaultInstance() {
  msg_ = const_cast< ::Packet::ChatMessage*>(&::Packet::ChatMessage::default_instance());
}

GuildChat::GuildChat(const GuildChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildChat::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildChat::~GuildChat() {
  SharedDtor();
}

void GuildChat::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

void GuildChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildChat_descriptor_;
}

const GuildChat& GuildChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_S2GMessage_2eproto();
  return *default_instance_;
}

GuildChat* GuildChat::default_instance_ = NULL;

GuildChat* GuildChat::New() const {
  return new GuildChat;
}

void GuildChat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = GOOGLE_ULONGLONG(0);
    if (has_msg()) {
      if (msg_ != NULL) msg_->::Packet::ChatMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guildid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // required .Packet.ChatMessage msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guildid = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guildid(), output);
  }

  // required .Packet.ChatMessage msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guildid = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guildid(), target);
  }

  // required .Packet.ChatMessage msg = 2;
  if (has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildChat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guildid = 1;
    if (has_guildid()) {
      total_size += 1 + 8;
    }

    // required .Packet.ChatMessage msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildChat::MergeFrom(const GuildChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_msg()) {
      mutable_msg()->::Packet::ChatMessage::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildChat::CopyFrom(const GuildChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildChat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_msg()) {
    if (!this->msg().IsInitialized()) return false;
  }
  return true;
}

void GuildChat::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  if (has_msg()) {
    this->mutable_msg()->SetInitialized();
  }
  return;
}

void GuildChat::Swap(GuildChat* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildChat_descriptor_;
  metadata.reflection = GuildChat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldChat::kMsgFieldNumber;
#endif  // !_MSC_VER

WorldChat::WorldChat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldChat::InitAsDefaultInstance() {
  msg_ = const_cast< ::Packet::ChatMessage*>(&::Packet::ChatMessage::default_instance());
}

WorldChat::WorldChat(const WorldChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldChat::SharedCtor() {
  _cached_size_ = 0;
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldChat::~WorldChat() {
  SharedDtor();
}

void WorldChat::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

void WorldChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldChat_descriptor_;
}

const WorldChat& WorldChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_S2GMessage_2eproto();
  return *default_instance_;
}

WorldChat* WorldChat::default_instance_ = NULL;

WorldChat* WorldChat::New() const {
  return new WorldChat;
}

void WorldChat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg()) {
      if (msg_ != NULL) msg_->::Packet::ChatMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool WorldChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.ChatMessage msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void WorldChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.ChatMessage msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.ChatMessage msg = 1;
  if (has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldChat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.ChatMessage msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void WorldChat::MergeFrom(const WorldChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      mutable_msg()->::Packet::ChatMessage::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void WorldChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void WorldChat::CopyFrom(const WorldChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool WorldChat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_msg()) {
    if (!this->msg().IsInitialized()) return false;
  }
  return true;
}

void WorldChat::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  if (has_msg()) {
    this->mutable_msg()->SetInitialized();
  }
  return;
}

void WorldChat::Swap(WorldChat* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata WorldChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldChat_descriptor_;
  metadata.reflection = WorldChat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InsertScenePlayer::kMsgFieldNumber;
#endif  // !_MSC_VER

InsertScenePlayer::InsertScenePlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InsertScenePlayer::InitAsDefaultInstance() {
  msg_ = const_cast< ::Packet::ScenePlayerInfo*>(&::Packet::ScenePlayerInfo::default_instance());
}

InsertScenePlayer::InsertScenePlayer(const InsertScenePlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InsertScenePlayer::SharedCtor() {
  _cached_size_ = 0;
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InsertScenePlayer::~InsertScenePlayer() {
  SharedDtor();
}

void InsertScenePlayer::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

void InsertScenePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InsertScenePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InsertScenePlayer_descriptor_;
}

const InsertScenePlayer& InsertScenePlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_S2GMessage_2eproto();
  return *default_instance_;
}

InsertScenePlayer* InsertScenePlayer::default_instance_ = NULL;

InsertScenePlayer* InsertScenePlayer::New() const {
  return new InsertScenePlayer;
}

void InsertScenePlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg()) {
      if (msg_ != NULL) msg_->::Packet::ScenePlayerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool InsertScenePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.ScenePlayerInfo msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void InsertScenePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.ScenePlayerInfo msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InsertScenePlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.ScenePlayerInfo msg = 1;
  if (has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InsertScenePlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.ScenePlayerInfo msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InsertScenePlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InsertScenePlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InsertScenePlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void InsertScenePlayer::MergeFrom(const InsertScenePlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      mutable_msg()->::Packet::ScenePlayerInfo::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void InsertScenePlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void InsertScenePlayer::CopyFrom(const InsertScenePlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool InsertScenePlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_msg()) {
    if (!this->msg().IsInitialized()) return false;
  }
  return true;
}

void InsertScenePlayer::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  if (has_msg()) {
    this->mutable_msg()->SetInitialized();
  }
  return;
}

void InsertScenePlayer::Swap(InsertScenePlayer* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata InsertScenePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InsertScenePlayer_descriptor_;
  metadata.reflection = InsertScenePlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetOperateInfo::kPlayeridFieldNumber;
#endif  // !_MSC_VER

GetOperateInfo::GetOperateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetOperateInfo::InitAsDefaultInstance() {
}

GetOperateInfo::GetOperateInfo(const GetOperateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetOperateInfo::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetOperateInfo::~GetOperateInfo() {
  SharedDtor();
}

void GetOperateInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetOperateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetOperateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetOperateInfo_descriptor_;
}

const GetOperateInfo& GetOperateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_S2GMessage_2eproto();
  return *default_instance_;
}

GetOperateInfo* GetOperateInfo::default_instance_ = NULL;

GetOperateInfo* GetOperateInfo::New() const {
  return new GetOperateInfo;
}

void GetOperateInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GetOperateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GetOperateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetOperateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetOperateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetOperateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetOperateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetOperateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GetOperateInfo::MergeFrom(const GetOperateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GetOperateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GetOperateInfo::CopyFrom(const GetOperateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GetOperateInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetOperateInfo::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void GetOperateInfo::Swap(GetOperateInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GetOperateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetOperateInfo_descriptor_;
  metadata.reflection = GetOperateInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DestroyRoom::kRtidFieldNumber;
#endif  // !_MSC_VER

DestroyRoom::DestroyRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DestroyRoom::InitAsDefaultInstance() {
}

DestroyRoom::DestroyRoom(const DestroyRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DestroyRoom::SharedCtor() {
  _cached_size_ = 0;
  rtid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DestroyRoom::~DestroyRoom() {
  SharedDtor();
}

void DestroyRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DestroyRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DestroyRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DestroyRoom_descriptor_;
}

const DestroyRoom& DestroyRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_S2GMessage_2eproto();
  return *default_instance_;
}

DestroyRoom* DestroyRoom::default_instance_ = NULL;

DestroyRoom* DestroyRoom::New() const {
  return new DestroyRoom;
}

void DestroyRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rtid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool DestroyRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rtid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rtid_)));
          set_has_rtid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void DestroyRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rtid = 1;
  if (has_rtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rtid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DestroyRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rtid = 1;
  if (has_rtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rtid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DestroyRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rtid = 1;
    if (has_rtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rtid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DestroyRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DestroyRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DestroyRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void DestroyRoom::MergeFrom(const DestroyRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rtid()) {
      set_rtid(from.rtid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void DestroyRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void DestroyRoom::CopyFrom(const DestroyRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool DestroyRoom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DestroyRoom::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void DestroyRoom::Swap(DestroyRoom* other) {
  if (other != this) {
    std::swap(rtid_, other->rtid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata DestroyRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DestroyRoom_descriptor_;
  metadata.reflection = DestroyRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerAutoMatch::kPurposeFieldNumber;
const int PlayerAutoMatch::kSetautoFieldNumber;
#endif  // !_MSC_VER

PlayerAutoMatch::PlayerAutoMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerAutoMatch::InitAsDefaultInstance() {
}

PlayerAutoMatch::PlayerAutoMatch(const PlayerAutoMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerAutoMatch::SharedCtor() {
  _cached_size_ = 0;
  purpose_ = 0;
  setauto_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerAutoMatch::~PlayerAutoMatch() {
  SharedDtor();
}

void PlayerAutoMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerAutoMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerAutoMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerAutoMatch_descriptor_;
}

const PlayerAutoMatch& PlayerAutoMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_S2GMessage_2eproto();
  return *default_instance_;
}

PlayerAutoMatch* PlayerAutoMatch::default_instance_ = NULL;

PlayerAutoMatch* PlayerAutoMatch::New() const {
  return new PlayerAutoMatch;
}

void PlayerAutoMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    purpose_ = 0;
    setauto_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerAutoMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 purpose = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &purpose_)));
          set_has_purpose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_setauto;
        break;
      }

      // required bool setauto = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_setauto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &setauto_)));
          set_has_setauto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerAutoMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 purpose = 1;
  if (has_purpose()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->purpose(), output);
  }

  // required bool setauto = 2;
  if (has_setauto()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->setauto(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerAutoMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 purpose = 1;
  if (has_purpose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->purpose(), target);
  }

  // required bool setauto = 2;
  if (has_setauto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->setauto(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerAutoMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 purpose = 1;
    if (has_purpose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->purpose());
    }

    // required bool setauto = 2;
    if (has_setauto()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerAutoMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerAutoMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerAutoMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerAutoMatch::MergeFrom(const PlayerAutoMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_purpose()) {
      set_purpose(from.purpose());
    }
    if (from.has_setauto()) {
      set_setauto(from.setauto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerAutoMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerAutoMatch::CopyFrom(const PlayerAutoMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerAutoMatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PlayerAutoMatch::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void PlayerAutoMatch::Swap(PlayerAutoMatch* other) {
  if (other != this) {
    std::swap(purpose_, other->purpose_);
    std::swap(setauto_, other->setauto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerAutoMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerAutoMatch_descriptor_;
  metadata.reflection = PlayerAutoMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EndGuildBoss::kGuidFieldNumber;
const int EndGuildBoss::kGuildIdFieldNumber;
const int EndGuildBoss::kDamageFieldNumber;
#endif  // !_MSC_VER

EndGuildBoss::EndGuildBoss()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EndGuildBoss::InitAsDefaultInstance() {
}

EndGuildBoss::EndGuildBoss(const EndGuildBoss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EndGuildBoss::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  guild_id_ = GOOGLE_ULONGLONG(0);
  damage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EndGuildBoss::~EndGuildBoss() {
  SharedDtor();
}

void EndGuildBoss::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EndGuildBoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EndGuildBoss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EndGuildBoss_descriptor_;
}

const EndGuildBoss& EndGuildBoss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_S2GMessage_2eproto();
  return *default_instance_;
}

EndGuildBoss* EndGuildBoss::default_instance_ = NULL;

EndGuildBoss* EndGuildBoss::New() const {
  return new EndGuildBoss;
}

void EndGuildBoss::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    guild_id_ = GOOGLE_ULONGLONG(0);
    damage_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool EndGuildBoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_guild_id;
        break;
      }

      // required fixed64 guild_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_damage;
        break;
      }

      // required int32 damage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void EndGuildBoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required fixed64 guild_id = 2;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->guild_id(), output);
  }

  // required int32 damage = 3;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->damage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EndGuildBoss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required fixed64 guild_id = 2;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->guild_id(), target);
  }

  // required int32 damage = 3;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->damage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EndGuildBoss::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 guild_id = 2;
    if (has_guild_id()) {
      total_size += 1 + 8;
    }

    // required int32 damage = 3;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EndGuildBoss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EndGuildBoss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EndGuildBoss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void EndGuildBoss::MergeFrom(const EndGuildBoss& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void EndGuildBoss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void EndGuildBoss::CopyFrom(const EndGuildBoss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool EndGuildBoss::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void EndGuildBoss::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  return;
}

void EndGuildBoss::Swap(EndGuildBoss* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(damage_, other->damage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata EndGuildBoss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EndGuildBoss_descriptor_;
  metadata.reflection = EndGuildBoss_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RefreshTarget::kGuidFieldNumber;
const int RefreshTarget::kWaveFieldNumber;
#endif  // !_MSC_VER

RefreshTarget::RefreshTarget()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RefreshTarget::InitAsDefaultInstance() {
}

RefreshTarget::RefreshTarget(const RefreshTarget& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RefreshTarget::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  wave_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RefreshTarget::~RefreshTarget() {
  SharedDtor();
}

void RefreshTarget::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RefreshTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefreshTarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefreshTarget_descriptor_;
}

const RefreshTarget& RefreshTarget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_S2GMessage_2eproto();
  return *default_instance_;
}

RefreshTarget* RefreshTarget::default_instance_ = NULL;

RefreshTarget* RefreshTarget::New() const {
  return new RefreshTarget;
}

void RefreshTarget::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    wave_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool RefreshTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wave;
        break;
      }

      // required int32 wave = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wave_)));
          set_has_wave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void RefreshTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required int32 wave = 2;
  if (has_wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wave(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RefreshTarget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required int32 wave = 2;
  if (has_wave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wave(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RefreshTarget::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required int32 wave = 2;
    if (has_wave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wave());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefreshTarget::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RefreshTarget* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RefreshTarget*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void RefreshTarget::MergeFrom(const RefreshTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_wave()) {
      set_wave(from.wave());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void RefreshTarget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void RefreshTarget::CopyFrom(const RefreshTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool RefreshTarget::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RefreshTarget::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void RefreshTarget::Swap(RefreshTarget* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(wave_, other->wave_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata RefreshTarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefreshTarget_descriptor_;
  metadata.reflection = RefreshTarget_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckOffLine::kGuidFieldNumber;
const int CheckOffLine::kStampFieldNumber;
#endif  // !_MSC_VER

CheckOffLine::CheckOffLine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckOffLine::InitAsDefaultInstance() {
}

CheckOffLine::CheckOffLine(const CheckOffLine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckOffLine::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckOffLine::~CheckOffLine() {
  SharedDtor();
}

void CheckOffLine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CheckOffLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckOffLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckOffLine_descriptor_;
}

const CheckOffLine& CheckOffLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_S2GMessage_2eproto();
  return *default_instance_;
}

CheckOffLine* CheckOffLine::default_instance_ = NULL;

CheckOffLine* CheckOffLine::New() const {
  return new CheckOffLine;
}

void CheckOffLine::Clear() {
  guid_.Clear();
  stamp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool CheckOffLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9, input, this->mutable_guid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_guid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_guid;
        if (input->ExpectTag(16)) goto parse_stamp;
        break;
      }

      // repeated uint32 stamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_stamp())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_stamp())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stamp;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void CheckOffLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated fixed64 guid = 1;
  for (int i = 0; i < this->guid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->guid(i), output);
  }

  // repeated uint32 stamp = 2;
  for (int i = 0; i < this->stamp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->stamp(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckOffLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated fixed64 guid = 1;
  for (int i = 0; i < this->guid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(1, this->guid(i), target);
  }

  // repeated uint32 stamp = 2;
  for (int i = 0; i < this->stamp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->stamp(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckOffLine::ByteSize() const {
  int total_size = 0;

  // repeated fixed64 guid = 1;
  {
    int data_size = 0;
    data_size = 8 * this->guid_size();
    total_size += 1 * this->guid_size() + data_size;
  }

  // repeated uint32 stamp = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->stamp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->stamp(i));
    }
    total_size += 1 * this->stamp_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckOffLine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckOffLine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckOffLine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void CheckOffLine::MergeFrom(const CheckOffLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  guid_.MergeFrom(from.guid_);
  stamp_.MergeFrom(from.stamp_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void CheckOffLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void CheckOffLine::CopyFrom(const CheckOffLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool CheckOffLine::IsInitialized() const {

  return true;
}

void CheckOffLine::SetInitialized() {

  return;
}

void CheckOffLine::Swap(CheckOffLine* other) {
  if (other != this) {
    guid_.Swap(&other->guid_);
    stamp_.Swap(&other->stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata CheckOffLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckOffLine_descriptor_;
  metadata.reflection = CheckOffLine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildBattleWeekRank::kInfoFieldNumber;
#endif  // !_MSC_VER

GuildBattleWeekRank::GuildBattleWeekRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildBattleWeekRank::InitAsDefaultInstance() {
  info_ = const_cast< ::Packet::GuildBattleWeekRankInfo*>(&::Packet::GuildBattleWeekRankInfo::default_instance());
}

GuildBattleWeekRank::GuildBattleWeekRank(const GuildBattleWeekRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildBattleWeekRank::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildBattleWeekRank::~GuildBattleWeekRank() {
  SharedDtor();
}

void GuildBattleWeekRank::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void GuildBattleWeekRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildBattleWeekRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBattleWeekRank_descriptor_;
}

const GuildBattleWeekRank& GuildBattleWeekRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_S2GMessage_2eproto();
  return *default_instance_;
}

GuildBattleWeekRank* GuildBattleWeekRank::default_instance_ = NULL;

GuildBattleWeekRank* GuildBattleWeekRank::New() const {
  return new GuildBattleWeekRank;
}

void GuildBattleWeekRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::Packet::GuildBattleWeekRankInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildBattleWeekRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.GuildBattleWeekRankInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildBattleWeekRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.GuildBattleWeekRankInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildBattleWeekRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.GuildBattleWeekRankInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildBattleWeekRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.GuildBattleWeekRankInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildBattleWeekRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildBattleWeekRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildBattleWeekRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildBattleWeekRank::MergeFrom(const GuildBattleWeekRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::Packet::GuildBattleWeekRankInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildBattleWeekRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildBattleWeekRank::CopyFrom(const GuildBattleWeekRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildBattleWeekRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void GuildBattleWeekRank::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  if (has_info()) {
    this->mutable_info()->SetInitialized();
  }
  return;
}

void GuildBattleWeekRank::Swap(GuildBattleWeekRank* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildBattleWeekRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildBattleWeekRank_descriptor_;
  metadata.reflection = GuildBattleWeekRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildBattleAllRank::kInfoFieldNumber;
#endif  // !_MSC_VER

GuildBattleAllRank::GuildBattleAllRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildBattleAllRank::InitAsDefaultInstance() {
  info_ = const_cast< ::Packet::GuildBattleAllRankInfo*>(&::Packet::GuildBattleAllRankInfo::default_instance());
}

GuildBattleAllRank::GuildBattleAllRank(const GuildBattleAllRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildBattleAllRank::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildBattleAllRank::~GuildBattleAllRank() {
  SharedDtor();
}

void GuildBattleAllRank::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void GuildBattleAllRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildBattleAllRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBattleAllRank_descriptor_;
}

const GuildBattleAllRank& GuildBattleAllRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_S2GMessage_2eproto();
  return *default_instance_;
}

GuildBattleAllRank* GuildBattleAllRank::default_instance_ = NULL;

GuildBattleAllRank* GuildBattleAllRank::New() const {
  return new GuildBattleAllRank;
}

void GuildBattleAllRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::Packet::GuildBattleAllRankInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildBattleAllRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.GuildBattleAllRankInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildBattleAllRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.GuildBattleAllRankInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildBattleAllRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.GuildBattleAllRankInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildBattleAllRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.GuildBattleAllRankInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildBattleAllRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildBattleAllRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildBattleAllRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildBattleAllRank::MergeFrom(const GuildBattleAllRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::Packet::GuildBattleAllRankInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildBattleAllRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildBattleAllRank::CopyFrom(const GuildBattleAllRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildBattleAllRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void GuildBattleAllRank::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  if (has_info()) {
    this->mutable_info()->SetInitialized();
  }
  return;
}

void GuildBattleAllRank::Swap(GuildBattleAllRank* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildBattleAllRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildBattleAllRank_descriptor_;
  metadata.reflection = GuildBattleAllRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

XLuaRegNotify::XLuaRegNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void XLuaRegNotify::InitAsDefaultInstance() {
}

XLuaRegNotify::XLuaRegNotify(const XLuaRegNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void XLuaRegNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

XLuaRegNotify::~XLuaRegNotify() {
  SharedDtor();
}

void XLuaRegNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void XLuaRegNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XLuaRegNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return XLuaRegNotify_descriptor_;
}

const XLuaRegNotify& XLuaRegNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_S2GMessage_2eproto();
  return *default_instance_;
}

XLuaRegNotify* XLuaRegNotify::default_instance_ = NULL;

XLuaRegNotify* XLuaRegNotify::New() const {
  return new XLuaRegNotify;
}

void XLuaRegNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool XLuaRegNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void XLuaRegNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* XLuaRegNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int XLuaRegNotify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XLuaRegNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const XLuaRegNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const XLuaRegNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void XLuaRegNotify::MergeFrom(const XLuaRegNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void XLuaRegNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void XLuaRegNotify::CopyFrom(const XLuaRegNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool XLuaRegNotify::IsInitialized() const {

  return true;
}

void XLuaRegNotify::SetInitialized() {

  return;
}

void XLuaRegNotify::Swap(XLuaRegNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata XLuaRegNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = XLuaRegNotify_descriptor_;
  metadata.reflection = XLuaRegNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LuaLoadNotify::kIdsFieldNumber;
#endif  // !_MSC_VER

LuaLoadNotify::LuaLoadNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LuaLoadNotify::InitAsDefaultInstance() {
}

LuaLoadNotify::LuaLoadNotify(const LuaLoadNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LuaLoadNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LuaLoadNotify::~LuaLoadNotify() {
  SharedDtor();
}

void LuaLoadNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LuaLoadNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LuaLoadNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LuaLoadNotify_descriptor_;
}

const LuaLoadNotify& LuaLoadNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_S2GMessage_2eproto();
  return *default_instance_;
}

LuaLoadNotify* LuaLoadNotify::default_instance_ = NULL;

LuaLoadNotify* LuaLoadNotify::New() const {
  return new LuaLoadNotify;
}

void LuaLoadNotify::Clear() {
  ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool LuaLoadNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void LuaLoadNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LuaLoadNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LuaLoadNotify::ByteSize() const {
  int total_size = 0;

  // repeated int32 ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ids(i));
    }
    total_size += 1 * this->ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LuaLoadNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LuaLoadNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LuaLoadNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void LuaLoadNotify::MergeFrom(const LuaLoadNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  ids_.MergeFrom(from.ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void LuaLoadNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void LuaLoadNotify::CopyFrom(const LuaLoadNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool LuaLoadNotify::IsInitialized() const {

  return true;
}

void LuaLoadNotify::SetInitialized() {

  return;
}

void LuaLoadNotify::Swap(LuaLoadNotify* other) {
  if (other != this) {
    ids_.Swap(&other->ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata LuaLoadNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LuaLoadNotify_descriptor_;
  metadata.reflection = LuaLoadNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffPoint::kPosindexFieldNumber;
#endif  // !_MSC_VER

BuffPoint::BuffPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuffPoint::InitAsDefaultInstance() {
}

BuffPoint::BuffPoint(const BuffPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuffPoint::SharedCtor() {
  _cached_size_ = 0;
  posindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffPoint::~BuffPoint() {
  SharedDtor();
}

void BuffPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffPoint_descriptor_;
}

const BuffPoint& BuffPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_S2GMessage_2eproto();
  return *default_instance_;
}

BuffPoint* BuffPoint::default_instance_ = NULL;

BuffPoint* BuffPoint::New() const {
  return new BuffPoint;
}

void BuffPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    posindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool BuffPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 posindex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posindex_)));
          set_has_posindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void BuffPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 posindex = 1;
  if (has_posindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->posindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuffPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 posindex = 1;
  if (has_posindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->posindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuffPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 posindex = 1;
    if (has_posindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void BuffPoint::MergeFrom(const BuffPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_posindex()) {
      set_posindex(from.posindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void BuffPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void BuffPoint::CopyFrom(const BuffPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool BuffPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BuffPoint::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void BuffPoint::Swap(BuffPoint* other) {
  if (other != this) {
    std::swap(posindex_, other->posindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata BuffPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffPoint_descriptor_;
  metadata.reflection = BuffPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerCaptureStatge::kStageIdFieldNumber;
const int PlayerCaptureStatge::kWinBattleFieldNumber;
const int PlayerCaptureStatge::kPlayerInfoFieldNumber;
const int PlayerCaptureStatge::kActorsFieldNumber;
#endif  // !_MSC_VER

PlayerCaptureStatge::PlayerCaptureStatge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerCaptureStatge::InitAsDefaultInstance() {
  player_info_ = const_cast< ::Packet::PlayerBasicInfo*>(&::Packet::PlayerBasicInfo::default_instance());
}

PlayerCaptureStatge::PlayerCaptureStatge(const PlayerCaptureStatge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerCaptureStatge::SharedCtor() {
  _cached_size_ = 0;
  stage_id_ = 0;
  win_battle_ = false;
  player_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerCaptureStatge::~PlayerCaptureStatge() {
  SharedDtor();
}

void PlayerCaptureStatge::SharedDtor() {
  if (this != default_instance_) {
    delete player_info_;
  }
}

void PlayerCaptureStatge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerCaptureStatge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerCaptureStatge_descriptor_;
}

const PlayerCaptureStatge& PlayerCaptureStatge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_S2GMessage_2eproto();
  return *default_instance_;
}

PlayerCaptureStatge* PlayerCaptureStatge::default_instance_ = NULL;

PlayerCaptureStatge* PlayerCaptureStatge::New() const {
  return new PlayerCaptureStatge;
}

void PlayerCaptureStatge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stage_id_ = 0;
    win_battle_ = false;
    if (has_player_info()) {
      if (player_info_ != NULL) player_info_->::Packet::PlayerBasicInfo::Clear();
    }
  }
  actors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerCaptureStatge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 stage_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_id_)));
          set_has_stage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_win_battle;
        break;
      }

      // required bool win_battle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_battle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &win_battle_)));
          set_has_win_battle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_player_info;
        break;
      }

      // optional .Packet.PlayerBasicInfo player_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_actors;
        break;
      }

      // repeated .Packet.ActorFullInfo actors = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_actors;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerCaptureStatge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 stage_id = 1;
  if (has_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stage_id(), output);
  }

  // required bool win_battle = 2;
  if (has_win_battle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->win_battle(), output);
  }

  // optional .Packet.PlayerBasicInfo player_info = 3;
  if (has_player_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->player_info(), output);
  }

  // repeated .Packet.ActorFullInfo actors = 4;
  for (int i = 0; i < this->actors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->actors(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerCaptureStatge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 stage_id = 1;
  if (has_stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stage_id(), target);
  }

  // required bool win_battle = 2;
  if (has_win_battle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->win_battle(), target);
  }

  // optional .Packet.PlayerBasicInfo player_info = 3;
  if (has_player_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->player_info(), target);
  }

  // repeated .Packet.ActorFullInfo actors = 4;
  for (int i = 0; i < this->actors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->actors(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerCaptureStatge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 stage_id = 1;
    if (has_stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage_id());
    }

    // required bool win_battle = 2;
    if (has_win_battle()) {
      total_size += 1 + 1;
    }

    // optional .Packet.PlayerBasicInfo player_info = 3;
    if (has_player_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_info());
    }

  }
  // repeated .Packet.ActorFullInfo actors = 4;
  total_size += 1 * this->actors_size();
  for (int i = 0; i < this->actors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actors(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerCaptureStatge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerCaptureStatge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerCaptureStatge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerCaptureStatge::MergeFrom(const PlayerCaptureStatge& from) {
  GOOGLE_CHECK_NE(&from, this);
  actors_.MergeFrom(from.actors_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage_id()) {
      set_stage_id(from.stage_id());
    }
    if (from.has_win_battle()) {
      set_win_battle(from.win_battle());
    }
    if (from.has_player_info()) {
      mutable_player_info()->::Packet::PlayerBasicInfo::MergeFrom(from.player_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerCaptureStatge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerCaptureStatge::CopyFrom(const PlayerCaptureStatge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerCaptureStatge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_player_info()) {
    if (!this->player_info().IsInitialized()) return false;
  }
  for (int i = 0; i < actors_size(); i++) {
    if (!this->actors(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerCaptureStatge::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  if (has_player_info()) {
    this->mutable_player_info()->SetInitialized();
  }
  for (int i = 0; i < actors_size(); i++) {
    this->mutable_actors(i)->SetInitialized();
  }
  return;
}

void PlayerCaptureStatge::Swap(PlayerCaptureStatge* other) {
  if (other != this) {
    std::swap(stage_id_, other->stage_id_);
    std::swap(win_battle_, other->win_battle_);
    std::swap(player_info_, other->player_info_);
    actors_.Swap(&other->actors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerCaptureStatge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerCaptureStatge_descriptor_;
  metadata.reflection = PlayerCaptureStatge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerHookDataUpdate::kStageIdFieldNumber;
const int PlayerHookDataUpdate::kGuidFieldNumber;
const int PlayerHookDataUpdate::kNameFieldNumber;
const int PlayerHookDataUpdate::kFormFieldNumber;
const int PlayerHookDataUpdate::kTimeCostFieldNumber;
const int PlayerHookDataUpdate::kScoreFieldNumber;
const int PlayerHookDataUpdate::kHookTimeFieldNumber;
const int PlayerHookDataUpdate::kIncomePerMinFieldNumber;
const int PlayerHookDataUpdate::kExpPreMinFieldNumber;
#endif  // !_MSC_VER

PlayerHookDataUpdate::PlayerHookDataUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerHookDataUpdate::InitAsDefaultInstance() {
  form_ = const_cast< ::Packet::BattleFormation*>(&::Packet::BattleFormation::default_instance());
}

PlayerHookDataUpdate::PlayerHookDataUpdate(const PlayerHookDataUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerHookDataUpdate::SharedCtor() {
  _cached_size_ = 0;
  stage_id_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  form_ = NULL;
  time_cost_ = 0;
  score_ = 0;
  hook_time_ = 0;
  income_per_min_ = 0;
  exp_pre_min_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerHookDataUpdate::~PlayerHookDataUpdate() {
  SharedDtor();
}

void PlayerHookDataUpdate::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete form_;
  }
}

void PlayerHookDataUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerHookDataUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerHookDataUpdate_descriptor_;
}

const PlayerHookDataUpdate& PlayerHookDataUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_S2GMessage_2eproto();
  return *default_instance_;
}

PlayerHookDataUpdate* PlayerHookDataUpdate::default_instance_ = NULL;

PlayerHookDataUpdate* PlayerHookDataUpdate::New() const {
  return new PlayerHookDataUpdate;
}

void PlayerHookDataUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stage_id_ = 0;
    guid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_form()) {
      if (form_ != NULL) form_->::Packet::BattleFormation::Clear();
    }
    time_cost_ = 0;
    score_ = 0;
    hook_time_ = 0;
    income_per_min_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    exp_pre_min_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerHookDataUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 stage_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_id_)));
          set_has_stage_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_guid;
        break;
      }

      // required fixed64 guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_form;
        break;
      }

      // required .Packet.BattleFormation form = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_form:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_form()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time_cost;
        break;
      }

      // required int32 time_cost = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_cost_)));
          set_has_time_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_score;
        break;
      }

      // required int32 score = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_hook_time;
        break;
      }

      // required int32 hook_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hook_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hook_time_)));
          set_has_hook_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_income_per_min;
        break;
      }

      // required int32 income_per_min = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_income_per_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &income_per_min_)));
          set_has_income_per_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_exp_pre_min;
        break;
      }

      // required int32 exp_pre_min = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp_pre_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_pre_min_)));
          set_has_exp_pre_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerHookDataUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 stage_id = 1;
  if (has_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stage_id(), output);
  }

  // required fixed64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->guid(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required .Packet.BattleFormation form = 4;
  if (has_form()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->form(), output);
  }

  // required int32 time_cost = 5;
  if (has_time_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->time_cost(), output);
  }

  // required int32 score = 6;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->score(), output);
  }

  // required int32 hook_time = 7;
  if (has_hook_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hook_time(), output);
  }

  // required int32 income_per_min = 8;
  if (has_income_per_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->income_per_min(), output);
  }

  // required int32 exp_pre_min = 9;
  if (has_exp_pre_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->exp_pre_min(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerHookDataUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 stage_id = 1;
  if (has_stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stage_id(), target);
  }

  // required fixed64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->guid(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required .Packet.BattleFormation form = 4;
  if (has_form()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->form(), target);
  }

  // required int32 time_cost = 5;
  if (has_time_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->time_cost(), target);
  }

  // required int32 score = 6;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->score(), target);
  }

  // required int32 hook_time = 7;
  if (has_hook_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->hook_time(), target);
  }

  // required int32 income_per_min = 8;
  if (has_income_per_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->income_per_min(), target);
  }

  // required int32 exp_pre_min = 9;
  if (has_exp_pre_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->exp_pre_min(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerHookDataUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 stage_id = 1;
    if (has_stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage_id());
    }

    // required fixed64 guid = 2;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .Packet.BattleFormation form = 4;
    if (has_form()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->form());
    }

    // required int32 time_cost = 5;
    if (has_time_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_cost());
    }

    // required int32 score = 6;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // required int32 hook_time = 7;
    if (has_hook_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hook_time());
    }

    // required int32 income_per_min = 8;
    if (has_income_per_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->income_per_min());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 exp_pre_min = 9;
    if (has_exp_pre_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp_pre_min());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerHookDataUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerHookDataUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerHookDataUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerHookDataUpdate::MergeFrom(const PlayerHookDataUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage_id()) {
      set_stage_id(from.stage_id());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_form()) {
      mutable_form()->::Packet::BattleFormation::MergeFrom(from.form());
    }
    if (from.has_time_cost()) {
      set_time_cost(from.time_cost());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_hook_time()) {
      set_hook_time(from.hook_time());
    }
    if (from.has_income_per_min()) {
      set_income_per_min(from.income_per_min());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_exp_pre_min()) {
      set_exp_pre_min(from.exp_pre_min());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerHookDataUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerHookDataUpdate::CopyFrom(const PlayerHookDataUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerHookDataUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  if (has_form()) {
    if (!this->form().IsInitialized()) return false;
  }
  return true;
}

void PlayerHookDataUpdate::SetInitialized() {
  _has_bits_[0] |= 0x000001ff;

  if (has_form()) {
    this->mutable_form()->SetInitialized();
  }
  return;
}

void PlayerHookDataUpdate::Swap(PlayerHookDataUpdate* other) {
  if (other != this) {
    std::swap(stage_id_, other->stage_id_);
    std::swap(guid_, other->guid_);
    std::swap(name_, other->name_);
    std::swap(form_, other->form_);
    std::swap(time_cost_, other->time_cost_);
    std::swap(score_, other->score_);
    std::swap(hook_time_, other->hook_time_);
    std::swap(income_per_min_, other->income_per_min_);
    std::swap(exp_pre_min_, other->exp_pre_min_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerHookDataUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerHookDataUpdate_descriptor_;
  metadata.reflection = PlayerHookDataUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HookStageDistributeUpdate::kSceneIdFieldNumber;
const int HookStageDistributeUpdate::kStageIdFieldNumber;
const int HookStageDistributeUpdate::kPlayerCountFieldNumber;
#endif  // !_MSC_VER

HookStageDistributeUpdate::HookStageDistributeUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HookStageDistributeUpdate::InitAsDefaultInstance() {
}

HookStageDistributeUpdate::HookStageDistributeUpdate(const HookStageDistributeUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HookStageDistributeUpdate::SharedCtor() {
  _cached_size_ = 0;
  scene_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HookStageDistributeUpdate::~HookStageDistributeUpdate() {
  SharedDtor();
}

void HookStageDistributeUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HookStageDistributeUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HookStageDistributeUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HookStageDistributeUpdate_descriptor_;
}

const HookStageDistributeUpdate& HookStageDistributeUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_S2GMessage_2eproto();
  return *default_instance_;
}

HookStageDistributeUpdate* HookStageDistributeUpdate::default_instance_ = NULL;

HookStageDistributeUpdate* HookStageDistributeUpdate::New() const {
  return new HookStageDistributeUpdate;
}

void HookStageDistributeUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scene_id_ = 0;
  }
  stage_id_.Clear();
  player_count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool HookStageDistributeUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 scene_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stage_id;
        break;
      }

      // repeated int32 stage_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_stage_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stage_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stage_id;
        if (input->ExpectTag(24)) goto parse_player_count;
        break;
      }

      // repeated int32 player_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_player_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_player_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_count;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void HookStageDistributeUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 scene_id = 1;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->scene_id(), output);
  }

  // repeated int32 stage_id = 2;
  for (int i = 0; i < this->stage_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->stage_id(i), output);
  }

  // repeated int32 player_count = 3;
  for (int i = 0; i < this->player_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->player_count(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HookStageDistributeUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 scene_id = 1;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->scene_id(), target);
  }

  // repeated int32 stage_id = 2;
  for (int i = 0; i < this->stage_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->stage_id(i), target);
  }

  // repeated int32 player_count = 3;
  for (int i = 0; i < this->player_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->player_count(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HookStageDistributeUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 scene_id = 1;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }

  }
  // repeated int32 stage_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->stage_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->stage_id(i));
    }
    total_size += 1 * this->stage_id_size() + data_size;
  }

  // repeated int32 player_count = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->player_count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->player_count(i));
    }
    total_size += 1 * this->player_count_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HookStageDistributeUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HookStageDistributeUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HookStageDistributeUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void HookStageDistributeUpdate::MergeFrom(const HookStageDistributeUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  stage_id_.MergeFrom(from.stage_id_);
  player_count_.MergeFrom(from.player_count_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void HookStageDistributeUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void HookStageDistributeUpdate::CopyFrom(const HookStageDistributeUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool HookStageDistributeUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HookStageDistributeUpdate::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void HookStageDistributeUpdate::Swap(HookStageDistributeUpdate* other) {
  if (other != this) {
    std::swap(scene_id_, other->scene_id_);
    stage_id_.Swap(&other->stage_id_);
    player_count_.Swap(&other->player_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata HookStageDistributeUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HookStageDistributeUpdate_descriptor_;
  metadata.reflection = HookStageDistributeUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerUpdateCaptureForm::kPlayerInfoFieldNumber;
const int PlayerUpdateCaptureForm::kActorsFieldNumber;
#endif  // !_MSC_VER

PlayerUpdateCaptureForm::PlayerUpdateCaptureForm()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerUpdateCaptureForm::InitAsDefaultInstance() {
  player_info_ = const_cast< ::Packet::PlayerBasicInfo*>(&::Packet::PlayerBasicInfo::default_instance());
}

PlayerUpdateCaptureForm::PlayerUpdateCaptureForm(const PlayerUpdateCaptureForm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerUpdateCaptureForm::SharedCtor() {
  _cached_size_ = 0;
  player_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerUpdateCaptureForm::~PlayerUpdateCaptureForm() {
  SharedDtor();
}

void PlayerUpdateCaptureForm::SharedDtor() {
  if (this != default_instance_) {
    delete player_info_;
  }
}

void PlayerUpdateCaptureForm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerUpdateCaptureForm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerUpdateCaptureForm_descriptor_;
}

const PlayerUpdateCaptureForm& PlayerUpdateCaptureForm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_S2GMessage_2eproto();
  return *default_instance_;
}

PlayerUpdateCaptureForm* PlayerUpdateCaptureForm::default_instance_ = NULL;

PlayerUpdateCaptureForm* PlayerUpdateCaptureForm::New() const {
  return new PlayerUpdateCaptureForm;
}

void PlayerUpdateCaptureForm::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_info()) {
      if (player_info_ != NULL) player_info_->::Packet::PlayerBasicInfo::Clear();
    }
  }
  actors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerUpdateCaptureForm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.PlayerBasicInfo player_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_actors;
        break;
      }

      // repeated .Packet.ActorFullInfo actors = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_actors;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerUpdateCaptureForm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.PlayerBasicInfo player_info = 1;
  if (has_player_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_info(), output);
  }

  // repeated .Packet.ActorFullInfo actors = 2;
  for (int i = 0; i < this->actors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->actors(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerUpdateCaptureForm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.PlayerBasicInfo player_info = 1;
  if (has_player_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_info(), target);
  }

  // repeated .Packet.ActorFullInfo actors = 2;
  for (int i = 0; i < this->actors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->actors(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerUpdateCaptureForm::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.PlayerBasicInfo player_info = 1;
    if (has_player_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_info());
    }

  }
  // repeated .Packet.ActorFullInfo actors = 2;
  total_size += 1 * this->actors_size();
  for (int i = 0; i < this->actors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actors(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerUpdateCaptureForm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerUpdateCaptureForm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerUpdateCaptureForm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerUpdateCaptureForm::MergeFrom(const PlayerUpdateCaptureForm& from) {
  GOOGLE_CHECK_NE(&from, this);
  actors_.MergeFrom(from.actors_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_info()) {
      mutable_player_info()->::Packet::PlayerBasicInfo::MergeFrom(from.player_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerUpdateCaptureForm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerUpdateCaptureForm::CopyFrom(const PlayerUpdateCaptureForm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerUpdateCaptureForm::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_player_info()) {
    if (!this->player_info().IsInitialized()) return false;
  }
  for (int i = 0; i < actors_size(); i++) {
    if (!this->actors(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerUpdateCaptureForm::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  if (has_player_info()) {
    this->mutable_player_info()->SetInitialized();
  }
  for (int i = 0; i < actors_size(); i++) {
    this->mutable_actors(i)->SetInitialized();
  }
  return;
}

void PlayerUpdateCaptureForm::Swap(PlayerUpdateCaptureForm* other) {
  if (other != this) {
    std::swap(player_info_, other->player_info_);
    actors_.Swap(&other->actors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerUpdateCaptureForm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerUpdateCaptureForm_descriptor_;
  metadata.reflection = PlayerUpdateCaptureForm_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddGuildMoney::kGuildidFieldNumber;
const int AddGuildMoney::kAddcountFieldNumber;
#endif  // !_MSC_VER

AddGuildMoney::AddGuildMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddGuildMoney::InitAsDefaultInstance() {
}

AddGuildMoney::AddGuildMoney(const AddGuildMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddGuildMoney::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  addcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddGuildMoney::~AddGuildMoney() {
  SharedDtor();
}

void AddGuildMoney::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddGuildMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddGuildMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddGuildMoney_descriptor_;
}

const AddGuildMoney& AddGuildMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_S2GMessage_2eproto();
  return *default_instance_;
}

AddGuildMoney* AddGuildMoney::default_instance_ = NULL;

AddGuildMoney* AddGuildMoney::New() const {
  return new AddGuildMoney;
}

void AddGuildMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = GOOGLE_ULONGLONG(0);
    addcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool AddGuildMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guildid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_addcount;
        break;
      }

      // required int32 addcount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addcount_)));
          set_has_addcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void AddGuildMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guildid = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guildid(), output);
  }

  // required int32 addcount = 2;
  if (has_addcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->addcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddGuildMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guildid = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guildid(), target);
  }

  // required int32 addcount = 2;
  if (has_addcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->addcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddGuildMoney::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guildid = 1;
    if (has_guildid()) {
      total_size += 1 + 8;
    }

    // required int32 addcount = 2;
    if (has_addcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddGuildMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddGuildMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddGuildMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void AddGuildMoney::MergeFrom(const AddGuildMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_addcount()) {
      set_addcount(from.addcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void AddGuildMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void AddGuildMoney::CopyFrom(const AddGuildMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool AddGuildMoney::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AddGuildMoney::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void AddGuildMoney::Swap(AddGuildMoney* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(addcount_, other->addcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata AddGuildMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddGuildMoney_descriptor_;
  metadata.reflection = AddGuildMoney_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace S2G

// @@protoc_insertion_point(global_scope)
