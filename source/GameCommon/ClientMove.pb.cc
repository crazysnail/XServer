// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientMove.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ClientMove.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Packet {

namespace {

const ::google::protobuf::Descriptor* ClientClickMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientClickMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientPlayerMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientPlayerMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientPlayerStop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientPlayerStop_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamMemberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamMemberInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerTeamData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerTeamData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerRunTimeStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerRunTimeStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerRunTimeStatusNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerRunTimeStatusNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScenePlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScenePlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScenePlayerList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScenePlayerList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerSceneInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerSceneInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerSceneInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerSceneInfoReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScenePlayerExit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScenePlayerExit_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerLeaveZone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerLeaveZone_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ClientMove_2eproto() {
  protobuf_AddDesc_ClientMove_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ClientMove.proto");
  GOOGLE_CHECK(file != NULL);
  ClientClickMove_descriptor_ = file->message_type(0);
  static const int ClientClickMove_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientClickMove, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientClickMove, star_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientClickMove, sub_positions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientClickMove, sub_position_index_),
  };
  ClientClickMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientClickMove_descriptor_,
      ClientClickMove::default_instance_,
      ClientClickMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientClickMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientClickMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientClickMove));
  ClientPlayerMove_descriptor_ = file->message_type(1);
  static const int ClientPlayerMove_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientPlayerMove, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientPlayerMove, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientPlayerMove, move_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientPlayerMove, move_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientPlayerMove, old_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientPlayerMove, new_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientPlayerMove, follow_),
  };
  ClientPlayerMove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientPlayerMove_descriptor_,
      ClientPlayerMove::default_instance_,
      ClientPlayerMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientPlayerMove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientPlayerMove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientPlayerMove));
  ClientPlayerStop_descriptor_ = file->message_type(2);
  static const int ClientPlayerStop_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientPlayerStop, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientPlayerStop, old_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientPlayerStop, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientPlayerStop, stop_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientPlayerStop, follow_),
  };
  ClientPlayerStop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientPlayerStop_descriptor_,
      ClientPlayerStop::default_instance_,
      ClientPlayerStop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientPlayerStop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientPlayerStop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientPlayerStop));
  TeamMemberInfo_descriptor_ = file->message_type(3);
  static const int TeamMemberInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, memberid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, teamstatus_),
  };
  TeamMemberInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamMemberInfo_descriptor_,
      TeamMemberInfo::default_instance_,
      TeamMemberInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemberInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamMemberInfo));
  PlayerTeamData_descriptor_ = file->message_type(4);
  static const int PlayerTeamData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTeamData, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTeamData, leaderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTeamData, arrangetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTeamData, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTeamData, member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTeamData, robot_team_),
  };
  PlayerTeamData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerTeamData_descriptor_,
      PlayerTeamData::default_instance_,
      PlayerTeamData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTeamData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTeamData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerTeamData));
  PlayerRunTimeStatus_descriptor_ = file->message_type(5);
  static const int PlayerRunTimeStatus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRunTimeStatus, on_hook_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRunTimeStatus, in_battle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRunTimeStatus, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRunTimeStatus, guildposition_),
  };
  PlayerRunTimeStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerRunTimeStatus_descriptor_,
      PlayerRunTimeStatus::default_instance_,
      PlayerRunTimeStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRunTimeStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRunTimeStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerRunTimeStatus));
  PlayerRunTimeStatusNotify_descriptor_ = file->message_type(6);
  static const int PlayerRunTimeStatusNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRunTimeStatusNotify, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRunTimeStatusNotify, status_),
  };
  PlayerRunTimeStatusNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerRunTimeStatusNotify_descriptor_,
      PlayerRunTimeStatusNotify::default_instance_,
      PlayerRunTimeStatusNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRunTimeStatusNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRunTimeStatusNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerRunTimeStatusNotify));
  ScenePlayerInfo_descriptor_ = file->message_type(7);
  static const int ScenePlayerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayerInfo, basic_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayerInfo, main_equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayerInfo, runtime_status_),
  };
  ScenePlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScenePlayerInfo_descriptor_,
      ScenePlayerInfo::default_instance_,
      ScenePlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScenePlayerInfo));
  ScenePlayerList_descriptor_ = file->message_type(8);
  static const int ScenePlayerList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayerList, player_list_),
  };
  ScenePlayerList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScenePlayerList_descriptor_,
      ScenePlayerList::default_instance_,
      ScenePlayerList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayerList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayerList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScenePlayerList));
  PlayerSceneInfoReq_descriptor_ = file->message_type(9);
  static const int PlayerSceneInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSceneInfoReq, guid_),
  };
  PlayerSceneInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerSceneInfoReq_descriptor_,
      PlayerSceneInfoReq::default_instance_,
      PlayerSceneInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSceneInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSceneInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerSceneInfoReq));
  PlayerSceneInfoReply_descriptor_ = file->message_type(10);
  static const int PlayerSceneInfoReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSceneInfoReply, optinfo_),
  };
  PlayerSceneInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerSceneInfoReply_descriptor_,
      PlayerSceneInfoReply::default_instance_,
      PlayerSceneInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSceneInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSceneInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerSceneInfoReply));
  ScenePlayerExit_descriptor_ = file->message_type(11);
  static const int ScenePlayerExit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayerExit, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayerExit, scene_id_),
  };
  ScenePlayerExit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScenePlayerExit_descriptor_,
      ScenePlayerExit::default_instance_,
      ScenePlayerExit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayerExit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayerExit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScenePlayerExit));
  PlayerLeaveZone_descriptor_ = file->message_type(12);
  static const int PlayerLeaveZone_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLeaveZone, guid_),
  };
  PlayerLeaveZone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerLeaveZone_descriptor_,
      PlayerLeaveZone::default_instance_,
      PlayerLeaveZone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLeaveZone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLeaveZone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerLeaveZone));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ClientMove_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientClickMove_descriptor_, &ClientClickMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientPlayerMove_descriptor_, &ClientPlayerMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientPlayerStop_descriptor_, &ClientPlayerStop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamMemberInfo_descriptor_, &TeamMemberInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerTeamData_descriptor_, &PlayerTeamData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerRunTimeStatus_descriptor_, &PlayerRunTimeStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerRunTimeStatusNotify_descriptor_, &PlayerRunTimeStatusNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScenePlayerInfo_descriptor_, &ScenePlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScenePlayerList_descriptor_, &ScenePlayerList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerSceneInfoReq_descriptor_, &PlayerSceneInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerSceneInfoReply_descriptor_, &PlayerSceneInfoReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScenePlayerExit_descriptor_, &ScenePlayerExit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerLeaveZone_descriptor_, &PlayerLeaveZone::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ClientMove_2eproto() {
  delete ClientClickMove::default_instance_;
  delete ClientClickMove_reflection_;
  delete ClientPlayerMove::default_instance_;
  delete ClientPlayerMove_reflection_;
  delete ClientPlayerStop::default_instance_;
  delete ClientPlayerStop_reflection_;
  delete TeamMemberInfo::default_instance_;
  delete TeamMemberInfo_reflection_;
  delete PlayerTeamData::default_instance_;
  delete PlayerTeamData_reflection_;
  delete PlayerRunTimeStatus::default_instance_;
  delete PlayerRunTimeStatus_reflection_;
  delete PlayerRunTimeStatusNotify::default_instance_;
  delete PlayerRunTimeStatusNotify_reflection_;
  delete ScenePlayerInfo::default_instance_;
  delete ScenePlayerInfo_reflection_;
  delete ScenePlayerList::default_instance_;
  delete ScenePlayerList_reflection_;
  delete PlayerSceneInfoReq::default_instance_;
  delete PlayerSceneInfoReq_reflection_;
  delete PlayerSceneInfoReply::default_instance_;
  delete PlayerSceneInfoReply_reflection_;
  delete ScenePlayerExit::default_instance_;
  delete ScenePlayerExit_reflection_;
  delete PlayerLeaveZone::default_instance_;
  delete PlayerLeaveZone_reflection_;
}

void protobuf_AddDesc_ClientMove_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Packet::protobuf_AddDesc_Base_2eproto();
  ::Packet::protobuf_AddDesc_AllPacketEnum_2eproto();
  ::Packet::protobuf_AddDesc_PlayerBasicInfo_2eproto();
  ::Packet::protobuf_AddDesc_ItemAndEquip_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020ClientMove.proto\022\006Packet\032\nBase.proto\032\023"
    "AllPacketEnum.proto\032\025PlayerBasicInfo.pro"
    "to\032\022ItemAndEquip.proto\"\210\001\n\017ClientClickMo"
    "ve\022\014\n\004guid\030\001 \002(\006\022\"\n\010star_pos\030\002 \001(\0132\020.Pac"
    "ket.Position\022\'\n\rsub_positions\030\003 \003(\0132\020.Pa"
    "cket.Position\022\032\n\022sub_position_index\030\004 \001("
    "\005\"\260\001\n\020ClientPlayerMove\022\014\n\004guid\030\001 \001(\006\022\021\n\t"
    "direction\030\002 \002(\002\022\022\n\nmove_speed\030\003 \002(\007\022\021\n\tm"
    "ove_time\030\004 \002(\007\022!\n\007old_pos\030\005 \002(\0132\020.Packet"
    ".Position\022!\n\007new_pos\030\006 \002(\0132\020.Packet.Posi"
    "tion\022\016\n\006follow\030\007 \001(\010\"\212\001\n\020ClientPlayerSto"
    "p\022\014\n\004guid\030\001 \001(\006\022!\n\007old_pos\030\002 \001(\0132\020.Packe"
    "t.Position\022\021\n\tdirection\030\003 \002(\002\022\"\n\010stop_po"
    "s\030\004 \002(\0132\020.Packet.Position\022\016\n\006follow\030\005 \001("
    "\010\"P\n\016TeamMemberInfo\022\020\n\010memberid\030\001 \002(\006\022,\n"
    "\nteamstatus\030\002 \002(\0162\030.Packet.PlayerTeamSta"
    "tus\"\247\001\n\016PlayerTeamData\022\016\n\006teamid\030\001 \002(\006\022\020"
    "\n\010leaderid\030\003 \002(\006\022(\n\013arrangetype\030\004 \002(\0162\023."
    "Packet.ArrangeType\022\r\n\005group\030\005 \002(\010\022&\n\006mem"
    "ber\030\006 \003(\0132\026.Packet.TeamMemberInfo\022\022\n\nrob"
    "ot_team\030\007 \001(\010\"\215\001\n\023PlayerRunTimeStatus\022\017\n"
    "\007on_hook\030\001 \002(\010\022\021\n\tin_battle\030\002 \002(\010\022$\n\004tea"
    "m\030\003 \002(\0132\026.Packet.PlayerTeamData\022,\n\rguild"
    "position\030\004 \002(\0162\025.Packet.GuildPosition\"V\n"
    "\031PlayerRunTimeStatusNotify\022\014\n\004guid\030\001 \002(\006"
    "\022+\n\006status\030\002 \002(\0132\033.Packet.PlayerRunTimeS"
    "tatus\"\233\001\n\017ScenePlayerInfo\022+\n\nbasic_info\030"
    "\001 \002(\0132\027.Packet.PlayerBasicInfo\022&\n\013main_e"
    "quips\030\002 \003(\0132\021.Packet.EquipItem\0223\n\016runtim"
    "e_status\030\003 \001(\0132\033.Packet.PlayerRunTimeSta"
    "tus\"\?\n\017ScenePlayerList\022,\n\013player_list\030\001 "
    "\003(\0132\027.Packet.ScenePlayerInfo\"\"\n\022PlayerSc"
    "eneInfoReq\022\014\n\004guid\030\001 \002(\006\"@\n\024PlayerSceneI"
    "nfoReply\022(\n\007optinfo\030\001 \002(\0132\027.Packet.Scene"
    "PlayerInfo\"1\n\017ScenePlayerExit\022\014\n\004guid\030\001 "
    "\002(\006\022\020\n\010scene_id\030\002 \002(\005\"\037\n\017PlayerLeaveZone"
    "\022\014\n\004guid\030\001 \002(\006", 1454);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ClientMove.proto", &protobuf_RegisterTypes);
  ClientClickMove::default_instance_ = new ClientClickMove();
  ClientPlayerMove::default_instance_ = new ClientPlayerMove();
  ClientPlayerStop::default_instance_ = new ClientPlayerStop();
  TeamMemberInfo::default_instance_ = new TeamMemberInfo();
  PlayerTeamData::default_instance_ = new PlayerTeamData();
  PlayerRunTimeStatus::default_instance_ = new PlayerRunTimeStatus();
  PlayerRunTimeStatusNotify::default_instance_ = new PlayerRunTimeStatusNotify();
  ScenePlayerInfo::default_instance_ = new ScenePlayerInfo();
  ScenePlayerList::default_instance_ = new ScenePlayerList();
  PlayerSceneInfoReq::default_instance_ = new PlayerSceneInfoReq();
  PlayerSceneInfoReply::default_instance_ = new PlayerSceneInfoReply();
  ScenePlayerExit::default_instance_ = new ScenePlayerExit();
  PlayerLeaveZone::default_instance_ = new PlayerLeaveZone();
  ClientClickMove::default_instance_->InitAsDefaultInstance();
  ClientPlayerMove::default_instance_->InitAsDefaultInstance();
  ClientPlayerStop::default_instance_->InitAsDefaultInstance();
  TeamMemberInfo::default_instance_->InitAsDefaultInstance();
  PlayerTeamData::default_instance_->InitAsDefaultInstance();
  PlayerRunTimeStatus::default_instance_->InitAsDefaultInstance();
  PlayerRunTimeStatusNotify::default_instance_->InitAsDefaultInstance();
  ScenePlayerInfo::default_instance_->InitAsDefaultInstance();
  ScenePlayerList::default_instance_->InitAsDefaultInstance();
  PlayerSceneInfoReq::default_instance_->InitAsDefaultInstance();
  PlayerSceneInfoReply::default_instance_->InitAsDefaultInstance();
  ScenePlayerExit::default_instance_->InitAsDefaultInstance();
  PlayerLeaveZone::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ClientMove_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ClientMove_2eproto {
  StaticDescriptorInitializer_ClientMove_2eproto() {
    protobuf_AddDesc_ClientMove_2eproto();
  }
} static_descriptor_initializer_ClientMove_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ClientClickMove::kGuidFieldNumber;
const int ClientClickMove::kStarPosFieldNumber;
const int ClientClickMove::kSubPositionsFieldNumber;
const int ClientClickMove::kSubPositionIndexFieldNumber;
#endif  // !_MSC_VER

ClientClickMove::ClientClickMove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientClickMove::InitAsDefaultInstance() {
  star_pos_ = const_cast< ::Packet::Position*>(&::Packet::Position::default_instance());
}

ClientClickMove::ClientClickMove(const ClientClickMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientClickMove::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  star_pos_ = NULL;
  sub_position_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientClickMove::~ClientClickMove() {
  SharedDtor();
}

void ClientClickMove::SharedDtor() {
  if (this != default_instance_) {
    delete star_pos_;
  }
}

void ClientClickMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientClickMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientClickMove_descriptor_;
}

const ClientClickMove& ClientClickMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientMove_2eproto();
  return *default_instance_;
}

ClientClickMove* ClientClickMove::default_instance_ = NULL;

ClientClickMove* ClientClickMove::New() const {
  return new ClientClickMove;
}

void ClientClickMove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    if (has_star_pos()) {
      if (star_pos_ != NULL) star_pos_->::Packet::Position::Clear();
    }
    sub_position_index_ = 0;
  }
  sub_positions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ClientClickMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_star_pos;
        break;
      }

      // optional .Packet.Position star_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_star_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_star_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sub_positions;
        break;
      }

      // repeated .Packet.Position sub_positions = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sub_positions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sub_positions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sub_positions;
        if (input->ExpectTag(32)) goto parse_sub_position_index;
        break;
      }

      // optional int32 sub_position_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_position_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_position_index_)));
          set_has_sub_position_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ClientClickMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // optional .Packet.Position star_pos = 2;
  if (has_star_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->star_pos(), output);
  }

  // repeated .Packet.Position sub_positions = 3;
  for (int i = 0; i < this->sub_positions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sub_positions(i), output);
  }

  // optional int32 sub_position_index = 4;
  if (has_sub_position_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sub_position_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientClickMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // optional .Packet.Position star_pos = 2;
  if (has_star_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->star_pos(), target);
  }

  // repeated .Packet.Position sub_positions = 3;
  for (int i = 0; i < this->sub_positions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sub_positions(i), target);
  }

  // optional int32 sub_position_index = 4;
  if (has_sub_position_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sub_position_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientClickMove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // optional .Packet.Position star_pos = 2;
    if (has_star_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->star_pos());
    }

    // optional int32 sub_position_index = 4;
    if (has_sub_position_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_position_index());
    }

  }
  // repeated .Packet.Position sub_positions = 3;
  total_size += 1 * this->sub_positions_size();
  for (int i = 0; i < this->sub_positions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sub_positions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientClickMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientClickMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientClickMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ClientClickMove::MergeFrom(const ClientClickMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  sub_positions_.MergeFrom(from.sub_positions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_star_pos()) {
      mutable_star_pos()->::Packet::Position::MergeFrom(from.star_pos());
    }
    if (from.has_sub_position_index()) {
      set_sub_position_index(from.sub_position_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ClientClickMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ClientClickMove::CopyFrom(const ClientClickMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ClientClickMove::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_star_pos()) {
    if (!this->star_pos().IsInitialized()) return false;
  }
  for (int i = 0; i < sub_positions_size(); i++) {
    if (!this->sub_positions(i).IsInitialized()) return false;
  }
  return true;
}

void ClientClickMove::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  if (has_star_pos()) {
    this->mutable_star_pos()->SetInitialized();
  }
  for (int i = 0; i < sub_positions_size(); i++) {
    this->mutable_sub_positions(i)->SetInitialized();
  }
  return;
}

void ClientClickMove::Swap(ClientClickMove* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(star_pos_, other->star_pos_);
    sub_positions_.Swap(&other->sub_positions_);
    std::swap(sub_position_index_, other->sub_position_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ClientClickMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientClickMove_descriptor_;
  metadata.reflection = ClientClickMove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientPlayerMove::kGuidFieldNumber;
const int ClientPlayerMove::kDirectionFieldNumber;
const int ClientPlayerMove::kMoveSpeedFieldNumber;
const int ClientPlayerMove::kMoveTimeFieldNumber;
const int ClientPlayerMove::kOldPosFieldNumber;
const int ClientPlayerMove::kNewPosFieldNumber;
const int ClientPlayerMove::kFollowFieldNumber;
#endif  // !_MSC_VER

ClientPlayerMove::ClientPlayerMove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientPlayerMove::InitAsDefaultInstance() {
  old_pos_ = const_cast< ::Packet::Position*>(&::Packet::Position::default_instance());
  new_pos_ = const_cast< ::Packet::Position*>(&::Packet::Position::default_instance());
}

ClientPlayerMove::ClientPlayerMove(const ClientPlayerMove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientPlayerMove::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  direction_ = 0;
  move_speed_ = 0u;
  move_time_ = 0u;
  old_pos_ = NULL;
  new_pos_ = NULL;
  follow_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientPlayerMove::~ClientPlayerMove() {
  SharedDtor();
}

void ClientPlayerMove::SharedDtor() {
  if (this != default_instance_) {
    delete old_pos_;
    delete new_pos_;
  }
}

void ClientPlayerMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientPlayerMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientPlayerMove_descriptor_;
}

const ClientPlayerMove& ClientPlayerMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientMove_2eproto();
  return *default_instance_;
}

ClientPlayerMove* ClientPlayerMove::default_instance_ = NULL;

ClientPlayerMove* ClientPlayerMove::New() const {
  return new ClientPlayerMove;
}

void ClientPlayerMove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    direction_ = 0;
    move_speed_ = 0u;
    move_time_ = 0u;
    if (has_old_pos()) {
      if (old_pos_ != NULL) old_pos_->::Packet::Position::Clear();
    }
    if (has_new_pos()) {
      if (new_pos_ != NULL) new_pos_->::Packet::Position::Clear();
    }
    follow_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ClientPlayerMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_direction;
        break;
      }

      // required float direction = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_move_speed;
        break;
      }

      // required fixed32 move_speed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_move_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &move_speed_)));
          set_has_move_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_move_time;
        break;
      }

      // required fixed32 move_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_move_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &move_time_)));
          set_has_move_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_old_pos;
        break;
      }

      // required .Packet.Position old_pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_new_pos;
        break;
      }

      // required .Packet.Position new_pos = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_follow;
        break;
      }

      // optional bool follow = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_follow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &follow_)));
          set_has_follow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ClientPlayerMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required float direction = 2;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->direction(), output);
  }

  // required fixed32 move_speed = 3;
  if (has_move_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->move_speed(), output);
  }

  // required fixed32 move_time = 4;
  if (has_move_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->move_time(), output);
  }

  // required .Packet.Position old_pos = 5;
  if (has_old_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->old_pos(), output);
  }

  // required .Packet.Position new_pos = 6;
  if (has_new_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->new_pos(), output);
  }

  // optional bool follow = 7;
  if (has_follow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->follow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientPlayerMove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required float direction = 2;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->direction(), target);
  }

  // required fixed32 move_speed = 3;
  if (has_move_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->move_speed(), target);
  }

  // required fixed32 move_time = 4;
  if (has_move_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->move_time(), target);
  }

  // required .Packet.Position old_pos = 5;
  if (has_old_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->old_pos(), target);
  }

  // required .Packet.Position new_pos = 6;
  if (has_new_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->new_pos(), target);
  }

  // optional bool follow = 7;
  if (has_follow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->follow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientPlayerMove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required float direction = 2;
    if (has_direction()) {
      total_size += 1 + 4;
    }

    // required fixed32 move_speed = 3;
    if (has_move_speed()) {
      total_size += 1 + 4;
    }

    // required fixed32 move_time = 4;
    if (has_move_time()) {
      total_size += 1 + 4;
    }

    // required .Packet.Position old_pos = 5;
    if (has_old_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_pos());
    }

    // required .Packet.Position new_pos = 6;
    if (has_new_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_pos());
    }

    // optional bool follow = 7;
    if (has_follow()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientPlayerMove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientPlayerMove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientPlayerMove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ClientPlayerMove::MergeFrom(const ClientPlayerMove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_move_speed()) {
      set_move_speed(from.move_speed());
    }
    if (from.has_move_time()) {
      set_move_time(from.move_time());
    }
    if (from.has_old_pos()) {
      mutable_old_pos()->::Packet::Position::MergeFrom(from.old_pos());
    }
    if (from.has_new_pos()) {
      mutable_new_pos()->::Packet::Position::MergeFrom(from.new_pos());
    }
    if (from.has_follow()) {
      set_follow(from.follow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ClientPlayerMove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ClientPlayerMove::CopyFrom(const ClientPlayerMove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ClientPlayerMove::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003e) != 0x0000003e) return false;

  if (has_old_pos()) {
    if (!this->old_pos().IsInitialized()) return false;
  }
  if (has_new_pos()) {
    if (!this->new_pos().IsInitialized()) return false;
  }
  return true;
}

void ClientPlayerMove::SetInitialized() {
  _has_bits_[0] |= 0x0000003e;

  if (has_old_pos()) {
    this->mutable_old_pos()->SetInitialized();
  }
  if (has_new_pos()) {
    this->mutable_new_pos()->SetInitialized();
  }
  return;
}

void ClientPlayerMove::Swap(ClientPlayerMove* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(direction_, other->direction_);
    std::swap(move_speed_, other->move_speed_);
    std::swap(move_time_, other->move_time_);
    std::swap(old_pos_, other->old_pos_);
    std::swap(new_pos_, other->new_pos_);
    std::swap(follow_, other->follow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ClientPlayerMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientPlayerMove_descriptor_;
  metadata.reflection = ClientPlayerMove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientPlayerStop::kGuidFieldNumber;
const int ClientPlayerStop::kOldPosFieldNumber;
const int ClientPlayerStop::kDirectionFieldNumber;
const int ClientPlayerStop::kStopPosFieldNumber;
const int ClientPlayerStop::kFollowFieldNumber;
#endif  // !_MSC_VER

ClientPlayerStop::ClientPlayerStop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientPlayerStop::InitAsDefaultInstance() {
  old_pos_ = const_cast< ::Packet::Position*>(&::Packet::Position::default_instance());
  stop_pos_ = const_cast< ::Packet::Position*>(&::Packet::Position::default_instance());
}

ClientPlayerStop::ClientPlayerStop(const ClientPlayerStop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientPlayerStop::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  old_pos_ = NULL;
  direction_ = 0;
  stop_pos_ = NULL;
  follow_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientPlayerStop::~ClientPlayerStop() {
  SharedDtor();
}

void ClientPlayerStop::SharedDtor() {
  if (this != default_instance_) {
    delete old_pos_;
    delete stop_pos_;
  }
}

void ClientPlayerStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientPlayerStop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientPlayerStop_descriptor_;
}

const ClientPlayerStop& ClientPlayerStop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientMove_2eproto();
  return *default_instance_;
}

ClientPlayerStop* ClientPlayerStop::default_instance_ = NULL;

ClientPlayerStop* ClientPlayerStop::New() const {
  return new ClientPlayerStop;
}

void ClientPlayerStop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    if (has_old_pos()) {
      if (old_pos_ != NULL) old_pos_->::Packet::Position::Clear();
    }
    direction_ = 0;
    if (has_stop_pos()) {
      if (stop_pos_ != NULL) stop_pos_->::Packet::Position::Clear();
    }
    follow_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ClientPlayerStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_old_pos;
        break;
      }

      // optional .Packet.Position old_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_direction;
        break;
      }

      // required float direction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stop_pos;
        break;
      }

      // required .Packet.Position stop_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stop_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_follow;
        break;
      }

      // optional bool follow = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_follow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &follow_)));
          set_has_follow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ClientPlayerStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // optional .Packet.Position old_pos = 2;
  if (has_old_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->old_pos(), output);
  }

  // required float direction = 3;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->direction(), output);
  }

  // required .Packet.Position stop_pos = 4;
  if (has_stop_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stop_pos(), output);
  }

  // optional bool follow = 5;
  if (has_follow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->follow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientPlayerStop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // optional .Packet.Position old_pos = 2;
  if (has_old_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->old_pos(), target);
  }

  // required float direction = 3;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->direction(), target);
  }

  // required .Packet.Position stop_pos = 4;
  if (has_stop_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stop_pos(), target);
  }

  // optional bool follow = 5;
  if (has_follow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->follow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientPlayerStop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // optional .Packet.Position old_pos = 2;
    if (has_old_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_pos());
    }

    // required float direction = 3;
    if (has_direction()) {
      total_size += 1 + 4;
    }

    // required .Packet.Position stop_pos = 4;
    if (has_stop_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stop_pos());
    }

    // optional bool follow = 5;
    if (has_follow()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientPlayerStop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientPlayerStop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientPlayerStop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ClientPlayerStop::MergeFrom(const ClientPlayerStop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_old_pos()) {
      mutable_old_pos()->::Packet::Position::MergeFrom(from.old_pos());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_stop_pos()) {
      mutable_stop_pos()->::Packet::Position::MergeFrom(from.stop_pos());
    }
    if (from.has_follow()) {
      set_follow(from.follow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ClientPlayerStop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ClientPlayerStop::CopyFrom(const ClientPlayerStop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ClientPlayerStop::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;

  if (has_old_pos()) {
    if (!this->old_pos().IsInitialized()) return false;
  }
  if (has_stop_pos()) {
    if (!this->stop_pos().IsInitialized()) return false;
  }
  return true;
}

void ClientPlayerStop::SetInitialized() {
  _has_bits_[0] |= 0x0000000c;

  if (has_old_pos()) {
    this->mutable_old_pos()->SetInitialized();
  }
  if (has_stop_pos()) {
    this->mutable_stop_pos()->SetInitialized();
  }
  return;
}

void ClientPlayerStop::Swap(ClientPlayerStop* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(old_pos_, other->old_pos_);
    std::swap(direction_, other->direction_);
    std::swap(stop_pos_, other->stop_pos_);
    std::swap(follow_, other->follow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ClientPlayerStop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientPlayerStop_descriptor_;
  metadata.reflection = ClientPlayerStop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamMemberInfo::kMemberidFieldNumber;
const int TeamMemberInfo::kTeamstatusFieldNumber;
#endif  // !_MSC_VER

TeamMemberInfo::TeamMemberInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamMemberInfo::InitAsDefaultInstance() {
}

TeamMemberInfo::TeamMemberInfo(const TeamMemberInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamMemberInfo::SharedCtor() {
  _cached_size_ = 0;
  memberid_ = GOOGLE_ULONGLONG(0);
  teamstatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamMemberInfo::~TeamMemberInfo() {
  SharedDtor();
}

void TeamMemberInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamMemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamMemberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamMemberInfo_descriptor_;
}

const TeamMemberInfo& TeamMemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientMove_2eproto();
  return *default_instance_;
}

TeamMemberInfo* TeamMemberInfo::default_instance_ = NULL;

TeamMemberInfo* TeamMemberInfo::New() const {
  return new TeamMemberInfo;
}

void TeamMemberInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    memberid_ = GOOGLE_ULONGLONG(0);
    teamstatus_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool TeamMemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 memberid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &memberid_)));
          set_has_memberid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_teamstatus;
        break;
      }

      // required .Packet.PlayerTeamStatus teamstatus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamstatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::PlayerTeamStatus_IsValid(value)) {
            set_teamstatus(static_cast< ::Packet::PlayerTeamStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void TeamMemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 memberid = 1;
  if (has_memberid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->memberid(), output);
  }

  // required .Packet.PlayerTeamStatus teamstatus = 2;
  if (has_teamstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->teamstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamMemberInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 memberid = 1;
  if (has_memberid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->memberid(), target);
  }

  // required .Packet.PlayerTeamStatus teamstatus = 2;
  if (has_teamstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->teamstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamMemberInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 memberid = 1;
    if (has_memberid()) {
      total_size += 1 + 8;
    }

    // required .Packet.PlayerTeamStatus teamstatus = 2;
    if (has_teamstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->teamstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamMemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamMemberInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamMemberInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void TeamMemberInfo::MergeFrom(const TeamMemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_memberid()) {
      set_memberid(from.memberid());
    }
    if (from.has_teamstatus()) {
      set_teamstatus(from.teamstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void TeamMemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void TeamMemberInfo::CopyFrom(const TeamMemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool TeamMemberInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TeamMemberInfo::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void TeamMemberInfo::Swap(TeamMemberInfo* other) {
  if (other != this) {
    std::swap(memberid_, other->memberid_);
    std::swap(teamstatus_, other->teamstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata TeamMemberInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamMemberInfo_descriptor_;
  metadata.reflection = TeamMemberInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerTeamData::kTeamidFieldNumber;
const int PlayerTeamData::kLeaderidFieldNumber;
const int PlayerTeamData::kArrangetypeFieldNumber;
const int PlayerTeamData::kGroupFieldNumber;
const int PlayerTeamData::kMemberFieldNumber;
const int PlayerTeamData::kRobotTeamFieldNumber;
#endif  // !_MSC_VER

PlayerTeamData::PlayerTeamData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerTeamData::InitAsDefaultInstance() {
}

PlayerTeamData::PlayerTeamData(const PlayerTeamData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerTeamData::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  leaderid_ = GOOGLE_ULONGLONG(0);
  arrangetype_ = -1;
  group_ = false;
  robot_team_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerTeamData::~PlayerTeamData() {
  SharedDtor();
}

void PlayerTeamData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerTeamData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerTeamData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerTeamData_descriptor_;
}

const PlayerTeamData& PlayerTeamData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientMove_2eproto();
  return *default_instance_;
}

PlayerTeamData* PlayerTeamData::default_instance_ = NULL;

PlayerTeamData* PlayerTeamData::New() const {
  return new PlayerTeamData;
}

void PlayerTeamData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = GOOGLE_ULONGLONG(0);
    leaderid_ = GOOGLE_ULONGLONG(0);
    arrangetype_ = -1;
    group_ = false;
    robot_team_ = false;
  }
  member_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerTeamData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 teamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_leaderid;
        break;
      }

      // required fixed64 leaderid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leaderid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &leaderid_)));
          set_has_leaderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_arrangetype;
        break;
      }

      // required .Packet.ArrangeType arrangetype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arrangetype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::ArrangeType_IsValid(value)) {
            set_arrangetype(static_cast< ::Packet::ArrangeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_group;
        break;
      }

      // required bool group = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_member;
        break;
      }

      // repeated .Packet.TeamMemberInfo member = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_member;
        if (input->ExpectTag(56)) goto parse_robot_team;
        break;
      }

      // optional bool robot_team = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robot_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &robot_team_)));
          set_has_robot_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerTeamData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 teamid = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->teamid(), output);
  }

  // required fixed64 leaderid = 3;
  if (has_leaderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->leaderid(), output);
  }

  // required .Packet.ArrangeType arrangetype = 4;
  if (has_arrangetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->arrangetype(), output);
  }

  // required bool group = 5;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->group(), output);
  }

  // repeated .Packet.TeamMemberInfo member = 6;
  for (int i = 0; i < this->member_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->member(i), output);
  }

  // optional bool robot_team = 7;
  if (has_robot_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->robot_team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerTeamData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 teamid = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->teamid(), target);
  }

  // required fixed64 leaderid = 3;
  if (has_leaderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->leaderid(), target);
  }

  // required .Packet.ArrangeType arrangetype = 4;
  if (has_arrangetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->arrangetype(), target);
  }

  // required bool group = 5;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->group(), target);
  }

  // repeated .Packet.TeamMemberInfo member = 6;
  for (int i = 0; i < this->member_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->member(i), target);
  }

  // optional bool robot_team = 7;
  if (has_robot_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->robot_team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerTeamData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 teamid = 1;
    if (has_teamid()) {
      total_size += 1 + 8;
    }

    // required fixed64 leaderid = 3;
    if (has_leaderid()) {
      total_size += 1 + 8;
    }

    // required .Packet.ArrangeType arrangetype = 4;
    if (has_arrangetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->arrangetype());
    }

    // required bool group = 5;
    if (has_group()) {
      total_size += 1 + 1;
    }

    // optional bool robot_team = 7;
    if (has_robot_team()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Packet.TeamMemberInfo member = 6;
  total_size += 1 * this->member_size();
  for (int i = 0; i < this->member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerTeamData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerTeamData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerTeamData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerTeamData::MergeFrom(const PlayerTeamData& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_.MergeFrom(from.member_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_leaderid()) {
      set_leaderid(from.leaderid());
    }
    if (from.has_arrangetype()) {
      set_arrangetype(from.arrangetype());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_robot_team()) {
      set_robot_team(from.robot_team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerTeamData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerTeamData::CopyFrom(const PlayerTeamData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerTeamData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  for (int i = 0; i < member_size(); i++) {
    if (!this->member(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerTeamData::SetInitialized() {
  _has_bits_[0] |= 0x0000000f;

  for (int i = 0; i < member_size(); i++) {
    this->mutable_member(i)->SetInitialized();
  }
  return;
}

void PlayerTeamData::Swap(PlayerTeamData* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(leaderid_, other->leaderid_);
    std::swap(arrangetype_, other->arrangetype_);
    std::swap(group_, other->group_);
    member_.Swap(&other->member_);
    std::swap(robot_team_, other->robot_team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerTeamData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerTeamData_descriptor_;
  metadata.reflection = PlayerTeamData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerRunTimeStatus::kOnHookFieldNumber;
const int PlayerRunTimeStatus::kInBattleFieldNumber;
const int PlayerRunTimeStatus::kTeamFieldNumber;
const int PlayerRunTimeStatus::kGuildpositionFieldNumber;
#endif  // !_MSC_VER

PlayerRunTimeStatus::PlayerRunTimeStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerRunTimeStatus::InitAsDefaultInstance() {
  team_ = const_cast< ::Packet::PlayerTeamData*>(&::Packet::PlayerTeamData::default_instance());
}

PlayerRunTimeStatus::PlayerRunTimeStatus(const PlayerRunTimeStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerRunTimeStatus::SharedCtor() {
  _cached_size_ = 0;
  on_hook_ = false;
  in_battle_ = false;
  team_ = NULL;
  guildposition_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerRunTimeStatus::~PlayerRunTimeStatus() {
  SharedDtor();
}

void PlayerRunTimeStatus::SharedDtor() {
  if (this != default_instance_) {
    delete team_;
  }
}

void PlayerRunTimeStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerRunTimeStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerRunTimeStatus_descriptor_;
}

const PlayerRunTimeStatus& PlayerRunTimeStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientMove_2eproto();
  return *default_instance_;
}

PlayerRunTimeStatus* PlayerRunTimeStatus::default_instance_ = NULL;

PlayerRunTimeStatus* PlayerRunTimeStatus::New() const {
  return new PlayerRunTimeStatus;
}

void PlayerRunTimeStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    on_hook_ = false;
    in_battle_ = false;
    if (has_team()) {
      if (team_ != NULL) team_->::Packet::PlayerTeamData::Clear();
    }
    guildposition_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerRunTimeStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool on_hook = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &on_hook_)));
          set_has_on_hook();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_in_battle;
        break;
      }

      // required bool in_battle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in_battle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_battle_)));
          set_has_in_battle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_team;
        break;
      }

      // required .Packet.PlayerTeamData team = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_guildposition;
        break;
      }

      // required .Packet.GuildPosition guildposition = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildposition:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::GuildPosition_IsValid(value)) {
            set_guildposition(static_cast< ::Packet::GuildPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerRunTimeStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool on_hook = 1;
  if (has_on_hook()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->on_hook(), output);
  }

  // required bool in_battle = 2;
  if (has_in_battle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->in_battle(), output);
  }

  // required .Packet.PlayerTeamData team = 3;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->team(), output);
  }

  // required .Packet.GuildPosition guildposition = 4;
  if (has_guildposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->guildposition(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerRunTimeStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool on_hook = 1;
  if (has_on_hook()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->on_hook(), target);
  }

  // required bool in_battle = 2;
  if (has_in_battle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->in_battle(), target);
  }

  // required .Packet.PlayerTeamData team = 3;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->team(), target);
  }

  // required .Packet.GuildPosition guildposition = 4;
  if (has_guildposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->guildposition(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerRunTimeStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool on_hook = 1;
    if (has_on_hook()) {
      total_size += 1 + 1;
    }

    // required bool in_battle = 2;
    if (has_in_battle()) {
      total_size += 1 + 1;
    }

    // required .Packet.PlayerTeamData team = 3;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team());
    }

    // required .Packet.GuildPosition guildposition = 4;
    if (has_guildposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->guildposition());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerRunTimeStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerRunTimeStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerRunTimeStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerRunTimeStatus::MergeFrom(const PlayerRunTimeStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_on_hook()) {
      set_on_hook(from.on_hook());
    }
    if (from.has_in_battle()) {
      set_in_battle(from.in_battle());
    }
    if (from.has_team()) {
      mutable_team()->::Packet::PlayerTeamData::MergeFrom(from.team());
    }
    if (from.has_guildposition()) {
      set_guildposition(from.guildposition());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerRunTimeStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerRunTimeStatus::CopyFrom(const PlayerRunTimeStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerRunTimeStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_team()) {
    if (!this->team().IsInitialized()) return false;
  }
  return true;
}

void PlayerRunTimeStatus::SetInitialized() {
  _has_bits_[0] |= 0x0000000f;

  if (has_team()) {
    this->mutable_team()->SetInitialized();
  }
  return;
}

void PlayerRunTimeStatus::Swap(PlayerRunTimeStatus* other) {
  if (other != this) {
    std::swap(on_hook_, other->on_hook_);
    std::swap(in_battle_, other->in_battle_);
    std::swap(team_, other->team_);
    std::swap(guildposition_, other->guildposition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerRunTimeStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerRunTimeStatus_descriptor_;
  metadata.reflection = PlayerRunTimeStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerRunTimeStatusNotify::kGuidFieldNumber;
const int PlayerRunTimeStatusNotify::kStatusFieldNumber;
#endif  // !_MSC_VER

PlayerRunTimeStatusNotify::PlayerRunTimeStatusNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerRunTimeStatusNotify::InitAsDefaultInstance() {
  status_ = const_cast< ::Packet::PlayerRunTimeStatus*>(&::Packet::PlayerRunTimeStatus::default_instance());
}

PlayerRunTimeStatusNotify::PlayerRunTimeStatusNotify(const PlayerRunTimeStatusNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerRunTimeStatusNotify::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerRunTimeStatusNotify::~PlayerRunTimeStatusNotify() {
  SharedDtor();
}

void PlayerRunTimeStatusNotify::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void PlayerRunTimeStatusNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerRunTimeStatusNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerRunTimeStatusNotify_descriptor_;
}

const PlayerRunTimeStatusNotify& PlayerRunTimeStatusNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientMove_2eproto();
  return *default_instance_;
}

PlayerRunTimeStatusNotify* PlayerRunTimeStatusNotify::default_instance_ = NULL;

PlayerRunTimeStatusNotify* PlayerRunTimeStatusNotify::New() const {
  return new PlayerRunTimeStatusNotify;
}

void PlayerRunTimeStatusNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    if (has_status()) {
      if (status_ != NULL) status_->::Packet::PlayerRunTimeStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerRunTimeStatusNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }

      // required .Packet.PlayerRunTimeStatus status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerRunTimeStatusNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required .Packet.PlayerRunTimeStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerRunTimeStatusNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required .Packet.PlayerRunTimeStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerRunTimeStatusNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required .Packet.PlayerRunTimeStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerRunTimeStatusNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerRunTimeStatusNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerRunTimeStatusNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerRunTimeStatusNotify::MergeFrom(const PlayerRunTimeStatusNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_status()) {
      mutable_status()->::Packet::PlayerRunTimeStatus::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerRunTimeStatusNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerRunTimeStatusNotify::CopyFrom(const PlayerRunTimeStatusNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerRunTimeStatusNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void PlayerRunTimeStatusNotify::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  if (has_status()) {
    this->mutable_status()->SetInitialized();
  }
  return;
}

void PlayerRunTimeStatusNotify::Swap(PlayerRunTimeStatusNotify* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerRunTimeStatusNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerRunTimeStatusNotify_descriptor_;
  metadata.reflection = PlayerRunTimeStatusNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScenePlayerInfo::kBasicInfoFieldNumber;
const int ScenePlayerInfo::kMainEquipsFieldNumber;
const int ScenePlayerInfo::kRuntimeStatusFieldNumber;
#endif  // !_MSC_VER

ScenePlayerInfo::ScenePlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScenePlayerInfo::InitAsDefaultInstance() {
  basic_info_ = const_cast< ::Packet::PlayerBasicInfo*>(&::Packet::PlayerBasicInfo::default_instance());
  runtime_status_ = const_cast< ::Packet::PlayerRunTimeStatus*>(&::Packet::PlayerRunTimeStatus::default_instance());
}

ScenePlayerInfo::ScenePlayerInfo(const ScenePlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScenePlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  basic_info_ = NULL;
  runtime_status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScenePlayerInfo::~ScenePlayerInfo() {
  SharedDtor();
}

void ScenePlayerInfo::SharedDtor() {
  if (this != default_instance_) {
    delete basic_info_;
    delete runtime_status_;
  }
}

void ScenePlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScenePlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScenePlayerInfo_descriptor_;
}

const ScenePlayerInfo& ScenePlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientMove_2eproto();
  return *default_instance_;
}

ScenePlayerInfo* ScenePlayerInfo::default_instance_ = NULL;

ScenePlayerInfo* ScenePlayerInfo::New() const {
  return new ScenePlayerInfo;
}

void ScenePlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_basic_info()) {
      if (basic_info_ != NULL) basic_info_->::Packet::PlayerBasicInfo::Clear();
    }
    if (has_runtime_status()) {
      if (runtime_status_ != NULL) runtime_status_->::Packet::PlayerRunTimeStatus::Clear();
    }
  }
  main_equips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ScenePlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.PlayerBasicInfo basic_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basic_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_main_equips;
        break;
      }

      // repeated .Packet.EquipItem main_equips = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_main_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_main_equips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_main_equips;
        if (input->ExpectTag(26)) goto parse_runtime_status;
        break;
      }

      // optional .Packet.PlayerRunTimeStatus runtime_status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_runtime_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_runtime_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ScenePlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.PlayerBasicInfo basic_info = 1;
  if (has_basic_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->basic_info(), output);
  }

  // repeated .Packet.EquipItem main_equips = 2;
  for (int i = 0; i < this->main_equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->main_equips(i), output);
  }

  // optional .Packet.PlayerRunTimeStatus runtime_status = 3;
  if (has_runtime_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->runtime_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScenePlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.PlayerBasicInfo basic_info = 1;
  if (has_basic_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->basic_info(), target);
  }

  // repeated .Packet.EquipItem main_equips = 2;
  for (int i = 0; i < this->main_equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->main_equips(i), target);
  }

  // optional .Packet.PlayerRunTimeStatus runtime_status = 3;
  if (has_runtime_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->runtime_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScenePlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.PlayerBasicInfo basic_info = 1;
    if (has_basic_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basic_info());
    }

    // optional .Packet.PlayerRunTimeStatus runtime_status = 3;
    if (has_runtime_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->runtime_status());
    }

  }
  // repeated .Packet.EquipItem main_equips = 2;
  total_size += 1 * this->main_equips_size();
  for (int i = 0; i < this->main_equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->main_equips(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScenePlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScenePlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScenePlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ScenePlayerInfo::MergeFrom(const ScenePlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  main_equips_.MergeFrom(from.main_equips_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_basic_info()) {
      mutable_basic_info()->::Packet::PlayerBasicInfo::MergeFrom(from.basic_info());
    }
    if (from.has_runtime_status()) {
      mutable_runtime_status()->::Packet::PlayerRunTimeStatus::MergeFrom(from.runtime_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ScenePlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ScenePlayerInfo::CopyFrom(const ScenePlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ScenePlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_basic_info()) {
    if (!this->basic_info().IsInitialized()) return false;
  }
  for (int i = 0; i < main_equips_size(); i++) {
    if (!this->main_equips(i).IsInitialized()) return false;
  }
  if (has_runtime_status()) {
    if (!this->runtime_status().IsInitialized()) return false;
  }
  return true;
}

void ScenePlayerInfo::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  if (has_basic_info()) {
    this->mutable_basic_info()->SetInitialized();
  }
  for (int i = 0; i < main_equips_size(); i++) {
    this->mutable_main_equips(i)->SetInitialized();
  }
  if (has_runtime_status()) {
    this->mutable_runtime_status()->SetInitialized();
  }
  return;
}

void ScenePlayerInfo::Swap(ScenePlayerInfo* other) {
  if (other != this) {
    std::swap(basic_info_, other->basic_info_);
    main_equips_.Swap(&other->main_equips_);
    std::swap(runtime_status_, other->runtime_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ScenePlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScenePlayerInfo_descriptor_;
  metadata.reflection = ScenePlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScenePlayerList::kPlayerListFieldNumber;
#endif  // !_MSC_VER

ScenePlayerList::ScenePlayerList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScenePlayerList::InitAsDefaultInstance() {
}

ScenePlayerList::ScenePlayerList(const ScenePlayerList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScenePlayerList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScenePlayerList::~ScenePlayerList() {
  SharedDtor();
}

void ScenePlayerList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScenePlayerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScenePlayerList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScenePlayerList_descriptor_;
}

const ScenePlayerList& ScenePlayerList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientMove_2eproto();
  return *default_instance_;
}

ScenePlayerList* ScenePlayerList::default_instance_ = NULL;

ScenePlayerList* ScenePlayerList::New() const {
  return new ScenePlayerList;
}

void ScenePlayerList::Clear() {
  player_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ScenePlayerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.ScenePlayerInfo player_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_player_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ScenePlayerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.ScenePlayerInfo player_list = 1;
  for (int i = 0; i < this->player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScenePlayerList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.ScenePlayerInfo player_list = 1;
  for (int i = 0; i < this->player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScenePlayerList::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.ScenePlayerInfo player_list = 1;
  total_size += 1 * this->player_list_size();
  for (int i = 0; i < this->player_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScenePlayerList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScenePlayerList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScenePlayerList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ScenePlayerList::MergeFrom(const ScenePlayerList& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_list_.MergeFrom(from.player_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ScenePlayerList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ScenePlayerList::CopyFrom(const ScenePlayerList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ScenePlayerList::IsInitialized() const {

  for (int i = 0; i < player_list_size(); i++) {
    if (!this->player_list(i).IsInitialized()) return false;
  }
  return true;
}

void ScenePlayerList::SetInitialized() {

  for (int i = 0; i < player_list_size(); i++) {
    this->mutable_player_list(i)->SetInitialized();
  }
  return;
}

void ScenePlayerList::Swap(ScenePlayerList* other) {
  if (other != this) {
    player_list_.Swap(&other->player_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ScenePlayerList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScenePlayerList_descriptor_;
  metadata.reflection = ScenePlayerList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerSceneInfoReq::kGuidFieldNumber;
#endif  // !_MSC_VER

PlayerSceneInfoReq::PlayerSceneInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerSceneInfoReq::InitAsDefaultInstance() {
}

PlayerSceneInfoReq::PlayerSceneInfoReq(const PlayerSceneInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerSceneInfoReq::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerSceneInfoReq::~PlayerSceneInfoReq() {
  SharedDtor();
}

void PlayerSceneInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerSceneInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerSceneInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerSceneInfoReq_descriptor_;
}

const PlayerSceneInfoReq& PlayerSceneInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientMove_2eproto();
  return *default_instance_;
}

PlayerSceneInfoReq* PlayerSceneInfoReq::default_instance_ = NULL;

PlayerSceneInfoReq* PlayerSceneInfoReq::New() const {
  return new PlayerSceneInfoReq;
}

void PlayerSceneInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerSceneInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerSceneInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerSceneInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerSceneInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerSceneInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerSceneInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerSceneInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerSceneInfoReq::MergeFrom(const PlayerSceneInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerSceneInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerSceneInfoReq::CopyFrom(const PlayerSceneInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerSceneInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayerSceneInfoReq::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void PlayerSceneInfoReq::Swap(PlayerSceneInfoReq* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerSceneInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerSceneInfoReq_descriptor_;
  metadata.reflection = PlayerSceneInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerSceneInfoReply::kOptinfoFieldNumber;
#endif  // !_MSC_VER

PlayerSceneInfoReply::PlayerSceneInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerSceneInfoReply::InitAsDefaultInstance() {
  optinfo_ = const_cast< ::Packet::ScenePlayerInfo*>(&::Packet::ScenePlayerInfo::default_instance());
}

PlayerSceneInfoReply::PlayerSceneInfoReply(const PlayerSceneInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerSceneInfoReply::SharedCtor() {
  _cached_size_ = 0;
  optinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerSceneInfoReply::~PlayerSceneInfoReply() {
  SharedDtor();
}

void PlayerSceneInfoReply::SharedDtor() {
  if (this != default_instance_) {
    delete optinfo_;
  }
}

void PlayerSceneInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerSceneInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerSceneInfoReply_descriptor_;
}

const PlayerSceneInfoReply& PlayerSceneInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientMove_2eproto();
  return *default_instance_;
}

PlayerSceneInfoReply* PlayerSceneInfoReply::default_instance_ = NULL;

PlayerSceneInfoReply* PlayerSceneInfoReply::New() const {
  return new PlayerSceneInfoReply;
}

void PlayerSceneInfoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_optinfo()) {
      if (optinfo_ != NULL) optinfo_->::Packet::ScenePlayerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerSceneInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.ScenePlayerInfo optinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_optinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerSceneInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.ScenePlayerInfo optinfo = 1;
  if (has_optinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->optinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerSceneInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.ScenePlayerInfo optinfo = 1;
  if (has_optinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->optinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerSceneInfoReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.ScenePlayerInfo optinfo = 1;
    if (has_optinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->optinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerSceneInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerSceneInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerSceneInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerSceneInfoReply::MergeFrom(const PlayerSceneInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_optinfo()) {
      mutable_optinfo()->::Packet::ScenePlayerInfo::MergeFrom(from.optinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerSceneInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerSceneInfoReply::CopyFrom(const PlayerSceneInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerSceneInfoReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_optinfo()) {
    if (!this->optinfo().IsInitialized()) return false;
  }
  return true;
}

void PlayerSceneInfoReply::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  if (has_optinfo()) {
    this->mutable_optinfo()->SetInitialized();
  }
  return;
}

void PlayerSceneInfoReply::Swap(PlayerSceneInfoReply* other) {
  if (other != this) {
    std::swap(optinfo_, other->optinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerSceneInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerSceneInfoReply_descriptor_;
  metadata.reflection = PlayerSceneInfoReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScenePlayerExit::kGuidFieldNumber;
const int ScenePlayerExit::kSceneIdFieldNumber;
#endif  // !_MSC_VER

ScenePlayerExit::ScenePlayerExit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScenePlayerExit::InitAsDefaultInstance() {
}

ScenePlayerExit::ScenePlayerExit(const ScenePlayerExit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScenePlayerExit::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  scene_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScenePlayerExit::~ScenePlayerExit() {
  SharedDtor();
}

void ScenePlayerExit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScenePlayerExit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScenePlayerExit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScenePlayerExit_descriptor_;
}

const ScenePlayerExit& ScenePlayerExit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientMove_2eproto();
  return *default_instance_;
}

ScenePlayerExit* ScenePlayerExit::default_instance_ = NULL;

ScenePlayerExit* ScenePlayerExit::New() const {
  return new ScenePlayerExit;
}

void ScenePlayerExit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    scene_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ScenePlayerExit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_id;
        break;
      }

      // required int32 scene_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ScenePlayerExit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required int32 scene_id = 2;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->scene_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScenePlayerExit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required int32 scene_id = 2;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->scene_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScenePlayerExit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required int32 scene_id = 2;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScenePlayerExit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScenePlayerExit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScenePlayerExit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ScenePlayerExit::MergeFrom(const ScenePlayerExit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ScenePlayerExit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ScenePlayerExit::CopyFrom(const ScenePlayerExit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ScenePlayerExit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ScenePlayerExit::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void ScenePlayerExit::Swap(ScenePlayerExit* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ScenePlayerExit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScenePlayerExit_descriptor_;
  metadata.reflection = ScenePlayerExit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerLeaveZone::kGuidFieldNumber;
#endif  // !_MSC_VER

PlayerLeaveZone::PlayerLeaveZone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerLeaveZone::InitAsDefaultInstance() {
}

PlayerLeaveZone::PlayerLeaveZone(const PlayerLeaveZone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerLeaveZone::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerLeaveZone::~PlayerLeaveZone() {
  SharedDtor();
}

void PlayerLeaveZone::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerLeaveZone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerLeaveZone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerLeaveZone_descriptor_;
}

const PlayerLeaveZone& PlayerLeaveZone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientMove_2eproto();
  return *default_instance_;
}

PlayerLeaveZone* PlayerLeaveZone::default_instance_ = NULL;

PlayerLeaveZone* PlayerLeaveZone::New() const {
  return new PlayerLeaveZone;
}

void PlayerLeaveZone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerLeaveZone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerLeaveZone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerLeaveZone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerLeaveZone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerLeaveZone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerLeaveZone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerLeaveZone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerLeaveZone::MergeFrom(const PlayerLeaveZone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerLeaveZone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerLeaveZone::CopyFrom(const PlayerLeaveZone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerLeaveZone::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayerLeaveZone::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void PlayerLeaveZone::Swap(PlayerLeaveZone* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerLeaveZone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerLeaveZone_descriptor_;
  metadata.reflection = PlayerLeaveZone_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

// @@protoc_insertion_point(global_scope)
