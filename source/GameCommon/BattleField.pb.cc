// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BattleField.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BattleField.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Packet {

namespace {

const ::google::protobuf::Descriptor* BFConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BFConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleFeildProxy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleFeildProxy_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleRoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleRoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleFieldPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleFieldPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleFieldInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleFieldInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinBattleRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinBattleRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveBattleRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveBattleRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveBattleField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveBattleField_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgreeEnterBattleField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgreeEnterBattleField_reflection_ = NULL;
const ::google::protobuf::Descriptor* DisAgreeEnterBattleField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DisAgreeEnterBattleField_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterRoomNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterRoomNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterBattleFieldNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterBattleFieldNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* BeginBattleFieldNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeginBattleFieldNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* BeginBattleField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeginBattleField_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleFieldFightTarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleFieldFightTarget_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlagOprate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlagOprate_reflection_ = NULL;
const ::google::protobuf::Descriptor* BfResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BfResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BattleField_2eproto() {
  protobuf_AddDesc_BattleField_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BattleField.proto");
  GOOGLE_CHECK(file != NULL);
  BFConfig_descriptor_ = file->message_type(0);
  static const int BFConfig_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFConfig, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFConfig, win_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFConfig, win_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFConfig, lose_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFConfig, lose_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFConfig, get_flag_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFConfig, get_flag_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFConfig, battle_win_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFConfig, battle_win_gold_),
  };
  BFConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BFConfig_descriptor_,
      BFConfig::default_instance_,
      BFConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BFConfig));
  BattleFeildProxy_descriptor_ = file->message_type(1);
  static const int BattleFeildProxy_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFeildProxy, raid_rtid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFeildProxy, bf_state_),
  };
  BattleFeildProxy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleFeildProxy_descriptor_,
      BattleFeildProxy::default_instance_,
      BattleFeildProxy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFeildProxy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFeildProxy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleFeildProxy));
  BattleRoomInfo_descriptor_ = file->message_type(2);
  static const int BattleRoomInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRoomInfo, min_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRoomInfo, max_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRoomInfo, max_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRoomInfo, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRoomInfo, bf_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRoomInfo, players_),
  };
  BattleRoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleRoomInfo_descriptor_,
      BattleRoomInfo::default_instance_,
      BattleRoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleRoomInfo));
  BattleFieldPlayerInfo_descriptor_ = file->message_type(3);
  static const int BattleFieldPlayerInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFieldPlayerInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFieldPlayerInfo, kill_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFieldPlayerInfo, dead_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFieldPlayerInfo, get_flag_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFieldPlayerInfo, return_flag_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFieldPlayerInfo, honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFieldPlayerInfo, has_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFieldPlayerInfo, bf_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFieldPlayerInfo, locked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFieldPlayerInfo, dead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFieldPlayerInfo, old_camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFieldPlayerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFieldPlayerInfo, prof_),
  };
  BattleFieldPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleFieldPlayerInfo_descriptor_,
      BattleFieldPlayerInfo::default_instance_,
      BattleFieldPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFieldPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFieldPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleFieldPlayerInfo));
  BattleFieldInfo_descriptor_ = file->message_type(4);
  static const int BattleFieldInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFieldInfo, attackers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFieldInfo, defenders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFieldInfo, attacker_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFieldInfo, defender_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFieldInfo, attacker_flag_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFieldInfo, defender_flag_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFieldInfo, attacker_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFieldInfo, defender_point_),
  };
  BattleFieldInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleFieldInfo_descriptor_,
      BattleFieldInfo::default_instance_,
      BattleFieldInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFieldInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFieldInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleFieldInfo));
  JoinBattleRoom_descriptor_ = file->message_type(5);
  static const int JoinBattleRoom_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinBattleRoom, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinBattleRoom, npc_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinBattleRoom, script_id_),
  };
  JoinBattleRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinBattleRoom_descriptor_,
      JoinBattleRoom::default_instance_,
      JoinBattleRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinBattleRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinBattleRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinBattleRoom));
  LeaveBattleRoom_descriptor_ = file->message_type(6);
  static const int LeaveBattleRoom_offsets_[1] = {
  };
  LeaveBattleRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaveBattleRoom_descriptor_,
      LeaveBattleRoom::default_instance_,
      LeaveBattleRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveBattleRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveBattleRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaveBattleRoom));
  LeaveBattleField_descriptor_ = file->message_type(7);
  static const int LeaveBattleField_offsets_[1] = {
  };
  LeaveBattleField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaveBattleField_descriptor_,
      LeaveBattleField::default_instance_,
      LeaveBattleField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveBattleField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveBattleField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaveBattleField));
  AgreeEnterBattleField_descriptor_ = file->message_type(8);
  static const int AgreeEnterBattleField_offsets_[1] = {
  };
  AgreeEnterBattleField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgreeEnterBattleField_descriptor_,
      AgreeEnterBattleField::default_instance_,
      AgreeEnterBattleField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgreeEnterBattleField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgreeEnterBattleField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgreeEnterBattleField));
  DisAgreeEnterBattleField_descriptor_ = file->message_type(9);
  static const int DisAgreeEnterBattleField_offsets_[1] = {
  };
  DisAgreeEnterBattleField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DisAgreeEnterBattleField_descriptor_,
      DisAgreeEnterBattleField::default_instance_,
      DisAgreeEnterBattleField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisAgreeEnterBattleField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisAgreeEnterBattleField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DisAgreeEnterBattleField));
  EnterRoomNotify_descriptor_ = file->message_type(10);
  static const int EnterRoomNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomNotify, time_),
  };
  EnterRoomNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterRoomNotify_descriptor_,
      EnterRoomNotify::default_instance_,
      EnterRoomNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterRoomNotify));
  EnterBattleFieldNotify_descriptor_ = file->message_type(11);
  static const int EnterBattleFieldNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterBattleFieldNotify, time_),
  };
  EnterBattleFieldNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterBattleFieldNotify_descriptor_,
      EnterBattleFieldNotify::default_instance_,
      EnterBattleFieldNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterBattleFieldNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterBattleFieldNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterBattleFieldNotify));
  BeginBattleFieldNotify_descriptor_ = file->message_type(12);
  static const int BeginBattleFieldNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginBattleFieldNotify, time_),
  };
  BeginBattleFieldNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BeginBattleFieldNotify_descriptor_,
      BeginBattleFieldNotify::default_instance_,
      BeginBattleFieldNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginBattleFieldNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginBattleFieldNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BeginBattleFieldNotify));
  BeginBattleField_descriptor_ = file->message_type(13);
  static const int BeginBattleField_offsets_[1] = {
  };
  BeginBattleField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BeginBattleField_descriptor_,
      BeginBattleField::default_instance_,
      BeginBattleField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginBattleField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginBattleField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BeginBattleField));
  BattleFieldFightTarget_descriptor_ = file->message_type(14);
  static const int BattleFieldFightTarget_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFieldFightTarget, target_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFieldFightTarget, battle_group_id_),
  };
  BattleFieldFightTarget_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleFieldFightTarget_descriptor_,
      BattleFieldFightTarget::default_instance_,
      BattleFieldFightTarget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFieldFightTarget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFieldFightTarget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleFieldFightTarget));
  FlagOprate_descriptor_ = file->message_type(15);
  static const int FlagOprate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlagOprate, option_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlagOprate, guid_),
  };
  FlagOprate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlagOprate_descriptor_,
      FlagOprate::default_instance_,
      FlagOprate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlagOprate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlagOprate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlagOprate));
  BfResult_descriptor_ = file->message_type(16);
  static const int BfResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfResult, winner_),
  };
  BfResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BfResult_descriptor_,
      BfResult::default_instance_,
      BfResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BfResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BattleField_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BFConfig_descriptor_, &BFConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleFeildProxy_descriptor_, &BattleFeildProxy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleRoomInfo_descriptor_, &BattleRoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleFieldPlayerInfo_descriptor_, &BattleFieldPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleFieldInfo_descriptor_, &BattleFieldInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinBattleRoom_descriptor_, &JoinBattleRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaveBattleRoom_descriptor_, &LeaveBattleRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaveBattleField_descriptor_, &LeaveBattleField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgreeEnterBattleField_descriptor_, &AgreeEnterBattleField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DisAgreeEnterBattleField_descriptor_, &DisAgreeEnterBattleField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterRoomNotify_descriptor_, &EnterRoomNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterBattleFieldNotify_descriptor_, &EnterBattleFieldNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BeginBattleFieldNotify_descriptor_, &BeginBattleFieldNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BeginBattleField_descriptor_, &BeginBattleField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleFieldFightTarget_descriptor_, &BattleFieldFightTarget::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlagOprate_descriptor_, &FlagOprate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BfResult_descriptor_, &BfResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BattleField_2eproto() {
  delete BFConfig::default_instance_;
  delete BFConfig_reflection_;
  delete BattleFeildProxy::default_instance_;
  delete BattleFeildProxy_reflection_;
  delete BattleRoomInfo::default_instance_;
  delete BattleRoomInfo_reflection_;
  delete BattleFieldPlayerInfo::default_instance_;
  delete BattleFieldPlayerInfo_reflection_;
  delete BattleFieldInfo::default_instance_;
  delete BattleFieldInfo_reflection_;
  delete JoinBattleRoom::default_instance_;
  delete JoinBattleRoom_reflection_;
  delete LeaveBattleRoom::default_instance_;
  delete LeaveBattleRoom_reflection_;
  delete LeaveBattleField::default_instance_;
  delete LeaveBattleField_reflection_;
  delete AgreeEnterBattleField::default_instance_;
  delete AgreeEnterBattleField_reflection_;
  delete DisAgreeEnterBattleField::default_instance_;
  delete DisAgreeEnterBattleField_reflection_;
  delete EnterRoomNotify::default_instance_;
  delete EnterRoomNotify_reflection_;
  delete EnterBattleFieldNotify::default_instance_;
  delete EnterBattleFieldNotify_reflection_;
  delete BeginBattleFieldNotify::default_instance_;
  delete BeginBattleFieldNotify_reflection_;
  delete BeginBattleField::default_instance_;
  delete BeginBattleField_reflection_;
  delete BattleFieldFightTarget::default_instance_;
  delete BattleFieldFightTarget_reflection_;
  delete FlagOprate::default_instance_;
  delete FlagOprate_reflection_;
  delete BfResult::default_instance_;
  delete BfResult_reflection_;
}

void protobuf_AddDesc_BattleField_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Packet::protobuf_AddDesc_AllPacketEnum_2eproto();
  ::Config::protobuf_AddDesc_AllConfigEnum_2eproto();
  ::Packet::protobuf_AddDesc_Base_2eproto();
  ::Packet::protobuf_AddDesc_ProtoBufOption_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021BattleField.proto\022\006Packet\032\023AllPacketEn"
    "um.proto\032\023AllConfigEnum.proto\032\nBase.prot"
    "o\032\024ProtoBufOption.proto\"\277\001\n\010BFConfig\022\r\n\005"
    "level\030\001 \002(\005\022\017\n\007win_exp\030\002 \002(\005\022\020\n\010win_gold"
    "\030\003 \002(\005\022\020\n\010lose_exp\030\004 \002(\005\022\021\n\tlose_gold\030\005 "
    "\002(\005\022\024\n\014get_flag_exp\030\006 \002(\005\022\025\n\rget_flag_go"
    "ld\030\007 \002(\005\022\026\n\016battle_win_exp\030\010 \002(\005\022\027\n\017batt"
    "le_win_gold\030\t \002(\005\"H\n\020BattleFeildProxy\022\021\n"
    "\traid_rtid\030\001 \002(\005\022!\n\010bf_state\030\002 \002(\0162\017.Con"
    "fig.BFState\"\275\001\n\016BattleRoomInfo\022\021\n\tmin_le"
    "vel\030\001 \002(\005\022\021\n\tmax_level\030\002 \002(\005\022\021\n\tmax_coun"
    "t\030\003 \002(\005\022\020\n\010scene_id\030\004 \002(\005\022*\n\010bf_state\030\005 "
    "\002(\0162\030.Packet.BattleFieldState\0224\n\007players"
    "\030\006 \003(\0132\035.Packet.BattleFieldPlayerInfoB\004\300"
    "\363\030\024\"\246\002\n\025BattleFieldPlayerInfo\022\014\n\004guid\030\001 "
    "\002(\006\022\020\n\010kill_num\030\002 \002(\005\022\020\n\010dead_num\030\003 \002(\005\022"
    "\024\n\014get_flag_num\030\004 \002(\005\022\027\n\017return_flag_num"
    "\030\005 \002(\005\022\r\n\005honor\030\006 \002(\005\022\020\n\010has_flag\030\007 \002(\010\022"
    "*\n\010bf_state\030\010 \002(\0162\030.Packet.BattleFieldSt"
    "ate\022\016\n\006locked\030\t \002(\010\022\014\n\004dead\030\n \002(\010\022\020\n\010old"
    "_camp\030\013 \002(\005\022\014\n\004name\030\014 \002(\t\022!\n\004prof\030\r \002(\0162"
    "\023.Packet.Professions\"\333\001\n\017BattleFieldInfo"
    "\022\027\n\tattackers\030\001 \003(\006B\004\300\363\030\n\022\027\n\tdefenders\030\002"
    " \003(\006B\004\300\363\030\n\022\025\n\rattacker_flag\030\003 \002(\010\022\025\n\rdef"
    "ender_flag\030\004 \002(\010\022\033\n\023attacker_flag_count\030"
    "\005 \002(\005\022\033\n\023defender_flag_count\030\006 \002(\005\022\026\n\016at"
    "tacker_point\030\007 \002(\005\022\026\n\016defender_point\030\010 \002"
    "(\005\"H\n\016JoinBattleRoom\022\020\n\010scene_id\030\001 \002(\005\022\021"
    "\n\tnpc_index\030\002 \002(\005\022\021\n\tscript_id\030\003 \002(\005\"\021\n\017"
    "LeaveBattleRoom\"\022\n\020LeaveBattleField\"\027\n\025A"
    "greeEnterBattleField\"\032\n\030DisAgreeEnterBat"
    "tleField\"\037\n\017EnterRoomNotify\022\014\n\004time\030\001 \002("
    "\005\"&\n\026EnterBattleFieldNotify\022\014\n\004time\030\001 \002("
    "\005\"&\n\026BeginBattleFieldNotify\022\014\n\004time\030\001 \002("
    "\005\"\022\n\020BeginBattleField\"F\n\026BattleFieldFigh"
    "tTarget\022\023\n\013target_guid\030\001 \002(\006\022\027\n\017battle_g"
    "roup_id\030\002 \002(\005\">\n\nFlagOprate\022\"\n\006option\030\001 "
    "\002(\0162\022.Packet.FlagOption\022\014\n\004guid\030\002 \002(\006\"\032\n"
    "\010BfResult\022\016\n\006winner\030\001 \002(\005", 1545);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BattleField.proto", &protobuf_RegisterTypes);
  BFConfig::default_instance_ = new BFConfig();
  BattleFeildProxy::default_instance_ = new BattleFeildProxy();
  BattleRoomInfo::default_instance_ = new BattleRoomInfo();
  BattleFieldPlayerInfo::default_instance_ = new BattleFieldPlayerInfo();
  BattleFieldInfo::default_instance_ = new BattleFieldInfo();
  JoinBattleRoom::default_instance_ = new JoinBattleRoom();
  LeaveBattleRoom::default_instance_ = new LeaveBattleRoom();
  LeaveBattleField::default_instance_ = new LeaveBattleField();
  AgreeEnterBattleField::default_instance_ = new AgreeEnterBattleField();
  DisAgreeEnterBattleField::default_instance_ = new DisAgreeEnterBattleField();
  EnterRoomNotify::default_instance_ = new EnterRoomNotify();
  EnterBattleFieldNotify::default_instance_ = new EnterBattleFieldNotify();
  BeginBattleFieldNotify::default_instance_ = new BeginBattleFieldNotify();
  BeginBattleField::default_instance_ = new BeginBattleField();
  BattleFieldFightTarget::default_instance_ = new BattleFieldFightTarget();
  FlagOprate::default_instance_ = new FlagOprate();
  BfResult::default_instance_ = new BfResult();
  BFConfig::default_instance_->InitAsDefaultInstance();
  BattleFeildProxy::default_instance_->InitAsDefaultInstance();
  BattleRoomInfo::default_instance_->InitAsDefaultInstance();
  BattleFieldPlayerInfo::default_instance_->InitAsDefaultInstance();
  BattleFieldInfo::default_instance_->InitAsDefaultInstance();
  JoinBattleRoom::default_instance_->InitAsDefaultInstance();
  LeaveBattleRoom::default_instance_->InitAsDefaultInstance();
  LeaveBattleField::default_instance_->InitAsDefaultInstance();
  AgreeEnterBattleField::default_instance_->InitAsDefaultInstance();
  DisAgreeEnterBattleField::default_instance_->InitAsDefaultInstance();
  EnterRoomNotify::default_instance_->InitAsDefaultInstance();
  EnterBattleFieldNotify::default_instance_->InitAsDefaultInstance();
  BeginBattleFieldNotify::default_instance_->InitAsDefaultInstance();
  BeginBattleField::default_instance_->InitAsDefaultInstance();
  BattleFieldFightTarget::default_instance_->InitAsDefaultInstance();
  FlagOprate::default_instance_->InitAsDefaultInstance();
  BfResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BattleField_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BattleField_2eproto {
  StaticDescriptorInitializer_BattleField_2eproto() {
    protobuf_AddDesc_BattleField_2eproto();
  }
} static_descriptor_initializer_BattleField_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BFConfig::kLevelFieldNumber;
const int BFConfig::kWinExpFieldNumber;
const int BFConfig::kWinGoldFieldNumber;
const int BFConfig::kLoseExpFieldNumber;
const int BFConfig::kLoseGoldFieldNumber;
const int BFConfig::kGetFlagExpFieldNumber;
const int BFConfig::kGetFlagGoldFieldNumber;
const int BFConfig::kBattleWinExpFieldNumber;
const int BFConfig::kBattleWinGoldFieldNumber;
#endif  // !_MSC_VER

BFConfig::BFConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BFConfig::InitAsDefaultInstance() {
}

BFConfig::BFConfig(const BFConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BFConfig::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  win_exp_ = 0;
  win_gold_ = 0;
  lose_exp_ = 0;
  lose_gold_ = 0;
  get_flag_exp_ = 0;
  get_flag_gold_ = 0;
  battle_win_exp_ = 0;
  battle_win_gold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BFConfig::~BFConfig() {
  SharedDtor();
}

void BFConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BFConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BFConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BFConfig_descriptor_;
}

const BFConfig& BFConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

BFConfig* BFConfig::default_instance_ = NULL;

BFConfig* BFConfig::New() const {
  return new BFConfig;
}

void BFConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    win_exp_ = 0;
    win_gold_ = 0;
    lose_exp_ = 0;
    lose_gold_ = 0;
    get_flag_exp_ = 0;
    get_flag_gold_ = 0;
    battle_win_exp_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    battle_win_gold_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool BFConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_win_exp;
        break;
      }

      // required int32 win_exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_exp_)));
          set_has_win_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_win_gold;
        break;
      }

      // required int32 win_gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_gold_)));
          set_has_win_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lose_exp;
        break;
      }

      // required int32 lose_exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lose_exp_)));
          set_has_lose_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lose_gold;
        break;
      }

      // required int32 lose_gold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lose_gold_)));
          set_has_lose_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_get_flag_exp;
        break;
      }

      // required int32 get_flag_exp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_flag_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &get_flag_exp_)));
          set_has_get_flag_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_get_flag_gold;
        break;
      }

      // required int32 get_flag_gold = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_flag_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &get_flag_gold_)));
          set_has_get_flag_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_battle_win_exp;
        break;
      }

      // required int32 battle_win_exp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_win_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_win_exp_)));
          set_has_battle_win_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_battle_win_gold;
        break;
      }

      // required int32 battle_win_gold = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_win_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_win_gold_)));
          set_has_battle_win_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void BFConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // required int32 win_exp = 2;
  if (has_win_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->win_exp(), output);
  }

  // required int32 win_gold = 3;
  if (has_win_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->win_gold(), output);
  }

  // required int32 lose_exp = 4;
  if (has_lose_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lose_exp(), output);
  }

  // required int32 lose_gold = 5;
  if (has_lose_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lose_gold(), output);
  }

  // required int32 get_flag_exp = 6;
  if (has_get_flag_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->get_flag_exp(), output);
  }

  // required int32 get_flag_gold = 7;
  if (has_get_flag_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->get_flag_gold(), output);
  }

  // required int32 battle_win_exp = 8;
  if (has_battle_win_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->battle_win_exp(), output);
  }

  // required int32 battle_win_gold = 9;
  if (has_battle_win_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->battle_win_gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BFConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // required int32 win_exp = 2;
  if (has_win_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->win_exp(), target);
  }

  // required int32 win_gold = 3;
  if (has_win_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->win_gold(), target);
  }

  // required int32 lose_exp = 4;
  if (has_lose_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lose_exp(), target);
  }

  // required int32 lose_gold = 5;
  if (has_lose_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lose_gold(), target);
  }

  // required int32 get_flag_exp = 6;
  if (has_get_flag_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->get_flag_exp(), target);
  }

  // required int32 get_flag_gold = 7;
  if (has_get_flag_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->get_flag_gold(), target);
  }

  // required int32 battle_win_exp = 8;
  if (has_battle_win_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->battle_win_exp(), target);
  }

  // required int32 battle_win_gold = 9;
  if (has_battle_win_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->battle_win_gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BFConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 win_exp = 2;
    if (has_win_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_exp());
    }

    // required int32 win_gold = 3;
    if (has_win_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_gold());
    }

    // required int32 lose_exp = 4;
    if (has_lose_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lose_exp());
    }

    // required int32 lose_gold = 5;
    if (has_lose_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lose_gold());
    }

    // required int32 get_flag_exp = 6;
    if (has_get_flag_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->get_flag_exp());
    }

    // required int32 get_flag_gold = 7;
    if (has_get_flag_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->get_flag_gold());
    }

    // required int32 battle_win_exp = 8;
    if (has_battle_win_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_win_exp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 battle_win_gold = 9;
    if (has_battle_win_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_win_gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BFConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BFConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BFConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void BFConfig::MergeFrom(const BFConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_win_exp()) {
      set_win_exp(from.win_exp());
    }
    if (from.has_win_gold()) {
      set_win_gold(from.win_gold());
    }
    if (from.has_lose_exp()) {
      set_lose_exp(from.lose_exp());
    }
    if (from.has_lose_gold()) {
      set_lose_gold(from.lose_gold());
    }
    if (from.has_get_flag_exp()) {
      set_get_flag_exp(from.get_flag_exp());
    }
    if (from.has_get_flag_gold()) {
      set_get_flag_gold(from.get_flag_gold());
    }
    if (from.has_battle_win_exp()) {
      set_battle_win_exp(from.battle_win_exp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_battle_win_gold()) {
      set_battle_win_gold(from.battle_win_gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void BFConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void BFConfig::CopyFrom(const BFConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool BFConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void BFConfig::SetInitialized() {
  _has_bits_[0] |= 0x000001ff;

  return;
}

void BFConfig::Swap(BFConfig* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(win_exp_, other->win_exp_);
    std::swap(win_gold_, other->win_gold_);
    std::swap(lose_exp_, other->lose_exp_);
    std::swap(lose_gold_, other->lose_gold_);
    std::swap(get_flag_exp_, other->get_flag_exp_);
    std::swap(get_flag_gold_, other->get_flag_gold_);
    std::swap(battle_win_exp_, other->battle_win_exp_);
    std::swap(battle_win_gold_, other->battle_win_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata BFConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BFConfig_descriptor_;
  metadata.reflection = BFConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleFeildProxy::kRaidRtidFieldNumber;
const int BattleFeildProxy::kBfStateFieldNumber;
#endif  // !_MSC_VER

BattleFeildProxy::BattleFeildProxy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleFeildProxy::InitAsDefaultInstance() {
}

BattleFeildProxy::BattleFeildProxy(const BattleFeildProxy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleFeildProxy::SharedCtor() {
  _cached_size_ = 0;
  raid_rtid_ = 0;
  bf_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleFeildProxy::~BattleFeildProxy() {
  SharedDtor();
}

void BattleFeildProxy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleFeildProxy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleFeildProxy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleFeildProxy_descriptor_;
}

const BattleFeildProxy& BattleFeildProxy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

BattleFeildProxy* BattleFeildProxy::default_instance_ = NULL;

BattleFeildProxy* BattleFeildProxy::New() const {
  return new BattleFeildProxy;
}

void BattleFeildProxy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    raid_rtid_ = 0;
    bf_state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool BattleFeildProxy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 raid_rtid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &raid_rtid_)));
          set_has_raid_rtid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bf_state;
        break;
      }

      // required .Config.BFState bf_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bf_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Config::BFState_IsValid(value)) {
            set_bf_state(static_cast< ::Config::BFState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void BattleFeildProxy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 raid_rtid = 1;
  if (has_raid_rtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->raid_rtid(), output);
  }

  // required .Config.BFState bf_state = 2;
  if (has_bf_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->bf_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleFeildProxy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 raid_rtid = 1;
  if (has_raid_rtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->raid_rtid(), target);
  }

  // required .Config.BFState bf_state = 2;
  if (has_bf_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->bf_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleFeildProxy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 raid_rtid = 1;
    if (has_raid_rtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->raid_rtid());
    }

    // required .Config.BFState bf_state = 2;
    if (has_bf_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bf_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleFeildProxy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleFeildProxy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleFeildProxy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void BattleFeildProxy::MergeFrom(const BattleFeildProxy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_raid_rtid()) {
      set_raid_rtid(from.raid_rtid());
    }
    if (from.has_bf_state()) {
      set_bf_state(from.bf_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void BattleFeildProxy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void BattleFeildProxy::CopyFrom(const BattleFeildProxy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool BattleFeildProxy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BattleFeildProxy::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void BattleFeildProxy::Swap(BattleFeildProxy* other) {
  if (other != this) {
    std::swap(raid_rtid_, other->raid_rtid_);
    std::swap(bf_state_, other->bf_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata BattleFeildProxy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleFeildProxy_descriptor_;
  metadata.reflection = BattleFeildProxy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleRoomInfo::kMinLevelFieldNumber;
const int BattleRoomInfo::kMaxLevelFieldNumber;
const int BattleRoomInfo::kMaxCountFieldNumber;
const int BattleRoomInfo::kSceneIdFieldNumber;
const int BattleRoomInfo::kBfStateFieldNumber;
const int BattleRoomInfo::kPlayersFieldNumber;
#endif  // !_MSC_VER

BattleRoomInfo::BattleRoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleRoomInfo::InitAsDefaultInstance() {
}

BattleRoomInfo::BattleRoomInfo(const BattleRoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleRoomInfo::SharedCtor() {
  _cached_size_ = 0;
  min_level_ = 0;
  max_level_ = 0;
  max_count_ = 0;
  scene_id_ = 0;
  bf_state_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleRoomInfo::~BattleRoomInfo() {
  SharedDtor();
}

void BattleRoomInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleRoomInfo_descriptor_;
}

const BattleRoomInfo& BattleRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

BattleRoomInfo* BattleRoomInfo::default_instance_ = NULL;

BattleRoomInfo* BattleRoomInfo::New() const {
  return new BattleRoomInfo;
}

void BattleRoomInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    min_level_ = 0;
    max_level_ = 0;
    max_count_ = 0;
    scene_id_ = 0;
    bf_state_ = -1;
  }
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool BattleRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 min_level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_level_)));
          set_has_min_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_level;
        break;
      }

      // required int32 max_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_level_)));
          set_has_max_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_count;
        break;
      }

      // required int32 max_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_count_)));
          set_has_max_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scene_id;
        break;
      }

      // required int32 scene_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bf_state;
        break;
      }

      // required .Packet.BattleFieldState bf_state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bf_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::BattleFieldState_IsValid(value)) {
            set_bf_state(static_cast< ::Packet::BattleFieldState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_players;
        break;
      }

      // repeated .Packet.BattleFieldPlayerInfo players = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void BattleRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 min_level = 1;
  if (has_min_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->min_level(), output);
  }

  // required int32 max_level = 2;
  if (has_max_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_level(), output);
  }

  // required int32 max_count = 3;
  if (has_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_count(), output);
  }

  // required int32 scene_id = 4;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->scene_id(), output);
  }

  // required .Packet.BattleFieldState bf_state = 5;
  if (has_bf_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->bf_state(), output);
  }

  // repeated .Packet.BattleFieldPlayerInfo players = 6;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->players(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleRoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 min_level = 1;
  if (has_min_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->min_level(), target);
  }

  // required int32 max_level = 2;
  if (has_max_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_level(), target);
  }

  // required int32 max_count = 3;
  if (has_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_count(), target);
  }

  // required int32 scene_id = 4;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->scene_id(), target);
  }

  // required .Packet.BattleFieldState bf_state = 5;
  if (has_bf_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->bf_state(), target);
  }

  // repeated .Packet.BattleFieldPlayerInfo players = 6;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->players(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleRoomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 min_level = 1;
    if (has_min_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_level());
    }

    // required int32 max_level = 2;
    if (has_max_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_level());
    }

    // required int32 max_count = 3;
    if (has_max_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_count());
    }

    // required int32 scene_id = 4;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }

    // required .Packet.BattleFieldState bf_state = 5;
    if (has_bf_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bf_state());
    }

  }
  // repeated .Packet.BattleFieldPlayerInfo players = 6;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleRoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleRoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void BattleRoomInfo::MergeFrom(const BattleRoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min_level()) {
      set_min_level(from.min_level());
    }
    if (from.has_max_level()) {
      set_max_level(from.max_level());
    }
    if (from.has_max_count()) {
      set_max_count(from.max_count());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_bf_state()) {
      set_bf_state(from.bf_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void BattleRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void BattleRoomInfo::CopyFrom(const BattleRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool BattleRoomInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  for (int i = 0; i < players_size(); i++) {
    if (!this->players(i).IsInitialized()) return false;
  }
  return true;
}

void BattleRoomInfo::SetInitialized() {
  _has_bits_[0] |= 0x0000001f;

  for (int i = 0; i < players_size(); i++) {
    this->mutable_players(i)->SetInitialized();
  }
  return;
}

void BattleRoomInfo::Swap(BattleRoomInfo* other) {
  if (other != this) {
    std::swap(min_level_, other->min_level_);
    std::swap(max_level_, other->max_level_);
    std::swap(max_count_, other->max_count_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(bf_state_, other->bf_state_);
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata BattleRoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleRoomInfo_descriptor_;
  metadata.reflection = BattleRoomInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleFieldPlayerInfo::kGuidFieldNumber;
const int BattleFieldPlayerInfo::kKillNumFieldNumber;
const int BattleFieldPlayerInfo::kDeadNumFieldNumber;
const int BattleFieldPlayerInfo::kGetFlagNumFieldNumber;
const int BattleFieldPlayerInfo::kReturnFlagNumFieldNumber;
const int BattleFieldPlayerInfo::kHonorFieldNumber;
const int BattleFieldPlayerInfo::kHasFlagFieldNumber;
const int BattleFieldPlayerInfo::kBfStateFieldNumber;
const int BattleFieldPlayerInfo::kLockedFieldNumber;
const int BattleFieldPlayerInfo::kDeadFieldNumber;
const int BattleFieldPlayerInfo::kOldCampFieldNumber;
const int BattleFieldPlayerInfo::kNameFieldNumber;
const int BattleFieldPlayerInfo::kProfFieldNumber;
#endif  // !_MSC_VER

BattleFieldPlayerInfo::BattleFieldPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleFieldPlayerInfo::InitAsDefaultInstance() {
}

BattleFieldPlayerInfo::BattleFieldPlayerInfo(const BattleFieldPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleFieldPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  kill_num_ = 0;
  dead_num_ = 0;
  get_flag_num_ = 0;
  return_flag_num_ = 0;
  honor_ = 0;
  has_flag_ = false;
  bf_state_ = -1;
  locked_ = false;
  dead_ = false;
  old_camp_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prof_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleFieldPlayerInfo::~BattleFieldPlayerInfo() {
  SharedDtor();
}

void BattleFieldPlayerInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void BattleFieldPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleFieldPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleFieldPlayerInfo_descriptor_;
}

const BattleFieldPlayerInfo& BattleFieldPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

BattleFieldPlayerInfo* BattleFieldPlayerInfo::default_instance_ = NULL;

BattleFieldPlayerInfo* BattleFieldPlayerInfo::New() const {
  return new BattleFieldPlayerInfo;
}

void BattleFieldPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    kill_num_ = 0;
    dead_num_ = 0;
    get_flag_num_ = 0;
    return_flag_num_ = 0;
    honor_ = 0;
    has_flag_ = false;
    bf_state_ = -1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    locked_ = false;
    dead_ = false;
    old_camp_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    prof_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool BattleFieldPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kill_num;
        break;
      }

      // required int32 kill_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_num_)));
          set_has_kill_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dead_num;
        break;
      }

      // required int32 dead_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dead_num_)));
          set_has_dead_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_get_flag_num;
        break;
      }

      // required int32 get_flag_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_flag_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &get_flag_num_)));
          set_has_get_flag_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_return_flag_num;
        break;
      }

      // required int32 return_flag_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_return_flag_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &return_flag_num_)));
          set_has_return_flag_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_honor;
        break;
      }

      // required int32 honor = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_honor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &honor_)));
          set_has_honor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_has_flag;
        break;
      }

      // required bool has_flag = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_flag_)));
          set_has_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bf_state;
        break;
      }

      // required .Packet.BattleFieldState bf_state = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bf_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::BattleFieldState_IsValid(value)) {
            set_bf_state(static_cast< ::Packet::BattleFieldState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_locked;
        break;
      }

      // required bool locked = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_locked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &locked_)));
          set_has_locked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_dead;
        break;
      }

      // required bool dead = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dead_)));
          set_has_dead();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_old_camp;
        break;
      }

      // required int32 old_camp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &old_camp_)));
          set_has_old_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_name;
        break;
      }

      // required string name = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_prof;
        break;
      }

      // required .Packet.Professions prof = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::Professions_IsValid(value)) {
            set_prof(static_cast< ::Packet::Professions >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void BattleFieldPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required int32 kill_num = 2;
  if (has_kill_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->kill_num(), output);
  }

  // required int32 dead_num = 3;
  if (has_dead_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dead_num(), output);
  }

  // required int32 get_flag_num = 4;
  if (has_get_flag_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->get_flag_num(), output);
  }

  // required int32 return_flag_num = 5;
  if (has_return_flag_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->return_flag_num(), output);
  }

  // required int32 honor = 6;
  if (has_honor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->honor(), output);
  }

  // required bool has_flag = 7;
  if (has_has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->has_flag(), output);
  }

  // required .Packet.BattleFieldState bf_state = 8;
  if (has_bf_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->bf_state(), output);
  }

  // required bool locked = 9;
  if (has_locked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->locked(), output);
  }

  // required bool dead = 10;
  if (has_dead()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->dead(), output);
  }

  // required int32 old_camp = 11;
  if (has_old_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->old_camp(), output);
  }

  // required string name = 12;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->name(), output);
  }

  // required .Packet.Professions prof = 13;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->prof(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleFieldPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required int32 kill_num = 2;
  if (has_kill_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->kill_num(), target);
  }

  // required int32 dead_num = 3;
  if (has_dead_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dead_num(), target);
  }

  // required int32 get_flag_num = 4;
  if (has_get_flag_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->get_flag_num(), target);
  }

  // required int32 return_flag_num = 5;
  if (has_return_flag_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->return_flag_num(), target);
  }

  // required int32 honor = 6;
  if (has_honor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->honor(), target);
  }

  // required bool has_flag = 7;
  if (has_has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->has_flag(), target);
  }

  // required .Packet.BattleFieldState bf_state = 8;
  if (has_bf_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->bf_state(), target);
  }

  // required bool locked = 9;
  if (has_locked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->locked(), target);
  }

  // required bool dead = 10;
  if (has_dead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->dead(), target);
  }

  // required int32 old_camp = 11;
  if (has_old_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->old_camp(), target);
  }

  // required string name = 12;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->name(), target);
  }

  // required .Packet.Professions prof = 13;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->prof(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleFieldPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required int32 kill_num = 2;
    if (has_kill_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill_num());
    }

    // required int32 dead_num = 3;
    if (has_dead_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dead_num());
    }

    // required int32 get_flag_num = 4;
    if (has_get_flag_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->get_flag_num());
    }

    // required int32 return_flag_num = 5;
    if (has_return_flag_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->return_flag_num());
    }

    // required int32 honor = 6;
    if (has_honor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->honor());
    }

    // required bool has_flag = 7;
    if (has_has_flag()) {
      total_size += 1 + 1;
    }

    // required .Packet.BattleFieldState bf_state = 8;
    if (has_bf_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bf_state());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool locked = 9;
    if (has_locked()) {
      total_size += 1 + 1;
    }

    // required bool dead = 10;
    if (has_dead()) {
      total_size += 1 + 1;
    }

    // required int32 old_camp = 11;
    if (has_old_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->old_camp());
    }

    // required string name = 12;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .Packet.Professions prof = 13;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->prof());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleFieldPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleFieldPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleFieldPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void BattleFieldPlayerInfo::MergeFrom(const BattleFieldPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_kill_num()) {
      set_kill_num(from.kill_num());
    }
    if (from.has_dead_num()) {
      set_dead_num(from.dead_num());
    }
    if (from.has_get_flag_num()) {
      set_get_flag_num(from.get_flag_num());
    }
    if (from.has_return_flag_num()) {
      set_return_flag_num(from.return_flag_num());
    }
    if (from.has_honor()) {
      set_honor(from.honor());
    }
    if (from.has_has_flag()) {
      set_has_flag(from.has_flag());
    }
    if (from.has_bf_state()) {
      set_bf_state(from.bf_state());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_locked()) {
      set_locked(from.locked());
    }
    if (from.has_dead()) {
      set_dead(from.dead());
    }
    if (from.has_old_camp()) {
      set_old_camp(from.old_camp());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void BattleFieldPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void BattleFieldPlayerInfo::CopyFrom(const BattleFieldPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool BattleFieldPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void BattleFieldPlayerInfo::SetInitialized() {
  _has_bits_[0] |= 0x00001fff;

  return;
}

void BattleFieldPlayerInfo::Swap(BattleFieldPlayerInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(kill_num_, other->kill_num_);
    std::swap(dead_num_, other->dead_num_);
    std::swap(get_flag_num_, other->get_flag_num_);
    std::swap(return_flag_num_, other->return_flag_num_);
    std::swap(honor_, other->honor_);
    std::swap(has_flag_, other->has_flag_);
    std::swap(bf_state_, other->bf_state_);
    std::swap(locked_, other->locked_);
    std::swap(dead_, other->dead_);
    std::swap(old_camp_, other->old_camp_);
    std::swap(name_, other->name_);
    std::swap(prof_, other->prof_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata BattleFieldPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleFieldPlayerInfo_descriptor_;
  metadata.reflection = BattleFieldPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleFieldInfo::kAttackersFieldNumber;
const int BattleFieldInfo::kDefendersFieldNumber;
const int BattleFieldInfo::kAttackerFlagFieldNumber;
const int BattleFieldInfo::kDefenderFlagFieldNumber;
const int BattleFieldInfo::kAttackerFlagCountFieldNumber;
const int BattleFieldInfo::kDefenderFlagCountFieldNumber;
const int BattleFieldInfo::kAttackerPointFieldNumber;
const int BattleFieldInfo::kDefenderPointFieldNumber;
#endif  // !_MSC_VER

BattleFieldInfo::BattleFieldInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleFieldInfo::InitAsDefaultInstance() {
}

BattleFieldInfo::BattleFieldInfo(const BattleFieldInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleFieldInfo::SharedCtor() {
  _cached_size_ = 0;
  attacker_flag_ = false;
  defender_flag_ = false;
  attacker_flag_count_ = 0;
  defender_flag_count_ = 0;
  attacker_point_ = 0;
  defender_point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleFieldInfo::~BattleFieldInfo() {
  SharedDtor();
}

void BattleFieldInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleFieldInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleFieldInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleFieldInfo_descriptor_;
}

const BattleFieldInfo& BattleFieldInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

BattleFieldInfo* BattleFieldInfo::default_instance_ = NULL;

BattleFieldInfo* BattleFieldInfo::New() const {
  return new BattleFieldInfo;
}

void BattleFieldInfo::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    attacker_flag_ = false;
    defender_flag_ = false;
    attacker_flag_count_ = 0;
    defender_flag_count_ = 0;
    attacker_point_ = 0;
    defender_point_ = 0;
  }
  attackers_.Clear();
  defenders_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool BattleFieldInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 attackers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_attackers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9, input, this->mutable_attackers())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_attackers())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_attackers;
        if (input->ExpectTag(17)) goto parse_defenders;
        break;
      }

      // repeated fixed64 defenders = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_defenders:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17, input, this->mutable_defenders())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_defenders())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_defenders;
        if (input->ExpectTag(24)) goto parse_attacker_flag;
        break;
      }

      // required bool attacker_flag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attacker_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &attacker_flag_)));
          set_has_attacker_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_defender_flag;
        break;
      }

      // required bool defender_flag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defender_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &defender_flag_)));
          set_has_defender_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_attacker_flag_count;
        break;
      }

      // required int32 attacker_flag_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attacker_flag_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attacker_flag_count_)));
          set_has_attacker_flag_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_defender_flag_count;
        break;
      }

      // required int32 defender_flag_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defender_flag_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defender_flag_count_)));
          set_has_defender_flag_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_attacker_point;
        break;
      }

      // required int32 attacker_point = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attacker_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attacker_point_)));
          set_has_attacker_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_defender_point;
        break;
      }

      // required int32 defender_point = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defender_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defender_point_)));
          set_has_defender_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void BattleFieldInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated fixed64 attackers = 1;
  for (int i = 0; i < this->attackers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->attackers(i), output);
  }

  // repeated fixed64 defenders = 2;
  for (int i = 0; i < this->defenders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->defenders(i), output);
  }

  // required bool attacker_flag = 3;
  if (has_attacker_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->attacker_flag(), output);
  }

  // required bool defender_flag = 4;
  if (has_defender_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->defender_flag(), output);
  }

  // required int32 attacker_flag_count = 5;
  if (has_attacker_flag_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->attacker_flag_count(), output);
  }

  // required int32 defender_flag_count = 6;
  if (has_defender_flag_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->defender_flag_count(), output);
  }

  // required int32 attacker_point = 7;
  if (has_attacker_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->attacker_point(), output);
  }

  // required int32 defender_point = 8;
  if (has_defender_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->defender_point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleFieldInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated fixed64 attackers = 1;
  for (int i = 0; i < this->attackers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(1, this->attackers(i), target);
  }

  // repeated fixed64 defenders = 2;
  for (int i = 0; i < this->defenders_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(2, this->defenders(i), target);
  }

  // required bool attacker_flag = 3;
  if (has_attacker_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->attacker_flag(), target);
  }

  // required bool defender_flag = 4;
  if (has_defender_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->defender_flag(), target);
  }

  // required int32 attacker_flag_count = 5;
  if (has_attacker_flag_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->attacker_flag_count(), target);
  }

  // required int32 defender_flag_count = 6;
  if (has_defender_flag_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->defender_flag_count(), target);
  }

  // required int32 attacker_point = 7;
  if (has_attacker_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->attacker_point(), target);
  }

  // required int32 defender_point = 8;
  if (has_defender_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->defender_point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleFieldInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required bool attacker_flag = 3;
    if (has_attacker_flag()) {
      total_size += 1 + 1;
    }

    // required bool defender_flag = 4;
    if (has_defender_flag()) {
      total_size += 1 + 1;
    }

    // required int32 attacker_flag_count = 5;
    if (has_attacker_flag_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attacker_flag_count());
    }

    // required int32 defender_flag_count = 6;
    if (has_defender_flag_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defender_flag_count());
    }

    // required int32 attacker_point = 7;
    if (has_attacker_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attacker_point());
    }

    // required int32 defender_point = 8;
    if (has_defender_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defender_point());
    }

  }
  // repeated fixed64 attackers = 1;
  {
    int data_size = 0;
    data_size = 8 * this->attackers_size();
    total_size += 1 * this->attackers_size() + data_size;
  }

  // repeated fixed64 defenders = 2;
  {
    int data_size = 0;
    data_size = 8 * this->defenders_size();
    total_size += 1 * this->defenders_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleFieldInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleFieldInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleFieldInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void BattleFieldInfo::MergeFrom(const BattleFieldInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  attackers_.MergeFrom(from.attackers_);
  defenders_.MergeFrom(from.defenders_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_attacker_flag()) {
      set_attacker_flag(from.attacker_flag());
    }
    if (from.has_defender_flag()) {
      set_defender_flag(from.defender_flag());
    }
    if (from.has_attacker_flag_count()) {
      set_attacker_flag_count(from.attacker_flag_count());
    }
    if (from.has_defender_flag_count()) {
      set_defender_flag_count(from.defender_flag_count());
    }
    if (from.has_attacker_point()) {
      set_attacker_point(from.attacker_point());
    }
    if (from.has_defender_point()) {
      set_defender_point(from.defender_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void BattleFieldInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void BattleFieldInfo::CopyFrom(const BattleFieldInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool BattleFieldInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000fc) != 0x000000fc) return false;

  return true;
}

void BattleFieldInfo::SetInitialized() {
  _has_bits_[0] |= 0x000000fc;

  return;
}

void BattleFieldInfo::Swap(BattleFieldInfo* other) {
  if (other != this) {
    attackers_.Swap(&other->attackers_);
    defenders_.Swap(&other->defenders_);
    std::swap(attacker_flag_, other->attacker_flag_);
    std::swap(defender_flag_, other->defender_flag_);
    std::swap(attacker_flag_count_, other->attacker_flag_count_);
    std::swap(defender_flag_count_, other->defender_flag_count_);
    std::swap(attacker_point_, other->attacker_point_);
    std::swap(defender_point_, other->defender_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata BattleFieldInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleFieldInfo_descriptor_;
  metadata.reflection = BattleFieldInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinBattleRoom::kSceneIdFieldNumber;
const int JoinBattleRoom::kNpcIndexFieldNumber;
const int JoinBattleRoom::kScriptIdFieldNumber;
#endif  // !_MSC_VER

JoinBattleRoom::JoinBattleRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JoinBattleRoom::InitAsDefaultInstance() {
}

JoinBattleRoom::JoinBattleRoom(const JoinBattleRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JoinBattleRoom::SharedCtor() {
  _cached_size_ = 0;
  scene_id_ = 0;
  npc_index_ = 0;
  script_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinBattleRoom::~JoinBattleRoom() {
  SharedDtor();
}

void JoinBattleRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JoinBattleRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinBattleRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinBattleRoom_descriptor_;
}

const JoinBattleRoom& JoinBattleRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

JoinBattleRoom* JoinBattleRoom::default_instance_ = NULL;

JoinBattleRoom* JoinBattleRoom::New() const {
  return new JoinBattleRoom;
}

void JoinBattleRoom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scene_id_ = 0;
    npc_index_ = 0;
    script_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool JoinBattleRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 scene_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_npc_index;
        break;
      }

      // required int32 npc_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_index_)));
          set_has_npc_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_script_id;
        break;
      }

      // required int32 script_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_script_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &script_id_)));
          set_has_script_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void JoinBattleRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 scene_id = 1;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->scene_id(), output);
  }

  // required int32 npc_index = 2;
  if (has_npc_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->npc_index(), output);
  }

  // required int32 script_id = 3;
  if (has_script_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->script_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JoinBattleRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 scene_id = 1;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->scene_id(), target);
  }

  // required int32 npc_index = 2;
  if (has_npc_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->npc_index(), target);
  }

  // required int32 script_id = 3;
  if (has_script_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->script_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JoinBattleRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 scene_id = 1;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }

    // required int32 npc_index = 2;
    if (has_npc_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_index());
    }

    // required int32 script_id = 3;
    if (has_script_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->script_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinBattleRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinBattleRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinBattleRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void JoinBattleRoom::MergeFrom(const JoinBattleRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_npc_index()) {
      set_npc_index(from.npc_index());
    }
    if (from.has_script_id()) {
      set_script_id(from.script_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void JoinBattleRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void JoinBattleRoom::CopyFrom(const JoinBattleRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool JoinBattleRoom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void JoinBattleRoom::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  return;
}

void JoinBattleRoom::Swap(JoinBattleRoom* other) {
  if (other != this) {
    std::swap(scene_id_, other->scene_id_);
    std::swap(npc_index_, other->npc_index_);
    std::swap(script_id_, other->script_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata JoinBattleRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinBattleRoom_descriptor_;
  metadata.reflection = JoinBattleRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

LeaveBattleRoom::LeaveBattleRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeaveBattleRoom::InitAsDefaultInstance() {
}

LeaveBattleRoom::LeaveBattleRoom(const LeaveBattleRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeaveBattleRoom::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveBattleRoom::~LeaveBattleRoom() {
  SharedDtor();
}

void LeaveBattleRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeaveBattleRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveBattleRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveBattleRoom_descriptor_;
}

const LeaveBattleRoom& LeaveBattleRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

LeaveBattleRoom* LeaveBattleRoom::default_instance_ = NULL;

LeaveBattleRoom* LeaveBattleRoom::New() const {
  return new LeaveBattleRoom;
}

void LeaveBattleRoom::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool LeaveBattleRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void LeaveBattleRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeaveBattleRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeaveBattleRoom::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveBattleRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaveBattleRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaveBattleRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void LeaveBattleRoom::MergeFrom(const LeaveBattleRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void LeaveBattleRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void LeaveBattleRoom::CopyFrom(const LeaveBattleRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool LeaveBattleRoom::IsInitialized() const {

  return true;
}

void LeaveBattleRoom::SetInitialized() {

  return;
}

void LeaveBattleRoom::Swap(LeaveBattleRoom* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata LeaveBattleRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveBattleRoom_descriptor_;
  metadata.reflection = LeaveBattleRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

LeaveBattleField::LeaveBattleField()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeaveBattleField::InitAsDefaultInstance() {
}

LeaveBattleField::LeaveBattleField(const LeaveBattleField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeaveBattleField::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveBattleField::~LeaveBattleField() {
  SharedDtor();
}

void LeaveBattleField::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeaveBattleField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveBattleField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveBattleField_descriptor_;
}

const LeaveBattleField& LeaveBattleField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

LeaveBattleField* LeaveBattleField::default_instance_ = NULL;

LeaveBattleField* LeaveBattleField::New() const {
  return new LeaveBattleField;
}

void LeaveBattleField::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool LeaveBattleField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void LeaveBattleField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeaveBattleField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeaveBattleField::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveBattleField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaveBattleField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaveBattleField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void LeaveBattleField::MergeFrom(const LeaveBattleField& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void LeaveBattleField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void LeaveBattleField::CopyFrom(const LeaveBattleField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool LeaveBattleField::IsInitialized() const {

  return true;
}

void LeaveBattleField::SetInitialized() {

  return;
}

void LeaveBattleField::Swap(LeaveBattleField* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata LeaveBattleField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveBattleField_descriptor_;
  metadata.reflection = LeaveBattleField_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AgreeEnterBattleField::AgreeEnterBattleField()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AgreeEnterBattleField::InitAsDefaultInstance() {
}

AgreeEnterBattleField::AgreeEnterBattleField(const AgreeEnterBattleField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AgreeEnterBattleField::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgreeEnterBattleField::~AgreeEnterBattleField() {
  SharedDtor();
}

void AgreeEnterBattleField::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AgreeEnterBattleField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgreeEnterBattleField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgreeEnterBattleField_descriptor_;
}

const AgreeEnterBattleField& AgreeEnterBattleField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

AgreeEnterBattleField* AgreeEnterBattleField::default_instance_ = NULL;

AgreeEnterBattleField* AgreeEnterBattleField::New() const {
  return new AgreeEnterBattleField;
}

void AgreeEnterBattleField::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool AgreeEnterBattleField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void AgreeEnterBattleField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AgreeEnterBattleField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AgreeEnterBattleField::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgreeEnterBattleField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgreeEnterBattleField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgreeEnterBattleField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void AgreeEnterBattleField::MergeFrom(const AgreeEnterBattleField& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void AgreeEnterBattleField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void AgreeEnterBattleField::CopyFrom(const AgreeEnterBattleField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool AgreeEnterBattleField::IsInitialized() const {

  return true;
}

void AgreeEnterBattleField::SetInitialized() {

  return;
}

void AgreeEnterBattleField::Swap(AgreeEnterBattleField* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata AgreeEnterBattleField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgreeEnterBattleField_descriptor_;
  metadata.reflection = AgreeEnterBattleField_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DisAgreeEnterBattleField::DisAgreeEnterBattleField()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DisAgreeEnterBattleField::InitAsDefaultInstance() {
}

DisAgreeEnterBattleField::DisAgreeEnterBattleField(const DisAgreeEnterBattleField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DisAgreeEnterBattleField::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DisAgreeEnterBattleField::~DisAgreeEnterBattleField() {
  SharedDtor();
}

void DisAgreeEnterBattleField::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DisAgreeEnterBattleField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DisAgreeEnterBattleField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DisAgreeEnterBattleField_descriptor_;
}

const DisAgreeEnterBattleField& DisAgreeEnterBattleField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

DisAgreeEnterBattleField* DisAgreeEnterBattleField::default_instance_ = NULL;

DisAgreeEnterBattleField* DisAgreeEnterBattleField::New() const {
  return new DisAgreeEnterBattleField;
}

void DisAgreeEnterBattleField::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool DisAgreeEnterBattleField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void DisAgreeEnterBattleField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DisAgreeEnterBattleField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DisAgreeEnterBattleField::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisAgreeEnterBattleField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DisAgreeEnterBattleField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DisAgreeEnterBattleField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void DisAgreeEnterBattleField::MergeFrom(const DisAgreeEnterBattleField& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void DisAgreeEnterBattleField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void DisAgreeEnterBattleField::CopyFrom(const DisAgreeEnterBattleField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool DisAgreeEnterBattleField::IsInitialized() const {

  return true;
}

void DisAgreeEnterBattleField::SetInitialized() {

  return;
}

void DisAgreeEnterBattleField::Swap(DisAgreeEnterBattleField* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata DisAgreeEnterBattleField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DisAgreeEnterBattleField_descriptor_;
  metadata.reflection = DisAgreeEnterBattleField_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterRoomNotify::kTimeFieldNumber;
#endif  // !_MSC_VER

EnterRoomNotify::EnterRoomNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterRoomNotify::InitAsDefaultInstance() {
}

EnterRoomNotify::EnterRoomNotify(const EnterRoomNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterRoomNotify::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterRoomNotify::~EnterRoomNotify() {
  SharedDtor();
}

void EnterRoomNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterRoomNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterRoomNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterRoomNotify_descriptor_;
}

const EnterRoomNotify& EnterRoomNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

EnterRoomNotify* EnterRoomNotify::default_instance_ = NULL;

EnterRoomNotify* EnterRoomNotify::New() const {
  return new EnterRoomNotify;
}

void EnterRoomNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool EnterRoomNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void EnterRoomNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterRoomNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterRoomNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterRoomNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterRoomNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterRoomNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void EnterRoomNotify::MergeFrom(const EnterRoomNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void EnterRoomNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void EnterRoomNotify::CopyFrom(const EnterRoomNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool EnterRoomNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EnterRoomNotify::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void EnterRoomNotify::Swap(EnterRoomNotify* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata EnterRoomNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterRoomNotify_descriptor_;
  metadata.reflection = EnterRoomNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterBattleFieldNotify::kTimeFieldNumber;
#endif  // !_MSC_VER

EnterBattleFieldNotify::EnterBattleFieldNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterBattleFieldNotify::InitAsDefaultInstance() {
}

EnterBattleFieldNotify::EnterBattleFieldNotify(const EnterBattleFieldNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterBattleFieldNotify::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterBattleFieldNotify::~EnterBattleFieldNotify() {
  SharedDtor();
}

void EnterBattleFieldNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterBattleFieldNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterBattleFieldNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterBattleFieldNotify_descriptor_;
}

const EnterBattleFieldNotify& EnterBattleFieldNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

EnterBattleFieldNotify* EnterBattleFieldNotify::default_instance_ = NULL;

EnterBattleFieldNotify* EnterBattleFieldNotify::New() const {
  return new EnterBattleFieldNotify;
}

void EnterBattleFieldNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool EnterBattleFieldNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void EnterBattleFieldNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterBattleFieldNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterBattleFieldNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterBattleFieldNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterBattleFieldNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterBattleFieldNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void EnterBattleFieldNotify::MergeFrom(const EnterBattleFieldNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void EnterBattleFieldNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void EnterBattleFieldNotify::CopyFrom(const EnterBattleFieldNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool EnterBattleFieldNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EnterBattleFieldNotify::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void EnterBattleFieldNotify::Swap(EnterBattleFieldNotify* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata EnterBattleFieldNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterBattleFieldNotify_descriptor_;
  metadata.reflection = EnterBattleFieldNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BeginBattleFieldNotify::kTimeFieldNumber;
#endif  // !_MSC_VER

BeginBattleFieldNotify::BeginBattleFieldNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BeginBattleFieldNotify::InitAsDefaultInstance() {
}

BeginBattleFieldNotify::BeginBattleFieldNotify(const BeginBattleFieldNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BeginBattleFieldNotify::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeginBattleFieldNotify::~BeginBattleFieldNotify() {
  SharedDtor();
}

void BeginBattleFieldNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BeginBattleFieldNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeginBattleFieldNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeginBattleFieldNotify_descriptor_;
}

const BeginBattleFieldNotify& BeginBattleFieldNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

BeginBattleFieldNotify* BeginBattleFieldNotify::default_instance_ = NULL;

BeginBattleFieldNotify* BeginBattleFieldNotify::New() const {
  return new BeginBattleFieldNotify;
}

void BeginBattleFieldNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool BeginBattleFieldNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void BeginBattleFieldNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BeginBattleFieldNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BeginBattleFieldNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeginBattleFieldNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BeginBattleFieldNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BeginBattleFieldNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void BeginBattleFieldNotify::MergeFrom(const BeginBattleFieldNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void BeginBattleFieldNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void BeginBattleFieldNotify::CopyFrom(const BeginBattleFieldNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool BeginBattleFieldNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BeginBattleFieldNotify::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void BeginBattleFieldNotify::Swap(BeginBattleFieldNotify* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata BeginBattleFieldNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeginBattleFieldNotify_descriptor_;
  metadata.reflection = BeginBattleFieldNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

BeginBattleField::BeginBattleField()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BeginBattleField::InitAsDefaultInstance() {
}

BeginBattleField::BeginBattleField(const BeginBattleField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BeginBattleField::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeginBattleField::~BeginBattleField() {
  SharedDtor();
}

void BeginBattleField::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BeginBattleField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeginBattleField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeginBattleField_descriptor_;
}

const BeginBattleField& BeginBattleField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

BeginBattleField* BeginBattleField::default_instance_ = NULL;

BeginBattleField* BeginBattleField::New() const {
  return new BeginBattleField;
}

void BeginBattleField::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool BeginBattleField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void BeginBattleField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BeginBattleField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BeginBattleField::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeginBattleField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BeginBattleField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BeginBattleField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void BeginBattleField::MergeFrom(const BeginBattleField& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void BeginBattleField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void BeginBattleField::CopyFrom(const BeginBattleField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool BeginBattleField::IsInitialized() const {

  return true;
}

void BeginBattleField::SetInitialized() {

  return;
}

void BeginBattleField::Swap(BeginBattleField* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata BeginBattleField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeginBattleField_descriptor_;
  metadata.reflection = BeginBattleField_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleFieldFightTarget::kTargetGuidFieldNumber;
const int BattleFieldFightTarget::kBattleGroupIdFieldNumber;
#endif  // !_MSC_VER

BattleFieldFightTarget::BattleFieldFightTarget()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleFieldFightTarget::InitAsDefaultInstance() {
}

BattleFieldFightTarget::BattleFieldFightTarget(const BattleFieldFightTarget& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleFieldFightTarget::SharedCtor() {
  _cached_size_ = 0;
  target_guid_ = GOOGLE_ULONGLONG(0);
  battle_group_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleFieldFightTarget::~BattleFieldFightTarget() {
  SharedDtor();
}

void BattleFieldFightTarget::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleFieldFightTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleFieldFightTarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleFieldFightTarget_descriptor_;
}

const BattleFieldFightTarget& BattleFieldFightTarget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

BattleFieldFightTarget* BattleFieldFightTarget::default_instance_ = NULL;

BattleFieldFightTarget* BattleFieldFightTarget::New() const {
  return new BattleFieldFightTarget;
}

void BattleFieldFightTarget::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    target_guid_ = GOOGLE_ULONGLONG(0);
    battle_group_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool BattleFieldFightTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 target_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &target_guid_)));
          set_has_target_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_group_id;
        break;
      }

      // required int32 battle_group_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_group_id_)));
          set_has_battle_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void BattleFieldFightTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 target_guid = 1;
  if (has_target_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->target_guid(), output);
  }

  // required int32 battle_group_id = 2;
  if (has_battle_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->battle_group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleFieldFightTarget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 target_guid = 1;
  if (has_target_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->target_guid(), target);
  }

  // required int32 battle_group_id = 2;
  if (has_battle_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->battle_group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleFieldFightTarget::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 target_guid = 1;
    if (has_target_guid()) {
      total_size += 1 + 8;
    }

    // required int32 battle_group_id = 2;
    if (has_battle_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleFieldFightTarget::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleFieldFightTarget* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleFieldFightTarget*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void BattleFieldFightTarget::MergeFrom(const BattleFieldFightTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_guid()) {
      set_target_guid(from.target_guid());
    }
    if (from.has_battle_group_id()) {
      set_battle_group_id(from.battle_group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void BattleFieldFightTarget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void BattleFieldFightTarget::CopyFrom(const BattleFieldFightTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool BattleFieldFightTarget::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BattleFieldFightTarget::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void BattleFieldFightTarget::Swap(BattleFieldFightTarget* other) {
  if (other != this) {
    std::swap(target_guid_, other->target_guid_);
    std::swap(battle_group_id_, other->battle_group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata BattleFieldFightTarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleFieldFightTarget_descriptor_;
  metadata.reflection = BattleFieldFightTarget_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlagOprate::kOptionFieldNumber;
const int FlagOprate::kGuidFieldNumber;
#endif  // !_MSC_VER

FlagOprate::FlagOprate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlagOprate::InitAsDefaultInstance() {
}

FlagOprate::FlagOprate(const FlagOprate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlagOprate::SharedCtor() {
  _cached_size_ = 0;
  option_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlagOprate::~FlagOprate() {
  SharedDtor();
}

void FlagOprate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlagOprate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlagOprate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlagOprate_descriptor_;
}

const FlagOprate& FlagOprate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

FlagOprate* FlagOprate::default_instance_ = NULL;

FlagOprate* FlagOprate::New() const {
  return new FlagOprate;
}

void FlagOprate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    option_ = 0;
    guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool FlagOprate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.FlagOption option = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::FlagOption_IsValid(value)) {
            set_option(static_cast< ::Packet::FlagOption >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_guid;
        break;
      }

      // required fixed64 guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void FlagOprate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.FlagOption option = 1;
  if (has_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->option(), output);
  }

  // required fixed64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlagOprate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.FlagOption option = 1;
  if (has_option()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->option(), target);
  }

  // required fixed64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlagOprate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.FlagOption option = 1;
    if (has_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->option());
    }

    // required fixed64 guid = 2;
    if (has_guid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlagOprate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlagOprate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlagOprate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void FlagOprate::MergeFrom(const FlagOprate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_option()) {
      set_option(from.option());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void FlagOprate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void FlagOprate::CopyFrom(const FlagOprate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool FlagOprate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FlagOprate::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void FlagOprate::Swap(FlagOprate* other) {
  if (other != this) {
    std::swap(option_, other->option_);
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata FlagOprate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlagOprate_descriptor_;
  metadata.reflection = FlagOprate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BfResult::kWinnerFieldNumber;
#endif  // !_MSC_VER

BfResult::BfResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BfResult::InitAsDefaultInstance() {
}

BfResult::BfResult(const BfResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BfResult::SharedCtor() {
  _cached_size_ = 0;
  winner_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BfResult::~BfResult() {
  SharedDtor();
}

void BfResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BfResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BfResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfResult_descriptor_;
}

const BfResult& BfResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleField_2eproto();
  return *default_instance_;
}

BfResult* BfResult::default_instance_ = NULL;

BfResult* BfResult::New() const {
  return new BfResult;
}

void BfResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    winner_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool BfResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 winner = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winner_)));
          set_has_winner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void BfResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 winner = 1;
  if (has_winner()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->winner(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BfResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 winner = 1;
  if (has_winner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->winner(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BfResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 winner = 1;
    if (has_winner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winner());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BfResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BfResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BfResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void BfResult::MergeFrom(const BfResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_winner()) {
      set_winner(from.winner());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void BfResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void BfResult::CopyFrom(const BfResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool BfResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BfResult::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void BfResult::Swap(BfResult* other) {
  if (other != this) {
    std::swap(winner_, other->winner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata BfResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BfResult_descriptor_;
  metadata.reflection = BfResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

// @@protoc_insertion_point(global_scope)
