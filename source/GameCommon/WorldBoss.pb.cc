// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WorldBoss.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WorldBoss.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Packet {

namespace {

const ::google::protobuf::Descriptor* WorldBossInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldBossInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldBossInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldBossInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldBossInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldBossInfoReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldBossHpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldBossHpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldBossHpUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldBossHpUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldBossReliveCDUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldBossReliveCDUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldBossConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldBossConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldBossRelivenow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldBossRelivenow_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldBossGoldInspire_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldBossGoldInspire_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldBossDiamondInspire_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldBossDiamondInspire_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldBossStatisticsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldBossStatisticsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldBossStatisticsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldBossStatisticsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldBossStatisticsReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldBossStatisticsReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetWorldBossAutoFightReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetWorldBossAutoFightReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveWorldBossReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveWorldBossReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_WorldBoss_2eproto() {
  protobuf_AddDesc_WorldBoss_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "WorldBoss.proto");
  GOOGLE_CHECK(file != NULL);
  WorldBossInfo_descriptor_ = file->message_type(0);
  static const int WorldBossInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossInfo, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossInfo, bosslevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossInfo, monstergourpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossInfo, hp_),
  };
  WorldBossInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldBossInfo_descriptor_,
      WorldBossInfo::default_instance_,
      WorldBossInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldBossInfo));
  WorldBossInfoReq_descriptor_ = file->message_type(1);
  static const int WorldBossInfoReq_offsets_[1] = {
  };
  WorldBossInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldBossInfoReq_descriptor_,
      WorldBossInfoReq::default_instance_,
      WorldBossInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldBossInfoReq));
  WorldBossInfoReply_descriptor_ = file->message_type(2);
  static const int WorldBossInfoReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossInfoReply, boss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossInfoReply, allhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossInfoReply, boss_seriesid_),
  };
  WorldBossInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldBossInfoReply_descriptor_,
      WorldBossInfoReply::default_instance_,
      WorldBossInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldBossInfoReply));
  WorldBossHpReq_descriptor_ = file->message_type(3);
  static const int WorldBossHpReq_offsets_[1] = {
  };
  WorldBossHpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldBossHpReq_descriptor_,
      WorldBossHpReq::default_instance_,
      WorldBossHpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossHpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossHpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldBossHpReq));
  WorldBossHpUpdate_descriptor_ = file->message_type(4);
  static const int WorldBossHpUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossHpUpdate, hp_),
  };
  WorldBossHpUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldBossHpUpdate_descriptor_,
      WorldBossHpUpdate::default_instance_,
      WorldBossHpUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossHpUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossHpUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldBossHpUpdate));
  WorldBossReliveCDUpdate_descriptor_ = file->message_type(5);
  static const int WorldBossReliveCDUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossReliveCDUpdate, relivecd_),
  };
  WorldBossReliveCDUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldBossReliveCDUpdate_descriptor_,
      WorldBossReliveCDUpdate::default_instance_,
      WorldBossReliveCDUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossReliveCDUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossReliveCDUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldBossReliveCDUpdate));
  WorldBossConfig_descriptor_ = file->message_type(6);
  static const int WorldBossConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossConfig, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossConfig, gourpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossConfig, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossConfig, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossConfig, sceneid_),
  };
  WorldBossConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldBossConfig_descriptor_,
      WorldBossConfig::default_instance_,
      WorldBossConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldBossConfig));
  WorldBossRelivenow_descriptor_ = file->message_type(7);
  static const int WorldBossRelivenow_offsets_[1] = {
  };
  WorldBossRelivenow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldBossRelivenow_descriptor_,
      WorldBossRelivenow::default_instance_,
      WorldBossRelivenow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRelivenow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossRelivenow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldBossRelivenow));
  WorldBossGoldInspire_descriptor_ = file->message_type(8);
  static const int WorldBossGoldInspire_offsets_[1] = {
  };
  WorldBossGoldInspire_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldBossGoldInspire_descriptor_,
      WorldBossGoldInspire::default_instance_,
      WorldBossGoldInspire_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossGoldInspire, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossGoldInspire, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldBossGoldInspire));
  WorldBossDiamondInspire_descriptor_ = file->message_type(9);
  static const int WorldBossDiamondInspire_offsets_[1] = {
  };
  WorldBossDiamondInspire_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldBossDiamondInspire_descriptor_,
      WorldBossDiamondInspire::default_instance_,
      WorldBossDiamondInspire_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossDiamondInspire, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossDiamondInspire, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldBossDiamondInspire));
  WorldBossStatisticsInfo_descriptor_ = file->message_type(10);
  static const int WorldBossStatisticsInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossStatisticsInfo, playerguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossStatisticsInfo, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossStatisticsInfo, damagevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossStatisticsInfo, allbosshp_),
  };
  WorldBossStatisticsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldBossStatisticsInfo_descriptor_,
      WorldBossStatisticsInfo::default_instance_,
      WorldBossStatisticsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossStatisticsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossStatisticsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldBossStatisticsInfo));
  WorldBossStatisticsReq_descriptor_ = file->message_type(11);
  static const int WorldBossStatisticsReq_offsets_[1] = {
  };
  WorldBossStatisticsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldBossStatisticsReq_descriptor_,
      WorldBossStatisticsReq::default_instance_,
      WorldBossStatisticsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossStatisticsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossStatisticsReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldBossStatisticsReq));
  WorldBossStatisticsReply_descriptor_ = file->message_type(12);
  static const int WorldBossStatisticsReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossStatisticsReply, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossStatisticsReply, selfactordamage_),
  };
  WorldBossStatisticsReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldBossStatisticsReply_descriptor_,
      WorldBossStatisticsReply::default_instance_,
      WorldBossStatisticsReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossStatisticsReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossStatisticsReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldBossStatisticsReply));
  SetWorldBossAutoFightReq_descriptor_ = file->message_type(13);
  static const int SetWorldBossAutoFightReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetWorldBossAutoFightReq, autofight_),
  };
  SetWorldBossAutoFightReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetWorldBossAutoFightReq_descriptor_,
      SetWorldBossAutoFightReq::default_instance_,
      SetWorldBossAutoFightReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetWorldBossAutoFightReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetWorldBossAutoFightReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetWorldBossAutoFightReq));
  LeaveWorldBossReq_descriptor_ = file->message_type(14);
  static const int LeaveWorldBossReq_offsets_[1] = {
  };
  LeaveWorldBossReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaveWorldBossReq_descriptor_,
      LeaveWorldBossReq::default_instance_,
      LeaveWorldBossReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveWorldBossReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveWorldBossReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaveWorldBossReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_WorldBoss_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldBossInfo_descriptor_, &WorldBossInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldBossInfoReq_descriptor_, &WorldBossInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldBossInfoReply_descriptor_, &WorldBossInfoReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldBossHpReq_descriptor_, &WorldBossHpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldBossHpUpdate_descriptor_, &WorldBossHpUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldBossReliveCDUpdate_descriptor_, &WorldBossReliveCDUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldBossConfig_descriptor_, &WorldBossConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldBossRelivenow_descriptor_, &WorldBossRelivenow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldBossGoldInspire_descriptor_, &WorldBossGoldInspire::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldBossDiamondInspire_descriptor_, &WorldBossDiamondInspire::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldBossStatisticsInfo_descriptor_, &WorldBossStatisticsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldBossStatisticsReq_descriptor_, &WorldBossStatisticsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldBossStatisticsReply_descriptor_, &WorldBossStatisticsReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetWorldBossAutoFightReq_descriptor_, &SetWorldBossAutoFightReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaveWorldBossReq_descriptor_, &LeaveWorldBossReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_WorldBoss_2eproto() {
  delete WorldBossInfo::default_instance_;
  delete WorldBossInfo_reflection_;
  delete WorldBossInfoReq::default_instance_;
  delete WorldBossInfoReq_reflection_;
  delete WorldBossInfoReply::default_instance_;
  delete WorldBossInfoReply_reflection_;
  delete WorldBossHpReq::default_instance_;
  delete WorldBossHpReq_reflection_;
  delete WorldBossHpUpdate::default_instance_;
  delete WorldBossHpUpdate_reflection_;
  delete WorldBossReliveCDUpdate::default_instance_;
  delete WorldBossReliveCDUpdate_reflection_;
  delete WorldBossConfig::default_instance_;
  delete WorldBossConfig_reflection_;
  delete WorldBossRelivenow::default_instance_;
  delete WorldBossRelivenow_reflection_;
  delete WorldBossGoldInspire::default_instance_;
  delete WorldBossGoldInspire_reflection_;
  delete WorldBossDiamondInspire::default_instance_;
  delete WorldBossDiamondInspire_reflection_;
  delete WorldBossStatisticsInfo::default_instance_;
  delete WorldBossStatisticsInfo_reflection_;
  delete WorldBossStatisticsReq::default_instance_;
  delete WorldBossStatisticsReq_reflection_;
  delete WorldBossStatisticsReply::default_instance_;
  delete WorldBossStatisticsReply_reflection_;
  delete SetWorldBossAutoFightReq::default_instance_;
  delete SetWorldBossAutoFightReq_reflection_;
  delete LeaveWorldBossReq::default_instance_;
  delete LeaveWorldBossReq_reflection_;
}

void protobuf_AddDesc_WorldBoss_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Packet::protobuf_AddDesc_PlayerBasicInfo_2eproto();
  ::Packet::protobuf_AddDesc_ItemAndEquip_2eproto();
  ::Packet::protobuf_AddDesc_BattleExpression_2eproto();
  ::Packet::protobuf_AddDesc_ProtoBufOption_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017WorldBoss.proto\022\006Packet\032\025PlayerBasicIn"
    "fo.proto\032\022ItemAndEquip.proto\032\026BattleExpr"
    "ession.proto\032\024ProtoBufOption.proto\"\\\n\rWo"
    "rldBossInfo\022\024\n\006bossid\030\001 \002(\005B\004\310\363\030\001\022\021\n\tbos"
    "slevel\030\002 \002(\005\022\026\n\016monstergourpid\030\003 \002(\005\022\n\n\002"
    "hp\030\004 \002(\006\"\022\n\020WorldBossInfoReq\"_\n\022WorldBos"
    "sInfoReply\022#\n\004boss\030\001 \002(\0132\025.Packet.WorldB"
    "ossInfo\022\r\n\005allhp\030\002 \002(\006\022\025\n\rboss_seriesid\030"
    "\003 \002(\005\"\020\n\016WorldBossHpReq\"\037\n\021WorldBossHpUp"
    "date\022\n\n\002hp\030\001 \002(\006\"+\n\027WorldBossReliveCDUpd"
    "ate\022\020\n\010relivecd\030\001 \002(\005\"_\n\017WorldBossConfig"
    "\022\013\n\003day\030\001 \002(\005\022\017\n\007gourpid\030\002 \002(\005\022\016\n\006reward"
    "\030\003 \002(\005\022\r\n\005npcid\030\004 \002(\005\022\017\n\007sceneid\030\005 \002(\005\"\024"
    "\n\022WorldBossRelivenow\"\026\n\024WorldBossGoldIns"
    "pire\"\031\n\027WorldBossDiamondInspire\"i\n\027World"
    "BossStatisticsInfo\022\022\n\nplayerguid\030\001 \002(\006\022\022"
    "\n\nplayername\030\002 \002(\t\022\023\n\013damagevalue\030\003 \002(\005\022"
    "\021\n\tallbosshp\030\004 \002(\006\"\030\n\026WorldBossStatistic"
    "sReq\"x\n\030WorldBossStatisticsReply\022.\n\005info"
    "s\030\001 \003(\0132\037.Packet.WorldBossStatisticsInfo"
    "\022,\n\017selfactordamage\030\002 \003(\0132\023.Packet.Actor"
    "Damage\"-\n\030SetWorldBossAutoFightReq\022\021\n\tau"
    "tofight\030\001 \002(\010\"\023\n\021LeaveWorldBossReq", 914);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "WorldBoss.proto", &protobuf_RegisterTypes);
  WorldBossInfo::default_instance_ = new WorldBossInfo();
  WorldBossInfoReq::default_instance_ = new WorldBossInfoReq();
  WorldBossInfoReply::default_instance_ = new WorldBossInfoReply();
  WorldBossHpReq::default_instance_ = new WorldBossHpReq();
  WorldBossHpUpdate::default_instance_ = new WorldBossHpUpdate();
  WorldBossReliveCDUpdate::default_instance_ = new WorldBossReliveCDUpdate();
  WorldBossConfig::default_instance_ = new WorldBossConfig();
  WorldBossRelivenow::default_instance_ = new WorldBossRelivenow();
  WorldBossGoldInspire::default_instance_ = new WorldBossGoldInspire();
  WorldBossDiamondInspire::default_instance_ = new WorldBossDiamondInspire();
  WorldBossStatisticsInfo::default_instance_ = new WorldBossStatisticsInfo();
  WorldBossStatisticsReq::default_instance_ = new WorldBossStatisticsReq();
  WorldBossStatisticsReply::default_instance_ = new WorldBossStatisticsReply();
  SetWorldBossAutoFightReq::default_instance_ = new SetWorldBossAutoFightReq();
  LeaveWorldBossReq::default_instance_ = new LeaveWorldBossReq();
  WorldBossInfo::default_instance_->InitAsDefaultInstance();
  WorldBossInfoReq::default_instance_->InitAsDefaultInstance();
  WorldBossInfoReply::default_instance_->InitAsDefaultInstance();
  WorldBossHpReq::default_instance_->InitAsDefaultInstance();
  WorldBossHpUpdate::default_instance_->InitAsDefaultInstance();
  WorldBossReliveCDUpdate::default_instance_->InitAsDefaultInstance();
  WorldBossConfig::default_instance_->InitAsDefaultInstance();
  WorldBossRelivenow::default_instance_->InitAsDefaultInstance();
  WorldBossGoldInspire::default_instance_->InitAsDefaultInstance();
  WorldBossDiamondInspire::default_instance_->InitAsDefaultInstance();
  WorldBossStatisticsInfo::default_instance_->InitAsDefaultInstance();
  WorldBossStatisticsReq::default_instance_->InitAsDefaultInstance();
  WorldBossStatisticsReply::default_instance_->InitAsDefaultInstance();
  SetWorldBossAutoFightReq::default_instance_->InitAsDefaultInstance();
  LeaveWorldBossReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WorldBoss_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WorldBoss_2eproto {
  StaticDescriptorInitializer_WorldBoss_2eproto() {
    protobuf_AddDesc_WorldBoss_2eproto();
  }
} static_descriptor_initializer_WorldBoss_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int WorldBossInfo::kBossidFieldNumber;
const int WorldBossInfo::kBosslevelFieldNumber;
const int WorldBossInfo::kMonstergourpidFieldNumber;
const int WorldBossInfo::kHpFieldNumber;
#endif  // !_MSC_VER

WorldBossInfo::WorldBossInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldBossInfo::InitAsDefaultInstance() {
}

WorldBossInfo::WorldBossInfo(const WorldBossInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldBossInfo::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0;
  bosslevel_ = 0;
  monstergourpid_ = 0;
  hp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldBossInfo::~WorldBossInfo() {
  SharedDtor();
}

void WorldBossInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldBossInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldBossInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldBossInfo_descriptor_;
}

const WorldBossInfo& WorldBossInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBoss_2eproto();
  return *default_instance_;
}

WorldBossInfo* WorldBossInfo::default_instance_ = NULL;

WorldBossInfo* WorldBossInfo::New() const {
  return new WorldBossInfo;
}

void WorldBossInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bossid_ = 0;
    bosslevel_ = 0;
    monstergourpid_ = 0;
    hp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool WorldBossInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bossid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bosslevel;
        break;
      }

      // required int32 bosslevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bosslevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bosslevel_)));
          set_has_bosslevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_monstergourpid;
        break;
      }

      // required int32 monstergourpid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monstergourpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monstergourpid_)));
          set_has_monstergourpid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_hp;
        break;
      }

      // required fixed64 hp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void WorldBossInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 bossid = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bossid(), output);
  }

  // required int32 bosslevel = 2;
  if (has_bosslevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bosslevel(), output);
  }

  // required int32 monstergourpid = 3;
  if (has_monstergourpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->monstergourpid(), output);
  }

  // required fixed64 hp = 4;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldBossInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 bossid = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bossid(), target);
  }

  // required int32 bosslevel = 2;
  if (has_bosslevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bosslevel(), target);
  }

  // required int32 monstergourpid = 3;
  if (has_monstergourpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->monstergourpid(), target);
  }

  // required fixed64 hp = 4;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldBossInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bossid = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossid());
    }

    // required int32 bosslevel = 2;
    if (has_bosslevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bosslevel());
    }

    // required int32 monstergourpid = 3;
    if (has_monstergourpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monstergourpid());
    }

    // required fixed64 hp = 4;
    if (has_hp()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldBossInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldBossInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldBossInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void WorldBossInfo::MergeFrom(const WorldBossInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_bosslevel()) {
      set_bosslevel(from.bosslevel());
    }
    if (from.has_monstergourpid()) {
      set_monstergourpid(from.monstergourpid());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void WorldBossInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void WorldBossInfo::CopyFrom(const WorldBossInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool WorldBossInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void WorldBossInfo::SetInitialized() {
  _has_bits_[0] |= 0x0000000f;

  return;
}

void WorldBossInfo::Swap(WorldBossInfo* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(bosslevel_, other->bosslevel_);
    std::swap(monstergourpid_, other->monstergourpid_);
    std::swap(hp_, other->hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata WorldBossInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldBossInfo_descriptor_;
  metadata.reflection = WorldBossInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

WorldBossInfoReq::WorldBossInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldBossInfoReq::InitAsDefaultInstance() {
}

WorldBossInfoReq::WorldBossInfoReq(const WorldBossInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldBossInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldBossInfoReq::~WorldBossInfoReq() {
  SharedDtor();
}

void WorldBossInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldBossInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldBossInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldBossInfoReq_descriptor_;
}

const WorldBossInfoReq& WorldBossInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBoss_2eproto();
  return *default_instance_;
}

WorldBossInfoReq* WorldBossInfoReq::default_instance_ = NULL;

WorldBossInfoReq* WorldBossInfoReq::New() const {
  return new WorldBossInfoReq;
}

void WorldBossInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool WorldBossInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void WorldBossInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldBossInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldBossInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldBossInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldBossInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldBossInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void WorldBossInfoReq::MergeFrom(const WorldBossInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void WorldBossInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void WorldBossInfoReq::CopyFrom(const WorldBossInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool WorldBossInfoReq::IsInitialized() const {

  return true;
}

void WorldBossInfoReq::SetInitialized() {

  return;
}

void WorldBossInfoReq::Swap(WorldBossInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata WorldBossInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldBossInfoReq_descriptor_;
  metadata.reflection = WorldBossInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldBossInfoReply::kBossFieldNumber;
const int WorldBossInfoReply::kAllhpFieldNumber;
const int WorldBossInfoReply::kBossSeriesidFieldNumber;
#endif  // !_MSC_VER

WorldBossInfoReply::WorldBossInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldBossInfoReply::InitAsDefaultInstance() {
  boss_ = const_cast< ::Packet::WorldBossInfo*>(&::Packet::WorldBossInfo::default_instance());
}

WorldBossInfoReply::WorldBossInfoReply(const WorldBossInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldBossInfoReply::SharedCtor() {
  _cached_size_ = 0;
  boss_ = NULL;
  allhp_ = GOOGLE_ULONGLONG(0);
  boss_seriesid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldBossInfoReply::~WorldBossInfoReply() {
  SharedDtor();
}

void WorldBossInfoReply::SharedDtor() {
  if (this != default_instance_) {
    delete boss_;
  }
}

void WorldBossInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldBossInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldBossInfoReply_descriptor_;
}

const WorldBossInfoReply& WorldBossInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBoss_2eproto();
  return *default_instance_;
}

WorldBossInfoReply* WorldBossInfoReply::default_instance_ = NULL;

WorldBossInfoReply* WorldBossInfoReply::New() const {
  return new WorldBossInfoReply;
}

void WorldBossInfoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_boss()) {
      if (boss_ != NULL) boss_->::Packet::WorldBossInfo::Clear();
    }
    allhp_ = GOOGLE_ULONGLONG(0);
    boss_seriesid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool WorldBossInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.WorldBossInfo boss = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boss()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_allhp;
        break;
      }

      // required fixed64 allhp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_allhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &allhp_)));
          set_has_allhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_boss_seriesid;
        break;
      }

      // required int32 boss_seriesid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_seriesid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boss_seriesid_)));
          set_has_boss_seriesid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void WorldBossInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.WorldBossInfo boss = 1;
  if (has_boss()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->boss(), output);
  }

  // required fixed64 allhp = 2;
  if (has_allhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->allhp(), output);
  }

  // required int32 boss_seriesid = 3;
  if (has_boss_seriesid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->boss_seriesid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldBossInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.WorldBossInfo boss = 1;
  if (has_boss()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->boss(), target);
  }

  // required fixed64 allhp = 2;
  if (has_allhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->allhp(), target);
  }

  // required int32 boss_seriesid = 3;
  if (has_boss_seriesid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->boss_seriesid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldBossInfoReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.WorldBossInfo boss = 1;
    if (has_boss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boss());
    }

    // required fixed64 allhp = 2;
    if (has_allhp()) {
      total_size += 1 + 8;
    }

    // required int32 boss_seriesid = 3;
    if (has_boss_seriesid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boss_seriesid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldBossInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldBossInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldBossInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void WorldBossInfoReply::MergeFrom(const WorldBossInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boss()) {
      mutable_boss()->::Packet::WorldBossInfo::MergeFrom(from.boss());
    }
    if (from.has_allhp()) {
      set_allhp(from.allhp());
    }
    if (from.has_boss_seriesid()) {
      set_boss_seriesid(from.boss_seriesid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void WorldBossInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void WorldBossInfoReply::CopyFrom(const WorldBossInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool WorldBossInfoReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_boss()) {
    if (!this->boss().IsInitialized()) return false;
  }
  return true;
}

void WorldBossInfoReply::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  if (has_boss()) {
    this->mutable_boss()->SetInitialized();
  }
  return;
}

void WorldBossInfoReply::Swap(WorldBossInfoReply* other) {
  if (other != this) {
    std::swap(boss_, other->boss_);
    std::swap(allhp_, other->allhp_);
    std::swap(boss_seriesid_, other->boss_seriesid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata WorldBossInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldBossInfoReply_descriptor_;
  metadata.reflection = WorldBossInfoReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

WorldBossHpReq::WorldBossHpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldBossHpReq::InitAsDefaultInstance() {
}

WorldBossHpReq::WorldBossHpReq(const WorldBossHpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldBossHpReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldBossHpReq::~WorldBossHpReq() {
  SharedDtor();
}

void WorldBossHpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldBossHpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldBossHpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldBossHpReq_descriptor_;
}

const WorldBossHpReq& WorldBossHpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBoss_2eproto();
  return *default_instance_;
}

WorldBossHpReq* WorldBossHpReq::default_instance_ = NULL;

WorldBossHpReq* WorldBossHpReq::New() const {
  return new WorldBossHpReq;
}

void WorldBossHpReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool WorldBossHpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void WorldBossHpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldBossHpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldBossHpReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldBossHpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldBossHpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldBossHpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void WorldBossHpReq::MergeFrom(const WorldBossHpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void WorldBossHpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void WorldBossHpReq::CopyFrom(const WorldBossHpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool WorldBossHpReq::IsInitialized() const {

  return true;
}

void WorldBossHpReq::SetInitialized() {

  return;
}

void WorldBossHpReq::Swap(WorldBossHpReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata WorldBossHpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldBossHpReq_descriptor_;
  metadata.reflection = WorldBossHpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldBossHpUpdate::kHpFieldNumber;
#endif  // !_MSC_VER

WorldBossHpUpdate::WorldBossHpUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldBossHpUpdate::InitAsDefaultInstance() {
}

WorldBossHpUpdate::WorldBossHpUpdate(const WorldBossHpUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldBossHpUpdate::SharedCtor() {
  _cached_size_ = 0;
  hp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldBossHpUpdate::~WorldBossHpUpdate() {
  SharedDtor();
}

void WorldBossHpUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldBossHpUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldBossHpUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldBossHpUpdate_descriptor_;
}

const WorldBossHpUpdate& WorldBossHpUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBoss_2eproto();
  return *default_instance_;
}

WorldBossHpUpdate* WorldBossHpUpdate::default_instance_ = NULL;

WorldBossHpUpdate* WorldBossHpUpdate::New() const {
  return new WorldBossHpUpdate;
}

void WorldBossHpUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool WorldBossHpUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 hp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void WorldBossHpUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 hp = 1;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldBossHpUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 hp = 1;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldBossHpUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 hp = 1;
    if (has_hp()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldBossHpUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldBossHpUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldBossHpUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void WorldBossHpUpdate::MergeFrom(const WorldBossHpUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hp()) {
      set_hp(from.hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void WorldBossHpUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void WorldBossHpUpdate::CopyFrom(const WorldBossHpUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool WorldBossHpUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WorldBossHpUpdate::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void WorldBossHpUpdate::Swap(WorldBossHpUpdate* other) {
  if (other != this) {
    std::swap(hp_, other->hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata WorldBossHpUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldBossHpUpdate_descriptor_;
  metadata.reflection = WorldBossHpUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldBossReliveCDUpdate::kRelivecdFieldNumber;
#endif  // !_MSC_VER

WorldBossReliveCDUpdate::WorldBossReliveCDUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldBossReliveCDUpdate::InitAsDefaultInstance() {
}

WorldBossReliveCDUpdate::WorldBossReliveCDUpdate(const WorldBossReliveCDUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldBossReliveCDUpdate::SharedCtor() {
  _cached_size_ = 0;
  relivecd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldBossReliveCDUpdate::~WorldBossReliveCDUpdate() {
  SharedDtor();
}

void WorldBossReliveCDUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldBossReliveCDUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldBossReliveCDUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldBossReliveCDUpdate_descriptor_;
}

const WorldBossReliveCDUpdate& WorldBossReliveCDUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBoss_2eproto();
  return *default_instance_;
}

WorldBossReliveCDUpdate* WorldBossReliveCDUpdate::default_instance_ = NULL;

WorldBossReliveCDUpdate* WorldBossReliveCDUpdate::New() const {
  return new WorldBossReliveCDUpdate;
}

void WorldBossReliveCDUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    relivecd_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool WorldBossReliveCDUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 relivecd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &relivecd_)));
          set_has_relivecd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void WorldBossReliveCDUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 relivecd = 1;
  if (has_relivecd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->relivecd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldBossReliveCDUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 relivecd = 1;
  if (has_relivecd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->relivecd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldBossReliveCDUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 relivecd = 1;
    if (has_relivecd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->relivecd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldBossReliveCDUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldBossReliveCDUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldBossReliveCDUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void WorldBossReliveCDUpdate::MergeFrom(const WorldBossReliveCDUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_relivecd()) {
      set_relivecd(from.relivecd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void WorldBossReliveCDUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void WorldBossReliveCDUpdate::CopyFrom(const WorldBossReliveCDUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool WorldBossReliveCDUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WorldBossReliveCDUpdate::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void WorldBossReliveCDUpdate::Swap(WorldBossReliveCDUpdate* other) {
  if (other != this) {
    std::swap(relivecd_, other->relivecd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata WorldBossReliveCDUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldBossReliveCDUpdate_descriptor_;
  metadata.reflection = WorldBossReliveCDUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldBossConfig::kDayFieldNumber;
const int WorldBossConfig::kGourpidFieldNumber;
const int WorldBossConfig::kRewardFieldNumber;
const int WorldBossConfig::kNpcidFieldNumber;
const int WorldBossConfig::kSceneidFieldNumber;
#endif  // !_MSC_VER

WorldBossConfig::WorldBossConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldBossConfig::InitAsDefaultInstance() {
}

WorldBossConfig::WorldBossConfig(const WorldBossConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldBossConfig::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0;
  gourpid_ = 0;
  reward_ = 0;
  npcid_ = 0;
  sceneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldBossConfig::~WorldBossConfig() {
  SharedDtor();
}

void WorldBossConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldBossConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldBossConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldBossConfig_descriptor_;
}

const WorldBossConfig& WorldBossConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBoss_2eproto();
  return *default_instance_;
}

WorldBossConfig* WorldBossConfig::default_instance_ = NULL;

WorldBossConfig* WorldBossConfig::New() const {
  return new WorldBossConfig;
}

void WorldBossConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    day_ = 0;
    gourpid_ = 0;
    reward_ = 0;
    npcid_ = 0;
    sceneid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool WorldBossConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gourpid;
        break;
      }

      // required int32 gourpid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gourpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gourpid_)));
          set_has_gourpid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reward;
        break;
      }

      // required int32 reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_npcid;
        break;
      }

      // required int32 npcid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sceneid;
        break;
      }

      // required int32 sceneid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void WorldBossConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->day(), output);
  }

  // required int32 gourpid = 2;
  if (has_gourpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gourpid(), output);
  }

  // required int32 reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reward(), output);
  }

  // required int32 npcid = 4;
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->npcid(), output);
  }

  // required int32 sceneid = 5;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldBossConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 day = 1;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->day(), target);
  }

  // required int32 gourpid = 2;
  if (has_gourpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gourpid(), target);
  }

  // required int32 reward = 3;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reward(), target);
  }

  // required int32 npcid = 4;
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->npcid(), target);
  }

  // required int32 sceneid = 5;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldBossConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }

    // required int32 gourpid = 2;
    if (has_gourpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gourpid());
    }

    // required int32 reward = 3;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward());
    }

    // required int32 npcid = 4;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npcid());
    }

    // required int32 sceneid = 5;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldBossConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldBossConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldBossConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void WorldBossConfig::MergeFrom(const WorldBossConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_gourpid()) {
      set_gourpid(from.gourpid());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void WorldBossConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void WorldBossConfig::CopyFrom(const WorldBossConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool WorldBossConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void WorldBossConfig::SetInitialized() {
  _has_bits_[0] |= 0x0000001f;

  return;
}

void WorldBossConfig::Swap(WorldBossConfig* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    std::swap(gourpid_, other->gourpid_);
    std::swap(reward_, other->reward_);
    std::swap(npcid_, other->npcid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata WorldBossConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldBossConfig_descriptor_;
  metadata.reflection = WorldBossConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

WorldBossRelivenow::WorldBossRelivenow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldBossRelivenow::InitAsDefaultInstance() {
}

WorldBossRelivenow::WorldBossRelivenow(const WorldBossRelivenow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldBossRelivenow::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldBossRelivenow::~WorldBossRelivenow() {
  SharedDtor();
}

void WorldBossRelivenow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldBossRelivenow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldBossRelivenow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldBossRelivenow_descriptor_;
}

const WorldBossRelivenow& WorldBossRelivenow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBoss_2eproto();
  return *default_instance_;
}

WorldBossRelivenow* WorldBossRelivenow::default_instance_ = NULL;

WorldBossRelivenow* WorldBossRelivenow::New() const {
  return new WorldBossRelivenow;
}

void WorldBossRelivenow::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool WorldBossRelivenow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void WorldBossRelivenow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldBossRelivenow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldBossRelivenow::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldBossRelivenow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldBossRelivenow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldBossRelivenow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void WorldBossRelivenow::MergeFrom(const WorldBossRelivenow& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void WorldBossRelivenow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void WorldBossRelivenow::CopyFrom(const WorldBossRelivenow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool WorldBossRelivenow::IsInitialized() const {

  return true;
}

void WorldBossRelivenow::SetInitialized() {

  return;
}

void WorldBossRelivenow::Swap(WorldBossRelivenow* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata WorldBossRelivenow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldBossRelivenow_descriptor_;
  metadata.reflection = WorldBossRelivenow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

WorldBossGoldInspire::WorldBossGoldInspire()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldBossGoldInspire::InitAsDefaultInstance() {
}

WorldBossGoldInspire::WorldBossGoldInspire(const WorldBossGoldInspire& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldBossGoldInspire::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldBossGoldInspire::~WorldBossGoldInspire() {
  SharedDtor();
}

void WorldBossGoldInspire::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldBossGoldInspire::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldBossGoldInspire::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldBossGoldInspire_descriptor_;
}

const WorldBossGoldInspire& WorldBossGoldInspire::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBoss_2eproto();
  return *default_instance_;
}

WorldBossGoldInspire* WorldBossGoldInspire::default_instance_ = NULL;

WorldBossGoldInspire* WorldBossGoldInspire::New() const {
  return new WorldBossGoldInspire;
}

void WorldBossGoldInspire::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool WorldBossGoldInspire::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void WorldBossGoldInspire::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldBossGoldInspire::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldBossGoldInspire::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldBossGoldInspire::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldBossGoldInspire* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldBossGoldInspire*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void WorldBossGoldInspire::MergeFrom(const WorldBossGoldInspire& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void WorldBossGoldInspire::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void WorldBossGoldInspire::CopyFrom(const WorldBossGoldInspire& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool WorldBossGoldInspire::IsInitialized() const {

  return true;
}

void WorldBossGoldInspire::SetInitialized() {

  return;
}

void WorldBossGoldInspire::Swap(WorldBossGoldInspire* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata WorldBossGoldInspire::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldBossGoldInspire_descriptor_;
  metadata.reflection = WorldBossGoldInspire_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

WorldBossDiamondInspire::WorldBossDiamondInspire()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldBossDiamondInspire::InitAsDefaultInstance() {
}

WorldBossDiamondInspire::WorldBossDiamondInspire(const WorldBossDiamondInspire& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldBossDiamondInspire::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldBossDiamondInspire::~WorldBossDiamondInspire() {
  SharedDtor();
}

void WorldBossDiamondInspire::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldBossDiamondInspire::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldBossDiamondInspire::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldBossDiamondInspire_descriptor_;
}

const WorldBossDiamondInspire& WorldBossDiamondInspire::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBoss_2eproto();
  return *default_instance_;
}

WorldBossDiamondInspire* WorldBossDiamondInspire::default_instance_ = NULL;

WorldBossDiamondInspire* WorldBossDiamondInspire::New() const {
  return new WorldBossDiamondInspire;
}

void WorldBossDiamondInspire::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool WorldBossDiamondInspire::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void WorldBossDiamondInspire::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldBossDiamondInspire::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldBossDiamondInspire::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldBossDiamondInspire::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldBossDiamondInspire* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldBossDiamondInspire*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void WorldBossDiamondInspire::MergeFrom(const WorldBossDiamondInspire& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void WorldBossDiamondInspire::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void WorldBossDiamondInspire::CopyFrom(const WorldBossDiamondInspire& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool WorldBossDiamondInspire::IsInitialized() const {

  return true;
}

void WorldBossDiamondInspire::SetInitialized() {

  return;
}

void WorldBossDiamondInspire::Swap(WorldBossDiamondInspire* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata WorldBossDiamondInspire::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldBossDiamondInspire_descriptor_;
  metadata.reflection = WorldBossDiamondInspire_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldBossStatisticsInfo::kPlayerguidFieldNumber;
const int WorldBossStatisticsInfo::kPlayernameFieldNumber;
const int WorldBossStatisticsInfo::kDamagevalueFieldNumber;
const int WorldBossStatisticsInfo::kAllbosshpFieldNumber;
#endif  // !_MSC_VER

WorldBossStatisticsInfo::WorldBossStatisticsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldBossStatisticsInfo::InitAsDefaultInstance() {
}

WorldBossStatisticsInfo::WorldBossStatisticsInfo(const WorldBossStatisticsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldBossStatisticsInfo::SharedCtor() {
  _cached_size_ = 0;
  playerguid_ = GOOGLE_ULONGLONG(0);
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  damagevalue_ = 0;
  allbosshp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldBossStatisticsInfo::~WorldBossStatisticsInfo() {
  SharedDtor();
}

void WorldBossStatisticsInfo::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void WorldBossStatisticsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldBossStatisticsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldBossStatisticsInfo_descriptor_;
}

const WorldBossStatisticsInfo& WorldBossStatisticsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBoss_2eproto();
  return *default_instance_;
}

WorldBossStatisticsInfo* WorldBossStatisticsInfo::default_instance_ = NULL;

WorldBossStatisticsInfo* WorldBossStatisticsInfo::New() const {
  return new WorldBossStatisticsInfo;
}

void WorldBossStatisticsInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerguid_ = GOOGLE_ULONGLONG(0);
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    damagevalue_ = 0;
    allbosshp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool WorldBossStatisticsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 playerguid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &playerguid_)));
          set_has_playerguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playername;
        break;
      }

      // required string playername = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_damagevalue;
        break;
      }

      // required int32 damagevalue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damagevalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damagevalue_)));
          set_has_damagevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_allbosshp;
        break;
      }

      // required fixed64 allbosshp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_allbosshp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &allbosshp_)));
          set_has_allbosshp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void WorldBossStatisticsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 playerguid = 1;
  if (has_playerguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->playerguid(), output);
  }

  // required string playername = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->playername(), output);
  }

  // required int32 damagevalue = 3;
  if (has_damagevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->damagevalue(), output);
  }

  // required fixed64 allbosshp = 4;
  if (has_allbosshp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->allbosshp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldBossStatisticsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 playerguid = 1;
  if (has_playerguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->playerguid(), target);
  }

  // required string playername = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playername(), target);
  }

  // required int32 damagevalue = 3;
  if (has_damagevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->damagevalue(), target);
  }

  // required fixed64 allbosshp = 4;
  if (has_allbosshp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->allbosshp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldBossStatisticsInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 playerguid = 1;
    if (has_playerguid()) {
      total_size += 1 + 8;
    }

    // required string playername = 2;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // required int32 damagevalue = 3;
    if (has_damagevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damagevalue());
    }

    // required fixed64 allbosshp = 4;
    if (has_allbosshp()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldBossStatisticsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldBossStatisticsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldBossStatisticsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void WorldBossStatisticsInfo::MergeFrom(const WorldBossStatisticsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerguid()) {
      set_playerguid(from.playerguid());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_damagevalue()) {
      set_damagevalue(from.damagevalue());
    }
    if (from.has_allbosshp()) {
      set_allbosshp(from.allbosshp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void WorldBossStatisticsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void WorldBossStatisticsInfo::CopyFrom(const WorldBossStatisticsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool WorldBossStatisticsInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void WorldBossStatisticsInfo::SetInitialized() {
  _has_bits_[0] |= 0x0000000f;

  return;
}

void WorldBossStatisticsInfo::Swap(WorldBossStatisticsInfo* other) {
  if (other != this) {
    std::swap(playerguid_, other->playerguid_);
    std::swap(playername_, other->playername_);
    std::swap(damagevalue_, other->damagevalue_);
    std::swap(allbosshp_, other->allbosshp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata WorldBossStatisticsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldBossStatisticsInfo_descriptor_;
  metadata.reflection = WorldBossStatisticsInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

WorldBossStatisticsReq::WorldBossStatisticsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldBossStatisticsReq::InitAsDefaultInstance() {
}

WorldBossStatisticsReq::WorldBossStatisticsReq(const WorldBossStatisticsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldBossStatisticsReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldBossStatisticsReq::~WorldBossStatisticsReq() {
  SharedDtor();
}

void WorldBossStatisticsReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldBossStatisticsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldBossStatisticsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldBossStatisticsReq_descriptor_;
}

const WorldBossStatisticsReq& WorldBossStatisticsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBoss_2eproto();
  return *default_instance_;
}

WorldBossStatisticsReq* WorldBossStatisticsReq::default_instance_ = NULL;

WorldBossStatisticsReq* WorldBossStatisticsReq::New() const {
  return new WorldBossStatisticsReq;
}

void WorldBossStatisticsReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool WorldBossStatisticsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void WorldBossStatisticsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldBossStatisticsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldBossStatisticsReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldBossStatisticsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldBossStatisticsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldBossStatisticsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void WorldBossStatisticsReq::MergeFrom(const WorldBossStatisticsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void WorldBossStatisticsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void WorldBossStatisticsReq::CopyFrom(const WorldBossStatisticsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool WorldBossStatisticsReq::IsInitialized() const {

  return true;
}

void WorldBossStatisticsReq::SetInitialized() {

  return;
}

void WorldBossStatisticsReq::Swap(WorldBossStatisticsReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata WorldBossStatisticsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldBossStatisticsReq_descriptor_;
  metadata.reflection = WorldBossStatisticsReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldBossStatisticsReply::kInfosFieldNumber;
const int WorldBossStatisticsReply::kSelfactordamageFieldNumber;
#endif  // !_MSC_VER

WorldBossStatisticsReply::WorldBossStatisticsReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldBossStatisticsReply::InitAsDefaultInstance() {
}

WorldBossStatisticsReply::WorldBossStatisticsReply(const WorldBossStatisticsReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldBossStatisticsReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldBossStatisticsReply::~WorldBossStatisticsReply() {
  SharedDtor();
}

void WorldBossStatisticsReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldBossStatisticsReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldBossStatisticsReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldBossStatisticsReply_descriptor_;
}

const WorldBossStatisticsReply& WorldBossStatisticsReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBoss_2eproto();
  return *default_instance_;
}

WorldBossStatisticsReply* WorldBossStatisticsReply::default_instance_ = NULL;

WorldBossStatisticsReply* WorldBossStatisticsReply::New() const {
  return new WorldBossStatisticsReply;
}

void WorldBossStatisticsReply::Clear() {
  infos_.Clear();
  selfactordamage_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool WorldBossStatisticsReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.WorldBossStatisticsInfo infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectTag(18)) goto parse_selfactordamage;
        break;
      }

      // repeated .Packet.ActorDamage selfactordamage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selfactordamage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_selfactordamage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_selfactordamage;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void WorldBossStatisticsReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.WorldBossStatisticsInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  // repeated .Packet.ActorDamage selfactordamage = 2;
  for (int i = 0; i < this->selfactordamage_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->selfactordamage(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldBossStatisticsReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.WorldBossStatisticsInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }

  // repeated .Packet.ActorDamage selfactordamage = 2;
  for (int i = 0; i < this->selfactordamage_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->selfactordamage(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldBossStatisticsReply::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.WorldBossStatisticsInfo infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  // repeated .Packet.ActorDamage selfactordamage = 2;
  total_size += 1 * this->selfactordamage_size();
  for (int i = 0; i < this->selfactordamage_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->selfactordamage(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldBossStatisticsReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldBossStatisticsReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldBossStatisticsReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void WorldBossStatisticsReply::MergeFrom(const WorldBossStatisticsReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  selfactordamage_.MergeFrom(from.selfactordamage_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void WorldBossStatisticsReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void WorldBossStatisticsReply::CopyFrom(const WorldBossStatisticsReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool WorldBossStatisticsReply::IsInitialized() const {

  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  for (int i = 0; i < selfactordamage_size(); i++) {
    if (!this->selfactordamage(i).IsInitialized()) return false;
  }
  return true;
}

void WorldBossStatisticsReply::SetInitialized() {

  for (int i = 0; i < infos_size(); i++) {
    this->mutable_infos(i)->SetInitialized();
  }
  for (int i = 0; i < selfactordamage_size(); i++) {
    this->mutable_selfactordamage(i)->SetInitialized();
  }
  return;
}

void WorldBossStatisticsReply::Swap(WorldBossStatisticsReply* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    selfactordamage_.Swap(&other->selfactordamage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata WorldBossStatisticsReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldBossStatisticsReply_descriptor_;
  metadata.reflection = WorldBossStatisticsReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetWorldBossAutoFightReq::kAutofightFieldNumber;
#endif  // !_MSC_VER

SetWorldBossAutoFightReq::SetWorldBossAutoFightReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetWorldBossAutoFightReq::InitAsDefaultInstance() {
}

SetWorldBossAutoFightReq::SetWorldBossAutoFightReq(const SetWorldBossAutoFightReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetWorldBossAutoFightReq::SharedCtor() {
  _cached_size_ = 0;
  autofight_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetWorldBossAutoFightReq::~SetWorldBossAutoFightReq() {
  SharedDtor();
}

void SetWorldBossAutoFightReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetWorldBossAutoFightReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetWorldBossAutoFightReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetWorldBossAutoFightReq_descriptor_;
}

const SetWorldBossAutoFightReq& SetWorldBossAutoFightReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBoss_2eproto();
  return *default_instance_;
}

SetWorldBossAutoFightReq* SetWorldBossAutoFightReq::default_instance_ = NULL;

SetWorldBossAutoFightReq* SetWorldBossAutoFightReq::New() const {
  return new SetWorldBossAutoFightReq;
}

void SetWorldBossAutoFightReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    autofight_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SetWorldBossAutoFightReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool autofight = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autofight_)));
          set_has_autofight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SetWorldBossAutoFightReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool autofight = 1;
  if (has_autofight()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->autofight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetWorldBossAutoFightReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool autofight = 1;
  if (has_autofight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->autofight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetWorldBossAutoFightReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool autofight = 1;
    if (has_autofight()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetWorldBossAutoFightReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetWorldBossAutoFightReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetWorldBossAutoFightReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SetWorldBossAutoFightReq::MergeFrom(const SetWorldBossAutoFightReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_autofight()) {
      set_autofight(from.autofight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SetWorldBossAutoFightReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SetWorldBossAutoFightReq::CopyFrom(const SetWorldBossAutoFightReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SetWorldBossAutoFightReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetWorldBossAutoFightReq::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void SetWorldBossAutoFightReq::Swap(SetWorldBossAutoFightReq* other) {
  if (other != this) {
    std::swap(autofight_, other->autofight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SetWorldBossAutoFightReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetWorldBossAutoFightReq_descriptor_;
  metadata.reflection = SetWorldBossAutoFightReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

LeaveWorldBossReq::LeaveWorldBossReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeaveWorldBossReq::InitAsDefaultInstance() {
}

LeaveWorldBossReq::LeaveWorldBossReq(const LeaveWorldBossReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeaveWorldBossReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveWorldBossReq::~LeaveWorldBossReq() {
  SharedDtor();
}

void LeaveWorldBossReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeaveWorldBossReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveWorldBossReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveWorldBossReq_descriptor_;
}

const LeaveWorldBossReq& LeaveWorldBossReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBoss_2eproto();
  return *default_instance_;
}

LeaveWorldBossReq* LeaveWorldBossReq::default_instance_ = NULL;

LeaveWorldBossReq* LeaveWorldBossReq::New() const {
  return new LeaveWorldBossReq;
}

void LeaveWorldBossReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool LeaveWorldBossReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void LeaveWorldBossReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeaveWorldBossReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeaveWorldBossReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveWorldBossReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaveWorldBossReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaveWorldBossReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void LeaveWorldBossReq::MergeFrom(const LeaveWorldBossReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void LeaveWorldBossReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void LeaveWorldBossReq::CopyFrom(const LeaveWorldBossReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool LeaveWorldBossReq::IsInitialized() const {

  return true;
}

void LeaveWorldBossReq::SetInitialized() {

  return;
}

void LeaveWorldBossReq::Swap(LeaveWorldBossReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata LeaveWorldBossReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveWorldBossReq_descriptor_;
  metadata.reflection = LeaveWorldBossReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

// @@protoc_insertion_point(global_scope)
