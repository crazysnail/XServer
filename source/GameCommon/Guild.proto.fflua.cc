// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Guild.proto
#include "Guild.pb.h"
#include "Guild.proto.fflua.h"
namespace Packet {
bool PlayerGuildUserData_fflua_reg(lua_State* state)
{
//for decltype
	PlayerGuildUserData* message(nullptr);
	message;
	ff::fflua_register_t<PlayerGuildUserData, ctor()>(state, "PlayerGuildUserData", "google::protobuf::Message")
		// required .Packet.GuildPosition position = 1;
		.def(&PlayerGuildUserData::position, "position")
		.def(&PlayerGuildUserData::set_position, "set_position")
		// required int32 bdonation = 2;
		.def(&PlayerGuildUserData::bdonation, "bdonation")
		.def(&PlayerGuildUserData::set_bdonation, "set_bdonation")
		// required int32 bbonus = 3;
		.def(&PlayerGuildUserData::bbonus, "bbonus")
		.def(&PlayerGuildUserData::set_bbonus, "set_bbonus")
		// required int32 curcontribution = 4;
		.def(&PlayerGuildUserData::curcontribution, "curcontribution")
		.def(&PlayerGuildUserData::set_curcontribution, "set_curcontribution")
		// required int32 weekcontribution = 5;
		.def(&PlayerGuildUserData::weekcontribution, "weekcontribution")
		.def(&PlayerGuildUserData::set_weekcontribution, "set_weekcontribution")
		// required int32 allcontribution = 6;
		.def(&PlayerGuildUserData::allcontribution, "allcontribution")
		.def(&PlayerGuildUserData::set_allcontribution, "set_allcontribution")
		// required uint32 jointime = 7;
		.def(&PlayerGuildUserData::jointime, "jointime")
		.def(&PlayerGuildUserData::set_jointime, "set_jointime")
		// required int32 guildlevel = 8;
		.def(&PlayerGuildUserData::guildlevel, "guildlevel")
		.def(&PlayerGuildUserData::set_guildlevel, "set_guildlevel")
		// required int32 cashboxlevel = 9;
		.def(&PlayerGuildUserData::cashboxlevel, "cashboxlevel")
		.def(&PlayerGuildUserData::set_cashboxlevel, "set_cashboxlevel")
		// required int32 shoplevel = 10;
		.def(&PlayerGuildUserData::shoplevel, "shoplevel")
		.def(&PlayerGuildUserData::set_shoplevel, "set_shoplevel")
		// required int32 storagelevel = 11;
		.def(&PlayerGuildUserData::storagelevel, "storagelevel")
		.def(&PlayerGuildUserData::set_storagelevel, "set_storagelevel")
		// optional string guildname = 12;
		.def(&PlayerGuildUserData::guildname, "guildname")
		.def<void (PlayerGuildUserData::*)(const std::string&)>(&PlayerGuildUserData::set_guildname, "set_guildname")
		.def(&PlayerGuildUserData::has_guildname, "has_guildname")
		.def(&PlayerGuildUserData::ByteSize, "ByteSize")
		.def(&PlayerGuildUserData::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildUser_fflua_reg(lua_State* state)
{
//for decltype
	GuildUser* message(nullptr);
	message;
	ff::fflua_register_t<GuildUser, ctor()>(state, "GuildUser", "google::protobuf::Message")
		// required fixed64 playerguid = 1;
		.def(&GuildUser::playerguid, "playerguid")
		.def(&GuildUser::set_playerguid, "set_playerguid")
		// required fixed64 guildid = 2;
		.def(&GuildUser::guildid, "guildid")
		.def(&GuildUser::set_guildid, "set_guildid")
		// required string playername = 3;
		.def(&GuildUser::playername, "playername")
		.def<void (GuildUser::*)(const std::string&)>(&GuildUser::set_playername, "set_playername")
		// required int32 playerlevel = 4;
		.def(&GuildUser::playerlevel, "playerlevel")
		.def(&GuildUser::set_playerlevel, "set_playerlevel")
		// required .Packet.GuildPosition position = 5;
		.def(&GuildUser::position, "position")
		.def(&GuildUser::set_position, "set_position")
		// required int32 online = 6;
		.def(&GuildUser::online, "online")
		.def(&GuildUser::set_online, "set_online")
		// required int32 bdonation = 7;
		.def(&GuildUser::bdonation, "bdonation")
		.def(&GuildUser::set_bdonation, "set_bdonation")
		// required int32 bbonus = 8;
		.def(&GuildUser::bbonus, "bbonus")
		.def(&GuildUser::set_bbonus, "set_bbonus")
		// required int32 curcontribution = 9;
		.def(&GuildUser::curcontribution, "curcontribution")
		.def(&GuildUser::set_curcontribution, "set_curcontribution")
		// required int32 weekcontribution = 10;
		.def(&GuildUser::weekcontribution, "weekcontribution")
		.def(&GuildUser::set_weekcontribution, "set_weekcontribution")
		// required int32 allcontribution = 11;
		.def(&GuildUser::allcontribution, "allcontribution")
		.def(&GuildUser::set_allcontribution, "set_allcontribution")
		// required int32 battletime = 12;
		.def(&GuildUser::battletime, "battletime")
		.def(&GuildUser::set_battletime, "set_battletime")
		// required uint32 lastlogouttime = 13;
		.def(&GuildUser::lastlogouttime, "lastlogouttime")
		.def(&GuildUser::set_lastlogouttime, "set_lastlogouttime")
		// required uint32 jointime = 14;
		.def(&GuildUser::jointime, "jointime")
		.def(&GuildUser::set_jointime, "set_jointime")
		// required int32 bossdamage = 15;
		.def(&GuildUser::bossdamage, "bossdamage")
		.def(&GuildUser::set_bossdamage, "set_bossdamage")
		// required int32 main_actor_config_id = 16;
		.def(&GuildUser::main_actor_config_id, "main_actor_config_id")
		.def(&GuildUser::set_main_actor_config_id, "set_main_actor_config_id")
		// required int32 main_actor_score = 17;
		.def(&GuildUser::main_actor_score, "main_actor_score")
		.def(&GuildUser::set_main_actor_score, "set_main_actor_score")
		// required .Packet.ActorColor main_actor_color = 18;
		.def(&GuildUser::main_actor_color, "main_actor_color")
		.def(&GuildUser::set_main_actor_color, "set_main_actor_color")
		// required .Packet.ActorStar main_actor_star = 19;
		.def(&GuildUser::main_actor_star, "main_actor_star")
		.def(&GuildUser::set_main_actor_star, "set_main_actor_star")
		// required int32 wetcopytimes = 20;
		.def(&GuildUser::wetcopytimes, "wetcopytimes")
		.def(&GuildUser::set_wetcopytimes, "set_wetcopytimes")
		// required int32 spoiljumptimes = 21;
		.def(&GuildUser::spoiljumptimes, "spoiljumptimes")
		.def(&GuildUser::set_spoiljumptimes, "set_spoiljumptimes")
		// required int32 hair = 26;
		.def(&GuildUser::hair, "hair")
		.def(&GuildUser::set_hair, "set_hair")
		// required fixed64 lastguildid = 27;
		.def(&GuildUser::lastguildid, "lastguildid")
		.def(&GuildUser::set_lastguildid, "set_lastguildid")
		.def(&GuildUser::ByteSize, "ByteSize")
		.def(&GuildUser::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildImpeach_fflua_reg(lua_State* state)
{
//for decltype
	GuildImpeach* message(nullptr);
	message;
	ff::fflua_register_t<GuildImpeach, ctor()>(state, "GuildImpeach", "google::protobuf::Message")
		// required fixed64 impeachguild = 1;
		.def(&GuildImpeach::impeachguild, "impeachguild")
		.def(&GuildImpeach::set_impeachguild, "set_impeachguild")
		// required string impeachname = 2;
		.def(&GuildImpeach::impeachname, "impeachname")
		.def<void (GuildImpeach::*)(const std::string&)>(&GuildImpeach::set_impeachname, "set_impeachname")
		// required int32 needcount = 3;
		.def(&GuildImpeach::needcount, "needcount")
		.def(&GuildImpeach::set_needcount, "set_needcount")
		// required int32 endtime = 4;
		.def(&GuildImpeach::endtime, "endtime")
		.def(&GuildImpeach::set_endtime, "set_endtime")
		// repeated fixed64 respondguild = 5;
		.def(&GuildImpeach::respondguild_size, "respondguild_size")
		.def<decltype(message->respondguild(0)) (GuildImpeach::*)(int) const>(&GuildImpeach::respondguild, "respondguild")
		.def<void(GuildImpeach::*)(int, const decltype(message->respondguild(0)))>(&GuildImpeach::set_respondguild, "set_respondguild")
		.def(&GuildImpeach::add_respondguild, "add_respondguild")
		.def(&GuildImpeach::ByteSize, "ByteSize")
		.def(&GuildImpeach::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildDBInfo_fflua_reg(lua_State* state)
{
//for decltype
	GuildDBInfo* message(nullptr);
	message;
	ff::fflua_register_t<GuildDBInfo, ctor()>(state, "GuildDBInfo", "google::protobuf::Message")
		// required fixed64 guid = 1;
		.def(&GuildDBInfo::guid, "guid")
		.def(&GuildDBInfo::set_guid, "set_guid")
		// required string name = 2;
		.def(&GuildDBInfo::name, "name")
		.def<void (GuildDBInfo::*)(const std::string&)>(&GuildDBInfo::set_name, "set_name")
		// required string lastname = 3;
		.def(&GuildDBInfo::lastname, "lastname")
		.def<void (GuildDBInfo::*)(const std::string&)>(&GuildDBInfo::set_lastname, "set_lastname")
		// required string notice = 4;
		.def(&GuildDBInfo::notice, "notice")
		.def<void (GuildDBInfo::*)(const std::string&)>(&GuildDBInfo::set_notice, "set_notice")
		// required string icon = 5;
		.def(&GuildDBInfo::icon, "icon")
		.def<void (GuildDBInfo::*)(const std::string&)>(&GuildDBInfo::set_icon, "set_icon")
		// required fixed64 chieftain = 6;
		.def(&GuildDBInfo::chieftain, "chieftain")
		.def(&GuildDBInfo::set_chieftain, "set_chieftain")
		// required string chieftainname = 7;
		.def(&GuildDBInfo::chieftainname, "chieftainname")
		.def<void (GuildDBInfo::*)(const std::string&)>(&GuildDBInfo::set_chieftainname, "set_chieftainname")
		// required int32 guildlevel = 8;
		.def(&GuildDBInfo::guildlevel, "guildlevel")
		.def(&GuildDBInfo::set_guildlevel, "set_guildlevel")
		// required int32 cashboxlevel = 9;
		.def(&GuildDBInfo::cashboxlevel, "cashboxlevel")
		.def(&GuildDBInfo::set_cashboxlevel, "set_cashboxlevel")
		// required int32 shoplevel = 10;
		.def(&GuildDBInfo::shoplevel, "shoplevel")
		.def(&GuildDBInfo::set_shoplevel, "set_shoplevel")
		// required int32 storagelevel = 11;
		.def(&GuildDBInfo::storagelevel, "storagelevel")
		.def(&GuildDBInfo::set_storagelevel, "set_storagelevel")
		// required uint32 guildcd = 12;
		.def(&GuildDBInfo::guildcd, "guildcd")
		.def(&GuildDBInfo::set_guildcd, "set_guildcd")
		// required uint32 cashboxcd = 13;
		.def(&GuildDBInfo::cashboxcd, "cashboxcd")
		.def(&GuildDBInfo::set_cashboxcd, "set_cashboxcd")
		// required uint32 shopcd = 14;
		.def(&GuildDBInfo::shopcd, "shopcd")
		.def(&GuildDBInfo::set_shopcd, "set_shopcd")
		// required uint32 storagecd = 15;
		.def(&GuildDBInfo::storagecd, "storagecd")
		.def(&GuildDBInfo::set_storagecd, "set_storagecd")
		// required int32 guildmoney = 16;
		.def(&GuildDBInfo::guildmoney, "guildmoney")
		.def(&GuildDBInfo::set_guildmoney, "set_guildmoney")
		// required int32 limitapplylevel = 17;
		.def(&GuildDBInfo::limitapplylevel, "limitapplylevel")
		.def(&GuildDBInfo::set_limitapplylevel, "set_limitapplylevel")
		// required int32 maxwetcopyid = 18;
		.def(&GuildDBInfo::maxwetcopyid, "maxwetcopyid")
		.def(&GuildDBInfo::set_maxwetcopyid, "set_maxwetcopyid")
		// required int32 weekbonus = 19;
		.def(&GuildDBInfo::weekbonus, "weekbonus")
		.def(&GuildDBInfo::set_weekbonus, "set_weekbonus")
		// required fixed32 lowmaintainday = 20;
		.def(&GuildDBInfo::lowmaintainday, "lowmaintainday")
		.def(&GuildDBInfo::set_lowmaintainday, "set_lowmaintainday")
		// required int32 battlewintimes = 21;
		.def(&GuildDBInfo::battlewintimes, "battlewintimes")
		.def(&GuildDBInfo::set_battlewintimes, "set_battlewintimes")
		// required int32 battletimes = 22;
		.def(&GuildDBInfo::battletimes, "battletimes")
		.def(&GuildDBInfo::set_battletimes, "set_battletimes")
		// required int32 battlelefttimes = 23;
		.def(&GuildDBInfo::battlelefttimes, "battlelefttimes")
		.def(&GuildDBInfo::set_battlelefttimes, "set_battlelefttimes")
		// required int32 battleroundwintimes = 24;
		.def(&GuildDBInfo::battleroundwintimes, "battleroundwintimes")
		.def(&GuildDBInfo::set_battleroundwintimes, "set_battleroundwintimes")
		// required int32 battleroundtimes = 25;
		.def(&GuildDBInfo::battleroundtimes, "battleroundtimes")
		.def(&GuildDBInfo::set_battleroundtimes, "set_battleroundtimes")
		// required int32 battlescore = 26;
		.def(&GuildDBInfo::battlescore, "battlescore")
		.def(&GuildDBInfo::set_battlescore, "set_battlescore")
		// required fixed32 createtime = 27;
		.def(&GuildDBInfo::createtime, "createtime")
		.def(&GuildDBInfo::set_createtime, "set_createtime")
		// required fixed64 createguid = 28;
		.def(&GuildDBInfo::createguid, "createguid")
		.def(&GuildDBInfo::set_createguid, "set_createguid")
		// required string createname = 29;
		.def(&GuildDBInfo::createname, "createname")
		.def<void (GuildDBInfo::*)(const std::string&)>(&GuildDBInfo::set_createname, "set_createname")
		.def(&GuildDBInfo::ByteSize, "ByteSize")
		.def(&GuildDBInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool SetGuildIconRR_fflua_reg(lua_State* state)
{
//for decltype
	SetGuildIconRR* message(nullptr);
	message;
	ff::fflua_register_t<SetGuildIconRR, ctor()>(state, "SetGuildIconRR", "google::protobuf::Message")
		// required string icon = 1;
		.def(&SetGuildIconRR::icon, "icon")
		.def<void (SetGuildIconRR::*)(const std::string&)>(&SetGuildIconRR::set_icon, "set_icon")
		.def(&SetGuildIconRR::ByteSize, "ByteSize")
		.def(&SetGuildIconRR::SetInitialized, "SetInitialized")
		;
	return true;
}
bool PracticeInfo_fflua_reg(lua_State* state)
{
//for decltype
	PracticeInfo* message(nullptr);
	message;
	ff::fflua_register_t<PracticeInfo, ctor()>(state, "PracticeInfo", "google::protobuf::Message")
		// required fixed64 playerguid = 1;
		.def(&PracticeInfo::playerguid, "playerguid")
		.def(&PracticeInfo::set_playerguid, "set_playerguid")
		// required int32 id = 2;
		.def(&PracticeInfo::id, "id")
		.def(&PracticeInfo::set_id, "set_id")
		// required int32 level = 3;
		.def(&PracticeInfo::level, "level")
		.def(&PracticeInfo::set_level, "set_level")
		// required int32 exp = 4;
		.def(&PracticeInfo::exp, "exp")
		.def(&PracticeInfo::set_exp, "set_exp")
		.def(&PracticeInfo::ByteSize, "ByteSize")
		.def(&PracticeInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool PlayerPracticeReq_fflua_reg(lua_State* state)
{
//for decltype
	PlayerPracticeReq* message(nullptr);
	message;
	ff::fflua_register_t<PlayerPracticeReq, ctor()>(state, "PlayerPracticeReq", "google::protobuf::Message")
		// required int32 type = 1;
		.def(&PlayerPracticeReq::type, "type")
		.def(&PlayerPracticeReq::set_type, "set_type")
		// required int32 id = 2;
		.def(&PlayerPracticeReq::id, "id")
		.def(&PlayerPracticeReq::set_id, "set_id")
		.def(&PlayerPracticeReq::ByteSize, "ByteSize")
		.def(&PlayerPracticeReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GetPracticeReq_fflua_reg(lua_State* state)
{
//for decltype
	GetPracticeReq* message(nullptr);
	message;
	ff::fflua_register_t<GetPracticeReq, ctor()>(state, "GetPracticeReq", "google::protobuf::Message");
	return true;
}
bool GetPracticeReply_fflua_reg(lua_State* state)
{
//for decltype
	GetPracticeReply* message(nullptr);
	message;
	ff::fflua_register_t<GetPracticeReply, ctor()>(state, "GetPracticeReply", "google::protobuf::Message")
		// repeated .Packet.PracticeInfo list = 1;
		.def(&GetPracticeReply::list_size, "list_size")
		.def<decltype(message->list(0)) (GetPracticeReply::*)(int) const>(&GetPracticeReply::list, "list")
		.def<decltype(message->mutable_list(0)) (GetPracticeReply::*)(int)>(&GetPracticeReply::mutable_list, "mutable_list")
		.def(&GetPracticeReply::add_list, "add_list")
		.def(&GetPracticeReply::ByteSize, "ByteSize")
		.def(&GetPracticeReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GetGuildInfoReq_fflua_reg(lua_State* state)
{
//for decltype
	GetGuildInfoReq* message(nullptr);
	message;
	ff::fflua_register_t<GetGuildInfoReq, ctor()>(state, "GetGuildInfoReq", "google::protobuf::Message");
	return true;
}
bool GetGuildInfoReply_fflua_reg(lua_State* state)
{
//for decltype
	GetGuildInfoReply* message(nullptr);
	message;
	ff::fflua_register_t<GetGuildInfoReply, ctor()>(state, "GetGuildInfoReply", "google::protobuf::Message")
		// required .Packet.GuildDBInfo info = 1;
		.def(&GetGuildInfoReply::info, "info")
		.def(&GetGuildInfoReply::mutable_info, "mutable_info")
		// required int32 membersize = 2;
		.def(&GetGuildInfoReply::membersize, "membersize")
		.def(&GetGuildInfoReply::set_membersize, "set_membersize")
		// required int32 maxmembersize = 3;
		.def(&GetGuildInfoReply::maxmembersize, "maxmembersize")
		.def(&GetGuildInfoReply::set_maxmembersize, "set_maxmembersize")
		// required .Packet.GuildUser selfinfo = 4;
		.def(&GetGuildInfoReply::selfinfo, "selfinfo")
		.def(&GetGuildInfoReply::mutable_selfinfo, "mutable_selfinfo")
		.def(&GetGuildInfoReply::ByteSize, "ByteSize")
		.def(&GetGuildInfoReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GetGuildUserListInfoReq_fflua_reg(lua_State* state)
{
//for decltype
	GetGuildUserListInfoReq* message(nullptr);
	message;
	ff::fflua_register_t<GetGuildUserListInfoReq, ctor()>(state, "GetGuildUserListInfoReq", "google::protobuf::Message");
	return true;
}
bool GetGuildUserListInfoReply_fflua_reg(lua_State* state)
{
//for decltype
	GetGuildUserListInfoReply* message(nullptr);
	message;
	ff::fflua_register_t<GetGuildUserListInfoReply, ctor()>(state, "GetGuildUserListInfoReply", "google::protobuf::Message")
		// repeated .Packet.GuildUser userlist = 1;
		.def(&GetGuildUserListInfoReply::userlist_size, "userlist_size")
		.def<decltype(message->userlist(0)) (GetGuildUserListInfoReply::*)(int) const>(&GetGuildUserListInfoReply::userlist, "userlist")
		.def<decltype(message->mutable_userlist(0)) (GetGuildUserListInfoReply::*)(int)>(&GetGuildUserListInfoReply::mutable_userlist, "mutable_userlist")
		.def(&GetGuildUserListInfoReply::add_userlist, "add_userlist")
		.def(&GetGuildUserListInfoReply::ByteSize, "ByteSize")
		.def(&GetGuildUserListInfoReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool CreateGuildReq_fflua_reg(lua_State* state)
{
//for decltype
	CreateGuildReq* message(nullptr);
	message;
	ff::fflua_register_t<CreateGuildReq, ctor()>(state, "CreateGuildReq", "google::protobuf::Message")
		// required string name = 1;
		.def(&CreateGuildReq::name, "name")
		.def<void (CreateGuildReq::*)(const std::string&)>(&CreateGuildReq::set_name, "set_name")
		// required string notice = 2;
		.def(&CreateGuildReq::notice, "notice")
		.def<void (CreateGuildReq::*)(const std::string&)>(&CreateGuildReq::set_notice, "set_notice")
		.def(&CreateGuildReq::ByteSize, "ByteSize")
		.def(&CreateGuildReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool FindGuildReq_fflua_reg(lua_State* state)
{
//for decltype
	FindGuildReq* message(nullptr);
	message;
	ff::fflua_register_t<FindGuildReq, ctor()>(state, "FindGuildReq", "google::protobuf::Message")
		// optional string name = 1;
		.def(&FindGuildReq::name, "name")
		.def<void (FindGuildReq::*)(const std::string&)>(&FindGuildReq::set_name, "set_name")
		.def(&FindGuildReq::has_name, "has_name")
		// optional fixed64 guid = 2;
		.def(&FindGuildReq::guid, "guid")
		.def(&FindGuildReq::set_guid, "set_guid")
		.def(&FindGuildReq::has_guid, "has_guid")
		.def(&FindGuildReq::ByteSize, "ByteSize")
		.def(&FindGuildReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool ApplyGuildReq_fflua_reg(lua_State* state)
{
//for decltype
	ApplyGuildReq* message(nullptr);
	message;
	ff::fflua_register_t<ApplyGuildReq, ctor()>(state, "ApplyGuildReq", "google::protobuf::Message")
		// required fixed64 guid = 1;
		.def(&ApplyGuildReq::guid, "guid")
		.def(&ApplyGuildReq::set_guid, "set_guid")
		.def(&ApplyGuildReq::ByteSize, "ByteSize")
		.def(&ApplyGuildReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool OneKeyApplyGuildReq_fflua_reg(lua_State* state)
{
//for decltype
	OneKeyApplyGuildReq* message(nullptr);
	message;
	ff::fflua_register_t<OneKeyApplyGuildReq, ctor()>(state, "OneKeyApplyGuildReq", "google::protobuf::Message");
	return true;
}
bool InviteyAddGuildReq_fflua_reg(lua_State* state)
{
//for decltype
	InviteyAddGuildReq* message(nullptr);
	message;
	ff::fflua_register_t<InviteyAddGuildReq, ctor()>(state, "InviteyAddGuildReq", "google::protobuf::Message")
		// required fixed64 playerguid = 1;
		.def(&InviteyAddGuildReq::playerguid, "playerguid")
		.def(&InviteyAddGuildReq::set_playerguid, "set_playerguid")
		.def(&InviteyAddGuildReq::ByteSize, "ByteSize")
		.def(&InviteyAddGuildReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool AskInviteyAgreeGuildReply_fflua_reg(lua_State* state)
{
//for decltype
	AskInviteyAgreeGuildReply* message(nullptr);
	message;
	ff::fflua_register_t<AskInviteyAgreeGuildReply, ctor()>(state, "AskInviteyAgreeGuildReply", "google::protobuf::Message")
		// required fixed64 guildid = 1;
		.def(&AskInviteyAgreeGuildReply::guildid, "guildid")
		.def(&AskInviteyAgreeGuildReply::set_guildid, "set_guildid")
		// required string guildname = 2;
		.def(&AskInviteyAgreeGuildReply::guildname, "guildname")
		.def<void (AskInviteyAgreeGuildReply::*)(const std::string&)>(&AskInviteyAgreeGuildReply::set_guildname, "set_guildname")
		// required string guildinvitename = 3;
		.def(&AskInviteyAgreeGuildReply::guildinvitename, "guildinvitename")
		.def<void (AskInviteyAgreeGuildReply::*)(const std::string&)>(&AskInviteyAgreeGuildReply::set_guildinvitename, "set_guildinvitename")
		// required fixed64 guildinviteguid = 4;
		.def(&AskInviteyAgreeGuildReply::guildinviteguid, "guildinviteguid")
		.def(&AskInviteyAgreeGuildReply::set_guildinviteguid, "set_guildinviteguid")
		.def(&AskInviteyAgreeGuildReply::ByteSize, "ByteSize")
		.def(&AskInviteyAgreeGuildReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool InviteyAgreeGuildReq_fflua_reg(lua_State* state)
{
//for decltype
	InviteyAgreeGuildReq* message(nullptr);
	message;
	ff::fflua_register_t<InviteyAgreeGuildReq, ctor()>(state, "InviteyAgreeGuildReq", "google::protobuf::Message")
		// required fixed64 guildid = 1;
		.def(&InviteyAgreeGuildReq::guildid, "guildid")
		.def(&InviteyAgreeGuildReq::set_guildid, "set_guildid")
		// required bool agree = 2;
		.def(&InviteyAgreeGuildReq::agree, "agree")
		.def(&InviteyAgreeGuildReq::set_agree, "set_agree")
		// required fixed64 guildidinviteguid = 3;
		.def(&InviteyAgreeGuildReq::guildidinviteguid, "guildidinviteguid")
		.def(&InviteyAgreeGuildReq::set_guildidinviteguid, "set_guildidinviteguid")
		.def(&InviteyAgreeGuildReq::ByteSize, "ByteSize")
		.def(&InviteyAgreeGuildReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool AgreeApplyGuildReq_fflua_reg(lua_State* state)
{
//for decltype
	AgreeApplyGuildReq* message(nullptr);
	message;
	ff::fflua_register_t<AgreeApplyGuildReq, ctor()>(state, "AgreeApplyGuildReq", "google::protobuf::Message")
		// required fixed64 playerguid = 1;
		.def(&AgreeApplyGuildReq::playerguid, "playerguid")
		.def(&AgreeApplyGuildReq::set_playerguid, "set_playerguid")
		// required bool agree = 2;
		.def(&AgreeApplyGuildReq::agree, "agree")
		.def(&AgreeApplyGuildReq::set_agree, "set_agree")
		.def(&AgreeApplyGuildReq::ByteSize, "ByteSize")
		.def(&AgreeApplyGuildReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool UpdatePlayerGuildInfo_fflua_reg(lua_State* state)
{
//for decltype
	UpdatePlayerGuildInfo* message(nullptr);
	message;
	ff::fflua_register_t<UpdatePlayerGuildInfo, ctor()>(state, "UpdatePlayerGuildInfo", "google::protobuf::Message")
		// required fixed64 guildid = 1;
		.def(&UpdatePlayerGuildInfo::guildid, "guildid")
		.def(&UpdatePlayerGuildInfo::set_guildid, "set_guildid")
		// required string guildname = 2;
		.def(&UpdatePlayerGuildInfo::guildname, "guildname")
		.def<void (UpdatePlayerGuildInfo::*)(const std::string&)>(&UpdatePlayerGuildInfo::set_guildname, "set_guildname")
		.def(&UpdatePlayerGuildInfo::ByteSize, "ByteSize")
		.def(&UpdatePlayerGuildInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildBaseInfo_fflua_reg(lua_State* state)
{
//for decltype
	GuildBaseInfo* message(nullptr);
	message;
	ff::fflua_register_t<GuildBaseInfo, ctor()>(state, "GuildBaseInfo", "google::protobuf::Message")
		// required fixed64 guid = 1;
		.def(&GuildBaseInfo::guid, "guid")
		.def(&GuildBaseInfo::set_guid, "set_guid")
		// required string name = 2;
		.def(&GuildBaseInfo::name, "name")
		.def<void (GuildBaseInfo::*)(const std::string&)>(&GuildBaseInfo::set_name, "set_name")
		// required string lastname = 3;
		.def(&GuildBaseInfo::lastname, "lastname")
		.def<void (GuildBaseInfo::*)(const std::string&)>(&GuildBaseInfo::set_lastname, "set_lastname")
		// required string notice = 4;
		.def(&GuildBaseInfo::notice, "notice")
		.def<void (GuildBaseInfo::*)(const std::string&)>(&GuildBaseInfo::set_notice, "set_notice")
		// required int32 guildlevel = 5;
		.def(&GuildBaseInfo::guildlevel, "guildlevel")
		.def(&GuildBaseInfo::set_guildlevel, "set_guildlevel")
		// required int32 membersize = 6;
		.def(&GuildBaseInfo::membersize, "membersize")
		.def(&GuildBaseInfo::set_membersize, "set_membersize")
		// required int32 maxmembersize = 7;
		.def(&GuildBaseInfo::maxmembersize, "maxmembersize")
		.def(&GuildBaseInfo::set_maxmembersize, "set_maxmembersize")
		// required string chieftainname = 8;
		.def(&GuildBaseInfo::chieftainname, "chieftainname")
		.def<void (GuildBaseInfo::*)(const std::string&)>(&GuildBaseInfo::set_chieftainname, "set_chieftainname")
		// required fixed64 chieftainguid = 9;
		.def(&GuildBaseInfo::chieftainguid, "chieftainguid")
		.def(&GuildBaseInfo::set_chieftainguid, "set_chieftainguid")
		// required fixed32 createtime = 10;
		.def(&GuildBaseInfo::createtime, "createtime")
		.def(&GuildBaseInfo::set_createtime, "set_createtime")
		.def(&GuildBaseInfo::ByteSize, "ByteSize")
		.def(&GuildBaseInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GetGuildListReq_fflua_reg(lua_State* state)
{
//for decltype
	GetGuildListReq* message(nullptr);
	message;
	ff::fflua_register_t<GetGuildListReq, ctor()>(state, "GetGuildListReq", "google::protobuf::Message");
	return true;
}
bool GuildBaseListReply_fflua_reg(lua_State* state)
{
//for decltype
	GuildBaseListReply* message(nullptr);
	message;
	ff::fflua_register_t<GuildBaseListReply, ctor()>(state, "GuildBaseListReply", "google::protobuf::Message")
		// repeated .Packet.GuildBaseInfo list = 1;
		.def(&GuildBaseListReply::list_size, "list_size")
		.def<decltype(message->list(0)) (GuildBaseListReply::*)(int) const>(&GuildBaseListReply::list, "list")
		.def<decltype(message->mutable_list(0)) (GuildBaseListReply::*)(int)>(&GuildBaseListReply::mutable_list, "mutable_list")
		.def(&GuildBaseListReply::add_list, "add_list")
		.def(&GuildBaseListReply::ByteSize, "ByteSize")
		.def(&GuildBaseListReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool ApplyGuildPlayerInfo_fflua_reg(lua_State* state)
{
//for decltype
	ApplyGuildPlayerInfo* message(nullptr);
	message;
	ff::fflua_register_t<ApplyGuildPlayerInfo, ctor()>(state, "ApplyGuildPlayerInfo", "google::protobuf::Message")
		// required fixed64 playerguid = 1;
		.def(&ApplyGuildPlayerInfo::playerguid, "playerguid")
		.def(&ApplyGuildPlayerInfo::set_playerguid, "set_playerguid")
		// required string playername = 2;
		.def(&ApplyGuildPlayerInfo::playername, "playername")
		.def<void (ApplyGuildPlayerInfo::*)(const std::string&)>(&ApplyGuildPlayerInfo::set_playername, "set_playername")
		// required int32 playerlevel = 3;
		.def(&ApplyGuildPlayerInfo::playerlevel, "playerlevel")
		.def(&ApplyGuildPlayerInfo::set_playerlevel, "set_playerlevel")
		// required .Packet.Professions profession = 4;
		.def(&ApplyGuildPlayerInfo::profession, "profession")
		.def(&ApplyGuildPlayerInfo::set_profession, "set_profession")
		.def(&ApplyGuildPlayerInfo::ByteSize, "ByteSize")
		.def(&ApplyGuildPlayerInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool ApplyGuildPlayerListReq_fflua_reg(lua_State* state)
{
//for decltype
	ApplyGuildPlayerListReq* message(nullptr);
	message;
	ff::fflua_register_t<ApplyGuildPlayerListReq, ctor()>(state, "ApplyGuildPlayerListReq", "google::protobuf::Message");
	return true;
}
bool ApplyGuildPlayerListReply_fflua_reg(lua_State* state)
{
//for decltype
	ApplyGuildPlayerListReply* message(nullptr);
	message;
	ff::fflua_register_t<ApplyGuildPlayerListReply, ctor()>(state, "ApplyGuildPlayerListReply", "google::protobuf::Message")
		// repeated .Packet.ApplyGuildPlayerInfo list = 1;
		.def(&ApplyGuildPlayerListReply::list_size, "list_size")
		.def<decltype(message->list(0)) (ApplyGuildPlayerListReply::*)(int) const>(&ApplyGuildPlayerListReply::list, "list")
		.def<decltype(message->mutable_list(0)) (ApplyGuildPlayerListReply::*)(int)>(&ApplyGuildPlayerListReply::mutable_list, "mutable_list")
		.def(&ApplyGuildPlayerListReply::add_list, "add_list")
		.def(&ApplyGuildPlayerListReply::ByteSize, "ByteSize")
		.def(&ApplyGuildPlayerListReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool ClearApplyGuildPlayerListReq_fflua_reg(lua_State* state)
{
//for decltype
	ClearApplyGuildPlayerListReq* message(nullptr);
	message;
	ff::fflua_register_t<ClearApplyGuildPlayerListReq, ctor()>(state, "ClearApplyGuildPlayerListReq", "google::protobuf::Message");
	return true;
}
bool SetGuildNameRR_fflua_reg(lua_State* state)
{
//for decltype
	SetGuildNameRR* message(nullptr);
	message;
	ff::fflua_register_t<SetGuildNameRR, ctor()>(state, "SetGuildNameRR", "google::protobuf::Message")
		// required string name = 1;
		.def(&SetGuildNameRR::name, "name")
		.def<void (SetGuildNameRR::*)(const std::string&)>(&SetGuildNameRR::set_name, "set_name")
		// required string lastname = 2;
		.def(&SetGuildNameRR::lastname, "lastname")
		.def<void (SetGuildNameRR::*)(const std::string&)>(&SetGuildNameRR::set_lastname, "set_lastname")
		.def(&SetGuildNameRR::ByteSize, "ByteSize")
		.def(&SetGuildNameRR::SetInitialized, "SetInitialized")
		;
	return true;
}
bool SetGuildNoticeRR_fflua_reg(lua_State* state)
{
//for decltype
	SetGuildNoticeRR* message(nullptr);
	message;
	ff::fflua_register_t<SetGuildNoticeRR, ctor()>(state, "SetGuildNoticeRR", "google::protobuf::Message")
		// required string notice = 1;
		.def(&SetGuildNoticeRR::notice, "notice")
		.def<void (SetGuildNoticeRR::*)(const std::string&)>(&SetGuildNoticeRR::set_notice, "set_notice")
		.def(&SetGuildNoticeRR::ByteSize, "ByteSize")
		.def(&SetGuildNoticeRR::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildDonationReq_fflua_reg(lua_State* state)
{
//for decltype
	GuildDonationReq* message(nullptr);
	message;
	ff::fflua_register_t<GuildDonationReq, ctor()>(state, "GuildDonationReq", "google::protobuf::Message")
		// required int32 type = 1;
		.def(&GuildDonationReq::type, "type")
		.def(&GuildDonationReq::set_type, "set_type")
		.def(&GuildDonationReq::ByteSize, "ByteSize")
		.def(&GuildDonationReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool DonationFlagUpdate_fflua_reg(lua_State* state)
{
//for decltype
	DonationFlagUpdate* message(nullptr);
	message;
	ff::fflua_register_t<DonationFlagUpdate, ctor()>(state, "DonationFlagUpdate", "google::protobuf::Message")
		// required int32 bdonation = 7;
		.def(&DonationFlagUpdate::bdonation, "bdonation")
		.def(&DonationFlagUpdate::set_bdonation, "set_bdonation")
		.def(&DonationFlagUpdate::ByteSize, "ByteSize")
		.def(&DonationFlagUpdate::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildMoneyUpdate_fflua_reg(lua_State* state)
{
//for decltype
	GuildMoneyUpdate* message(nullptr);
	message;
	ff::fflua_register_t<GuildMoneyUpdate, ctor()>(state, "GuildMoneyUpdate", "google::protobuf::Message")
		// required int32 guildmoney = 1;
		.def(&GuildMoneyUpdate::guildmoney, "guildmoney")
		.def(&GuildMoneyUpdate::set_guildmoney, "set_guildmoney")
		.def(&GuildMoneyUpdate::ByteSize, "ByteSize")
		.def(&GuildMoneyUpdate::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildImpeachReply_fflua_reg(lua_State* state)
{
//for decltype
	GuildImpeachReply* message(nullptr);
	message;
	ff::fflua_register_t<GuildImpeachReply, ctor()>(state, "GuildImpeachReply", "google::protobuf::Message")
		// required .Packet.GuildImpeach impeach = 1;
		.def(&GuildImpeachReply::impeach, "impeach")
		.def(&GuildImpeachReply::mutable_impeach, "mutable_impeach")
		.def(&GuildImpeachReply::ByteSize, "ByteSize")
		.def(&GuildImpeachReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool SetGuildUserPositionRR_fflua_reg(lua_State* state)
{
//for decltype
	SetGuildUserPositionRR* message(nullptr);
	message;
	ff::fflua_register_t<SetGuildUserPositionRR, ctor()>(state, "SetGuildUserPositionRR", "google::protobuf::Message")
		// required fixed64 playerguid = 1;
		.def(&SetGuildUserPositionRR::playerguid, "playerguid")
		.def(&SetGuildUserPositionRR::set_playerguid, "set_playerguid")
		// required .Packet.GuildPosition position = 2;
		.def(&SetGuildUserPositionRR::position, "position")
		.def(&SetGuildUserPositionRR::set_position, "set_position")
		.def(&SetGuildUserPositionRR::ByteSize, "ByteSize")
		.def(&SetGuildUserPositionRR::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GetGuildBonusReq_fflua_reg(lua_State* state)
{
//for decltype
	GetGuildBonusReq* message(nullptr);
	message;
	ff::fflua_register_t<GetGuildBonusReq, ctor()>(state, "GetGuildBonusReq", "google::protobuf::Message");
	return true;
}
bool GuildCDKInfo_fflua_reg(lua_State* state)
{
//for decltype
	GuildCDKInfo* message(nullptr);
	message;
	ff::fflua_register_t<GuildCDKInfo, ctor()>(state, "GuildCDKInfo", "google::protobuf::Message")
		// required fixed64 guid = 1;
		.def(&GuildCDKInfo::guid, "guid")
		.def(&GuildCDKInfo::set_guid, "set_guid")
		// required fixed64 playerid = 2;
		.def(&GuildCDKInfo::playerid, "playerid")
		.def(&GuildCDKInfo::set_playerid, "set_playerid")
		// required int32 configid = 3;
		.def(&GuildCDKInfo::configid, "configid")
		.def(&GuildCDKInfo::set_configid, "set_configid")
		// required int32 count = 4;
		.def(&GuildCDKInfo::count, "count")
		.def(&GuildCDKInfo::set_count, "set_count")
		// required string playername = 5;
		.def(&GuildCDKInfo::playername, "playername")
		.def<void (GuildCDKInfo::*)(const std::string&)>(&GuildCDKInfo::set_playername, "set_playername")
		// required int32 limitlevel = 6;
		.def(&GuildCDKInfo::limitlevel, "limitlevel")
		.def(&GuildCDKInfo::set_limitlevel, "set_limitlevel")
		// required int32 limitday = 7;
		.def(&GuildCDKInfo::limitday, "limitday")
		.def(&GuildCDKInfo::set_limitday, "set_limitday")
		// required int32 limitdonation = 8;
		.def(&GuildCDKInfo::limitdonation, "limitdonation")
		.def(&GuildCDKInfo::set_limitdonation, "set_limitdonation")
		// required fixed32 datetime = 9;
		.def(&GuildCDKInfo::datetime, "datetime")
		.def(&GuildCDKInfo::set_datetime, "set_datetime")
		// required string wish = 10;
		.def(&GuildCDKInfo::wish, "wish")
		.def<void (GuildCDKInfo::*)(const std::string&)>(&GuildCDKInfo::set_wish, "set_wish")
		// repeated fixed64 getplayerid = 11;
		.def(&GuildCDKInfo::getplayerid_size, "getplayerid_size")
		.def<decltype(message->getplayerid(0)) (GuildCDKInfo::*)(int) const>(&GuildCDKInfo::getplayerid, "getplayerid")
		.def<void(GuildCDKInfo::*)(int, const decltype(message->getplayerid(0)))>(&GuildCDKInfo::set_getplayerid, "set_getplayerid")
		.def(&GuildCDKInfo::add_getplayerid, "add_getplayerid")
		.def(&GuildCDKInfo::ByteSize, "ByteSize")
		.def(&GuildCDKInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool CreateGuildCDK_fflua_reg(lua_State* state)
{
//for decltype
	CreateGuildCDK* message(nullptr);
	message;
	ff::fflua_register_t<CreateGuildCDK, ctor()>(state, "CreateGuildCDK", "google::protobuf::Message")
		// required int32 configid = 1;
		.def(&CreateGuildCDK::configid, "configid")
		.def(&CreateGuildCDK::set_configid, "set_configid")
		// required int32 count = 2;
		.def(&CreateGuildCDK::count, "count")
		.def(&CreateGuildCDK::set_count, "set_count")
		// required int32 limitlevel = 3;
		.def(&CreateGuildCDK::limitlevel, "limitlevel")
		.def(&CreateGuildCDK::set_limitlevel, "set_limitlevel")
		// required int32 limitday = 4;
		.def(&CreateGuildCDK::limitday, "limitday")
		.def(&CreateGuildCDK::set_limitday, "set_limitday")
		// required int32 limitdonation = 5;
		.def(&CreateGuildCDK::limitdonation, "limitdonation")
		.def(&CreateGuildCDK::set_limitdonation, "set_limitdonation")
		// required string wish = 6;
		.def(&CreateGuildCDK::wish, "wish")
		.def<void (CreateGuildCDK::*)(const std::string&)>(&CreateGuildCDK::set_wish, "set_wish")
		.def(&CreateGuildCDK::ByteSize, "ByteSize")
		.def(&CreateGuildCDK::SetInitialized, "SetInitialized")
		;
	return true;
}
bool CreateGuildCDKReq_fflua_reg(lua_State* state)
{
//for decltype
	CreateGuildCDKReq* message(nullptr);
	message;
	ff::fflua_register_t<CreateGuildCDKReq, ctor()>(state, "CreateGuildCDKReq", "google::protobuf::Message")
		// repeated .Packet.CreateGuildCDK cdks = 1;
		.def(&CreateGuildCDKReq::cdks_size, "cdks_size")
		.def<decltype(message->cdks(0)) (CreateGuildCDKReq::*)(int) const>(&CreateGuildCDKReq::cdks, "cdks")
		.def<decltype(message->mutable_cdks(0)) (CreateGuildCDKReq::*)(int)>(&CreateGuildCDKReq::mutable_cdks, "mutable_cdks")
		.def(&CreateGuildCDKReq::add_cdks, "add_cdks")
		.def(&CreateGuildCDKReq::ByteSize, "ByteSize")
		.def(&CreateGuildCDKReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GetGuildCDKReq_fflua_reg(lua_State* state)
{
//for decltype
	GetGuildCDKReq* message(nullptr);
	message;
	ff::fflua_register_t<GetGuildCDKReq, ctor()>(state, "GetGuildCDKReq", "google::protobuf::Message")
		// required fixed64 guid = 1;
		.def(&GetGuildCDKReq::guid, "guid")
		.def(&GetGuildCDKReq::set_guid, "set_guid")
		.def(&GetGuildCDKReq::ByteSize, "ByteSize")
		.def(&GetGuildCDKReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GetGuildCDKListReq_fflua_reg(lua_State* state)
{
//for decltype
	GetGuildCDKListReq* message(nullptr);
	message;
	ff::fflua_register_t<GetGuildCDKListReq, ctor()>(state, "GetGuildCDKListReq", "google::protobuf::Message");
	return true;
}
bool GetGuildCDKListReply_fflua_reg(lua_State* state)
{
//for decltype
	GetGuildCDKListReply* message(nullptr);
	message;
	ff::fflua_register_t<GetGuildCDKListReply, ctor()>(state, "GetGuildCDKListReply", "google::protobuf::Message")
		// repeated .Packet.GuildCDKInfo cdks = 1;
		.def(&GetGuildCDKListReply::cdks_size, "cdks_size")
		.def<decltype(message->cdks(0)) (GetGuildCDKListReply::*)(int) const>(&GetGuildCDKListReply::cdks, "cdks")
		.def<decltype(message->mutable_cdks(0)) (GetGuildCDKListReply::*)(int)>(&GetGuildCDKListReply::mutable_cdks, "mutable_cdks")
		.def(&GetGuildCDKListReply::add_cdks, "add_cdks")
		.def(&GetGuildCDKListReply::ByteSize, "ByteSize")
		.def(&GetGuildCDKListReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool BuildLevelUpReq_fflua_reg(lua_State* state)
{
//for decltype
	BuildLevelUpReq* message(nullptr);
	message;
	ff::fflua_register_t<BuildLevelUpReq, ctor()>(state, "BuildLevelUpReq", "google::protobuf::Message")
		// required int32 buildtype = 1;
		.def(&BuildLevelUpReq::buildtype, "buildtype")
		.def(&BuildLevelUpReq::set_buildtype, "set_buildtype")
		.def(&BuildLevelUpReq::ByteSize, "ByteSize")
		.def(&BuildLevelUpReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool BuildLevelUpReply_fflua_reg(lua_State* state)
{
//for decltype
	BuildLevelUpReply* message(nullptr);
	message;
	ff::fflua_register_t<BuildLevelUpReply, ctor()>(state, "BuildLevelUpReply", "google::protobuf::Message")
		// required int32 buildtype = 1;
		.def(&BuildLevelUpReply::buildtype, "buildtype")
		.def(&BuildLevelUpReply::set_buildtype, "set_buildtype")
		// required int32 buildlevel = 2;
		.def(&BuildLevelUpReply::buildlevel, "buildlevel")
		.def(&BuildLevelUpReply::set_buildlevel, "set_buildlevel")
		// required uint32 cdtime = 3;
		.def(&BuildLevelUpReply::cdtime, "cdtime")
		.def(&BuildLevelUpReply::set_cdtime, "set_cdtime")
		.def(&BuildLevelUpReply::ByteSize, "ByteSize")
		.def(&BuildLevelUpReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildBossCompetitionDbInfo_fflua_reg(lua_State* state)
{
//for decltype
	GuildBossCompetitionDbInfo* message(nullptr);
	message;
	ff::fflua_register_t<GuildBossCompetitionDbInfo, ctor()>(state, "GuildBossCompetitionDbInfo", "google::protobuf::Message")
		// required int32 bosslevel = 1;
		.def(&GuildBossCompetitionDbInfo::bosslevel, "bosslevel")
		.def(&GuildBossCompetitionDbInfo::set_bosslevel, "set_bosslevel")
		// required int64 hp = 2;
		.def(&GuildBossCompetitionDbInfo::hp, "hp")
		.def(&GuildBossCompetitionDbInfo::set_hp, "set_hp")
		.def(&GuildBossCompetitionDbInfo::ByteSize, "ByteSize")
		.def(&GuildBossCompetitionDbInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GetGuildBossCompetitionReq_fflua_reg(lua_State* state)
{
//for decltype
	GetGuildBossCompetitionReq* message(nullptr);
	message;
	ff::fflua_register_t<GetGuildBossCompetitionReq, ctor()>(state, "GetGuildBossCompetitionReq", "google::protobuf::Message");
	return true;
}
bool GetGuildBossCompetitionReply_fflua_reg(lua_State* state)
{
//for decltype
	GetGuildBossCompetitionReply* message(nullptr);
	message;
	ff::fflua_register_t<GetGuildBossCompetitionReply, ctor()>(state, "GetGuildBossCompetitionReply", "google::protobuf::Message")
		// required .Packet.GuildBossCompetitionDbInfo info = 1;
		.def(&GetGuildBossCompetitionReply::info, "info")
		.def(&GetGuildBossCompetitionReply::mutable_info, "mutable_info")
		.def(&GetGuildBossCompetitionReply::ByteSize, "ByteSize")
		.def(&GetGuildBossCompetitionReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildUserDamage_fflua_reg(lua_State* state)
{
//for decltype
	GuildUserDamage* message(nullptr);
	message;
	ff::fflua_register_t<GuildUserDamage, ctor()>(state, "GuildUserDamage", "google::protobuf::Message")
		// required fixed64 guid = 1;
		.def(&GuildUserDamage::guid, "guid")
		.def(&GuildUserDamage::set_guid, "set_guid")
		// required fixed64 playerid_ = 2;
		.def(&GuildUserDamage::playerid_, "playerid_")
		.def(&GuildUserDamage::set_playerid_, "set_playerid_")
		// required fixed64 guildid_ = 3;
		.def(&GuildUserDamage::guildid_, "guildid_")
		.def(&GuildUserDamage::set_guildid_, "set_guildid_")
		// required int32 paramid_ = 4;
		.def(&GuildUserDamage::paramid_, "paramid_")
		.def(&GuildUserDamage::set_paramid_, "set_paramid_")
		// required string playername_ = 5;
		.def(&GuildUserDamage::playername_, "playername_")
		.def<void (GuildUserDamage::*)(const std::string&)>(&GuildUserDamage::set_playername_, "set_playername_")
		// required string guildname_ = 6;
		.def(&GuildUserDamage::guildname_, "guildname_")
		.def<void (GuildUserDamage::*)(const std::string&)>(&GuildUserDamage::set_guildname_, "set_guildname_")
		// required int32 playerhair_ = 7;
		.def(&GuildUserDamage::playerhair_, "playerhair_")
		.def(&GuildUserDamage::set_playerhair_, "set_playerhair_")
		// required int32 damagevalue_ = 8;
		.def(&GuildUserDamage::damagevalue_, "damagevalue_")
		.def(&GuildUserDamage::set_damagevalue_, "set_damagevalue_")
		// repeated int32 actor_config_id_ = 9;
		.def(&GuildUserDamage::actor_config_id__size, "actor_config_id__size")
		.def<decltype(message->actor_config_id_(0)) (GuildUserDamage::*)(int) const>(&GuildUserDamage::actor_config_id_, "actor_config_id_")
		.def<void(GuildUserDamage::*)(int, const decltype(message->actor_config_id_(0)))>(&GuildUserDamage::set_actor_config_id_, "set_actor_config_id_")
		.def(&GuildUserDamage::add_actor_config_id_, "add_actor_config_id_")
		.def(&GuildUserDamage::ByteSize, "ByteSize")
		.def(&GuildUserDamage::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildAllDamage_fflua_reg(lua_State* state)
{
//for decltype
	GuildAllDamage* message(nullptr);
	message;
	ff::fflua_register_t<GuildAllDamage, ctor()>(state, "GuildAllDamage", "google::protobuf::Message")
		// required fixed64 guildid_ = 1;
		.def(&GuildAllDamage::guildid_, "guildid_")
		.def(&GuildAllDamage::set_guildid_, "set_guildid_")
		// required string guildname_ = 2;
		.def(&GuildAllDamage::guildname_, "guildname_")
		.def<void (GuildAllDamage::*)(const std::string&)>(&GuildAllDamage::set_guildname_, "set_guildname_")
		// required int32 damagevalue_ = 3;
		.def(&GuildAllDamage::damagevalue_, "damagevalue_")
		.def(&GuildAllDamage::set_damagevalue_, "set_damagevalue_")
		.def(&GuildAllDamage::ByteSize, "ByteSize")
		.def(&GuildAllDamage::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildBossUserDamage_fflua_reg(lua_State* state)
{
//for decltype
	GuildBossUserDamage* message(nullptr);
	message;
	ff::fflua_register_t<GuildBossUserDamage, ctor()>(state, "GuildBossUserDamage", "google::protobuf::Message")
		// required fixed64 playerid_ = 1;
		.def(&GuildBossUserDamage::playerid_, "playerid_")
		.def(&GuildBossUserDamage::set_playerid_, "set_playerid_")
		// required string playername_ = 2;
		.def(&GuildBossUserDamage::playername_, "playername_")
		.def<void (GuildBossUserDamage::*)(const std::string&)>(&GuildBossUserDamage::set_playername_, "set_playername_")
		// required int32 playerhair_ = 3;
		.def(&GuildBossUserDamage::playerhair_, "playerhair_")
		.def(&GuildBossUserDamage::set_playerhair_, "set_playerhair_")
		// required int32 damagevalue_ = 4;
		.def(&GuildBossUserDamage::damagevalue_, "damagevalue_")
		.def(&GuildBossUserDamage::set_damagevalue_, "set_damagevalue_")
		.def(&GuildBossUserDamage::ByteSize, "ByteSize")
		.def(&GuildBossUserDamage::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GetGuildUserDamageReq_fflua_reg(lua_State* state)
{
//for decltype
	GetGuildUserDamageReq* message(nullptr);
	message;
	ff::fflua_register_t<GetGuildUserDamageReq, ctor()>(state, "GetGuildUserDamageReq", "google::protobuf::Message");
	return true;
}
bool GetGuildUserDamageReply_fflua_reg(lua_State* state)
{
//for decltype
	GetGuildUserDamageReply* message(nullptr);
	message;
	ff::fflua_register_t<GetGuildUserDamageReply, ctor()>(state, "GetGuildUserDamageReply", "google::protobuf::Message")
		// repeated .Packet.GuildUserDamage users_ = 1;
		.def(&GetGuildUserDamageReply::users__size, "users__size")
		.def<decltype(message->users_(0)) (GetGuildUserDamageReply::*)(int) const>(&GetGuildUserDamageReply::users_, "users_")
		.def<decltype(message->mutable_users_(0)) (GetGuildUserDamageReply::*)(int)>(&GetGuildUserDamageReply::mutable_users_, "mutable_users_")
		.def(&GetGuildUserDamageReply::add_users_, "add_users_")
		.def(&GetGuildUserDamageReply::ByteSize, "ByteSize")
		.def(&GetGuildUserDamageReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GetServerUserDamageReq_fflua_reg(lua_State* state)
{
//for decltype
	GetServerUserDamageReq* message(nullptr);
	message;
	ff::fflua_register_t<GetServerUserDamageReq, ctor()>(state, "GetServerUserDamageReq", "google::protobuf::Message");
	return true;
}
bool GetGuildAllDamageReply_fflua_reg(lua_State* state)
{
//for decltype
	GetGuildAllDamageReply* message(nullptr);
	message;
	ff::fflua_register_t<GetGuildAllDamageReply, ctor()>(state, "GetGuildAllDamageReply", "google::protobuf::Message")
		// repeated .Packet.GuildAllDamage guilds_ = 1;
		.def(&GetGuildAllDamageReply::guilds__size, "guilds__size")
		.def<decltype(message->guilds_(0)) (GetGuildAllDamageReply::*)(int) const>(&GetGuildAllDamageReply::guilds_, "guilds_")
		.def<decltype(message->mutable_guilds_(0)) (GetGuildAllDamageReply::*)(int)>(&GetGuildAllDamageReply::mutable_guilds_, "mutable_guilds_")
		.def(&GetGuildAllDamageReply::add_guilds_, "add_guilds_")
		.def(&GetGuildAllDamageReply::ByteSize, "ByteSize")
		.def(&GetGuildAllDamageReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GetGuildBossUserDamageReply_fflua_reg(lua_State* state)
{
//for decltype
	GetGuildBossUserDamageReply* message(nullptr);
	message;
	ff::fflua_register_t<GetGuildBossUserDamageReply, ctor()>(state, "GetGuildBossUserDamageReply", "google::protobuf::Message")
		// repeated .Packet.GuildBossUserDamage users_ = 1;
		.def(&GetGuildBossUserDamageReply::users__size, "users__size")
		.def<decltype(message->users_(0)) (GetGuildBossUserDamageReply::*)(int) const>(&GetGuildBossUserDamageReply::users_, "users_")
		.def<decltype(message->mutable_users_(0)) (GetGuildBossUserDamageReply::*)(int)>(&GetGuildBossUserDamageReply::mutable_users_, "mutable_users_")
		.def(&GetGuildBossUserDamageReply::add_users_, "add_users_")
		.def(&GetGuildBossUserDamageReply::ByteSize, "ByteSize")
		.def(&GetGuildBossUserDamageReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool UpdateGuildBossUserDamage_fflua_reg(lua_State* state)
{
//for decltype
	UpdateGuildBossUserDamage* message(nullptr);
	message;
	ff::fflua_register_t<UpdateGuildBossUserDamage, ctor()>(state, "UpdateGuildBossUserDamage", "google::protobuf::Message")
		// required int32 opt = 1;
		.def(&UpdateGuildBossUserDamage::opt, "opt")
		.def(&UpdateGuildBossUserDamage::set_opt, "set_opt")
		// required int32 damagevalue = 2;
		.def(&UpdateGuildBossUserDamage::damagevalue, "damagevalue")
		.def(&UpdateGuildBossUserDamage::set_damagevalue, "set_damagevalue")
		.def(&UpdateGuildBossUserDamage::ByteSize, "ByteSize")
		.def(&UpdateGuildBossUserDamage::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildWetCopyInfo_fflua_reg(lua_State* state)
{
//for decltype
	GuildWetCopyInfo* message(nullptr);
	message;
	ff::fflua_register_t<GuildWetCopyInfo, ctor()>(state, "GuildWetCopyInfo", "google::protobuf::Message")
		// required fixed64 guildid = 1;
		.def(&GuildWetCopyInfo::guildid, "guildid")
		.def(&GuildWetCopyInfo::set_guildid, "set_guildid")
		// required int32 copyid = 2;
		.def(&GuildWetCopyInfo::copyid, "copyid")
		.def(&GuildWetCopyInfo::set_copyid, "set_copyid")
		// required int32 stageid = 3;
		.def(&GuildWetCopyInfo::stageid, "stageid")
		.def(&GuildWetCopyInfo::set_stageid, "set_stageid")
		// required bool status = 4;
		.def(&GuildWetCopyInfo::status, "status")
		.def(&GuildWetCopyInfo::set_status, "set_status")
		// repeated fixed64 bosshp = 5;
		.def(&GuildWetCopyInfo::bosshp_size, "bosshp_size")
		.def<decltype(message->bosshp(0)) (GuildWetCopyInfo::*)(int) const>(&GuildWetCopyInfo::bosshp, "bosshp")
		.def<void(GuildWetCopyInfo::*)(int, const decltype(message->bosshp(0)))>(&GuildWetCopyInfo::set_bosshp, "set_bosshp")
		.def(&GuildWetCopyInfo::add_bosshp, "add_bosshp")
		// required fixed64 maxbosshp = 6;
		.def(&GuildWetCopyInfo::maxbosshp, "maxbosshp")
		.def(&GuildWetCopyInfo::set_maxbosshp, "set_maxbosshp")
		// required fixed64 fighterid = 7;
		.def(&GuildWetCopyInfo::fighterid, "fighterid")
		.def(&GuildWetCopyInfo::set_fighterid, "set_fighterid")
		// required string fightname = 8;
		.def(&GuildWetCopyInfo::fightname, "fightname")
		.def<void (GuildWetCopyInfo::*)(const std::string&)>(&GuildWetCopyInfo::set_fightname, "set_fightname")
		// required uint32 opentime = 9;
		.def(&GuildWetCopyInfo::opentime, "opentime")
		.def(&GuildWetCopyInfo::set_opentime, "set_opentime")
		.def(&GuildWetCopyInfo::ByteSize, "ByteSize")
		.def(&GuildWetCopyInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GetGuildWetCopyInfosReq_fflua_reg(lua_State* state)
{
//for decltype
	GetGuildWetCopyInfosReq* message(nullptr);
	message;
	ff::fflua_register_t<GetGuildWetCopyInfosReq, ctor()>(state, "GetGuildWetCopyInfosReq", "google::protobuf::Message");
	return true;
}
bool GetGuildWetCopyInfosReply_fflua_reg(lua_State* state)
{
//for decltype
	GetGuildWetCopyInfosReply* message(nullptr);
	message;
	ff::fflua_register_t<GetGuildWetCopyInfosReply, ctor()>(state, "GetGuildWetCopyInfosReply", "google::protobuf::Message")
		// repeated .Packet.GuildWetCopyInfo wetcopys_ = 1;
		.def(&GetGuildWetCopyInfosReply::wetcopys__size, "wetcopys__size")
		.def<decltype(message->wetcopys_(0)) (GetGuildWetCopyInfosReply::*)(int) const>(&GetGuildWetCopyInfosReply::wetcopys_, "wetcopys_")
		.def<decltype(message->mutable_wetcopys_(0)) (GetGuildWetCopyInfosReply::*)(int)>(&GetGuildWetCopyInfosReply::mutable_wetcopys_, "mutable_wetcopys_")
		.def(&GetGuildWetCopyInfosReply::add_wetcopys_, "add_wetcopys_")
		// required int32 times = 2;
		.def(&GetGuildWetCopyInfosReply::times, "times")
		.def(&GetGuildWetCopyInfosReply::set_times, "set_times")
		.def(&GetGuildWetCopyInfosReply::ByteSize, "ByteSize")
		.def(&GetGuildWetCopyInfosReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildWetCopyInfoUpdate_fflua_reg(lua_State* state)
{
//for decltype
	GuildWetCopyInfoUpdate* message(nullptr);
	message;
	ff::fflua_register_t<GuildWetCopyInfoUpdate, ctor()>(state, "GuildWetCopyInfoUpdate", "google::protobuf::Message")
		// required .Packet.GuildWetCopyInfo wetcopy = 1;
		.def(&GuildWetCopyInfoUpdate::wetcopy, "wetcopy")
		.def(&GuildWetCopyInfoUpdate::mutable_wetcopy, "mutable_wetcopy")
		.def(&GuildWetCopyInfoUpdate::ByteSize, "ByteSize")
		.def(&GuildWetCopyInfoUpdate::SetInitialized, "SetInitialized")
		;
	return true;
}
bool OpenGuildWetCopy_fflua_reg(lua_State* state)
{
//for decltype
	OpenGuildWetCopy* message(nullptr);
	message;
	ff::fflua_register_t<OpenGuildWetCopy, ctor()>(state, "OpenGuildWetCopy", "google::protobuf::Message")
		// required int32 copyid = 1;
		.def(&OpenGuildWetCopy::copyid, "copyid")
		.def(&OpenGuildWetCopy::set_copyid, "set_copyid")
		.def(&OpenGuildWetCopy::ByteSize, "ByteSize")
		.def(&OpenGuildWetCopy::SetInitialized, "SetInitialized")
		;
	return true;
}
bool ResetGuildWetCopy_fflua_reg(lua_State* state)
{
//for decltype
	ResetGuildWetCopy* message(nullptr);
	message;
	ff::fflua_register_t<ResetGuildWetCopy, ctor()>(state, "ResetGuildWetCopy", "google::protobuf::Message")
		// required int32 copyid = 1;
		.def(&ResetGuildWetCopy::copyid, "copyid")
		.def(&ResetGuildWetCopy::set_copyid, "set_copyid")
		.def(&ResetGuildWetCopy::ByteSize, "ByteSize")
		.def(&ResetGuildWetCopy::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildBattleInfo_fflua_reg(lua_State* state)
{
//for decltype
	GuildBattleInfo* message(nullptr);
	message;
	ff::fflua_register_t<GuildBattleInfo, ctor()>(state, "GuildBattleInfo", "google::protobuf::Message")
		// required fixed64 a_guildid = 1;
		.def(&GuildBattleInfo::a_guildid, "a_guildid")
		.def(&GuildBattleInfo::set_a_guildid, "set_a_guildid")
		// required fixed64 b_guildid = 2;
		.def(&GuildBattleInfo::b_guildid, "b_guildid")
		.def(&GuildBattleInfo::set_b_guildid, "set_b_guildid")
		// required string a_guildname = 3;
		.def(&GuildBattleInfo::a_guildname, "a_guildname")
		.def<void (GuildBattleInfo::*)(const std::string&)>(&GuildBattleInfo::set_a_guildname, "set_a_guildname")
		// required string b_guildname = 4;
		.def(&GuildBattleInfo::b_guildname, "b_guildname")
		.def<void (GuildBattleInfo::*)(const std::string&)>(&GuildBattleInfo::set_b_guildname, "set_b_guildname")
		// required int32 raidid = 5;
		.def(&GuildBattleInfo::raidid, "raidid")
		.def(&GuildBattleInfo::set_raidid, "set_raidid")
		// required fixed64 win_guildid = 6;
		.def(&GuildBattleInfo::win_guildid, "win_guildid")
		.def(&GuildBattleInfo::set_win_guildid, "set_win_guildid")
		.def(&GuildBattleInfo::ByteSize, "ByteSize")
		.def(&GuildBattleInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildBattleInfoList_fflua_reg(lua_State* state)
{
//for decltype
	GuildBattleInfoList* message(nullptr);
	message;
	ff::fflua_register_t<GuildBattleInfoList, ctor()>(state, "GuildBattleInfoList", "google::protobuf::Message")
		// repeated .Packet.GuildBattleInfo gblist = 1;
		.def(&GuildBattleInfoList::gblist_size, "gblist_size")
		.def<decltype(message->gblist(0)) (GuildBattleInfoList::*)(int) const>(&GuildBattleInfoList::gblist, "gblist")
		.def<decltype(message->mutable_gblist(0)) (GuildBattleInfoList::*)(int)>(&GuildBattleInfoList::mutable_gblist, "mutable_gblist")
		.def(&GuildBattleInfoList::add_gblist, "add_gblist")
		// required int32 battletimes = 2;
		.def(&GuildBattleInfoList::battletimes, "battletimes")
		.def(&GuildBattleInfoList::set_battletimes, "set_battletimes")
		.def(&GuildBattleInfoList::ByteSize, "ByteSize")
		.def(&GuildBattleInfoList::SetInitialized, "SetInitialized")
		;
	return true;
}
bool SelfGuildBattleInfo_fflua_reg(lua_State* state)
{
//for decltype
	SelfGuildBattleInfo* message(nullptr);
	message;
	ff::fflua_register_t<SelfGuildBattleInfo, ctor()>(state, "SelfGuildBattleInfo", "google::protobuf::Message")
		// required .Packet.GuildBattleInfo gbinfo = 1;
		.def(&SelfGuildBattleInfo::gbinfo, "gbinfo")
		.def(&SelfGuildBattleInfo::mutable_gbinfo, "mutable_gbinfo")
		.def(&SelfGuildBattleInfo::ByteSize, "ByteSize")
		.def(&SelfGuildBattleInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildBattleListReq_fflua_reg(lua_State* state)
{
//for decltype
	GuildBattleListReq* message(nullptr);
	message;
	ff::fflua_register_t<GuildBattleListReq, ctor()>(state, "GuildBattleListReq", "google::protobuf::Message");
	return true;
}
bool GuildBattleWeekRankInfo_fflua_reg(lua_State* state)
{
//for decltype
	GuildBattleWeekRankInfo* message(nullptr);
	message;
	ff::fflua_register_t<GuildBattleWeekRankInfo, ctor()>(state, "GuildBattleWeekRankInfo", "google::protobuf::Message")
		// required fixed64 guildid = 1;
		.def(&GuildBattleWeekRankInfo::guildid, "guildid")
		.def(&GuildBattleWeekRankInfo::set_guildid, "set_guildid")
		// required string guildname = 2;
		.def(&GuildBattleWeekRankInfo::guildname, "guildname")
		.def<void (GuildBattleWeekRankInfo::*)(const std::string&)>(&GuildBattleWeekRankInfo::set_guildname, "set_guildname")
		// required int32 level = 3;
		.def(&GuildBattleWeekRankInfo::level, "level")
		.def(&GuildBattleWeekRankInfo::set_level, "set_level")
		// required int32 score = 4;
		.def(&GuildBattleWeekRankInfo::score, "score")
		.def(&GuildBattleWeekRankInfo::set_score, "set_score")
		.def(&GuildBattleWeekRankInfo::ByteSize, "ByteSize")
		.def(&GuildBattleWeekRankInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildBattleWeekRankReq_fflua_reg(lua_State* state)
{
//for decltype
	GuildBattleWeekRankReq* message(nullptr);
	message;
	ff::fflua_register_t<GuildBattleWeekRankReq, ctor()>(state, "GuildBattleWeekRankReq", "google::protobuf::Message");
	return true;
}
bool GuildBattleWeekRankReply_fflua_reg(lua_State* state)
{
//for decltype
	GuildBattleWeekRankReply* message(nullptr);
	message;
	ff::fflua_register_t<GuildBattleWeekRankReply, ctor()>(state, "GuildBattleWeekRankReply", "google::protobuf::Message")
		// repeated .Packet.GuildBattleWeekRankInfo list = 1;
		.def(&GuildBattleWeekRankReply::list_size, "list_size")
		.def<decltype(message->list(0)) (GuildBattleWeekRankReply::*)(int) const>(&GuildBattleWeekRankReply::list, "list")
		.def<decltype(message->mutable_list(0)) (GuildBattleWeekRankReply::*)(int)>(&GuildBattleWeekRankReply::mutable_list, "mutable_list")
		.def(&GuildBattleWeekRankReply::add_list, "add_list")
		.def(&GuildBattleWeekRankReply::ByteSize, "ByteSize")
		.def(&GuildBattleWeekRankReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildBattleAllRankInfo_fflua_reg(lua_State* state)
{
//for decltype
	GuildBattleAllRankInfo* message(nullptr);
	message;
	ff::fflua_register_t<GuildBattleAllRankInfo, ctor()>(state, "GuildBattleAllRankInfo", "google::protobuf::Message")
		// required fixed64 guildid = 1;
		.def(&GuildBattleAllRankInfo::guildid, "guildid")
		.def(&GuildBattleAllRankInfo::set_guildid, "set_guildid")
		// required string guildname = 2;
		.def(&GuildBattleAllRankInfo::guildname, "guildname")
		.def<void (GuildBattleAllRankInfo::*)(const std::string&)>(&GuildBattleAllRankInfo::set_guildname, "set_guildname")
		// required int32 level = 3;
		.def(&GuildBattleAllRankInfo::level, "level")
		.def(&GuildBattleAllRankInfo::set_level, "set_level")
		// required int32 battlewintimes = 4;
		.def(&GuildBattleAllRankInfo::battlewintimes, "battlewintimes")
		.def(&GuildBattleAllRankInfo::set_battlewintimes, "set_battlewintimes")
		// required int32 battletimes = 5;
		.def(&GuildBattleAllRankInfo::battletimes, "battletimes")
		.def(&GuildBattleAllRankInfo::set_battletimes, "set_battletimes")
		// required float winrate = 6;
		.def(&GuildBattleAllRankInfo::winrate, "winrate")
		.def(&GuildBattleAllRankInfo::set_winrate, "set_winrate")
		.def(&GuildBattleAllRankInfo::ByteSize, "ByteSize")
		.def(&GuildBattleAllRankInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildBattleAllRankReq_fflua_reg(lua_State* state)
{
//for decltype
	GuildBattleAllRankReq* message(nullptr);
	message;
	ff::fflua_register_t<GuildBattleAllRankReq, ctor()>(state, "GuildBattleAllRankReq", "google::protobuf::Message");
	return true;
}
bool GuildBattleAllRankReply_fflua_reg(lua_State* state)
{
//for decltype
	GuildBattleAllRankReply* message(nullptr);
	message;
	ff::fflua_register_t<GuildBattleAllRankReply, ctor()>(state, "GuildBattleAllRankReply", "google::protobuf::Message")
		// repeated .Packet.GuildBattleAllRankInfo list = 1;
		.def(&GuildBattleAllRankReply::list_size, "list_size")
		.def<decltype(message->list(0)) (GuildBattleAllRankReply::*)(int) const>(&GuildBattleAllRankReply::list, "list")
		.def<decltype(message->mutable_list(0)) (GuildBattleAllRankReply::*)(int)>(&GuildBattleAllRankReply::mutable_list, "mutable_list")
		.def(&GuildBattleAllRankReply::add_list, "add_list")
		.def(&GuildBattleAllRankReply::ByteSize, "ByteSize")
		.def(&GuildBattleAllRankReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildBattleResultReply_fflua_reg(lua_State* state)
{
//for decltype
	GuildBattleResultReply* message(nullptr);
	message;
	ff::fflua_register_t<GuildBattleResultReply, ctor()>(state, "GuildBattleResultReply", "google::protobuf::Message")
		// required bool win = 1;
		.def(&GuildBattleResultReply::win, "win")
		.def(&GuildBattleResultReply::set_win, "set_win")
		// required int32 time = 2;
		.def(&GuildBattleResultReply::time, "time")
		.def(&GuildBattleResultReply::set_time, "set_time")
		.def(&GuildBattleResultReply::ByteSize, "ByteSize")
		.def(&GuildBattleResultReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildBattlePlayerInfo_fflua_reg(lua_State* state)
{
//for decltype
	GuildBattlePlayerInfo* message(nullptr);
	message;
	ff::fflua_register_t<GuildBattlePlayerInfo, ctor()>(state, "GuildBattlePlayerInfo", "google::protobuf::Message")
		// required fixed64 player_id = 1;
		.def(&GuildBattlePlayerInfo::player_id, "player_id")
		.def(&GuildBattlePlayerInfo::set_player_id, "set_player_id")
		// required string player_name = 2;
		.def(&GuildBattlePlayerInfo::player_name, "player_name")
		.def<void (GuildBattlePlayerInfo::*)(const std::string&)>(&GuildBattlePlayerInfo::set_player_name, "set_player_name")
		// required fixed64 guild_id = 3;
		.def(&GuildBattlePlayerInfo::guild_id, "guild_id")
		.def(&GuildBattlePlayerInfo::set_guild_id, "set_guild_id")
		// required int32 score = 4;
		.def(&GuildBattlePlayerInfo::score, "score")
		.def(&GuildBattlePlayerInfo::set_score, "set_score")
		// required bool fighting = 5;
		.def(&GuildBattlePlayerInfo::fighting, "fighting")
		.def(&GuildBattlePlayerInfo::set_fighting, "set_fighting")
		// required int32 streakwin = 6;
		.def(&GuildBattlePlayerInfo::streakwin, "streakwin")
		.def(&GuildBattlePlayerInfo::set_streakwin, "set_streakwin")
		// required int32 mobility = 7;
		.def(&GuildBattlePlayerInfo::mobility, "mobility")
		.def(&GuildBattlePlayerInfo::set_mobility, "set_mobility")
		// required int32 protectcd = 8;
		.def(&GuildBattlePlayerInfo::protectcd, "protectcd")
		.def(&GuildBattlePlayerInfo::set_protectcd, "set_protectcd")
		// required int32 battlereward = 9;
		.def(&GuildBattlePlayerInfo::battlereward, "battlereward")
		.def(&GuildBattlePlayerInfo::set_battlereward, "set_battlereward")
		// required int32 init_actorid = 10;
		.def(&GuildBattlePlayerInfo::init_actorid, "init_actorid")
		.def(&GuildBattlePlayerInfo::set_init_actorid, "set_init_actorid")
		.def(&GuildBattlePlayerInfo::ByteSize, "ByteSize")
		.def(&GuildBattlePlayerInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildBattlePlayerListInfo_fflua_reg(lua_State* state)
{
//for decltype
	GuildBattlePlayerListInfo* message(nullptr);
	message;
	ff::fflua_register_t<GuildBattlePlayerListInfo, ctor()>(state, "GuildBattlePlayerListInfo", "google::protobuf::Message")
		// repeated .Packet.GuildBattlePlayerInfo playerlist = 1;
		.def(&GuildBattlePlayerListInfo::playerlist_size, "playerlist_size")
		.def<decltype(message->playerlist(0)) (GuildBattlePlayerListInfo::*)(int) const>(&GuildBattlePlayerListInfo::playerlist, "playerlist")
		.def<decltype(message->mutable_playerlist(0)) (GuildBattlePlayerListInfo::*)(int)>(&GuildBattlePlayerListInfo::mutable_playerlist, "mutable_playerlist")
		.def(&GuildBattlePlayerListInfo::add_playerlist, "add_playerlist")
		.def(&GuildBattlePlayerListInfo::ByteSize, "ByteSize")
		.def(&GuildBattlePlayerListInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool UpdateGuildBattlePlayerInfo_fflua_reg(lua_State* state)
{
//for decltype
	UpdateGuildBattlePlayerInfo* message(nullptr);
	message;
	ff::fflua_register_t<UpdateGuildBattlePlayerInfo, ctor()>(state, "UpdateGuildBattlePlayerInfo", "google::protobuf::Message")
		// required .Packet.GuildBattlePlayerInfo playerinfo = 1;
		.def(&UpdateGuildBattlePlayerInfo::playerinfo, "playerinfo")
		.def(&UpdateGuildBattlePlayerInfo::mutable_playerinfo, "mutable_playerinfo")
		.def(&UpdateGuildBattlePlayerInfo::ByteSize, "ByteSize")
		.def(&UpdateGuildBattlePlayerInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool UpdateGuildBattleStage_fflua_reg(lua_State* state)
{
//for decltype
	UpdateGuildBattleStage* message(nullptr);
	message;
	ff::fflua_register_t<UpdateGuildBattleStage, ctor()>(state, "UpdateGuildBattleStage", "google::protobuf::Message")
		// required .Packet.GuildBattle_Stage stage = 1;
		.def(&UpdateGuildBattleStage::stage, "stage")
		.def(&UpdateGuildBattleStage::set_stage, "set_stage")
		// required bool dialog = 2;
		.def(&UpdateGuildBattleStage::dialog, "dialog")
		.def(&UpdateGuildBattleStage::set_dialog, "set_dialog")
		.def(&UpdateGuildBattleStage::ByteSize, "ByteSize")
		.def(&UpdateGuildBattleStage::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildBattleFightTarget_fflua_reg(lua_State* state)
{
//for decltype
	GuildBattleFightTarget* message(nullptr);
	message;
	ff::fflua_register_t<GuildBattleFightTarget, ctor()>(state, "GuildBattleFightTarget", "google::protobuf::Message")
		// required fixed64 target_guid = 1;
		.def(&GuildBattleFightTarget::target_guid, "target_guid")
		.def(&GuildBattleFightTarget::set_target_guid, "set_target_guid")
		// required int32 battle_group_id = 2;
		.def(&GuildBattleFightTarget::battle_group_id, "battle_group_id")
		.def(&GuildBattleFightTarget::set_battle_group_id, "set_battle_group_id")
		.def(&GuildBattleFightTarget::ByteSize, "ByteSize")
		.def(&GuildBattleFightTarget::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildWarehouse_fflua_reg(lua_State* state)
{
//for decltype
	GuildWarehouse* message(nullptr);
	message;
	ff::fflua_register_t<GuildWarehouse, ctor()>(state, "GuildWarehouse", "google::protobuf::Message")
		// required fixed64 guildid = 1;
		.def(&GuildWarehouse::guildid, "guildid")
		.def(&GuildWarehouse::set_guildid, "set_guildid")
		// required int32 index = 2;
		.def(&GuildWarehouse::index, "index")
		.def(&GuildWarehouse::set_index, "set_index")
		// required int32 itemid = 3;
		.def(&GuildWarehouse::itemid, "itemid")
		.def(&GuildWarehouse::set_itemid, "set_itemid")
		// required fixed64 receiveplayerid = 4;
		.def(&GuildWarehouse::receiveplayerid, "receiveplayerid")
		.def(&GuildWarehouse::set_receiveplayerid, "set_receiveplayerid")
		.def(&GuildWarehouse::ByteSize, "ByteSize")
		.def(&GuildWarehouse::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildWarehouseReq_fflua_reg(lua_State* state)
{
//for decltype
	GuildWarehouseReq* message(nullptr);
	message;
	ff::fflua_register_t<GuildWarehouseReq, ctor()>(state, "GuildWarehouseReq", "google::protobuf::Message");
	return true;
}
bool GuildWarehouseReply_fflua_reg(lua_State* state)
{
//for decltype
	GuildWarehouseReply* message(nullptr);
	message;
	ff::fflua_register_t<GuildWarehouseReply, ctor()>(state, "GuildWarehouseReply", "google::protobuf::Message")
		// repeated .Packet.GuildWarehouse whlist = 1;
		.def(&GuildWarehouseReply::whlist_size, "whlist_size")
		.def<decltype(message->whlist(0)) (GuildWarehouseReply::*)(int) const>(&GuildWarehouseReply::whlist, "whlist")
		.def<decltype(message->mutable_whlist(0)) (GuildWarehouseReply::*)(int)>(&GuildWarehouseReply::mutable_whlist, "mutable_whlist")
		.def(&GuildWarehouseReply::add_whlist, "add_whlist")
		.def(&GuildWarehouseReply::ByteSize, "ByteSize")
		.def(&GuildWarehouseReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildWarehouseReceiveReq_fflua_reg(lua_State* state)
{
//for decltype
	GuildWarehouseReceiveReq* message(nullptr);
	message;
	ff::fflua_register_t<GuildWarehouseReceiveReq, ctor()>(state, "GuildWarehouseReceiveReq", "google::protobuf::Message")
		// required int32 index = 1;
		.def(&GuildWarehouseReceiveReq::index, "index")
		.def(&GuildWarehouseReceiveReq::set_index, "set_index")
		.def(&GuildWarehouseReceiveReq::ByteSize, "ByteSize")
		.def(&GuildWarehouseReceiveReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildWarehouseSetReceivePlayerReq_fflua_reg(lua_State* state)
{
//for decltype
	GuildWarehouseSetReceivePlayerReq* message(nullptr);
	message;
	ff::fflua_register_t<GuildWarehouseSetReceivePlayerReq, ctor()>(state, "GuildWarehouseSetReceivePlayerReq", "google::protobuf::Message")
		// required int32 index = 1;
		.def(&GuildWarehouseSetReceivePlayerReq::index, "index")
		.def(&GuildWarehouseSetReceivePlayerReq::set_index, "set_index")
		// required fixed64 receiveplayerid = 2;
		.def(&GuildWarehouseSetReceivePlayerReq::receiveplayerid, "receiveplayerid")
		.def(&GuildWarehouseSetReceivePlayerReq::set_receiveplayerid, "set_receiveplayerid")
		.def(&GuildWarehouseSetReceivePlayerReq::ByteSize, "ByteSize")
		.def(&GuildWarehouseSetReceivePlayerReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildWarehouseUpdate_fflua_reg(lua_State* state)
{
//for decltype
	GuildWarehouseUpdate* message(nullptr);
	message;
	ff::fflua_register_t<GuildWarehouseUpdate, ctor()>(state, "GuildWarehouseUpdate", "google::protobuf::Message")
		// required .Packet.GuildWarehouse item = 1;
		.def(&GuildWarehouseUpdate::item, "item")
		.def(&GuildWarehouseUpdate::mutable_item, "mutable_item")
		.def(&GuildWarehouseUpdate::ByteSize, "ByteSize")
		.def(&GuildWarehouseUpdate::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildWarehouseRecord_fflua_reg(lua_State* state)
{
//for decltype
	GuildWarehouseRecord* message(nullptr);
	message;
	ff::fflua_register_t<GuildWarehouseRecord, ctor()>(state, "GuildWarehouseRecord", "google::protobuf::Message")
		// required fixed64 guildid = 1;
		.def(&GuildWarehouseRecord::guildid, "guildid")
		.def(&GuildWarehouseRecord::set_guildid, "set_guildid")
		// required fixed64 id = 2;
		.def(&GuildWarehouseRecord::id, "id")
		.def(&GuildWarehouseRecord::set_id, "set_id")
		// required uint32 date = 3;
		.def(&GuildWarehouseRecord::date, "date")
		.def(&GuildWarehouseRecord::set_date, "set_date")
		// required string player_name = 4;
		.def(&GuildWarehouseRecord::player_name, "player_name")
		.def<void (GuildWarehouseRecord::*)(const std::string&)>(&GuildWarehouseRecord::set_player_name, "set_player_name")
		// required int32 itemid = 5;
		.def(&GuildWarehouseRecord::itemid, "itemid")
		.def(&GuildWarehouseRecord::set_itemid, "set_itemid")
		.def(&GuildWarehouseRecord::ByteSize, "ByteSize")
		.def(&GuildWarehouseRecord::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildWarehouseRecordReq_fflua_reg(lua_State* state)
{
//for decltype
	GuildWarehouseRecordReq* message(nullptr);
	message;
	ff::fflua_register_t<GuildWarehouseRecordReq, ctor()>(state, "GuildWarehouseRecordReq", "google::protobuf::Message");
	return true;
}
bool GuildWarehouseRecordReply_fflua_reg(lua_State* state)
{
//for decltype
	GuildWarehouseRecordReply* message(nullptr);
	message;
	ff::fflua_register_t<GuildWarehouseRecordReply, ctor()>(state, "GuildWarehouseRecordReply", "google::protobuf::Message")
		// repeated .Packet.GuildWarehouseRecord record = 1;
		.def(&GuildWarehouseRecordReply::record_size, "record_size")
		.def<decltype(message->record(0)) (GuildWarehouseRecordReply::*)(int) const>(&GuildWarehouseRecordReply::record, "record")
		.def<decltype(message->mutable_record(0)) (GuildWarehouseRecordReply::*)(int)>(&GuildWarehouseRecordReply::mutable_record, "mutable_record")
		.def(&GuildWarehouseRecordReply::add_record, "add_record")
		.def(&GuildWarehouseRecordReply::ByteSize, "ByteSize")
		.def(&GuildWarehouseRecordReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildSpoilItem_fflua_reg(lua_State* state)
{
//for decltype
	GuildSpoilItem* message(nullptr);
	message;
	ff::fflua_register_t<GuildSpoilItem, ctor()>(state, "GuildSpoilItem", "google::protobuf::Message")
		// required fixed64 guildid = 1;
		.def(&GuildSpoilItem::guildid, "guildid")
		.def(&GuildSpoilItem::set_guildid, "set_guildid")
		// required int32 index = 2;
		.def(&GuildSpoilItem::index, "index")
		.def(&GuildSpoilItem::set_index, "set_index")
		// required int32 copyid = 3;
		.def(&GuildSpoilItem::copyid, "copyid")
		.def(&GuildSpoilItem::set_copyid, "set_copyid")
		// required int32 itemid = 4;
		.def(&GuildSpoilItem::itemid, "itemid")
		.def(&GuildSpoilItem::set_itemid, "set_itemid")
		// required int32 timecd = 5;
		.def(&GuildSpoilItem::timecd, "timecd")
		.def(&GuildSpoilItem::set_timecd, "set_timecd")
		// repeated fixed64 playerid = 6;
		.def(&GuildSpoilItem::playerid_size, "playerid_size")
		.def<decltype(message->playerid(0)) (GuildSpoilItem::*)(int) const>(&GuildSpoilItem::playerid, "playerid")
		.def<void(GuildSpoilItem::*)(int, const decltype(message->playerid(0)))>(&GuildSpoilItem::set_playerid, "set_playerid")
		.def(&GuildSpoilItem::add_playerid, "add_playerid")
		.def(&GuildSpoilItem::ByteSize, "ByteSize")
		.def(&GuildSpoilItem::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildRecord_fflua_reg(lua_State* state)
{
//for decltype
	GuildRecord* message(nullptr);
	message;
	ff::fflua_register_t<GuildRecord, ctor()>(state, "GuildRecord", "google::protobuf::Message")
		// required fixed64 guildid = 1;
		.def(&GuildRecord::guildid, "guildid")
		.def(&GuildRecord::set_guildid, "set_guildid")
		// required int32 index = 2;
		.def(&GuildRecord::index, "index")
		.def(&GuildRecord::set_index, "set_index")
		// required string record = 3;
		.def(&GuildRecord::record, "record")
		.def<void (GuildRecord::*)(const std::string&)>(&GuildRecord::set_record, "set_record")
		// required uint32 date = 4;
		.def(&GuildRecord::date, "date")
		.def(&GuildRecord::set_date, "set_date")
		.def(&GuildRecord::ByteSize, "ByteSize")
		.def(&GuildRecord::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildRecordReply_fflua_reg(lua_State* state)
{
//for decltype
	GuildRecordReply* message(nullptr);
	message;
	ff::fflua_register_t<GuildRecordReply, ctor()>(state, "GuildRecordReply", "google::protobuf::Message")
		// repeated .Packet.GuildRecord records = 1;
		.def(&GuildRecordReply::records_size, "records_size")
		.def<decltype(message->records(0)) (GuildRecordReply::*)(int) const>(&GuildRecordReply::records, "records")
		.def<decltype(message->mutable_records(0)) (GuildRecordReply::*)(int)>(&GuildRecordReply::mutable_records, "mutable_records")
		.def(&GuildRecordReply::add_records, "add_records")
		.def(&GuildRecordReply::ByteSize, "ByteSize")
		.def(&GuildRecordReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildUserName_fflua_reg(lua_State* state)
{
//for decltype
	GuildUserName* message(nullptr);
	message;
	ff::fflua_register_t<GuildUserName, ctor()>(state, "GuildUserName", "google::protobuf::Message")
		// required fixed64 playerid = 1;
		.def(&GuildUserName::playerid, "playerid")
		.def(&GuildUserName::set_playerid, "set_playerid")
		// required string playername = 2;
		.def(&GuildUserName::playername, "playername")
		.def<void (GuildUserName::*)(const std::string&)>(&GuildUserName::set_playername, "set_playername")
		// required int32 hair = 3;
		.def(&GuildUserName::hair, "hair")
		.def(&GuildUserName::set_hair, "set_hair")
		.def(&GuildUserName::ByteSize, "ByteSize")
		.def(&GuildUserName::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildSpoilItemClient_fflua_reg(lua_State* state)
{
//for decltype
	GuildSpoilItemClient* message(nullptr);
	message;
	ff::fflua_register_t<GuildSpoilItemClient, ctor()>(state, "GuildSpoilItemClient", "google::protobuf::Message")
		// required int32 index = 1;
		.def(&GuildSpoilItemClient::index, "index")
		.def(&GuildSpoilItemClient::set_index, "set_index")
		// required int32 copyid = 2;
		.def(&GuildSpoilItemClient::copyid, "copyid")
		.def(&GuildSpoilItemClient::set_copyid, "set_copyid")
		// required int32 itemid = 3;
		.def(&GuildSpoilItemClient::itemid, "itemid")
		.def(&GuildSpoilItemClient::set_itemid, "set_itemid")
		// required int32 timecd = 4;
		.def(&GuildSpoilItemClient::timecd, "timecd")
		.def(&GuildSpoilItemClient::set_timecd, "set_timecd")
		// repeated .Packet.GuildUserName applyplayer = 5;
		.def(&GuildSpoilItemClient::applyplayer_size, "applyplayer_size")
		.def<decltype(message->applyplayer(0)) (GuildSpoilItemClient::*)(int) const>(&GuildSpoilItemClient::applyplayer, "applyplayer")
		.def<decltype(message->mutable_applyplayer(0)) (GuildSpoilItemClient::*)(int)>(&GuildSpoilItemClient::mutable_applyplayer, "mutable_applyplayer")
		.def(&GuildSpoilItemClient::add_applyplayer, "add_applyplayer")
		.def(&GuildSpoilItemClient::ByteSize, "ByteSize")
		.def(&GuildSpoilItemClient::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildSpoilItemReply_fflua_reg(lua_State* state)
{
//for decltype
	GuildSpoilItemReply* message(nullptr);
	message;
	ff::fflua_register_t<GuildSpoilItemReply, ctor()>(state, "GuildSpoilItemReply", "google::protobuf::Message")
		// repeated .Packet.GuildSpoilItemClient items = 1;
		.def(&GuildSpoilItemReply::items_size, "items_size")
		.def<decltype(message->items(0)) (GuildSpoilItemReply::*)(int) const>(&GuildSpoilItemReply::items, "items")
		.def<decltype(message->mutable_items(0)) (GuildSpoilItemReply::*)(int)>(&GuildSpoilItemReply::mutable_items, "mutable_items")
		.def(&GuildSpoilItemReply::add_items, "add_items")
		.def(&GuildSpoilItemReply::ByteSize, "ByteSize")
		.def(&GuildSpoilItemReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool UpdateGuildSpoilItemClient_fflua_reg(lua_State* state)
{
//for decltype
	UpdateGuildSpoilItemClient* message(nullptr);
	message;
	ff::fflua_register_t<UpdateGuildSpoilItemClient, ctor()>(state, "UpdateGuildSpoilItemClient", "google::protobuf::Message")
		// required int32 index = 1;
		.def(&UpdateGuildSpoilItemClient::index, "index")
		.def(&UpdateGuildSpoilItemClient::set_index, "set_index")
		// repeated .Packet.GuildUserName applyplayer = 2;
		.def(&UpdateGuildSpoilItemClient::applyplayer_size, "applyplayer_size")
		.def<decltype(message->applyplayer(0)) (UpdateGuildSpoilItemClient::*)(int) const>(&UpdateGuildSpoilItemClient::applyplayer, "applyplayer")
		.def<decltype(message->mutable_applyplayer(0)) (UpdateGuildSpoilItemClient::*)(int)>(&UpdateGuildSpoilItemClient::mutable_applyplayer, "mutable_applyplayer")
		.def(&UpdateGuildSpoilItemClient::add_applyplayer, "add_applyplayer")
		.def(&UpdateGuildSpoilItemClient::ByteSize, "ByteSize")
		.def(&UpdateGuildSpoilItemClient::SetInitialized, "SetInitialized")
		;
	return true;
}
bool Guild_fflua_regist_all(lua_State* state)
{
	PlayerGuildUserData_fflua_reg(state);
	GuildUser_fflua_reg(state);
	GuildImpeach_fflua_reg(state);
	GuildDBInfo_fflua_reg(state);
	SetGuildIconRR_fflua_reg(state);
	PracticeInfo_fflua_reg(state);
	PlayerPracticeReq_fflua_reg(state);
	GetPracticeReq_fflua_reg(state);
	GetPracticeReply_fflua_reg(state);
	GetGuildInfoReq_fflua_reg(state);
	GetGuildInfoReply_fflua_reg(state);
	GetGuildUserListInfoReq_fflua_reg(state);
	GetGuildUserListInfoReply_fflua_reg(state);
	CreateGuildReq_fflua_reg(state);
	FindGuildReq_fflua_reg(state);
	ApplyGuildReq_fflua_reg(state);
	OneKeyApplyGuildReq_fflua_reg(state);
	InviteyAddGuildReq_fflua_reg(state);
	AskInviteyAgreeGuildReply_fflua_reg(state);
	InviteyAgreeGuildReq_fflua_reg(state);
	AgreeApplyGuildReq_fflua_reg(state);
	UpdatePlayerGuildInfo_fflua_reg(state);
	GuildBaseInfo_fflua_reg(state);
	GetGuildListReq_fflua_reg(state);
	GuildBaseListReply_fflua_reg(state);
	ApplyGuildPlayerInfo_fflua_reg(state);
	ApplyGuildPlayerListReq_fflua_reg(state);
	ApplyGuildPlayerListReply_fflua_reg(state);
	ClearApplyGuildPlayerListReq_fflua_reg(state);
	SetGuildNameRR_fflua_reg(state);
	SetGuildNoticeRR_fflua_reg(state);
	GuildDonationReq_fflua_reg(state);
	DonationFlagUpdate_fflua_reg(state);
	GuildMoneyUpdate_fflua_reg(state);
	GuildImpeachReply_fflua_reg(state);
	SetGuildUserPositionRR_fflua_reg(state);
	GetGuildBonusReq_fflua_reg(state);
	GuildCDKInfo_fflua_reg(state);
	CreateGuildCDK_fflua_reg(state);
	CreateGuildCDKReq_fflua_reg(state);
	GetGuildCDKReq_fflua_reg(state);
	GetGuildCDKListReq_fflua_reg(state);
	GetGuildCDKListReply_fflua_reg(state);
	BuildLevelUpReq_fflua_reg(state);
	BuildLevelUpReply_fflua_reg(state);
	GuildBossCompetitionDbInfo_fflua_reg(state);
	GetGuildBossCompetitionReq_fflua_reg(state);
	GetGuildBossCompetitionReply_fflua_reg(state);
	GuildUserDamage_fflua_reg(state);
	GuildAllDamage_fflua_reg(state);
	GuildBossUserDamage_fflua_reg(state);
	GetGuildUserDamageReq_fflua_reg(state);
	GetGuildUserDamageReply_fflua_reg(state);
	GetServerUserDamageReq_fflua_reg(state);
	GetGuildAllDamageReply_fflua_reg(state);
	GetGuildBossUserDamageReply_fflua_reg(state);
	UpdateGuildBossUserDamage_fflua_reg(state);
	GuildWetCopyInfo_fflua_reg(state);
	GetGuildWetCopyInfosReq_fflua_reg(state);
	GetGuildWetCopyInfosReply_fflua_reg(state);
	GuildWetCopyInfoUpdate_fflua_reg(state);
	OpenGuildWetCopy_fflua_reg(state);
	ResetGuildWetCopy_fflua_reg(state);
	GuildBattleInfo_fflua_reg(state);
	GuildBattleInfoList_fflua_reg(state);
	SelfGuildBattleInfo_fflua_reg(state);
	GuildBattleListReq_fflua_reg(state);
	GuildBattleWeekRankInfo_fflua_reg(state);
	GuildBattleWeekRankReq_fflua_reg(state);
	GuildBattleWeekRankReply_fflua_reg(state);
	GuildBattleAllRankInfo_fflua_reg(state);
	GuildBattleAllRankReq_fflua_reg(state);
	GuildBattleAllRankReply_fflua_reg(state);
	GuildBattleResultReply_fflua_reg(state);
	GuildBattlePlayerInfo_fflua_reg(state);
	GuildBattlePlayerListInfo_fflua_reg(state);
	UpdateGuildBattlePlayerInfo_fflua_reg(state);
	UpdateGuildBattleStage_fflua_reg(state);
	GuildBattleFightTarget_fflua_reg(state);
	GuildWarehouse_fflua_reg(state);
	GuildWarehouseReq_fflua_reg(state);
	GuildWarehouseReply_fflua_reg(state);
	GuildWarehouseReceiveReq_fflua_reg(state);
	GuildWarehouseSetReceivePlayerReq_fflua_reg(state);
	GuildWarehouseUpdate_fflua_reg(state);
	GuildWarehouseRecord_fflua_reg(state);
	GuildWarehouseRecordReq_fflua_reg(state);
	GuildWarehouseRecordReply_fflua_reg(state);
	GuildSpoilItem_fflua_reg(state);
	GuildRecord_fflua_reg(state);
	GuildRecordReply_fflua_reg(state);
	GuildUserName_fflua_reg(state);
	GuildSpoilItemClient_fflua_reg(state);
	GuildSpoilItemReply_fflua_reg(state);
	UpdateGuildSpoilItemClient_fflua_reg(state);
	return true;
}
}
