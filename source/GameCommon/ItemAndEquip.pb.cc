// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ItemAndEquip.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ItemAndEquip.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Packet {

namespace {

const ::google::protobuf::Descriptor* Container_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Container_reflection_ = NULL;
const ::google::protobuf::Descriptor* NormalItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NormalItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipItem_EquipEnchant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipItem_EquipEnchant_reflection_ = NULL;
const ::google::protobuf::Descriptor* GemItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GemItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageHyperItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageHyperItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerContainerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerContainerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerContainerReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerContainerReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerContainerAddItemNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerContainerAddItemNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerContainerDelItemNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerContainerDelItemNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerContainerRefreshItemNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerContainerRefreshItemNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorAddEquipRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorAddEquipRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActorDelEquipRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActorDelEquipRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Market_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Market_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerMarketReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerMarketReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdatePlayerMarketItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdatePlayerMarketItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateArrangeInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateArrangeInfoReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveItemRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveItemRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExtendContainerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExtendContainerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyItemItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyItemItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatisticsResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatisticsResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyItemList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyItemList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ItemAndEquip_2eproto() {
  protobuf_AddDesc_ItemAndEquip_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ItemAndEquip.proto");
  GOOGLE_CHECK(file != NULL);
  Container_descriptor_ = file->message_type(0);
  static const int Container_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, player_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, max_block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, crystal_opened_block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, item_opened_block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, type_),
  };
  Container_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Container_descriptor_,
      Container::default_instance_,
      Container_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Container));
  NormalItem_descriptor_ = file->message_type(1);
  static const int NormalItem_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalItem, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalItem, container_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalItem, config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalItem, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalItem, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalItem, cool_down_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalItem, life_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalItem, lock_flag_),
  };
  NormalItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NormalItem_descriptor_,
      NormalItem::default_instance_,
      NormalItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NormalItem));
  EquipItem_descriptor_ = file->message_type(2);
  static const int EquipItem_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipItem, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipItem, container_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipItem, config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipItem, durable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipItem, enhence_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipItem, enchants_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipItem, gems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipItem, actor_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipItem, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipItem, magical_res_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipItem, lock_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipItem, bind_actor_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipItem, score_),
  };
  EquipItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipItem_descriptor_,
      EquipItem::default_instance_,
      EquipItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipItem));
  EquipItem_EquipEnchant_descriptor_ = EquipItem_descriptor_->nested_type(0);
  static const int EquipItem_EquipEnchant_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipItem_EquipEnchant, slot_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipItem_EquipEnchant, effect_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipItem_EquipEnchant, effect_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipItem_EquipEnchant, max_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipItem_EquipEnchant, client_lock_),
  };
  EquipItem_EquipEnchant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipItem_EquipEnchant_descriptor_,
      EquipItem_EquipEnchant::default_instance_,
      EquipItem_EquipEnchant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipItem_EquipEnchant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipItem_EquipEnchant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipItem_EquipEnchant));
  GemItem_descriptor_ = file->message_type(3);
  static const int GemItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemItem, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemItem, container_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemItem, config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemItem, equip_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemItem, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemItem, lock_flag_),
  };
  GemItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GemItem_descriptor_,
      GemItem::default_instance_,
      GemItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GemItem));
  ClientItemInfo_descriptor_ = file->message_type(4);
  static const int ClientItemInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientItemInfo, equip_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientItemInfo, normal_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientItemInfo, gem_item_),
  };
  ClientItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientItemInfo_descriptor_,
      ClientItemInfo::default_instance_,
      ClientItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientItemInfo));
  MessageHyperItemInfo_descriptor_ = file->message_type(5);
  static const int MessageHyperItemInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageHyperItemInfo, iteminfo_),
  };
  MessageHyperItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageHyperItemInfo_descriptor_,
      MessageHyperItemInfo::default_instance_,
      MessageHyperItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageHyperItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageHyperItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageHyperItemInfo));
  PlayerContainerRequest_descriptor_ = file->message_type(6);
  static const int PlayerContainerRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerContainerRequest, container_type_),
  };
  PlayerContainerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerContainerRequest_descriptor_,
      PlayerContainerRequest::default_instance_,
      PlayerContainerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerContainerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerContainerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerContainerRequest));
  PlayerContainerReply_descriptor_ = file->message_type(7);
  static const int PlayerContainerReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerContainerReply, container_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerContainerReply, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerContainerReply, max_block_),
  };
  PlayerContainerReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerContainerReply_descriptor_,
      PlayerContainerReply::default_instance_,
      PlayerContainerReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerContainerReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerContainerReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerContainerReply));
  PlayerContainerAddItemNotify_descriptor_ = file->message_type(8);
  static const int PlayerContainerAddItemNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerContainerAddItemNotify, container_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerContainerAddItemNotify, items_),
  };
  PlayerContainerAddItemNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerContainerAddItemNotify_descriptor_,
      PlayerContainerAddItemNotify::default_instance_,
      PlayerContainerAddItemNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerContainerAddItemNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerContainerAddItemNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerContainerAddItemNotify));
  PlayerContainerDelItemNotify_descriptor_ = file->message_type(9);
  static const int PlayerContainerDelItemNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerContainerDelItemNotify, container_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerContainerDelItemNotify, guids_),
  };
  PlayerContainerDelItemNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerContainerDelItemNotify_descriptor_,
      PlayerContainerDelItemNotify::default_instance_,
      PlayerContainerDelItemNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerContainerDelItemNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerContainerDelItemNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerContainerDelItemNotify));
  PlayerContainerRefreshItemNotify_descriptor_ = file->message_type(10);
  static const int PlayerContainerRefreshItemNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerContainerRefreshItemNotify, container_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerContainerRefreshItemNotify, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerContainerRefreshItemNotify, option_),
  };
  PlayerContainerRefreshItemNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerContainerRefreshItemNotify_descriptor_,
      PlayerContainerRefreshItemNotify::default_instance_,
      PlayerContainerRefreshItemNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerContainerRefreshItemNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerContainerRefreshItemNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerContainerRefreshItemNotify));
  ActorAddEquipRequest_descriptor_ = file->message_type(11);
  static const int ActorAddEquipRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorAddEquipRequest, actor_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorAddEquipRequest, equip_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorAddEquipRequest, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorAddEquipRequest, inherit_),
  };
  ActorAddEquipRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorAddEquipRequest_descriptor_,
      ActorAddEquipRequest::default_instance_,
      ActorAddEquipRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorAddEquipRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorAddEquipRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorAddEquipRequest));
  ActorDelEquipRequest_descriptor_ = file->message_type(12);
  static const int ActorDelEquipRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorDelEquipRequest, equip_guid_),
  };
  ActorDelEquipRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActorDelEquipRequest_descriptor_,
      ActorDelEquipRequest::default_instance_,
      ActorDelEquipRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorDelEquipRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActorDelEquipRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActorDelEquipRequest));
  Market_descriptor_ = file->message_type(13);
  static const int Market_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Market, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Market, player_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Market, refresh_cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Market, market_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Market, market_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Market, buys_count_),
  };
  Market_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Market_descriptor_,
      Market::default_instance_,
      Market_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Market, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Market, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Market));
  PlayerMarketReply_descriptor_ = file->message_type(14);
  static const int PlayerMarketReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMarketReply, market_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMarketReply, market_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMarketReply, buy_counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMarketReply, refresh_cd_),
  };
  PlayerMarketReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerMarketReply_descriptor_,
      PlayerMarketReply::default_instance_,
      PlayerMarketReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMarketReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMarketReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerMarketReply));
  UpdatePlayerMarketItem_descriptor_ = file->message_type(15);
  static const int UpdatePlayerMarketItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePlayerMarketItem, market_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePlayerMarketItem, market_item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePlayerMarketItem, buy_count_),
  };
  UpdatePlayerMarketItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdatePlayerMarketItem_descriptor_,
      UpdatePlayerMarketItem::default_instance_,
      UpdatePlayerMarketItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePlayerMarketItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePlayerMarketItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdatePlayerMarketItem));
  UpdateArrangeInfoReply_descriptor_ = file->message_type(16);
  static const int UpdateArrangeInfoReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateArrangeInfoReply, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateArrangeInfoReply, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateArrangeInfoReply, second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateArrangeInfoReply, at_type_),
  };
  UpdateArrangeInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateArrangeInfoReply_descriptor_,
      UpdateArrangeInfoReply::default_instance_,
      UpdateArrangeInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateArrangeInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateArrangeInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateArrangeInfoReply));
  MoveItemRequest_descriptor_ = file->message_type(17);
  static const int MoveItemRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveItemRequest, src_container_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveItemRequest, des_container_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveItemRequest, item_guid_),
  };
  MoveItemRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveItemRequest_descriptor_,
      MoveItemRequest::default_instance_,
      MoveItemRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveItemRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveItemRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveItemRequest));
  ExtendContainerRequest_descriptor_ = file->message_type(18);
  static const int ExtendContainerRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendContainerRequest, src_container_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendContainerRequest, count_),
  };
  ExtendContainerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExtendContainerRequest_descriptor_,
      ExtendContainerRequest::default_instance_,
      ExtendContainerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendContainerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendContainerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExtendContainerRequest));
  NotifyItemItem_descriptor_ = file->message_type(19);
  static const int NotifyItemItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyItemItem, config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyItemItem, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyItemItem, ud_),
  };
  NotifyItemItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyItemItem_descriptor_,
      NotifyItemItem::default_instance_,
      NotifyItemItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyItemItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyItemItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyItemItem));
  StatisticsResult_descriptor_ = file->message_type(20);
  static const int StatisticsResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticsResult, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticsResult, statistics_),
  };
  StatisticsResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatisticsResult_descriptor_,
      StatisticsResult::default_instance_,
      StatisticsResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticsResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticsResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatisticsResult));
  NotifyItemList_descriptor_ = file->message_type(21);
  static const int NotifyItemList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyItemList, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyItemList, add_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyItemList, source_id_),
  };
  NotifyItemList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyItemList_descriptor_,
      NotifyItemList::default_instance_,
      NotifyItemList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyItemList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyItemList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyItemList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ItemAndEquip_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Container_descriptor_, &Container::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NormalItem_descriptor_, &NormalItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipItem_descriptor_, &EquipItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipItem_EquipEnchant_descriptor_, &EquipItem_EquipEnchant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GemItem_descriptor_, &GemItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientItemInfo_descriptor_, &ClientItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageHyperItemInfo_descriptor_, &MessageHyperItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerContainerRequest_descriptor_, &PlayerContainerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerContainerReply_descriptor_, &PlayerContainerReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerContainerAddItemNotify_descriptor_, &PlayerContainerAddItemNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerContainerDelItemNotify_descriptor_, &PlayerContainerDelItemNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerContainerRefreshItemNotify_descriptor_, &PlayerContainerRefreshItemNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorAddEquipRequest_descriptor_, &ActorAddEquipRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActorDelEquipRequest_descriptor_, &ActorDelEquipRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Market_descriptor_, &Market::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerMarketReply_descriptor_, &PlayerMarketReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdatePlayerMarketItem_descriptor_, &UpdatePlayerMarketItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateArrangeInfoReply_descriptor_, &UpdateArrangeInfoReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveItemRequest_descriptor_, &MoveItemRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExtendContainerRequest_descriptor_, &ExtendContainerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyItemItem_descriptor_, &NotifyItemItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatisticsResult_descriptor_, &StatisticsResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyItemList_descriptor_, &NotifyItemList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ItemAndEquip_2eproto() {
  delete Container::default_instance_;
  delete Container_reflection_;
  delete NormalItem::default_instance_;
  delete NormalItem_reflection_;
  delete EquipItem::default_instance_;
  delete EquipItem_reflection_;
  delete EquipItem_EquipEnchant::default_instance_;
  delete EquipItem_EquipEnchant_reflection_;
  delete GemItem::default_instance_;
  delete GemItem_reflection_;
  delete ClientItemInfo::default_instance_;
  delete ClientItemInfo_reflection_;
  delete MessageHyperItemInfo::default_instance_;
  delete MessageHyperItemInfo_reflection_;
  delete PlayerContainerRequest::default_instance_;
  delete PlayerContainerRequest_reflection_;
  delete PlayerContainerReply::default_instance_;
  delete PlayerContainerReply_reflection_;
  delete PlayerContainerAddItemNotify::default_instance_;
  delete PlayerContainerAddItemNotify_reflection_;
  delete PlayerContainerDelItemNotify::default_instance_;
  delete PlayerContainerDelItemNotify_reflection_;
  delete PlayerContainerRefreshItemNotify::default_instance_;
  delete PlayerContainerRefreshItemNotify_reflection_;
  delete ActorAddEquipRequest::default_instance_;
  delete ActorAddEquipRequest_reflection_;
  delete ActorDelEquipRequest::default_instance_;
  delete ActorDelEquipRequest_reflection_;
  delete Market::default_instance_;
  delete Market_reflection_;
  delete PlayerMarketReply::default_instance_;
  delete PlayerMarketReply_reflection_;
  delete UpdatePlayerMarketItem::default_instance_;
  delete UpdatePlayerMarketItem_reflection_;
  delete UpdateArrangeInfoReply::default_instance_;
  delete UpdateArrangeInfoReply_reflection_;
  delete MoveItemRequest::default_instance_;
  delete MoveItemRequest_reflection_;
  delete ExtendContainerRequest::default_instance_;
  delete ExtendContainerRequest_reflection_;
  delete NotifyItemItem::default_instance_;
  delete NotifyItemItem_reflection_;
  delete StatisticsResult::default_instance_;
  delete StatisticsResult_reflection_;
  delete NotifyItemList::default_instance_;
  delete NotifyItemList_reflection_;
}

void protobuf_AddDesc_ItemAndEquip_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Packet::protobuf_AddDesc_AllPacketEnum_2eproto();
  ::Config::protobuf_AddDesc_AllConfigEnum_2eproto();
  ::Packet::protobuf_AddDesc_ProtoBufOption_2eproto();
  ::Config::protobuf_AddDesc_EquipmentConfig_2eproto();
  ::Packet::protobuf_AddDesc_BattleInfo_2eproto();
  ::Config::protobuf_AddDesc_MarketConfig_2eproto();
  ::Config::protobuf_AddDesc_ItemConfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ItemAndEquip.proto\022\006Packet\032\023AllPacketE"
    "num.proto\032\023AllConfigEnum.proto\032\024ProtoBuf"
    "Option.proto\032\025EquipmentConfig.proto\032\020Bat"
    "tleInfo.proto\032\022MarketConfig.proto\032\020ItemC"
    "onfig.proto\"\237\001\n\tContainer\022\014\n\004guid\030\001 \002(\006\022"
    "\023\n\013player_guid\030\002 \002(\006\022\021\n\tmax_block\030\003 \002(\005\022"
    "\034\n\024crystal_opened_block\030\004 \002(\005\022\031\n\021item_op"
    "ened_block\030\005 \002(\005\022#\n\004type\030\006 \002(\0162\025.Packet."
    "ContainerType\"\237\001\n\nNormalItem\022\014\n\004guid\030\001 \002"
    "(\006\022\026\n\016container_guid\030\002 \002(\006\022\021\n\tconfig_id\030"
    "\003 \002(\005\022\r\n\005count\030\004 \002(\005\022\r\n\005param\030\005 \002(\005\022\021\n\tc"
    "ool_down\030\006 \002(\005\022\021\n\tlife_time\030\007 \002(\005\022\024\n\tloc"
    "k_flag\030\010 \002(\005:\0010\"\301\003\n\tEquipItem\022\014\n\004guid\030\001 "
    "\002(\006\022\026\n\016container_guid\030\002 \002(\006\022\021\n\tconfig_id"
    "\030\003 \002(\005\022\017\n\007durable\030\004 \002(\002\022\025\n\renhence_level"
    "\030\005 \002(\005\0226\n\010enchants\030\006 \003(\0132\036.Packet.EquipI"
    "tem.EquipEnchantB\004\300\363\030\004\022\022\n\004gems\030\007 \003(\005B\004\300\363"
    "\030\003\022\022\n\nactor_guid\030\010 \002(\006\022#\n\004slot\030\t \002(\0162\025.C"
    "onfig.EquipmentSlot\022\032\n\016magical_res_id\030\n "
    "\002(\005:\002-1\022\024\n\tlock_flag\030\013 \002(\005:\0010\022\027\n\017bind_ac"
    "tor_guid\030\014 \002(\006\022\r\n\005score\030\r \002(\005\032t\n\014EquipEn"
    "chant\022\021\n\tslot_open\030\001 \002(\010\022\023\n\013effect_type\030"
    "\002 \002(\t\022\024\n\014effect_value\030\003 \002(\005\022\021\n\tmax_value"
    "\030\004 \002(\005\022\023\n\013client_lock\030\005 \002(\010\"{\n\007GemItem\022\014"
    "\n\004guid\030\001 \002(\006\022\026\n\016container_guid\030\002 \002(\006\022\021\n\t"
    "config_id\030\003 \002(\005\022\022\n\nequip_guid\030\004 \002(\006\022\r\n\005c"
    "ount\030\005 \002(\005\022\024\n\tlock_flag\030\006 \002(\005:\0010\"\203\001\n\016Cli"
    "entItemInfo\022%\n\nequip_item\030\001 \001(\0132\021.Packet"
    ".EquipItem\022\'\n\013normal_item\030\002 \001(\0132\022.Packet"
    ".NormalItem\022!\n\010gem_item\030\003 \001(\0132\017.Packet.G"
    "emItem\"@\n\024MessageHyperItemInfo\022(\n\010itemin"
    "fo\030\001 \003(\0132\026.Packet.ClientItemInfo\"G\n\026Play"
    "erContainerRequest\022-\n\016container_type\030\001 \002"
    "(\0162\025.Packet.ContainerType\"\177\n\024PlayerConta"
    "inerReply\022-\n\016container_type\030\001 \002(\0162\025.Pack"
    "et.ContainerType\022%\n\005items\030\002 \003(\0132\026.Packet"
    ".ClientItemInfo\022\021\n\tmax_block\030\003 \002(\005\"t\n\034Pl"
    "ayerContainerAddItemNotify\022-\n\016container_"
    "type\030\001 \002(\0162\025.Packet.ContainerType\022%\n\005ite"
    "ms\030\002 \003(\0132\026.Packet.ClientItemInfo\"\\\n\034Play"
    "erContainerDelItemNotify\022-\n\016container_ty"
    "pe\030\001 \002(\0162\025.Packet.ContainerType\022\r\n\005guids"
    "\030\002 \003(\006\"\236\001\n PlayerContainerRefreshItemNot"
    "ify\022-\n\016container_type\030\001 \002(\0162\025.Packet.Con"
    "tainerType\022%\n\005items\030\002 \003(\0132\026.Packet.Clien"
    "tItemInfo\022$\n\006option\030\003 \001(\0162\024.Packet.Resul"
    "tOption\"t\n\024ActorAddEquipRequest\022\022\n\nactor"
    "_guid\030\001 \002(\006\022\022\n\nequip_guid\030\002 \003(\006\022#\n\004slot\030"
    "\003 \003(\0162\025.Config.EquipmentSlot\022\017\n\007inherit\030"
    "\004 \003(\010\"*\n\024ActorDelEquipRequest\022\022\n\nequip_g"
    "uid\030\001 \002(\006\"\304\001\n\006Market\022\022\n\004guid\030\001 \002(\006B\004\310\363\030\001"
    "\022\031\n\013player_guid\030\002 \002(\006B\004\310\363\030\001\022\022\n\nrefresh_c"
    "d\030\003 \002(\006\022\'\n\013market_type\030\004 \002(\0162\022.Config.Ma"
    "rketType\022\'\n\014market_items\030\005 \002(\tB\021\342\363\030\rvarc"
    "har(1024)\022%\n\nbuys_count\030\006 \002(\tB\021\342\363\030\rvarch"
    "ar(1024)\"z\n\021PlayerMarketReply\022\'\n\013market_"
    "type\030\001 \002(\0162\022.Config.MarketType\022\024\n\014market"
    "_items\030\002 \003(\005\022\022\n\nbuy_counts\030\003 \003(\005\022\022\n\nrefr"
    "esh_cd\030\004 \002(\006\"l\n\026UpdatePlayerMarketItem\022\'"
    "\n\013market_type\030\001 \002(\0162\022.Config.MarketType\022"
    "\026\n\016market_item_id\030\002 \002(\005\022\021\n\tbuy_count\030\003 \002"
    "(\005\"n\n\026UpdateArrangeInfoReply\022\r\n\005items\030\001 "
    "\003(\006\022\017\n\007players\030\002 \003(\006\022\016\n\006second\030\003 \002(\005\022$\n\007"
    "at_type\030\004 \002(\0162\023.Packet.ArrangeType\"\200\001\n\017M"
    "oveItemRequest\022,\n\rsrc_container\030\001 \002(\0162\025."
    "Packet.ContainerType\022,\n\rdes_container\030\002 "
    "\002(\0162\025.Packet.ContainerType\022\021\n\titem_guid\030"
    "\003 \002(\006\"U\n\026ExtendContainerRequest\022,\n\rsrc_c"
    "ontainer\030\001 \002(\0162\025.Packet.ContainerType\022\r\n"
    "\005count\030\002 \002(\005\"\?\n\016NotifyItemItem\022\021\n\tconfig"
    "_id\030\001 \002(\005\022\016\n\006amount\030\002 \002(\005\022\n\n\002ud\030\003 \002(\005\"L\n"
    "\020StatisticsResult\022$\n\004item\030\001 \003(\0132\026.Packet"
    ".NotifyItemItem\022\022\n\nstatistics\030\002 \002(\005\"s\n\016N"
    "otifyItemList\022$\n\004item\030\001 \003(\0132\026.Packet.Not"
    "ifyItemItem\022(\n\010add_type\030\002 \002(\0162\026.Config.I"
    "temAddLogType\022\021\n\tsource_id\030\003 \002(\006", 3032);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ItemAndEquip.proto", &protobuf_RegisterTypes);
  Container::default_instance_ = new Container();
  NormalItem::default_instance_ = new NormalItem();
  EquipItem::default_instance_ = new EquipItem();
  EquipItem_EquipEnchant::default_instance_ = new EquipItem_EquipEnchant();
  GemItem::default_instance_ = new GemItem();
  ClientItemInfo::default_instance_ = new ClientItemInfo();
  MessageHyperItemInfo::default_instance_ = new MessageHyperItemInfo();
  PlayerContainerRequest::default_instance_ = new PlayerContainerRequest();
  PlayerContainerReply::default_instance_ = new PlayerContainerReply();
  PlayerContainerAddItemNotify::default_instance_ = new PlayerContainerAddItemNotify();
  PlayerContainerDelItemNotify::default_instance_ = new PlayerContainerDelItemNotify();
  PlayerContainerRefreshItemNotify::default_instance_ = new PlayerContainerRefreshItemNotify();
  ActorAddEquipRequest::default_instance_ = new ActorAddEquipRequest();
  ActorDelEquipRequest::default_instance_ = new ActorDelEquipRequest();
  Market::default_instance_ = new Market();
  PlayerMarketReply::default_instance_ = new PlayerMarketReply();
  UpdatePlayerMarketItem::default_instance_ = new UpdatePlayerMarketItem();
  UpdateArrangeInfoReply::default_instance_ = new UpdateArrangeInfoReply();
  MoveItemRequest::default_instance_ = new MoveItemRequest();
  ExtendContainerRequest::default_instance_ = new ExtendContainerRequest();
  NotifyItemItem::default_instance_ = new NotifyItemItem();
  StatisticsResult::default_instance_ = new StatisticsResult();
  NotifyItemList::default_instance_ = new NotifyItemList();
  Container::default_instance_->InitAsDefaultInstance();
  NormalItem::default_instance_->InitAsDefaultInstance();
  EquipItem::default_instance_->InitAsDefaultInstance();
  EquipItem_EquipEnchant::default_instance_->InitAsDefaultInstance();
  GemItem::default_instance_->InitAsDefaultInstance();
  ClientItemInfo::default_instance_->InitAsDefaultInstance();
  MessageHyperItemInfo::default_instance_->InitAsDefaultInstance();
  PlayerContainerRequest::default_instance_->InitAsDefaultInstance();
  PlayerContainerReply::default_instance_->InitAsDefaultInstance();
  PlayerContainerAddItemNotify::default_instance_->InitAsDefaultInstance();
  PlayerContainerDelItemNotify::default_instance_->InitAsDefaultInstance();
  PlayerContainerRefreshItemNotify::default_instance_->InitAsDefaultInstance();
  ActorAddEquipRequest::default_instance_->InitAsDefaultInstance();
  ActorDelEquipRequest::default_instance_->InitAsDefaultInstance();
  Market::default_instance_->InitAsDefaultInstance();
  PlayerMarketReply::default_instance_->InitAsDefaultInstance();
  UpdatePlayerMarketItem::default_instance_->InitAsDefaultInstance();
  UpdateArrangeInfoReply::default_instance_->InitAsDefaultInstance();
  MoveItemRequest::default_instance_->InitAsDefaultInstance();
  ExtendContainerRequest::default_instance_->InitAsDefaultInstance();
  NotifyItemItem::default_instance_->InitAsDefaultInstance();
  StatisticsResult::default_instance_->InitAsDefaultInstance();
  NotifyItemList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ItemAndEquip_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ItemAndEquip_2eproto {
  StaticDescriptorInitializer_ItemAndEquip_2eproto() {
    protobuf_AddDesc_ItemAndEquip_2eproto();
  }
} static_descriptor_initializer_ItemAndEquip_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Container::kGuidFieldNumber;
const int Container::kPlayerGuidFieldNumber;
const int Container::kMaxBlockFieldNumber;
const int Container::kCrystalOpenedBlockFieldNumber;
const int Container::kItemOpenedBlockFieldNumber;
const int Container::kTypeFieldNumber;
#endif  // !_MSC_VER

Container::Container()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Container::InitAsDefaultInstance() {
}

Container::Container(const Container& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Container::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  player_guid_ = GOOGLE_ULONGLONG(0);
  max_block_ = 0;
  crystal_opened_block_ = 0;
  item_opened_block_ = 0;
  type_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Container::~Container() {
  SharedDtor();
}

void Container::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Container::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Container::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Container_descriptor_;
}

const Container& Container::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemAndEquip_2eproto();
  return *default_instance_;
}

Container* Container::default_instance_ = NULL;

Container* Container::New() const {
  return new Container;
}

void Container::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    player_guid_ = GOOGLE_ULONGLONG(0);
    max_block_ = 0;
    crystal_opened_block_ = 0;
    item_opened_block_ = 0;
    type_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool Container::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_player_guid;
        break;
      }

      // required fixed64 player_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_player_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &player_guid_)));
          set_has_player_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_block;
        break;
      }

      // required int32 max_block = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_block:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_block_)));
          set_has_max_block();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_crystal_opened_block;
        break;
      }

      // required int32 crystal_opened_block = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crystal_opened_block:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crystal_opened_block_)));
          set_has_crystal_opened_block();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_item_opened_block;
        break;
      }

      // required int32 item_opened_block = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_opened_block:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_opened_block_)));
          set_has_item_opened_block();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // required .Packet.ContainerType type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::ContainerType_IsValid(value)) {
            set_type(static_cast< ::Packet::ContainerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void Container::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required fixed64 player_guid = 2;
  if (has_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->player_guid(), output);
  }

  // required int32 max_block = 3;
  if (has_max_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_block(), output);
  }

  // required int32 crystal_opened_block = 4;
  if (has_crystal_opened_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->crystal_opened_block(), output);
  }

  // required int32 item_opened_block = 5;
  if (has_item_opened_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->item_opened_block(), output);
  }

  // required .Packet.ContainerType type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Container::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required fixed64 player_guid = 2;
  if (has_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->player_guid(), target);
  }

  // required int32 max_block = 3;
  if (has_max_block()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_block(), target);
  }

  // required int32 crystal_opened_block = 4;
  if (has_crystal_opened_block()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->crystal_opened_block(), target);
  }

  // required int32 item_opened_block = 5;
  if (has_item_opened_block()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->item_opened_block(), target);
  }

  // required .Packet.ContainerType type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Container::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 player_guid = 2;
    if (has_player_guid()) {
      total_size += 1 + 8;
    }

    // required int32 max_block = 3;
    if (has_max_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_block());
    }

    // required int32 crystal_opened_block = 4;
    if (has_crystal_opened_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crystal_opened_block());
    }

    // required int32 item_opened_block = 5;
    if (has_item_opened_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_opened_block());
    }

    // required .Packet.ContainerType type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Container::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Container* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Container*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void Container::MergeFrom(const Container& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_player_guid()) {
      set_player_guid(from.player_guid());
    }
    if (from.has_max_block()) {
      set_max_block(from.max_block());
    }
    if (from.has_crystal_opened_block()) {
      set_crystal_opened_block(from.crystal_opened_block());
    }
    if (from.has_item_opened_block()) {
      set_item_opened_block(from.item_opened_block());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void Container::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void Container::CopyFrom(const Container& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool Container::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void Container::SetInitialized() {
  _has_bits_[0] |= 0x0000003f;

  return;
}

void Container::Swap(Container* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(player_guid_, other->player_guid_);
    std::swap(max_block_, other->max_block_);
    std::swap(crystal_opened_block_, other->crystal_opened_block_);
    std::swap(item_opened_block_, other->item_opened_block_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata Container::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Container_descriptor_;
  metadata.reflection = Container_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NormalItem::kGuidFieldNumber;
const int NormalItem::kContainerGuidFieldNumber;
const int NormalItem::kConfigIdFieldNumber;
const int NormalItem::kCountFieldNumber;
const int NormalItem::kParamFieldNumber;
const int NormalItem::kCoolDownFieldNumber;
const int NormalItem::kLifeTimeFieldNumber;
const int NormalItem::kLockFlagFieldNumber;
#endif  // !_MSC_VER

NormalItem::NormalItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NormalItem::InitAsDefaultInstance() {
}

NormalItem::NormalItem(const NormalItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NormalItem::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  container_guid_ = GOOGLE_ULONGLONG(0);
  config_id_ = 0;
  count_ = 0;
  param_ = 0;
  cool_down_ = 0;
  life_time_ = 0;
  lock_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NormalItem::~NormalItem() {
  SharedDtor();
}

void NormalItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NormalItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NormalItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NormalItem_descriptor_;
}

const NormalItem& NormalItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemAndEquip_2eproto();
  return *default_instance_;
}

NormalItem* NormalItem::default_instance_ = NULL;

NormalItem* NormalItem::New() const {
  return new NormalItem;
}

void NormalItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    container_guid_ = GOOGLE_ULONGLONG(0);
    config_id_ = 0;
    count_ = 0;
    param_ = 0;
    cool_down_ = 0;
    life_time_ = 0;
    lock_flag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool NormalItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_container_guid;
        break;
      }

      // required fixed64 container_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_container_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &container_guid_)));
          set_has_container_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_config_id;
        break;
      }

      // required int32 config_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &config_id_)));
          set_has_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // required int32 count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_param;
        break;
      }

      // required int32 param = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cool_down;
        break;
      }

      // required int32 cool_down = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cool_down:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cool_down_)));
          set_has_cool_down();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_life_time;
        break;
      }

      // required int32 life_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_life_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &life_time_)));
          set_has_life_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_lock_flag;
        break;
      }

      // required int32 lock_flag = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lock_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lock_flag_)));
          set_has_lock_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void NormalItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required fixed64 container_guid = 2;
  if (has_container_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->container_guid(), output);
  }

  // required int32 config_id = 3;
  if (has_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->config_id(), output);
  }

  // required int32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }

  // required int32 param = 5;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->param(), output);
  }

  // required int32 cool_down = 6;
  if (has_cool_down()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cool_down(), output);
  }

  // required int32 life_time = 7;
  if (has_life_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->life_time(), output);
  }

  // required int32 lock_flag = 8 [default = 0];
  if (has_lock_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->lock_flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NormalItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required fixed64 container_guid = 2;
  if (has_container_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->container_guid(), target);
  }

  // required int32 config_id = 3;
  if (has_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->config_id(), target);
  }

  // required int32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count(), target);
  }

  // required int32 param = 5;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->param(), target);
  }

  // required int32 cool_down = 6;
  if (has_cool_down()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cool_down(), target);
  }

  // required int32 life_time = 7;
  if (has_life_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->life_time(), target);
  }

  // required int32 lock_flag = 8 [default = 0];
  if (has_lock_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->lock_flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NormalItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 container_guid = 2;
    if (has_container_guid()) {
      total_size += 1 + 8;
    }

    // required int32 config_id = 3;
    if (has_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->config_id());
    }

    // required int32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // required int32 param = 5;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param());
    }

    // required int32 cool_down = 6;
    if (has_cool_down()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cool_down());
    }

    // required int32 life_time = 7;
    if (has_life_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->life_time());
    }

    // required int32 lock_flag = 8 [default = 0];
    if (has_lock_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lock_flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NormalItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NormalItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NormalItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void NormalItem::MergeFrom(const NormalItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_container_guid()) {
      set_container_guid(from.container_guid());
    }
    if (from.has_config_id()) {
      set_config_id(from.config_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cool_down()) {
      set_cool_down(from.cool_down());
    }
    if (from.has_life_time()) {
      set_life_time(from.life_time());
    }
    if (from.has_lock_flag()) {
      set_lock_flag(from.lock_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void NormalItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void NormalItem::CopyFrom(const NormalItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool NormalItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void NormalItem::SetInitialized() {
  _has_bits_[0] |= 0x000000ff;

  return;
}

void NormalItem::Swap(NormalItem* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(container_guid_, other->container_guid_);
    std::swap(config_id_, other->config_id_);
    std::swap(count_, other->count_);
    std::swap(param_, other->param_);
    std::swap(cool_down_, other->cool_down_);
    std::swap(life_time_, other->life_time_);
    std::swap(lock_flag_, other->lock_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata NormalItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NormalItem_descriptor_;
  metadata.reflection = NormalItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipItem_EquipEnchant::kSlotOpenFieldNumber;
const int EquipItem_EquipEnchant::kEffectTypeFieldNumber;
const int EquipItem_EquipEnchant::kEffectValueFieldNumber;
const int EquipItem_EquipEnchant::kMaxValueFieldNumber;
const int EquipItem_EquipEnchant::kClientLockFieldNumber;
#endif  // !_MSC_VER

EquipItem_EquipEnchant::EquipItem_EquipEnchant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipItem_EquipEnchant::InitAsDefaultInstance() {
}

EquipItem_EquipEnchant::EquipItem_EquipEnchant(const EquipItem_EquipEnchant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipItem_EquipEnchant::SharedCtor() {
  _cached_size_ = 0;
  slot_open_ = false;
  effect_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  effect_value_ = 0;
  max_value_ = 0;
  client_lock_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipItem_EquipEnchant::~EquipItem_EquipEnchant() {
  SharedDtor();
}

void EquipItem_EquipEnchant::SharedDtor() {
  if (effect_type_ != &::google::protobuf::internal::kEmptyString) {
    delete effect_type_;
  }
  if (this != default_instance_) {
  }
}

void EquipItem_EquipEnchant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipItem_EquipEnchant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipItem_EquipEnchant_descriptor_;
}

const EquipItem_EquipEnchant& EquipItem_EquipEnchant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemAndEquip_2eproto();
  return *default_instance_;
}

EquipItem_EquipEnchant* EquipItem_EquipEnchant::default_instance_ = NULL;

EquipItem_EquipEnchant* EquipItem_EquipEnchant::New() const {
  return new EquipItem_EquipEnchant;
}

void EquipItem_EquipEnchant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slot_open_ = false;
    if (has_effect_type()) {
      if (effect_type_ != &::google::protobuf::internal::kEmptyString) {
        effect_type_->clear();
      }
    }
    effect_value_ = 0;
    max_value_ = 0;
    client_lock_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool EquipItem_EquipEnchant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool slot_open = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &slot_open_)));
          set_has_slot_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_effect_type;
        break;
      }

      // required string effect_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effect_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_effect_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->effect_type().data(), this->effect_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_effect_value;
        break;
      }

      // required int32 effect_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effect_value_)));
          set_has_effect_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_value;
        break;
      }

      // required int32 max_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_value_)));
          set_has_max_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_client_lock;
        break;
      }

      // required bool client_lock = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_lock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &client_lock_)));
          set_has_client_lock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void EquipItem_EquipEnchant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool slot_open = 1;
  if (has_slot_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->slot_open(), output);
  }

  // required string effect_type = 2;
  if (has_effect_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->effect_type().data(), this->effect_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->effect_type(), output);
  }

  // required int32 effect_value = 3;
  if (has_effect_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->effect_value(), output);
  }

  // required int32 max_value = 4;
  if (has_max_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_value(), output);
  }

  // required bool client_lock = 5;
  if (has_client_lock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->client_lock(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipItem_EquipEnchant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool slot_open = 1;
  if (has_slot_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->slot_open(), target);
  }

  // required string effect_type = 2;
  if (has_effect_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->effect_type().data(), this->effect_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->effect_type(), target);
  }

  // required int32 effect_value = 3;
  if (has_effect_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->effect_value(), target);
  }

  // required int32 max_value = 4;
  if (has_max_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_value(), target);
  }

  // required bool client_lock = 5;
  if (has_client_lock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->client_lock(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipItem_EquipEnchant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool slot_open = 1;
    if (has_slot_open()) {
      total_size += 1 + 1;
    }

    // required string effect_type = 2;
    if (has_effect_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->effect_type());
    }

    // required int32 effect_value = 3;
    if (has_effect_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effect_value());
    }

    // required int32 max_value = 4;
    if (has_max_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_value());
    }

    // required bool client_lock = 5;
    if (has_client_lock()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipItem_EquipEnchant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipItem_EquipEnchant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipItem_EquipEnchant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void EquipItem_EquipEnchant::MergeFrom(const EquipItem_EquipEnchant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot_open()) {
      set_slot_open(from.slot_open());
    }
    if (from.has_effect_type()) {
      set_effect_type(from.effect_type());
    }
    if (from.has_effect_value()) {
      set_effect_value(from.effect_value());
    }
    if (from.has_max_value()) {
      set_max_value(from.max_value());
    }
    if (from.has_client_lock()) {
      set_client_lock(from.client_lock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void EquipItem_EquipEnchant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void EquipItem_EquipEnchant::CopyFrom(const EquipItem_EquipEnchant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool EquipItem_EquipEnchant::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void EquipItem_EquipEnchant::SetInitialized() {
  _has_bits_[0] |= 0x0000001f;

  return;
}

void EquipItem_EquipEnchant::Swap(EquipItem_EquipEnchant* other) {
  if (other != this) {
    std::swap(slot_open_, other->slot_open_);
    std::swap(effect_type_, other->effect_type_);
    std::swap(effect_value_, other->effect_value_);
    std::swap(max_value_, other->max_value_);
    std::swap(client_lock_, other->client_lock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata EquipItem_EquipEnchant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipItem_EquipEnchant_descriptor_;
  metadata.reflection = EquipItem_EquipEnchant_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int EquipItem::kGuidFieldNumber;
const int EquipItem::kContainerGuidFieldNumber;
const int EquipItem::kConfigIdFieldNumber;
const int EquipItem::kDurableFieldNumber;
const int EquipItem::kEnhenceLevelFieldNumber;
const int EquipItem::kEnchantsFieldNumber;
const int EquipItem::kGemsFieldNumber;
const int EquipItem::kActorGuidFieldNumber;
const int EquipItem::kSlotFieldNumber;
const int EquipItem::kMagicalResIdFieldNumber;
const int EquipItem::kLockFlagFieldNumber;
const int EquipItem::kBindActorGuidFieldNumber;
const int EquipItem::kScoreFieldNumber;
#endif  // !_MSC_VER

EquipItem::EquipItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipItem::InitAsDefaultInstance() {
}

EquipItem::EquipItem(const EquipItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipItem::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  container_guid_ = GOOGLE_ULONGLONG(0);
  config_id_ = 0;
  durable_ = 0;
  enhence_level_ = 0;
  actor_guid_ = GOOGLE_ULONGLONG(0);
  slot_ = -1;
  magical_res_id_ = -1;
  lock_flag_ = 0;
  bind_actor_guid_ = GOOGLE_ULONGLONG(0);
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipItem::~EquipItem() {
  SharedDtor();
}

void EquipItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipItem_descriptor_;
}

const EquipItem& EquipItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemAndEquip_2eproto();
  return *default_instance_;
}

EquipItem* EquipItem::default_instance_ = NULL;

EquipItem* EquipItem::New() const {
  return new EquipItem;
}

void EquipItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    container_guid_ = GOOGLE_ULONGLONG(0);
    config_id_ = 0;
    durable_ = 0;
    enhence_level_ = 0;
    actor_guid_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    slot_ = -1;
    magical_res_id_ = -1;
    lock_flag_ = 0;
    bind_actor_guid_ = GOOGLE_ULONGLONG(0);
    score_ = 0;
  }
  enchants_.Clear();
  gems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool EquipItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_container_guid;
        break;
      }

      // required fixed64 container_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_container_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &container_guid_)));
          set_has_container_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_config_id;
        break;
      }

      // required int32 config_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &config_id_)));
          set_has_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_durable;
        break;
      }

      // required float durable = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_durable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &durable_)));
          set_has_durable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_enhence_level;
        break;
      }

      // required int32 enhence_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enhence_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enhence_level_)));
          set_has_enhence_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_enchants;
        break;
      }

      // repeated .Packet.EquipItem.EquipEnchant enchants = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enchants:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enchants()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_enchants;
        if (input->ExpectTag(56)) goto parse_gems;
        break;
      }

      // repeated int32 gems = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gems:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_gems())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_gems())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gems;
        if (input->ExpectTag(65)) goto parse_actor_guid;
        break;
      }

      // required fixed64 actor_guid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_actor_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &actor_guid_)));
          set_has_actor_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_slot;
        break;
      }

      // required .Config.EquipmentSlot slot = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Config::EquipmentSlot_IsValid(value)) {
            set_slot(static_cast< ::Config::EquipmentSlot >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_magical_res_id;
        break;
      }

      // required int32 magical_res_id = 10 [default = -1];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magical_res_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magical_res_id_)));
          set_has_magical_res_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_lock_flag;
        break;
      }

      // required int32 lock_flag = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lock_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lock_flag_)));
          set_has_lock_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_bind_actor_guid;
        break;
      }

      // required fixed64 bind_actor_guid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bind_actor_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &bind_actor_guid_)));
          set_has_bind_actor_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_score;
        break;
      }

      // required int32 score = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void EquipItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required fixed64 container_guid = 2;
  if (has_container_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->container_guid(), output);
  }

  // required int32 config_id = 3;
  if (has_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->config_id(), output);
  }

  // required float durable = 4;
  if (has_durable()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->durable(), output);
  }

  // required int32 enhence_level = 5;
  if (has_enhence_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->enhence_level(), output);
  }

  // repeated .Packet.EquipItem.EquipEnchant enchants = 6;
  for (int i = 0; i < this->enchants_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->enchants(i), output);
  }

  // repeated int32 gems = 7;
  for (int i = 0; i < this->gems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->gems(i), output);
  }

  // required fixed64 actor_guid = 8;
  if (has_actor_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->actor_guid(), output);
  }

  // required .Config.EquipmentSlot slot = 9;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->slot(), output);
  }

  // required int32 magical_res_id = 10 [default = -1];
  if (has_magical_res_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->magical_res_id(), output);
  }

  // required int32 lock_flag = 11 [default = 0];
  if (has_lock_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->lock_flag(), output);
  }

  // required fixed64 bind_actor_guid = 12;
  if (has_bind_actor_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(12, this->bind_actor_guid(), output);
  }

  // required int32 score = 13;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required fixed64 container_guid = 2;
  if (has_container_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->container_guid(), target);
  }

  // required int32 config_id = 3;
  if (has_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->config_id(), target);
  }

  // required float durable = 4;
  if (has_durable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->durable(), target);
  }

  // required int32 enhence_level = 5;
  if (has_enhence_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->enhence_level(), target);
  }

  // repeated .Packet.EquipItem.EquipEnchant enchants = 6;
  for (int i = 0; i < this->enchants_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->enchants(i), target);
  }

  // repeated int32 gems = 7;
  for (int i = 0; i < this->gems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->gems(i), target);
  }

  // required fixed64 actor_guid = 8;
  if (has_actor_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(8, this->actor_guid(), target);
  }

  // required .Config.EquipmentSlot slot = 9;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->slot(), target);
  }

  // required int32 magical_res_id = 10 [default = -1];
  if (has_magical_res_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->magical_res_id(), target);
  }

  // required int32 lock_flag = 11 [default = 0];
  if (has_lock_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->lock_flag(), target);
  }

  // required fixed64 bind_actor_guid = 12;
  if (has_bind_actor_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(12, this->bind_actor_guid(), target);
  }

  // required int32 score = 13;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 container_guid = 2;
    if (has_container_guid()) {
      total_size += 1 + 8;
    }

    // required int32 config_id = 3;
    if (has_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->config_id());
    }

    // required float durable = 4;
    if (has_durable()) {
      total_size += 1 + 4;
    }

    // required int32 enhence_level = 5;
    if (has_enhence_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enhence_level());
    }

    // required fixed64 actor_guid = 8;
    if (has_actor_guid()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .Config.EquipmentSlot slot = 9;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->slot());
    }

    // required int32 magical_res_id = 10 [default = -1];
    if (has_magical_res_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magical_res_id());
    }

    // required int32 lock_flag = 11 [default = 0];
    if (has_lock_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lock_flag());
    }

    // required fixed64 bind_actor_guid = 12;
    if (has_bind_actor_guid()) {
      total_size += 1 + 8;
    }

    // required int32 score = 13;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  // repeated .Packet.EquipItem.EquipEnchant enchants = 6;
  total_size += 1 * this->enchants_size();
  for (int i = 0; i < this->enchants_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enchants(i));
  }

  // repeated int32 gems = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->gems_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->gems(i));
    }
    total_size += 1 * this->gems_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void EquipItem::MergeFrom(const EquipItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  enchants_.MergeFrom(from.enchants_);
  gems_.MergeFrom(from.gems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_container_guid()) {
      set_container_guid(from.container_guid());
    }
    if (from.has_config_id()) {
      set_config_id(from.config_id());
    }
    if (from.has_durable()) {
      set_durable(from.durable());
    }
    if (from.has_enhence_level()) {
      set_enhence_level(from.enhence_level());
    }
    if (from.has_actor_guid()) {
      set_actor_guid(from.actor_guid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_magical_res_id()) {
      set_magical_res_id(from.magical_res_id());
    }
    if (from.has_lock_flag()) {
      set_lock_flag(from.lock_flag());
    }
    if (from.has_bind_actor_guid()) {
      set_bind_actor_guid(from.bind_actor_guid());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void EquipItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void EquipItem::CopyFrom(const EquipItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool EquipItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001f9f) != 0x00001f9f) return false;

  for (int i = 0; i < enchants_size(); i++) {
    if (!this->enchants(i).IsInitialized()) return false;
  }
  return true;
}

void EquipItem::SetInitialized() {
  _has_bits_[0] |= 0x00001f9f;

  for (int i = 0; i < enchants_size(); i++) {
    this->mutable_enchants(i)->SetInitialized();
  }
  return;
}

void EquipItem::Swap(EquipItem* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(container_guid_, other->container_guid_);
    std::swap(config_id_, other->config_id_);
    std::swap(durable_, other->durable_);
    std::swap(enhence_level_, other->enhence_level_);
    enchants_.Swap(&other->enchants_);
    gems_.Swap(&other->gems_);
    std::swap(actor_guid_, other->actor_guid_);
    std::swap(slot_, other->slot_);
    std::swap(magical_res_id_, other->magical_res_id_);
    std::swap(lock_flag_, other->lock_flag_);
    std::swap(bind_actor_guid_, other->bind_actor_guid_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata EquipItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipItem_descriptor_;
  metadata.reflection = EquipItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GemItem::kGuidFieldNumber;
const int GemItem::kContainerGuidFieldNumber;
const int GemItem::kConfigIdFieldNumber;
const int GemItem::kEquipGuidFieldNumber;
const int GemItem::kCountFieldNumber;
const int GemItem::kLockFlagFieldNumber;
#endif  // !_MSC_VER

GemItem::GemItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GemItem::InitAsDefaultInstance() {
}

GemItem::GemItem(const GemItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GemItem::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  container_guid_ = GOOGLE_ULONGLONG(0);
  config_id_ = 0;
  equip_guid_ = GOOGLE_ULONGLONG(0);
  count_ = 0;
  lock_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GemItem::~GemItem() {
  SharedDtor();
}

void GemItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GemItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GemItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GemItem_descriptor_;
}

const GemItem& GemItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemAndEquip_2eproto();
  return *default_instance_;
}

GemItem* GemItem::default_instance_ = NULL;

GemItem* GemItem::New() const {
  return new GemItem;
}

void GemItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    container_guid_ = GOOGLE_ULONGLONG(0);
    config_id_ = 0;
    equip_guid_ = GOOGLE_ULONGLONG(0);
    count_ = 0;
    lock_flag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GemItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_container_guid;
        break;
      }

      // required fixed64 container_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_container_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &container_guid_)));
          set_has_container_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_config_id;
        break;
      }

      // required int32 config_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &config_id_)));
          set_has_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_equip_guid;
        break;
      }

      // required fixed64 equip_guid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_equip_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &equip_guid_)));
          set_has_equip_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }

      // required int32 count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lock_flag;
        break;
      }

      // required int32 lock_flag = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lock_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lock_flag_)));
          set_has_lock_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GemItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required fixed64 container_guid = 2;
  if (has_container_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->container_guid(), output);
  }

  // required int32 config_id = 3;
  if (has_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->config_id(), output);
  }

  // required fixed64 equip_guid = 4;
  if (has_equip_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->equip_guid(), output);
  }

  // required int32 count = 5;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->count(), output);
  }

  // required int32 lock_flag = 6 [default = 0];
  if (has_lock_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lock_flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GemItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required fixed64 container_guid = 2;
  if (has_container_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->container_guid(), target);
  }

  // required int32 config_id = 3;
  if (has_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->config_id(), target);
  }

  // required fixed64 equip_guid = 4;
  if (has_equip_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->equip_guid(), target);
  }

  // required int32 count = 5;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->count(), target);
  }

  // required int32 lock_flag = 6 [default = 0];
  if (has_lock_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lock_flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GemItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 container_guid = 2;
    if (has_container_guid()) {
      total_size += 1 + 8;
    }

    // required int32 config_id = 3;
    if (has_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->config_id());
    }

    // required fixed64 equip_guid = 4;
    if (has_equip_guid()) {
      total_size += 1 + 8;
    }

    // required int32 count = 5;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // required int32 lock_flag = 6 [default = 0];
    if (has_lock_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lock_flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GemItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GemItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GemItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GemItem::MergeFrom(const GemItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_container_guid()) {
      set_container_guid(from.container_guid());
    }
    if (from.has_config_id()) {
      set_config_id(from.config_id());
    }
    if (from.has_equip_guid()) {
      set_equip_guid(from.equip_guid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_lock_flag()) {
      set_lock_flag(from.lock_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GemItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GemItem::CopyFrom(const GemItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GemItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void GemItem::SetInitialized() {
  _has_bits_[0] |= 0x0000003f;

  return;
}

void GemItem::Swap(GemItem* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(container_guid_, other->container_guid_);
    std::swap(config_id_, other->config_id_);
    std::swap(equip_guid_, other->equip_guid_);
    std::swap(count_, other->count_);
    std::swap(lock_flag_, other->lock_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GemItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GemItem_descriptor_;
  metadata.reflection = GemItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientItemInfo::kEquipItemFieldNumber;
const int ClientItemInfo::kNormalItemFieldNumber;
const int ClientItemInfo::kGemItemFieldNumber;
#endif  // !_MSC_VER

ClientItemInfo::ClientItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientItemInfo::InitAsDefaultInstance() {
  equip_item_ = const_cast< ::Packet::EquipItem*>(&::Packet::EquipItem::default_instance());
  normal_item_ = const_cast< ::Packet::NormalItem*>(&::Packet::NormalItem::default_instance());
  gem_item_ = const_cast< ::Packet::GemItem*>(&::Packet::GemItem::default_instance());
}

ClientItemInfo::ClientItemInfo(const ClientItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientItemInfo::SharedCtor() {
  _cached_size_ = 0;
  equip_item_ = NULL;
  normal_item_ = NULL;
  gem_item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientItemInfo::~ClientItemInfo() {
  SharedDtor();
}

void ClientItemInfo::SharedDtor() {
  if (this != default_instance_) {
    delete equip_item_;
    delete normal_item_;
    delete gem_item_;
  }
}

void ClientItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientItemInfo_descriptor_;
}

const ClientItemInfo& ClientItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemAndEquip_2eproto();
  return *default_instance_;
}

ClientItemInfo* ClientItemInfo::default_instance_ = NULL;

ClientItemInfo* ClientItemInfo::New() const {
  return new ClientItemInfo;
}

void ClientItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_equip_item()) {
      if (equip_item_ != NULL) equip_item_->::Packet::EquipItem::Clear();
    }
    if (has_normal_item()) {
      if (normal_item_ != NULL) normal_item_->::Packet::NormalItem::Clear();
    }
    if (has_gem_item()) {
      if (gem_item_ != NULL) gem_item_->::Packet::GemItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ClientItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Packet.EquipItem equip_item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_normal_item;
        break;
      }

      // optional .Packet.NormalItem normal_item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_normal_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_normal_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gem_item;
        break;
      }

      // optional .Packet.GemItem gem_item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gem_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gem_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ClientItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Packet.EquipItem equip_item = 1;
  if (has_equip_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equip_item(), output);
  }

  // optional .Packet.NormalItem normal_item = 2;
  if (has_normal_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->normal_item(), output);
  }

  // optional .Packet.GemItem gem_item = 3;
  if (has_gem_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->gem_item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Packet.EquipItem equip_item = 1;
  if (has_equip_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equip_item(), target);
  }

  // optional .Packet.NormalItem normal_item = 2;
  if (has_normal_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->normal_item(), target);
  }

  // optional .Packet.GemItem gem_item = 3;
  if (has_gem_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->gem_item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Packet.EquipItem equip_item = 1;
    if (has_equip_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip_item());
    }

    // optional .Packet.NormalItem normal_item = 2;
    if (has_normal_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->normal_item());
    }

    // optional .Packet.GemItem gem_item = 3;
    if (has_gem_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gem_item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ClientItemInfo::MergeFrom(const ClientItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_item()) {
      mutable_equip_item()->::Packet::EquipItem::MergeFrom(from.equip_item());
    }
    if (from.has_normal_item()) {
      mutable_normal_item()->::Packet::NormalItem::MergeFrom(from.normal_item());
    }
    if (from.has_gem_item()) {
      mutable_gem_item()->::Packet::GemItem::MergeFrom(from.gem_item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ClientItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ClientItemInfo::CopyFrom(const ClientItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ClientItemInfo::IsInitialized() const {

  if (has_equip_item()) {
    if (!this->equip_item().IsInitialized()) return false;
  }
  if (has_normal_item()) {
    if (!this->normal_item().IsInitialized()) return false;
  }
  if (has_gem_item()) {
    if (!this->gem_item().IsInitialized()) return false;
  }
  return true;
}

void ClientItemInfo::SetInitialized() {

  if (has_equip_item()) {
    this->mutable_equip_item()->SetInitialized();
  }
  if (has_normal_item()) {
    this->mutable_normal_item()->SetInitialized();
  }
  if (has_gem_item()) {
    this->mutable_gem_item()->SetInitialized();
  }
  return;
}

void ClientItemInfo::Swap(ClientItemInfo* other) {
  if (other != this) {
    std::swap(equip_item_, other->equip_item_);
    std::swap(normal_item_, other->normal_item_);
    std::swap(gem_item_, other->gem_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ClientItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientItemInfo_descriptor_;
  metadata.reflection = ClientItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageHyperItemInfo::kIteminfoFieldNumber;
#endif  // !_MSC_VER

MessageHyperItemInfo::MessageHyperItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MessageHyperItemInfo::InitAsDefaultInstance() {
}

MessageHyperItemInfo::MessageHyperItemInfo(const MessageHyperItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MessageHyperItemInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageHyperItemInfo::~MessageHyperItemInfo() {
  SharedDtor();
}

void MessageHyperItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageHyperItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageHyperItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageHyperItemInfo_descriptor_;
}

const MessageHyperItemInfo& MessageHyperItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemAndEquip_2eproto();
  return *default_instance_;
}

MessageHyperItemInfo* MessageHyperItemInfo::default_instance_ = NULL;

MessageHyperItemInfo* MessageHyperItemInfo::New() const {
  return new MessageHyperItemInfo;
}

void MessageHyperItemInfo::Clear() {
  iteminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool MessageHyperItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.ClientItemInfo iteminfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_iteminfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_iteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_iteminfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void MessageHyperItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.ClientItemInfo iteminfo = 1;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->iteminfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MessageHyperItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.ClientItemInfo iteminfo = 1;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->iteminfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MessageHyperItemInfo::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.ClientItemInfo iteminfo = 1;
  total_size += 1 * this->iteminfo_size();
  for (int i = 0; i < this->iteminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->iteminfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageHyperItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageHyperItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageHyperItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void MessageHyperItemInfo::MergeFrom(const MessageHyperItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  iteminfo_.MergeFrom(from.iteminfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void MessageHyperItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void MessageHyperItemInfo::CopyFrom(const MessageHyperItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool MessageHyperItemInfo::IsInitialized() const {

  for (int i = 0; i < iteminfo_size(); i++) {
    if (!this->iteminfo(i).IsInitialized()) return false;
  }
  return true;
}

void MessageHyperItemInfo::SetInitialized() {

  for (int i = 0; i < iteminfo_size(); i++) {
    this->mutable_iteminfo(i)->SetInitialized();
  }
  return;
}

void MessageHyperItemInfo::Swap(MessageHyperItemInfo* other) {
  if (other != this) {
    iteminfo_.Swap(&other->iteminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata MessageHyperItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageHyperItemInfo_descriptor_;
  metadata.reflection = MessageHyperItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerContainerRequest::kContainerTypeFieldNumber;
#endif  // !_MSC_VER

PlayerContainerRequest::PlayerContainerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerContainerRequest::InitAsDefaultInstance() {
}

PlayerContainerRequest::PlayerContainerRequest(const PlayerContainerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerContainerRequest::SharedCtor() {
  _cached_size_ = 0;
  container_type_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerContainerRequest::~PlayerContainerRequest() {
  SharedDtor();
}

void PlayerContainerRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerContainerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerContainerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerContainerRequest_descriptor_;
}

const PlayerContainerRequest& PlayerContainerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemAndEquip_2eproto();
  return *default_instance_;
}

PlayerContainerRequest* PlayerContainerRequest::default_instance_ = NULL;

PlayerContainerRequest* PlayerContainerRequest::New() const {
  return new PlayerContainerRequest;
}

void PlayerContainerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    container_type_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerContainerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.ContainerType container_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::ContainerType_IsValid(value)) {
            set_container_type(static_cast< ::Packet::ContainerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerContainerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.ContainerType container_type = 1;
  if (has_container_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->container_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerContainerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.ContainerType container_type = 1;
  if (has_container_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->container_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerContainerRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.ContainerType container_type = 1;
    if (has_container_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->container_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerContainerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerContainerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerContainerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerContainerRequest::MergeFrom(const PlayerContainerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_container_type()) {
      set_container_type(from.container_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerContainerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerContainerRequest::CopyFrom(const PlayerContainerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerContainerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayerContainerRequest::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void PlayerContainerRequest::Swap(PlayerContainerRequest* other) {
  if (other != this) {
    std::swap(container_type_, other->container_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerContainerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerContainerRequest_descriptor_;
  metadata.reflection = PlayerContainerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerContainerReply::kContainerTypeFieldNumber;
const int PlayerContainerReply::kItemsFieldNumber;
const int PlayerContainerReply::kMaxBlockFieldNumber;
#endif  // !_MSC_VER

PlayerContainerReply::PlayerContainerReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerContainerReply::InitAsDefaultInstance() {
}

PlayerContainerReply::PlayerContainerReply(const PlayerContainerReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerContainerReply::SharedCtor() {
  _cached_size_ = 0;
  container_type_ = -1;
  max_block_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerContainerReply::~PlayerContainerReply() {
  SharedDtor();
}

void PlayerContainerReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerContainerReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerContainerReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerContainerReply_descriptor_;
}

const PlayerContainerReply& PlayerContainerReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemAndEquip_2eproto();
  return *default_instance_;
}

PlayerContainerReply* PlayerContainerReply::default_instance_ = NULL;

PlayerContainerReply* PlayerContainerReply::New() const {
  return new PlayerContainerReply;
}

void PlayerContainerReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    container_type_ = -1;
    max_block_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerContainerReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.ContainerType container_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::ContainerType_IsValid(value)) {
            set_container_type(static_cast< ::Packet::ContainerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .Packet.ClientItemInfo items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectTag(24)) goto parse_max_block;
        break;
      }

      // required int32 max_block = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_block:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_block_)));
          set_has_max_block();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerContainerReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.ContainerType container_type = 1;
  if (has_container_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->container_type(), output);
  }

  // repeated .Packet.ClientItemInfo items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  // required int32 max_block = 3;
  if (has_max_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_block(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerContainerReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.ContainerType container_type = 1;
  if (has_container_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->container_type(), target);
  }

  // repeated .Packet.ClientItemInfo items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  // required int32 max_block = 3;
  if (has_max_block()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_block(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerContainerReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.ContainerType container_type = 1;
    if (has_container_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->container_type());
    }

    // required int32 max_block = 3;
    if (has_max_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_block());
    }

  }
  // repeated .Packet.ClientItemInfo items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerContainerReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerContainerReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerContainerReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerContainerReply::MergeFrom(const PlayerContainerReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_container_type()) {
      set_container_type(from.container_type());
    }
    if (from.has_max_block()) {
      set_max_block(from.max_block());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerContainerReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerContainerReply::CopyFrom(const PlayerContainerReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerContainerReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerContainerReply::SetInitialized() {
  _has_bits_[0] |= 0x00000005;

  for (int i = 0; i < items_size(); i++) {
    this->mutable_items(i)->SetInitialized();
  }
  return;
}

void PlayerContainerReply::Swap(PlayerContainerReply* other) {
  if (other != this) {
    std::swap(container_type_, other->container_type_);
    items_.Swap(&other->items_);
    std::swap(max_block_, other->max_block_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerContainerReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerContainerReply_descriptor_;
  metadata.reflection = PlayerContainerReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerContainerAddItemNotify::kContainerTypeFieldNumber;
const int PlayerContainerAddItemNotify::kItemsFieldNumber;
#endif  // !_MSC_VER

PlayerContainerAddItemNotify::PlayerContainerAddItemNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerContainerAddItemNotify::InitAsDefaultInstance() {
}

PlayerContainerAddItemNotify::PlayerContainerAddItemNotify(const PlayerContainerAddItemNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerContainerAddItemNotify::SharedCtor() {
  _cached_size_ = 0;
  container_type_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerContainerAddItemNotify::~PlayerContainerAddItemNotify() {
  SharedDtor();
}

void PlayerContainerAddItemNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerContainerAddItemNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerContainerAddItemNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerContainerAddItemNotify_descriptor_;
}

const PlayerContainerAddItemNotify& PlayerContainerAddItemNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemAndEquip_2eproto();
  return *default_instance_;
}

PlayerContainerAddItemNotify* PlayerContainerAddItemNotify::default_instance_ = NULL;

PlayerContainerAddItemNotify* PlayerContainerAddItemNotify::New() const {
  return new PlayerContainerAddItemNotify;
}

void PlayerContainerAddItemNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    container_type_ = -1;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerContainerAddItemNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.ContainerType container_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::ContainerType_IsValid(value)) {
            set_container_type(static_cast< ::Packet::ContainerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .Packet.ClientItemInfo items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerContainerAddItemNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.ContainerType container_type = 1;
  if (has_container_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->container_type(), output);
  }

  // repeated .Packet.ClientItemInfo items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerContainerAddItemNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.ContainerType container_type = 1;
  if (has_container_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->container_type(), target);
  }

  // repeated .Packet.ClientItemInfo items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerContainerAddItemNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.ContainerType container_type = 1;
    if (has_container_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->container_type());
    }

  }
  // repeated .Packet.ClientItemInfo items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerContainerAddItemNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerContainerAddItemNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerContainerAddItemNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerContainerAddItemNotify::MergeFrom(const PlayerContainerAddItemNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_container_type()) {
      set_container_type(from.container_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerContainerAddItemNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerContainerAddItemNotify::CopyFrom(const PlayerContainerAddItemNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerContainerAddItemNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerContainerAddItemNotify::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  for (int i = 0; i < items_size(); i++) {
    this->mutable_items(i)->SetInitialized();
  }
  return;
}

void PlayerContainerAddItemNotify::Swap(PlayerContainerAddItemNotify* other) {
  if (other != this) {
    std::swap(container_type_, other->container_type_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerContainerAddItemNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerContainerAddItemNotify_descriptor_;
  metadata.reflection = PlayerContainerAddItemNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerContainerDelItemNotify::kContainerTypeFieldNumber;
const int PlayerContainerDelItemNotify::kGuidsFieldNumber;
#endif  // !_MSC_VER

PlayerContainerDelItemNotify::PlayerContainerDelItemNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerContainerDelItemNotify::InitAsDefaultInstance() {
}

PlayerContainerDelItemNotify::PlayerContainerDelItemNotify(const PlayerContainerDelItemNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerContainerDelItemNotify::SharedCtor() {
  _cached_size_ = 0;
  container_type_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerContainerDelItemNotify::~PlayerContainerDelItemNotify() {
  SharedDtor();
}

void PlayerContainerDelItemNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerContainerDelItemNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerContainerDelItemNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerContainerDelItemNotify_descriptor_;
}

const PlayerContainerDelItemNotify& PlayerContainerDelItemNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemAndEquip_2eproto();
  return *default_instance_;
}

PlayerContainerDelItemNotify* PlayerContainerDelItemNotify::default_instance_ = NULL;

PlayerContainerDelItemNotify* PlayerContainerDelItemNotify::New() const {
  return new PlayerContainerDelItemNotify;
}

void PlayerContainerDelItemNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    container_type_ = -1;
  }
  guids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerContainerDelItemNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.ContainerType container_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::ContainerType_IsValid(value)) {
            set_container_type(static_cast< ::Packet::ContainerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_guids;
        break;
      }

      // repeated fixed64 guids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_guids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17, input, this->mutable_guids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_guids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_guids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerContainerDelItemNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.ContainerType container_type = 1;
  if (has_container_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->container_type(), output);
  }

  // repeated fixed64 guids = 2;
  for (int i = 0; i < this->guids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->guids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerContainerDelItemNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.ContainerType container_type = 1;
  if (has_container_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->container_type(), target);
  }

  // repeated fixed64 guids = 2;
  for (int i = 0; i < this->guids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(2, this->guids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerContainerDelItemNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.ContainerType container_type = 1;
    if (has_container_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->container_type());
    }

  }
  // repeated fixed64 guids = 2;
  {
    int data_size = 0;
    data_size = 8 * this->guids_size();
    total_size += 1 * this->guids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerContainerDelItemNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerContainerDelItemNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerContainerDelItemNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerContainerDelItemNotify::MergeFrom(const PlayerContainerDelItemNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  guids_.MergeFrom(from.guids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_container_type()) {
      set_container_type(from.container_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerContainerDelItemNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerContainerDelItemNotify::CopyFrom(const PlayerContainerDelItemNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerContainerDelItemNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayerContainerDelItemNotify::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void PlayerContainerDelItemNotify::Swap(PlayerContainerDelItemNotify* other) {
  if (other != this) {
    std::swap(container_type_, other->container_type_);
    guids_.Swap(&other->guids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerContainerDelItemNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerContainerDelItemNotify_descriptor_;
  metadata.reflection = PlayerContainerDelItemNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerContainerRefreshItemNotify::kContainerTypeFieldNumber;
const int PlayerContainerRefreshItemNotify::kItemsFieldNumber;
const int PlayerContainerRefreshItemNotify::kOptionFieldNumber;
#endif  // !_MSC_VER

PlayerContainerRefreshItemNotify::PlayerContainerRefreshItemNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerContainerRefreshItemNotify::InitAsDefaultInstance() {
}

PlayerContainerRefreshItemNotify::PlayerContainerRefreshItemNotify(const PlayerContainerRefreshItemNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerContainerRefreshItemNotify::SharedCtor() {
  _cached_size_ = 0;
  container_type_ = -1;
  option_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerContainerRefreshItemNotify::~PlayerContainerRefreshItemNotify() {
  SharedDtor();
}

void PlayerContainerRefreshItemNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerContainerRefreshItemNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerContainerRefreshItemNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerContainerRefreshItemNotify_descriptor_;
}

const PlayerContainerRefreshItemNotify& PlayerContainerRefreshItemNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemAndEquip_2eproto();
  return *default_instance_;
}

PlayerContainerRefreshItemNotify* PlayerContainerRefreshItemNotify::default_instance_ = NULL;

PlayerContainerRefreshItemNotify* PlayerContainerRefreshItemNotify::New() const {
  return new PlayerContainerRefreshItemNotify;
}

void PlayerContainerRefreshItemNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    container_type_ = -1;
    option_ = -1;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerContainerRefreshItemNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.ContainerType container_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::ContainerType_IsValid(value)) {
            set_container_type(static_cast< ::Packet::ContainerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .Packet.ClientItemInfo items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectTag(24)) goto parse_option;
        break;
      }

      // optional .Packet.ResultOption option = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_option:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::ResultOption_IsValid(value)) {
            set_option(static_cast< ::Packet::ResultOption >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerContainerRefreshItemNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.ContainerType container_type = 1;
  if (has_container_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->container_type(), output);
  }

  // repeated .Packet.ClientItemInfo items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  // optional .Packet.ResultOption option = 3;
  if (has_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->option(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerContainerRefreshItemNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.ContainerType container_type = 1;
  if (has_container_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->container_type(), target);
  }

  // repeated .Packet.ClientItemInfo items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  // optional .Packet.ResultOption option = 3;
  if (has_option()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->option(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerContainerRefreshItemNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.ContainerType container_type = 1;
    if (has_container_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->container_type());
    }

    // optional .Packet.ResultOption option = 3;
    if (has_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->option());
    }

  }
  // repeated .Packet.ClientItemInfo items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerContainerRefreshItemNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerContainerRefreshItemNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerContainerRefreshItemNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerContainerRefreshItemNotify::MergeFrom(const PlayerContainerRefreshItemNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_container_type()) {
      set_container_type(from.container_type());
    }
    if (from.has_option()) {
      set_option(from.option());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerContainerRefreshItemNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerContainerRefreshItemNotify::CopyFrom(const PlayerContainerRefreshItemNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerContainerRefreshItemNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerContainerRefreshItemNotify::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  for (int i = 0; i < items_size(); i++) {
    this->mutable_items(i)->SetInitialized();
  }
  return;
}

void PlayerContainerRefreshItemNotify::Swap(PlayerContainerRefreshItemNotify* other) {
  if (other != this) {
    std::swap(container_type_, other->container_type_);
    items_.Swap(&other->items_);
    std::swap(option_, other->option_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerContainerRefreshItemNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerContainerRefreshItemNotify_descriptor_;
  metadata.reflection = PlayerContainerRefreshItemNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActorAddEquipRequest::kActorGuidFieldNumber;
const int ActorAddEquipRequest::kEquipGuidFieldNumber;
const int ActorAddEquipRequest::kSlotFieldNumber;
const int ActorAddEquipRequest::kInheritFieldNumber;
#endif  // !_MSC_VER

ActorAddEquipRequest::ActorAddEquipRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActorAddEquipRequest::InitAsDefaultInstance() {
}

ActorAddEquipRequest::ActorAddEquipRequest(const ActorAddEquipRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActorAddEquipRequest::SharedCtor() {
  _cached_size_ = 0;
  actor_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorAddEquipRequest::~ActorAddEquipRequest() {
  SharedDtor();
}

void ActorAddEquipRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActorAddEquipRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorAddEquipRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorAddEquipRequest_descriptor_;
}

const ActorAddEquipRequest& ActorAddEquipRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemAndEquip_2eproto();
  return *default_instance_;
}

ActorAddEquipRequest* ActorAddEquipRequest::default_instance_ = NULL;

ActorAddEquipRequest* ActorAddEquipRequest::New() const {
  return new ActorAddEquipRequest;
}

void ActorAddEquipRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    actor_guid_ = GOOGLE_ULONGLONG(0);
  }
  equip_guid_.Clear();
  slot_.Clear();
  inherit_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ActorAddEquipRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 actor_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &actor_guid_)));
          set_has_actor_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_equip_guid;
        break;
      }

      // repeated fixed64 equip_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_equip_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17, input, this->mutable_equip_guid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_equip_guid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_equip_guid;
        if (input->ExpectTag(24)) goto parse_slot;
        break;
      }

      // repeated .Config.EquipmentSlot slot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Config::EquipmentSlot_IsValid(value)) {
            add_slot(static_cast< ::Config::EquipmentSlot >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::Config::EquipmentSlot_IsValid,
                 this->mutable_slot())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_slot;
        if (input->ExpectTag(32)) goto parse_inherit;
        break;
      }

      // repeated bool inherit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inherit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 32, input, this->mutable_inherit())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_inherit())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_inherit;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ActorAddEquipRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 actor_guid = 1;
  if (has_actor_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->actor_guid(), output);
  }

  // repeated fixed64 equip_guid = 2;
  for (int i = 0; i < this->equip_guid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->equip_guid(i), output);
  }

  // repeated .Config.EquipmentSlot slot = 3;
  for (int i = 0; i < this->slot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->slot(i), output);
  }

  // repeated bool inherit = 4;
  for (int i = 0; i < this->inherit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      4, this->inherit(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActorAddEquipRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 actor_guid = 1;
  if (has_actor_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->actor_guid(), target);
  }

  // repeated fixed64 equip_guid = 2;
  for (int i = 0; i < this->equip_guid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(2, this->equip_guid(i), target);
  }

  // repeated .Config.EquipmentSlot slot = 3;
  for (int i = 0; i < this->slot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->slot(i), target);
  }

  // repeated bool inherit = 4;
  for (int i = 0; i < this->inherit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(4, this->inherit(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActorAddEquipRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 actor_guid = 1;
    if (has_actor_guid()) {
      total_size += 1 + 8;
    }

  }
  // repeated fixed64 equip_guid = 2;
  {
    int data_size = 0;
    data_size = 8 * this->equip_guid_size();
    total_size += 1 * this->equip_guid_size() + data_size;
  }

  // repeated .Config.EquipmentSlot slot = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->slot_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->slot(i));
    }
    total_size += 1 * this->slot_size() + data_size;
  }

  // repeated bool inherit = 4;
  {
    int data_size = 0;
    data_size = 1 * this->inherit_size();
    total_size += 1 * this->inherit_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorAddEquipRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorAddEquipRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorAddEquipRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ActorAddEquipRequest::MergeFrom(const ActorAddEquipRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_guid_.MergeFrom(from.equip_guid_);
  slot_.MergeFrom(from.slot_);
  inherit_.MergeFrom(from.inherit_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actor_guid()) {
      set_actor_guid(from.actor_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ActorAddEquipRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ActorAddEquipRequest::CopyFrom(const ActorAddEquipRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ActorAddEquipRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ActorAddEquipRequest::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void ActorAddEquipRequest::Swap(ActorAddEquipRequest* other) {
  if (other != this) {
    std::swap(actor_guid_, other->actor_guid_);
    equip_guid_.Swap(&other->equip_guid_);
    slot_.Swap(&other->slot_);
    inherit_.Swap(&other->inherit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ActorAddEquipRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorAddEquipRequest_descriptor_;
  metadata.reflection = ActorAddEquipRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActorDelEquipRequest::kEquipGuidFieldNumber;
#endif  // !_MSC_VER

ActorDelEquipRequest::ActorDelEquipRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActorDelEquipRequest::InitAsDefaultInstance() {
}

ActorDelEquipRequest::ActorDelEquipRequest(const ActorDelEquipRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActorDelEquipRequest::SharedCtor() {
  _cached_size_ = 0;
  equip_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActorDelEquipRequest::~ActorDelEquipRequest() {
  SharedDtor();
}

void ActorDelEquipRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActorDelEquipRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActorDelEquipRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActorDelEquipRequest_descriptor_;
}

const ActorDelEquipRequest& ActorDelEquipRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemAndEquip_2eproto();
  return *default_instance_;
}

ActorDelEquipRequest* ActorDelEquipRequest::default_instance_ = NULL;

ActorDelEquipRequest* ActorDelEquipRequest::New() const {
  return new ActorDelEquipRequest;
}

void ActorDelEquipRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ActorDelEquipRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 equip_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &equip_guid_)));
          set_has_equip_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ActorDelEquipRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 equip_guid = 1;
  if (has_equip_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->equip_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActorDelEquipRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 equip_guid = 1;
  if (has_equip_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->equip_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActorDelEquipRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 equip_guid = 1;
    if (has_equip_guid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActorDelEquipRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActorDelEquipRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActorDelEquipRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ActorDelEquipRequest::MergeFrom(const ActorDelEquipRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_guid()) {
      set_equip_guid(from.equip_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ActorDelEquipRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ActorDelEquipRequest::CopyFrom(const ActorDelEquipRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ActorDelEquipRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ActorDelEquipRequest::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void ActorDelEquipRequest::Swap(ActorDelEquipRequest* other) {
  if (other != this) {
    std::swap(equip_guid_, other->equip_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ActorDelEquipRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActorDelEquipRequest_descriptor_;
  metadata.reflection = ActorDelEquipRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Market::kGuidFieldNumber;
const int Market::kPlayerGuidFieldNumber;
const int Market::kRefreshCdFieldNumber;
const int Market::kMarketTypeFieldNumber;
const int Market::kMarketItemsFieldNumber;
const int Market::kBuysCountFieldNumber;
#endif  // !_MSC_VER

Market::Market()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Market::InitAsDefaultInstance() {
}

Market::Market(const Market& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Market::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  player_guid_ = GOOGLE_ULONGLONG(0);
  refresh_cd_ = GOOGLE_ULONGLONG(0);
  market_type_ = -1;
  market_items_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  buys_count_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Market::~Market() {
  SharedDtor();
}

void Market::SharedDtor() {
  if (market_items_ != &::google::protobuf::internal::kEmptyString) {
    delete market_items_;
  }
  if (buys_count_ != &::google::protobuf::internal::kEmptyString) {
    delete buys_count_;
  }
  if (this != default_instance_) {
  }
}

void Market::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Market::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Market_descriptor_;
}

const Market& Market::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemAndEquip_2eproto();
  return *default_instance_;
}

Market* Market::default_instance_ = NULL;

Market* Market::New() const {
  return new Market;
}

void Market::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    player_guid_ = GOOGLE_ULONGLONG(0);
    refresh_cd_ = GOOGLE_ULONGLONG(0);
    market_type_ = -1;
    if (has_market_items()) {
      if (market_items_ != &::google::protobuf::internal::kEmptyString) {
        market_items_->clear();
      }
    }
    if (has_buys_count()) {
      if (buys_count_ != &::google::protobuf::internal::kEmptyString) {
        buys_count_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool Market::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_player_guid;
        break;
      }

      // required fixed64 player_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_player_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &player_guid_)));
          set_has_player_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_refresh_cd;
        break;
      }

      // required fixed64 refresh_cd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_refresh_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &refresh_cd_)));
          set_has_refresh_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_market_type;
        break;
      }

      // required .Config.MarketType market_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_market_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Config::MarketType_IsValid(value)) {
            set_market_type(static_cast< ::Config::MarketType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_market_items;
        break;
      }

      // required string market_items = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_market_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_market_items()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->market_items().data(), this->market_items().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_buys_count;
        break;
      }

      // required string buys_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buys_count:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buys_count()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->buys_count().data(), this->buys_count().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void Market::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required fixed64 player_guid = 2;
  if (has_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->player_guid(), output);
  }

  // required fixed64 refresh_cd = 3;
  if (has_refresh_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->refresh_cd(), output);
  }

  // required .Config.MarketType market_type = 4;
  if (has_market_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->market_type(), output);
  }

  // required string market_items = 5;
  if (has_market_items()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->market_items().data(), this->market_items().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->market_items(), output);
  }

  // required string buys_count = 6;
  if (has_buys_count()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->buys_count().data(), this->buys_count().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->buys_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Market::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required fixed64 player_guid = 2;
  if (has_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->player_guid(), target);
  }

  // required fixed64 refresh_cd = 3;
  if (has_refresh_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->refresh_cd(), target);
  }

  // required .Config.MarketType market_type = 4;
  if (has_market_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->market_type(), target);
  }

  // required string market_items = 5;
  if (has_market_items()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->market_items().data(), this->market_items().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->market_items(), target);
  }

  // required string buys_count = 6;
  if (has_buys_count()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->buys_count().data(), this->buys_count().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->buys_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Market::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 player_guid = 2;
    if (has_player_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 refresh_cd = 3;
    if (has_refresh_cd()) {
      total_size += 1 + 8;
    }

    // required .Config.MarketType market_type = 4;
    if (has_market_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->market_type());
    }

    // required string market_items = 5;
    if (has_market_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->market_items());
    }

    // required string buys_count = 6;
    if (has_buys_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buys_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Market::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Market* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Market*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void Market::MergeFrom(const Market& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_player_guid()) {
      set_player_guid(from.player_guid());
    }
    if (from.has_refresh_cd()) {
      set_refresh_cd(from.refresh_cd());
    }
    if (from.has_market_type()) {
      set_market_type(from.market_type());
    }
    if (from.has_market_items()) {
      set_market_items(from.market_items());
    }
    if (from.has_buys_count()) {
      set_buys_count(from.buys_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void Market::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void Market::CopyFrom(const Market& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool Market::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void Market::SetInitialized() {
  _has_bits_[0] |= 0x0000003f;

  return;
}

void Market::Swap(Market* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(player_guid_, other->player_guid_);
    std::swap(refresh_cd_, other->refresh_cd_);
    std::swap(market_type_, other->market_type_);
    std::swap(market_items_, other->market_items_);
    std::swap(buys_count_, other->buys_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata Market::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Market_descriptor_;
  metadata.reflection = Market_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerMarketReply::kMarketTypeFieldNumber;
const int PlayerMarketReply::kMarketItemsFieldNumber;
const int PlayerMarketReply::kBuyCountsFieldNumber;
const int PlayerMarketReply::kRefreshCdFieldNumber;
#endif  // !_MSC_VER

PlayerMarketReply::PlayerMarketReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerMarketReply::InitAsDefaultInstance() {
}

PlayerMarketReply::PlayerMarketReply(const PlayerMarketReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerMarketReply::SharedCtor() {
  _cached_size_ = 0;
  market_type_ = -1;
  refresh_cd_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerMarketReply::~PlayerMarketReply() {
  SharedDtor();
}

void PlayerMarketReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerMarketReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerMarketReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerMarketReply_descriptor_;
}

const PlayerMarketReply& PlayerMarketReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemAndEquip_2eproto();
  return *default_instance_;
}

PlayerMarketReply* PlayerMarketReply::default_instance_ = NULL;

PlayerMarketReply* PlayerMarketReply::New() const {
  return new PlayerMarketReply;
}

void PlayerMarketReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    market_type_ = -1;
    refresh_cd_ = GOOGLE_ULONGLONG(0);
  }
  market_items_.Clear();
  buy_counts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerMarketReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Config.MarketType market_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Config::MarketType_IsValid(value)) {
            set_market_type(static_cast< ::Config::MarketType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_market_items;
        break;
      }

      // repeated int32 market_items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_market_items:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_market_items())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_market_items())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_market_items;
        if (input->ExpectTag(24)) goto parse_buy_counts;
        break;
      }

      // repeated int32 buy_counts = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_buy_counts())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_buy_counts())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buy_counts;
        if (input->ExpectTag(33)) goto parse_refresh_cd;
        break;
      }

      // required fixed64 refresh_cd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_refresh_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &refresh_cd_)));
          set_has_refresh_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerMarketReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Config.MarketType market_type = 1;
  if (has_market_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->market_type(), output);
  }

  // repeated int32 market_items = 2;
  for (int i = 0; i < this->market_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->market_items(i), output);
  }

  // repeated int32 buy_counts = 3;
  for (int i = 0; i < this->buy_counts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->buy_counts(i), output);
  }

  // required fixed64 refresh_cd = 4;
  if (has_refresh_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->refresh_cd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerMarketReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Config.MarketType market_type = 1;
  if (has_market_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->market_type(), target);
  }

  // repeated int32 market_items = 2;
  for (int i = 0; i < this->market_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->market_items(i), target);
  }

  // repeated int32 buy_counts = 3;
  for (int i = 0; i < this->buy_counts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->buy_counts(i), target);
  }

  // required fixed64 refresh_cd = 4;
  if (has_refresh_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->refresh_cd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerMarketReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Config.MarketType market_type = 1;
    if (has_market_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->market_type());
    }

    // required fixed64 refresh_cd = 4;
    if (has_refresh_cd()) {
      total_size += 1 + 8;
    }

  }
  // repeated int32 market_items = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->market_items_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->market_items(i));
    }
    total_size += 1 * this->market_items_size() + data_size;
  }

  // repeated int32 buy_counts = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->buy_counts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->buy_counts(i));
    }
    total_size += 1 * this->buy_counts_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerMarketReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerMarketReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerMarketReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerMarketReply::MergeFrom(const PlayerMarketReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  market_items_.MergeFrom(from.market_items_);
  buy_counts_.MergeFrom(from.buy_counts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_market_type()) {
      set_market_type(from.market_type());
    }
    if (from.has_refresh_cd()) {
      set_refresh_cd(from.refresh_cd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerMarketReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerMarketReply::CopyFrom(const PlayerMarketReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerMarketReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  return true;
}

void PlayerMarketReply::SetInitialized() {
  _has_bits_[0] |= 0x00000009;

  return;
}

void PlayerMarketReply::Swap(PlayerMarketReply* other) {
  if (other != this) {
    std::swap(market_type_, other->market_type_);
    market_items_.Swap(&other->market_items_);
    buy_counts_.Swap(&other->buy_counts_);
    std::swap(refresh_cd_, other->refresh_cd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerMarketReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerMarketReply_descriptor_;
  metadata.reflection = PlayerMarketReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdatePlayerMarketItem::kMarketTypeFieldNumber;
const int UpdatePlayerMarketItem::kMarketItemIdFieldNumber;
const int UpdatePlayerMarketItem::kBuyCountFieldNumber;
#endif  // !_MSC_VER

UpdatePlayerMarketItem::UpdatePlayerMarketItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdatePlayerMarketItem::InitAsDefaultInstance() {
}

UpdatePlayerMarketItem::UpdatePlayerMarketItem(const UpdatePlayerMarketItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdatePlayerMarketItem::SharedCtor() {
  _cached_size_ = 0;
  market_type_ = -1;
  market_item_id_ = 0;
  buy_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdatePlayerMarketItem::~UpdatePlayerMarketItem() {
  SharedDtor();
}

void UpdatePlayerMarketItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdatePlayerMarketItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdatePlayerMarketItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdatePlayerMarketItem_descriptor_;
}

const UpdatePlayerMarketItem& UpdatePlayerMarketItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemAndEquip_2eproto();
  return *default_instance_;
}

UpdatePlayerMarketItem* UpdatePlayerMarketItem::default_instance_ = NULL;

UpdatePlayerMarketItem* UpdatePlayerMarketItem::New() const {
  return new UpdatePlayerMarketItem;
}

void UpdatePlayerMarketItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    market_type_ = -1;
    market_item_id_ = 0;
    buy_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool UpdatePlayerMarketItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Config.MarketType market_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Config::MarketType_IsValid(value)) {
            set_market_type(static_cast< ::Config::MarketType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_market_item_id;
        break;
      }

      // required int32 market_item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_market_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &market_item_id_)));
          set_has_market_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buy_count;
        break;
      }

      // required int32 buy_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_count_)));
          set_has_buy_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void UpdatePlayerMarketItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Config.MarketType market_type = 1;
  if (has_market_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->market_type(), output);
  }

  // required int32 market_item_id = 2;
  if (has_market_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->market_item_id(), output);
  }

  // required int32 buy_count = 3;
  if (has_buy_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->buy_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdatePlayerMarketItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Config.MarketType market_type = 1;
  if (has_market_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->market_type(), target);
  }

  // required int32 market_item_id = 2;
  if (has_market_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->market_item_id(), target);
  }

  // required int32 buy_count = 3;
  if (has_buy_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->buy_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdatePlayerMarketItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Config.MarketType market_type = 1;
    if (has_market_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->market_type());
    }

    // required int32 market_item_id = 2;
    if (has_market_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->market_item_id());
    }

    // required int32 buy_count = 3;
    if (has_buy_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdatePlayerMarketItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdatePlayerMarketItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdatePlayerMarketItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void UpdatePlayerMarketItem::MergeFrom(const UpdatePlayerMarketItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_market_type()) {
      set_market_type(from.market_type());
    }
    if (from.has_market_item_id()) {
      set_market_item_id(from.market_item_id());
    }
    if (from.has_buy_count()) {
      set_buy_count(from.buy_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void UpdatePlayerMarketItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void UpdatePlayerMarketItem::CopyFrom(const UpdatePlayerMarketItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool UpdatePlayerMarketItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UpdatePlayerMarketItem::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  return;
}

void UpdatePlayerMarketItem::Swap(UpdatePlayerMarketItem* other) {
  if (other != this) {
    std::swap(market_type_, other->market_type_);
    std::swap(market_item_id_, other->market_item_id_);
    std::swap(buy_count_, other->buy_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata UpdatePlayerMarketItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdatePlayerMarketItem_descriptor_;
  metadata.reflection = UpdatePlayerMarketItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateArrangeInfoReply::kItemsFieldNumber;
const int UpdateArrangeInfoReply::kPlayersFieldNumber;
const int UpdateArrangeInfoReply::kSecondFieldNumber;
const int UpdateArrangeInfoReply::kAtTypeFieldNumber;
#endif  // !_MSC_VER

UpdateArrangeInfoReply::UpdateArrangeInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateArrangeInfoReply::InitAsDefaultInstance() {
}

UpdateArrangeInfoReply::UpdateArrangeInfoReply(const UpdateArrangeInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateArrangeInfoReply::SharedCtor() {
  _cached_size_ = 0;
  second_ = 0;
  at_type_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateArrangeInfoReply::~UpdateArrangeInfoReply() {
  SharedDtor();
}

void UpdateArrangeInfoReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateArrangeInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateArrangeInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateArrangeInfoReply_descriptor_;
}

const UpdateArrangeInfoReply& UpdateArrangeInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemAndEquip_2eproto();
  return *default_instance_;
}

UpdateArrangeInfoReply* UpdateArrangeInfoReply::default_instance_ = NULL;

UpdateArrangeInfoReply* UpdateArrangeInfoReply::New() const {
  return new UpdateArrangeInfoReply;
}

void UpdateArrangeInfoReply::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    second_ = 0;
    at_type_ = -1;
  }
  items_.Clear();
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool UpdateArrangeInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_items:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9, input, this->mutable_items())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_items())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_items;
        if (input->ExpectTag(17)) goto parse_players;
        break;
      }

      // repeated fixed64 players = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17, input, this->mutable_players())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_players())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_players;
        if (input->ExpectTag(24)) goto parse_second;
        break;
      }

      // required int32 second = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &second_)));
          set_has_second();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_at_type;
        break;
      }

      // required .Packet.ArrangeType at_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_at_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::ArrangeType_IsValid(value)) {
            set_at_type(static_cast< ::Packet::ArrangeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void UpdateArrangeInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated fixed64 items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->items(i), output);
  }

  // repeated fixed64 players = 2;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->players(i), output);
  }

  // required int32 second = 3;
  if (has_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->second(), output);
  }

  // required .Packet.ArrangeType at_type = 4;
  if (has_at_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->at_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateArrangeInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated fixed64 items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(1, this->items(i), target);
  }

  // repeated fixed64 players = 2;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(2, this->players(i), target);
  }

  // required int32 second = 3;
  if (has_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->second(), target);
  }

  // required .Packet.ArrangeType at_type = 4;
  if (has_at_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->at_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateArrangeInfoReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required int32 second = 3;
    if (has_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->second());
    }

    // required .Packet.ArrangeType at_type = 4;
    if (has_at_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->at_type());
    }

  }
  // repeated fixed64 items = 1;
  {
    int data_size = 0;
    data_size = 8 * this->items_size();
    total_size += 1 * this->items_size() + data_size;
  }

  // repeated fixed64 players = 2;
  {
    int data_size = 0;
    data_size = 8 * this->players_size();
    total_size += 1 * this->players_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateArrangeInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateArrangeInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateArrangeInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void UpdateArrangeInfoReply::MergeFrom(const UpdateArrangeInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_second()) {
      set_second(from.second());
    }
    if (from.has_at_type()) {
      set_at_type(from.at_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void UpdateArrangeInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void UpdateArrangeInfoReply::CopyFrom(const UpdateArrangeInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool UpdateArrangeInfoReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;

  return true;
}

void UpdateArrangeInfoReply::SetInitialized() {
  _has_bits_[0] |= 0x0000000c;

  return;
}

void UpdateArrangeInfoReply::Swap(UpdateArrangeInfoReply* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    players_.Swap(&other->players_);
    std::swap(second_, other->second_);
    std::swap(at_type_, other->at_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata UpdateArrangeInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateArrangeInfoReply_descriptor_;
  metadata.reflection = UpdateArrangeInfoReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveItemRequest::kSrcContainerFieldNumber;
const int MoveItemRequest::kDesContainerFieldNumber;
const int MoveItemRequest::kItemGuidFieldNumber;
#endif  // !_MSC_VER

MoveItemRequest::MoveItemRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveItemRequest::InitAsDefaultInstance() {
}

MoveItemRequest::MoveItemRequest(const MoveItemRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveItemRequest::SharedCtor() {
  _cached_size_ = 0;
  src_container_ = -1;
  des_container_ = -1;
  item_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveItemRequest::~MoveItemRequest() {
  SharedDtor();
}

void MoveItemRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoveItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveItemRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveItemRequest_descriptor_;
}

const MoveItemRequest& MoveItemRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemAndEquip_2eproto();
  return *default_instance_;
}

MoveItemRequest* MoveItemRequest::default_instance_ = NULL;

MoveItemRequest* MoveItemRequest::New() const {
  return new MoveItemRequest;
}

void MoveItemRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_container_ = -1;
    des_container_ = -1;
    item_guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool MoveItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.ContainerType src_container = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::ContainerType_IsValid(value)) {
            set_src_container(static_cast< ::Packet::ContainerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_des_container;
        break;
      }

      // required .Packet.ContainerType des_container = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_des_container:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::ContainerType_IsValid(value)) {
            set_des_container(static_cast< ::Packet::ContainerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_item_guid;
        break;
      }

      // required fixed64 item_guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_item_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &item_guid_)));
          set_has_item_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void MoveItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.ContainerType src_container = 1;
  if (has_src_container()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->src_container(), output);
  }

  // required .Packet.ContainerType des_container = 2;
  if (has_des_container()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->des_container(), output);
  }

  // required fixed64 item_guid = 3;
  if (has_item_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->item_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveItemRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.ContainerType src_container = 1;
  if (has_src_container()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->src_container(), target);
  }

  // required .Packet.ContainerType des_container = 2;
  if (has_des_container()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->des_container(), target);
  }

  // required fixed64 item_guid = 3;
  if (has_item_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->item_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveItemRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.ContainerType src_container = 1;
    if (has_src_container()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->src_container());
    }

    // required .Packet.ContainerType des_container = 2;
    if (has_des_container()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->des_container());
    }

    // required fixed64 item_guid = 3;
    if (has_item_guid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveItemRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveItemRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveItemRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void MoveItemRequest::MergeFrom(const MoveItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_container()) {
      set_src_container(from.src_container());
    }
    if (from.has_des_container()) {
      set_des_container(from.des_container());
    }
    if (from.has_item_guid()) {
      set_item_guid(from.item_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void MoveItemRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void MoveItemRequest::CopyFrom(const MoveItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool MoveItemRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MoveItemRequest::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  return;
}

void MoveItemRequest::Swap(MoveItemRequest* other) {
  if (other != this) {
    std::swap(src_container_, other->src_container_);
    std::swap(des_container_, other->des_container_);
    std::swap(item_guid_, other->item_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata MoveItemRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveItemRequest_descriptor_;
  metadata.reflection = MoveItemRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExtendContainerRequest::kSrcContainerFieldNumber;
const int ExtendContainerRequest::kCountFieldNumber;
#endif  // !_MSC_VER

ExtendContainerRequest::ExtendContainerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExtendContainerRequest::InitAsDefaultInstance() {
}

ExtendContainerRequest::ExtendContainerRequest(const ExtendContainerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExtendContainerRequest::SharedCtor() {
  _cached_size_ = 0;
  src_container_ = -1;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExtendContainerRequest::~ExtendContainerRequest() {
  SharedDtor();
}

void ExtendContainerRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExtendContainerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtendContainerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtendContainerRequest_descriptor_;
}

const ExtendContainerRequest& ExtendContainerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemAndEquip_2eproto();
  return *default_instance_;
}

ExtendContainerRequest* ExtendContainerRequest::default_instance_ = NULL;

ExtendContainerRequest* ExtendContainerRequest::New() const {
  return new ExtendContainerRequest;
}

void ExtendContainerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_container_ = -1;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ExtendContainerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.ContainerType src_container = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::ContainerType_IsValid(value)) {
            set_src_container(static_cast< ::Packet::ContainerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ExtendContainerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.ContainerType src_container = 1;
  if (has_src_container()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->src_container(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExtendContainerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.ContainerType src_container = 1;
  if (has_src_container()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->src_container(), target);
  }

  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExtendContainerRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.ContainerType src_container = 1;
    if (has_src_container()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->src_container());
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtendContainerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExtendContainerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExtendContainerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ExtendContainerRequest::MergeFrom(const ExtendContainerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_container()) {
      set_src_container(from.src_container());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ExtendContainerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ExtendContainerRequest::CopyFrom(const ExtendContainerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ExtendContainerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ExtendContainerRequest::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void ExtendContainerRequest::Swap(ExtendContainerRequest* other) {
  if (other != this) {
    std::swap(src_container_, other->src_container_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ExtendContainerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExtendContainerRequest_descriptor_;
  metadata.reflection = ExtendContainerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyItemItem::kConfigIdFieldNumber;
const int NotifyItemItem::kAmountFieldNumber;
const int NotifyItemItem::kUdFieldNumber;
#endif  // !_MSC_VER

NotifyItemItem::NotifyItemItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyItemItem::InitAsDefaultInstance() {
}

NotifyItemItem::NotifyItemItem(const NotifyItemItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyItemItem::SharedCtor() {
  _cached_size_ = 0;
  config_id_ = 0;
  amount_ = 0;
  ud_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyItemItem::~NotifyItemItem() {
  SharedDtor();
}

void NotifyItemItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyItemItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyItemItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyItemItem_descriptor_;
}

const NotifyItemItem& NotifyItemItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemAndEquip_2eproto();
  return *default_instance_;
}

NotifyItemItem* NotifyItemItem::default_instance_ = NULL;

NotifyItemItem* NotifyItemItem::New() const {
  return new NotifyItemItem;
}

void NotifyItemItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    config_id_ = 0;
    amount_ = 0;
    ud_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool NotifyItemItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 config_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &config_id_)));
          set_has_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_amount;
        break;
      }

      // required int32 amount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ud;
        break;
      }

      // required int32 ud = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ud:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ud_)));
          set_has_ud();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void NotifyItemItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 config_id = 1;
  if (has_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->config_id(), output);
  }

  // required int32 amount = 2;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->amount(), output);
  }

  // required int32 ud = 3;
  if (has_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ud(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyItemItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 config_id = 1;
  if (has_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->config_id(), target);
  }

  // required int32 amount = 2;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->amount(), target);
  }

  // required int32 ud = 3;
  if (has_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ud(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyItemItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 config_id = 1;
    if (has_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->config_id());
    }

    // required int32 amount = 2;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }

    // required int32 ud = 3;
    if (has_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ud());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyItemItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyItemItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyItemItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void NotifyItemItem::MergeFrom(const NotifyItemItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_config_id()) {
      set_config_id(from.config_id());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_ud()) {
      set_ud(from.ud());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void NotifyItemItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void NotifyItemItem::CopyFrom(const NotifyItemItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool NotifyItemItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NotifyItemItem::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  return;
}

void NotifyItemItem::Swap(NotifyItemItem* other) {
  if (other != this) {
    std::swap(config_id_, other->config_id_);
    std::swap(amount_, other->amount_);
    std::swap(ud_, other->ud_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata NotifyItemItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyItemItem_descriptor_;
  metadata.reflection = NotifyItemItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatisticsResult::kItemFieldNumber;
const int StatisticsResult::kStatisticsFieldNumber;
#endif  // !_MSC_VER

StatisticsResult::StatisticsResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatisticsResult::InitAsDefaultInstance() {
}

StatisticsResult::StatisticsResult(const StatisticsResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatisticsResult::SharedCtor() {
  _cached_size_ = 0;
  statistics_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatisticsResult::~StatisticsResult() {
  SharedDtor();
}

void StatisticsResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StatisticsResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatisticsResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatisticsResult_descriptor_;
}

const StatisticsResult& StatisticsResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemAndEquip_2eproto();
  return *default_instance_;
}

StatisticsResult* StatisticsResult::default_instance_ = NULL;

StatisticsResult* StatisticsResult::New() const {
  return new StatisticsResult;
}

void StatisticsResult::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    statistics_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool StatisticsResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.NotifyItemItem item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectTag(16)) goto parse_statistics;
        break;
      }

      // required int32 statistics = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_statistics:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statistics_)));
          set_has_statistics();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void StatisticsResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.NotifyItemItem item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(i), output);
  }

  // required int32 statistics = 2;
  if (has_statistics()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->statistics(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatisticsResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.NotifyItemItem item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(i), target);
  }

  // required int32 statistics = 2;
  if (has_statistics()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->statistics(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatisticsResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 statistics = 2;
    if (has_statistics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statistics());
    }

  }
  // repeated .Packet.NotifyItemItem item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatisticsResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatisticsResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatisticsResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void StatisticsResult::MergeFrom(const StatisticsResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_statistics()) {
      set_statistics(from.statistics());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void StatisticsResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void StatisticsResult::CopyFrom(const StatisticsResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool StatisticsResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void StatisticsResult::SetInitialized() {
  _has_bits_[0] |= 0x00000002;

  for (int i = 0; i < item_size(); i++) {
    this->mutable_item(i)->SetInitialized();
  }
  return;
}

void StatisticsResult::Swap(StatisticsResult* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(statistics_, other->statistics_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata StatisticsResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatisticsResult_descriptor_;
  metadata.reflection = StatisticsResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyItemList::kItemFieldNumber;
const int NotifyItemList::kAddTypeFieldNumber;
const int NotifyItemList::kSourceIdFieldNumber;
#endif  // !_MSC_VER

NotifyItemList::NotifyItemList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyItemList::InitAsDefaultInstance() {
}

NotifyItemList::NotifyItemList(const NotifyItemList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyItemList::SharedCtor() {
  _cached_size_ = 0;
  add_type_ = 1;
  source_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyItemList::~NotifyItemList() {
  SharedDtor();
}

void NotifyItemList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyItemList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyItemList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyItemList_descriptor_;
}

const NotifyItemList& NotifyItemList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemAndEquip_2eproto();
  return *default_instance_;
}

NotifyItemList* NotifyItemList::default_instance_ = NULL;

NotifyItemList* NotifyItemList::New() const {
  return new NotifyItemList;
}

void NotifyItemList::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    add_type_ = 1;
    source_id_ = GOOGLE_ULONGLONG(0);
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool NotifyItemList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.NotifyItemItem item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectTag(16)) goto parse_add_type;
        break;
      }

      // required .Config.ItemAddLogType add_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Config::ItemAddLogType_IsValid(value)) {
            set_add_type(static_cast< ::Config::ItemAddLogType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_source_id;
        break;
      }

      // required fixed64 source_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_source_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &source_id_)));
          set_has_source_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void NotifyItemList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.NotifyItemItem item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(i), output);
  }

  // required .Config.ItemAddLogType add_type = 2;
  if (has_add_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->add_type(), output);
  }

  // required fixed64 source_id = 3;
  if (has_source_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->source_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyItemList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.NotifyItemItem item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(i), target);
  }

  // required .Config.ItemAddLogType add_type = 2;
  if (has_add_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->add_type(), target);
  }

  // required fixed64 source_id = 3;
  if (has_source_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->source_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyItemList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .Config.ItemAddLogType add_type = 2;
    if (has_add_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->add_type());
    }

    // required fixed64 source_id = 3;
    if (has_source_id()) {
      total_size += 1 + 8;
    }

  }
  // repeated .Packet.NotifyItemItem item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyItemList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyItemList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyItemList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void NotifyItemList::MergeFrom(const NotifyItemList& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_add_type()) {
      set_add_type(from.add_type());
    }
    if (from.has_source_id()) {
      set_source_id(from.source_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void NotifyItemList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void NotifyItemList::CopyFrom(const NotifyItemList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool NotifyItemList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void NotifyItemList::SetInitialized() {
  _has_bits_[0] |= 0x00000006;

  for (int i = 0; i < item_size(); i++) {
    this->mutable_item(i)->SetInitialized();
  }
  return;
}

void NotifyItemList::Swap(NotifyItemList* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(add_type_, other->add_type_);
    std::swap(source_id_, other->source_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata NotifyItemList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyItemList_descriptor_;
  metadata.reflection = NotifyItemList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

// @@protoc_insertion_point(global_scope)
