// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BaseConfig.proto

#ifndef PROTOBUF_BaseConfig_2eproto__INCLUDED
#define PROTOBUF_BaseConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BaseConfig_2eproto();
void protobuf_AssignDesc_BaseConfig_2eproto();
void protobuf_ShutdownFile_BaseConfig_2eproto();

class ConstConfig;
class FunctionConfig;

// ===================================================================

class ConstConfig : public ::google::protobuf::Message {
 public:
  ConstConfig();
  virtual ~ConstConfig();

  ConstConfig(const ConstConfig& from);

  inline ConstConfig& operator=(const ConstConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConstConfig& default_instance();

  void Swap(ConstConfig* other);

  // implements Message ----------------------------------------------

  ConstConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConstConfig& from);
  void MergeFrom(const ConstConfig& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required int32 value1 = 2;
  inline bool has_value1() const;
  inline void clear_value1();
  static const int kValue1FieldNumber = 2;
  inline ::google::protobuf::int32 value1() const;
  inline void set_value1(::google::protobuf::int32 value);

  // required int32 value2 = 3;
  inline bool has_value2() const;
  inline void clear_value2();
  static const int kValue2FieldNumber = 3;
  inline ::google::protobuf::int32 value2() const;
  inline void set_value2(::google::protobuf::int32 value);

  // required int32 value3 = 4;
  inline bool has_value3() const;
  inline void clear_value3();
  static const int kValue3FieldNumber = 4;
  inline ::google::protobuf::int32 value3() const;
  inline void set_value3(::google::protobuf::int32 value);

  // required int32 value4 = 5;
  inline bool has_value4() const;
  inline void clear_value4();
  static const int kValue4FieldNumber = 5;
  inline ::google::protobuf::int32 value4() const;
  inline void set_value4(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Config.ConstConfig)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value1();
  inline void clear_has_value1();
  inline void set_has_value2();
  inline void clear_has_value2();
  inline void set_has_value3();
  inline void clear_has_value3();
  inline void set_has_value4();
  inline void clear_has_value4();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::google::protobuf::int32 value1_;
  ::google::protobuf::int32 value2_;
  ::google::protobuf::int32 value3_;
  ::google::protobuf::int32 value4_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_BaseConfig_2eproto();
  friend void protobuf_AssignDesc_BaseConfig_2eproto();
  friend void protobuf_ShutdownFile_BaseConfig_2eproto();

  void InitAsDefaultInstance();
  static ConstConfig* default_instance_;
};
// -------------------------------------------------------------------

class FunctionConfig : public ::google::protobuf::Message {
 public:
  FunctionConfig();
  virtual ~FunctionConfig();

  FunctionConfig(const FunctionConfig& from);

  inline FunctionConfig& operator=(const FunctionConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FunctionConfig& default_instance();

  void Swap(FunctionConfig* other);

  // implements Message ----------------------------------------------

  FunctionConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FunctionConfig& from);
  void MergeFrom(const FunctionConfig& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 unlock = 2;
  inline bool has_unlock() const;
  inline void clear_unlock();
  static const int kUnlockFieldNumber = 2;
  inline ::google::protobuf::int32 unlock() const;
  inline void set_unlock(::google::protobuf::int32 value);

  // required int32 param = 3;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 3;
  inline ::google::protobuf::int32 param() const;
  inline void set_param(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Config.FunctionConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_unlock();
  inline void clear_has_unlock();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 unlock_;
  ::google::protobuf::int32 param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_BaseConfig_2eproto();
  friend void protobuf_AssignDesc_BaseConfig_2eproto();
  friend void protobuf_ShutdownFile_BaseConfig_2eproto();

  void InitAsDefaultInstance();
  static FunctionConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// ConstConfig

// required string key = 1;
inline bool ConstConfig::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConstConfig::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConstConfig::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConstConfig::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
  SetDirty();
}
inline const ::std::string& ConstConfig::key() const {
  return *key_;
}
inline void ConstConfig::set_key(const ::std::string& value) {
  SetDirty();
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void ConstConfig::set_key(const char* value) {
  SetDirty();
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void ConstConfig::set_key(const char* value, size_t size) {
  SetDirty();
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConstConfig::mutable_key() {
  SetDirty();
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* ConstConfig::release_key() {
  SetDirty();
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ConstConfig::set_allocated_key(::std::string* key) {
  SetDirty();
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 value1 = 2;
inline bool ConstConfig::has_value1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConstConfig::set_has_value1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConstConfig::clear_has_value1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConstConfig::clear_value1() {
  value1_ = 0;
  clear_has_value1();
  SetDirty();
}
inline ::google::protobuf::int32 ConstConfig::value1() const {
  return value1_;
}
inline void ConstConfig::set_value1(::google::protobuf::int32 value) {
  SetDirty();
  set_has_value1();
  value1_ = value;
}

// required int32 value2 = 3;
inline bool ConstConfig::has_value2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConstConfig::set_has_value2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConstConfig::clear_has_value2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConstConfig::clear_value2() {
  value2_ = 0;
  clear_has_value2();
  SetDirty();
}
inline ::google::protobuf::int32 ConstConfig::value2() const {
  return value2_;
}
inline void ConstConfig::set_value2(::google::protobuf::int32 value) {
  SetDirty();
  set_has_value2();
  value2_ = value;
}

// required int32 value3 = 4;
inline bool ConstConfig::has_value3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConstConfig::set_has_value3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConstConfig::clear_has_value3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConstConfig::clear_value3() {
  value3_ = 0;
  clear_has_value3();
  SetDirty();
}
inline ::google::protobuf::int32 ConstConfig::value3() const {
  return value3_;
}
inline void ConstConfig::set_value3(::google::protobuf::int32 value) {
  SetDirty();
  set_has_value3();
  value3_ = value;
}

// required int32 value4 = 5;
inline bool ConstConfig::has_value4() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConstConfig::set_has_value4() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConstConfig::clear_has_value4() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConstConfig::clear_value4() {
  value4_ = 0;
  clear_has_value4();
  SetDirty();
}
inline ::google::protobuf::int32 ConstConfig::value4() const {
  return value4_;
}
inline void ConstConfig::set_value4(::google::protobuf::int32 value) {
  SetDirty();
  set_has_value4();
  value4_ = value;
}

// -------------------------------------------------------------------

// FunctionConfig

// required string name = 1;
inline bool FunctionConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FunctionConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FunctionConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FunctionConfig::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
  SetDirty();
}
inline const ::std::string& FunctionConfig::name() const {
  return *name_;
}
inline void FunctionConfig::set_name(const ::std::string& value) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FunctionConfig::set_name(const char* value) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FunctionConfig::set_name(const char* value, size_t size) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FunctionConfig::mutable_name() {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FunctionConfig::release_name() {
  SetDirty();
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FunctionConfig::set_allocated_name(::std::string* name) {
  SetDirty();
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 unlock = 2;
inline bool FunctionConfig::has_unlock() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FunctionConfig::set_has_unlock() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FunctionConfig::clear_has_unlock() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FunctionConfig::clear_unlock() {
  unlock_ = 0;
  clear_has_unlock();
  SetDirty();
}
inline ::google::protobuf::int32 FunctionConfig::unlock() const {
  return unlock_;
}
inline void FunctionConfig::set_unlock(::google::protobuf::int32 value) {
  SetDirty();
  set_has_unlock();
  unlock_ = value;
}

// required int32 param = 3;
inline bool FunctionConfig::has_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FunctionConfig::set_has_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FunctionConfig::clear_has_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FunctionConfig::clear_param() {
  param_ = 0;
  clear_has_param();
  SetDirty();
}
inline ::google::protobuf::int32 FunctionConfig::param() const {
  return param_;
}
inline void FunctionConfig::set_param(::google::protobuf::int32 value) {
  SetDirty();
  set_has_param();
  param_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BaseConfig_2eproto__INCLUDED
