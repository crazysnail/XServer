// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FriendMail.proto

#ifndef PROTOBUF_FriendMail_2eproto__INCLUDED
#define PROTOBUF_FriendMail_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "AllPacketEnum.pb.h"
#include "PlayerBasicInfo.pb.h"
#include "ItemAndEquip.pb.h"
#include "ProtoBufOption.pb.h"
// @@protoc_insertion_point(includes)

namespace Packet {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_FriendMail_2eproto();
void protobuf_AssignDesc_FriendMail_2eproto();
void protobuf_ShutdownFile_FriendMail_2eproto();

class FriendInfotReq;
class MessageListPlayerInfo;
class FriendPlayer;
class ZoneInfo;
class MessageBoard;
class MessagePlayerInfo;
class ClientFriendMessageNotify;
class AddClientFriendMessageNotify;
class DelClientFriendMessageNotifyRR;
class ItemCount;
class MessageInfo;
class FriendMessageInfo;
class FriendInfo;
class FriendInfotReply;
class RecommendReq;
class FriendListReq;
class FindPlayerInfo;
class FindFriendByNameReq;
class FindFriendByGuidReq;
class FindFriendReply;
class FriendListUpdate;
class RecommendsUpdate;
class MessagesUpdate;
class AddFriendMessagesReply;
class FriendMessageReq;
class SetZoneSignatureReq;
class SignatureUpdate;
class AddFriendReq;
class DelFriendReq;
class AskTeamReq;
class AskGuildReq;
class SendGiftReq;
class ViewZoneReq;
class ZoneBaseInfo;
class ViewZoneReply;
class DelMessageReq;
class NewMessageNotify;
class SignConfig;
class UpdateSign;
class GetMessageBoard;
class AddMessageBoard;

// ===================================================================

class FriendInfotReq : public ::google::protobuf::Message {
 public:
  FriendInfotReq();
  virtual ~FriendInfotReq();

  FriendInfotReq(const FriendInfotReq& from);

  inline FriendInfotReq& operator=(const FriendInfotReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendInfotReq& default_instance();

  void Swap(FriendInfotReq* other);

  // implements Message ----------------------------------------------

  FriendInfotReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendInfotReq& from);
  void MergeFrom(const FriendInfotReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Packet.FriendInfotReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static FriendInfotReq* default_instance_;
};
// -------------------------------------------------------------------

class MessageListPlayerInfo : public ::google::protobuf::Message {
 public:
  MessageListPlayerInfo();
  virtual ~MessageListPlayerInfo();

  MessageListPlayerInfo(const MessageListPlayerInfo& from);

  inline MessageListPlayerInfo& operator=(const MessageListPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageListPlayerInfo& default_instance();

  void Swap(MessageListPlayerInfo* other);

  // implements Message ----------------------------------------------

  MessageListPlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageListPlayerInfo& from);
  void MergeFrom(const MessageListPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 player_guid = 1;
  inline bool has_player_guid() const;
  inline void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 player_guid() const;
  inline void set_player_guid(::google::protobuf::uint64 value);

  // required fixed64 msg_player_guid = 2;
  inline bool has_msg_player_guid() const;
  inline void clear_msg_player_guid();
  static const int kMsgPlayerGuidFieldNumber = 2;
  inline ::google::protobuf::uint64 msg_player_guid() const;
  inline void set_msg_player_guid(::google::protobuf::uint64 value);

  // required string msg_player_name = 3;
  inline bool has_msg_player_name() const;
  inline void clear_msg_player_name();
  static const int kMsgPlayerNameFieldNumber = 3;
  inline const ::std::string& msg_player_name() const;
  inline void set_msg_player_name(const ::std::string& value);
  inline void set_msg_player_name(const char* value);
  inline void set_msg_player_name(const char* value, size_t size);
  inline ::std::string* mutable_msg_player_name();
  inline ::std::string* release_msg_player_name();
  inline void set_allocated_msg_player_name(::std::string* msg_player_name);

  // required int32 msg_player_hair = 4;
  inline bool has_msg_player_hair() const;
  inline void clear_msg_player_hair();
  static const int kMsgPlayerHairFieldNumber = 4;
  inline ::google::protobuf::int32 msg_player_hair() const;
  inline void set_msg_player_hair(::google::protobuf::int32 value);

  // required int32 msg_player_level = 5;
  inline bool has_msg_player_level() const;
  inline void clear_msg_player_level();
  static const int kMsgPlayerLevelFieldNumber = 5;
  inline ::google::protobuf::int32 msg_player_level() const;
  inline void set_msg_player_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.MessageListPlayerInfo)
 private:
  inline void set_has_player_guid();
  inline void clear_has_player_guid();
  inline void set_has_msg_player_guid();
  inline void clear_has_msg_player_guid();
  inline void set_has_msg_player_name();
  inline void clear_has_msg_player_name();
  inline void set_has_msg_player_hair();
  inline void clear_has_msg_player_hair();
  inline void set_has_msg_player_level();
  inline void clear_has_msg_player_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 player_guid_;
  ::google::protobuf::uint64 msg_player_guid_;
  ::std::string* msg_player_name_;
  ::google::protobuf::int32 msg_player_hair_;
  ::google::protobuf::int32 msg_player_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static MessageListPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class FriendPlayer : public ::google::protobuf::Message {
 public:
  FriendPlayer();
  virtual ~FriendPlayer();

  FriendPlayer(const FriendPlayer& from);

  inline FriendPlayer& operator=(const FriendPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendPlayer& default_instance();

  void Swap(FriendPlayer* other);

  // implements Message ----------------------------------------------

  FriendPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendPlayer& from);
  void MergeFrom(const FriendPlayer& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // required fixed64 player_guid = 2;
  inline bool has_player_guid() const;
  inline void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 2;
  inline ::google::protobuf::uint64 player_guid() const;
  inline void set_player_guid(::google::protobuf::uint64 value);

  // required fixed64 friend_guid = 3;
  inline bool has_friend_guid() const;
  inline void clear_friend_guid();
  static const int kFriendGuidFieldNumber = 3;
  inline ::google::protobuf::uint64 friend_guid() const;
  inline void set_friend_guid(::google::protobuf::uint64 value);

  // required int32 friendvalue = 4;
  inline bool has_friendvalue() const;
  inline void clear_friendvalue();
  static const int kFriendvalueFieldNumber = 4;
  inline ::google::protobuf::int32 friendvalue() const;
  inline void set_friendvalue(::google::protobuf::int32 value);

  // required int32 init_actor_id = 5;
  inline bool has_init_actor_id() const;
  inline void clear_init_actor_id();
  static const int kInitActorIdFieldNumber = 5;
  inline ::google::protobuf::int32 init_actor_id() const;
  inline void set_init_actor_id(::google::protobuf::int32 value);

  // required int32 hair = 6;
  inline bool has_hair() const;
  inline void clear_hair();
  static const int kHairFieldNumber = 6;
  inline ::google::protobuf::int32 hair() const;
  inline void set_hair(::google::protobuf::int32 value);

  // required string name = 7;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 7;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 level = 8;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 8;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.FriendPlayer)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_player_guid();
  inline void clear_has_player_guid();
  inline void set_has_friend_guid();
  inline void clear_has_friend_guid();
  inline void set_has_friendvalue();
  inline void clear_has_friendvalue();
  inline void set_has_init_actor_id();
  inline void clear_has_init_actor_id();
  inline void set_has_hair();
  inline void clear_has_hair();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::google::protobuf::uint64 player_guid_;
  ::google::protobuf::uint64 friend_guid_;
  ::google::protobuf::int32 friendvalue_;
  ::google::protobuf::int32 init_actor_id_;
  ::std::string* name_;
  ::google::protobuf::int32 hair_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static FriendPlayer* default_instance_;
};
// -------------------------------------------------------------------

class ZoneInfo : public ::google::protobuf::Message {
 public:
  ZoneInfo();
  virtual ~ZoneInfo();

  ZoneInfo(const ZoneInfo& from);

  inline ZoneInfo& operator=(const ZoneInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZoneInfo& default_instance();

  void Swap(ZoneInfo* other);

  // implements Message ----------------------------------------------

  ZoneInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZoneInfo& from);
  void MergeFrom(const ZoneInfo& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // required string signature = 2;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 2;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const char* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  inline void set_allocated_signature(::std::string* signature);

  // repeated int32 signid = 3;
  inline int signid_size() const;
  inline void clear_signid();
  static const int kSignidFieldNumber = 3;
  inline ::google::protobuf::int32 signid(int index) const;
  inline void set_signid(int index, ::google::protobuf::int32 value);
  inline void add_signid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      signid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_signid();

  // required int32 popularity = 4;
  inline bool has_popularity() const;
  inline void clear_popularity();
  static const int kPopularityFieldNumber = 4;
  inline ::google::protobuf::int32 popularity() const;
  inline void set_popularity(::google::protobuf::int32 value);

  // required int32 celldata = 5;
  inline bool has_celldata() const;
  inline void clear_celldata();
  static const int kCelldataFieldNumber = 5;
  inline ::google::protobuf::int32 celldata() const;
  inline void set_celldata(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.ZoneInfo)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_signature();
  inline void clear_has_signature();
  inline void set_has_popularity();
  inline void clear_has_popularity();
  inline void set_has_celldata();
  inline void clear_has_celldata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::std::string* signature_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > signid_;
  ::google::protobuf::int32 popularity_;
  ::google::protobuf::int32 celldata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static ZoneInfo* default_instance_;
};
// -------------------------------------------------------------------

class MessageBoard : public ::google::protobuf::Message {
 public:
  MessageBoard();
  virtual ~MessageBoard();

  MessageBoard(const MessageBoard& from);

  inline MessageBoard& operator=(const MessageBoard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageBoard& default_instance();

  void Swap(MessageBoard* other);

  // implements Message ----------------------------------------------

  MessageBoard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageBoard& from);
  void MergeFrom(const MessageBoard& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // required fixed64 owerid = 2;
  inline bool has_owerid() const;
  inline void clear_owerid();
  static const int kOweridFieldNumber = 2;
  inline ::google::protobuf::uint64 owerid() const;
  inline void set_owerid(::google::protobuf::uint64 value);

  // required fixed64 playerid = 3;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 3;
  inline ::google::protobuf::uint64 playerid() const;
  inline void set_playerid(::google::protobuf::uint64 value);

  // required string playername = 4;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayernameFieldNumber = 4;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // required int32 playerhair = 5;
  inline bool has_playerhair() const;
  inline void clear_playerhair();
  static const int kPlayerhairFieldNumber = 5;
  inline ::google::protobuf::int32 playerhair() const;
  inline void set_playerhair(::google::protobuf::int32 value);

  // required int32 playerlevel = 6;
  inline bool has_playerlevel() const;
  inline void clear_playerlevel();
  static const int kPlayerlevelFieldNumber = 6;
  inline ::google::protobuf::int32 playerlevel() const;
  inline void set_playerlevel(::google::protobuf::int32 value);

  // required string replyplayer = 7;
  inline bool has_replyplayer() const;
  inline void clear_replyplayer();
  static const int kReplyplayerFieldNumber = 7;
  inline const ::std::string& replyplayer() const;
  inline void set_replyplayer(const ::std::string& value);
  inline void set_replyplayer(const char* value);
  inline void set_replyplayer(const char* value, size_t size);
  inline ::std::string* mutable_replyplayer();
  inline ::std::string* release_replyplayer();
  inline void set_allocated_replyplayer(::std::string* replyplayer);

  // required string message = 8;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 8;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // required fixed32 date = 9;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 9;
  inline ::google::protobuf::uint32 date() const;
  inline void set_date(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Packet.MessageBoard)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_owerid();
  inline void clear_has_owerid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_playerhair();
  inline void clear_has_playerhair();
  inline void set_has_playerlevel();
  inline void clear_has_playerlevel();
  inline void set_has_replyplayer();
  inline void clear_has_replyplayer();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_date();
  inline void clear_has_date();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::google::protobuf::uint64 owerid_;
  ::google::protobuf::uint64 playerid_;
  ::std::string* playername_;
  ::google::protobuf::int32 playerhair_;
  ::google::protobuf::int32 playerlevel_;
  ::std::string* replyplayer_;
  ::std::string* message_;
  ::google::protobuf::uint32 date_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static MessageBoard* default_instance_;
};
// -------------------------------------------------------------------

class MessagePlayerInfo : public ::google::protobuf::Message {
 public:
  MessagePlayerInfo();
  virtual ~MessagePlayerInfo();

  MessagePlayerInfo(const MessagePlayerInfo& from);

  inline MessagePlayerInfo& operator=(const MessagePlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessagePlayerInfo& default_instance();

  void Swap(MessagePlayerInfo* other);

  // implements Message ----------------------------------------------

  MessagePlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessagePlayerInfo& from);
  void MergeFrom(const MessagePlayerInfo& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 source_guid = 1;
  inline bool has_source_guid() const;
  inline void clear_source_guid();
  static const int kSourceGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 source_guid() const;
  inline void set_source_guid(::google::protobuf::uint64 value);

  // required string source_name = 2;
  inline bool has_source_name() const;
  inline void clear_source_name();
  static const int kSourceNameFieldNumber = 2;
  inline const ::std::string& source_name() const;
  inline void set_source_name(const ::std::string& value);
  inline void set_source_name(const char* value);
  inline void set_source_name(const char* value, size_t size);
  inline ::std::string* mutable_source_name();
  inline ::std::string* release_source_name();
  inline void set_allocated_source_name(::std::string* source_name);

  // required int32 source_hair = 3;
  inline bool has_source_hair() const;
  inline void clear_source_hair();
  static const int kSourceHairFieldNumber = 3;
  inline ::google::protobuf::int32 source_hair() const;
  inline void set_source_hair(::google::protobuf::int32 value);

  // optional string signature = 4;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 4;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const char* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  inline void set_allocated_signature(::std::string* signature);

  // optional int32 init_actor_id = 5;
  inline bool has_init_actor_id() const;
  inline void clear_init_actor_id();
  static const int kInitActorIdFieldNumber = 5;
  inline ::google::protobuf::int32 init_actor_id() const;
  inline void set_init_actor_id(::google::protobuf::int32 value);

  // required int32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional bool havenew = 7;
  inline bool has_havenew() const;
  inline void clear_havenew();
  static const int kHavenewFieldNumber = 7;
  inline bool havenew() const;
  inline void set_havenew(bool value);

  // optional string guildname = 8;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildnameFieldNumber = 8;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // optional fixed64 teamid = 9;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 9;
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional int32 online = 10;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 10;
  inline ::google::protobuf::int32 online() const;
  inline void set_online(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.MessagePlayerInfo)
 private:
  inline void set_has_source_guid();
  inline void clear_has_source_guid();
  inline void set_has_source_name();
  inline void clear_has_source_name();
  inline void set_has_source_hair();
  inline void clear_has_source_hair();
  inline void set_has_signature();
  inline void clear_has_signature();
  inline void set_has_init_actor_id();
  inline void clear_has_init_actor_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_havenew();
  inline void clear_has_havenew();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_online();
  inline void clear_has_online();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 source_guid_;
  ::std::string* source_name_;
  ::std::string* signature_;
  ::google::protobuf::int32 source_hair_;
  ::google::protobuf::int32 init_actor_id_;
  ::google::protobuf::int32 level_;
  bool havenew_;
  ::std::string* guildname_;
  ::google::protobuf::uint64 teamid_;
  ::google::protobuf::int32 online_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static MessagePlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class ClientFriendMessageNotify : public ::google::protobuf::Message {
 public:
  ClientFriendMessageNotify();
  virtual ~ClientFriendMessageNotify();

  ClientFriendMessageNotify(const ClientFriendMessageNotify& from);

  inline ClientFriendMessageNotify& operator=(const ClientFriendMessageNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientFriendMessageNotify& default_instance();

  void Swap(ClientFriendMessageNotify* other);

  // implements Message ----------------------------------------------

  ClientFriendMessageNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientFriendMessageNotify& from);
  void MergeFrom(const ClientFriendMessageNotify& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Packet.MessagePlayerInfo notify = 1;
  inline int notify_size() const;
  inline void clear_notify();
  static const int kNotifyFieldNumber = 1;
  inline const ::Packet::MessagePlayerInfo& notify(int index) const;
  inline ::Packet::MessagePlayerInfo* mutable_notify(int index);
  inline ::Packet::MessagePlayerInfo* add_notify();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::MessagePlayerInfo >&
      notify() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::MessagePlayerInfo >*
      mutable_notify();

  // @@protoc_insertion_point(class_scope:Packet.ClientFriendMessageNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::MessagePlayerInfo > notify_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static ClientFriendMessageNotify* default_instance_;
};
// -------------------------------------------------------------------

class AddClientFriendMessageNotify : public ::google::protobuf::Message {
 public:
  AddClientFriendMessageNotify();
  virtual ~AddClientFriendMessageNotify();

  AddClientFriendMessageNotify(const AddClientFriendMessageNotify& from);

  inline AddClientFriendMessageNotify& operator=(const AddClientFriendMessageNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddClientFriendMessageNotify& default_instance();

  void Swap(AddClientFriendMessageNotify* other);

  // implements Message ----------------------------------------------

  AddClientFriendMessageNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddClientFriendMessageNotify& from);
  void MergeFrom(const AddClientFriendMessageNotify& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Packet.MessagePlayerInfo notify = 1;
  inline bool has_notify() const;
  inline void clear_notify();
  static const int kNotifyFieldNumber = 1;
  inline const ::Packet::MessagePlayerInfo& notify() const;
  inline ::Packet::MessagePlayerInfo* mutable_notify();
  inline ::Packet::MessagePlayerInfo* release_notify();
  inline void set_allocated_notify(::Packet::MessagePlayerInfo* notify);

  // @@protoc_insertion_point(class_scope:Packet.AddClientFriendMessageNotify)
 private:
  inline void set_has_notify();
  inline void clear_has_notify();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Packet::MessagePlayerInfo* notify_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static AddClientFriendMessageNotify* default_instance_;
};
// -------------------------------------------------------------------

class DelClientFriendMessageNotifyRR : public ::google::protobuf::Message {
 public:
  DelClientFriendMessageNotifyRR();
  virtual ~DelClientFriendMessageNotifyRR();

  DelClientFriendMessageNotifyRR(const DelClientFriendMessageNotifyRR& from);

  inline DelClientFriendMessageNotifyRR& operator=(const DelClientFriendMessageNotifyRR& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DelClientFriendMessageNotifyRR& default_instance();

  void Swap(DelClientFriendMessageNotifyRR* other);

  // implements Message ----------------------------------------------

  DelClientFriendMessageNotifyRR* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DelClientFriendMessageNotifyRR& from);
  void MergeFrom(const DelClientFriendMessageNotifyRR& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 source_guid = 1;
  inline bool has_source_guid() const;
  inline void clear_source_guid();
  static const int kSourceGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 source_guid() const;
  inline void set_source_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Packet.DelClientFriendMessageNotifyRR)
 private:
  inline void set_has_source_guid();
  inline void clear_has_source_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 source_guid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static DelClientFriendMessageNotifyRR* default_instance_;
};
// -------------------------------------------------------------------

class ItemCount : public ::google::protobuf::Message {
 public:
  ItemCount();
  virtual ~ItemCount();

  ItemCount(const ItemCount& from);

  inline ItemCount& operator=(const ItemCount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemCount& default_instance();

  void Swap(ItemCount* other);

  // implements Message ----------------------------------------------

  ItemCount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemCount& from);
  void MergeFrom(const ItemCount& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 itemid = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 1;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // required int32 itemcount = 2;
  inline bool has_itemcount() const;
  inline void clear_itemcount();
  static const int kItemcountFieldNumber = 2;
  inline ::google::protobuf::int32 itemcount() const;
  inline void set_itemcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.ItemCount)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_itemcount();
  inline void clear_has_itemcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 itemcount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static ItemCount* default_instance_;
};
// -------------------------------------------------------------------

class MessageInfo : public ::google::protobuf::Message {
 public:
  MessageInfo();
  virtual ~MessageInfo();

  MessageInfo(const MessageInfo& from);

  inline MessageInfo& operator=(const MessageInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageInfo& default_instance();

  void Swap(MessageInfo* other);

  // implements Message ----------------------------------------------

  MessageInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageInfo& from);
  void MergeFrom(const MessageInfo& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // required fixed64 owner_id = 2;
  inline bool has_owner_id() const;
  inline void clear_owner_id();
  static const int kOwnerIdFieldNumber = 2;
  inline ::google::protobuf::uint64 owner_id() const;
  inline void set_owner_id(::google::protobuf::uint64 value);

  // required fixed64 datetime = 3;
  inline bool has_datetime() const;
  inline void clear_datetime();
  static const int kDatetimeFieldNumber = 3;
  inline ::google::protobuf::uint64 datetime() const;
  inline void set_datetime(::google::protobuf::uint64 value);

  // required fixed64 source_guid = 4;
  inline bool has_source_guid() const;
  inline void clear_source_guid();
  static const int kSourceGuidFieldNumber = 4;
  inline ::google::protobuf::uint64 source_guid() const;
  inline void set_source_guid(::google::protobuf::uint64 value);

  // required string title = 5;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 5;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // required bytes content = 6;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 6;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // required int32 chat_time = 7;
  inline bool has_chat_time() const;
  inline void clear_chat_time();
  static const int kChatTimeFieldNumber = 7;
  inline ::google::protobuf::int32 chat_time() const;
  inline void set_chat_time(::google::protobuf::int32 value);

  // repeated .Packet.ItemCount items = 8;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 8;
  inline const ::Packet::ItemCount& items(int index) const;
  inline ::Packet::ItemCount* mutable_items(int index);
  inline ::Packet::ItemCount* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::ItemCount >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::ItemCount >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Packet.MessageInfo)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_owner_id();
  inline void clear_has_owner_id();
  inline void set_has_datetime();
  inline void clear_has_datetime();
  inline void set_has_source_guid();
  inline void clear_has_source_guid();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_chat_time();
  inline void clear_has_chat_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::google::protobuf::uint64 owner_id_;
  ::google::protobuf::uint64 datetime_;
  ::google::protobuf::uint64 source_guid_;
  ::std::string* title_;
  ::std::string* content_;
  ::google::protobuf::RepeatedPtrField< ::Packet::ItemCount > items_;
  ::google::protobuf::int32 chat_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static MessageInfo* default_instance_;
};
// -------------------------------------------------------------------

class FriendMessageInfo : public ::google::protobuf::Message {
 public:
  FriendMessageInfo();
  virtual ~FriendMessageInfo();

  FriendMessageInfo(const FriendMessageInfo& from);

  inline FriendMessageInfo& operator=(const FriendMessageInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendMessageInfo& default_instance();

  void Swap(FriendMessageInfo* other);

  // implements Message ----------------------------------------------

  FriendMessageInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendMessageInfo& from);
  void MergeFrom(const FriendMessageInfo& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // required .Packet.FriendMessageType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::Packet::FriendMessageType type() const;
  inline void set_type(::Packet::FriendMessageType value);

  // required fixed64 receive_guid = 3;
  inline bool has_receive_guid() const;
  inline void clear_receive_guid();
  static const int kReceiveGuidFieldNumber = 3;
  inline ::google::protobuf::uint64 receive_guid() const;
  inline void set_receive_guid(::google::protobuf::uint64 value);

  // required fixed64 datetime = 4;
  inline bool has_datetime() const;
  inline void clear_datetime();
  static const int kDatetimeFieldNumber = 4;
  inline ::google::protobuf::uint64 datetime() const;
  inline void set_datetime(::google::protobuf::uint64 value);

  // required fixed64 send_guid = 5;
  inline bool has_send_guid() const;
  inline void clear_send_guid();
  static const int kSendGuidFieldNumber = 5;
  inline ::google::protobuf::uint64 send_guid() const;
  inline void set_send_guid(::google::protobuf::uint64 value);

  // required bytes content = 6;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 6;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // required int32 chat_time = 7;
  inline bool has_chat_time() const;
  inline void clear_chat_time();
  static const int kChatTimeFieldNumber = 7;
  inline ::google::protobuf::int32 chat_time() const;
  inline void set_chat_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.FriendMessageInfo)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_receive_guid();
  inline void clear_has_receive_guid();
  inline void set_has_datetime();
  inline void clear_has_datetime();
  inline void set_has_send_guid();
  inline void clear_has_send_guid();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_chat_time();
  inline void clear_has_chat_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::google::protobuf::uint64 receive_guid_;
  ::google::protobuf::uint64 datetime_;
  int type_;
  ::google::protobuf::int32 chat_time_;
  ::google::protobuf::uint64 send_guid_;
  ::std::string* content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static FriendMessageInfo* default_instance_;
};
// -------------------------------------------------------------------

class FriendInfo : public ::google::protobuf::Message {
 public:
  FriendInfo();
  virtual ~FriendInfo();

  FriendInfo(const FriendInfo& from);

  inline FriendInfo& operator=(const FriendInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendInfo& default_instance();

  void Swap(FriendInfo* other);

  // implements Message ----------------------------------------------

  FriendInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendInfo& from);
  void MergeFrom(const FriendInfo& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // required int32 init_actor_id = 3;
  inline bool has_init_actor_id() const;
  inline void clear_init_actor_id();
  static const int kInitActorIdFieldNumber = 3;
  inline ::google::protobuf::int32 init_actor_id() const;
  inline void set_init_actor_id(::google::protobuf::int32 value);

  // required int32 hair = 4;
  inline bool has_hair() const;
  inline void clear_hair();
  static const int kHairFieldNumber = 4;
  inline ::google::protobuf::int32 hair() const;
  inline void set_hair(::google::protobuf::int32 value);

  // required string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required string signature = 7;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 7;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const char* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  inline void set_allocated_signature(::std::string* signature);

  // required string guildname = 8;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildnameFieldNumber = 8;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // required int32 friendvalue = 9;
  inline bool has_friendvalue() const;
  inline void clear_friendvalue();
  static const int kFriendvalueFieldNumber = 9;
  inline ::google::protobuf::int32 friendvalue() const;
  inline void set_friendvalue(::google::protobuf::int32 value);

  // required fixed64 teamid = 10;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 10;
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // required int32 online = 11;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 11;
  inline ::google::protobuf::int32 online() const;
  inline void set_online(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.FriendInfo)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_init_actor_id();
  inline void clear_has_init_actor_id();
  inline void set_has_hair();
  inline void clear_has_hair();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_signature();
  inline void clear_has_signature();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_friendvalue();
  inline void clear_has_friendvalue();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_online();
  inline void clear_has_online();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::google::protobuf::int32 init_actor_id_;
  ::google::protobuf::int32 hair_;
  ::std::string* name_;
  ::std::string* signature_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 friendvalue_;
  ::std::string* guildname_;
  ::google::protobuf::uint64 teamid_;
  ::google::protobuf::int32 online_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static FriendInfo* default_instance_;
};
// -------------------------------------------------------------------

class FriendInfotReply : public ::google::protobuf::Message {
 public:
  FriendInfotReply();
  virtual ~FriendInfotReply();

  FriendInfotReply(const FriendInfotReply& from);

  inline FriendInfotReply& operator=(const FriendInfotReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendInfotReply& default_instance();

  void Swap(FriendInfotReply* other);

  // implements Message ----------------------------------------------

  FriendInfotReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendInfotReply& from);
  void MergeFrom(const FriendInfotReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Packet.MessagesUpdate mailmessages = 1;
  inline bool has_mailmessages() const;
  inline void clear_mailmessages();
  static const int kMailmessagesFieldNumber = 1;
  inline const ::Packet::MessagesUpdate& mailmessages() const;
  inline ::Packet::MessagesUpdate* mutable_mailmessages();
  inline ::Packet::MessagesUpdate* release_mailmessages();
  inline void set_allocated_mailmessages(::Packet::MessagesUpdate* mailmessages);

  // required .Packet.FriendListUpdate friends = 3;
  inline bool has_friends() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 3;
  inline const ::Packet::FriendListUpdate& friends() const;
  inline ::Packet::FriendListUpdate* mutable_friends();
  inline ::Packet::FriendListUpdate* release_friends();
  inline void set_allocated_friends(::Packet::FriendListUpdate* friends);

  // required .Packet.RecommendsUpdate recommends = 4;
  inline bool has_recommends() const;
  inline void clear_recommends();
  static const int kRecommendsFieldNumber = 4;
  inline const ::Packet::RecommendsUpdate& recommends() const;
  inline ::Packet::RecommendsUpdate* mutable_recommends();
  inline ::Packet::RecommendsUpdate* release_recommends();
  inline void set_allocated_recommends(::Packet::RecommendsUpdate* recommends);

  // required .Packet.ClientFriendMessageNotify notifyinfos = 5;
  inline bool has_notifyinfos() const;
  inline void clear_notifyinfos();
  static const int kNotifyinfosFieldNumber = 5;
  inline const ::Packet::ClientFriendMessageNotify& notifyinfos() const;
  inline ::Packet::ClientFriendMessageNotify* mutable_notifyinfos();
  inline ::Packet::ClientFriendMessageNotify* release_notifyinfos();
  inline void set_allocated_notifyinfos(::Packet::ClientFriendMessageNotify* notifyinfos);

  // optional .Packet.ZoneInfo zoneinfo = 6;
  inline bool has_zoneinfo() const;
  inline void clear_zoneinfo();
  static const int kZoneinfoFieldNumber = 6;
  inline const ::Packet::ZoneInfo& zoneinfo() const;
  inline ::Packet::ZoneInfo* mutable_zoneinfo();
  inline ::Packet::ZoneInfo* release_zoneinfo();
  inline void set_allocated_zoneinfo(::Packet::ZoneInfo* zoneinfo);

  // repeated .Packet.MessageBoard msgs = 7;
  inline int msgs_size() const;
  inline void clear_msgs();
  static const int kMsgsFieldNumber = 7;
  inline const ::Packet::MessageBoard& msgs(int index) const;
  inline ::Packet::MessageBoard* mutable_msgs(int index);
  inline ::Packet::MessageBoard* add_msgs();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::MessageBoard >&
      msgs() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::MessageBoard >*
      mutable_msgs();

  // repeated .Packet.FriendMessageInfo offlinemsgs = 8;
  inline int offlinemsgs_size() const;
  inline void clear_offlinemsgs();
  static const int kOfflinemsgsFieldNumber = 8;
  inline const ::Packet::FriendMessageInfo& offlinemsgs(int index) const;
  inline ::Packet::FriendMessageInfo* mutable_offlinemsgs(int index);
  inline ::Packet::FriendMessageInfo* add_offlinemsgs();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::FriendMessageInfo >&
      offlinemsgs() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::FriendMessageInfo >*
      mutable_offlinemsgs();

  // @@protoc_insertion_point(class_scope:Packet.FriendInfotReply)
 private:
  inline void set_has_mailmessages();
  inline void clear_has_mailmessages();
  inline void set_has_friends();
  inline void clear_has_friends();
  inline void set_has_recommends();
  inline void clear_has_recommends();
  inline void set_has_notifyinfos();
  inline void clear_has_notifyinfos();
  inline void set_has_zoneinfo();
  inline void clear_has_zoneinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Packet::MessagesUpdate* mailmessages_;
  ::Packet::FriendListUpdate* friends_;
  ::Packet::RecommendsUpdate* recommends_;
  ::Packet::ClientFriendMessageNotify* notifyinfos_;
  ::Packet::ZoneInfo* zoneinfo_;
  ::google::protobuf::RepeatedPtrField< ::Packet::MessageBoard > msgs_;
  ::google::protobuf::RepeatedPtrField< ::Packet::FriendMessageInfo > offlinemsgs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static FriendInfotReply* default_instance_;
};
// -------------------------------------------------------------------

class RecommendReq : public ::google::protobuf::Message {
 public:
  RecommendReq();
  virtual ~RecommendReq();

  RecommendReq(const RecommendReq& from);

  inline RecommendReq& operator=(const RecommendReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecommendReq& default_instance();

  void Swap(RecommendReq* other);

  // implements Message ----------------------------------------------

  RecommendReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecommendReq& from);
  void MergeFrom(const RecommendReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Packet.RecommendReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static RecommendReq* default_instance_;
};
// -------------------------------------------------------------------

class FriendListReq : public ::google::protobuf::Message {
 public:
  FriendListReq();
  virtual ~FriendListReq();

  FriendListReq(const FriendListReq& from);

  inline FriendListReq& operator=(const FriendListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendListReq& default_instance();

  void Swap(FriendListReq* other);

  // implements Message ----------------------------------------------

  FriendListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendListReq& from);
  void MergeFrom(const FriendListReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Packet.FriendListReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static FriendListReq* default_instance_;
};
// -------------------------------------------------------------------

class FindPlayerInfo : public ::google::protobuf::Message {
 public:
  FindPlayerInfo();
  virtual ~FindPlayerInfo();

  FindPlayerInfo(const FindPlayerInfo& from);

  inline FindPlayerInfo& operator=(const FindPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FindPlayerInfo& default_instance();

  void Swap(FindPlayerInfo* other);

  // implements Message ----------------------------------------------

  FindPlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FindPlayerInfo& from);
  void MergeFrom(const FindPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 hair = 3;
  inline bool has_hair() const;
  inline void clear_hair();
  static const int kHairFieldNumber = 3;
  inline ::google::protobuf::int32 hair() const;
  inline void set_hair(::google::protobuf::int32 value);

  // required int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required int32 init_actor_id = 5;
  inline bool has_init_actor_id() const;
  inline void clear_init_actor_id();
  static const int kInitActorIdFieldNumber = 5;
  inline ::google::protobuf::int32 init_actor_id() const;
  inline void set_init_actor_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.FindPlayerInfo)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_hair();
  inline void clear_has_hair();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_init_actor_id();
  inline void clear_has_init_actor_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::std::string* name_;
  ::google::protobuf::int32 hair_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 init_actor_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static FindPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class FindFriendByNameReq : public ::google::protobuf::Message {
 public:
  FindFriendByNameReq();
  virtual ~FindFriendByNameReq();

  FindFriendByNameReq(const FindFriendByNameReq& from);

  inline FindFriendByNameReq& operator=(const FindFriendByNameReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FindFriendByNameReq& default_instance();

  void Swap(FindFriendByNameReq* other);

  // implements Message ----------------------------------------------

  FindFriendByNameReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FindFriendByNameReq& from);
  void MergeFrom(const FindFriendByNameReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Packet.FindFriendByNameReq)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static FindFriendByNameReq* default_instance_;
};
// -------------------------------------------------------------------

class FindFriendByGuidReq : public ::google::protobuf::Message {
 public:
  FindFriendByGuidReq();
  virtual ~FindFriendByGuidReq();

  FindFriendByGuidReq(const FindFriendByGuidReq& from);

  inline FindFriendByGuidReq& operator=(const FindFriendByGuidReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FindFriendByGuidReq& default_instance();

  void Swap(FindFriendByGuidReq* other);

  // implements Message ----------------------------------------------

  FindFriendByGuidReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FindFriendByGuidReq& from);
  void MergeFrom(const FindFriendByGuidReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Packet.FindFriendByGuidReq)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static FindFriendByGuidReq* default_instance_;
};
// -------------------------------------------------------------------

class FindFriendReply : public ::google::protobuf::Message {
 public:
  FindFriendReply();
  virtual ~FindFriendReply();

  FindFriendReply(const FindFriendReply& from);

  inline FindFriendReply& operator=(const FindFriendReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FindFriendReply& default_instance();

  void Swap(FindFriendReply* other);

  // implements Message ----------------------------------------------

  FindFriendReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FindFriendReply& from);
  void MergeFrom(const FindFriendReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Packet.FindPlayerInfo info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::Packet::FindPlayerInfo& info() const;
  inline ::Packet::FindPlayerInfo* mutable_info();
  inline ::Packet::FindPlayerInfo* release_info();
  inline void set_allocated_info(::Packet::FindPlayerInfo* info);

  // @@protoc_insertion_point(class_scope:Packet.FindFriendReply)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Packet::FindPlayerInfo* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static FindFriendReply* default_instance_;
};
// -------------------------------------------------------------------

class FriendListUpdate : public ::google::protobuf::Message {
 public:
  FriendListUpdate();
  virtual ~FriendListUpdate();

  FriendListUpdate(const FriendListUpdate& from);

  inline FriendListUpdate& operator=(const FriendListUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendListUpdate& default_instance();

  void Swap(FriendListUpdate* other);

  // implements Message ----------------------------------------------

  FriendListUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendListUpdate& from);
  void MergeFrom(const FriendListUpdate& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Packet.FriendInfo friends = 1;
  inline int friends_size() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 1;
  inline const ::Packet::FriendInfo& friends(int index) const;
  inline ::Packet::FriendInfo* mutable_friends(int index);
  inline ::Packet::FriendInfo* add_friends();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::FriendInfo >&
      friends() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::FriendInfo >*
      mutable_friends();

  // @@protoc_insertion_point(class_scope:Packet.FriendListUpdate)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::FriendInfo > friends_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static FriendListUpdate* default_instance_;
};
// -------------------------------------------------------------------

class RecommendsUpdate : public ::google::protobuf::Message {
 public:
  RecommendsUpdate();
  virtual ~RecommendsUpdate();

  RecommendsUpdate(const RecommendsUpdate& from);

  inline RecommendsUpdate& operator=(const RecommendsUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecommendsUpdate& default_instance();

  void Swap(RecommendsUpdate* other);

  // implements Message ----------------------------------------------

  RecommendsUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecommendsUpdate& from);
  void MergeFrom(const RecommendsUpdate& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Packet.FriendInfo recommends = 1;
  inline int recommends_size() const;
  inline void clear_recommends();
  static const int kRecommendsFieldNumber = 1;
  inline const ::Packet::FriendInfo& recommends(int index) const;
  inline ::Packet::FriendInfo* mutable_recommends(int index);
  inline ::Packet::FriendInfo* add_recommends();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::FriendInfo >&
      recommends() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::FriendInfo >*
      mutable_recommends();

  // @@protoc_insertion_point(class_scope:Packet.RecommendsUpdate)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::FriendInfo > recommends_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static RecommendsUpdate* default_instance_;
};
// -------------------------------------------------------------------

class MessagesUpdate : public ::google::protobuf::Message {
 public:
  MessagesUpdate();
  virtual ~MessagesUpdate();

  MessagesUpdate(const MessagesUpdate& from);

  inline MessagesUpdate& operator=(const MessagesUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessagesUpdate& default_instance();

  void Swap(MessagesUpdate* other);

  // implements Message ----------------------------------------------

  MessagesUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessagesUpdate& from);
  void MergeFrom(const MessagesUpdate& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Packet.MessageInfo messages = 1;
  inline int messages_size() const;
  inline void clear_messages();
  static const int kMessagesFieldNumber = 1;
  inline const ::Packet::MessageInfo& messages(int index) const;
  inline ::Packet::MessageInfo* mutable_messages(int index);
  inline ::Packet::MessageInfo* add_messages();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::MessageInfo >&
      messages() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::MessageInfo >*
      mutable_messages();

  // @@protoc_insertion_point(class_scope:Packet.MessagesUpdate)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::MessageInfo > messages_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static MessagesUpdate* default_instance_;
};
// -------------------------------------------------------------------

class AddFriendMessagesReply : public ::google::protobuf::Message {
 public:
  AddFriendMessagesReply();
  virtual ~AddFriendMessagesReply();

  AddFriendMessagesReply(const AddFriendMessagesReply& from);

  inline AddFriendMessagesReply& operator=(const AddFriendMessagesReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddFriendMessagesReply& default_instance();

  void Swap(AddFriendMessagesReply* other);

  // implements Message ----------------------------------------------

  AddFriendMessagesReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddFriendMessagesReply& from);
  void MergeFrom(const AddFriendMessagesReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Packet.FriendMessageInfo messages = 1;
  inline bool has_messages() const;
  inline void clear_messages();
  static const int kMessagesFieldNumber = 1;
  inline const ::Packet::FriendMessageInfo& messages() const;
  inline ::Packet::FriendMessageInfo* mutable_messages();
  inline ::Packet::FriendMessageInfo* release_messages();
  inline void set_allocated_messages(::Packet::FriendMessageInfo* messages);

  // @@protoc_insertion_point(class_scope:Packet.AddFriendMessagesReply)
 private:
  inline void set_has_messages();
  inline void clear_has_messages();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Packet::FriendMessageInfo* messages_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static AddFriendMessagesReply* default_instance_;
};
// -------------------------------------------------------------------

class FriendMessageReq : public ::google::protobuf::Message {
 public:
  FriendMessageReq();
  virtual ~FriendMessageReq();

  FriendMessageReq(const FriendMessageReq& from);

  inline FriendMessageReq& operator=(const FriendMessageReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendMessageReq& default_instance();

  void Swap(FriendMessageReq* other);

  // implements Message ----------------------------------------------

  FriendMessageReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendMessageReq& from);
  void MergeFrom(const FriendMessageReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 player_guid = 1;
  inline bool has_player_guid() const;
  inline void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 player_guid() const;
  inline void set_player_guid(::google::protobuf::uint64 value);

  // required bytes chat_message = 2;
  inline bool has_chat_message() const;
  inline void clear_chat_message();
  static const int kChatMessageFieldNumber = 2;
  inline const ::std::string& chat_message() const;
  inline void set_chat_message(const ::std::string& value);
  inline void set_chat_message(const char* value);
  inline void set_chat_message(const void* value, size_t size);
  inline ::std::string* mutable_chat_message();
  inline ::std::string* release_chat_message();
  inline void set_allocated_chat_message(::std::string* chat_message);

  // required int32 chat_time = 3;
  inline bool has_chat_time() const;
  inline void clear_chat_time();
  static const int kChatTimeFieldNumber = 3;
  inline ::google::protobuf::int32 chat_time() const;
  inline void set_chat_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.FriendMessageReq)
 private:
  inline void set_has_player_guid();
  inline void clear_has_player_guid();
  inline void set_has_chat_message();
  inline void clear_has_chat_message();
  inline void set_has_chat_time();
  inline void clear_has_chat_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 player_guid_;
  ::std::string* chat_message_;
  ::google::protobuf::int32 chat_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static FriendMessageReq* default_instance_;
};
// -------------------------------------------------------------------

class SetZoneSignatureReq : public ::google::protobuf::Message {
 public:
  SetZoneSignatureReq();
  virtual ~SetZoneSignatureReq();

  SetZoneSignatureReq(const SetZoneSignatureReq& from);

  inline SetZoneSignatureReq& operator=(const SetZoneSignatureReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetZoneSignatureReq& default_instance();

  void Swap(SetZoneSignatureReq* other);

  // implements Message ----------------------------------------------

  SetZoneSignatureReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetZoneSignatureReq& from);
  void MergeFrom(const SetZoneSignatureReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string signature = 1;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 1;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const char* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  inline void set_allocated_signature(::std::string* signature);

  // @@protoc_insertion_point(class_scope:Packet.SetZoneSignatureReq)
 private:
  inline void set_has_signature();
  inline void clear_has_signature();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* signature_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static SetZoneSignatureReq* default_instance_;
};
// -------------------------------------------------------------------

class SignatureUpdate : public ::google::protobuf::Message {
 public:
  SignatureUpdate();
  virtual ~SignatureUpdate();

  SignatureUpdate(const SignatureUpdate& from);

  inline SignatureUpdate& operator=(const SignatureUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignatureUpdate& default_instance();

  void Swap(SignatureUpdate* other);

  // implements Message ----------------------------------------------

  SignatureUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignatureUpdate& from);
  void MergeFrom(const SignatureUpdate& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string signature = 1;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 1;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const char* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  inline void set_allocated_signature(::std::string* signature);

  // @@protoc_insertion_point(class_scope:Packet.SignatureUpdate)
 private:
  inline void set_has_signature();
  inline void clear_has_signature();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* signature_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static SignatureUpdate* default_instance_;
};
// -------------------------------------------------------------------

class AddFriendReq : public ::google::protobuf::Message {
 public:
  AddFriendReq();
  virtual ~AddFriendReq();

  AddFriendReq(const AddFriendReq& from);

  inline AddFriendReq& operator=(const AddFriendReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddFriendReq& default_instance();

  void Swap(AddFriendReq* other);

  // implements Message ----------------------------------------------

  AddFriendReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddFriendReq& from);
  void MergeFrom(const AddFriendReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 player_guid = 1;
  inline bool has_player_guid() const;
  inline void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 player_guid() const;
  inline void set_player_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Packet.AddFriendReq)
 private:
  inline void set_has_player_guid();
  inline void clear_has_player_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 player_guid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static AddFriendReq* default_instance_;
};
// -------------------------------------------------------------------

class DelFriendReq : public ::google::protobuf::Message {
 public:
  DelFriendReq();
  virtual ~DelFriendReq();

  DelFriendReq(const DelFriendReq& from);

  inline DelFriendReq& operator=(const DelFriendReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DelFriendReq& default_instance();

  void Swap(DelFriendReq* other);

  // implements Message ----------------------------------------------

  DelFriendReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DelFriendReq& from);
  void MergeFrom(const DelFriendReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 player_guid = 1;
  inline bool has_player_guid() const;
  inline void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 player_guid() const;
  inline void set_player_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Packet.DelFriendReq)
 private:
  inline void set_has_player_guid();
  inline void clear_has_player_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 player_guid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static DelFriendReq* default_instance_;
};
// -------------------------------------------------------------------

class AskTeamReq : public ::google::protobuf::Message {
 public:
  AskTeamReq();
  virtual ~AskTeamReq();

  AskTeamReq(const AskTeamReq& from);

  inline AskTeamReq& operator=(const AskTeamReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskTeamReq& default_instance();

  void Swap(AskTeamReq* other);

  // implements Message ----------------------------------------------

  AskTeamReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskTeamReq& from);
  void MergeFrom(const AskTeamReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 player_guid = 1;
  inline bool has_player_guid() const;
  inline void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 player_guid() const;
  inline void set_player_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Packet.AskTeamReq)
 private:
  inline void set_has_player_guid();
  inline void clear_has_player_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 player_guid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static AskTeamReq* default_instance_;
};
// -------------------------------------------------------------------

class AskGuildReq : public ::google::protobuf::Message {
 public:
  AskGuildReq();
  virtual ~AskGuildReq();

  AskGuildReq(const AskGuildReq& from);

  inline AskGuildReq& operator=(const AskGuildReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AskGuildReq& default_instance();

  void Swap(AskGuildReq* other);

  // implements Message ----------------------------------------------

  AskGuildReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AskGuildReq& from);
  void MergeFrom(const AskGuildReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 player_guid = 1;
  inline bool has_player_guid() const;
  inline void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 player_guid() const;
  inline void set_player_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Packet.AskGuildReq)
 private:
  inline void set_has_player_guid();
  inline void clear_has_player_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 player_guid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static AskGuildReq* default_instance_;
};
// -------------------------------------------------------------------

class SendGiftReq : public ::google::protobuf::Message {
 public:
  SendGiftReq();
  virtual ~SendGiftReq();

  SendGiftReq(const SendGiftReq& from);

  inline SendGiftReq& operator=(const SendGiftReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendGiftReq& default_instance();

  void Swap(SendGiftReq* other);

  // implements Message ----------------------------------------------

  SendGiftReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendGiftReq& from);
  void MergeFrom(const SendGiftReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 player_guid = 1;
  inline bool has_player_guid() const;
  inline void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 player_guid() const;
  inline void set_player_guid(::google::protobuf::uint64 value);

  // repeated .Packet.ItemCount items = 2;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 2;
  inline const ::Packet::ItemCount& items(int index) const;
  inline ::Packet::ItemCount* mutable_items(int index);
  inline ::Packet::ItemCount* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::ItemCount >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::ItemCount >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Packet.SendGiftReq)
 private:
  inline void set_has_player_guid();
  inline void clear_has_player_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 player_guid_;
  ::google::protobuf::RepeatedPtrField< ::Packet::ItemCount > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static SendGiftReq* default_instance_;
};
// -------------------------------------------------------------------

class ViewZoneReq : public ::google::protobuf::Message {
 public:
  ViewZoneReq();
  virtual ~ViewZoneReq();

  ViewZoneReq(const ViewZoneReq& from);

  inline ViewZoneReq& operator=(const ViewZoneReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ViewZoneReq& default_instance();

  void Swap(ViewZoneReq* other);

  // implements Message ----------------------------------------------

  ViewZoneReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ViewZoneReq& from);
  void MergeFrom(const ViewZoneReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 player_guid = 1;
  inline bool has_player_guid() const;
  inline void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 player_guid() const;
  inline void set_player_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Packet.ViewZoneReq)
 private:
  inline void set_has_player_guid();
  inline void clear_has_player_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 player_guid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static ViewZoneReq* default_instance_;
};
// -------------------------------------------------------------------

class ZoneBaseInfo : public ::google::protobuf::Message {
 public:
  ZoneBaseInfo();
  virtual ~ZoneBaseInfo();

  ZoneBaseInfo(const ZoneBaseInfo& from);

  inline ZoneBaseInfo& operator=(const ZoneBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZoneBaseInfo& default_instance();

  void Swap(ZoneBaseInfo* other);

  // implements Message ----------------------------------------------

  ZoneBaseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZoneBaseInfo& from);
  void MergeFrom(const ZoneBaseInfo& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 player_guid = 1;
  inline bool has_player_guid() const;
  inline void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 player_guid() const;
  inline void set_player_guid(::google::protobuf::uint64 value);

  // required string player_name = 2;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // required int32 player_hair = 3;
  inline bool has_player_hair() const;
  inline void clear_player_hair();
  static const int kPlayerHairFieldNumber = 3;
  inline ::google::protobuf::int32 player_hair() const;
  inline void set_player_hair(::google::protobuf::int32 value);

  // required int32 init_actor_id = 4;
  inline bool has_init_actor_id() const;
  inline void clear_init_actor_id();
  static const int kInitActorIdFieldNumber = 4;
  inline ::google::protobuf::int32 init_actor_id() const;
  inline void set_init_actor_id(::google::protobuf::int32 value);

  // required int32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required string guildname = 6;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildnameFieldNumber = 6;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // @@protoc_insertion_point(class_scope:Packet.ZoneBaseInfo)
 private:
  inline void set_has_player_guid();
  inline void clear_has_player_guid();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_player_hair();
  inline void clear_has_player_hair();
  inline void set_has_init_actor_id();
  inline void clear_has_init_actor_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_guildname();
  inline void clear_has_guildname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 player_guid_;
  ::std::string* player_name_;
  ::google::protobuf::int32 player_hair_;
  ::google::protobuf::int32 init_actor_id_;
  ::std::string* guildname_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static ZoneBaseInfo* default_instance_;
};
// -------------------------------------------------------------------

class ViewZoneReply : public ::google::protobuf::Message {
 public:
  ViewZoneReply();
  virtual ~ViewZoneReply();

  ViewZoneReply(const ViewZoneReply& from);

  inline ViewZoneReply& operator=(const ViewZoneReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ViewZoneReply& default_instance();

  void Swap(ViewZoneReply* other);

  // implements Message ----------------------------------------------

  ViewZoneReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ViewZoneReply& from);
  void MergeFrom(const ViewZoneReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Packet.ZoneBaseInfo base_info = 1;
  inline bool has_base_info() const;
  inline void clear_base_info();
  static const int kBaseInfoFieldNumber = 1;
  inline const ::Packet::ZoneBaseInfo& base_info() const;
  inline ::Packet::ZoneBaseInfo* mutable_base_info();
  inline ::Packet::ZoneBaseInfo* release_base_info();
  inline void set_allocated_base_info(::Packet::ZoneBaseInfo* base_info);

  // repeated .Packet.EquipItem main_equips = 4;
  inline int main_equips_size() const;
  inline void clear_main_equips();
  static const int kMainEquipsFieldNumber = 4;
  inline const ::Packet::EquipItem& main_equips(int index) const;
  inline ::Packet::EquipItem* mutable_main_equips(int index);
  inline ::Packet::EquipItem* add_main_equips();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::EquipItem >&
      main_equips() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::EquipItem >*
      mutable_main_equips();

  // repeated .Packet.MessageBoard msgs = 5;
  inline int msgs_size() const;
  inline void clear_msgs();
  static const int kMsgsFieldNumber = 5;
  inline const ::Packet::MessageBoard& msgs(int index) const;
  inline ::Packet::MessageBoard* mutable_msgs(int index);
  inline ::Packet::MessageBoard* add_msgs();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::MessageBoard >&
      msgs() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::MessageBoard >*
      mutable_msgs();

  // required .Packet.ZoneInfo zoneinfo = 6;
  inline bool has_zoneinfo() const;
  inline void clear_zoneinfo();
  static const int kZoneinfoFieldNumber = 6;
  inline const ::Packet::ZoneInfo& zoneinfo() const;
  inline ::Packet::ZoneInfo* mutable_zoneinfo();
  inline ::Packet::ZoneInfo* release_zoneinfo();
  inline void set_allocated_zoneinfo(::Packet::ZoneInfo* zoneinfo);

  // @@protoc_insertion_point(class_scope:Packet.ViewZoneReply)
 private:
  inline void set_has_base_info();
  inline void clear_has_base_info();
  inline void set_has_zoneinfo();
  inline void clear_has_zoneinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Packet::ZoneBaseInfo* base_info_;
  ::google::protobuf::RepeatedPtrField< ::Packet::EquipItem > main_equips_;
  ::google::protobuf::RepeatedPtrField< ::Packet::MessageBoard > msgs_;
  ::Packet::ZoneInfo* zoneinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static ViewZoneReply* default_instance_;
};
// -------------------------------------------------------------------

class DelMessageReq : public ::google::protobuf::Message {
 public:
  DelMessageReq();
  virtual ~DelMessageReq();

  DelMessageReq(const DelMessageReq& from);

  inline DelMessageReq& operator=(const DelMessageReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DelMessageReq& default_instance();

  void Swap(DelMessageReq* other);

  // implements Message ----------------------------------------------

  DelMessageReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DelMessageReq& from);
  void MergeFrom(const DelMessageReq& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 message_id = 1;
  inline bool has_message_id() const;
  inline void clear_message_id();
  static const int kMessageIdFieldNumber = 1;
  inline ::google::protobuf::uint64 message_id() const;
  inline void set_message_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Packet.DelMessageReq)
 private:
  inline void set_has_message_id();
  inline void clear_has_message_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 message_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static DelMessageReq* default_instance_;
};
// -------------------------------------------------------------------

class NewMessageNotify : public ::google::protobuf::Message {
 public:
  NewMessageNotify();
  virtual ~NewMessageNotify();

  NewMessageNotify(const NewMessageNotify& from);

  inline NewMessageNotify& operator=(const NewMessageNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewMessageNotify& default_instance();

  void Swap(NewMessageNotify* other);

  // implements Message ----------------------------------------------

  NewMessageNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewMessageNotify& from);
  void MergeFrom(const NewMessageNotify& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Packet.NewMessageNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static NewMessageNotify* default_instance_;
};
// -------------------------------------------------------------------

class SignConfig : public ::google::protobuf::Message {
 public:
  SignConfig();
  virtual ~SignConfig();

  SignConfig(const SignConfig& from);

  inline SignConfig& operator=(const SignConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignConfig& default_instance();

  void Swap(SignConfig* other);

  // implements Message ----------------------------------------------

  SignConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignConfig& from);
  void MergeFrom(const SignConfig& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required string sign = 3;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 3;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // @@protoc_insertion_point(class_scope:Packet.SignConfig)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_sign();
  inline void clear_has_sign();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* type_;
  ::std::string* sign_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static SignConfig* default_instance_;
};
// -------------------------------------------------------------------

class UpdateSign : public ::google::protobuf::Message {
 public:
  UpdateSign();
  virtual ~UpdateSign();

  UpdateSign(const UpdateSign& from);

  inline UpdateSign& operator=(const UpdateSign& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateSign& default_instance();

  void Swap(UpdateSign* other);

  // implements Message ----------------------------------------------

  UpdateSign* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateSign& from);
  void MergeFrom(const UpdateSign& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 id = 1;
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id(int index) const;
  inline void set_id(int index, ::google::protobuf::int32 value);
  inline void add_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_id();

  // @@protoc_insertion_point(class_scope:Packet.UpdateSign)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static UpdateSign* default_instance_;
};
// -------------------------------------------------------------------

class GetMessageBoard : public ::google::protobuf::Message {
 public:
  GetMessageBoard();
  virtual ~GetMessageBoard();

  GetMessageBoard(const GetMessageBoard& from);

  inline GetMessageBoard& operator=(const GetMessageBoard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMessageBoard& default_instance();

  void Swap(GetMessageBoard* other);

  // implements Message ----------------------------------------------

  GetMessageBoard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetMessageBoard& from);
  void MergeFrom(const GetMessageBoard& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Packet.MessageBoard list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::Packet::MessageBoard& list(int index) const;
  inline ::Packet::MessageBoard* mutable_list(int index);
  inline ::Packet::MessageBoard* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::MessageBoard >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::MessageBoard >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:Packet.GetMessageBoard)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::MessageBoard > list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static GetMessageBoard* default_instance_;
};
// -------------------------------------------------------------------

class AddMessageBoard : public ::google::protobuf::Message {
 public:
  AddMessageBoard();
  virtual ~AddMessageBoard();

  AddMessageBoard(const AddMessageBoard& from);

  inline AddMessageBoard& operator=(const AddMessageBoard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddMessageBoard& default_instance();

  void Swap(AddMessageBoard* other);

  // implements Message ----------------------------------------------

  AddMessageBoard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddMessageBoard& from);
  void MergeFrom(const AddMessageBoard& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Packet.MessageBoard addmsg = 1;
  inline bool has_addmsg() const;
  inline void clear_addmsg();
  static const int kAddmsgFieldNumber = 1;
  inline const ::Packet::MessageBoard& addmsg() const;
  inline ::Packet::MessageBoard* mutable_addmsg();
  inline ::Packet::MessageBoard* release_addmsg();
  inline void set_allocated_addmsg(::Packet::MessageBoard* addmsg);

  // required bool self = 2;
  inline bool has_self() const;
  inline void clear_self();
  static const int kSelfFieldNumber = 2;
  inline bool self() const;
  inline void set_self(bool value);

  // @@protoc_insertion_point(class_scope:Packet.AddMessageBoard)
 private:
  inline void set_has_addmsg();
  inline void clear_has_addmsg();
  inline void set_has_self();
  inline void clear_has_self();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Packet::MessageBoard* addmsg_;
  bool self_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_FriendMail_2eproto();
  friend void protobuf_AssignDesc_FriendMail_2eproto();
  friend void protobuf_ShutdownFile_FriendMail_2eproto();

  void InitAsDefaultInstance();
  static AddMessageBoard* default_instance_;
};
// ===================================================================


// ===================================================================

// FriendInfotReq

// -------------------------------------------------------------------

// MessageListPlayerInfo

// required fixed64 player_guid = 1;
inline bool MessageListPlayerInfo::has_player_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageListPlayerInfo::set_has_player_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageListPlayerInfo::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageListPlayerInfo::clear_player_guid() {
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 MessageListPlayerInfo::player_guid() const {
  return player_guid_;
}
inline void MessageListPlayerInfo::set_player_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_player_guid();
  player_guid_ = value;
}

// required fixed64 msg_player_guid = 2;
inline bool MessageListPlayerInfo::has_msg_player_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageListPlayerInfo::set_has_msg_player_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessageListPlayerInfo::clear_has_msg_player_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageListPlayerInfo::clear_msg_player_guid() {
  msg_player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_msg_player_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 MessageListPlayerInfo::msg_player_guid() const {
  return msg_player_guid_;
}
inline void MessageListPlayerInfo::set_msg_player_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_msg_player_guid();
  msg_player_guid_ = value;
}

// required string msg_player_name = 3;
inline bool MessageListPlayerInfo::has_msg_player_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MessageListPlayerInfo::set_has_msg_player_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MessageListPlayerInfo::clear_has_msg_player_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MessageListPlayerInfo::clear_msg_player_name() {
  if (msg_player_name_ != &::google::protobuf::internal::kEmptyString) {
    msg_player_name_->clear();
  }
  clear_has_msg_player_name();
  SetDirty();
}
inline const ::std::string& MessageListPlayerInfo::msg_player_name() const {
  return *msg_player_name_;
}
inline void MessageListPlayerInfo::set_msg_player_name(const ::std::string& value) {
  SetDirty();
  set_has_msg_player_name();
  if (msg_player_name_ == &::google::protobuf::internal::kEmptyString) {
    msg_player_name_ = new ::std::string;
  }
  msg_player_name_->assign(value);
}
inline void MessageListPlayerInfo::set_msg_player_name(const char* value) {
  SetDirty();
  set_has_msg_player_name();
  if (msg_player_name_ == &::google::protobuf::internal::kEmptyString) {
    msg_player_name_ = new ::std::string;
  }
  msg_player_name_->assign(value);
}
inline void MessageListPlayerInfo::set_msg_player_name(const char* value, size_t size) {
  SetDirty();
  set_has_msg_player_name();
  if (msg_player_name_ == &::google::protobuf::internal::kEmptyString) {
    msg_player_name_ = new ::std::string;
  }
  msg_player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MessageListPlayerInfo::mutable_msg_player_name() {
  SetDirty();
  set_has_msg_player_name();
  if (msg_player_name_ == &::google::protobuf::internal::kEmptyString) {
    msg_player_name_ = new ::std::string;
  }
  return msg_player_name_;
}
inline ::std::string* MessageListPlayerInfo::release_msg_player_name() {
  SetDirty();
  clear_has_msg_player_name();
  if (msg_player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_player_name_;
    msg_player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MessageListPlayerInfo::set_allocated_msg_player_name(::std::string* msg_player_name) {
  SetDirty();
  if (msg_player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_player_name_;
  }
  if (msg_player_name) {
    set_has_msg_player_name();
    msg_player_name_ = msg_player_name;
  } else {
    clear_has_msg_player_name();
    msg_player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 msg_player_hair = 4;
inline bool MessageListPlayerInfo::has_msg_player_hair() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MessageListPlayerInfo::set_has_msg_player_hair() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MessageListPlayerInfo::clear_has_msg_player_hair() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MessageListPlayerInfo::clear_msg_player_hair() {
  msg_player_hair_ = 0;
  clear_has_msg_player_hair();
  SetDirty();
}
inline ::google::protobuf::int32 MessageListPlayerInfo::msg_player_hair() const {
  return msg_player_hair_;
}
inline void MessageListPlayerInfo::set_msg_player_hair(::google::protobuf::int32 value) {
  SetDirty();
  set_has_msg_player_hair();
  msg_player_hair_ = value;
}

// required int32 msg_player_level = 5;
inline bool MessageListPlayerInfo::has_msg_player_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MessageListPlayerInfo::set_has_msg_player_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MessageListPlayerInfo::clear_has_msg_player_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MessageListPlayerInfo::clear_msg_player_level() {
  msg_player_level_ = 0;
  clear_has_msg_player_level();
  SetDirty();
}
inline ::google::protobuf::int32 MessageListPlayerInfo::msg_player_level() const {
  return msg_player_level_;
}
inline void MessageListPlayerInfo::set_msg_player_level(::google::protobuf::int32 value) {
  SetDirty();
  set_has_msg_player_level();
  msg_player_level_ = value;
}

// -------------------------------------------------------------------

// FriendPlayer

// required fixed64 guid = 1;
inline bool FriendPlayer::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendPlayer::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendPlayer::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendPlayer::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 FriendPlayer::guid() const {
  return guid_;
}
inline void FriendPlayer::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// required fixed64 player_guid = 2;
inline bool FriendPlayer::has_player_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendPlayer::set_has_player_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendPlayer::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendPlayer::clear_player_guid() {
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 FriendPlayer::player_guid() const {
  return player_guid_;
}
inline void FriendPlayer::set_player_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_player_guid();
  player_guid_ = value;
}

// required fixed64 friend_guid = 3;
inline bool FriendPlayer::has_friend_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendPlayer::set_has_friend_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FriendPlayer::clear_has_friend_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FriendPlayer::clear_friend_guid() {
  friend_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_friend_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 FriendPlayer::friend_guid() const {
  return friend_guid_;
}
inline void FriendPlayer::set_friend_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_friend_guid();
  friend_guid_ = value;
}

// required int32 friendvalue = 4;
inline bool FriendPlayer::has_friendvalue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FriendPlayer::set_has_friendvalue() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FriendPlayer::clear_has_friendvalue() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FriendPlayer::clear_friendvalue() {
  friendvalue_ = 0;
  clear_has_friendvalue();
  SetDirty();
}
inline ::google::protobuf::int32 FriendPlayer::friendvalue() const {
  return friendvalue_;
}
inline void FriendPlayer::set_friendvalue(::google::protobuf::int32 value) {
  SetDirty();
  set_has_friendvalue();
  friendvalue_ = value;
}

// required int32 init_actor_id = 5;
inline bool FriendPlayer::has_init_actor_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FriendPlayer::set_has_init_actor_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FriendPlayer::clear_has_init_actor_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FriendPlayer::clear_init_actor_id() {
  init_actor_id_ = 0;
  clear_has_init_actor_id();
  SetDirty();
}
inline ::google::protobuf::int32 FriendPlayer::init_actor_id() const {
  return init_actor_id_;
}
inline void FriendPlayer::set_init_actor_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_init_actor_id();
  init_actor_id_ = value;
}

// required int32 hair = 6;
inline bool FriendPlayer::has_hair() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FriendPlayer::set_has_hair() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FriendPlayer::clear_has_hair() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FriendPlayer::clear_hair() {
  hair_ = 0;
  clear_has_hair();
  SetDirty();
}
inline ::google::protobuf::int32 FriendPlayer::hair() const {
  return hair_;
}
inline void FriendPlayer::set_hair(::google::protobuf::int32 value) {
  SetDirty();
  set_has_hair();
  hair_ = value;
}

// required string name = 7;
inline bool FriendPlayer::has_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FriendPlayer::set_has_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FriendPlayer::clear_has_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FriendPlayer::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
  SetDirty();
}
inline const ::std::string& FriendPlayer::name() const {
  return *name_;
}
inline void FriendPlayer::set_name(const ::std::string& value) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FriendPlayer::set_name(const char* value) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FriendPlayer::set_name(const char* value, size_t size) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendPlayer::mutable_name() {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FriendPlayer::release_name() {
  SetDirty();
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FriendPlayer::set_allocated_name(::std::string* name) {
  SetDirty();
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 level = 8;
inline bool FriendPlayer::has_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FriendPlayer::set_has_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FriendPlayer::clear_has_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FriendPlayer::clear_level() {
  level_ = 0;
  clear_has_level();
  SetDirty();
}
inline ::google::protobuf::int32 FriendPlayer::level() const {
  return level_;
}
inline void FriendPlayer::set_level(::google::protobuf::int32 value) {
  SetDirty();
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// ZoneInfo

// required fixed64 guid = 1;
inline bool ZoneInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZoneInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZoneInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZoneInfo::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 ZoneInfo::guid() const {
  return guid_;
}
inline void ZoneInfo::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// required string signature = 2;
inline bool ZoneInfo::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZoneInfo::set_has_signature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZoneInfo::clear_has_signature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZoneInfo::clear_signature() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    signature_->clear();
  }
  clear_has_signature();
  SetDirty();
}
inline const ::std::string& ZoneInfo::signature() const {
  return *signature_;
}
inline void ZoneInfo::set_signature(const ::std::string& value) {
  SetDirty();
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void ZoneInfo::set_signature(const char* value) {
  SetDirty();
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void ZoneInfo::set_signature(const char* value, size_t size) {
  SetDirty();
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZoneInfo::mutable_signature() {
  SetDirty();
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  return signature_;
}
inline ::std::string* ZoneInfo::release_signature() {
  SetDirty();
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZoneInfo::set_allocated_signature(::std::string* signature) {
  SetDirty();
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (signature) {
    set_has_signature();
    signature_ = signature;
  } else {
    clear_has_signature();
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 signid = 3;
inline int ZoneInfo::signid_size() const {
  return signid_.size();
}
inline void ZoneInfo::clear_signid() {
  signid_.Clear();
  SetDirty();
}
inline ::google::protobuf::int32 ZoneInfo::signid(int index) const {
  return signid_.Get(index);
}
inline void ZoneInfo::set_signid(int index, ::google::protobuf::int32 value) {
  SetDirty();
  signid_.Set(index, value);
}
inline void ZoneInfo::add_signid(::google::protobuf::int32 value) {
  SetDirty();
  signid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ZoneInfo::signid() const {
  return signid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ZoneInfo::mutable_signid() {
  SetDirty();
  return &signid_;
}

// required int32 popularity = 4;
inline bool ZoneInfo::has_popularity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ZoneInfo::set_has_popularity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ZoneInfo::clear_has_popularity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ZoneInfo::clear_popularity() {
  popularity_ = 0;
  clear_has_popularity();
  SetDirty();
}
inline ::google::protobuf::int32 ZoneInfo::popularity() const {
  return popularity_;
}
inline void ZoneInfo::set_popularity(::google::protobuf::int32 value) {
  SetDirty();
  set_has_popularity();
  popularity_ = value;
}

// required int32 celldata = 5;
inline bool ZoneInfo::has_celldata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ZoneInfo::set_has_celldata() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ZoneInfo::clear_has_celldata() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ZoneInfo::clear_celldata() {
  celldata_ = 0;
  clear_has_celldata();
  SetDirty();
}
inline ::google::protobuf::int32 ZoneInfo::celldata() const {
  return celldata_;
}
inline void ZoneInfo::set_celldata(::google::protobuf::int32 value) {
  SetDirty();
  set_has_celldata();
  celldata_ = value;
}

// -------------------------------------------------------------------

// MessageBoard

// required fixed64 guid = 1;
inline bool MessageBoard::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageBoard::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageBoard::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageBoard::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 MessageBoard::guid() const {
  return guid_;
}
inline void MessageBoard::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// required fixed64 owerid = 2;
inline bool MessageBoard::has_owerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageBoard::set_has_owerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessageBoard::clear_has_owerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageBoard::clear_owerid() {
  owerid_ = GOOGLE_ULONGLONG(0);
  clear_has_owerid();
  SetDirty();
}
inline ::google::protobuf::uint64 MessageBoard::owerid() const {
  return owerid_;
}
inline void MessageBoard::set_owerid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_owerid();
  owerid_ = value;
}

// required fixed64 playerid = 3;
inline bool MessageBoard::has_playerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MessageBoard::set_has_playerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MessageBoard::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MessageBoard::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
  clear_has_playerid();
  SetDirty();
}
inline ::google::protobuf::uint64 MessageBoard::playerid() const {
  return playerid_;
}
inline void MessageBoard::set_playerid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_playerid();
  playerid_ = value;
}

// required string playername = 4;
inline bool MessageBoard::has_playername() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MessageBoard::set_has_playername() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MessageBoard::clear_has_playername() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MessageBoard::clear_playername() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    playername_->clear();
  }
  clear_has_playername();
  SetDirty();
}
inline const ::std::string& MessageBoard::playername() const {
  return *playername_;
}
inline void MessageBoard::set_playername(const ::std::string& value) {
  SetDirty();
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void MessageBoard::set_playername(const char* value) {
  SetDirty();
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void MessageBoard::set_playername(const char* value, size_t size) {
  SetDirty();
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MessageBoard::mutable_playername() {
  SetDirty();
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  return playername_;
}
inline ::std::string* MessageBoard::release_playername() {
  SetDirty();
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MessageBoard::set_allocated_playername(::std::string* playername) {
  SetDirty();
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 playerhair = 5;
inline bool MessageBoard::has_playerhair() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MessageBoard::set_has_playerhair() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MessageBoard::clear_has_playerhair() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MessageBoard::clear_playerhair() {
  playerhair_ = 0;
  clear_has_playerhair();
  SetDirty();
}
inline ::google::protobuf::int32 MessageBoard::playerhair() const {
  return playerhair_;
}
inline void MessageBoard::set_playerhair(::google::protobuf::int32 value) {
  SetDirty();
  set_has_playerhair();
  playerhair_ = value;
}

// required int32 playerlevel = 6;
inline bool MessageBoard::has_playerlevel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MessageBoard::set_has_playerlevel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MessageBoard::clear_has_playerlevel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MessageBoard::clear_playerlevel() {
  playerlevel_ = 0;
  clear_has_playerlevel();
  SetDirty();
}
inline ::google::protobuf::int32 MessageBoard::playerlevel() const {
  return playerlevel_;
}
inline void MessageBoard::set_playerlevel(::google::protobuf::int32 value) {
  SetDirty();
  set_has_playerlevel();
  playerlevel_ = value;
}

// required string replyplayer = 7;
inline bool MessageBoard::has_replyplayer() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MessageBoard::set_has_replyplayer() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MessageBoard::clear_has_replyplayer() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MessageBoard::clear_replyplayer() {
  if (replyplayer_ != &::google::protobuf::internal::kEmptyString) {
    replyplayer_->clear();
  }
  clear_has_replyplayer();
  SetDirty();
}
inline const ::std::string& MessageBoard::replyplayer() const {
  return *replyplayer_;
}
inline void MessageBoard::set_replyplayer(const ::std::string& value) {
  SetDirty();
  set_has_replyplayer();
  if (replyplayer_ == &::google::protobuf::internal::kEmptyString) {
    replyplayer_ = new ::std::string;
  }
  replyplayer_->assign(value);
}
inline void MessageBoard::set_replyplayer(const char* value) {
  SetDirty();
  set_has_replyplayer();
  if (replyplayer_ == &::google::protobuf::internal::kEmptyString) {
    replyplayer_ = new ::std::string;
  }
  replyplayer_->assign(value);
}
inline void MessageBoard::set_replyplayer(const char* value, size_t size) {
  SetDirty();
  set_has_replyplayer();
  if (replyplayer_ == &::google::protobuf::internal::kEmptyString) {
    replyplayer_ = new ::std::string;
  }
  replyplayer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MessageBoard::mutable_replyplayer() {
  SetDirty();
  set_has_replyplayer();
  if (replyplayer_ == &::google::protobuf::internal::kEmptyString) {
    replyplayer_ = new ::std::string;
  }
  return replyplayer_;
}
inline ::std::string* MessageBoard::release_replyplayer() {
  SetDirty();
  clear_has_replyplayer();
  if (replyplayer_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = replyplayer_;
    replyplayer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MessageBoard::set_allocated_replyplayer(::std::string* replyplayer) {
  SetDirty();
  if (replyplayer_ != &::google::protobuf::internal::kEmptyString) {
    delete replyplayer_;
  }
  if (replyplayer) {
    set_has_replyplayer();
    replyplayer_ = replyplayer;
  } else {
    clear_has_replyplayer();
    replyplayer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string message = 8;
inline bool MessageBoard::has_message() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MessageBoard::set_has_message() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MessageBoard::clear_has_message() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MessageBoard::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
  SetDirty();
}
inline const ::std::string& MessageBoard::message() const {
  return *message_;
}
inline void MessageBoard::set_message(const ::std::string& value) {
  SetDirty();
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void MessageBoard::set_message(const char* value) {
  SetDirty();
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void MessageBoard::set_message(const char* value, size_t size) {
  SetDirty();
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MessageBoard::mutable_message() {
  SetDirty();
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* MessageBoard::release_message() {
  SetDirty();
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MessageBoard::set_allocated_message(::std::string* message) {
  SetDirty();
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required fixed32 date = 9;
inline bool MessageBoard::has_date() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MessageBoard::set_has_date() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MessageBoard::clear_has_date() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MessageBoard::clear_date() {
  date_ = 0u;
  clear_has_date();
  SetDirty();
}
inline ::google::protobuf::uint32 MessageBoard::date() const {
  return date_;
}
inline void MessageBoard::set_date(::google::protobuf::uint32 value) {
  SetDirty();
  set_has_date();
  date_ = value;
}

// -------------------------------------------------------------------

// MessagePlayerInfo

// required fixed64 source_guid = 1;
inline bool MessagePlayerInfo::has_source_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessagePlayerInfo::set_has_source_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessagePlayerInfo::clear_has_source_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessagePlayerInfo::clear_source_guid() {
  source_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_source_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 MessagePlayerInfo::source_guid() const {
  return source_guid_;
}
inline void MessagePlayerInfo::set_source_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_source_guid();
  source_guid_ = value;
}

// required string source_name = 2;
inline bool MessagePlayerInfo::has_source_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessagePlayerInfo::set_has_source_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessagePlayerInfo::clear_has_source_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessagePlayerInfo::clear_source_name() {
  if (source_name_ != &::google::protobuf::internal::kEmptyString) {
    source_name_->clear();
  }
  clear_has_source_name();
  SetDirty();
}
inline const ::std::string& MessagePlayerInfo::source_name() const {
  return *source_name_;
}
inline void MessagePlayerInfo::set_source_name(const ::std::string& value) {
  SetDirty();
  set_has_source_name();
  if (source_name_ == &::google::protobuf::internal::kEmptyString) {
    source_name_ = new ::std::string;
  }
  source_name_->assign(value);
}
inline void MessagePlayerInfo::set_source_name(const char* value) {
  SetDirty();
  set_has_source_name();
  if (source_name_ == &::google::protobuf::internal::kEmptyString) {
    source_name_ = new ::std::string;
  }
  source_name_->assign(value);
}
inline void MessagePlayerInfo::set_source_name(const char* value, size_t size) {
  SetDirty();
  set_has_source_name();
  if (source_name_ == &::google::protobuf::internal::kEmptyString) {
    source_name_ = new ::std::string;
  }
  source_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MessagePlayerInfo::mutable_source_name() {
  SetDirty();
  set_has_source_name();
  if (source_name_ == &::google::protobuf::internal::kEmptyString) {
    source_name_ = new ::std::string;
  }
  return source_name_;
}
inline ::std::string* MessagePlayerInfo::release_source_name() {
  SetDirty();
  clear_has_source_name();
  if (source_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = source_name_;
    source_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MessagePlayerInfo::set_allocated_source_name(::std::string* source_name) {
  SetDirty();
  if (source_name_ != &::google::protobuf::internal::kEmptyString) {
    delete source_name_;
  }
  if (source_name) {
    set_has_source_name();
    source_name_ = source_name;
  } else {
    clear_has_source_name();
    source_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 source_hair = 3;
inline bool MessagePlayerInfo::has_source_hair() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MessagePlayerInfo::set_has_source_hair() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MessagePlayerInfo::clear_has_source_hair() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MessagePlayerInfo::clear_source_hair() {
  source_hair_ = 0;
  clear_has_source_hair();
  SetDirty();
}
inline ::google::protobuf::int32 MessagePlayerInfo::source_hair() const {
  return source_hair_;
}
inline void MessagePlayerInfo::set_source_hair(::google::protobuf::int32 value) {
  SetDirty();
  set_has_source_hair();
  source_hair_ = value;
}

// optional string signature = 4;
inline bool MessagePlayerInfo::has_signature() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MessagePlayerInfo::set_has_signature() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MessagePlayerInfo::clear_has_signature() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MessagePlayerInfo::clear_signature() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    signature_->clear();
  }
  clear_has_signature();
  SetDirty();
}
inline const ::std::string& MessagePlayerInfo::signature() const {
  return *signature_;
}
inline void MessagePlayerInfo::set_signature(const ::std::string& value) {
  SetDirty();
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void MessagePlayerInfo::set_signature(const char* value) {
  SetDirty();
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void MessagePlayerInfo::set_signature(const char* value, size_t size) {
  SetDirty();
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MessagePlayerInfo::mutable_signature() {
  SetDirty();
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  return signature_;
}
inline ::std::string* MessagePlayerInfo::release_signature() {
  SetDirty();
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MessagePlayerInfo::set_allocated_signature(::std::string* signature) {
  SetDirty();
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (signature) {
    set_has_signature();
    signature_ = signature;
  } else {
    clear_has_signature();
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 init_actor_id = 5;
inline bool MessagePlayerInfo::has_init_actor_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MessagePlayerInfo::set_has_init_actor_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MessagePlayerInfo::clear_has_init_actor_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MessagePlayerInfo::clear_init_actor_id() {
  init_actor_id_ = 0;
  clear_has_init_actor_id();
  SetDirty();
}
inline ::google::protobuf::int32 MessagePlayerInfo::init_actor_id() const {
  return init_actor_id_;
}
inline void MessagePlayerInfo::set_init_actor_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_init_actor_id();
  init_actor_id_ = value;
}

// required int32 level = 6;
inline bool MessagePlayerInfo::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MessagePlayerInfo::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MessagePlayerInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MessagePlayerInfo::clear_level() {
  level_ = 0;
  clear_has_level();
  SetDirty();
}
inline ::google::protobuf::int32 MessagePlayerInfo::level() const {
  return level_;
}
inline void MessagePlayerInfo::set_level(::google::protobuf::int32 value) {
  SetDirty();
  set_has_level();
  level_ = value;
}

// optional bool havenew = 7;
inline bool MessagePlayerInfo::has_havenew() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MessagePlayerInfo::set_has_havenew() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MessagePlayerInfo::clear_has_havenew() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MessagePlayerInfo::clear_havenew() {
  havenew_ = false;
  clear_has_havenew();
  SetDirty();
}
inline bool MessagePlayerInfo::havenew() const {
  return havenew_;
}
inline void MessagePlayerInfo::set_havenew(bool value) {
  SetDirty();
  set_has_havenew();
  havenew_ = value;
}

// optional string guildname = 8;
inline bool MessagePlayerInfo::has_guildname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MessagePlayerInfo::set_has_guildname() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MessagePlayerInfo::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MessagePlayerInfo::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
  SetDirty();
}
inline const ::std::string& MessagePlayerInfo::guildname() const {
  return *guildname_;
}
inline void MessagePlayerInfo::set_guildname(const ::std::string& value) {
  SetDirty();
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void MessagePlayerInfo::set_guildname(const char* value) {
  SetDirty();
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void MessagePlayerInfo::set_guildname(const char* value, size_t size) {
  SetDirty();
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MessagePlayerInfo::mutable_guildname() {
  SetDirty();
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* MessagePlayerInfo::release_guildname() {
  SetDirty();
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MessagePlayerInfo::set_allocated_guildname(::std::string* guildname) {
  SetDirty();
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional fixed64 teamid = 9;
inline bool MessagePlayerInfo::has_teamid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MessagePlayerInfo::set_has_teamid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MessagePlayerInfo::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MessagePlayerInfo::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
  SetDirty();
}
inline ::google::protobuf::uint64 MessagePlayerInfo::teamid() const {
  return teamid_;
}
inline void MessagePlayerInfo::set_teamid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_teamid();
  teamid_ = value;
}

// optional int32 online = 10;
inline bool MessagePlayerInfo::has_online() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MessagePlayerInfo::set_has_online() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MessagePlayerInfo::clear_has_online() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MessagePlayerInfo::clear_online() {
  online_ = 0;
  clear_has_online();
  SetDirty();
}
inline ::google::protobuf::int32 MessagePlayerInfo::online() const {
  return online_;
}
inline void MessagePlayerInfo::set_online(::google::protobuf::int32 value) {
  SetDirty();
  set_has_online();
  online_ = value;
}

// -------------------------------------------------------------------

// ClientFriendMessageNotify

// repeated .Packet.MessagePlayerInfo notify = 1;
inline int ClientFriendMessageNotify::notify_size() const {
  return notify_.size();
}
inline void ClientFriendMessageNotify::clear_notify() {
  notify_.Clear();
  SetDirty();
}
inline const ::Packet::MessagePlayerInfo& ClientFriendMessageNotify::notify(int index) const {
  return notify_.Get(index);
}
inline ::Packet::MessagePlayerInfo* ClientFriendMessageNotify::mutable_notify(int index) {
  SetDirty();
  return notify_.Mutable(index);
}
inline ::Packet::MessagePlayerInfo* ClientFriendMessageNotify::add_notify() {
  SetDirty();
  return notify_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::MessagePlayerInfo >&
ClientFriendMessageNotify::notify() const {
  return notify_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::MessagePlayerInfo >*
ClientFriendMessageNotify::mutable_notify() {
  SetDirty();
  return &notify_;
}

// -------------------------------------------------------------------

// AddClientFriendMessageNotify

// required .Packet.MessagePlayerInfo notify = 1;
inline bool AddClientFriendMessageNotify::has_notify() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddClientFriendMessageNotify::set_has_notify() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddClientFriendMessageNotify::clear_has_notify() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddClientFriendMessageNotify::clear_notify() {
  if (notify_ != NULL) notify_->::Packet::MessagePlayerInfo::Clear();
  clear_has_notify();
  SetDirty();
}
inline const ::Packet::MessagePlayerInfo& AddClientFriendMessageNotify::notify() const {
  return notify_ != NULL ? *notify_ : *default_instance_->notify_;
}
inline ::Packet::MessagePlayerInfo* AddClientFriendMessageNotify::mutable_notify() {
  SetDirty();
  set_has_notify();
  if (notify_ == NULL) notify_ = new ::Packet::MessagePlayerInfo;
  return notify_;
}
inline ::Packet::MessagePlayerInfo* AddClientFriendMessageNotify::release_notify() {
  SetDirty();
  clear_has_notify();
  ::Packet::MessagePlayerInfo* temp = notify_;
  notify_ = NULL;
  return temp;
}
inline void AddClientFriendMessageNotify::set_allocated_notify(::Packet::MessagePlayerInfo* notify) {
  SetDirty();
  delete notify_;
  notify_ = notify;
  if (notify) {
    set_has_notify();
  } else {
    clear_has_notify();
  }
}

// -------------------------------------------------------------------

// DelClientFriendMessageNotifyRR

// required fixed64 source_guid = 1;
inline bool DelClientFriendMessageNotifyRR::has_source_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DelClientFriendMessageNotifyRR::set_has_source_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DelClientFriendMessageNotifyRR::clear_has_source_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DelClientFriendMessageNotifyRR::clear_source_guid() {
  source_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_source_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 DelClientFriendMessageNotifyRR::source_guid() const {
  return source_guid_;
}
inline void DelClientFriendMessageNotifyRR::set_source_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_source_guid();
  source_guid_ = value;
}

// -------------------------------------------------------------------

// ItemCount

// required int32 itemid = 1;
inline bool ItemCount::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemCount::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemCount::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemCount::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
  SetDirty();
}
inline ::google::protobuf::int32 ItemCount::itemid() const {
  return itemid_;
}
inline void ItemCount::set_itemid(::google::protobuf::int32 value) {
  SetDirty();
  set_has_itemid();
  itemid_ = value;
}

// required int32 itemcount = 2;
inline bool ItemCount::has_itemcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemCount::set_has_itemcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemCount::clear_has_itemcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemCount::clear_itemcount() {
  itemcount_ = 0;
  clear_has_itemcount();
  SetDirty();
}
inline ::google::protobuf::int32 ItemCount::itemcount() const {
  return itemcount_;
}
inline void ItemCount::set_itemcount(::google::protobuf::int32 value) {
  SetDirty();
  set_has_itemcount();
  itemcount_ = value;
}

// -------------------------------------------------------------------

// MessageInfo

// required fixed64 guid = 1;
inline bool MessageInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageInfo::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 MessageInfo::guid() const {
  return guid_;
}
inline void MessageInfo::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// required fixed64 owner_id = 2;
inline bool MessageInfo::has_owner_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageInfo::set_has_owner_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessageInfo::clear_has_owner_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageInfo::clear_owner_id() {
  owner_id_ = GOOGLE_ULONGLONG(0);
  clear_has_owner_id();
  SetDirty();
}
inline ::google::protobuf::uint64 MessageInfo::owner_id() const {
  return owner_id_;
}
inline void MessageInfo::set_owner_id(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_owner_id();
  owner_id_ = value;
}

// required fixed64 datetime = 3;
inline bool MessageInfo::has_datetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MessageInfo::set_has_datetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MessageInfo::clear_has_datetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MessageInfo::clear_datetime() {
  datetime_ = GOOGLE_ULONGLONG(0);
  clear_has_datetime();
  SetDirty();
}
inline ::google::protobuf::uint64 MessageInfo::datetime() const {
  return datetime_;
}
inline void MessageInfo::set_datetime(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_datetime();
  datetime_ = value;
}

// required fixed64 source_guid = 4;
inline bool MessageInfo::has_source_guid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MessageInfo::set_has_source_guid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MessageInfo::clear_has_source_guid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MessageInfo::clear_source_guid() {
  source_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_source_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 MessageInfo::source_guid() const {
  return source_guid_;
}
inline void MessageInfo::set_source_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_source_guid();
  source_guid_ = value;
}

// required string title = 5;
inline bool MessageInfo::has_title() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MessageInfo::set_has_title() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MessageInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MessageInfo::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
  SetDirty();
}
inline const ::std::string& MessageInfo::title() const {
  return *title_;
}
inline void MessageInfo::set_title(const ::std::string& value) {
  SetDirty();
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void MessageInfo::set_title(const char* value) {
  SetDirty();
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void MessageInfo::set_title(const char* value, size_t size) {
  SetDirty();
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MessageInfo::mutable_title() {
  SetDirty();
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* MessageInfo::release_title() {
  SetDirty();
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MessageInfo::set_allocated_title(::std::string* title) {
  SetDirty();
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes content = 6;
inline bool MessageInfo::has_content() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MessageInfo::set_has_content() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MessageInfo::clear_has_content() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MessageInfo::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
  SetDirty();
}
inline const ::std::string& MessageInfo::content() const {
  return *content_;
}
inline void MessageInfo::set_content(const ::std::string& value) {
  SetDirty();
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void MessageInfo::set_content(const char* value) {
  SetDirty();
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void MessageInfo::set_content(const void* value, size_t size) {
  SetDirty();
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MessageInfo::mutable_content() {
  SetDirty();
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* MessageInfo::release_content() {
  SetDirty();
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MessageInfo::set_allocated_content(::std::string* content) {
  SetDirty();
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 chat_time = 7;
inline bool MessageInfo::has_chat_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MessageInfo::set_has_chat_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MessageInfo::clear_has_chat_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MessageInfo::clear_chat_time() {
  chat_time_ = 0;
  clear_has_chat_time();
  SetDirty();
}
inline ::google::protobuf::int32 MessageInfo::chat_time() const {
  return chat_time_;
}
inline void MessageInfo::set_chat_time(::google::protobuf::int32 value) {
  SetDirty();
  set_has_chat_time();
  chat_time_ = value;
}

// repeated .Packet.ItemCount items = 8;
inline int MessageInfo::items_size() const {
  return items_.size();
}
inline void MessageInfo::clear_items() {
  items_.Clear();
  SetDirty();
}
inline const ::Packet::ItemCount& MessageInfo::items(int index) const {
  return items_.Get(index);
}
inline ::Packet::ItemCount* MessageInfo::mutable_items(int index) {
  SetDirty();
  return items_.Mutable(index);
}
inline ::Packet::ItemCount* MessageInfo::add_items() {
  SetDirty();
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::ItemCount >&
MessageInfo::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::ItemCount >*
MessageInfo::mutable_items() {
  SetDirty();
  return &items_;
}

// -------------------------------------------------------------------

// FriendMessageInfo

// required fixed64 guid = 1;
inline bool FriendMessageInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendMessageInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendMessageInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendMessageInfo::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 FriendMessageInfo::guid() const {
  return guid_;
}
inline void FriendMessageInfo::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// required .Packet.FriendMessageType type = 2;
inline bool FriendMessageInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendMessageInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendMessageInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendMessageInfo::clear_type() {
  type_ = 1;
  clear_has_type();
  SetDirty();
}
inline ::Packet::FriendMessageType FriendMessageInfo::type() const {
  return static_cast< ::Packet::FriendMessageType >(type_);
}
inline void FriendMessageInfo::set_type(::Packet::FriendMessageType value) {
  assert(::Packet::FriendMessageType_IsValid(value));
  SetDirty();
  set_has_type();
  type_ = value;
}

// required fixed64 receive_guid = 3;
inline bool FriendMessageInfo::has_receive_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendMessageInfo::set_has_receive_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FriendMessageInfo::clear_has_receive_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FriendMessageInfo::clear_receive_guid() {
  receive_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_receive_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 FriendMessageInfo::receive_guid() const {
  return receive_guid_;
}
inline void FriendMessageInfo::set_receive_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_receive_guid();
  receive_guid_ = value;
}

// required fixed64 datetime = 4;
inline bool FriendMessageInfo::has_datetime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FriendMessageInfo::set_has_datetime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FriendMessageInfo::clear_has_datetime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FriendMessageInfo::clear_datetime() {
  datetime_ = GOOGLE_ULONGLONG(0);
  clear_has_datetime();
  SetDirty();
}
inline ::google::protobuf::uint64 FriendMessageInfo::datetime() const {
  return datetime_;
}
inline void FriendMessageInfo::set_datetime(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_datetime();
  datetime_ = value;
}

// required fixed64 send_guid = 5;
inline bool FriendMessageInfo::has_send_guid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FriendMessageInfo::set_has_send_guid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FriendMessageInfo::clear_has_send_guid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FriendMessageInfo::clear_send_guid() {
  send_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_send_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 FriendMessageInfo::send_guid() const {
  return send_guid_;
}
inline void FriendMessageInfo::set_send_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_send_guid();
  send_guid_ = value;
}

// required bytes content = 6;
inline bool FriendMessageInfo::has_content() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FriendMessageInfo::set_has_content() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FriendMessageInfo::clear_has_content() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FriendMessageInfo::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
  SetDirty();
}
inline const ::std::string& FriendMessageInfo::content() const {
  return *content_;
}
inline void FriendMessageInfo::set_content(const ::std::string& value) {
  SetDirty();
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void FriendMessageInfo::set_content(const char* value) {
  SetDirty();
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void FriendMessageInfo::set_content(const void* value, size_t size) {
  SetDirty();
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendMessageInfo::mutable_content() {
  SetDirty();
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* FriendMessageInfo::release_content() {
  SetDirty();
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FriendMessageInfo::set_allocated_content(::std::string* content) {
  SetDirty();
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 chat_time = 7;
inline bool FriendMessageInfo::has_chat_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FriendMessageInfo::set_has_chat_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FriendMessageInfo::clear_has_chat_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FriendMessageInfo::clear_chat_time() {
  chat_time_ = 0;
  clear_has_chat_time();
  SetDirty();
}
inline ::google::protobuf::int32 FriendMessageInfo::chat_time() const {
  return chat_time_;
}
inline void FriendMessageInfo::set_chat_time(::google::protobuf::int32 value) {
  SetDirty();
  set_has_chat_time();
  chat_time_ = value;
}

// -------------------------------------------------------------------

// FriendInfo

// required fixed64 guid = 1;
inline bool FriendInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendInfo::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 FriendInfo::guid() const {
  return guid_;
}
inline void FriendInfo::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// required int32 init_actor_id = 3;
inline bool FriendInfo::has_init_actor_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendInfo::set_has_init_actor_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendInfo::clear_has_init_actor_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendInfo::clear_init_actor_id() {
  init_actor_id_ = 0;
  clear_has_init_actor_id();
  SetDirty();
}
inline ::google::protobuf::int32 FriendInfo::init_actor_id() const {
  return init_actor_id_;
}
inline void FriendInfo::set_init_actor_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_init_actor_id();
  init_actor_id_ = value;
}

// required int32 hair = 4;
inline bool FriendInfo::has_hair() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendInfo::set_has_hair() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FriendInfo::clear_has_hair() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FriendInfo::clear_hair() {
  hair_ = 0;
  clear_has_hair();
  SetDirty();
}
inline ::google::protobuf::int32 FriendInfo::hair() const {
  return hair_;
}
inline void FriendInfo::set_hair(::google::protobuf::int32 value) {
  SetDirty();
  set_has_hair();
  hair_ = value;
}

// required string name = 5;
inline bool FriendInfo::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FriendInfo::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FriendInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FriendInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
  SetDirty();
}
inline const ::std::string& FriendInfo::name() const {
  return *name_;
}
inline void FriendInfo::set_name(const ::std::string& value) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FriendInfo::set_name(const char* value) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FriendInfo::set_name(const char* value, size_t size) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendInfo::mutable_name() {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FriendInfo::release_name() {
  SetDirty();
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FriendInfo::set_allocated_name(::std::string* name) {
  SetDirty();
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 level = 6;
inline bool FriendInfo::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FriendInfo::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FriendInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FriendInfo::clear_level() {
  level_ = 0;
  clear_has_level();
  SetDirty();
}
inline ::google::protobuf::int32 FriendInfo::level() const {
  return level_;
}
inline void FriendInfo::set_level(::google::protobuf::int32 value) {
  SetDirty();
  set_has_level();
  level_ = value;
}

// required string signature = 7;
inline bool FriendInfo::has_signature() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FriendInfo::set_has_signature() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FriendInfo::clear_has_signature() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FriendInfo::clear_signature() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    signature_->clear();
  }
  clear_has_signature();
  SetDirty();
}
inline const ::std::string& FriendInfo::signature() const {
  return *signature_;
}
inline void FriendInfo::set_signature(const ::std::string& value) {
  SetDirty();
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void FriendInfo::set_signature(const char* value) {
  SetDirty();
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void FriendInfo::set_signature(const char* value, size_t size) {
  SetDirty();
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendInfo::mutable_signature() {
  SetDirty();
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  return signature_;
}
inline ::std::string* FriendInfo::release_signature() {
  SetDirty();
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FriendInfo::set_allocated_signature(::std::string* signature) {
  SetDirty();
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (signature) {
    set_has_signature();
    signature_ = signature;
  } else {
    clear_has_signature();
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string guildname = 8;
inline bool FriendInfo::has_guildname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FriendInfo::set_has_guildname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FriendInfo::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FriendInfo::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
  SetDirty();
}
inline const ::std::string& FriendInfo::guildname() const {
  return *guildname_;
}
inline void FriendInfo::set_guildname(const ::std::string& value) {
  SetDirty();
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void FriendInfo::set_guildname(const char* value) {
  SetDirty();
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void FriendInfo::set_guildname(const char* value, size_t size) {
  SetDirty();
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendInfo::mutable_guildname() {
  SetDirty();
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* FriendInfo::release_guildname() {
  SetDirty();
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FriendInfo::set_allocated_guildname(::std::string* guildname) {
  SetDirty();
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 friendvalue = 9;
inline bool FriendInfo::has_friendvalue() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FriendInfo::set_has_friendvalue() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FriendInfo::clear_has_friendvalue() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FriendInfo::clear_friendvalue() {
  friendvalue_ = 0;
  clear_has_friendvalue();
  SetDirty();
}
inline ::google::protobuf::int32 FriendInfo::friendvalue() const {
  return friendvalue_;
}
inline void FriendInfo::set_friendvalue(::google::protobuf::int32 value) {
  SetDirty();
  set_has_friendvalue();
  friendvalue_ = value;
}

// required fixed64 teamid = 10;
inline bool FriendInfo::has_teamid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FriendInfo::set_has_teamid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FriendInfo::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FriendInfo::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
  SetDirty();
}
inline ::google::protobuf::uint64 FriendInfo::teamid() const {
  return teamid_;
}
inline void FriendInfo::set_teamid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_teamid();
  teamid_ = value;
}

// required int32 online = 11;
inline bool FriendInfo::has_online() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FriendInfo::set_has_online() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FriendInfo::clear_has_online() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FriendInfo::clear_online() {
  online_ = 0;
  clear_has_online();
  SetDirty();
}
inline ::google::protobuf::int32 FriendInfo::online() const {
  return online_;
}
inline void FriendInfo::set_online(::google::protobuf::int32 value) {
  SetDirty();
  set_has_online();
  online_ = value;
}

// -------------------------------------------------------------------

// FriendInfotReply

// required .Packet.MessagesUpdate mailmessages = 1;
inline bool FriendInfotReply::has_mailmessages() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendInfotReply::set_has_mailmessages() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendInfotReply::clear_has_mailmessages() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendInfotReply::clear_mailmessages() {
  if (mailmessages_ != NULL) mailmessages_->::Packet::MessagesUpdate::Clear();
  clear_has_mailmessages();
  SetDirty();
}
inline const ::Packet::MessagesUpdate& FriendInfotReply::mailmessages() const {
  return mailmessages_ != NULL ? *mailmessages_ : *default_instance_->mailmessages_;
}
inline ::Packet::MessagesUpdate* FriendInfotReply::mutable_mailmessages() {
  SetDirty();
  set_has_mailmessages();
  if (mailmessages_ == NULL) mailmessages_ = new ::Packet::MessagesUpdate;
  return mailmessages_;
}
inline ::Packet::MessagesUpdate* FriendInfotReply::release_mailmessages() {
  SetDirty();
  clear_has_mailmessages();
  ::Packet::MessagesUpdate* temp = mailmessages_;
  mailmessages_ = NULL;
  return temp;
}
inline void FriendInfotReply::set_allocated_mailmessages(::Packet::MessagesUpdate* mailmessages) {
  SetDirty();
  delete mailmessages_;
  mailmessages_ = mailmessages;
  if (mailmessages) {
    set_has_mailmessages();
  } else {
    clear_has_mailmessages();
  }
}

// required .Packet.FriendListUpdate friends = 3;
inline bool FriendInfotReply::has_friends() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendInfotReply::set_has_friends() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendInfotReply::clear_has_friends() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendInfotReply::clear_friends() {
  if (friends_ != NULL) friends_->::Packet::FriendListUpdate::Clear();
  clear_has_friends();
  SetDirty();
}
inline const ::Packet::FriendListUpdate& FriendInfotReply::friends() const {
  return friends_ != NULL ? *friends_ : *default_instance_->friends_;
}
inline ::Packet::FriendListUpdate* FriendInfotReply::mutable_friends() {
  SetDirty();
  set_has_friends();
  if (friends_ == NULL) friends_ = new ::Packet::FriendListUpdate;
  return friends_;
}
inline ::Packet::FriendListUpdate* FriendInfotReply::release_friends() {
  SetDirty();
  clear_has_friends();
  ::Packet::FriendListUpdate* temp = friends_;
  friends_ = NULL;
  return temp;
}
inline void FriendInfotReply::set_allocated_friends(::Packet::FriendListUpdate* friends) {
  SetDirty();
  delete friends_;
  friends_ = friends;
  if (friends) {
    set_has_friends();
  } else {
    clear_has_friends();
  }
}

// required .Packet.RecommendsUpdate recommends = 4;
inline bool FriendInfotReply::has_recommends() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendInfotReply::set_has_recommends() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FriendInfotReply::clear_has_recommends() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FriendInfotReply::clear_recommends() {
  if (recommends_ != NULL) recommends_->::Packet::RecommendsUpdate::Clear();
  clear_has_recommends();
  SetDirty();
}
inline const ::Packet::RecommendsUpdate& FriendInfotReply::recommends() const {
  return recommends_ != NULL ? *recommends_ : *default_instance_->recommends_;
}
inline ::Packet::RecommendsUpdate* FriendInfotReply::mutable_recommends() {
  SetDirty();
  set_has_recommends();
  if (recommends_ == NULL) recommends_ = new ::Packet::RecommendsUpdate;
  return recommends_;
}
inline ::Packet::RecommendsUpdate* FriendInfotReply::release_recommends() {
  SetDirty();
  clear_has_recommends();
  ::Packet::RecommendsUpdate* temp = recommends_;
  recommends_ = NULL;
  return temp;
}
inline void FriendInfotReply::set_allocated_recommends(::Packet::RecommendsUpdate* recommends) {
  SetDirty();
  delete recommends_;
  recommends_ = recommends;
  if (recommends) {
    set_has_recommends();
  } else {
    clear_has_recommends();
  }
}

// required .Packet.ClientFriendMessageNotify notifyinfos = 5;
inline bool FriendInfotReply::has_notifyinfos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FriendInfotReply::set_has_notifyinfos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FriendInfotReply::clear_has_notifyinfos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FriendInfotReply::clear_notifyinfos() {
  if (notifyinfos_ != NULL) notifyinfos_->::Packet::ClientFriendMessageNotify::Clear();
  clear_has_notifyinfos();
  SetDirty();
}
inline const ::Packet::ClientFriendMessageNotify& FriendInfotReply::notifyinfos() const {
  return notifyinfos_ != NULL ? *notifyinfos_ : *default_instance_->notifyinfos_;
}
inline ::Packet::ClientFriendMessageNotify* FriendInfotReply::mutable_notifyinfos() {
  SetDirty();
  set_has_notifyinfos();
  if (notifyinfos_ == NULL) notifyinfos_ = new ::Packet::ClientFriendMessageNotify;
  return notifyinfos_;
}
inline ::Packet::ClientFriendMessageNotify* FriendInfotReply::release_notifyinfos() {
  SetDirty();
  clear_has_notifyinfos();
  ::Packet::ClientFriendMessageNotify* temp = notifyinfos_;
  notifyinfos_ = NULL;
  return temp;
}
inline void FriendInfotReply::set_allocated_notifyinfos(::Packet::ClientFriendMessageNotify* notifyinfos) {
  SetDirty();
  delete notifyinfos_;
  notifyinfos_ = notifyinfos;
  if (notifyinfos) {
    set_has_notifyinfos();
  } else {
    clear_has_notifyinfos();
  }
}

// optional .Packet.ZoneInfo zoneinfo = 6;
inline bool FriendInfotReply::has_zoneinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FriendInfotReply::set_has_zoneinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FriendInfotReply::clear_has_zoneinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FriendInfotReply::clear_zoneinfo() {
  if (zoneinfo_ != NULL) zoneinfo_->::Packet::ZoneInfo::Clear();
  clear_has_zoneinfo();
  SetDirty();
}
inline const ::Packet::ZoneInfo& FriendInfotReply::zoneinfo() const {
  return zoneinfo_ != NULL ? *zoneinfo_ : *default_instance_->zoneinfo_;
}
inline ::Packet::ZoneInfo* FriendInfotReply::mutable_zoneinfo() {
  SetDirty();
  set_has_zoneinfo();
  if (zoneinfo_ == NULL) zoneinfo_ = new ::Packet::ZoneInfo;
  return zoneinfo_;
}
inline ::Packet::ZoneInfo* FriendInfotReply::release_zoneinfo() {
  SetDirty();
  clear_has_zoneinfo();
  ::Packet::ZoneInfo* temp = zoneinfo_;
  zoneinfo_ = NULL;
  return temp;
}
inline void FriendInfotReply::set_allocated_zoneinfo(::Packet::ZoneInfo* zoneinfo) {
  SetDirty();
  delete zoneinfo_;
  zoneinfo_ = zoneinfo;
  if (zoneinfo) {
    set_has_zoneinfo();
  } else {
    clear_has_zoneinfo();
  }
}

// repeated .Packet.MessageBoard msgs = 7;
inline int FriendInfotReply::msgs_size() const {
  return msgs_.size();
}
inline void FriendInfotReply::clear_msgs() {
  msgs_.Clear();
  SetDirty();
}
inline const ::Packet::MessageBoard& FriendInfotReply::msgs(int index) const {
  return msgs_.Get(index);
}
inline ::Packet::MessageBoard* FriendInfotReply::mutable_msgs(int index) {
  SetDirty();
  return msgs_.Mutable(index);
}
inline ::Packet::MessageBoard* FriendInfotReply::add_msgs() {
  SetDirty();
  return msgs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::MessageBoard >&
FriendInfotReply::msgs() const {
  return msgs_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::MessageBoard >*
FriendInfotReply::mutable_msgs() {
  SetDirty();
  return &msgs_;
}

// repeated .Packet.FriendMessageInfo offlinemsgs = 8;
inline int FriendInfotReply::offlinemsgs_size() const {
  return offlinemsgs_.size();
}
inline void FriendInfotReply::clear_offlinemsgs() {
  offlinemsgs_.Clear();
  SetDirty();
}
inline const ::Packet::FriendMessageInfo& FriendInfotReply::offlinemsgs(int index) const {
  return offlinemsgs_.Get(index);
}
inline ::Packet::FriendMessageInfo* FriendInfotReply::mutable_offlinemsgs(int index) {
  SetDirty();
  return offlinemsgs_.Mutable(index);
}
inline ::Packet::FriendMessageInfo* FriendInfotReply::add_offlinemsgs() {
  SetDirty();
  return offlinemsgs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::FriendMessageInfo >&
FriendInfotReply::offlinemsgs() const {
  return offlinemsgs_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::FriendMessageInfo >*
FriendInfotReply::mutable_offlinemsgs() {
  SetDirty();
  return &offlinemsgs_;
}

// -------------------------------------------------------------------

// RecommendReq

// -------------------------------------------------------------------

// FriendListReq

// -------------------------------------------------------------------

// FindPlayerInfo

// required fixed64 guid = 1;
inline bool FindPlayerInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FindPlayerInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FindPlayerInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FindPlayerInfo::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 FindPlayerInfo::guid() const {
  return guid_;
}
inline void FindPlayerInfo::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// required string name = 2;
inline bool FindPlayerInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FindPlayerInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FindPlayerInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FindPlayerInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
  SetDirty();
}
inline const ::std::string& FindPlayerInfo::name() const {
  return *name_;
}
inline void FindPlayerInfo::set_name(const ::std::string& value) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FindPlayerInfo::set_name(const char* value) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FindPlayerInfo::set_name(const char* value, size_t size) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FindPlayerInfo::mutable_name() {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FindPlayerInfo::release_name() {
  SetDirty();
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FindPlayerInfo::set_allocated_name(::std::string* name) {
  SetDirty();
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 hair = 3;
inline bool FindPlayerInfo::has_hair() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FindPlayerInfo::set_has_hair() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FindPlayerInfo::clear_has_hair() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FindPlayerInfo::clear_hair() {
  hair_ = 0;
  clear_has_hair();
  SetDirty();
}
inline ::google::protobuf::int32 FindPlayerInfo::hair() const {
  return hair_;
}
inline void FindPlayerInfo::set_hair(::google::protobuf::int32 value) {
  SetDirty();
  set_has_hair();
  hair_ = value;
}

// required int32 level = 4;
inline bool FindPlayerInfo::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FindPlayerInfo::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FindPlayerInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FindPlayerInfo::clear_level() {
  level_ = 0;
  clear_has_level();
  SetDirty();
}
inline ::google::protobuf::int32 FindPlayerInfo::level() const {
  return level_;
}
inline void FindPlayerInfo::set_level(::google::protobuf::int32 value) {
  SetDirty();
  set_has_level();
  level_ = value;
}

// required int32 init_actor_id = 5;
inline bool FindPlayerInfo::has_init_actor_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FindPlayerInfo::set_has_init_actor_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FindPlayerInfo::clear_has_init_actor_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FindPlayerInfo::clear_init_actor_id() {
  init_actor_id_ = 0;
  clear_has_init_actor_id();
  SetDirty();
}
inline ::google::protobuf::int32 FindPlayerInfo::init_actor_id() const {
  return init_actor_id_;
}
inline void FindPlayerInfo::set_init_actor_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_init_actor_id();
  init_actor_id_ = value;
}

// -------------------------------------------------------------------

// FindFriendByNameReq

// required string name = 1;
inline bool FindFriendByNameReq::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FindFriendByNameReq::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FindFriendByNameReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FindFriendByNameReq::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
  SetDirty();
}
inline const ::std::string& FindFriendByNameReq::name() const {
  return *name_;
}
inline void FindFriendByNameReq::set_name(const ::std::string& value) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FindFriendByNameReq::set_name(const char* value) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FindFriendByNameReq::set_name(const char* value, size_t size) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FindFriendByNameReq::mutable_name() {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FindFriendByNameReq::release_name() {
  SetDirty();
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FindFriendByNameReq::set_allocated_name(::std::string* name) {
  SetDirty();
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FindFriendByGuidReq

// required fixed64 guid = 1;
inline bool FindFriendByGuidReq::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FindFriendByGuidReq::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FindFriendByGuidReq::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FindFriendByGuidReq::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 FindFriendByGuidReq::guid() const {
  return guid_;
}
inline void FindFriendByGuidReq::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// -------------------------------------------------------------------

// FindFriendReply

// required .Packet.FindPlayerInfo info = 1;
inline bool FindFriendReply::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FindFriendReply::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FindFriendReply::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FindFriendReply::clear_info() {
  if (info_ != NULL) info_->::Packet::FindPlayerInfo::Clear();
  clear_has_info();
  SetDirty();
}
inline const ::Packet::FindPlayerInfo& FindFriendReply::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::Packet::FindPlayerInfo* FindFriendReply::mutable_info() {
  SetDirty();
  set_has_info();
  if (info_ == NULL) info_ = new ::Packet::FindPlayerInfo;
  return info_;
}
inline ::Packet::FindPlayerInfo* FindFriendReply::release_info() {
  SetDirty();
  clear_has_info();
  ::Packet::FindPlayerInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void FindFriendReply::set_allocated_info(::Packet::FindPlayerInfo* info) {
  SetDirty();
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// FriendListUpdate

// repeated .Packet.FriendInfo friends = 1;
inline int FriendListUpdate::friends_size() const {
  return friends_.size();
}
inline void FriendListUpdate::clear_friends() {
  friends_.Clear();
  SetDirty();
}
inline const ::Packet::FriendInfo& FriendListUpdate::friends(int index) const {
  return friends_.Get(index);
}
inline ::Packet::FriendInfo* FriendListUpdate::mutable_friends(int index) {
  SetDirty();
  return friends_.Mutable(index);
}
inline ::Packet::FriendInfo* FriendListUpdate::add_friends() {
  SetDirty();
  return friends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::FriendInfo >&
FriendListUpdate::friends() const {
  return friends_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::FriendInfo >*
FriendListUpdate::mutable_friends() {
  SetDirty();
  return &friends_;
}

// -------------------------------------------------------------------

// RecommendsUpdate

// repeated .Packet.FriendInfo recommends = 1;
inline int RecommendsUpdate::recommends_size() const {
  return recommends_.size();
}
inline void RecommendsUpdate::clear_recommends() {
  recommends_.Clear();
  SetDirty();
}
inline const ::Packet::FriendInfo& RecommendsUpdate::recommends(int index) const {
  return recommends_.Get(index);
}
inline ::Packet::FriendInfo* RecommendsUpdate::mutable_recommends(int index) {
  SetDirty();
  return recommends_.Mutable(index);
}
inline ::Packet::FriendInfo* RecommendsUpdate::add_recommends() {
  SetDirty();
  return recommends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::FriendInfo >&
RecommendsUpdate::recommends() const {
  return recommends_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::FriendInfo >*
RecommendsUpdate::mutable_recommends() {
  SetDirty();
  return &recommends_;
}

// -------------------------------------------------------------------

// MessagesUpdate

// repeated .Packet.MessageInfo messages = 1;
inline int MessagesUpdate::messages_size() const {
  return messages_.size();
}
inline void MessagesUpdate::clear_messages() {
  messages_.Clear();
  SetDirty();
}
inline const ::Packet::MessageInfo& MessagesUpdate::messages(int index) const {
  return messages_.Get(index);
}
inline ::Packet::MessageInfo* MessagesUpdate::mutable_messages(int index) {
  SetDirty();
  return messages_.Mutable(index);
}
inline ::Packet::MessageInfo* MessagesUpdate::add_messages() {
  SetDirty();
  return messages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::MessageInfo >&
MessagesUpdate::messages() const {
  return messages_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::MessageInfo >*
MessagesUpdate::mutable_messages() {
  SetDirty();
  return &messages_;
}

// -------------------------------------------------------------------

// AddFriendMessagesReply

// required .Packet.FriendMessageInfo messages = 1;
inline bool AddFriendMessagesReply::has_messages() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddFriendMessagesReply::set_has_messages() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddFriendMessagesReply::clear_has_messages() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddFriendMessagesReply::clear_messages() {
  if (messages_ != NULL) messages_->::Packet::FriendMessageInfo::Clear();
  clear_has_messages();
  SetDirty();
}
inline const ::Packet::FriendMessageInfo& AddFriendMessagesReply::messages() const {
  return messages_ != NULL ? *messages_ : *default_instance_->messages_;
}
inline ::Packet::FriendMessageInfo* AddFriendMessagesReply::mutable_messages() {
  SetDirty();
  set_has_messages();
  if (messages_ == NULL) messages_ = new ::Packet::FriendMessageInfo;
  return messages_;
}
inline ::Packet::FriendMessageInfo* AddFriendMessagesReply::release_messages() {
  SetDirty();
  clear_has_messages();
  ::Packet::FriendMessageInfo* temp = messages_;
  messages_ = NULL;
  return temp;
}
inline void AddFriendMessagesReply::set_allocated_messages(::Packet::FriendMessageInfo* messages) {
  SetDirty();
  delete messages_;
  messages_ = messages;
  if (messages) {
    set_has_messages();
  } else {
    clear_has_messages();
  }
}

// -------------------------------------------------------------------

// FriendMessageReq

// required fixed64 player_guid = 1;
inline bool FriendMessageReq::has_player_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendMessageReq::set_has_player_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendMessageReq::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendMessageReq::clear_player_guid() {
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 FriendMessageReq::player_guid() const {
  return player_guid_;
}
inline void FriendMessageReq::set_player_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_player_guid();
  player_guid_ = value;
}

// required bytes chat_message = 2;
inline bool FriendMessageReq::has_chat_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendMessageReq::set_has_chat_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendMessageReq::clear_has_chat_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendMessageReq::clear_chat_message() {
  if (chat_message_ != &::google::protobuf::internal::kEmptyString) {
    chat_message_->clear();
  }
  clear_has_chat_message();
  SetDirty();
}
inline const ::std::string& FriendMessageReq::chat_message() const {
  return *chat_message_;
}
inline void FriendMessageReq::set_chat_message(const ::std::string& value) {
  SetDirty();
  set_has_chat_message();
  if (chat_message_ == &::google::protobuf::internal::kEmptyString) {
    chat_message_ = new ::std::string;
  }
  chat_message_->assign(value);
}
inline void FriendMessageReq::set_chat_message(const char* value) {
  SetDirty();
  set_has_chat_message();
  if (chat_message_ == &::google::protobuf::internal::kEmptyString) {
    chat_message_ = new ::std::string;
  }
  chat_message_->assign(value);
}
inline void FriendMessageReq::set_chat_message(const void* value, size_t size) {
  SetDirty();
  set_has_chat_message();
  if (chat_message_ == &::google::protobuf::internal::kEmptyString) {
    chat_message_ = new ::std::string;
  }
  chat_message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendMessageReq::mutable_chat_message() {
  SetDirty();
  set_has_chat_message();
  if (chat_message_ == &::google::protobuf::internal::kEmptyString) {
    chat_message_ = new ::std::string;
  }
  return chat_message_;
}
inline ::std::string* FriendMessageReq::release_chat_message() {
  SetDirty();
  clear_has_chat_message();
  if (chat_message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = chat_message_;
    chat_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FriendMessageReq::set_allocated_chat_message(::std::string* chat_message) {
  SetDirty();
  if (chat_message_ != &::google::protobuf::internal::kEmptyString) {
    delete chat_message_;
  }
  if (chat_message) {
    set_has_chat_message();
    chat_message_ = chat_message;
  } else {
    clear_has_chat_message();
    chat_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 chat_time = 3;
inline bool FriendMessageReq::has_chat_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendMessageReq::set_has_chat_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FriendMessageReq::clear_has_chat_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FriendMessageReq::clear_chat_time() {
  chat_time_ = 0;
  clear_has_chat_time();
  SetDirty();
}
inline ::google::protobuf::int32 FriendMessageReq::chat_time() const {
  return chat_time_;
}
inline void FriendMessageReq::set_chat_time(::google::protobuf::int32 value) {
  SetDirty();
  set_has_chat_time();
  chat_time_ = value;
}

// -------------------------------------------------------------------

// SetZoneSignatureReq

// required string signature = 1;
inline bool SetZoneSignatureReq::has_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetZoneSignatureReq::set_has_signature() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetZoneSignatureReq::clear_has_signature() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetZoneSignatureReq::clear_signature() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    signature_->clear();
  }
  clear_has_signature();
  SetDirty();
}
inline const ::std::string& SetZoneSignatureReq::signature() const {
  return *signature_;
}
inline void SetZoneSignatureReq::set_signature(const ::std::string& value) {
  SetDirty();
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void SetZoneSignatureReq::set_signature(const char* value) {
  SetDirty();
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void SetZoneSignatureReq::set_signature(const char* value, size_t size) {
  SetDirty();
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetZoneSignatureReq::mutable_signature() {
  SetDirty();
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  return signature_;
}
inline ::std::string* SetZoneSignatureReq::release_signature() {
  SetDirty();
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SetZoneSignatureReq::set_allocated_signature(::std::string* signature) {
  SetDirty();
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (signature) {
    set_has_signature();
    signature_ = signature;
  } else {
    clear_has_signature();
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SignatureUpdate

// required string signature = 1;
inline bool SignatureUpdate::has_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignatureUpdate::set_has_signature() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignatureUpdate::clear_has_signature() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignatureUpdate::clear_signature() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    signature_->clear();
  }
  clear_has_signature();
  SetDirty();
}
inline const ::std::string& SignatureUpdate::signature() const {
  return *signature_;
}
inline void SignatureUpdate::set_signature(const ::std::string& value) {
  SetDirty();
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void SignatureUpdate::set_signature(const char* value) {
  SetDirty();
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void SignatureUpdate::set_signature(const char* value, size_t size) {
  SetDirty();
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SignatureUpdate::mutable_signature() {
  SetDirty();
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  return signature_;
}
inline ::std::string* SignatureUpdate::release_signature() {
  SetDirty();
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SignatureUpdate::set_allocated_signature(::std::string* signature) {
  SetDirty();
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (signature) {
    set_has_signature();
    signature_ = signature;
  } else {
    clear_has_signature();
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AddFriendReq

// required fixed64 player_guid = 1;
inline bool AddFriendReq::has_player_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddFriendReq::set_has_player_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddFriendReq::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddFriendReq::clear_player_guid() {
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 AddFriendReq::player_guid() const {
  return player_guid_;
}
inline void AddFriendReq::set_player_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_player_guid();
  player_guid_ = value;
}

// -------------------------------------------------------------------

// DelFriendReq

// required fixed64 player_guid = 1;
inline bool DelFriendReq::has_player_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DelFriendReq::set_has_player_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DelFriendReq::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DelFriendReq::clear_player_guid() {
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 DelFriendReq::player_guid() const {
  return player_guid_;
}
inline void DelFriendReq::set_player_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_player_guid();
  player_guid_ = value;
}

// -------------------------------------------------------------------

// AskTeamReq

// required fixed64 player_guid = 1;
inline bool AskTeamReq::has_player_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskTeamReq::set_has_player_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskTeamReq::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskTeamReq::clear_player_guid() {
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 AskTeamReq::player_guid() const {
  return player_guid_;
}
inline void AskTeamReq::set_player_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_player_guid();
  player_guid_ = value;
}

// -------------------------------------------------------------------

// AskGuildReq

// required fixed64 player_guid = 1;
inline bool AskGuildReq::has_player_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AskGuildReq::set_has_player_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AskGuildReq::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AskGuildReq::clear_player_guid() {
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 AskGuildReq::player_guid() const {
  return player_guid_;
}
inline void AskGuildReq::set_player_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_player_guid();
  player_guid_ = value;
}

// -------------------------------------------------------------------

// SendGiftReq

// required fixed64 player_guid = 1;
inline bool SendGiftReq::has_player_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendGiftReq::set_has_player_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendGiftReq::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendGiftReq::clear_player_guid() {
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 SendGiftReq::player_guid() const {
  return player_guid_;
}
inline void SendGiftReq::set_player_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_player_guid();
  player_guid_ = value;
}

// repeated .Packet.ItemCount items = 2;
inline int SendGiftReq::items_size() const {
  return items_.size();
}
inline void SendGiftReq::clear_items() {
  items_.Clear();
  SetDirty();
}
inline const ::Packet::ItemCount& SendGiftReq::items(int index) const {
  return items_.Get(index);
}
inline ::Packet::ItemCount* SendGiftReq::mutable_items(int index) {
  SetDirty();
  return items_.Mutable(index);
}
inline ::Packet::ItemCount* SendGiftReq::add_items() {
  SetDirty();
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::ItemCount >&
SendGiftReq::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::ItemCount >*
SendGiftReq::mutable_items() {
  SetDirty();
  return &items_;
}

// -------------------------------------------------------------------

// ViewZoneReq

// required fixed64 player_guid = 1;
inline bool ViewZoneReq::has_player_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ViewZoneReq::set_has_player_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ViewZoneReq::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ViewZoneReq::clear_player_guid() {
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 ViewZoneReq::player_guid() const {
  return player_guid_;
}
inline void ViewZoneReq::set_player_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_player_guid();
  player_guid_ = value;
}

// -------------------------------------------------------------------

// ZoneBaseInfo

// required fixed64 player_guid = 1;
inline bool ZoneBaseInfo::has_player_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZoneBaseInfo::set_has_player_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZoneBaseInfo::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZoneBaseInfo::clear_player_guid() {
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 ZoneBaseInfo::player_guid() const {
  return player_guid_;
}
inline void ZoneBaseInfo::set_player_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_player_guid();
  player_guid_ = value;
}

// required string player_name = 2;
inline bool ZoneBaseInfo::has_player_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZoneBaseInfo::set_has_player_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZoneBaseInfo::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZoneBaseInfo::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
  SetDirty();
}
inline const ::std::string& ZoneBaseInfo::player_name() const {
  return *player_name_;
}
inline void ZoneBaseInfo::set_player_name(const ::std::string& value) {
  SetDirty();
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void ZoneBaseInfo::set_player_name(const char* value) {
  SetDirty();
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void ZoneBaseInfo::set_player_name(const char* value, size_t size) {
  SetDirty();
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZoneBaseInfo::mutable_player_name() {
  SetDirty();
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* ZoneBaseInfo::release_player_name() {
  SetDirty();
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZoneBaseInfo::set_allocated_player_name(::std::string* player_name) {
  SetDirty();
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 player_hair = 3;
inline bool ZoneBaseInfo::has_player_hair() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZoneBaseInfo::set_has_player_hair() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ZoneBaseInfo::clear_has_player_hair() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ZoneBaseInfo::clear_player_hair() {
  player_hair_ = 0;
  clear_has_player_hair();
  SetDirty();
}
inline ::google::protobuf::int32 ZoneBaseInfo::player_hair() const {
  return player_hair_;
}
inline void ZoneBaseInfo::set_player_hair(::google::protobuf::int32 value) {
  SetDirty();
  set_has_player_hair();
  player_hair_ = value;
}

// required int32 init_actor_id = 4;
inline bool ZoneBaseInfo::has_init_actor_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ZoneBaseInfo::set_has_init_actor_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ZoneBaseInfo::clear_has_init_actor_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ZoneBaseInfo::clear_init_actor_id() {
  init_actor_id_ = 0;
  clear_has_init_actor_id();
  SetDirty();
}
inline ::google::protobuf::int32 ZoneBaseInfo::init_actor_id() const {
  return init_actor_id_;
}
inline void ZoneBaseInfo::set_init_actor_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_init_actor_id();
  init_actor_id_ = value;
}

// required int32 level = 5;
inline bool ZoneBaseInfo::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ZoneBaseInfo::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ZoneBaseInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ZoneBaseInfo::clear_level() {
  level_ = 0;
  clear_has_level();
  SetDirty();
}
inline ::google::protobuf::int32 ZoneBaseInfo::level() const {
  return level_;
}
inline void ZoneBaseInfo::set_level(::google::protobuf::int32 value) {
  SetDirty();
  set_has_level();
  level_ = value;
}

// required string guildname = 6;
inline bool ZoneBaseInfo::has_guildname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ZoneBaseInfo::set_has_guildname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ZoneBaseInfo::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ZoneBaseInfo::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
  SetDirty();
}
inline const ::std::string& ZoneBaseInfo::guildname() const {
  return *guildname_;
}
inline void ZoneBaseInfo::set_guildname(const ::std::string& value) {
  SetDirty();
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void ZoneBaseInfo::set_guildname(const char* value) {
  SetDirty();
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void ZoneBaseInfo::set_guildname(const char* value, size_t size) {
  SetDirty();
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZoneBaseInfo::mutable_guildname() {
  SetDirty();
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* ZoneBaseInfo::release_guildname() {
  SetDirty();
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZoneBaseInfo::set_allocated_guildname(::std::string* guildname) {
  SetDirty();
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ViewZoneReply

// required .Packet.ZoneBaseInfo base_info = 1;
inline bool ViewZoneReply::has_base_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ViewZoneReply::set_has_base_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ViewZoneReply::clear_has_base_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ViewZoneReply::clear_base_info() {
  if (base_info_ != NULL) base_info_->::Packet::ZoneBaseInfo::Clear();
  clear_has_base_info();
  SetDirty();
}
inline const ::Packet::ZoneBaseInfo& ViewZoneReply::base_info() const {
  return base_info_ != NULL ? *base_info_ : *default_instance_->base_info_;
}
inline ::Packet::ZoneBaseInfo* ViewZoneReply::mutable_base_info() {
  SetDirty();
  set_has_base_info();
  if (base_info_ == NULL) base_info_ = new ::Packet::ZoneBaseInfo;
  return base_info_;
}
inline ::Packet::ZoneBaseInfo* ViewZoneReply::release_base_info() {
  SetDirty();
  clear_has_base_info();
  ::Packet::ZoneBaseInfo* temp = base_info_;
  base_info_ = NULL;
  return temp;
}
inline void ViewZoneReply::set_allocated_base_info(::Packet::ZoneBaseInfo* base_info) {
  SetDirty();
  delete base_info_;
  base_info_ = base_info;
  if (base_info) {
    set_has_base_info();
  } else {
    clear_has_base_info();
  }
}

// repeated .Packet.EquipItem main_equips = 4;
inline int ViewZoneReply::main_equips_size() const {
  return main_equips_.size();
}
inline void ViewZoneReply::clear_main_equips() {
  main_equips_.Clear();
  SetDirty();
}
inline const ::Packet::EquipItem& ViewZoneReply::main_equips(int index) const {
  return main_equips_.Get(index);
}
inline ::Packet::EquipItem* ViewZoneReply::mutable_main_equips(int index) {
  SetDirty();
  return main_equips_.Mutable(index);
}
inline ::Packet::EquipItem* ViewZoneReply::add_main_equips() {
  SetDirty();
  return main_equips_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::EquipItem >&
ViewZoneReply::main_equips() const {
  return main_equips_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::EquipItem >*
ViewZoneReply::mutable_main_equips() {
  SetDirty();
  return &main_equips_;
}

// repeated .Packet.MessageBoard msgs = 5;
inline int ViewZoneReply::msgs_size() const {
  return msgs_.size();
}
inline void ViewZoneReply::clear_msgs() {
  msgs_.Clear();
  SetDirty();
}
inline const ::Packet::MessageBoard& ViewZoneReply::msgs(int index) const {
  return msgs_.Get(index);
}
inline ::Packet::MessageBoard* ViewZoneReply::mutable_msgs(int index) {
  SetDirty();
  return msgs_.Mutable(index);
}
inline ::Packet::MessageBoard* ViewZoneReply::add_msgs() {
  SetDirty();
  return msgs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::MessageBoard >&
ViewZoneReply::msgs() const {
  return msgs_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::MessageBoard >*
ViewZoneReply::mutable_msgs() {
  SetDirty();
  return &msgs_;
}

// required .Packet.ZoneInfo zoneinfo = 6;
inline bool ViewZoneReply::has_zoneinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ViewZoneReply::set_has_zoneinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ViewZoneReply::clear_has_zoneinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ViewZoneReply::clear_zoneinfo() {
  if (zoneinfo_ != NULL) zoneinfo_->::Packet::ZoneInfo::Clear();
  clear_has_zoneinfo();
  SetDirty();
}
inline const ::Packet::ZoneInfo& ViewZoneReply::zoneinfo() const {
  return zoneinfo_ != NULL ? *zoneinfo_ : *default_instance_->zoneinfo_;
}
inline ::Packet::ZoneInfo* ViewZoneReply::mutable_zoneinfo() {
  SetDirty();
  set_has_zoneinfo();
  if (zoneinfo_ == NULL) zoneinfo_ = new ::Packet::ZoneInfo;
  return zoneinfo_;
}
inline ::Packet::ZoneInfo* ViewZoneReply::release_zoneinfo() {
  SetDirty();
  clear_has_zoneinfo();
  ::Packet::ZoneInfo* temp = zoneinfo_;
  zoneinfo_ = NULL;
  return temp;
}
inline void ViewZoneReply::set_allocated_zoneinfo(::Packet::ZoneInfo* zoneinfo) {
  SetDirty();
  delete zoneinfo_;
  zoneinfo_ = zoneinfo;
  if (zoneinfo) {
    set_has_zoneinfo();
  } else {
    clear_has_zoneinfo();
  }
}

// -------------------------------------------------------------------

// DelMessageReq

// required fixed64 message_id = 1;
inline bool DelMessageReq::has_message_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DelMessageReq::set_has_message_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DelMessageReq::clear_has_message_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DelMessageReq::clear_message_id() {
  message_id_ = GOOGLE_ULONGLONG(0);
  clear_has_message_id();
  SetDirty();
}
inline ::google::protobuf::uint64 DelMessageReq::message_id() const {
  return message_id_;
}
inline void DelMessageReq::set_message_id(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_message_id();
  message_id_ = value;
}

// -------------------------------------------------------------------

// NewMessageNotify

// -------------------------------------------------------------------

// SignConfig

// required int32 id = 1;
inline bool SignConfig::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignConfig::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignConfig::clear_id() {
  id_ = 0;
  clear_has_id();
  SetDirty();
}
inline ::google::protobuf::int32 SignConfig::id() const {
  return id_;
}
inline void SignConfig::set_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_id();
  id_ = value;
}

// required string type = 2;
inline bool SignConfig::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignConfig::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignConfig::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
  SetDirty();
}
inline const ::std::string& SignConfig::type() const {
  return *type_;
}
inline void SignConfig::set_type(const ::std::string& value) {
  SetDirty();
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void SignConfig::set_type(const char* value) {
  SetDirty();
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void SignConfig::set_type(const char* value, size_t size) {
  SetDirty();
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SignConfig::mutable_type() {
  SetDirty();
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* SignConfig::release_type() {
  SetDirty();
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SignConfig::set_allocated_type(::std::string* type) {
  SetDirty();
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string sign = 3;
inline bool SignConfig::has_sign() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SignConfig::set_has_sign() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SignConfig::clear_has_sign() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SignConfig::clear_sign() {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    sign_->clear();
  }
  clear_has_sign();
  SetDirty();
}
inline const ::std::string& SignConfig::sign() const {
  return *sign_;
}
inline void SignConfig::set_sign(const ::std::string& value) {
  SetDirty();
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void SignConfig::set_sign(const char* value) {
  SetDirty();
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void SignConfig::set_sign(const char* value, size_t size) {
  SetDirty();
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SignConfig::mutable_sign() {
  SetDirty();
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  return sign_;
}
inline ::std::string* SignConfig::release_sign() {
  SetDirty();
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SignConfig::set_allocated_sign(::std::string* sign) {
  SetDirty();
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// UpdateSign

// repeated int32 id = 1;
inline int UpdateSign::id_size() const {
  return id_.size();
}
inline void UpdateSign::clear_id() {
  id_.Clear();
  SetDirty();
}
inline ::google::protobuf::int32 UpdateSign::id(int index) const {
  return id_.Get(index);
}
inline void UpdateSign::set_id(int index, ::google::protobuf::int32 value) {
  SetDirty();
  id_.Set(index, value);
}
inline void UpdateSign::add_id(::google::protobuf::int32 value) {
  SetDirty();
  id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UpdateSign::id() const {
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UpdateSign::mutable_id() {
  SetDirty();
  return &id_;
}

// -------------------------------------------------------------------

// GetMessageBoard

// repeated .Packet.MessageBoard list = 1;
inline int GetMessageBoard::list_size() const {
  return list_.size();
}
inline void GetMessageBoard::clear_list() {
  list_.Clear();
  SetDirty();
}
inline const ::Packet::MessageBoard& GetMessageBoard::list(int index) const {
  return list_.Get(index);
}
inline ::Packet::MessageBoard* GetMessageBoard::mutable_list(int index) {
  SetDirty();
  return list_.Mutable(index);
}
inline ::Packet::MessageBoard* GetMessageBoard::add_list() {
  SetDirty();
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::MessageBoard >&
GetMessageBoard::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::MessageBoard >*
GetMessageBoard::mutable_list() {
  SetDirty();
  return &list_;
}

// -------------------------------------------------------------------

// AddMessageBoard

// required .Packet.MessageBoard addmsg = 1;
inline bool AddMessageBoard::has_addmsg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddMessageBoard::set_has_addmsg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddMessageBoard::clear_has_addmsg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddMessageBoard::clear_addmsg() {
  if (addmsg_ != NULL) addmsg_->::Packet::MessageBoard::Clear();
  clear_has_addmsg();
  SetDirty();
}
inline const ::Packet::MessageBoard& AddMessageBoard::addmsg() const {
  return addmsg_ != NULL ? *addmsg_ : *default_instance_->addmsg_;
}
inline ::Packet::MessageBoard* AddMessageBoard::mutable_addmsg() {
  SetDirty();
  set_has_addmsg();
  if (addmsg_ == NULL) addmsg_ = new ::Packet::MessageBoard;
  return addmsg_;
}
inline ::Packet::MessageBoard* AddMessageBoard::release_addmsg() {
  SetDirty();
  clear_has_addmsg();
  ::Packet::MessageBoard* temp = addmsg_;
  addmsg_ = NULL;
  return temp;
}
inline void AddMessageBoard::set_allocated_addmsg(::Packet::MessageBoard* addmsg) {
  SetDirty();
  delete addmsg_;
  addmsg_ = addmsg;
  if (addmsg) {
    set_has_addmsg();
  } else {
    clear_has_addmsg();
  }
}

// required bool self = 2;
inline bool AddMessageBoard::has_self() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddMessageBoard::set_has_self() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddMessageBoard::clear_has_self() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddMessageBoard::clear_self() {
  self_ = false;
  clear_has_self();
  SetDirty();
}
inline bool AddMessageBoard::self() const {
  return self_;
}
inline void AddMessageBoard::set_self(bool value) {
  SetDirty();
  set_has_self();
  self_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FriendMail_2eproto__INCLUDED
