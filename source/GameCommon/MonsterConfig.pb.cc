// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MonsterConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MonsterConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Config {

namespace {

const ::google::protobuf::Descriptor* MonsterConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonsterConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonsterAttribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonsterAttribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonsterDefine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonsterDefine_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonsterGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonsterGroup_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MonsterConfig_2eproto() {
  protobuf_AddDesc_MonsterConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MonsterConfig.proto");
  GOOGLE_CHECK(file != NULL);
  MonsterConfig_descriptor_ = file->message_type(0);
  static const int MonsterConfig_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, npc_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, monster_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, rage_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, exp_drop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, gold_drop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, battle_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, skill_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, ai_strategy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, client_res_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, monster_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, adapt_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, life_time_),
  };
  MonsterConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonsterConfig_descriptor_,
      MonsterConfig::default_instance_,
      MonsterConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonsterConfig));
  MonsterAttribute_descriptor_ = file->message_type(1);
  static const int MonsterAttribute_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterAttribute, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterAttribute, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterAttribute, battle_info_),
  };
  MonsterAttribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonsterAttribute_descriptor_,
      MonsterAttribute::default_instance_,
      MonsterAttribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterAttribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterAttribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonsterAttribute));
  MonsterDefine_descriptor_ = file->message_type(2);
  static const int MonsterDefine_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterDefine, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterDefine, loc_),
  };
  MonsterDefine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonsterDefine_descriptor_,
      MonsterDefine::default_instance_,
      MonsterDefine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterDefine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterDefine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonsterDefine));
  MonsterGroup_descriptor_ = file->message_type(3);
  static const int MonsterGroup_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterGroup, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterGroup, mission_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterGroup, monsters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterGroup, package_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterGroup, package_weight_),
  };
  MonsterGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonsterGroup_descriptor_,
      MonsterGroup::default_instance_,
      MonsterGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonsterGroup));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MonsterConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonsterConfig_descriptor_, &MonsterConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonsterAttribute_descriptor_, &MonsterAttribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonsterDefine_descriptor_, &MonsterDefine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonsterGroup_descriptor_, &MonsterGroup::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MonsterConfig_2eproto() {
  delete MonsterConfig::default_instance_;
  delete MonsterConfig_reflection_;
  delete MonsterAttribute::default_instance_;
  delete MonsterAttribute_reflection_;
  delete MonsterDefine::default_instance_;
  delete MonsterDefine_reflection_;
  delete MonsterGroup::default_instance_;
  delete MonsterGroup_reflection_;
}

void protobuf_AddDesc_MonsterConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Config::protobuf_AddDesc_AllConfigEnum_2eproto();
  ::Packet::protobuf_AddDesc_ProtoBufOption_2eproto();
  ::Packet::protobuf_AddDesc_BattleInfo_2eproto();
  ::Packet::protobuf_AddDesc_Base_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023MonsterConfig.proto\022\006Config\032\023AllConfig"
    "Enum.proto\032\024ProtoBufOption.proto\032\020Battle"
    "Info.proto\032\nBase.proto\"\374\002\n\rMonsterConfig"
    "\022\n\n\002id\030\001 \002(\005\022\r\n\005scale\030\002 \002(\002\022\016\n\006radius\030\003 "
    "\002(\002\022!\n\010npc_type\030\004 \002(\0162\017.Config.NpcType\022)"
    "\n\014monster_type\030\005 \002(\0162\023.Config.MonsterTyp"
    "e\022\021\n\trage_time\030\006 \002(\005\022\r\n\005level\030\007 \002(\005\022\020\n\010e"
    "xp_drop\030\010 \002(\005\022\021\n\tgold_drop\030\t \002(\005\022\'\n\013batt"
    "le_info\030\n \002(\0132\022.Packet.BattleInfo\022\027\n\tski"
    "ll_ids\030\013 \003(\005B\004\300\363\030\t\022\023\n\013ai_strategy\030\014 \002(\005\022"
    "\025\n\rclient_res_id\030\r \002(\005\022\025\n\rmonster_class\030"
    "\016 \002(\005\022\023\n\013adapt_group\030\017 \002(\005\022\021\n\tlife_time\030"
    "\020 \002(\005\"Y\n\020MonsterAttribute\022\r\n\005group\030\001 \002(\005"
    "\022\r\n\005level\030\002 \002(\005\022\'\n\013battle_info\030\003 \002(\0132\022.P"
    "acket.BattleInfo\"(\n\rMonsterDefine\022\n\n\002id\030"
    "\001 \002(\005\022\013\n\003loc\030\002 \002(\005\"\225\001\n\014MonsterGroup\022\n\n\002i"
    "d\030\001 \002(\005\022\022\n\nmission_id\030\002 \002(\005\022-\n\010monsters\030"
    "\004 \003(\0132\025.Config.MonsterDefineB\004\300\363\030\017\022\030\n\npa"
    "ckage_id\030\005 \003(\005B\004\300\363\030\004\022\034\n\016package_weight\030\006"
    " \003(\005B\004\300\363\030\004", 770);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MonsterConfig.proto", &protobuf_RegisterTypes);
  MonsterConfig::default_instance_ = new MonsterConfig();
  MonsterAttribute::default_instance_ = new MonsterAttribute();
  MonsterDefine::default_instance_ = new MonsterDefine();
  MonsterGroup::default_instance_ = new MonsterGroup();
  MonsterConfig::default_instance_->InitAsDefaultInstance();
  MonsterAttribute::default_instance_->InitAsDefaultInstance();
  MonsterDefine::default_instance_->InitAsDefaultInstance();
  MonsterGroup::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MonsterConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MonsterConfig_2eproto {
  StaticDescriptorInitializer_MonsterConfig_2eproto() {
    protobuf_AddDesc_MonsterConfig_2eproto();
  }
} static_descriptor_initializer_MonsterConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MonsterConfig::kIdFieldNumber;
const int MonsterConfig::kScaleFieldNumber;
const int MonsterConfig::kRadiusFieldNumber;
const int MonsterConfig::kNpcTypeFieldNumber;
const int MonsterConfig::kMonsterTypeFieldNumber;
const int MonsterConfig::kRageTimeFieldNumber;
const int MonsterConfig::kLevelFieldNumber;
const int MonsterConfig::kExpDropFieldNumber;
const int MonsterConfig::kGoldDropFieldNumber;
const int MonsterConfig::kBattleInfoFieldNumber;
const int MonsterConfig::kSkillIdsFieldNumber;
const int MonsterConfig::kAiStrategyFieldNumber;
const int MonsterConfig::kClientResIdFieldNumber;
const int MonsterConfig::kMonsterClassFieldNumber;
const int MonsterConfig::kAdaptGroupFieldNumber;
const int MonsterConfig::kLifeTimeFieldNumber;
#endif  // !_MSC_VER

MonsterConfig::MonsterConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MonsterConfig::InitAsDefaultInstance() {
  battle_info_ = const_cast< ::Packet::BattleInfo*>(&::Packet::BattleInfo::default_instance());
}

MonsterConfig::MonsterConfig(const MonsterConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MonsterConfig::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  scale_ = 0;
  radius_ = 0;
  npc_type_ = 0;
  monster_type_ = 0;
  rage_time_ = 0;
  level_ = 0;
  exp_drop_ = 0;
  gold_drop_ = 0;
  battle_info_ = NULL;
  ai_strategy_ = 0;
  client_res_id_ = 0;
  monster_class_ = 0;
  adapt_group_ = 0;
  life_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonsterConfig::~MonsterConfig() {
  SharedDtor();
}

void MonsterConfig::SharedDtor() {
  if (this != default_instance_) {
    delete battle_info_;
  }
}

void MonsterConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonsterConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonsterConfig_descriptor_;
}

const MonsterConfig& MonsterConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MonsterConfig_2eproto();
  return *default_instance_;
}

MonsterConfig* MonsterConfig::default_instance_ = NULL;

MonsterConfig* MonsterConfig::New() const {
  return new MonsterConfig;
}

void MonsterConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    scale_ = 0;
    radius_ = 0;
    npc_type_ = 0;
    monster_type_ = 0;
    rage_time_ = 0;
    level_ = 0;
    exp_drop_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    gold_drop_ = 0;
    if (has_battle_info()) {
      if (battle_info_ != NULL) battle_info_->::Packet::BattleInfo::Clear();
    }
    ai_strategy_ = 0;
    client_res_id_ = 0;
    monster_class_ = 0;
    adapt_group_ = 0;
    life_time_ = 0;
  }
  skill_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool MonsterConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_scale;
        break;
      }

      // required float scale = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_radius;
        break;
      }

      // required float radius = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_npc_type;
        break;
      }

      // required .Config.NpcType npc_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Config::NpcType_IsValid(value)) {
            set_npc_type(static_cast< ::Config::NpcType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_monster_type;
        break;
      }

      // required .Config.MonsterType monster_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Config::MonsterType_IsValid(value)) {
            set_monster_type(static_cast< ::Config::MonsterType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rage_time;
        break;
      }

      // required int32 rage_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rage_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rage_time_)));
          set_has_rage_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // required int32 level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_exp_drop;
        break;
      }

      // required int32 exp_drop = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp_drop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_drop_)));
          set_has_exp_drop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_gold_drop;
        break;
      }

      // required int32 gold_drop = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold_drop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_drop_)));
          set_has_gold_drop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_battle_info;
        break;
      }

      // required .Packet.BattleInfo battle_info = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_skill_ids;
        break;
      }

      // repeated int32 skill_ids = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_skill_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_skill_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_skill_ids;
        if (input->ExpectTag(96)) goto parse_ai_strategy;
        break;
      }

      // required int32 ai_strategy = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ai_strategy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ai_strategy_)));
          set_has_ai_strategy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_client_res_id;
        break;
      }

      // required int32 client_res_id = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_res_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_res_id_)));
          set_has_client_res_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_monster_class;
        break;
      }

      // required int32 monster_class = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_class:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monster_class_)));
          set_has_monster_class();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_adapt_group;
        break;
      }

      // required int32 adapt_group = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adapt_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adapt_group_)));
          set_has_adapt_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_life_time;
        break;
      }

      // required int32 life_time = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_life_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &life_time_)));
          set_has_life_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void MonsterConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required float scale = 2;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // required float radius = 3;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->radius(), output);
  }

  // required .Config.NpcType npc_type = 4;
  if (has_npc_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->npc_type(), output);
  }

  // required .Config.MonsterType monster_type = 5;
  if (has_monster_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->monster_type(), output);
  }

  // required int32 rage_time = 6;
  if (has_rage_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rage_time(), output);
  }

  // required int32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->level(), output);
  }

  // required int32 exp_drop = 8;
  if (has_exp_drop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->exp_drop(), output);
  }

  // required int32 gold_drop = 9;
  if (has_gold_drop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->gold_drop(), output);
  }

  // required .Packet.BattleInfo battle_info = 10;
  if (has_battle_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->battle_info(), output);
  }

  // repeated int32 skill_ids = 11;
  for (int i = 0; i < this->skill_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->skill_ids(i), output);
  }

  // required int32 ai_strategy = 12;
  if (has_ai_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->ai_strategy(), output);
  }

  // required int32 client_res_id = 13;
  if (has_client_res_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->client_res_id(), output);
  }

  // required int32 monster_class = 14;
  if (has_monster_class()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->monster_class(), output);
  }

  // required int32 adapt_group = 15;
  if (has_adapt_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->adapt_group(), output);
  }

  // required int32 life_time = 16;
  if (has_life_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->life_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonsterConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required float scale = 2;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // required float radius = 3;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->radius(), target);
  }

  // required .Config.NpcType npc_type = 4;
  if (has_npc_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->npc_type(), target);
  }

  // required .Config.MonsterType monster_type = 5;
  if (has_monster_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->monster_type(), target);
  }

  // required int32 rage_time = 6;
  if (has_rage_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rage_time(), target);
  }

  // required int32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->level(), target);
  }

  // required int32 exp_drop = 8;
  if (has_exp_drop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->exp_drop(), target);
  }

  // required int32 gold_drop = 9;
  if (has_gold_drop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->gold_drop(), target);
  }

  // required .Packet.BattleInfo battle_info = 10;
  if (has_battle_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->battle_info(), target);
  }

  // repeated int32 skill_ids = 11;
  for (int i = 0; i < this->skill_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->skill_ids(i), target);
  }

  // required int32 ai_strategy = 12;
  if (has_ai_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->ai_strategy(), target);
  }

  // required int32 client_res_id = 13;
  if (has_client_res_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->client_res_id(), target);
  }

  // required int32 monster_class = 14;
  if (has_monster_class()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->monster_class(), target);
  }

  // required int32 adapt_group = 15;
  if (has_adapt_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->adapt_group(), target);
  }

  // required int32 life_time = 16;
  if (has_life_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->life_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonsterConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required float scale = 2;
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // required float radius = 3;
    if (has_radius()) {
      total_size += 1 + 4;
    }

    // required .Config.NpcType npc_type = 4;
    if (has_npc_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->npc_type());
    }

    // required .Config.MonsterType monster_type = 5;
    if (has_monster_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->monster_type());
    }

    // required int32 rage_time = 6;
    if (has_rage_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rage_time());
    }

    // required int32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 exp_drop = 8;
    if (has_exp_drop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp_drop());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 gold_drop = 9;
    if (has_gold_drop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold_drop());
    }

    // required .Packet.BattleInfo battle_info = 10;
    if (has_battle_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_info());
    }

    // required int32 ai_strategy = 12;
    if (has_ai_strategy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ai_strategy());
    }

    // required int32 client_res_id = 13;
    if (has_client_res_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_res_id());
    }

    // required int32 monster_class = 14;
    if (has_monster_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monster_class());
    }

    // required int32 adapt_group = 15;
    if (has_adapt_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adapt_group());
    }

    // required int32 life_time = 16;
    if (has_life_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->life_time());
    }

  }
  // repeated int32 skill_ids = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->skill_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->skill_ids(i));
    }
    total_size += 1 * this->skill_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonsterConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonsterConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonsterConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void MonsterConfig::MergeFrom(const MonsterConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_ids_.MergeFrom(from.skill_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_npc_type()) {
      set_npc_type(from.npc_type());
    }
    if (from.has_monster_type()) {
      set_monster_type(from.monster_type());
    }
    if (from.has_rage_time()) {
      set_rage_time(from.rage_time());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp_drop()) {
      set_exp_drop(from.exp_drop());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gold_drop()) {
      set_gold_drop(from.gold_drop());
    }
    if (from.has_battle_info()) {
      mutable_battle_info()->::Packet::BattleInfo::MergeFrom(from.battle_info());
    }
    if (from.has_ai_strategy()) {
      set_ai_strategy(from.ai_strategy());
    }
    if (from.has_client_res_id()) {
      set_client_res_id(from.client_res_id());
    }
    if (from.has_monster_class()) {
      set_monster_class(from.monster_class());
    }
    if (from.has_adapt_group()) {
      set_adapt_group(from.adapt_group());
    }
    if (from.has_life_time()) {
      set_life_time(from.life_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void MonsterConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void MonsterConfig::CopyFrom(const MonsterConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool MonsterConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000fbff) != 0x0000fbff) return false;

  if (has_battle_info()) {
    if (!this->battle_info().IsInitialized()) return false;
  }
  return true;
}

void MonsterConfig::SetInitialized() {
  _has_bits_[0] |= 0x0000fbff;

  if (has_battle_info()) {
    this->mutable_battle_info()->SetInitialized();
  }
  return;
}

void MonsterConfig::Swap(MonsterConfig* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(scale_, other->scale_);
    std::swap(radius_, other->radius_);
    std::swap(npc_type_, other->npc_type_);
    std::swap(monster_type_, other->monster_type_);
    std::swap(rage_time_, other->rage_time_);
    std::swap(level_, other->level_);
    std::swap(exp_drop_, other->exp_drop_);
    std::swap(gold_drop_, other->gold_drop_);
    std::swap(battle_info_, other->battle_info_);
    skill_ids_.Swap(&other->skill_ids_);
    std::swap(ai_strategy_, other->ai_strategy_);
    std::swap(client_res_id_, other->client_res_id_);
    std::swap(monster_class_, other->monster_class_);
    std::swap(adapt_group_, other->adapt_group_);
    std::swap(life_time_, other->life_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata MonsterConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonsterConfig_descriptor_;
  metadata.reflection = MonsterConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonsterAttribute::kGroupFieldNumber;
const int MonsterAttribute::kLevelFieldNumber;
const int MonsterAttribute::kBattleInfoFieldNumber;
#endif  // !_MSC_VER

MonsterAttribute::MonsterAttribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MonsterAttribute::InitAsDefaultInstance() {
  battle_info_ = const_cast< ::Packet::BattleInfo*>(&::Packet::BattleInfo::default_instance());
}

MonsterAttribute::MonsterAttribute(const MonsterAttribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MonsterAttribute::SharedCtor() {
  _cached_size_ = 0;
  group_ = 0;
  level_ = 0;
  battle_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonsterAttribute::~MonsterAttribute() {
  SharedDtor();
}

void MonsterAttribute::SharedDtor() {
  if (this != default_instance_) {
    delete battle_info_;
  }
}

void MonsterAttribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonsterAttribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonsterAttribute_descriptor_;
}

const MonsterAttribute& MonsterAttribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MonsterConfig_2eproto();
  return *default_instance_;
}

MonsterAttribute* MonsterAttribute::default_instance_ = NULL;

MonsterAttribute* MonsterAttribute::New() const {
  return new MonsterAttribute;
}

void MonsterAttribute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_ = 0;
    level_ = 0;
    if (has_battle_info()) {
      if (battle_info_ != NULL) battle_info_->::Packet::BattleInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool MonsterAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 group = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_battle_info;
        break;
      }

      // required .Packet.BattleInfo battle_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void MonsterAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 group = 1;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->group(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required .Packet.BattleInfo battle_info = 3;
  if (has_battle_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->battle_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonsterAttribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 group = 1;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->group(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required .Packet.BattleInfo battle_info = 3;
  if (has_battle_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->battle_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonsterAttribute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 group = 1;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group());
    }

    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required .Packet.BattleInfo battle_info = 3;
    if (has_battle_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonsterAttribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonsterAttribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonsterAttribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void MonsterAttribute::MergeFrom(const MonsterAttribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_battle_info()) {
      mutable_battle_info()->::Packet::BattleInfo::MergeFrom(from.battle_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void MonsterAttribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void MonsterAttribute::CopyFrom(const MonsterAttribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool MonsterAttribute::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_battle_info()) {
    if (!this->battle_info().IsInitialized()) return false;
  }
  return true;
}

void MonsterAttribute::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  if (has_battle_info()) {
    this->mutable_battle_info()->SetInitialized();
  }
  return;
}

void MonsterAttribute::Swap(MonsterAttribute* other) {
  if (other != this) {
    std::swap(group_, other->group_);
    std::swap(level_, other->level_);
    std::swap(battle_info_, other->battle_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata MonsterAttribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonsterAttribute_descriptor_;
  metadata.reflection = MonsterAttribute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonsterDefine::kIdFieldNumber;
const int MonsterDefine::kLocFieldNumber;
#endif  // !_MSC_VER

MonsterDefine::MonsterDefine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MonsterDefine::InitAsDefaultInstance() {
}

MonsterDefine::MonsterDefine(const MonsterDefine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MonsterDefine::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  loc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonsterDefine::~MonsterDefine() {
  SharedDtor();
}

void MonsterDefine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MonsterDefine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonsterDefine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonsterDefine_descriptor_;
}

const MonsterDefine& MonsterDefine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MonsterConfig_2eproto();
  return *default_instance_;
}

MonsterDefine* MonsterDefine::default_instance_ = NULL;

MonsterDefine* MonsterDefine::New() const {
  return new MonsterDefine;
}

void MonsterDefine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    loc_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool MonsterDefine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_loc;
        break;
      }

      // required int32 loc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loc_)));
          set_has_loc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void MonsterDefine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 loc = 2;
  if (has_loc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->loc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonsterDefine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 loc = 2;
  if (has_loc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->loc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonsterDefine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 loc = 2;
    if (has_loc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonsterDefine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonsterDefine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonsterDefine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void MonsterDefine::MergeFrom(const MonsterDefine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_loc()) {
      set_loc(from.loc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void MonsterDefine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void MonsterDefine::CopyFrom(const MonsterDefine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool MonsterDefine::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MonsterDefine::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void MonsterDefine::Swap(MonsterDefine* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(loc_, other->loc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata MonsterDefine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonsterDefine_descriptor_;
  metadata.reflection = MonsterDefine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonsterGroup::kIdFieldNumber;
const int MonsterGroup::kMissionIdFieldNumber;
const int MonsterGroup::kMonstersFieldNumber;
const int MonsterGroup::kPackageIdFieldNumber;
const int MonsterGroup::kPackageWeightFieldNumber;
#endif  // !_MSC_VER

MonsterGroup::MonsterGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MonsterGroup::InitAsDefaultInstance() {
}

MonsterGroup::MonsterGroup(const MonsterGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MonsterGroup::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  mission_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonsterGroup::~MonsterGroup() {
  SharedDtor();
}

void MonsterGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MonsterGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonsterGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonsterGroup_descriptor_;
}

const MonsterGroup& MonsterGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MonsterConfig_2eproto();
  return *default_instance_;
}

MonsterGroup* MonsterGroup::default_instance_ = NULL;

MonsterGroup* MonsterGroup::New() const {
  return new MonsterGroup;
}

void MonsterGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    mission_id_ = 0;
  }
  monsters_.Clear();
  package_id_.Clear();
  package_weight_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool MonsterGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mission_id;
        break;
      }

      // required int32 mission_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mission_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mission_id_)));
          set_has_mission_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_monsters;
        break;
      }

      // repeated .Config.MonsterDefine monsters = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_monsters;
        if (input->ExpectTag(40)) goto parse_package_id;
        break;
      }

      // repeated int32 package_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_package_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_package_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_package_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_package_id;
        if (input->ExpectTag(48)) goto parse_package_weight;
        break;
      }

      // repeated int32 package_weight = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_package_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_package_weight())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_package_weight())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_package_weight;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void MonsterGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 mission_id = 2;
  if (has_mission_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mission_id(), output);
  }

  // repeated .Config.MonsterDefine monsters = 4;
  for (int i = 0; i < this->monsters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->monsters(i), output);
  }

  // repeated int32 package_id = 5;
  for (int i = 0; i < this->package_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->package_id(i), output);
  }

  // repeated int32 package_weight = 6;
  for (int i = 0; i < this->package_weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->package_weight(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonsterGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 mission_id = 2;
  if (has_mission_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mission_id(), target);
  }

  // repeated .Config.MonsterDefine monsters = 4;
  for (int i = 0; i < this->monsters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->monsters(i), target);
  }

  // repeated int32 package_id = 5;
  for (int i = 0; i < this->package_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->package_id(i), target);
  }

  // repeated int32 package_weight = 6;
  for (int i = 0; i < this->package_weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->package_weight(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonsterGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 mission_id = 2;
    if (has_mission_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mission_id());
    }

  }
  // repeated .Config.MonsterDefine monsters = 4;
  total_size += 1 * this->monsters_size();
  for (int i = 0; i < this->monsters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsters(i));
  }

  // repeated int32 package_id = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->package_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->package_id(i));
    }
    total_size += 1 * this->package_id_size() + data_size;
  }

  // repeated int32 package_weight = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->package_weight_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->package_weight(i));
    }
    total_size += 1 * this->package_weight_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonsterGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonsterGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonsterGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void MonsterGroup::MergeFrom(const MonsterGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsters_.MergeFrom(from.monsters_);
  package_id_.MergeFrom(from.package_id_);
  package_weight_.MergeFrom(from.package_weight_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mission_id()) {
      set_mission_id(from.mission_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void MonsterGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void MonsterGroup::CopyFrom(const MonsterGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool MonsterGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < monsters_size(); i++) {
    if (!this->monsters(i).IsInitialized()) return false;
  }
  return true;
}

void MonsterGroup::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  for (int i = 0; i < monsters_size(); i++) {
    this->mutable_monsters(i)->SetInitialized();
  }
  return;
}

void MonsterGroup::Swap(MonsterGroup* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(mission_id_, other->mission_id_);
    monsters_.Swap(&other->monsters_);
    package_id_.Swap(&other->package_id_);
    package_weight_.Swap(&other->package_weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata MonsterGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonsterGroup_descriptor_;
  metadata.reflection = MonsterGroup_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config

// @@protoc_insertion_point(global_scope)
