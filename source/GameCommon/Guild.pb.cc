// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Guild.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Guild.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Packet {

namespace {

const ::google::protobuf::Descriptor* PlayerGuildUserData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerGuildUserData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildImpeach_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildImpeach_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildDBInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildDBInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetGuildIconRR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetGuildIconRR_reflection_ = NULL;
const ::google::protobuf::Descriptor* PracticeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PracticeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerPracticeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerPracticeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPracticeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPracticeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPracticeReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPracticeReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGuildInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGuildInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGuildInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGuildInfoReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGuildUserListInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGuildUserListInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGuildUserListInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGuildUserListInfoReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateGuildReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateGuildReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FindGuildReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FindGuildReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyGuildReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyGuildReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneKeyApplyGuildReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneKeyApplyGuildReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteyAddGuildReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteyAddGuildReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskInviteyAgreeGuildReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskInviteyAgreeGuildReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteyAgreeGuildReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteyAgreeGuildReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgreeApplyGuildReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgreeApplyGuildReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdatePlayerGuildInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdatePlayerGuildInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGuildListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGuildListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildBaseListReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildBaseListReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyGuildPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyGuildPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyGuildPlayerListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyGuildPlayerListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyGuildPlayerListReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyGuildPlayerListReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClearApplyGuildPlayerListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClearApplyGuildPlayerListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetGuildNameRR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetGuildNameRR_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetGuildNoticeRR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetGuildNoticeRR_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildDonationReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildDonationReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DonationFlagUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DonationFlagUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMoneyUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMoneyUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildImpeachReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildImpeachReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetGuildUserPositionRR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetGuildUserPositionRR_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGuildBonusReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGuildBonusReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildCDKInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildCDKInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateGuildCDK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateGuildCDK_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateGuildCDKReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateGuildCDKReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGuildCDKReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGuildCDKReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGuildCDKListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGuildCDKListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGuildCDKListReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGuildCDKListReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildLevelUpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildLevelUpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildLevelUpReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildLevelUpReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildBossCompetitionDbInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildBossCompetitionDbInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGuildBossCompetitionReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGuildBossCompetitionReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGuildBossCompetitionReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGuildBossCompetitionReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildUserDamage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildUserDamage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildAllDamage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildAllDamage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildBossUserDamage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildBossUserDamage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGuildUserDamageReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGuildUserDamageReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGuildUserDamageReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGuildUserDamageReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetServerUserDamageReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetServerUserDamageReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGuildAllDamageReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGuildAllDamageReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGuildBossUserDamageReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGuildBossUserDamageReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateGuildBossUserDamage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateGuildBossUserDamage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildWetCopyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildWetCopyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGuildWetCopyInfosReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGuildWetCopyInfosReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGuildWetCopyInfosReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGuildWetCopyInfosReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildWetCopyInfoUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildWetCopyInfoUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenGuildWetCopy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenGuildWetCopy_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResetGuildWetCopy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResetGuildWetCopy_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildBattleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildBattleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildBattleInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildBattleInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelfGuildBattleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelfGuildBattleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildBattleListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildBattleListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildBattleWeekRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildBattleWeekRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildBattleWeekRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildBattleWeekRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildBattleWeekRankReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildBattleWeekRankReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildBattleAllRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildBattleAllRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildBattleAllRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildBattleAllRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildBattleAllRankReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildBattleAllRankReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildBattleResultReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildBattleResultReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildBattlePlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildBattlePlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildBattlePlayerListInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildBattlePlayerListInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateGuildBattlePlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateGuildBattlePlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateGuildBattleStage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateGuildBattleStage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildBattleFightTarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildBattleFightTarget_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildWarehouse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildWarehouse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildWarehouseReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildWarehouseReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildWarehouseReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildWarehouseReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildWarehouseReceiveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildWarehouseReceiveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildWarehouseSetReceivePlayerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildWarehouseSetReceivePlayerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildWarehouseUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildWarehouseUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildWarehouseRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildWarehouseRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildWarehouseRecordReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildWarehouseRecordReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildWarehouseRecordReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildWarehouseRecordReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildSpoilItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildSpoilItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRecordReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRecordReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildUserName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildUserName_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildSpoilItemClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildSpoilItemClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildSpoilItemReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildSpoilItemReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateGuildSpoilItemClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateGuildSpoilItemClient_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Guild_2eproto() {
  protobuf_AddDesc_Guild_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Guild.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerGuildUserData_descriptor_ = file->message_type(0);
  static const int PlayerGuildUserData_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGuildUserData, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGuildUserData, bdonation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGuildUserData, bbonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGuildUserData, curcontribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGuildUserData, weekcontribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGuildUserData, allcontribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGuildUserData, jointime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGuildUserData, guildlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGuildUserData, cashboxlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGuildUserData, shoplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGuildUserData, storagelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGuildUserData, guildname_),
  };
  PlayerGuildUserData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerGuildUserData_descriptor_,
      PlayerGuildUserData::default_instance_,
      PlayerGuildUserData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGuildUserData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGuildUserData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerGuildUserData));
  GuildUser_descriptor_ = file->message_type(1);
  static const int GuildUser_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUser, playerguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUser, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUser, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUser, playerlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUser, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUser, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUser, bdonation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUser, bbonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUser, curcontribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUser, weekcontribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUser, allcontribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUser, battletime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUser, lastlogouttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUser, jointime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUser, bossdamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUser, main_actor_config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUser, main_actor_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUser, main_actor_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUser, main_actor_star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUser, wetcopytimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUser, spoiljumptimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUser, hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUser, lastguildid_),
  };
  GuildUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildUser_descriptor_,
      GuildUser::default_instance_,
      GuildUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildUser));
  GuildImpeach_descriptor_ = file->message_type(2);
  static const int GuildImpeach_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildImpeach, impeachguild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildImpeach, impeachname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildImpeach, needcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildImpeach, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildImpeach, respondguild_),
  };
  GuildImpeach_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildImpeach_descriptor_,
      GuildImpeach::default_instance_,
      GuildImpeach_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildImpeach, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildImpeach, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildImpeach));
  GuildDBInfo_descriptor_ = file->message_type(3);
  static const int GuildDBInfo_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDBInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDBInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDBInfo, lastname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDBInfo, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDBInfo, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDBInfo, chieftain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDBInfo, chieftainname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDBInfo, guildlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDBInfo, cashboxlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDBInfo, shoplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDBInfo, storagelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDBInfo, guildcd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDBInfo, cashboxcd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDBInfo, shopcd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDBInfo, storagecd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDBInfo, guildmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDBInfo, limitapplylevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDBInfo, maxwetcopyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDBInfo, weekbonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDBInfo, lowmaintainday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDBInfo, battlewintimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDBInfo, battletimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDBInfo, battlelefttimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDBInfo, battleroundwintimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDBInfo, battleroundtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDBInfo, battlescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDBInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDBInfo, createguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDBInfo, createname_),
  };
  GuildDBInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildDBInfo_descriptor_,
      GuildDBInfo::default_instance_,
      GuildDBInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDBInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDBInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildDBInfo));
  SetGuildIconRR_descriptor_ = file->message_type(4);
  static const int SetGuildIconRR_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildIconRR, icon_),
  };
  SetGuildIconRR_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetGuildIconRR_descriptor_,
      SetGuildIconRR::default_instance_,
      SetGuildIconRR_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildIconRR, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildIconRR, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetGuildIconRR));
  PracticeInfo_descriptor_ = file->message_type(5);
  static const int PracticeInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PracticeInfo, playerguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PracticeInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PracticeInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PracticeInfo, exp_),
  };
  PracticeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PracticeInfo_descriptor_,
      PracticeInfo::default_instance_,
      PracticeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PracticeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PracticeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PracticeInfo));
  PlayerPracticeReq_descriptor_ = file->message_type(6);
  static const int PlayerPracticeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPracticeReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPracticeReq, id_),
  };
  PlayerPracticeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerPracticeReq_descriptor_,
      PlayerPracticeReq::default_instance_,
      PlayerPracticeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPracticeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPracticeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerPracticeReq));
  GetPracticeReq_descriptor_ = file->message_type(7);
  static const int GetPracticeReq_offsets_[1] = {
  };
  GetPracticeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPracticeReq_descriptor_,
      GetPracticeReq::default_instance_,
      GetPracticeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPracticeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPracticeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPracticeReq));
  GetPracticeReply_descriptor_ = file->message_type(8);
  static const int GetPracticeReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPracticeReply, list_),
  };
  GetPracticeReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPracticeReply_descriptor_,
      GetPracticeReply::default_instance_,
      GetPracticeReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPracticeReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPracticeReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPracticeReply));
  GetGuildInfoReq_descriptor_ = file->message_type(9);
  static const int GetGuildInfoReq_offsets_[1] = {
  };
  GetGuildInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGuildInfoReq_descriptor_,
      GetGuildInfoReq::default_instance_,
      GetGuildInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGuildInfoReq));
  GetGuildInfoReply_descriptor_ = file->message_type(10);
  static const int GetGuildInfoReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildInfoReply, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildInfoReply, membersize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildInfoReply, maxmembersize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildInfoReply, selfinfo_),
  };
  GetGuildInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGuildInfoReply_descriptor_,
      GetGuildInfoReply::default_instance_,
      GetGuildInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGuildInfoReply));
  GetGuildUserListInfoReq_descriptor_ = file->message_type(11);
  static const int GetGuildUserListInfoReq_offsets_[1] = {
  };
  GetGuildUserListInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGuildUserListInfoReq_descriptor_,
      GetGuildUserListInfoReq::default_instance_,
      GetGuildUserListInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildUserListInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildUserListInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGuildUserListInfoReq));
  GetGuildUserListInfoReply_descriptor_ = file->message_type(12);
  static const int GetGuildUserListInfoReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildUserListInfoReply, userlist_),
  };
  GetGuildUserListInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGuildUserListInfoReply_descriptor_,
      GetGuildUserListInfoReply::default_instance_,
      GetGuildUserListInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildUserListInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildUserListInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGuildUserListInfoReply));
  CreateGuildReq_descriptor_ = file->message_type(13);
  static const int CreateGuildReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGuildReq, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGuildReq, notice_),
  };
  CreateGuildReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateGuildReq_descriptor_,
      CreateGuildReq::default_instance_,
      CreateGuildReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGuildReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGuildReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateGuildReq));
  FindGuildReq_descriptor_ = file->message_type(14);
  static const int FindGuildReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindGuildReq, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindGuildReq, guid_),
  };
  FindGuildReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FindGuildReq_descriptor_,
      FindGuildReq::default_instance_,
      FindGuildReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindGuildReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindGuildReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FindGuildReq));
  ApplyGuildReq_descriptor_ = file->message_type(15);
  static const int ApplyGuildReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyGuildReq, guid_),
  };
  ApplyGuildReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyGuildReq_descriptor_,
      ApplyGuildReq::default_instance_,
      ApplyGuildReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyGuildReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyGuildReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyGuildReq));
  OneKeyApplyGuildReq_descriptor_ = file->message_type(16);
  static const int OneKeyApplyGuildReq_offsets_[1] = {
  };
  OneKeyApplyGuildReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OneKeyApplyGuildReq_descriptor_,
      OneKeyApplyGuildReq::default_instance_,
      OneKeyApplyGuildReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyApplyGuildReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneKeyApplyGuildReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OneKeyApplyGuildReq));
  InviteyAddGuildReq_descriptor_ = file->message_type(17);
  static const int InviteyAddGuildReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteyAddGuildReq, playerguid_),
  };
  InviteyAddGuildReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteyAddGuildReq_descriptor_,
      InviteyAddGuildReq::default_instance_,
      InviteyAddGuildReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteyAddGuildReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteyAddGuildReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteyAddGuildReq));
  AskInviteyAgreeGuildReply_descriptor_ = file->message_type(18);
  static const int AskInviteyAgreeGuildReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskInviteyAgreeGuildReply, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskInviteyAgreeGuildReply, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskInviteyAgreeGuildReply, guildinvitename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskInviteyAgreeGuildReply, guildinviteguid_),
  };
  AskInviteyAgreeGuildReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskInviteyAgreeGuildReply_descriptor_,
      AskInviteyAgreeGuildReply::default_instance_,
      AskInviteyAgreeGuildReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskInviteyAgreeGuildReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskInviteyAgreeGuildReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskInviteyAgreeGuildReply));
  InviteyAgreeGuildReq_descriptor_ = file->message_type(19);
  static const int InviteyAgreeGuildReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteyAgreeGuildReq, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteyAgreeGuildReq, agree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteyAgreeGuildReq, guildidinviteguid_),
  };
  InviteyAgreeGuildReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteyAgreeGuildReq_descriptor_,
      InviteyAgreeGuildReq::default_instance_,
      InviteyAgreeGuildReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteyAgreeGuildReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteyAgreeGuildReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteyAgreeGuildReq));
  AgreeApplyGuildReq_descriptor_ = file->message_type(20);
  static const int AgreeApplyGuildReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgreeApplyGuildReq, playerguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgreeApplyGuildReq, agree_),
  };
  AgreeApplyGuildReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgreeApplyGuildReq_descriptor_,
      AgreeApplyGuildReq::default_instance_,
      AgreeApplyGuildReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgreeApplyGuildReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgreeApplyGuildReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgreeApplyGuildReq));
  UpdatePlayerGuildInfo_descriptor_ = file->message_type(21);
  static const int UpdatePlayerGuildInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePlayerGuildInfo, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePlayerGuildInfo, guildname_),
  };
  UpdatePlayerGuildInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdatePlayerGuildInfo_descriptor_,
      UpdatePlayerGuildInfo::default_instance_,
      UpdatePlayerGuildInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePlayerGuildInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePlayerGuildInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdatePlayerGuildInfo));
  GuildBaseInfo_descriptor_ = file->message_type(22);
  static const int GuildBaseInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseInfo, lastname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseInfo, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseInfo, guildlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseInfo, membersize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseInfo, maxmembersize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseInfo, chieftainname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseInfo, chieftainguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseInfo, createtime_),
  };
  GuildBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildBaseInfo_descriptor_,
      GuildBaseInfo::default_instance_,
      GuildBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildBaseInfo));
  GetGuildListReq_descriptor_ = file->message_type(23);
  static const int GetGuildListReq_offsets_[1] = {
  };
  GetGuildListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGuildListReq_descriptor_,
      GetGuildListReq::default_instance_,
      GetGuildListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGuildListReq));
  GuildBaseListReply_descriptor_ = file->message_type(24);
  static const int GuildBaseListReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseListReply, list_),
  };
  GuildBaseListReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildBaseListReply_descriptor_,
      GuildBaseListReply::default_instance_,
      GuildBaseListReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseListReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseListReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildBaseListReply));
  ApplyGuildPlayerInfo_descriptor_ = file->message_type(25);
  static const int ApplyGuildPlayerInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyGuildPlayerInfo, playerguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyGuildPlayerInfo, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyGuildPlayerInfo, playerlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyGuildPlayerInfo, profession_),
  };
  ApplyGuildPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyGuildPlayerInfo_descriptor_,
      ApplyGuildPlayerInfo::default_instance_,
      ApplyGuildPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyGuildPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyGuildPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyGuildPlayerInfo));
  ApplyGuildPlayerListReq_descriptor_ = file->message_type(26);
  static const int ApplyGuildPlayerListReq_offsets_[1] = {
  };
  ApplyGuildPlayerListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyGuildPlayerListReq_descriptor_,
      ApplyGuildPlayerListReq::default_instance_,
      ApplyGuildPlayerListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyGuildPlayerListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyGuildPlayerListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyGuildPlayerListReq));
  ApplyGuildPlayerListReply_descriptor_ = file->message_type(27);
  static const int ApplyGuildPlayerListReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyGuildPlayerListReply, list_),
  };
  ApplyGuildPlayerListReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyGuildPlayerListReply_descriptor_,
      ApplyGuildPlayerListReply::default_instance_,
      ApplyGuildPlayerListReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyGuildPlayerListReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyGuildPlayerListReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyGuildPlayerListReply));
  ClearApplyGuildPlayerListReq_descriptor_ = file->message_type(28);
  static const int ClearApplyGuildPlayerListReq_offsets_[1] = {
  };
  ClearApplyGuildPlayerListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClearApplyGuildPlayerListReq_descriptor_,
      ClearApplyGuildPlayerListReq::default_instance_,
      ClearApplyGuildPlayerListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearApplyGuildPlayerListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearApplyGuildPlayerListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClearApplyGuildPlayerListReq));
  SetGuildNameRR_descriptor_ = file->message_type(29);
  static const int SetGuildNameRR_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildNameRR, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildNameRR, lastname_),
  };
  SetGuildNameRR_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetGuildNameRR_descriptor_,
      SetGuildNameRR::default_instance_,
      SetGuildNameRR_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildNameRR, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildNameRR, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetGuildNameRR));
  SetGuildNoticeRR_descriptor_ = file->message_type(30);
  static const int SetGuildNoticeRR_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildNoticeRR, notice_),
  };
  SetGuildNoticeRR_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetGuildNoticeRR_descriptor_,
      SetGuildNoticeRR::default_instance_,
      SetGuildNoticeRR_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildNoticeRR, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildNoticeRR, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetGuildNoticeRR));
  GuildDonationReq_descriptor_ = file->message_type(31);
  static const int GuildDonationReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDonationReq, type_),
  };
  GuildDonationReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildDonationReq_descriptor_,
      GuildDonationReq::default_instance_,
      GuildDonationReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDonationReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDonationReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildDonationReq));
  DonationFlagUpdate_descriptor_ = file->message_type(32);
  static const int DonationFlagUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonationFlagUpdate, bdonation_),
  };
  DonationFlagUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DonationFlagUpdate_descriptor_,
      DonationFlagUpdate::default_instance_,
      DonationFlagUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonationFlagUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonationFlagUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DonationFlagUpdate));
  GuildMoneyUpdate_descriptor_ = file->message_type(33);
  static const int GuildMoneyUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMoneyUpdate, guildmoney_),
  };
  GuildMoneyUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMoneyUpdate_descriptor_,
      GuildMoneyUpdate::default_instance_,
      GuildMoneyUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMoneyUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMoneyUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMoneyUpdate));
  GuildImpeachReply_descriptor_ = file->message_type(34);
  static const int GuildImpeachReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildImpeachReply, impeach_),
  };
  GuildImpeachReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildImpeachReply_descriptor_,
      GuildImpeachReply::default_instance_,
      GuildImpeachReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildImpeachReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildImpeachReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildImpeachReply));
  SetGuildUserPositionRR_descriptor_ = file->message_type(35);
  static const int SetGuildUserPositionRR_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildUserPositionRR, playerguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildUserPositionRR, position_),
  };
  SetGuildUserPositionRR_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetGuildUserPositionRR_descriptor_,
      SetGuildUserPositionRR::default_instance_,
      SetGuildUserPositionRR_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildUserPositionRR, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildUserPositionRR, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetGuildUserPositionRR));
  GetGuildBonusReq_descriptor_ = file->message_type(36);
  static const int GetGuildBonusReq_offsets_[1] = {
  };
  GetGuildBonusReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGuildBonusReq_descriptor_,
      GetGuildBonusReq::default_instance_,
      GetGuildBonusReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildBonusReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildBonusReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGuildBonusReq));
  GuildCDKInfo_descriptor_ = file->message_type(37);
  static const int GuildCDKInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCDKInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCDKInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCDKInfo, configid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCDKInfo, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCDKInfo, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCDKInfo, limitlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCDKInfo, limitday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCDKInfo, limitdonation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCDKInfo, datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCDKInfo, wish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCDKInfo, getplayerid_),
  };
  GuildCDKInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildCDKInfo_descriptor_,
      GuildCDKInfo::default_instance_,
      GuildCDKInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCDKInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCDKInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildCDKInfo));
  CreateGuildCDK_descriptor_ = file->message_type(38);
  static const int CreateGuildCDK_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGuildCDK, configid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGuildCDK, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGuildCDK, limitlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGuildCDK, limitday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGuildCDK, limitdonation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGuildCDK, wish_),
  };
  CreateGuildCDK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateGuildCDK_descriptor_,
      CreateGuildCDK::default_instance_,
      CreateGuildCDK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGuildCDK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGuildCDK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateGuildCDK));
  CreateGuildCDKReq_descriptor_ = file->message_type(39);
  static const int CreateGuildCDKReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGuildCDKReq, cdks_),
  };
  CreateGuildCDKReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateGuildCDKReq_descriptor_,
      CreateGuildCDKReq::default_instance_,
      CreateGuildCDKReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGuildCDKReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGuildCDKReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateGuildCDKReq));
  GetGuildCDKReq_descriptor_ = file->message_type(40);
  static const int GetGuildCDKReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildCDKReq, guid_),
  };
  GetGuildCDKReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGuildCDKReq_descriptor_,
      GetGuildCDKReq::default_instance_,
      GetGuildCDKReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildCDKReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildCDKReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGuildCDKReq));
  GetGuildCDKListReq_descriptor_ = file->message_type(41);
  static const int GetGuildCDKListReq_offsets_[1] = {
  };
  GetGuildCDKListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGuildCDKListReq_descriptor_,
      GetGuildCDKListReq::default_instance_,
      GetGuildCDKListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildCDKListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildCDKListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGuildCDKListReq));
  GetGuildCDKListReply_descriptor_ = file->message_type(42);
  static const int GetGuildCDKListReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildCDKListReply, cdks_),
  };
  GetGuildCDKListReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGuildCDKListReply_descriptor_,
      GetGuildCDKListReply::default_instance_,
      GetGuildCDKListReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildCDKListReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildCDKListReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGuildCDKListReply));
  BuildLevelUpReq_descriptor_ = file->message_type(43);
  static const int BuildLevelUpReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildLevelUpReq, buildtype_),
  };
  BuildLevelUpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildLevelUpReq_descriptor_,
      BuildLevelUpReq::default_instance_,
      BuildLevelUpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildLevelUpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildLevelUpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildLevelUpReq));
  BuildLevelUpReply_descriptor_ = file->message_type(44);
  static const int BuildLevelUpReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildLevelUpReply, buildtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildLevelUpReply, buildlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildLevelUpReply, cdtime_),
  };
  BuildLevelUpReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildLevelUpReply_descriptor_,
      BuildLevelUpReply::default_instance_,
      BuildLevelUpReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildLevelUpReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildLevelUpReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildLevelUpReply));
  GuildBossCompetitionDbInfo_descriptor_ = file->message_type(45);
  static const int GuildBossCompetitionDbInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBossCompetitionDbInfo, bosslevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBossCompetitionDbInfo, hp_),
  };
  GuildBossCompetitionDbInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildBossCompetitionDbInfo_descriptor_,
      GuildBossCompetitionDbInfo::default_instance_,
      GuildBossCompetitionDbInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBossCompetitionDbInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBossCompetitionDbInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildBossCompetitionDbInfo));
  GetGuildBossCompetitionReq_descriptor_ = file->message_type(46);
  static const int GetGuildBossCompetitionReq_offsets_[1] = {
  };
  GetGuildBossCompetitionReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGuildBossCompetitionReq_descriptor_,
      GetGuildBossCompetitionReq::default_instance_,
      GetGuildBossCompetitionReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildBossCompetitionReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildBossCompetitionReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGuildBossCompetitionReq));
  GetGuildBossCompetitionReply_descriptor_ = file->message_type(47);
  static const int GetGuildBossCompetitionReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildBossCompetitionReply, info_),
  };
  GetGuildBossCompetitionReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGuildBossCompetitionReply_descriptor_,
      GetGuildBossCompetitionReply::default_instance_,
      GetGuildBossCompetitionReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildBossCompetitionReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildBossCompetitionReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGuildBossCompetitionReply));
  GuildUserDamage_descriptor_ = file->message_type(48);
  static const int GuildUserDamage_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUserDamage, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUserDamage, playerid__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUserDamage, guildid__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUserDamage, paramid__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUserDamage, playername__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUserDamage, guildname__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUserDamage, playerhair__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUserDamage, damagevalue__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUserDamage, actor_config_id__),
  };
  GuildUserDamage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildUserDamage_descriptor_,
      GuildUserDamage::default_instance_,
      GuildUserDamage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUserDamage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUserDamage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildUserDamage));
  GuildAllDamage_descriptor_ = file->message_type(49);
  static const int GuildAllDamage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildAllDamage, guildid__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildAllDamage, guildname__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildAllDamage, damagevalue__),
  };
  GuildAllDamage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildAllDamage_descriptor_,
      GuildAllDamage::default_instance_,
      GuildAllDamage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildAllDamage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildAllDamage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildAllDamage));
  GuildBossUserDamage_descriptor_ = file->message_type(50);
  static const int GuildBossUserDamage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBossUserDamage, playerid__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBossUserDamage, playername__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBossUserDamage, playerhair__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBossUserDamage, damagevalue__),
  };
  GuildBossUserDamage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildBossUserDamage_descriptor_,
      GuildBossUserDamage::default_instance_,
      GuildBossUserDamage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBossUserDamage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBossUserDamage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildBossUserDamage));
  GetGuildUserDamageReq_descriptor_ = file->message_type(51);
  static const int GetGuildUserDamageReq_offsets_[1] = {
  };
  GetGuildUserDamageReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGuildUserDamageReq_descriptor_,
      GetGuildUserDamageReq::default_instance_,
      GetGuildUserDamageReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildUserDamageReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildUserDamageReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGuildUserDamageReq));
  GetGuildUserDamageReply_descriptor_ = file->message_type(52);
  static const int GetGuildUserDamageReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildUserDamageReply, users__),
  };
  GetGuildUserDamageReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGuildUserDamageReply_descriptor_,
      GetGuildUserDamageReply::default_instance_,
      GetGuildUserDamageReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildUserDamageReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildUserDamageReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGuildUserDamageReply));
  GetServerUserDamageReq_descriptor_ = file->message_type(53);
  static const int GetServerUserDamageReq_offsets_[1] = {
  };
  GetServerUserDamageReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetServerUserDamageReq_descriptor_,
      GetServerUserDamageReq::default_instance_,
      GetServerUserDamageReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServerUserDamageReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServerUserDamageReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetServerUserDamageReq));
  GetGuildAllDamageReply_descriptor_ = file->message_type(54);
  static const int GetGuildAllDamageReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildAllDamageReply, guilds__),
  };
  GetGuildAllDamageReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGuildAllDamageReply_descriptor_,
      GetGuildAllDamageReply::default_instance_,
      GetGuildAllDamageReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildAllDamageReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildAllDamageReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGuildAllDamageReply));
  GetGuildBossUserDamageReply_descriptor_ = file->message_type(55);
  static const int GetGuildBossUserDamageReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildBossUserDamageReply, users__),
  };
  GetGuildBossUserDamageReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGuildBossUserDamageReply_descriptor_,
      GetGuildBossUserDamageReply::default_instance_,
      GetGuildBossUserDamageReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildBossUserDamageReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildBossUserDamageReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGuildBossUserDamageReply));
  UpdateGuildBossUserDamage_descriptor_ = file->message_type(56);
  static const int UpdateGuildBossUserDamage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGuildBossUserDamage, opt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGuildBossUserDamage, damagevalue_),
  };
  UpdateGuildBossUserDamage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateGuildBossUserDamage_descriptor_,
      UpdateGuildBossUserDamage::default_instance_,
      UpdateGuildBossUserDamage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGuildBossUserDamage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGuildBossUserDamage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateGuildBossUserDamage));
  GuildWetCopyInfo_descriptor_ = file->message_type(57);
  static const int GuildWetCopyInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWetCopyInfo, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWetCopyInfo, copyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWetCopyInfo, stageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWetCopyInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWetCopyInfo, bosshp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWetCopyInfo, maxbosshp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWetCopyInfo, fighterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWetCopyInfo, fightname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWetCopyInfo, opentime_),
  };
  GuildWetCopyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildWetCopyInfo_descriptor_,
      GuildWetCopyInfo::default_instance_,
      GuildWetCopyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWetCopyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWetCopyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildWetCopyInfo));
  GetGuildWetCopyInfosReq_descriptor_ = file->message_type(58);
  static const int GetGuildWetCopyInfosReq_offsets_[1] = {
  };
  GetGuildWetCopyInfosReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGuildWetCopyInfosReq_descriptor_,
      GetGuildWetCopyInfosReq::default_instance_,
      GetGuildWetCopyInfosReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildWetCopyInfosReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildWetCopyInfosReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGuildWetCopyInfosReq));
  GetGuildWetCopyInfosReply_descriptor_ = file->message_type(59);
  static const int GetGuildWetCopyInfosReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildWetCopyInfosReply, wetcopys__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildWetCopyInfosReply, times_),
  };
  GetGuildWetCopyInfosReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetGuildWetCopyInfosReply_descriptor_,
      GetGuildWetCopyInfosReply::default_instance_,
      GetGuildWetCopyInfosReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildWetCopyInfosReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGuildWetCopyInfosReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetGuildWetCopyInfosReply));
  GuildWetCopyInfoUpdate_descriptor_ = file->message_type(60);
  static const int GuildWetCopyInfoUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWetCopyInfoUpdate, wetcopy_),
  };
  GuildWetCopyInfoUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildWetCopyInfoUpdate_descriptor_,
      GuildWetCopyInfoUpdate::default_instance_,
      GuildWetCopyInfoUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWetCopyInfoUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWetCopyInfoUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildWetCopyInfoUpdate));
  OpenGuildWetCopy_descriptor_ = file->message_type(61);
  static const int OpenGuildWetCopy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenGuildWetCopy, copyid_),
  };
  OpenGuildWetCopy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenGuildWetCopy_descriptor_,
      OpenGuildWetCopy::default_instance_,
      OpenGuildWetCopy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenGuildWetCopy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenGuildWetCopy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenGuildWetCopy));
  ResetGuildWetCopy_descriptor_ = file->message_type(62);
  static const int ResetGuildWetCopy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetGuildWetCopy, copyid_),
  };
  ResetGuildWetCopy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResetGuildWetCopy_descriptor_,
      ResetGuildWetCopy::default_instance_,
      ResetGuildWetCopy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetGuildWetCopy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetGuildWetCopy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResetGuildWetCopy));
  GuildBattleInfo_descriptor_ = file->message_type(63);
  static const int GuildBattleInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleInfo, a_guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleInfo, b_guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleInfo, a_guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleInfo, b_guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleInfo, raidid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleInfo, win_guildid_),
  };
  GuildBattleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildBattleInfo_descriptor_,
      GuildBattleInfo::default_instance_,
      GuildBattleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildBattleInfo));
  GuildBattleInfoList_descriptor_ = file->message_type(64);
  static const int GuildBattleInfoList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleInfoList, gblist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleInfoList, battletimes_),
  };
  GuildBattleInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildBattleInfoList_descriptor_,
      GuildBattleInfoList::default_instance_,
      GuildBattleInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildBattleInfoList));
  SelfGuildBattleInfo_descriptor_ = file->message_type(65);
  static const int SelfGuildBattleInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfGuildBattleInfo, gbinfo_),
  };
  SelfGuildBattleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SelfGuildBattleInfo_descriptor_,
      SelfGuildBattleInfo::default_instance_,
      SelfGuildBattleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfGuildBattleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfGuildBattleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SelfGuildBattleInfo));
  GuildBattleListReq_descriptor_ = file->message_type(66);
  static const int GuildBattleListReq_offsets_[1] = {
  };
  GuildBattleListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildBattleListReq_descriptor_,
      GuildBattleListReq::default_instance_,
      GuildBattleListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildBattleListReq));
  GuildBattleWeekRankInfo_descriptor_ = file->message_type(67);
  static const int GuildBattleWeekRankInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleWeekRankInfo, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleWeekRankInfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleWeekRankInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleWeekRankInfo, score_),
  };
  GuildBattleWeekRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildBattleWeekRankInfo_descriptor_,
      GuildBattleWeekRankInfo::default_instance_,
      GuildBattleWeekRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleWeekRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleWeekRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildBattleWeekRankInfo));
  GuildBattleWeekRankReq_descriptor_ = file->message_type(68);
  static const int GuildBattleWeekRankReq_offsets_[1] = {
  };
  GuildBattleWeekRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildBattleWeekRankReq_descriptor_,
      GuildBattleWeekRankReq::default_instance_,
      GuildBattleWeekRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleWeekRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleWeekRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildBattleWeekRankReq));
  GuildBattleWeekRankReply_descriptor_ = file->message_type(69);
  static const int GuildBattleWeekRankReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleWeekRankReply, list_),
  };
  GuildBattleWeekRankReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildBattleWeekRankReply_descriptor_,
      GuildBattleWeekRankReply::default_instance_,
      GuildBattleWeekRankReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleWeekRankReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleWeekRankReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildBattleWeekRankReply));
  GuildBattleAllRankInfo_descriptor_ = file->message_type(70);
  static const int GuildBattleAllRankInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleAllRankInfo, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleAllRankInfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleAllRankInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleAllRankInfo, battlewintimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleAllRankInfo, battletimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleAllRankInfo, winrate_),
  };
  GuildBattleAllRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildBattleAllRankInfo_descriptor_,
      GuildBattleAllRankInfo::default_instance_,
      GuildBattleAllRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleAllRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleAllRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildBattleAllRankInfo));
  GuildBattleAllRankReq_descriptor_ = file->message_type(71);
  static const int GuildBattleAllRankReq_offsets_[1] = {
  };
  GuildBattleAllRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildBattleAllRankReq_descriptor_,
      GuildBattleAllRankReq::default_instance_,
      GuildBattleAllRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleAllRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleAllRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildBattleAllRankReq));
  GuildBattleAllRankReply_descriptor_ = file->message_type(72);
  static const int GuildBattleAllRankReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleAllRankReply, list_),
  };
  GuildBattleAllRankReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildBattleAllRankReply_descriptor_,
      GuildBattleAllRankReply::default_instance_,
      GuildBattleAllRankReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleAllRankReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleAllRankReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildBattleAllRankReply));
  GuildBattleResultReply_descriptor_ = file->message_type(73);
  static const int GuildBattleResultReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleResultReply, win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleResultReply, time_),
  };
  GuildBattleResultReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildBattleResultReply_descriptor_,
      GuildBattleResultReply::default_instance_,
      GuildBattleResultReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleResultReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleResultReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildBattleResultReply));
  GuildBattlePlayerInfo_descriptor_ = file->message_type(74);
  static const int GuildBattlePlayerInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattlePlayerInfo, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattlePlayerInfo, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattlePlayerInfo, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattlePlayerInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattlePlayerInfo, fighting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattlePlayerInfo, streakwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattlePlayerInfo, mobility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattlePlayerInfo, protectcd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattlePlayerInfo, battlereward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattlePlayerInfo, init_actorid_),
  };
  GuildBattlePlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildBattlePlayerInfo_descriptor_,
      GuildBattlePlayerInfo::default_instance_,
      GuildBattlePlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattlePlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattlePlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildBattlePlayerInfo));
  GuildBattlePlayerListInfo_descriptor_ = file->message_type(75);
  static const int GuildBattlePlayerListInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattlePlayerListInfo, playerlist_),
  };
  GuildBattlePlayerListInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildBattlePlayerListInfo_descriptor_,
      GuildBattlePlayerListInfo::default_instance_,
      GuildBattlePlayerListInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattlePlayerListInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattlePlayerListInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildBattlePlayerListInfo));
  UpdateGuildBattlePlayerInfo_descriptor_ = file->message_type(76);
  static const int UpdateGuildBattlePlayerInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGuildBattlePlayerInfo, playerinfo_),
  };
  UpdateGuildBattlePlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateGuildBattlePlayerInfo_descriptor_,
      UpdateGuildBattlePlayerInfo::default_instance_,
      UpdateGuildBattlePlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGuildBattlePlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGuildBattlePlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateGuildBattlePlayerInfo));
  UpdateGuildBattleStage_descriptor_ = file->message_type(77);
  static const int UpdateGuildBattleStage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGuildBattleStage, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGuildBattleStage, dialog_),
  };
  UpdateGuildBattleStage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateGuildBattleStage_descriptor_,
      UpdateGuildBattleStage::default_instance_,
      UpdateGuildBattleStage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGuildBattleStage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGuildBattleStage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateGuildBattleStage));
  GuildBattleFightTarget_descriptor_ = file->message_type(78);
  static const int GuildBattleFightTarget_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleFightTarget, target_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleFightTarget, battle_group_id_),
  };
  GuildBattleFightTarget_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildBattleFightTarget_descriptor_,
      GuildBattleFightTarget::default_instance_,
      GuildBattleFightTarget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleFightTarget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleFightTarget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildBattleFightTarget));
  GuildWarehouse_descriptor_ = file->message_type(79);
  static const int GuildWarehouse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarehouse, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarehouse, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarehouse, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarehouse, receiveplayerid_),
  };
  GuildWarehouse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildWarehouse_descriptor_,
      GuildWarehouse::default_instance_,
      GuildWarehouse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarehouse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarehouse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildWarehouse));
  GuildWarehouseReq_descriptor_ = file->message_type(80);
  static const int GuildWarehouseReq_offsets_[1] = {
  };
  GuildWarehouseReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildWarehouseReq_descriptor_,
      GuildWarehouseReq::default_instance_,
      GuildWarehouseReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarehouseReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarehouseReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildWarehouseReq));
  GuildWarehouseReply_descriptor_ = file->message_type(81);
  static const int GuildWarehouseReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarehouseReply, whlist_),
  };
  GuildWarehouseReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildWarehouseReply_descriptor_,
      GuildWarehouseReply::default_instance_,
      GuildWarehouseReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarehouseReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarehouseReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildWarehouseReply));
  GuildWarehouseReceiveReq_descriptor_ = file->message_type(82);
  static const int GuildWarehouseReceiveReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarehouseReceiveReq, index_),
  };
  GuildWarehouseReceiveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildWarehouseReceiveReq_descriptor_,
      GuildWarehouseReceiveReq::default_instance_,
      GuildWarehouseReceiveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarehouseReceiveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarehouseReceiveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildWarehouseReceiveReq));
  GuildWarehouseSetReceivePlayerReq_descriptor_ = file->message_type(83);
  static const int GuildWarehouseSetReceivePlayerReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarehouseSetReceivePlayerReq, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarehouseSetReceivePlayerReq, receiveplayerid_),
  };
  GuildWarehouseSetReceivePlayerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildWarehouseSetReceivePlayerReq_descriptor_,
      GuildWarehouseSetReceivePlayerReq::default_instance_,
      GuildWarehouseSetReceivePlayerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarehouseSetReceivePlayerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarehouseSetReceivePlayerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildWarehouseSetReceivePlayerReq));
  GuildWarehouseUpdate_descriptor_ = file->message_type(84);
  static const int GuildWarehouseUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarehouseUpdate, item_),
  };
  GuildWarehouseUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildWarehouseUpdate_descriptor_,
      GuildWarehouseUpdate::default_instance_,
      GuildWarehouseUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarehouseUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarehouseUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildWarehouseUpdate));
  GuildWarehouseRecord_descriptor_ = file->message_type(85);
  static const int GuildWarehouseRecord_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarehouseRecord, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarehouseRecord, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarehouseRecord, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarehouseRecord, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarehouseRecord, itemid_),
  };
  GuildWarehouseRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildWarehouseRecord_descriptor_,
      GuildWarehouseRecord::default_instance_,
      GuildWarehouseRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarehouseRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarehouseRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildWarehouseRecord));
  GuildWarehouseRecordReq_descriptor_ = file->message_type(86);
  static const int GuildWarehouseRecordReq_offsets_[1] = {
  };
  GuildWarehouseRecordReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildWarehouseRecordReq_descriptor_,
      GuildWarehouseRecordReq::default_instance_,
      GuildWarehouseRecordReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarehouseRecordReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarehouseRecordReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildWarehouseRecordReq));
  GuildWarehouseRecordReply_descriptor_ = file->message_type(87);
  static const int GuildWarehouseRecordReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarehouseRecordReply, record_),
  };
  GuildWarehouseRecordReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildWarehouseRecordReply_descriptor_,
      GuildWarehouseRecordReply::default_instance_,
      GuildWarehouseRecordReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarehouseRecordReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarehouseRecordReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildWarehouseRecordReply));
  GuildSpoilItem_descriptor_ = file->message_type(88);
  static const int GuildSpoilItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSpoilItem, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSpoilItem, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSpoilItem, copyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSpoilItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSpoilItem, timecd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSpoilItem, playerid_),
  };
  GuildSpoilItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildSpoilItem_descriptor_,
      GuildSpoilItem::default_instance_,
      GuildSpoilItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSpoilItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSpoilItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildSpoilItem));
  GuildRecord_descriptor_ = file->message_type(89);
  static const int GuildRecord_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRecord, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRecord, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRecord, record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRecord, date_),
  };
  GuildRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRecord_descriptor_,
      GuildRecord::default_instance_,
      GuildRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRecord));
  GuildRecordReply_descriptor_ = file->message_type(90);
  static const int GuildRecordReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRecordReply, records_),
  };
  GuildRecordReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRecordReply_descriptor_,
      GuildRecordReply::default_instance_,
      GuildRecordReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRecordReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRecordReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRecordReply));
  GuildUserName_descriptor_ = file->message_type(91);
  static const int GuildUserName_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUserName, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUserName, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUserName, hair_),
  };
  GuildUserName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildUserName_descriptor_,
      GuildUserName::default_instance_,
      GuildUserName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUserName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUserName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildUserName));
  GuildSpoilItemClient_descriptor_ = file->message_type(92);
  static const int GuildSpoilItemClient_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSpoilItemClient, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSpoilItemClient, copyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSpoilItemClient, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSpoilItemClient, timecd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSpoilItemClient, applyplayer_),
  };
  GuildSpoilItemClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildSpoilItemClient_descriptor_,
      GuildSpoilItemClient::default_instance_,
      GuildSpoilItemClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSpoilItemClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSpoilItemClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildSpoilItemClient));
  GuildSpoilItemReply_descriptor_ = file->message_type(93);
  static const int GuildSpoilItemReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSpoilItemReply, items_),
  };
  GuildSpoilItemReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildSpoilItemReply_descriptor_,
      GuildSpoilItemReply::default_instance_,
      GuildSpoilItemReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSpoilItemReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSpoilItemReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildSpoilItemReply));
  UpdateGuildSpoilItemClient_descriptor_ = file->message_type(94);
  static const int UpdateGuildSpoilItemClient_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGuildSpoilItemClient, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGuildSpoilItemClient, applyplayer_),
  };
  UpdateGuildSpoilItemClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateGuildSpoilItemClient_descriptor_,
      UpdateGuildSpoilItemClient::default_instance_,
      UpdateGuildSpoilItemClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGuildSpoilItemClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGuildSpoilItemClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateGuildSpoilItemClient));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Guild_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerGuildUserData_descriptor_, &PlayerGuildUserData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildUser_descriptor_, &GuildUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildImpeach_descriptor_, &GuildImpeach::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildDBInfo_descriptor_, &GuildDBInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetGuildIconRR_descriptor_, &SetGuildIconRR::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PracticeInfo_descriptor_, &PracticeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerPracticeReq_descriptor_, &PlayerPracticeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPracticeReq_descriptor_, &GetPracticeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPracticeReply_descriptor_, &GetPracticeReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGuildInfoReq_descriptor_, &GetGuildInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGuildInfoReply_descriptor_, &GetGuildInfoReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGuildUserListInfoReq_descriptor_, &GetGuildUserListInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGuildUserListInfoReply_descriptor_, &GetGuildUserListInfoReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateGuildReq_descriptor_, &CreateGuildReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FindGuildReq_descriptor_, &FindGuildReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyGuildReq_descriptor_, &ApplyGuildReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OneKeyApplyGuildReq_descriptor_, &OneKeyApplyGuildReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteyAddGuildReq_descriptor_, &InviteyAddGuildReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskInviteyAgreeGuildReply_descriptor_, &AskInviteyAgreeGuildReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteyAgreeGuildReq_descriptor_, &InviteyAgreeGuildReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgreeApplyGuildReq_descriptor_, &AgreeApplyGuildReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdatePlayerGuildInfo_descriptor_, &UpdatePlayerGuildInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildBaseInfo_descriptor_, &GuildBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGuildListReq_descriptor_, &GetGuildListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildBaseListReply_descriptor_, &GuildBaseListReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyGuildPlayerInfo_descriptor_, &ApplyGuildPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyGuildPlayerListReq_descriptor_, &ApplyGuildPlayerListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyGuildPlayerListReply_descriptor_, &ApplyGuildPlayerListReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClearApplyGuildPlayerListReq_descriptor_, &ClearApplyGuildPlayerListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetGuildNameRR_descriptor_, &SetGuildNameRR::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetGuildNoticeRR_descriptor_, &SetGuildNoticeRR::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildDonationReq_descriptor_, &GuildDonationReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DonationFlagUpdate_descriptor_, &DonationFlagUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMoneyUpdate_descriptor_, &GuildMoneyUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildImpeachReply_descriptor_, &GuildImpeachReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetGuildUserPositionRR_descriptor_, &SetGuildUserPositionRR::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGuildBonusReq_descriptor_, &GetGuildBonusReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildCDKInfo_descriptor_, &GuildCDKInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateGuildCDK_descriptor_, &CreateGuildCDK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateGuildCDKReq_descriptor_, &CreateGuildCDKReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGuildCDKReq_descriptor_, &GetGuildCDKReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGuildCDKListReq_descriptor_, &GetGuildCDKListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGuildCDKListReply_descriptor_, &GetGuildCDKListReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildLevelUpReq_descriptor_, &BuildLevelUpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildLevelUpReply_descriptor_, &BuildLevelUpReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildBossCompetitionDbInfo_descriptor_, &GuildBossCompetitionDbInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGuildBossCompetitionReq_descriptor_, &GetGuildBossCompetitionReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGuildBossCompetitionReply_descriptor_, &GetGuildBossCompetitionReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildUserDamage_descriptor_, &GuildUserDamage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildAllDamage_descriptor_, &GuildAllDamage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildBossUserDamage_descriptor_, &GuildBossUserDamage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGuildUserDamageReq_descriptor_, &GetGuildUserDamageReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGuildUserDamageReply_descriptor_, &GetGuildUserDamageReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetServerUserDamageReq_descriptor_, &GetServerUserDamageReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGuildAllDamageReply_descriptor_, &GetGuildAllDamageReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGuildBossUserDamageReply_descriptor_, &GetGuildBossUserDamageReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateGuildBossUserDamage_descriptor_, &UpdateGuildBossUserDamage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildWetCopyInfo_descriptor_, &GuildWetCopyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGuildWetCopyInfosReq_descriptor_, &GetGuildWetCopyInfosReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetGuildWetCopyInfosReply_descriptor_, &GetGuildWetCopyInfosReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildWetCopyInfoUpdate_descriptor_, &GuildWetCopyInfoUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenGuildWetCopy_descriptor_, &OpenGuildWetCopy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResetGuildWetCopy_descriptor_, &ResetGuildWetCopy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildBattleInfo_descriptor_, &GuildBattleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildBattleInfoList_descriptor_, &GuildBattleInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SelfGuildBattleInfo_descriptor_, &SelfGuildBattleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildBattleListReq_descriptor_, &GuildBattleListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildBattleWeekRankInfo_descriptor_, &GuildBattleWeekRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildBattleWeekRankReq_descriptor_, &GuildBattleWeekRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildBattleWeekRankReply_descriptor_, &GuildBattleWeekRankReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildBattleAllRankInfo_descriptor_, &GuildBattleAllRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildBattleAllRankReq_descriptor_, &GuildBattleAllRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildBattleAllRankReply_descriptor_, &GuildBattleAllRankReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildBattleResultReply_descriptor_, &GuildBattleResultReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildBattlePlayerInfo_descriptor_, &GuildBattlePlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildBattlePlayerListInfo_descriptor_, &GuildBattlePlayerListInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateGuildBattlePlayerInfo_descriptor_, &UpdateGuildBattlePlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateGuildBattleStage_descriptor_, &UpdateGuildBattleStage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildBattleFightTarget_descriptor_, &GuildBattleFightTarget::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildWarehouse_descriptor_, &GuildWarehouse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildWarehouseReq_descriptor_, &GuildWarehouseReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildWarehouseReply_descriptor_, &GuildWarehouseReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildWarehouseReceiveReq_descriptor_, &GuildWarehouseReceiveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildWarehouseSetReceivePlayerReq_descriptor_, &GuildWarehouseSetReceivePlayerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildWarehouseUpdate_descriptor_, &GuildWarehouseUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildWarehouseRecord_descriptor_, &GuildWarehouseRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildWarehouseRecordReq_descriptor_, &GuildWarehouseRecordReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildWarehouseRecordReply_descriptor_, &GuildWarehouseRecordReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildSpoilItem_descriptor_, &GuildSpoilItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRecord_descriptor_, &GuildRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRecordReply_descriptor_, &GuildRecordReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildUserName_descriptor_, &GuildUserName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildSpoilItemClient_descriptor_, &GuildSpoilItemClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildSpoilItemReply_descriptor_, &GuildSpoilItemReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateGuildSpoilItemClient_descriptor_, &UpdateGuildSpoilItemClient::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Guild_2eproto() {
  delete PlayerGuildUserData::default_instance_;
  delete PlayerGuildUserData_reflection_;
  delete GuildUser::default_instance_;
  delete GuildUser_reflection_;
  delete GuildImpeach::default_instance_;
  delete GuildImpeach_reflection_;
  delete GuildDBInfo::default_instance_;
  delete GuildDBInfo_reflection_;
  delete SetGuildIconRR::default_instance_;
  delete SetGuildIconRR_reflection_;
  delete PracticeInfo::default_instance_;
  delete PracticeInfo_reflection_;
  delete PlayerPracticeReq::default_instance_;
  delete PlayerPracticeReq_reflection_;
  delete GetPracticeReq::default_instance_;
  delete GetPracticeReq_reflection_;
  delete GetPracticeReply::default_instance_;
  delete GetPracticeReply_reflection_;
  delete GetGuildInfoReq::default_instance_;
  delete GetGuildInfoReq_reflection_;
  delete GetGuildInfoReply::default_instance_;
  delete GetGuildInfoReply_reflection_;
  delete GetGuildUserListInfoReq::default_instance_;
  delete GetGuildUserListInfoReq_reflection_;
  delete GetGuildUserListInfoReply::default_instance_;
  delete GetGuildUserListInfoReply_reflection_;
  delete CreateGuildReq::default_instance_;
  delete CreateGuildReq_reflection_;
  delete FindGuildReq::default_instance_;
  delete FindGuildReq_reflection_;
  delete ApplyGuildReq::default_instance_;
  delete ApplyGuildReq_reflection_;
  delete OneKeyApplyGuildReq::default_instance_;
  delete OneKeyApplyGuildReq_reflection_;
  delete InviteyAddGuildReq::default_instance_;
  delete InviteyAddGuildReq_reflection_;
  delete AskInviteyAgreeGuildReply::default_instance_;
  delete AskInviteyAgreeGuildReply_reflection_;
  delete InviteyAgreeGuildReq::default_instance_;
  delete InviteyAgreeGuildReq_reflection_;
  delete AgreeApplyGuildReq::default_instance_;
  delete AgreeApplyGuildReq_reflection_;
  delete UpdatePlayerGuildInfo::default_instance_;
  delete UpdatePlayerGuildInfo_reflection_;
  delete GuildBaseInfo::default_instance_;
  delete GuildBaseInfo_reflection_;
  delete GetGuildListReq::default_instance_;
  delete GetGuildListReq_reflection_;
  delete GuildBaseListReply::default_instance_;
  delete GuildBaseListReply_reflection_;
  delete ApplyGuildPlayerInfo::default_instance_;
  delete ApplyGuildPlayerInfo_reflection_;
  delete ApplyGuildPlayerListReq::default_instance_;
  delete ApplyGuildPlayerListReq_reflection_;
  delete ApplyGuildPlayerListReply::default_instance_;
  delete ApplyGuildPlayerListReply_reflection_;
  delete ClearApplyGuildPlayerListReq::default_instance_;
  delete ClearApplyGuildPlayerListReq_reflection_;
  delete SetGuildNameRR::default_instance_;
  delete SetGuildNameRR_reflection_;
  delete SetGuildNoticeRR::default_instance_;
  delete SetGuildNoticeRR_reflection_;
  delete GuildDonationReq::default_instance_;
  delete GuildDonationReq_reflection_;
  delete DonationFlagUpdate::default_instance_;
  delete DonationFlagUpdate_reflection_;
  delete GuildMoneyUpdate::default_instance_;
  delete GuildMoneyUpdate_reflection_;
  delete GuildImpeachReply::default_instance_;
  delete GuildImpeachReply_reflection_;
  delete SetGuildUserPositionRR::default_instance_;
  delete SetGuildUserPositionRR_reflection_;
  delete GetGuildBonusReq::default_instance_;
  delete GetGuildBonusReq_reflection_;
  delete GuildCDKInfo::default_instance_;
  delete GuildCDKInfo_reflection_;
  delete CreateGuildCDK::default_instance_;
  delete CreateGuildCDK_reflection_;
  delete CreateGuildCDKReq::default_instance_;
  delete CreateGuildCDKReq_reflection_;
  delete GetGuildCDKReq::default_instance_;
  delete GetGuildCDKReq_reflection_;
  delete GetGuildCDKListReq::default_instance_;
  delete GetGuildCDKListReq_reflection_;
  delete GetGuildCDKListReply::default_instance_;
  delete GetGuildCDKListReply_reflection_;
  delete BuildLevelUpReq::default_instance_;
  delete BuildLevelUpReq_reflection_;
  delete BuildLevelUpReply::default_instance_;
  delete BuildLevelUpReply_reflection_;
  delete GuildBossCompetitionDbInfo::default_instance_;
  delete GuildBossCompetitionDbInfo_reflection_;
  delete GetGuildBossCompetitionReq::default_instance_;
  delete GetGuildBossCompetitionReq_reflection_;
  delete GetGuildBossCompetitionReply::default_instance_;
  delete GetGuildBossCompetitionReply_reflection_;
  delete GuildUserDamage::default_instance_;
  delete GuildUserDamage_reflection_;
  delete GuildAllDamage::default_instance_;
  delete GuildAllDamage_reflection_;
  delete GuildBossUserDamage::default_instance_;
  delete GuildBossUserDamage_reflection_;
  delete GetGuildUserDamageReq::default_instance_;
  delete GetGuildUserDamageReq_reflection_;
  delete GetGuildUserDamageReply::default_instance_;
  delete GetGuildUserDamageReply_reflection_;
  delete GetServerUserDamageReq::default_instance_;
  delete GetServerUserDamageReq_reflection_;
  delete GetGuildAllDamageReply::default_instance_;
  delete GetGuildAllDamageReply_reflection_;
  delete GetGuildBossUserDamageReply::default_instance_;
  delete GetGuildBossUserDamageReply_reflection_;
  delete UpdateGuildBossUserDamage::default_instance_;
  delete UpdateGuildBossUserDamage_reflection_;
  delete GuildWetCopyInfo::default_instance_;
  delete GuildWetCopyInfo_reflection_;
  delete GetGuildWetCopyInfosReq::default_instance_;
  delete GetGuildWetCopyInfosReq_reflection_;
  delete GetGuildWetCopyInfosReply::default_instance_;
  delete GetGuildWetCopyInfosReply_reflection_;
  delete GuildWetCopyInfoUpdate::default_instance_;
  delete GuildWetCopyInfoUpdate_reflection_;
  delete OpenGuildWetCopy::default_instance_;
  delete OpenGuildWetCopy_reflection_;
  delete ResetGuildWetCopy::default_instance_;
  delete ResetGuildWetCopy_reflection_;
  delete GuildBattleInfo::default_instance_;
  delete GuildBattleInfo_reflection_;
  delete GuildBattleInfoList::default_instance_;
  delete GuildBattleInfoList_reflection_;
  delete SelfGuildBattleInfo::default_instance_;
  delete SelfGuildBattleInfo_reflection_;
  delete GuildBattleListReq::default_instance_;
  delete GuildBattleListReq_reflection_;
  delete GuildBattleWeekRankInfo::default_instance_;
  delete GuildBattleWeekRankInfo_reflection_;
  delete GuildBattleWeekRankReq::default_instance_;
  delete GuildBattleWeekRankReq_reflection_;
  delete GuildBattleWeekRankReply::default_instance_;
  delete GuildBattleWeekRankReply_reflection_;
  delete GuildBattleAllRankInfo::default_instance_;
  delete GuildBattleAllRankInfo_reflection_;
  delete GuildBattleAllRankReq::default_instance_;
  delete GuildBattleAllRankReq_reflection_;
  delete GuildBattleAllRankReply::default_instance_;
  delete GuildBattleAllRankReply_reflection_;
  delete GuildBattleResultReply::default_instance_;
  delete GuildBattleResultReply_reflection_;
  delete GuildBattlePlayerInfo::default_instance_;
  delete GuildBattlePlayerInfo_reflection_;
  delete GuildBattlePlayerListInfo::default_instance_;
  delete GuildBattlePlayerListInfo_reflection_;
  delete UpdateGuildBattlePlayerInfo::default_instance_;
  delete UpdateGuildBattlePlayerInfo_reflection_;
  delete UpdateGuildBattleStage::default_instance_;
  delete UpdateGuildBattleStage_reflection_;
  delete GuildBattleFightTarget::default_instance_;
  delete GuildBattleFightTarget_reflection_;
  delete GuildWarehouse::default_instance_;
  delete GuildWarehouse_reflection_;
  delete GuildWarehouseReq::default_instance_;
  delete GuildWarehouseReq_reflection_;
  delete GuildWarehouseReply::default_instance_;
  delete GuildWarehouseReply_reflection_;
  delete GuildWarehouseReceiveReq::default_instance_;
  delete GuildWarehouseReceiveReq_reflection_;
  delete GuildWarehouseSetReceivePlayerReq::default_instance_;
  delete GuildWarehouseSetReceivePlayerReq_reflection_;
  delete GuildWarehouseUpdate::default_instance_;
  delete GuildWarehouseUpdate_reflection_;
  delete GuildWarehouseRecord::default_instance_;
  delete GuildWarehouseRecord_reflection_;
  delete GuildWarehouseRecordReq::default_instance_;
  delete GuildWarehouseRecordReq_reflection_;
  delete GuildWarehouseRecordReply::default_instance_;
  delete GuildWarehouseRecordReply_reflection_;
  delete GuildSpoilItem::default_instance_;
  delete GuildSpoilItem_reflection_;
  delete GuildRecord::default_instance_;
  delete GuildRecord_reflection_;
  delete GuildRecordReply::default_instance_;
  delete GuildRecordReply_reflection_;
  delete GuildUserName::default_instance_;
  delete GuildUserName_reflection_;
  delete GuildSpoilItemClient::default_instance_;
  delete GuildSpoilItemClient_reflection_;
  delete GuildSpoilItemReply::default_instance_;
  delete GuildSpoilItemReply_reflection_;
  delete UpdateGuildSpoilItemClient::default_instance_;
  delete UpdateGuildSpoilItemClient_reflection_;
}

void protobuf_AddDesc_Guild_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Packet::protobuf_AddDesc_AllPacketEnum_2eproto();
  ::Packet::protobuf_AddDesc_PlayerBasicInfo_2eproto();
  ::Packet::protobuf_AddDesc_ItemAndEquip_2eproto();
  ::Packet::protobuf_AddDesc_ProtoBufOption_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Guild.proto\022\006Packet\032\023AllPacketEnum.pro"
    "to\032\025PlayerBasicInfo.proto\032\022ItemAndEquip."
    "proto\032\024ProtoBufOption.proto\"\245\002\n\023PlayerGu"
    "ildUserData\022\'\n\010position\030\001 \002(\0162\025.Packet.G"
    "uildPosition\022\021\n\tbdonation\030\002 \002(\005\022\016\n\006bbonu"
    "s\030\003 \002(\005\022\027\n\017curcontribution\030\004 \002(\005\022\030\n\020week"
    "contribution\030\005 \002(\005\022\027\n\017allcontribution\030\006 "
    "\002(\005\022\020\n\010jointime\030\007 \002(\r\022\022\n\nguildlevel\030\010 \002("
    "\005\022\024\n\014cashboxlevel\030\t \002(\005\022\021\n\tshoplevel\030\n \002"
    "(\005\022\024\n\014storagelevel\030\013 \002(\005\022\021\n\tguildname\030\014 "
    "\001(\t\"\274\004\n\tGuildUser\022\030\n\nplayerguid\030\001 \002(\006B\004\310"
    "\363\030\001\022\017\n\007guildid\030\002 \002(\006\022\022\n\nplayername\030\003 \002(\t"
    "\022\023\n\013playerlevel\030\004 \002(\005\022\'\n\010position\030\005 \002(\0162"
    "\025.Packet.GuildPosition\022\016\n\006online\030\006 \002(\005\022\021"
    "\n\tbdonation\030\007 \002(\005\022\016\n\006bbonus\030\010 \002(\005\022\027\n\017cur"
    "contribution\030\t \002(\005\022\030\n\020weekcontribution\030\n"
    " \002(\005\022\027\n\017allcontribution\030\013 \002(\005\022\022\n\nbattlet"
    "ime\030\014 \002(\005\022\026\n\016lastlogouttime\030\r \002(\r\022\020\n\010joi"
    "ntime\030\016 \002(\r\022\022\n\nbossdamage\030\017 \002(\005\022\034\n\024main_"
    "actor_config_id\030\020 \002(\005\022\030\n\020main_actor_scor"
    "e\030\021 \002(\005\022,\n\020main_actor_color\030\022 \002(\0162\022.Pack"
    "et.ActorColor\022*\n\017main_actor_star\030\023 \002(\0162\021"
    ".Packet.ActorStar\022\024\n\014wetcopytimes\030\024 \002(\005\022"
    "\026\n\016spoiljumptimes\030\025 \002(\005\022\014\n\004hair\030\032 \002(\005\022\023\n"
    "\013lastguildid\030\033 \002(\006\"s\n\014GuildImpeach\022\024\n\014im"
    "peachguild\030\001 \002(\006\022\023\n\013impeachname\030\002 \002(\t\022\021\n"
    "\tneedcount\030\003 \002(\005\022\017\n\007endtime\030\004 \002(\005\022\024\n\014res"
    "pondguild\030\005 \003(\006\"\331\004\n\013GuildDBInfo\022\014\n\004guid\030"
    "\001 \002(\006\022\014\n\004name\030\002 \002(\t\022\020\n\010lastname\030\003 \002(\t\022\016\n"
    "\006notice\030\004 \002(\t\022\014\n\004icon\030\005 \002(\t\022\021\n\tchieftain"
    "\030\006 \002(\006\022\025\n\rchieftainname\030\007 \002(\t\022\022\n\nguildle"
    "vel\030\010 \002(\005\022\024\n\014cashboxlevel\030\t \002(\005\022\021\n\tshopl"
    "evel\030\n \002(\005\022\024\n\014storagelevel\030\013 \002(\005\022\017\n\007guil"
    "dcd\030\014 \002(\r\022\021\n\tcashboxcd\030\r \002(\r\022\016\n\006shopcd\030\016"
    " \002(\r\022\021\n\tstoragecd\030\017 \002(\r\022\022\n\nguildmoney\030\020 "
    "\002(\005\022\027\n\017limitapplylevel\030\021 \002(\005\022\024\n\014maxwetco"
    "pyid\030\022 \002(\005\022\021\n\tweekbonus\030\023 \002(\005\022\026\n\016lowmain"
    "tainday\030\024 \002(\007\022\026\n\016battlewintimes\030\025 \002(\005\022\023\n"
    "\013battletimes\030\026 \002(\005\022\027\n\017battlelefttimes\030\027 "
    "\002(\005\022\033\n\023battleroundwintimes\030\030 \002(\005\022\030\n\020batt"
    "leroundtimes\030\031 \002(\005\022\023\n\013battlescore\030\032 \002(\005\022"
    "\022\n\ncreatetime\030\033 \002(\007\022\022\n\ncreateguid\030\034 \002(\006\022"
    "\022\n\ncreatename\030\035 \002(\t\"\036\n\016SetGuildIconRR\022\014\n"
    "\004icon\030\001 \002(\t\"V\n\014PracticeInfo\022\030\n\nplayergui"
    "d\030\001 \002(\006B\004\310\363\030\001\022\020\n\002id\030\002 \002(\005B\004\310\363\030\001\022\r\n\005level"
    "\030\003 \002(\005\022\013\n\003exp\030\004 \002(\005\"-\n\021PlayerPracticeReq"
    "\022\014\n\004type\030\001 \002(\005\022\n\n\002id\030\002 \002(\005\"\020\n\016GetPractic"
    "eReq\"6\n\020GetPracticeReply\022\"\n\004list\030\001 \003(\0132\024"
    ".Packet.PracticeInfo\"\021\n\017GetGuildInfoReq\""
    "\206\001\n\021GetGuildInfoReply\022!\n\004info\030\001 \002(\0132\023.Pa"
    "cket.GuildDBInfo\022\022\n\nmembersize\030\002 \002(\005\022\025\n\r"
    "maxmembersize\030\003 \002(\005\022#\n\010selfinfo\030\004 \002(\0132\021."
    "Packet.GuildUser\"\031\n\027GetGuildUserListInfo"
    "Req\"@\n\031GetGuildUserListInfoReply\022#\n\010user"
    "list\030\001 \003(\0132\021.Packet.GuildUser\".\n\016CreateG"
    "uildReq\022\014\n\004name\030\001 \002(\t\022\016\n\006notice\030\002 \002(\t\"*\n"
    "\014FindGuildReq\022\014\n\004name\030\001 \001(\t\022\014\n\004guid\030\002 \001("
    "\006\"\035\n\rApplyGuildReq\022\014\n\004guid\030\001 \002(\006\"\025\n\023OneK"
    "eyApplyGuildReq\"(\n\022InviteyAddGuildReq\022\022\n"
    "\nplayerguid\030\001 \002(\006\"q\n\031AskInviteyAgreeGuil"
    "dReply\022\017\n\007guildid\030\001 \002(\006\022\021\n\tguildname\030\002 \002"
    "(\t\022\027\n\017guildinvitename\030\003 \002(\t\022\027\n\017guildinvi"
    "teguid\030\004 \002(\006\"Q\n\024InviteyAgreeGuildReq\022\017\n\007"
    "guildid\030\001 \002(\006\022\r\n\005agree\030\002 \002(\010\022\031\n\021guildidi"
    "nviteguid\030\003 \002(\006\"7\n\022AgreeApplyGuildReq\022\022\n"
    "\nplayerguid\030\001 \002(\006\022\r\n\005agree\030\002 \002(\010\";\n\025Upda"
    "tePlayerGuildInfo\022\017\n\007guildid\030\001 \002(\006\022\021\n\tgu"
    "ildname\030\002 \002(\t\"\316\001\n\rGuildBaseInfo\022\014\n\004guid\030"
    "\001 \002(\006\022\014\n\004name\030\002 \002(\t\022\020\n\010lastname\030\003 \002(\t\022\016\n"
    "\006notice\030\004 \002(\t\022\022\n\nguildlevel\030\005 \002(\005\022\022\n\nmem"
    "bersize\030\006 \002(\005\022\025\n\rmaxmembersize\030\007 \002(\005\022\025\n\r"
    "chieftainname\030\010 \002(\t\022\025\n\rchieftainguid\030\t \002"
    "(\006\022\022\n\ncreatetime\030\n \002(\007\"\021\n\017GetGuildListRe"
    "q\"9\n\022GuildBaseListReply\022#\n\004list\030\001 \003(\0132\025."
    "Packet.GuildBaseInfo\"|\n\024ApplyGuildPlayer"
    "Info\022\022\n\nplayerguid\030\001 \002(\006\022\022\n\nplayername\030\002"
    " \002(\t\022\023\n\013playerlevel\030\003 \002(\005\022\'\n\nprofession\030"
    "\004 \002(\0162\023.Packet.Professions\"\031\n\027ApplyGuild"
    "PlayerListReq\"G\n\031ApplyGuildPlayerListRep"
    "ly\022*\n\004list\030\001 \003(\0132\034.Packet.ApplyGuildPlay"
    "erInfo\"\036\n\034ClearApplyGuildPlayerListReq\"0"
    "\n\016SetGuildNameRR\022\014\n\004name\030\001 \002(\t\022\020\n\010lastna"
    "me\030\002 \002(\t\"\"\n\020SetGuildNoticeRR\022\016\n\006notice\030\001"
    " \002(\t\" \n\020GuildDonationReq\022\014\n\004type\030\001 \002(\005\"\'"
    "\n\022DonationFlagUpdate\022\021\n\tbdonation\030\007 \002(\005\""
    "&\n\020GuildMoneyUpdate\022\022\n\nguildmoney\030\001 \002(\005\""
    ":\n\021GuildImpeachReply\022%\n\007impeach\030\001 \002(\0132\024."
    "Packet.GuildImpeach\"U\n\026SetGuildUserPosit"
    "ionRR\022\022\n\nplayerguid\030\001 \002(\006\022\'\n\010position\030\002 "
    "\002(\0162\025.Packet.GuildPosition\"\022\n\020GetGuildBo"
    "nusReq\"\325\001\n\014GuildCDKInfo\022\014\n\004guid\030\001 \002(\006\022\020\n"
    "\010playerid\030\002 \002(\006\022\020\n\010configid\030\003 \002(\005\022\r\n\005cou"
    "nt\030\004 \002(\005\022\022\n\nplayername\030\005 \002(\t\022\022\n\nlimitlev"
    "el\030\006 \002(\005\022\020\n\010limitday\030\007 \002(\005\022\025\n\rlimitdonat"
    "ion\030\010 \002(\005\022\020\n\010datetime\030\t \002(\007\022\014\n\004wish\030\n \002("
    "\t\022\023\n\013getplayerid\030\013 \003(\006\"|\n\016CreateGuildCDK"
    "\022\020\n\010configid\030\001 \002(\005\022\r\n\005count\030\002 \002(\005\022\022\n\nlim"
    "itlevel\030\003 \002(\005\022\020\n\010limitday\030\004 \002(\005\022\025\n\rlimit"
    "donation\030\005 \002(\005\022\014\n\004wish\030\006 \002(\t\"9\n\021CreateGu"
    "ildCDKReq\022$\n\004cdks\030\001 \003(\0132\026.Packet.CreateG"
    "uildCDK\"\036\n\016GetGuildCDKReq\022\014\n\004guid\030\001 \002(\006\""
    "\024\n\022GetGuildCDKListReq\":\n\024GetGuildCDKList"
    "Reply\022\"\n\004cdks\030\001 \003(\0132\024.Packet.GuildCDKInf"
    "o\"$\n\017BuildLevelUpReq\022\021\n\tbuildtype\030\001 \002(\005\""
    "J\n\021BuildLevelUpReply\022\021\n\tbuildtype\030\001 \002(\005\022"
    "\022\n\nbuildlevel\030\002 \002(\005\022\016\n\006cdtime\030\003 \002(\r\"A\n\032G"
    "uildBossCompetitionDbInfo\022\027\n\tbosslevel\030\001"
    " \002(\005B\004\310\363\030\001\022\n\n\002hp\030\002 \002(\003\"\034\n\032GetGuildBossCo"
    "mpetitionReq\"P\n\034GetGuildBossCompetitionR"
    "eply\0220\n\004info\030\001 \002(\0132\".Packet.GuildBossCom"
    "petitionDbInfo\"\320\001\n\017GuildUserDamage\022\022\n\004gu"
    "id\030\001 \002(\006B\004\310\363\030\001\022\021\n\tplayerid_\030\002 \002(\006\022\020\n\010gui"
    "ldid_\030\003 \002(\006\022\020\n\010paramid_\030\004 \002(\005\022\023\n\013playern"
    "ame_\030\005 \002(\t\022\022\n\nguildname_\030\006 \002(\t\022\023\n\013player"
    "hair_\030\007 \002(\005\022\024\n\014damagevalue_\030\010 \002(\005\022\036\n\020act"
    "or_config_id_\030\t \003(\005B\004\300\363\030\005\"L\n\016GuildAllDam"
    "age\022\020\n\010guildid_\030\001 \002(\006\022\022\n\nguildname_\030\002 \002("
    "\t\022\024\n\014damagevalue_\030\003 \002(\005\"h\n\023GuildBossUser"
    "Damage\022\021\n\tplayerid_\030\001 \002(\006\022\023\n\013playername_"
    "\030\002 \002(\t\022\023\n\013playerhair_\030\003 \002(\005\022\024\n\014damageval"
    "ue_\030\004 \002(\005\"\027\n\025GetGuildUserDamageReq\"B\n\027Ge"
    "tGuildUserDamageReply\022\'\n\006users_\030\001 \003(\0132\027."
    "Packet.GuildUserDamage\"\030\n\026GetServerUserD"
    "amageReq\"A\n\026GetGuildAllDamageReply\022\'\n\007gu"
    "ilds_\030\001 \003(\0132\026.Packet.GuildAllDamage\"J\n\033G"
    "etGuildBossUserDamageReply\022+\n\006users_\030\001 \003"
    "(\0132\033.Packet.GuildBossUserDamage\"=\n\031Updat"
    "eGuildBossUserDamage\022\013\n\003opt\030\001 \002(\005\022\023\n\013dam"
    "agevalue\030\002 \002(\005\"\301\001\n\020GuildWetCopyInfo\022\025\n\007g"
    "uildid\030\001 \002(\006B\004\310\363\030\001\022\024\n\006copyid\030\002 \002(\005B\004\310\363\030\001"
    "\022\017\n\007stageid\030\003 \002(\005\022\016\n\006status\030\004 \002(\010\022\024\n\006bos"
    "shp\030\005 \003(\006B\004\300\363\030\n\022\021\n\tmaxbosshp\030\006 \002(\006\022\021\n\tfi"
    "ghterid\030\007 \002(\006\022\021\n\tfightname\030\010 \002(\t\022\020\n\010open"
    "time\030\t \002(\r\"\031\n\027GetGuildWetCopyInfosReq\"W\n"
    "\031GetGuildWetCopyInfosReply\022+\n\twetcopys_\030"
    "\001 \003(\0132\030.Packet.GuildWetCopyInfo\022\r\n\005times"
    "\030\002 \002(\005\"C\n\026GuildWetCopyInfoUpdate\022)\n\007wetc"
    "opy\030\001 \002(\0132\030.Packet.GuildWetCopyInfo\"\"\n\020O"
    "penGuildWetCopy\022\016\n\006copyid\030\001 \002(\005\"#\n\021Reset"
    "GuildWetCopy\022\016\n\006copyid\030\001 \002(\005\"\214\001\n\017GuildBa"
    "ttleInfo\022\027\n\ta_guildid\030\001 \002(\006B\004\310\363\030\001\022\021\n\tb_g"
    "uildid\030\002 \002(\006\022\023\n\013a_guildname\030\003 \002(\t\022\023\n\013b_g"
    "uildname\030\004 \002(\t\022\016\n\006raidid\030\005 \002(\005\022\023\n\013win_gu"
    "ildid\030\006 \002(\006\"S\n\023GuildBattleInfoList\022\'\n\006gb"
    "list\030\001 \003(\0132\027.Packet.GuildBattleInfo\022\023\n\013b"
    "attletimes\030\002 \002(\005\">\n\023SelfGuildBattleInfo\022"
    "\'\n\006gbinfo\030\001 \002(\0132\027.Packet.GuildBattleInfo"
    "\"\024\n\022GuildBattleListReq\"[\n\027GuildBattleWee"
    "kRankInfo\022\017\n\007guildid\030\001 \002(\006\022\021\n\tguildname\030"
    "\002 \002(\t\022\r\n\005level\030\003 \002(\005\022\r\n\005score\030\004 \002(\005\"\030\n\026G"
    "uildBattleWeekRankReq\"I\n\030GuildBattleWeek"
    "RankReply\022-\n\004list\030\001 \003(\0132\037.Packet.GuildBa"
    "ttleWeekRankInfo\"\211\001\n\026GuildBattleAllRankI"
    "nfo\022\017\n\007guildid\030\001 \002(\006\022\021\n\tguildname\030\002 \002(\t\022"
    "\r\n\005level\030\003 \002(\005\022\026\n\016battlewintimes\030\004 \002(\005\022\023"
    "\n\013battletimes\030\005 \002(\005\022\017\n\007winrate\030\006 \002(\002\"\027\n\025"
    "GuildBattleAllRankReq\"G\n\027GuildBattleAllR"
    "ankReply\022,\n\004list\030\001 \003(\0132\036.Packet.GuildBat"
    "tleAllRankInfo\"3\n\026GuildBattleResultReply"
    "\022\013\n\003win\030\001 \002(\010\022\014\n\004time\030\002 \002(\005\"\326\001\n\025GuildBat"
    "tlePlayerInfo\022\021\n\tplayer_id\030\001 \002(\006\022\023\n\013play"
    "er_name\030\002 \002(\t\022\020\n\010guild_id\030\003 \002(\006\022\r\n\005score"
    "\030\004 \002(\005\022\020\n\010fighting\030\005 \002(\010\022\021\n\tstreakwin\030\006 "
    "\002(\005\022\020\n\010mobility\030\007 \002(\005\022\021\n\tprotectcd\030\010 \002(\005"
    "\022\024\n\014battlereward\030\t \002(\005\022\024\n\014init_actorid\030\n"
    " \002(\005\"N\n\031GuildBattlePlayerListInfo\0221\n\npla"
    "yerlist\030\001 \003(\0132\035.Packet.GuildBattlePlayer"
    "Info\"P\n\033UpdateGuildBattlePlayerInfo\0221\n\np"
    "layerinfo\030\001 \002(\0132\035.Packet.GuildBattlePlay"
    "erInfo\"R\n\026UpdateGuildBattleStage\022(\n\005stag"
    "e\030\001 \002(\0162\031.Packet.GuildBattle_Stage\022\016\n\006di"
    "alog\030\002 \002(\010\"F\n\026GuildBattleFightTarget\022\023\n\013"
    "target_guid\030\001 \002(\006\022\027\n\017battle_group_id\030\002 \002"
    "(\005\"e\n\016GuildWarehouse\022\025\n\007guildid\030\001 \002(\006B\004\310"
    "\363\030\001\022\023\n\005index\030\002 \002(\005B\004\310\363\030\001\022\016\n\006itemid\030\003 \002(\005"
    "\022\027\n\017receiveplayerid\030\004 \002(\006\"\023\n\021GuildWareho"
    "useReq\"=\n\023GuildWarehouseReply\022&\n\006whlist\030"
    "\001 \003(\0132\026.Packet.GuildWarehouse\")\n\030GuildWa"
    "rehouseReceiveReq\022\r\n\005index\030\001 \002(\005\"K\n!Guil"
    "dWarehouseSetReceivePlayerReq\022\r\n\005index\030\001"
    " \002(\005\022\027\n\017receiveplayerid\030\002 \002(\006\"<\n\024GuildWa"
    "rehouseUpdate\022$\n\004item\030\001 \002(\0132\026.Packet.Gui"
    "ldWarehouse\"r\n\024GuildWarehouseRecord\022\025\n\007g"
    "uildid\030\001 \002(\006B\004\310\363\030\001\022\020\n\002id\030\002 \002(\006B\004\310\363\030\001\022\014\n\004"
    "date\030\003 \002(\r\022\023\n\013player_name\030\004 \002(\t\022\016\n\006itemi"
    "d\030\005 \002(\005\"\031\n\027GuildWarehouseRecordReq\"I\n\031Gu"
    "ildWarehouseRecordReply\022,\n\006record\030\001 \003(\0132"
    "\034.Packet.GuildWarehouseRecord\"\204\001\n\016GuildS"
    "poilItem\022\025\n\007guildid\030\001 \002(\006B\004\310\363\030\001\022\023\n\005index"
    "\030\002 \002(\005B\004\310\363\030\001\022\016\n\006copyid\030\003 \002(\005\022\016\n\006itemid\030\004"
    " \002(\005\022\016\n\006timecd\030\005 \002(\005\022\026\n\010playerid\030\006 \003(\006B\004"
    "\300\363\0302\"W\n\013GuildRecord\022\025\n\007guildid\030\001 \002(\006B\004\310\363"
    "\030\001\022\023\n\005index\030\002 \002(\005B\004\310\363\030\001\022\016\n\006record\030\003 \002(\t\022"
    "\014\n\004date\030\004 \002(\r\"8\n\020GuildRecordReply\022$\n\007rec"
    "ords\030\001 \003(\0132\023.Packet.GuildRecord\"C\n\rGuild"
    "UserName\022\020\n\010playerid\030\001 \002(\006\022\022\n\nplayername"
    "\030\002 \002(\t\022\014\n\004hair\030\003 \002(\005\"\201\001\n\024GuildSpoilItemC"
    "lient\022\r\n\005index\030\001 \002(\005\022\016\n\006copyid\030\002 \002(\005\022\016\n\006"
    "itemid\030\003 \002(\005\022\016\n\006timecd\030\004 \002(\005\022*\n\013applypla"
    "yer\030\005 \003(\0132\025.Packet.GuildUserName\"B\n\023Guil"
    "dSpoilItemReply\022+\n\005items\030\001 \003(\0132\034.Packet."
    "GuildSpoilItemClient\"W\n\032UpdateGuildSpoil"
    "ItemClient\022\r\n\005index\030\001 \002(\005\022*\n\013applyplayer"
    "\030\002 \003(\0132\025.Packet.GuildUserName", 8149);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Guild.proto", &protobuf_RegisterTypes);
  PlayerGuildUserData::default_instance_ = new PlayerGuildUserData();
  GuildUser::default_instance_ = new GuildUser();
  GuildImpeach::default_instance_ = new GuildImpeach();
  GuildDBInfo::default_instance_ = new GuildDBInfo();
  SetGuildIconRR::default_instance_ = new SetGuildIconRR();
  PracticeInfo::default_instance_ = new PracticeInfo();
  PlayerPracticeReq::default_instance_ = new PlayerPracticeReq();
  GetPracticeReq::default_instance_ = new GetPracticeReq();
  GetPracticeReply::default_instance_ = new GetPracticeReply();
  GetGuildInfoReq::default_instance_ = new GetGuildInfoReq();
  GetGuildInfoReply::default_instance_ = new GetGuildInfoReply();
  GetGuildUserListInfoReq::default_instance_ = new GetGuildUserListInfoReq();
  GetGuildUserListInfoReply::default_instance_ = new GetGuildUserListInfoReply();
  CreateGuildReq::default_instance_ = new CreateGuildReq();
  FindGuildReq::default_instance_ = new FindGuildReq();
  ApplyGuildReq::default_instance_ = new ApplyGuildReq();
  OneKeyApplyGuildReq::default_instance_ = new OneKeyApplyGuildReq();
  InviteyAddGuildReq::default_instance_ = new InviteyAddGuildReq();
  AskInviteyAgreeGuildReply::default_instance_ = new AskInviteyAgreeGuildReply();
  InviteyAgreeGuildReq::default_instance_ = new InviteyAgreeGuildReq();
  AgreeApplyGuildReq::default_instance_ = new AgreeApplyGuildReq();
  UpdatePlayerGuildInfo::default_instance_ = new UpdatePlayerGuildInfo();
  GuildBaseInfo::default_instance_ = new GuildBaseInfo();
  GetGuildListReq::default_instance_ = new GetGuildListReq();
  GuildBaseListReply::default_instance_ = new GuildBaseListReply();
  ApplyGuildPlayerInfo::default_instance_ = new ApplyGuildPlayerInfo();
  ApplyGuildPlayerListReq::default_instance_ = new ApplyGuildPlayerListReq();
  ApplyGuildPlayerListReply::default_instance_ = new ApplyGuildPlayerListReply();
  ClearApplyGuildPlayerListReq::default_instance_ = new ClearApplyGuildPlayerListReq();
  SetGuildNameRR::default_instance_ = new SetGuildNameRR();
  SetGuildNoticeRR::default_instance_ = new SetGuildNoticeRR();
  GuildDonationReq::default_instance_ = new GuildDonationReq();
  DonationFlagUpdate::default_instance_ = new DonationFlagUpdate();
  GuildMoneyUpdate::default_instance_ = new GuildMoneyUpdate();
  GuildImpeachReply::default_instance_ = new GuildImpeachReply();
  SetGuildUserPositionRR::default_instance_ = new SetGuildUserPositionRR();
  GetGuildBonusReq::default_instance_ = new GetGuildBonusReq();
  GuildCDKInfo::default_instance_ = new GuildCDKInfo();
  CreateGuildCDK::default_instance_ = new CreateGuildCDK();
  CreateGuildCDKReq::default_instance_ = new CreateGuildCDKReq();
  GetGuildCDKReq::default_instance_ = new GetGuildCDKReq();
  GetGuildCDKListReq::default_instance_ = new GetGuildCDKListReq();
  GetGuildCDKListReply::default_instance_ = new GetGuildCDKListReply();
  BuildLevelUpReq::default_instance_ = new BuildLevelUpReq();
  BuildLevelUpReply::default_instance_ = new BuildLevelUpReply();
  GuildBossCompetitionDbInfo::default_instance_ = new GuildBossCompetitionDbInfo();
  GetGuildBossCompetitionReq::default_instance_ = new GetGuildBossCompetitionReq();
  GetGuildBossCompetitionReply::default_instance_ = new GetGuildBossCompetitionReply();
  GuildUserDamage::default_instance_ = new GuildUserDamage();
  GuildAllDamage::default_instance_ = new GuildAllDamage();
  GuildBossUserDamage::default_instance_ = new GuildBossUserDamage();
  GetGuildUserDamageReq::default_instance_ = new GetGuildUserDamageReq();
  GetGuildUserDamageReply::default_instance_ = new GetGuildUserDamageReply();
  GetServerUserDamageReq::default_instance_ = new GetServerUserDamageReq();
  GetGuildAllDamageReply::default_instance_ = new GetGuildAllDamageReply();
  GetGuildBossUserDamageReply::default_instance_ = new GetGuildBossUserDamageReply();
  UpdateGuildBossUserDamage::default_instance_ = new UpdateGuildBossUserDamage();
  GuildWetCopyInfo::default_instance_ = new GuildWetCopyInfo();
  GetGuildWetCopyInfosReq::default_instance_ = new GetGuildWetCopyInfosReq();
  GetGuildWetCopyInfosReply::default_instance_ = new GetGuildWetCopyInfosReply();
  GuildWetCopyInfoUpdate::default_instance_ = new GuildWetCopyInfoUpdate();
  OpenGuildWetCopy::default_instance_ = new OpenGuildWetCopy();
  ResetGuildWetCopy::default_instance_ = new ResetGuildWetCopy();
  GuildBattleInfo::default_instance_ = new GuildBattleInfo();
  GuildBattleInfoList::default_instance_ = new GuildBattleInfoList();
  SelfGuildBattleInfo::default_instance_ = new SelfGuildBattleInfo();
  GuildBattleListReq::default_instance_ = new GuildBattleListReq();
  GuildBattleWeekRankInfo::default_instance_ = new GuildBattleWeekRankInfo();
  GuildBattleWeekRankReq::default_instance_ = new GuildBattleWeekRankReq();
  GuildBattleWeekRankReply::default_instance_ = new GuildBattleWeekRankReply();
  GuildBattleAllRankInfo::default_instance_ = new GuildBattleAllRankInfo();
  GuildBattleAllRankReq::default_instance_ = new GuildBattleAllRankReq();
  GuildBattleAllRankReply::default_instance_ = new GuildBattleAllRankReply();
  GuildBattleResultReply::default_instance_ = new GuildBattleResultReply();
  GuildBattlePlayerInfo::default_instance_ = new GuildBattlePlayerInfo();
  GuildBattlePlayerListInfo::default_instance_ = new GuildBattlePlayerListInfo();
  UpdateGuildBattlePlayerInfo::default_instance_ = new UpdateGuildBattlePlayerInfo();
  UpdateGuildBattleStage::default_instance_ = new UpdateGuildBattleStage();
  GuildBattleFightTarget::default_instance_ = new GuildBattleFightTarget();
  GuildWarehouse::default_instance_ = new GuildWarehouse();
  GuildWarehouseReq::default_instance_ = new GuildWarehouseReq();
  GuildWarehouseReply::default_instance_ = new GuildWarehouseReply();
  GuildWarehouseReceiveReq::default_instance_ = new GuildWarehouseReceiveReq();
  GuildWarehouseSetReceivePlayerReq::default_instance_ = new GuildWarehouseSetReceivePlayerReq();
  GuildWarehouseUpdate::default_instance_ = new GuildWarehouseUpdate();
  GuildWarehouseRecord::default_instance_ = new GuildWarehouseRecord();
  GuildWarehouseRecordReq::default_instance_ = new GuildWarehouseRecordReq();
  GuildWarehouseRecordReply::default_instance_ = new GuildWarehouseRecordReply();
  GuildSpoilItem::default_instance_ = new GuildSpoilItem();
  GuildRecord::default_instance_ = new GuildRecord();
  GuildRecordReply::default_instance_ = new GuildRecordReply();
  GuildUserName::default_instance_ = new GuildUserName();
  GuildSpoilItemClient::default_instance_ = new GuildSpoilItemClient();
  GuildSpoilItemReply::default_instance_ = new GuildSpoilItemReply();
  UpdateGuildSpoilItemClient::default_instance_ = new UpdateGuildSpoilItemClient();
  PlayerGuildUserData::default_instance_->InitAsDefaultInstance();
  GuildUser::default_instance_->InitAsDefaultInstance();
  GuildImpeach::default_instance_->InitAsDefaultInstance();
  GuildDBInfo::default_instance_->InitAsDefaultInstance();
  SetGuildIconRR::default_instance_->InitAsDefaultInstance();
  PracticeInfo::default_instance_->InitAsDefaultInstance();
  PlayerPracticeReq::default_instance_->InitAsDefaultInstance();
  GetPracticeReq::default_instance_->InitAsDefaultInstance();
  GetPracticeReply::default_instance_->InitAsDefaultInstance();
  GetGuildInfoReq::default_instance_->InitAsDefaultInstance();
  GetGuildInfoReply::default_instance_->InitAsDefaultInstance();
  GetGuildUserListInfoReq::default_instance_->InitAsDefaultInstance();
  GetGuildUserListInfoReply::default_instance_->InitAsDefaultInstance();
  CreateGuildReq::default_instance_->InitAsDefaultInstance();
  FindGuildReq::default_instance_->InitAsDefaultInstance();
  ApplyGuildReq::default_instance_->InitAsDefaultInstance();
  OneKeyApplyGuildReq::default_instance_->InitAsDefaultInstance();
  InviteyAddGuildReq::default_instance_->InitAsDefaultInstance();
  AskInviteyAgreeGuildReply::default_instance_->InitAsDefaultInstance();
  InviteyAgreeGuildReq::default_instance_->InitAsDefaultInstance();
  AgreeApplyGuildReq::default_instance_->InitAsDefaultInstance();
  UpdatePlayerGuildInfo::default_instance_->InitAsDefaultInstance();
  GuildBaseInfo::default_instance_->InitAsDefaultInstance();
  GetGuildListReq::default_instance_->InitAsDefaultInstance();
  GuildBaseListReply::default_instance_->InitAsDefaultInstance();
  ApplyGuildPlayerInfo::default_instance_->InitAsDefaultInstance();
  ApplyGuildPlayerListReq::default_instance_->InitAsDefaultInstance();
  ApplyGuildPlayerListReply::default_instance_->InitAsDefaultInstance();
  ClearApplyGuildPlayerListReq::default_instance_->InitAsDefaultInstance();
  SetGuildNameRR::default_instance_->InitAsDefaultInstance();
  SetGuildNoticeRR::default_instance_->InitAsDefaultInstance();
  GuildDonationReq::default_instance_->InitAsDefaultInstance();
  DonationFlagUpdate::default_instance_->InitAsDefaultInstance();
  GuildMoneyUpdate::default_instance_->InitAsDefaultInstance();
  GuildImpeachReply::default_instance_->InitAsDefaultInstance();
  SetGuildUserPositionRR::default_instance_->InitAsDefaultInstance();
  GetGuildBonusReq::default_instance_->InitAsDefaultInstance();
  GuildCDKInfo::default_instance_->InitAsDefaultInstance();
  CreateGuildCDK::default_instance_->InitAsDefaultInstance();
  CreateGuildCDKReq::default_instance_->InitAsDefaultInstance();
  GetGuildCDKReq::default_instance_->InitAsDefaultInstance();
  GetGuildCDKListReq::default_instance_->InitAsDefaultInstance();
  GetGuildCDKListReply::default_instance_->InitAsDefaultInstance();
  BuildLevelUpReq::default_instance_->InitAsDefaultInstance();
  BuildLevelUpReply::default_instance_->InitAsDefaultInstance();
  GuildBossCompetitionDbInfo::default_instance_->InitAsDefaultInstance();
  GetGuildBossCompetitionReq::default_instance_->InitAsDefaultInstance();
  GetGuildBossCompetitionReply::default_instance_->InitAsDefaultInstance();
  GuildUserDamage::default_instance_->InitAsDefaultInstance();
  GuildAllDamage::default_instance_->InitAsDefaultInstance();
  GuildBossUserDamage::default_instance_->InitAsDefaultInstance();
  GetGuildUserDamageReq::default_instance_->InitAsDefaultInstance();
  GetGuildUserDamageReply::default_instance_->InitAsDefaultInstance();
  GetServerUserDamageReq::default_instance_->InitAsDefaultInstance();
  GetGuildAllDamageReply::default_instance_->InitAsDefaultInstance();
  GetGuildBossUserDamageReply::default_instance_->InitAsDefaultInstance();
  UpdateGuildBossUserDamage::default_instance_->InitAsDefaultInstance();
  GuildWetCopyInfo::default_instance_->InitAsDefaultInstance();
  GetGuildWetCopyInfosReq::default_instance_->InitAsDefaultInstance();
  GetGuildWetCopyInfosReply::default_instance_->InitAsDefaultInstance();
  GuildWetCopyInfoUpdate::default_instance_->InitAsDefaultInstance();
  OpenGuildWetCopy::default_instance_->InitAsDefaultInstance();
  ResetGuildWetCopy::default_instance_->InitAsDefaultInstance();
  GuildBattleInfo::default_instance_->InitAsDefaultInstance();
  GuildBattleInfoList::default_instance_->InitAsDefaultInstance();
  SelfGuildBattleInfo::default_instance_->InitAsDefaultInstance();
  GuildBattleListReq::default_instance_->InitAsDefaultInstance();
  GuildBattleWeekRankInfo::default_instance_->InitAsDefaultInstance();
  GuildBattleWeekRankReq::default_instance_->InitAsDefaultInstance();
  GuildBattleWeekRankReply::default_instance_->InitAsDefaultInstance();
  GuildBattleAllRankInfo::default_instance_->InitAsDefaultInstance();
  GuildBattleAllRankReq::default_instance_->InitAsDefaultInstance();
  GuildBattleAllRankReply::default_instance_->InitAsDefaultInstance();
  GuildBattleResultReply::default_instance_->InitAsDefaultInstance();
  GuildBattlePlayerInfo::default_instance_->InitAsDefaultInstance();
  GuildBattlePlayerListInfo::default_instance_->InitAsDefaultInstance();
  UpdateGuildBattlePlayerInfo::default_instance_->InitAsDefaultInstance();
  UpdateGuildBattleStage::default_instance_->InitAsDefaultInstance();
  GuildBattleFightTarget::default_instance_->InitAsDefaultInstance();
  GuildWarehouse::default_instance_->InitAsDefaultInstance();
  GuildWarehouseReq::default_instance_->InitAsDefaultInstance();
  GuildWarehouseReply::default_instance_->InitAsDefaultInstance();
  GuildWarehouseReceiveReq::default_instance_->InitAsDefaultInstance();
  GuildWarehouseSetReceivePlayerReq::default_instance_->InitAsDefaultInstance();
  GuildWarehouseUpdate::default_instance_->InitAsDefaultInstance();
  GuildWarehouseRecord::default_instance_->InitAsDefaultInstance();
  GuildWarehouseRecordReq::default_instance_->InitAsDefaultInstance();
  GuildWarehouseRecordReply::default_instance_->InitAsDefaultInstance();
  GuildSpoilItem::default_instance_->InitAsDefaultInstance();
  GuildRecord::default_instance_->InitAsDefaultInstance();
  GuildRecordReply::default_instance_->InitAsDefaultInstance();
  GuildUserName::default_instance_->InitAsDefaultInstance();
  GuildSpoilItemClient::default_instance_->InitAsDefaultInstance();
  GuildSpoilItemReply::default_instance_->InitAsDefaultInstance();
  UpdateGuildSpoilItemClient::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Guild_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Guild_2eproto {
  StaticDescriptorInitializer_Guild_2eproto() {
    protobuf_AddDesc_Guild_2eproto();
  }
} static_descriptor_initializer_Guild_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PlayerGuildUserData::kPositionFieldNumber;
const int PlayerGuildUserData::kBdonationFieldNumber;
const int PlayerGuildUserData::kBbonusFieldNumber;
const int PlayerGuildUserData::kCurcontributionFieldNumber;
const int PlayerGuildUserData::kWeekcontributionFieldNumber;
const int PlayerGuildUserData::kAllcontributionFieldNumber;
const int PlayerGuildUserData::kJointimeFieldNumber;
const int PlayerGuildUserData::kGuildlevelFieldNumber;
const int PlayerGuildUserData::kCashboxlevelFieldNumber;
const int PlayerGuildUserData::kShoplevelFieldNumber;
const int PlayerGuildUserData::kStoragelevelFieldNumber;
const int PlayerGuildUserData::kGuildnameFieldNumber;
#endif  // !_MSC_VER

PlayerGuildUserData::PlayerGuildUserData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerGuildUserData::InitAsDefaultInstance() {
}

PlayerGuildUserData::PlayerGuildUserData(const PlayerGuildUserData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerGuildUserData::SharedCtor() {
  _cached_size_ = 0;
  position_ = 0;
  bdonation_ = 0;
  bbonus_ = 0;
  curcontribution_ = 0;
  weekcontribution_ = 0;
  allcontribution_ = 0;
  jointime_ = 0u;
  guildlevel_ = 0;
  cashboxlevel_ = 0;
  shoplevel_ = 0;
  storagelevel_ = 0;
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerGuildUserData::~PlayerGuildUserData() {
  SharedDtor();
}

void PlayerGuildUserData::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void PlayerGuildUserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerGuildUserData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerGuildUserData_descriptor_;
}

const PlayerGuildUserData& PlayerGuildUserData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

PlayerGuildUserData* PlayerGuildUserData::default_instance_ = NULL;

PlayerGuildUserData* PlayerGuildUserData::New() const {
  return new PlayerGuildUserData;
}

void PlayerGuildUserData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    position_ = 0;
    bdonation_ = 0;
    bbonus_ = 0;
    curcontribution_ = 0;
    weekcontribution_ = 0;
    allcontribution_ = 0;
    jointime_ = 0u;
    guildlevel_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cashboxlevel_ = 0;
    shoplevel_ = 0;
    storagelevel_ = 0;
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerGuildUserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.GuildPosition position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::GuildPosition_IsValid(value)) {
            set_position(static_cast< ::Packet::GuildPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bdonation;
        break;
      }

      // required int32 bdonation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bdonation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bdonation_)));
          set_has_bdonation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bbonus;
        break;
      }

      // required int32 bbonus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bbonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bbonus_)));
          set_has_bbonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_curcontribution;
        break;
      }

      // required int32 curcontribution = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curcontribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curcontribution_)));
          set_has_curcontribution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_weekcontribution;
        break;
      }

      // required int32 weekcontribution = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weekcontribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weekcontribution_)));
          set_has_weekcontribution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_allcontribution;
        break;
      }

      // required int32 allcontribution = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allcontribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allcontribution_)));
          set_has_allcontribution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_jointime;
        break;
      }

      // required uint32 jointime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jointime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jointime_)));
          set_has_jointime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_guildlevel;
        break;
      }

      // required int32 guildlevel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildlevel_)));
          set_has_guildlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cashboxlevel;
        break;
      }

      // required int32 cashboxlevel = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cashboxlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cashboxlevel_)));
          set_has_cashboxlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_shoplevel;
        break;
      }

      // required int32 shoplevel = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shoplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shoplevel_)));
          set_has_shoplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_storagelevel;
        break;
      }

      // required int32 storagelevel = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_storagelevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &storagelevel_)));
          set_has_storagelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_guildname;
        break;
      }

      // optional string guildname = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerGuildUserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.GuildPosition position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->position(), output);
  }

  // required int32 bdonation = 2;
  if (has_bdonation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bdonation(), output);
  }

  // required int32 bbonus = 3;
  if (has_bbonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bbonus(), output);
  }

  // required int32 curcontribution = 4;
  if (has_curcontribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->curcontribution(), output);
  }

  // required int32 weekcontribution = 5;
  if (has_weekcontribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->weekcontribution(), output);
  }

  // required int32 allcontribution = 6;
  if (has_allcontribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->allcontribution(), output);
  }

  // required uint32 jointime = 7;
  if (has_jointime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->jointime(), output);
  }

  // required int32 guildlevel = 8;
  if (has_guildlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->guildlevel(), output);
  }

  // required int32 cashboxlevel = 9;
  if (has_cashboxlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->cashboxlevel(), output);
  }

  // required int32 shoplevel = 10;
  if (has_shoplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->shoplevel(), output);
  }

  // required int32 storagelevel = 11;
  if (has_storagelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->storagelevel(), output);
  }

  // optional string guildname = 12;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->guildname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerGuildUserData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.GuildPosition position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->position(), target);
  }

  // required int32 bdonation = 2;
  if (has_bdonation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bdonation(), target);
  }

  // required int32 bbonus = 3;
  if (has_bbonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bbonus(), target);
  }

  // required int32 curcontribution = 4;
  if (has_curcontribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->curcontribution(), target);
  }

  // required int32 weekcontribution = 5;
  if (has_weekcontribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->weekcontribution(), target);
  }

  // required int32 allcontribution = 6;
  if (has_allcontribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->allcontribution(), target);
  }

  // required uint32 jointime = 7;
  if (has_jointime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->jointime(), target);
  }

  // required int32 guildlevel = 8;
  if (has_guildlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->guildlevel(), target);
  }

  // required int32 cashboxlevel = 9;
  if (has_cashboxlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->cashboxlevel(), target);
  }

  // required int32 shoplevel = 10;
  if (has_shoplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->shoplevel(), target);
  }

  // required int32 storagelevel = 11;
  if (has_storagelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->storagelevel(), target);
  }

  // optional string guildname = 12;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->guildname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerGuildUserData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.GuildPosition position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->position());
    }

    // required int32 bdonation = 2;
    if (has_bdonation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bdonation());
    }

    // required int32 bbonus = 3;
    if (has_bbonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bbonus());
    }

    // required int32 curcontribution = 4;
    if (has_curcontribution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curcontribution());
    }

    // required int32 weekcontribution = 5;
    if (has_weekcontribution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weekcontribution());
    }

    // required int32 allcontribution = 6;
    if (has_allcontribution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allcontribution());
    }

    // required uint32 jointime = 7;
    if (has_jointime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jointime());
    }

    // required int32 guildlevel = 8;
    if (has_guildlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildlevel());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 cashboxlevel = 9;
    if (has_cashboxlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cashboxlevel());
    }

    // required int32 shoplevel = 10;
    if (has_shoplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shoplevel());
    }

    // required int32 storagelevel = 11;
    if (has_storagelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->storagelevel());
    }

    // optional string guildname = 12;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerGuildUserData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerGuildUserData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerGuildUserData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerGuildUserData::MergeFrom(const PlayerGuildUserData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_bdonation()) {
      set_bdonation(from.bdonation());
    }
    if (from.has_bbonus()) {
      set_bbonus(from.bbonus());
    }
    if (from.has_curcontribution()) {
      set_curcontribution(from.curcontribution());
    }
    if (from.has_weekcontribution()) {
      set_weekcontribution(from.weekcontribution());
    }
    if (from.has_allcontribution()) {
      set_allcontribution(from.allcontribution());
    }
    if (from.has_jointime()) {
      set_jointime(from.jointime());
    }
    if (from.has_guildlevel()) {
      set_guildlevel(from.guildlevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cashboxlevel()) {
      set_cashboxlevel(from.cashboxlevel());
    }
    if (from.has_shoplevel()) {
      set_shoplevel(from.shoplevel());
    }
    if (from.has_storagelevel()) {
      set_storagelevel(from.storagelevel());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerGuildUserData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerGuildUserData::CopyFrom(const PlayerGuildUserData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerGuildUserData::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void PlayerGuildUserData::SetInitialized() {
  _has_bits_[0] |= 0x000007ff;

  return;
}

void PlayerGuildUserData::Swap(PlayerGuildUserData* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(bdonation_, other->bdonation_);
    std::swap(bbonus_, other->bbonus_);
    std::swap(curcontribution_, other->curcontribution_);
    std::swap(weekcontribution_, other->weekcontribution_);
    std::swap(allcontribution_, other->allcontribution_);
    std::swap(jointime_, other->jointime_);
    std::swap(guildlevel_, other->guildlevel_);
    std::swap(cashboxlevel_, other->cashboxlevel_);
    std::swap(shoplevel_, other->shoplevel_);
    std::swap(storagelevel_, other->storagelevel_);
    std::swap(guildname_, other->guildname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerGuildUserData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerGuildUserData_descriptor_;
  metadata.reflection = PlayerGuildUserData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildUser::kPlayerguidFieldNumber;
const int GuildUser::kGuildidFieldNumber;
const int GuildUser::kPlayernameFieldNumber;
const int GuildUser::kPlayerlevelFieldNumber;
const int GuildUser::kPositionFieldNumber;
const int GuildUser::kOnlineFieldNumber;
const int GuildUser::kBdonationFieldNumber;
const int GuildUser::kBbonusFieldNumber;
const int GuildUser::kCurcontributionFieldNumber;
const int GuildUser::kWeekcontributionFieldNumber;
const int GuildUser::kAllcontributionFieldNumber;
const int GuildUser::kBattletimeFieldNumber;
const int GuildUser::kLastlogouttimeFieldNumber;
const int GuildUser::kJointimeFieldNumber;
const int GuildUser::kBossdamageFieldNumber;
const int GuildUser::kMainActorConfigIdFieldNumber;
const int GuildUser::kMainActorScoreFieldNumber;
const int GuildUser::kMainActorColorFieldNumber;
const int GuildUser::kMainActorStarFieldNumber;
const int GuildUser::kWetcopytimesFieldNumber;
const int GuildUser::kSpoiljumptimesFieldNumber;
const int GuildUser::kHairFieldNumber;
const int GuildUser::kLastguildidFieldNumber;
#endif  // !_MSC_VER

GuildUser::GuildUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildUser::InitAsDefaultInstance() {
}

GuildUser::GuildUser(const GuildUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildUser::SharedCtor() {
  _cached_size_ = 0;
  playerguid_ = GOOGLE_ULONGLONG(0);
  guildid_ = GOOGLE_ULONGLONG(0);
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerlevel_ = 0;
  position_ = 0;
  online_ = 0;
  bdonation_ = 0;
  bbonus_ = 0;
  curcontribution_ = 0;
  weekcontribution_ = 0;
  allcontribution_ = 0;
  battletime_ = 0;
  lastlogouttime_ = 0u;
  jointime_ = 0u;
  bossdamage_ = 0;
  main_actor_config_id_ = 0;
  main_actor_score_ = 0;
  main_actor_color_ = 1;
  main_actor_star_ = 1;
  wetcopytimes_ = 0;
  spoiljumptimes_ = 0;
  hair_ = 0;
  lastguildid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildUser::~GuildUser() {
  SharedDtor();
}

void GuildUser::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void GuildUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildUser_descriptor_;
}

const GuildUser& GuildUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildUser* GuildUser::default_instance_ = NULL;

GuildUser* GuildUser::New() const {
  return new GuildUser;
}

void GuildUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerguid_ = GOOGLE_ULONGLONG(0);
    guildid_ = GOOGLE_ULONGLONG(0);
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    playerlevel_ = 0;
    position_ = 0;
    online_ = 0;
    bdonation_ = 0;
    bbonus_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    curcontribution_ = 0;
    weekcontribution_ = 0;
    allcontribution_ = 0;
    battletime_ = 0;
    lastlogouttime_ = 0u;
    jointime_ = 0u;
    bossdamage_ = 0;
    main_actor_config_id_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    main_actor_score_ = 0;
    main_actor_color_ = 1;
    main_actor_star_ = 1;
    wetcopytimes_ = 0;
    spoiljumptimes_ = 0;
    hair_ = 0;
    lastguildid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 playerguid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &playerguid_)));
          set_has_playerguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_guildid;
        break;
      }

      // required fixed64 guildid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_playername;
        break;
      }

      // required string playername = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_playerlevel;
        break;
      }

      // required int32 playerlevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerlevel_)));
          set_has_playerlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_position;
        break;
      }

      // required .Packet.GuildPosition position = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::GuildPosition_IsValid(value)) {
            set_position(static_cast< ::Packet::GuildPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_online;
        break;
      }

      // required int32 online = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bdonation;
        break;
      }

      // required int32 bdonation = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bdonation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bdonation_)));
          set_has_bdonation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bbonus;
        break;
      }

      // required int32 bbonus = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bbonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bbonus_)));
          set_has_bbonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_curcontribution;
        break;
      }

      // required int32 curcontribution = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curcontribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curcontribution_)));
          set_has_curcontribution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_weekcontribution;
        break;
      }

      // required int32 weekcontribution = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weekcontribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weekcontribution_)));
          set_has_weekcontribution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_allcontribution;
        break;
      }

      // required int32 allcontribution = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allcontribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allcontribution_)));
          set_has_allcontribution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_battletime;
        break;
      }

      // required int32 battletime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battletime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battletime_)));
          set_has_battletime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_lastlogouttime;
        break;
      }

      // required uint32 lastlogouttime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastlogouttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastlogouttime_)));
          set_has_lastlogouttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_jointime;
        break;
      }

      // required uint32 jointime = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jointime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jointime_)));
          set_has_jointime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_bossdamage;
        break;
      }

      // required int32 bossdamage = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossdamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossdamage_)));
          set_has_bossdamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_main_actor_config_id;
        break;
      }

      // required int32 main_actor_config_id = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_main_actor_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &main_actor_config_id_)));
          set_has_main_actor_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_main_actor_score;
        break;
      }

      // required int32 main_actor_score = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_main_actor_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &main_actor_score_)));
          set_has_main_actor_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_main_actor_color;
        break;
      }

      // required .Packet.ActorColor main_actor_color = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_main_actor_color:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::ActorColor_IsValid(value)) {
            set_main_actor_color(static_cast< ::Packet::ActorColor >(value));
          } else {
            mutable_unknown_fields()->AddVarint(18, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_main_actor_star;
        break;
      }

      // required .Packet.ActorStar main_actor_star = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_main_actor_star:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::ActorStar_IsValid(value)) {
            set_main_actor_star(static_cast< ::Packet::ActorStar >(value));
          } else {
            mutable_unknown_fields()->AddVarint(19, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_wetcopytimes;
        break;
      }

      // required int32 wetcopytimes = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wetcopytimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wetcopytimes_)));
          set_has_wetcopytimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_spoiljumptimes;
        break;
      }

      // required int32 spoiljumptimes = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spoiljumptimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spoiljumptimes_)));
          set_has_spoiljumptimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_hair;
        break;
      }

      // required int32 hair = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hair_)));
          set_has_hair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_lastguildid;
        break;
      }

      // required fixed64 lastguildid = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lastguildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &lastguildid_)));
          set_has_lastguildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 playerguid = 1;
  if (has_playerguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->playerguid(), output);
  }

  // required fixed64 guildid = 2;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->guildid(), output);
  }

  // required string playername = 3;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->playername(), output);
  }

  // required int32 playerlevel = 4;
  if (has_playerlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->playerlevel(), output);
  }

  // required .Packet.GuildPosition position = 5;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->position(), output);
  }

  // required int32 online = 6;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->online(), output);
  }

  // required int32 bdonation = 7;
  if (has_bdonation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bdonation(), output);
  }

  // required int32 bbonus = 8;
  if (has_bbonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bbonus(), output);
  }

  // required int32 curcontribution = 9;
  if (has_curcontribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->curcontribution(), output);
  }

  // required int32 weekcontribution = 10;
  if (has_weekcontribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->weekcontribution(), output);
  }

  // required int32 allcontribution = 11;
  if (has_allcontribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->allcontribution(), output);
  }

  // required int32 battletime = 12;
  if (has_battletime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->battletime(), output);
  }

  // required uint32 lastlogouttime = 13;
  if (has_lastlogouttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->lastlogouttime(), output);
  }

  // required uint32 jointime = 14;
  if (has_jointime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->jointime(), output);
  }

  // required int32 bossdamage = 15;
  if (has_bossdamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->bossdamage(), output);
  }

  // required int32 main_actor_config_id = 16;
  if (has_main_actor_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->main_actor_config_id(), output);
  }

  // required int32 main_actor_score = 17;
  if (has_main_actor_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->main_actor_score(), output);
  }

  // required .Packet.ActorColor main_actor_color = 18;
  if (has_main_actor_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->main_actor_color(), output);
  }

  // required .Packet.ActorStar main_actor_star = 19;
  if (has_main_actor_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->main_actor_star(), output);
  }

  // required int32 wetcopytimes = 20;
  if (has_wetcopytimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->wetcopytimes(), output);
  }

  // required int32 spoiljumptimes = 21;
  if (has_spoiljumptimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->spoiljumptimes(), output);
  }

  // required int32 hair = 26;
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->hair(), output);
  }

  // required fixed64 lastguildid = 27;
  if (has_lastguildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(27, this->lastguildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 playerguid = 1;
  if (has_playerguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->playerguid(), target);
  }

  // required fixed64 guildid = 2;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->guildid(), target);
  }

  // required string playername = 3;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->playername(), target);
  }

  // required int32 playerlevel = 4;
  if (has_playerlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->playerlevel(), target);
  }

  // required .Packet.GuildPosition position = 5;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->position(), target);
  }

  // required int32 online = 6;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->online(), target);
  }

  // required int32 bdonation = 7;
  if (has_bdonation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->bdonation(), target);
  }

  // required int32 bbonus = 8;
  if (has_bbonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->bbonus(), target);
  }

  // required int32 curcontribution = 9;
  if (has_curcontribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->curcontribution(), target);
  }

  // required int32 weekcontribution = 10;
  if (has_weekcontribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->weekcontribution(), target);
  }

  // required int32 allcontribution = 11;
  if (has_allcontribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->allcontribution(), target);
  }

  // required int32 battletime = 12;
  if (has_battletime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->battletime(), target);
  }

  // required uint32 lastlogouttime = 13;
  if (has_lastlogouttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->lastlogouttime(), target);
  }

  // required uint32 jointime = 14;
  if (has_jointime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->jointime(), target);
  }

  // required int32 bossdamage = 15;
  if (has_bossdamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->bossdamage(), target);
  }

  // required int32 main_actor_config_id = 16;
  if (has_main_actor_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->main_actor_config_id(), target);
  }

  // required int32 main_actor_score = 17;
  if (has_main_actor_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->main_actor_score(), target);
  }

  // required .Packet.ActorColor main_actor_color = 18;
  if (has_main_actor_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->main_actor_color(), target);
  }

  // required .Packet.ActorStar main_actor_star = 19;
  if (has_main_actor_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->main_actor_star(), target);
  }

  // required int32 wetcopytimes = 20;
  if (has_wetcopytimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->wetcopytimes(), target);
  }

  // required int32 spoiljumptimes = 21;
  if (has_spoiljumptimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->spoiljumptimes(), target);
  }

  // required int32 hair = 26;
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->hair(), target);
  }

  // required fixed64 lastguildid = 27;
  if (has_lastguildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(27, this->lastguildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 playerguid = 1;
    if (has_playerguid()) {
      total_size += 1 + 8;
    }

    // required fixed64 guildid = 2;
    if (has_guildid()) {
      total_size += 1 + 8;
    }

    // required string playername = 3;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // required int32 playerlevel = 4;
    if (has_playerlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerlevel());
    }

    // required .Packet.GuildPosition position = 5;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->position());
    }

    // required int32 online = 6;
    if (has_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online());
    }

    // required int32 bdonation = 7;
    if (has_bdonation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bdonation());
    }

    // required int32 bbonus = 8;
    if (has_bbonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bbonus());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 curcontribution = 9;
    if (has_curcontribution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curcontribution());
    }

    // required int32 weekcontribution = 10;
    if (has_weekcontribution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weekcontribution());
    }

    // required int32 allcontribution = 11;
    if (has_allcontribution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allcontribution());
    }

    // required int32 battletime = 12;
    if (has_battletime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battletime());
    }

    // required uint32 lastlogouttime = 13;
    if (has_lastlogouttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastlogouttime());
    }

    // required uint32 jointime = 14;
    if (has_jointime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jointime());
    }

    // required int32 bossdamage = 15;
    if (has_bossdamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossdamage());
    }

    // required int32 main_actor_config_id = 16;
    if (has_main_actor_config_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->main_actor_config_id());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 main_actor_score = 17;
    if (has_main_actor_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->main_actor_score());
    }

    // required .Packet.ActorColor main_actor_color = 18;
    if (has_main_actor_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->main_actor_color());
    }

    // required .Packet.ActorStar main_actor_star = 19;
    if (has_main_actor_star()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->main_actor_star());
    }

    // required int32 wetcopytimes = 20;
    if (has_wetcopytimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wetcopytimes());
    }

    // required int32 spoiljumptimes = 21;
    if (has_spoiljumptimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spoiljumptimes());
    }

    // required int32 hair = 26;
    if (has_hair()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hair());
    }

    // required fixed64 lastguildid = 27;
    if (has_lastguildid()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildUser::MergeFrom(const GuildUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerguid()) {
      set_playerguid(from.playerguid());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_playerlevel()) {
      set_playerlevel(from.playerlevel());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_bdonation()) {
      set_bdonation(from.bdonation());
    }
    if (from.has_bbonus()) {
      set_bbonus(from.bbonus());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_curcontribution()) {
      set_curcontribution(from.curcontribution());
    }
    if (from.has_weekcontribution()) {
      set_weekcontribution(from.weekcontribution());
    }
    if (from.has_allcontribution()) {
      set_allcontribution(from.allcontribution());
    }
    if (from.has_battletime()) {
      set_battletime(from.battletime());
    }
    if (from.has_lastlogouttime()) {
      set_lastlogouttime(from.lastlogouttime());
    }
    if (from.has_jointime()) {
      set_jointime(from.jointime());
    }
    if (from.has_bossdamage()) {
      set_bossdamage(from.bossdamage());
    }
    if (from.has_main_actor_config_id()) {
      set_main_actor_config_id(from.main_actor_config_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_main_actor_score()) {
      set_main_actor_score(from.main_actor_score());
    }
    if (from.has_main_actor_color()) {
      set_main_actor_color(from.main_actor_color());
    }
    if (from.has_main_actor_star()) {
      set_main_actor_star(from.main_actor_star());
    }
    if (from.has_wetcopytimes()) {
      set_wetcopytimes(from.wetcopytimes());
    }
    if (from.has_spoiljumptimes()) {
      set_spoiljumptimes(from.spoiljumptimes());
    }
    if (from.has_hair()) {
      set_hair(from.hair());
    }
    if (from.has_lastguildid()) {
      set_lastguildid(from.lastguildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildUser::CopyFrom(const GuildUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x007fffff) != 0x007fffff) return false;

  return true;
}

void GuildUser::SetInitialized() {
  _has_bits_[0] |= 0x007fffff;

  return;
}

void GuildUser::Swap(GuildUser* other) {
  if (other != this) {
    std::swap(playerguid_, other->playerguid_);
    std::swap(guildid_, other->guildid_);
    std::swap(playername_, other->playername_);
    std::swap(playerlevel_, other->playerlevel_);
    std::swap(position_, other->position_);
    std::swap(online_, other->online_);
    std::swap(bdonation_, other->bdonation_);
    std::swap(bbonus_, other->bbonus_);
    std::swap(curcontribution_, other->curcontribution_);
    std::swap(weekcontribution_, other->weekcontribution_);
    std::swap(allcontribution_, other->allcontribution_);
    std::swap(battletime_, other->battletime_);
    std::swap(lastlogouttime_, other->lastlogouttime_);
    std::swap(jointime_, other->jointime_);
    std::swap(bossdamage_, other->bossdamage_);
    std::swap(main_actor_config_id_, other->main_actor_config_id_);
    std::swap(main_actor_score_, other->main_actor_score_);
    std::swap(main_actor_color_, other->main_actor_color_);
    std::swap(main_actor_star_, other->main_actor_star_);
    std::swap(wetcopytimes_, other->wetcopytimes_);
    std::swap(spoiljumptimes_, other->spoiljumptimes_);
    std::swap(hair_, other->hair_);
    std::swap(lastguildid_, other->lastguildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildUser_descriptor_;
  metadata.reflection = GuildUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildImpeach::kImpeachguildFieldNumber;
const int GuildImpeach::kImpeachnameFieldNumber;
const int GuildImpeach::kNeedcountFieldNumber;
const int GuildImpeach::kEndtimeFieldNumber;
const int GuildImpeach::kRespondguildFieldNumber;
#endif  // !_MSC_VER

GuildImpeach::GuildImpeach()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildImpeach::InitAsDefaultInstance() {
}

GuildImpeach::GuildImpeach(const GuildImpeach& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildImpeach::SharedCtor() {
  _cached_size_ = 0;
  impeachguild_ = GOOGLE_ULONGLONG(0);
  impeachname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  needcount_ = 0;
  endtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildImpeach::~GuildImpeach() {
  SharedDtor();
}

void GuildImpeach::SharedDtor() {
  if (impeachname_ != &::google::protobuf::internal::kEmptyString) {
    delete impeachname_;
  }
  if (this != default_instance_) {
  }
}

void GuildImpeach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildImpeach::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildImpeach_descriptor_;
}

const GuildImpeach& GuildImpeach::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildImpeach* GuildImpeach::default_instance_ = NULL;

GuildImpeach* GuildImpeach::New() const {
  return new GuildImpeach;
}

void GuildImpeach::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    impeachguild_ = GOOGLE_ULONGLONG(0);
    if (has_impeachname()) {
      if (impeachname_ != &::google::protobuf::internal::kEmptyString) {
        impeachname_->clear();
      }
    }
    needcount_ = 0;
    endtime_ = 0;
  }
  respondguild_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildImpeach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 impeachguild = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &impeachguild_)));
          set_has_impeachguild();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_impeachname;
        break;
      }

      // required string impeachname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_impeachname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_impeachname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->impeachname().data(), this->impeachname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_needcount;
        break;
      }

      // required int32 needcount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needcount_)));
          set_has_needcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_endtime;
        break;
      }

      // required int32 endtime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_respondguild;
        break;
      }

      // repeated fixed64 respondguild = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_respondguild:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 41, input, this->mutable_respondguild())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_respondguild())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_respondguild;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildImpeach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 impeachguild = 1;
  if (has_impeachguild()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->impeachguild(), output);
  }

  // required string impeachname = 2;
  if (has_impeachname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->impeachname().data(), this->impeachname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->impeachname(), output);
  }

  // required int32 needcount = 3;
  if (has_needcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->needcount(), output);
  }

  // required int32 endtime = 4;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->endtime(), output);
  }

  // repeated fixed64 respondguild = 5;
  for (int i = 0; i < this->respondguild_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      5, this->respondguild(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildImpeach::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 impeachguild = 1;
  if (has_impeachguild()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->impeachguild(), target);
  }

  // required string impeachname = 2;
  if (has_impeachname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->impeachname().data(), this->impeachname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->impeachname(), target);
  }

  // required int32 needcount = 3;
  if (has_needcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->needcount(), target);
  }

  // required int32 endtime = 4;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->endtime(), target);
  }

  // repeated fixed64 respondguild = 5;
  for (int i = 0; i < this->respondguild_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(5, this->respondguild(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildImpeach::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 impeachguild = 1;
    if (has_impeachguild()) {
      total_size += 1 + 8;
    }

    // required string impeachname = 2;
    if (has_impeachname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->impeachname());
    }

    // required int32 needcount = 3;
    if (has_needcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needcount());
    }

    // required int32 endtime = 4;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endtime());
    }

  }
  // repeated fixed64 respondguild = 5;
  {
    int data_size = 0;
    data_size = 8 * this->respondguild_size();
    total_size += 1 * this->respondguild_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildImpeach::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildImpeach* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildImpeach*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildImpeach::MergeFrom(const GuildImpeach& from) {
  GOOGLE_CHECK_NE(&from, this);
  respondguild_.MergeFrom(from.respondguild_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_impeachguild()) {
      set_impeachguild(from.impeachguild());
    }
    if (from.has_impeachname()) {
      set_impeachname(from.impeachname());
    }
    if (from.has_needcount()) {
      set_needcount(from.needcount());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildImpeach::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildImpeach::CopyFrom(const GuildImpeach& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildImpeach::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GuildImpeach::SetInitialized() {
  _has_bits_[0] |= 0x0000000f;

  return;
}

void GuildImpeach::Swap(GuildImpeach* other) {
  if (other != this) {
    std::swap(impeachguild_, other->impeachguild_);
    std::swap(impeachname_, other->impeachname_);
    std::swap(needcount_, other->needcount_);
    std::swap(endtime_, other->endtime_);
    respondguild_.Swap(&other->respondguild_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildImpeach::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildImpeach_descriptor_;
  metadata.reflection = GuildImpeach_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildDBInfo::kGuidFieldNumber;
const int GuildDBInfo::kNameFieldNumber;
const int GuildDBInfo::kLastnameFieldNumber;
const int GuildDBInfo::kNoticeFieldNumber;
const int GuildDBInfo::kIconFieldNumber;
const int GuildDBInfo::kChieftainFieldNumber;
const int GuildDBInfo::kChieftainnameFieldNumber;
const int GuildDBInfo::kGuildlevelFieldNumber;
const int GuildDBInfo::kCashboxlevelFieldNumber;
const int GuildDBInfo::kShoplevelFieldNumber;
const int GuildDBInfo::kStoragelevelFieldNumber;
const int GuildDBInfo::kGuildcdFieldNumber;
const int GuildDBInfo::kCashboxcdFieldNumber;
const int GuildDBInfo::kShopcdFieldNumber;
const int GuildDBInfo::kStoragecdFieldNumber;
const int GuildDBInfo::kGuildmoneyFieldNumber;
const int GuildDBInfo::kLimitapplylevelFieldNumber;
const int GuildDBInfo::kMaxwetcopyidFieldNumber;
const int GuildDBInfo::kWeekbonusFieldNumber;
const int GuildDBInfo::kLowmaintaindayFieldNumber;
const int GuildDBInfo::kBattlewintimesFieldNumber;
const int GuildDBInfo::kBattletimesFieldNumber;
const int GuildDBInfo::kBattlelefttimesFieldNumber;
const int GuildDBInfo::kBattleroundwintimesFieldNumber;
const int GuildDBInfo::kBattleroundtimesFieldNumber;
const int GuildDBInfo::kBattlescoreFieldNumber;
const int GuildDBInfo::kCreatetimeFieldNumber;
const int GuildDBInfo::kCreateguidFieldNumber;
const int GuildDBInfo::kCreatenameFieldNumber;
#endif  // !_MSC_VER

GuildDBInfo::GuildDBInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildDBInfo::InitAsDefaultInstance() {
}

GuildDBInfo::GuildDBInfo(const GuildDBInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildDBInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chieftain_ = GOOGLE_ULONGLONG(0);
  chieftainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildlevel_ = 0;
  cashboxlevel_ = 0;
  shoplevel_ = 0;
  storagelevel_ = 0;
  guildcd_ = 0u;
  cashboxcd_ = 0u;
  shopcd_ = 0u;
  storagecd_ = 0u;
  guildmoney_ = 0;
  limitapplylevel_ = 0;
  maxwetcopyid_ = 0;
  weekbonus_ = 0;
  lowmaintainday_ = 0u;
  battlewintimes_ = 0;
  battletimes_ = 0;
  battlelefttimes_ = 0;
  battleroundwintimes_ = 0;
  battleroundtimes_ = 0;
  battlescore_ = 0;
  createtime_ = 0u;
  createguid_ = GOOGLE_ULONGLONG(0);
  createname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildDBInfo::~GuildDBInfo() {
  SharedDtor();
}

void GuildDBInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (lastname_ != &::google::protobuf::internal::kEmptyString) {
    delete lastname_;
  }
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (chieftainname_ != &::google::protobuf::internal::kEmptyString) {
    delete chieftainname_;
  }
  if (createname_ != &::google::protobuf::internal::kEmptyString) {
    delete createname_;
  }
  if (this != default_instance_) {
  }
}

void GuildDBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildDBInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildDBInfo_descriptor_;
}

const GuildDBInfo& GuildDBInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildDBInfo* GuildDBInfo::default_instance_ = NULL;

GuildDBInfo* GuildDBInfo::New() const {
  return new GuildDBInfo;
}

void GuildDBInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_lastname()) {
      if (lastname_ != &::google::protobuf::internal::kEmptyString) {
        lastname_->clear();
      }
    }
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    chieftain_ = GOOGLE_ULONGLONG(0);
    if (has_chieftainname()) {
      if (chieftainname_ != &::google::protobuf::internal::kEmptyString) {
        chieftainname_->clear();
      }
    }
    guildlevel_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cashboxlevel_ = 0;
    shoplevel_ = 0;
    storagelevel_ = 0;
    guildcd_ = 0u;
    cashboxcd_ = 0u;
    shopcd_ = 0u;
    storagecd_ = 0u;
    guildmoney_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    limitapplylevel_ = 0;
    maxwetcopyid_ = 0;
    weekbonus_ = 0;
    lowmaintainday_ = 0u;
    battlewintimes_ = 0;
    battletimes_ = 0;
    battlelefttimes_ = 0;
    battleroundwintimes_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    battleroundtimes_ = 0;
    battlescore_ = 0;
    createtime_ = 0u;
    createguid_ = GOOGLE_ULONGLONG(0);
    if (has_createname()) {
      if (createname_ != &::google::protobuf::internal::kEmptyString) {
        createname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildDBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_lastname;
        break;
      }

      // required string lastname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lastname().data(), this->lastname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_notice;
        break;
      }

      // required string notice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_icon;
        break;
      }

      // required string icon = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_chieftain;
        break;
      }

      // required fixed64 chieftain = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_chieftain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &chieftain_)));
          set_has_chieftain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_chieftainname;
        break;
      }

      // required string chieftainname = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chieftainname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chieftainname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chieftainname().data(), this->chieftainname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_guildlevel;
        break;
      }

      // required int32 guildlevel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildlevel_)));
          set_has_guildlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cashboxlevel;
        break;
      }

      // required int32 cashboxlevel = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cashboxlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cashboxlevel_)));
          set_has_cashboxlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_shoplevel;
        break;
      }

      // required int32 shoplevel = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shoplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shoplevel_)));
          set_has_shoplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_storagelevel;
        break;
      }

      // required int32 storagelevel = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_storagelevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &storagelevel_)));
          set_has_storagelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_guildcd;
        break;
      }

      // required uint32 guildcd = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildcd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildcd_)));
          set_has_guildcd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_cashboxcd;
        break;
      }

      // required uint32 cashboxcd = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cashboxcd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cashboxcd_)));
          set_has_cashboxcd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_shopcd;
        break;
      }

      // required uint32 shopcd = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shopcd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shopcd_)));
          set_has_shopcd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_storagecd;
        break;
      }

      // required uint32 storagecd = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_storagecd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &storagecd_)));
          set_has_storagecd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_guildmoney;
        break;
      }

      // required int32 guildmoney = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildmoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildmoney_)));
          set_has_guildmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_limitapplylevel;
        break;
      }

      // required int32 limitapplylevel = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limitapplylevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limitapplylevel_)));
          set_has_limitapplylevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_maxwetcopyid;
        break;
      }

      // required int32 maxwetcopyid = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxwetcopyid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxwetcopyid_)));
          set_has_maxwetcopyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_weekbonus;
        break;
      }

      // required int32 weekbonus = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weekbonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weekbonus_)));
          set_has_weekbonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_lowmaintainday;
        break;
      }

      // required fixed32 lowmaintainday = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lowmaintainday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &lowmaintainday_)));
          set_has_lowmaintainday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_battlewintimes;
        break;
      }

      // required int32 battlewintimes = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlewintimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battlewintimes_)));
          set_has_battlewintimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_battletimes;
        break;
      }

      // required int32 battletimes = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battletimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battletimes_)));
          set_has_battletimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_battlelefttimes;
        break;
      }

      // required int32 battlelefttimes = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlelefttimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battlelefttimes_)));
          set_has_battlelefttimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_battleroundwintimes;
        break;
      }

      // required int32 battleroundwintimes = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battleroundwintimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battleroundwintimes_)));
          set_has_battleroundwintimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_battleroundtimes;
        break;
      }

      // required int32 battleroundtimes = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battleroundtimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battleroundtimes_)));
          set_has_battleroundtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_battlescore;
        break;
      }

      // required int32 battlescore = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlescore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battlescore_)));
          set_has_battlescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(221)) goto parse_createtime;
        break;
      }

      // required fixed32 createtime = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_createtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(225)) goto parse_createguid;
        break;
      }

      // required fixed64 createguid = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_createguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &createguid_)));
          set_has_createguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_createname;
        break;
      }

      // required string createname = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_createname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->createname().data(), this->createname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildDBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required string lastname = 3;
  if (has_lastname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastname().data(), this->lastname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lastname(), output);
  }

  // required string notice = 4;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->notice(), output);
  }

  // required string icon = 5;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->icon(), output);
  }

  // required fixed64 chieftain = 6;
  if (has_chieftain()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->chieftain(), output);
  }

  // required string chieftainname = 7;
  if (has_chieftainname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chieftainname().data(), this->chieftainname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->chieftainname(), output);
  }

  // required int32 guildlevel = 8;
  if (has_guildlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->guildlevel(), output);
  }

  // required int32 cashboxlevel = 9;
  if (has_cashboxlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->cashboxlevel(), output);
  }

  // required int32 shoplevel = 10;
  if (has_shoplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->shoplevel(), output);
  }

  // required int32 storagelevel = 11;
  if (has_storagelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->storagelevel(), output);
  }

  // required uint32 guildcd = 12;
  if (has_guildcd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->guildcd(), output);
  }

  // required uint32 cashboxcd = 13;
  if (has_cashboxcd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->cashboxcd(), output);
  }

  // required uint32 shopcd = 14;
  if (has_shopcd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->shopcd(), output);
  }

  // required uint32 storagecd = 15;
  if (has_storagecd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->storagecd(), output);
  }

  // required int32 guildmoney = 16;
  if (has_guildmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->guildmoney(), output);
  }

  // required int32 limitapplylevel = 17;
  if (has_limitapplylevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->limitapplylevel(), output);
  }

  // required int32 maxwetcopyid = 18;
  if (has_maxwetcopyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->maxwetcopyid(), output);
  }

  // required int32 weekbonus = 19;
  if (has_weekbonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->weekbonus(), output);
  }

  // required fixed32 lowmaintainday = 20;
  if (has_lowmaintainday()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(20, this->lowmaintainday(), output);
  }

  // required int32 battlewintimes = 21;
  if (has_battlewintimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->battlewintimes(), output);
  }

  // required int32 battletimes = 22;
  if (has_battletimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->battletimes(), output);
  }

  // required int32 battlelefttimes = 23;
  if (has_battlelefttimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->battlelefttimes(), output);
  }

  // required int32 battleroundwintimes = 24;
  if (has_battleroundwintimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->battleroundwintimes(), output);
  }

  // required int32 battleroundtimes = 25;
  if (has_battleroundtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->battleroundtimes(), output);
  }

  // required int32 battlescore = 26;
  if (has_battlescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->battlescore(), output);
  }

  // required fixed32 createtime = 27;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(27, this->createtime(), output);
  }

  // required fixed64 createguid = 28;
  if (has_createguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(28, this->createguid(), output);
  }

  // required string createname = 29;
  if (has_createname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createname().data(), this->createname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->createname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildDBInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required string lastname = 3;
  if (has_lastname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastname().data(), this->lastname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lastname(), target);
  }

  // required string notice = 4;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->notice(), target);
  }

  // required string icon = 5;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->icon(), target);
  }

  // required fixed64 chieftain = 6;
  if (has_chieftain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->chieftain(), target);
  }

  // required string chieftainname = 7;
  if (has_chieftainname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chieftainname().data(), this->chieftainname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->chieftainname(), target);
  }

  // required int32 guildlevel = 8;
  if (has_guildlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->guildlevel(), target);
  }

  // required int32 cashboxlevel = 9;
  if (has_cashboxlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->cashboxlevel(), target);
  }

  // required int32 shoplevel = 10;
  if (has_shoplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->shoplevel(), target);
  }

  // required int32 storagelevel = 11;
  if (has_storagelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->storagelevel(), target);
  }

  // required uint32 guildcd = 12;
  if (has_guildcd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->guildcd(), target);
  }

  // required uint32 cashboxcd = 13;
  if (has_cashboxcd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->cashboxcd(), target);
  }

  // required uint32 shopcd = 14;
  if (has_shopcd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->shopcd(), target);
  }

  // required uint32 storagecd = 15;
  if (has_storagecd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->storagecd(), target);
  }

  // required int32 guildmoney = 16;
  if (has_guildmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->guildmoney(), target);
  }

  // required int32 limitapplylevel = 17;
  if (has_limitapplylevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->limitapplylevel(), target);
  }

  // required int32 maxwetcopyid = 18;
  if (has_maxwetcopyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->maxwetcopyid(), target);
  }

  // required int32 weekbonus = 19;
  if (has_weekbonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->weekbonus(), target);
  }

  // required fixed32 lowmaintainday = 20;
  if (has_lowmaintainday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(20, this->lowmaintainday(), target);
  }

  // required int32 battlewintimes = 21;
  if (has_battlewintimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->battlewintimes(), target);
  }

  // required int32 battletimes = 22;
  if (has_battletimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->battletimes(), target);
  }

  // required int32 battlelefttimes = 23;
  if (has_battlelefttimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->battlelefttimes(), target);
  }

  // required int32 battleroundwintimes = 24;
  if (has_battleroundwintimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->battleroundwintimes(), target);
  }

  // required int32 battleroundtimes = 25;
  if (has_battleroundtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->battleroundtimes(), target);
  }

  // required int32 battlescore = 26;
  if (has_battlescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->battlescore(), target);
  }

  // required fixed32 createtime = 27;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(27, this->createtime(), target);
  }

  // required fixed64 createguid = 28;
  if (has_createguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(28, this->createguid(), target);
  }

  // required string createname = 29;
  if (has_createname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createname().data(), this->createname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->createname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildDBInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string lastname = 3;
    if (has_lastname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastname());
    }

    // required string notice = 4;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

    // required string icon = 5;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // required fixed64 chieftain = 6;
    if (has_chieftain()) {
      total_size += 1 + 8;
    }

    // required string chieftainname = 7;
    if (has_chieftainname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chieftainname());
    }

    // required int32 guildlevel = 8;
    if (has_guildlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildlevel());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 cashboxlevel = 9;
    if (has_cashboxlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cashboxlevel());
    }

    // required int32 shoplevel = 10;
    if (has_shoplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shoplevel());
    }

    // required int32 storagelevel = 11;
    if (has_storagelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->storagelevel());
    }

    // required uint32 guildcd = 12;
    if (has_guildcd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildcd());
    }

    // required uint32 cashboxcd = 13;
    if (has_cashboxcd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cashboxcd());
    }

    // required uint32 shopcd = 14;
    if (has_shopcd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shopcd());
    }

    // required uint32 storagecd = 15;
    if (has_storagecd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->storagecd());
    }

    // required int32 guildmoney = 16;
    if (has_guildmoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildmoney());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 limitapplylevel = 17;
    if (has_limitapplylevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limitapplylevel());
    }

    // required int32 maxwetcopyid = 18;
    if (has_maxwetcopyid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxwetcopyid());
    }

    // required int32 weekbonus = 19;
    if (has_weekbonus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weekbonus());
    }

    // required fixed32 lowmaintainday = 20;
    if (has_lowmaintainday()) {
      total_size += 2 + 4;
    }

    // required int32 battlewintimes = 21;
    if (has_battlewintimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battlewintimes());
    }

    // required int32 battletimes = 22;
    if (has_battletimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battletimes());
    }

    // required int32 battlelefttimes = 23;
    if (has_battlelefttimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battlelefttimes());
    }

    // required int32 battleroundwintimes = 24;
    if (has_battleroundwintimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battleroundwintimes());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required int32 battleroundtimes = 25;
    if (has_battleroundtimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battleroundtimes());
    }

    // required int32 battlescore = 26;
    if (has_battlescore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battlescore());
    }

    // required fixed32 createtime = 27;
    if (has_createtime()) {
      total_size += 2 + 4;
    }

    // required fixed64 createguid = 28;
    if (has_createguid()) {
      total_size += 2 + 8;
    }

    // required string createname = 29;
    if (has_createname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->createname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildDBInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildDBInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildDBInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildDBInfo::MergeFrom(const GuildDBInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_lastname()) {
      set_lastname(from.lastname());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_chieftain()) {
      set_chieftain(from.chieftain());
    }
    if (from.has_chieftainname()) {
      set_chieftainname(from.chieftainname());
    }
    if (from.has_guildlevel()) {
      set_guildlevel(from.guildlevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cashboxlevel()) {
      set_cashboxlevel(from.cashboxlevel());
    }
    if (from.has_shoplevel()) {
      set_shoplevel(from.shoplevel());
    }
    if (from.has_storagelevel()) {
      set_storagelevel(from.storagelevel());
    }
    if (from.has_guildcd()) {
      set_guildcd(from.guildcd());
    }
    if (from.has_cashboxcd()) {
      set_cashboxcd(from.cashboxcd());
    }
    if (from.has_shopcd()) {
      set_shopcd(from.shopcd());
    }
    if (from.has_storagecd()) {
      set_storagecd(from.storagecd());
    }
    if (from.has_guildmoney()) {
      set_guildmoney(from.guildmoney());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_limitapplylevel()) {
      set_limitapplylevel(from.limitapplylevel());
    }
    if (from.has_maxwetcopyid()) {
      set_maxwetcopyid(from.maxwetcopyid());
    }
    if (from.has_weekbonus()) {
      set_weekbonus(from.weekbonus());
    }
    if (from.has_lowmaintainday()) {
      set_lowmaintainday(from.lowmaintainday());
    }
    if (from.has_battlewintimes()) {
      set_battlewintimes(from.battlewintimes());
    }
    if (from.has_battletimes()) {
      set_battletimes(from.battletimes());
    }
    if (from.has_battlelefttimes()) {
      set_battlelefttimes(from.battlelefttimes());
    }
    if (from.has_battleroundwintimes()) {
      set_battleroundwintimes(from.battleroundwintimes());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_battleroundtimes()) {
      set_battleroundtimes(from.battleroundtimes());
    }
    if (from.has_battlescore()) {
      set_battlescore(from.battlescore());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_createguid()) {
      set_createguid(from.createguid());
    }
    if (from.has_createname()) {
      set_createname(from.createname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildDBInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildDBInfo::CopyFrom(const GuildDBInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildDBInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x1fffffff) != 0x1fffffff) return false;

  return true;
}

void GuildDBInfo::SetInitialized() {
  _has_bits_[0] |= 0x1fffffff;

  return;
}

void GuildDBInfo::Swap(GuildDBInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(name_, other->name_);
    std::swap(lastname_, other->lastname_);
    std::swap(notice_, other->notice_);
    std::swap(icon_, other->icon_);
    std::swap(chieftain_, other->chieftain_);
    std::swap(chieftainname_, other->chieftainname_);
    std::swap(guildlevel_, other->guildlevel_);
    std::swap(cashboxlevel_, other->cashboxlevel_);
    std::swap(shoplevel_, other->shoplevel_);
    std::swap(storagelevel_, other->storagelevel_);
    std::swap(guildcd_, other->guildcd_);
    std::swap(cashboxcd_, other->cashboxcd_);
    std::swap(shopcd_, other->shopcd_);
    std::swap(storagecd_, other->storagecd_);
    std::swap(guildmoney_, other->guildmoney_);
    std::swap(limitapplylevel_, other->limitapplylevel_);
    std::swap(maxwetcopyid_, other->maxwetcopyid_);
    std::swap(weekbonus_, other->weekbonus_);
    std::swap(lowmaintainday_, other->lowmaintainday_);
    std::swap(battlewintimes_, other->battlewintimes_);
    std::swap(battletimes_, other->battletimes_);
    std::swap(battlelefttimes_, other->battlelefttimes_);
    std::swap(battleroundwintimes_, other->battleroundwintimes_);
    std::swap(battleroundtimes_, other->battleroundtimes_);
    std::swap(battlescore_, other->battlescore_);
    std::swap(createtime_, other->createtime_);
    std::swap(createguid_, other->createguid_);
    std::swap(createname_, other->createname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildDBInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildDBInfo_descriptor_;
  metadata.reflection = GuildDBInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetGuildIconRR::kIconFieldNumber;
#endif  // !_MSC_VER

SetGuildIconRR::SetGuildIconRR()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetGuildIconRR::InitAsDefaultInstance() {
}

SetGuildIconRR::SetGuildIconRR(const SetGuildIconRR& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetGuildIconRR::SharedCtor() {
  _cached_size_ = 0;
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetGuildIconRR::~SetGuildIconRR() {
  SharedDtor();
}

void SetGuildIconRR::SharedDtor() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (this != default_instance_) {
  }
}

void SetGuildIconRR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetGuildIconRR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetGuildIconRR_descriptor_;
}

const SetGuildIconRR& SetGuildIconRR::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

SetGuildIconRR* SetGuildIconRR::default_instance_ = NULL;

SetGuildIconRR* SetGuildIconRR::New() const {
  return new SetGuildIconRR;
}

void SetGuildIconRR::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SetGuildIconRR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string icon = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SetGuildIconRR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string icon = 1;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->icon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetGuildIconRR::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string icon = 1;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->icon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetGuildIconRR::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string icon = 1;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetGuildIconRR::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetGuildIconRR* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetGuildIconRR*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SetGuildIconRR::MergeFrom(const SetGuildIconRR& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_icon()) {
      set_icon(from.icon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SetGuildIconRR::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SetGuildIconRR::CopyFrom(const SetGuildIconRR& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SetGuildIconRR::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetGuildIconRR::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void SetGuildIconRR::Swap(SetGuildIconRR* other) {
  if (other != this) {
    std::swap(icon_, other->icon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SetGuildIconRR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetGuildIconRR_descriptor_;
  metadata.reflection = SetGuildIconRR_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PracticeInfo::kPlayerguidFieldNumber;
const int PracticeInfo::kIdFieldNumber;
const int PracticeInfo::kLevelFieldNumber;
const int PracticeInfo::kExpFieldNumber;
#endif  // !_MSC_VER

PracticeInfo::PracticeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PracticeInfo::InitAsDefaultInstance() {
}

PracticeInfo::PracticeInfo(const PracticeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PracticeInfo::SharedCtor() {
  _cached_size_ = 0;
  playerguid_ = GOOGLE_ULONGLONG(0);
  id_ = 0;
  level_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PracticeInfo::~PracticeInfo() {
  SharedDtor();
}

void PracticeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PracticeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PracticeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PracticeInfo_descriptor_;
}

const PracticeInfo& PracticeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

PracticeInfo* PracticeInfo::default_instance_ = NULL;

PracticeInfo* PracticeInfo::New() const {
  return new PracticeInfo;
}

void PracticeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerguid_ = GOOGLE_ULONGLONG(0);
    id_ = 0;
    level_ = 0;
    exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PracticeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 playerguid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &playerguid_)));
          set_has_playerguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // required int32 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PracticeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 playerguid = 1;
  if (has_playerguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->playerguid(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // required int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // required int32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PracticeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 playerguid = 1;
  if (has_playerguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->playerguid(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // required int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // required int32 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PracticeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 playerguid = 1;
    if (has_playerguid()) {
      total_size += 1 + 8;
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PracticeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PracticeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PracticeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PracticeInfo::MergeFrom(const PracticeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerguid()) {
      set_playerguid(from.playerguid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PracticeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PracticeInfo::CopyFrom(const PracticeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PracticeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PracticeInfo::SetInitialized() {
  _has_bits_[0] |= 0x0000000f;

  return;
}

void PracticeInfo::Swap(PracticeInfo* other) {
  if (other != this) {
    std::swap(playerguid_, other->playerguid_);
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PracticeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PracticeInfo_descriptor_;
  metadata.reflection = PracticeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerPracticeReq::kTypeFieldNumber;
const int PlayerPracticeReq::kIdFieldNumber;
#endif  // !_MSC_VER

PlayerPracticeReq::PlayerPracticeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerPracticeReq::InitAsDefaultInstance() {
}

PlayerPracticeReq::PlayerPracticeReq(const PlayerPracticeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerPracticeReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerPracticeReq::~PlayerPracticeReq() {
  SharedDtor();
}

void PlayerPracticeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerPracticeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerPracticeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerPracticeReq_descriptor_;
}

const PlayerPracticeReq& PlayerPracticeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

PlayerPracticeReq* PlayerPracticeReq::default_instance_ = NULL;

PlayerPracticeReq* PlayerPracticeReq::New() const {
  return new PlayerPracticeReq;
}

void PlayerPracticeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerPracticeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerPracticeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerPracticeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerPracticeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerPracticeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerPracticeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerPracticeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerPracticeReq::MergeFrom(const PlayerPracticeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerPracticeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerPracticeReq::CopyFrom(const PlayerPracticeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerPracticeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PlayerPracticeReq::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void PlayerPracticeReq::Swap(PlayerPracticeReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerPracticeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerPracticeReq_descriptor_;
  metadata.reflection = PlayerPracticeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetPracticeReq::GetPracticeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetPracticeReq::InitAsDefaultInstance() {
}

GetPracticeReq::GetPracticeReq(const GetPracticeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetPracticeReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPracticeReq::~GetPracticeReq() {
  SharedDtor();
}

void GetPracticeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetPracticeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPracticeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPracticeReq_descriptor_;
}

const GetPracticeReq& GetPracticeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GetPracticeReq* GetPracticeReq::default_instance_ = NULL;

GetPracticeReq* GetPracticeReq::New() const {
  return new GetPracticeReq;
}

void GetPracticeReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GetPracticeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void GetPracticeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPracticeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetPracticeReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPracticeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPracticeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPracticeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GetPracticeReq::MergeFrom(const GetPracticeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GetPracticeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GetPracticeReq::CopyFrom(const GetPracticeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GetPracticeReq::IsInitialized() const {

  return true;
}

void GetPracticeReq::SetInitialized() {

  return;
}

void GetPracticeReq::Swap(GetPracticeReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GetPracticeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPracticeReq_descriptor_;
  metadata.reflection = GetPracticeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPracticeReply::kListFieldNumber;
#endif  // !_MSC_VER

GetPracticeReply::GetPracticeReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetPracticeReply::InitAsDefaultInstance() {
}

GetPracticeReply::GetPracticeReply(const GetPracticeReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetPracticeReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPracticeReply::~GetPracticeReply() {
  SharedDtor();
}

void GetPracticeReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetPracticeReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPracticeReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPracticeReply_descriptor_;
}

const GetPracticeReply& GetPracticeReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GetPracticeReply* GetPracticeReply::default_instance_ = NULL;

GetPracticeReply* GetPracticeReply::New() const {
  return new GetPracticeReply;
}

void GetPracticeReply::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GetPracticeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.PracticeInfo list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GetPracticeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.PracticeInfo list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPracticeReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.PracticeInfo list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetPracticeReply::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.PracticeInfo list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPracticeReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPracticeReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPracticeReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GetPracticeReply::MergeFrom(const GetPracticeReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GetPracticeReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GetPracticeReply::CopyFrom(const GetPracticeReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GetPracticeReply::IsInitialized() const {

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void GetPracticeReply::SetInitialized() {

  for (int i = 0; i < list_size(); i++) {
    this->mutable_list(i)->SetInitialized();
  }
  return;
}

void GetPracticeReply::Swap(GetPracticeReply* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GetPracticeReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPracticeReply_descriptor_;
  metadata.reflection = GetPracticeReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetGuildInfoReq::GetGuildInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGuildInfoReq::InitAsDefaultInstance() {
}

GetGuildInfoReq::GetGuildInfoReq(const GetGuildInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGuildInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGuildInfoReq::~GetGuildInfoReq() {
  SharedDtor();
}

void GetGuildInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGuildInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGuildInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGuildInfoReq_descriptor_;
}

const GetGuildInfoReq& GetGuildInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GetGuildInfoReq* GetGuildInfoReq::default_instance_ = NULL;

GetGuildInfoReq* GetGuildInfoReq::New() const {
  return new GetGuildInfoReq;
}

void GetGuildInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GetGuildInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void GetGuildInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGuildInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGuildInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGuildInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGuildInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGuildInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GetGuildInfoReq::MergeFrom(const GetGuildInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GetGuildInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GetGuildInfoReq::CopyFrom(const GetGuildInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GetGuildInfoReq::IsInitialized() const {

  return true;
}

void GetGuildInfoReq::SetInitialized() {

  return;
}

void GetGuildInfoReq::Swap(GetGuildInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GetGuildInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGuildInfoReq_descriptor_;
  metadata.reflection = GetGuildInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGuildInfoReply::kInfoFieldNumber;
const int GetGuildInfoReply::kMembersizeFieldNumber;
const int GetGuildInfoReply::kMaxmembersizeFieldNumber;
const int GetGuildInfoReply::kSelfinfoFieldNumber;
#endif  // !_MSC_VER

GetGuildInfoReply::GetGuildInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGuildInfoReply::InitAsDefaultInstance() {
  info_ = const_cast< ::Packet::GuildDBInfo*>(&::Packet::GuildDBInfo::default_instance());
  selfinfo_ = const_cast< ::Packet::GuildUser*>(&::Packet::GuildUser::default_instance());
}

GetGuildInfoReply::GetGuildInfoReply(const GetGuildInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGuildInfoReply::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  membersize_ = 0;
  maxmembersize_ = 0;
  selfinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGuildInfoReply::~GetGuildInfoReply() {
  SharedDtor();
}

void GetGuildInfoReply::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
    delete selfinfo_;
  }
}

void GetGuildInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGuildInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGuildInfoReply_descriptor_;
}

const GetGuildInfoReply& GetGuildInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GetGuildInfoReply* GetGuildInfoReply::default_instance_ = NULL;

GetGuildInfoReply* GetGuildInfoReply::New() const {
  return new GetGuildInfoReply;
}

void GetGuildInfoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::Packet::GuildDBInfo::Clear();
    }
    membersize_ = 0;
    maxmembersize_ = 0;
    if (has_selfinfo()) {
      if (selfinfo_ != NULL) selfinfo_->::Packet::GuildUser::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GetGuildInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.GuildDBInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_membersize;
        break;
      }

      // required int32 membersize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_membersize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &membersize_)));
          set_has_membersize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_maxmembersize;
        break;
      }

      // required int32 maxmembersize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxmembersize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxmembersize_)));
          set_has_maxmembersize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_selfinfo;
        break;
      }

      // required .Packet.GuildUser selfinfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selfinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GetGuildInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.GuildDBInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // required int32 membersize = 2;
  if (has_membersize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->membersize(), output);
  }

  // required int32 maxmembersize = 3;
  if (has_maxmembersize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxmembersize(), output);
  }

  // required .Packet.GuildUser selfinfo = 4;
  if (has_selfinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->selfinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGuildInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.GuildDBInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // required int32 membersize = 2;
  if (has_membersize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->membersize(), target);
  }

  // required int32 maxmembersize = 3;
  if (has_maxmembersize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxmembersize(), target);
  }

  // required .Packet.GuildUser selfinfo = 4;
  if (has_selfinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->selfinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGuildInfoReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.GuildDBInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // required int32 membersize = 2;
    if (has_membersize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->membersize());
    }

    // required int32 maxmembersize = 3;
    if (has_maxmembersize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxmembersize());
    }

    // required .Packet.GuildUser selfinfo = 4;
    if (has_selfinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGuildInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGuildInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGuildInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GetGuildInfoReply::MergeFrom(const GetGuildInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::Packet::GuildDBInfo::MergeFrom(from.info());
    }
    if (from.has_membersize()) {
      set_membersize(from.membersize());
    }
    if (from.has_maxmembersize()) {
      set_maxmembersize(from.maxmembersize());
    }
    if (from.has_selfinfo()) {
      mutable_selfinfo()->::Packet::GuildUser::MergeFrom(from.selfinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GetGuildInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GetGuildInfoReply::CopyFrom(const GetGuildInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GetGuildInfoReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  if (has_selfinfo()) {
    if (!this->selfinfo().IsInitialized()) return false;
  }
  return true;
}

void GetGuildInfoReply::SetInitialized() {
  _has_bits_[0] |= 0x0000000f;

  if (has_info()) {
    this->mutable_info()->SetInitialized();
  }
  if (has_selfinfo()) {
    this->mutable_selfinfo()->SetInitialized();
  }
  return;
}

void GetGuildInfoReply::Swap(GetGuildInfoReply* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(membersize_, other->membersize_);
    std::swap(maxmembersize_, other->maxmembersize_);
    std::swap(selfinfo_, other->selfinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GetGuildInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGuildInfoReply_descriptor_;
  metadata.reflection = GetGuildInfoReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetGuildUserListInfoReq::GetGuildUserListInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGuildUserListInfoReq::InitAsDefaultInstance() {
}

GetGuildUserListInfoReq::GetGuildUserListInfoReq(const GetGuildUserListInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGuildUserListInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGuildUserListInfoReq::~GetGuildUserListInfoReq() {
  SharedDtor();
}

void GetGuildUserListInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGuildUserListInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGuildUserListInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGuildUserListInfoReq_descriptor_;
}

const GetGuildUserListInfoReq& GetGuildUserListInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GetGuildUserListInfoReq* GetGuildUserListInfoReq::default_instance_ = NULL;

GetGuildUserListInfoReq* GetGuildUserListInfoReq::New() const {
  return new GetGuildUserListInfoReq;
}

void GetGuildUserListInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GetGuildUserListInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void GetGuildUserListInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGuildUserListInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGuildUserListInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGuildUserListInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGuildUserListInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGuildUserListInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GetGuildUserListInfoReq::MergeFrom(const GetGuildUserListInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GetGuildUserListInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GetGuildUserListInfoReq::CopyFrom(const GetGuildUserListInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GetGuildUserListInfoReq::IsInitialized() const {

  return true;
}

void GetGuildUserListInfoReq::SetInitialized() {

  return;
}

void GetGuildUserListInfoReq::Swap(GetGuildUserListInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GetGuildUserListInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGuildUserListInfoReq_descriptor_;
  metadata.reflection = GetGuildUserListInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGuildUserListInfoReply::kUserlistFieldNumber;
#endif  // !_MSC_VER

GetGuildUserListInfoReply::GetGuildUserListInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGuildUserListInfoReply::InitAsDefaultInstance() {
}

GetGuildUserListInfoReply::GetGuildUserListInfoReply(const GetGuildUserListInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGuildUserListInfoReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGuildUserListInfoReply::~GetGuildUserListInfoReply() {
  SharedDtor();
}

void GetGuildUserListInfoReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGuildUserListInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGuildUserListInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGuildUserListInfoReply_descriptor_;
}

const GetGuildUserListInfoReply& GetGuildUserListInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GetGuildUserListInfoReply* GetGuildUserListInfoReply::default_instance_ = NULL;

GetGuildUserListInfoReply* GetGuildUserListInfoReply::New() const {
  return new GetGuildUserListInfoReply;
}

void GetGuildUserListInfoReply::Clear() {
  userlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GetGuildUserListInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.GuildUser userlist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_userlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GetGuildUserListInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.GuildUser userlist = 1;
  for (int i = 0; i < this->userlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGuildUserListInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.GuildUser userlist = 1;
  for (int i = 0; i < this->userlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGuildUserListInfoReply::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.GuildUser userlist = 1;
  total_size += 1 * this->userlist_size();
  for (int i = 0; i < this->userlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGuildUserListInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGuildUserListInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGuildUserListInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GetGuildUserListInfoReply::MergeFrom(const GetGuildUserListInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  userlist_.MergeFrom(from.userlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GetGuildUserListInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GetGuildUserListInfoReply::CopyFrom(const GetGuildUserListInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GetGuildUserListInfoReply::IsInitialized() const {

  for (int i = 0; i < userlist_size(); i++) {
    if (!this->userlist(i).IsInitialized()) return false;
  }
  return true;
}

void GetGuildUserListInfoReply::SetInitialized() {

  for (int i = 0; i < userlist_size(); i++) {
    this->mutable_userlist(i)->SetInitialized();
  }
  return;
}

void GetGuildUserListInfoReply::Swap(GetGuildUserListInfoReply* other) {
  if (other != this) {
    userlist_.Swap(&other->userlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GetGuildUserListInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGuildUserListInfoReply_descriptor_;
  metadata.reflection = GetGuildUserListInfoReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateGuildReq::kNameFieldNumber;
const int CreateGuildReq::kNoticeFieldNumber;
#endif  // !_MSC_VER

CreateGuildReq::CreateGuildReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateGuildReq::InitAsDefaultInstance() {
}

CreateGuildReq::CreateGuildReq(const CreateGuildReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateGuildReq::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateGuildReq::~CreateGuildReq() {
  SharedDtor();
}

void CreateGuildReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void CreateGuildReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateGuildReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateGuildReq_descriptor_;
}

const CreateGuildReq& CreateGuildReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

CreateGuildReq* CreateGuildReq::default_instance_ = NULL;

CreateGuildReq* CreateGuildReq::New() const {
  return new CreateGuildReq;
}

void CreateGuildReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool CreateGuildReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_notice;
        break;
      }

      // required string notice = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void CreateGuildReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string notice = 2;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->notice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateGuildReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string notice = 2;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->notice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateGuildReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string notice = 2;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateGuildReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateGuildReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateGuildReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void CreateGuildReq::MergeFrom(const CreateGuildReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void CreateGuildReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void CreateGuildReq::CopyFrom(const CreateGuildReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool CreateGuildReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CreateGuildReq::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void CreateGuildReq::Swap(CreateGuildReq* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(notice_, other->notice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata CreateGuildReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateGuildReq_descriptor_;
  metadata.reflection = CreateGuildReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FindGuildReq::kNameFieldNumber;
const int FindGuildReq::kGuidFieldNumber;
#endif  // !_MSC_VER

FindGuildReq::FindGuildReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FindGuildReq::InitAsDefaultInstance() {
}

FindGuildReq::FindGuildReq(const FindGuildReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FindGuildReq::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FindGuildReq::~FindGuildReq() {
  SharedDtor();
}

void FindGuildReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FindGuildReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FindGuildReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FindGuildReq_descriptor_;
}

const FindGuildReq& FindGuildReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

FindGuildReq* FindGuildReq::default_instance_ = NULL;

FindGuildReq* FindGuildReq::New() const {
  return new FindGuildReq;
}

void FindGuildReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool FindGuildReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_guid;
        break;
      }

      // optional fixed64 guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void FindGuildReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional fixed64 guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FindGuildReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional fixed64 guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FindGuildReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional fixed64 guid = 2;
    if (has_guid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FindGuildReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FindGuildReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FindGuildReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void FindGuildReq::MergeFrom(const FindGuildReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void FindGuildReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void FindGuildReq::CopyFrom(const FindGuildReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool FindGuildReq::IsInitialized() const {

  return true;
}

void FindGuildReq::SetInitialized() {

  return;
}

void FindGuildReq::Swap(FindGuildReq* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata FindGuildReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FindGuildReq_descriptor_;
  metadata.reflection = FindGuildReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyGuildReq::kGuidFieldNumber;
#endif  // !_MSC_VER

ApplyGuildReq::ApplyGuildReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyGuildReq::InitAsDefaultInstance() {
}

ApplyGuildReq::ApplyGuildReq(const ApplyGuildReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyGuildReq::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyGuildReq::~ApplyGuildReq() {
  SharedDtor();
}

void ApplyGuildReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplyGuildReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyGuildReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyGuildReq_descriptor_;
}

const ApplyGuildReq& ApplyGuildReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

ApplyGuildReq* ApplyGuildReq::default_instance_ = NULL;

ApplyGuildReq* ApplyGuildReq::New() const {
  return new ApplyGuildReq;
}

void ApplyGuildReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ApplyGuildReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ApplyGuildReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplyGuildReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplyGuildReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyGuildReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyGuildReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyGuildReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ApplyGuildReq::MergeFrom(const ApplyGuildReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ApplyGuildReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ApplyGuildReq::CopyFrom(const ApplyGuildReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ApplyGuildReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ApplyGuildReq::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void ApplyGuildReq::Swap(ApplyGuildReq* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ApplyGuildReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyGuildReq_descriptor_;
  metadata.reflection = ApplyGuildReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OneKeyApplyGuildReq::OneKeyApplyGuildReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OneKeyApplyGuildReq::InitAsDefaultInstance() {
}

OneKeyApplyGuildReq::OneKeyApplyGuildReq(const OneKeyApplyGuildReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OneKeyApplyGuildReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneKeyApplyGuildReq::~OneKeyApplyGuildReq() {
  SharedDtor();
}

void OneKeyApplyGuildReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OneKeyApplyGuildReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneKeyApplyGuildReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneKeyApplyGuildReq_descriptor_;
}

const OneKeyApplyGuildReq& OneKeyApplyGuildReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

OneKeyApplyGuildReq* OneKeyApplyGuildReq::default_instance_ = NULL;

OneKeyApplyGuildReq* OneKeyApplyGuildReq::New() const {
  return new OneKeyApplyGuildReq;
}

void OneKeyApplyGuildReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool OneKeyApplyGuildReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void OneKeyApplyGuildReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OneKeyApplyGuildReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OneKeyApplyGuildReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneKeyApplyGuildReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OneKeyApplyGuildReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OneKeyApplyGuildReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void OneKeyApplyGuildReq::MergeFrom(const OneKeyApplyGuildReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void OneKeyApplyGuildReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void OneKeyApplyGuildReq::CopyFrom(const OneKeyApplyGuildReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool OneKeyApplyGuildReq::IsInitialized() const {

  return true;
}

void OneKeyApplyGuildReq::SetInitialized() {

  return;
}

void OneKeyApplyGuildReq::Swap(OneKeyApplyGuildReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata OneKeyApplyGuildReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneKeyApplyGuildReq_descriptor_;
  metadata.reflection = OneKeyApplyGuildReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteyAddGuildReq::kPlayerguidFieldNumber;
#endif  // !_MSC_VER

InviteyAddGuildReq::InviteyAddGuildReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InviteyAddGuildReq::InitAsDefaultInstance() {
}

InviteyAddGuildReq::InviteyAddGuildReq(const InviteyAddGuildReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InviteyAddGuildReq::SharedCtor() {
  _cached_size_ = 0;
  playerguid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteyAddGuildReq::~InviteyAddGuildReq() {
  SharedDtor();
}

void InviteyAddGuildReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InviteyAddGuildReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteyAddGuildReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteyAddGuildReq_descriptor_;
}

const InviteyAddGuildReq& InviteyAddGuildReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

InviteyAddGuildReq* InviteyAddGuildReq::default_instance_ = NULL;

InviteyAddGuildReq* InviteyAddGuildReq::New() const {
  return new InviteyAddGuildReq;
}

void InviteyAddGuildReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerguid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool InviteyAddGuildReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 playerguid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &playerguid_)));
          set_has_playerguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void InviteyAddGuildReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 playerguid = 1;
  if (has_playerguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->playerguid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InviteyAddGuildReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 playerguid = 1;
  if (has_playerguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->playerguid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InviteyAddGuildReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 playerguid = 1;
    if (has_playerguid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteyAddGuildReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteyAddGuildReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteyAddGuildReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void InviteyAddGuildReq::MergeFrom(const InviteyAddGuildReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerguid()) {
      set_playerguid(from.playerguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void InviteyAddGuildReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void InviteyAddGuildReq::CopyFrom(const InviteyAddGuildReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool InviteyAddGuildReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InviteyAddGuildReq::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void InviteyAddGuildReq::Swap(InviteyAddGuildReq* other) {
  if (other != this) {
    std::swap(playerguid_, other->playerguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata InviteyAddGuildReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteyAddGuildReq_descriptor_;
  metadata.reflection = InviteyAddGuildReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskInviteyAgreeGuildReply::kGuildidFieldNumber;
const int AskInviteyAgreeGuildReply::kGuildnameFieldNumber;
const int AskInviteyAgreeGuildReply::kGuildinvitenameFieldNumber;
const int AskInviteyAgreeGuildReply::kGuildinviteguidFieldNumber;
#endif  // !_MSC_VER

AskInviteyAgreeGuildReply::AskInviteyAgreeGuildReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AskInviteyAgreeGuildReply::InitAsDefaultInstance() {
}

AskInviteyAgreeGuildReply::AskInviteyAgreeGuildReply(const AskInviteyAgreeGuildReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AskInviteyAgreeGuildReply::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildinvitename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildinviteguid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskInviteyAgreeGuildReply::~AskInviteyAgreeGuildReply() {
  SharedDtor();
}

void AskInviteyAgreeGuildReply::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildinvitename_ != &::google::protobuf::internal::kEmptyString) {
    delete guildinvitename_;
  }
  if (this != default_instance_) {
  }
}

void AskInviteyAgreeGuildReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskInviteyAgreeGuildReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskInviteyAgreeGuildReply_descriptor_;
}

const AskInviteyAgreeGuildReply& AskInviteyAgreeGuildReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

AskInviteyAgreeGuildReply* AskInviteyAgreeGuildReply::default_instance_ = NULL;

AskInviteyAgreeGuildReply* AskInviteyAgreeGuildReply::New() const {
  return new AskInviteyAgreeGuildReply;
}

void AskInviteyAgreeGuildReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = GOOGLE_ULONGLONG(0);
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    if (has_guildinvitename()) {
      if (guildinvitename_ != &::google::protobuf::internal::kEmptyString) {
        guildinvitename_->clear();
      }
    }
    guildinviteguid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool AskInviteyAgreeGuildReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guildid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guildname;
        break;
      }

      // required string guildname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_guildinvitename;
        break;
      }

      // required string guildinvitename = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildinvitename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildinvitename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildinvitename().data(), this->guildinvitename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_guildinviteguid;
        break;
      }

      // required fixed64 guildinviteguid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_guildinviteguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guildinviteguid_)));
          set_has_guildinviteguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void AskInviteyAgreeGuildReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guildid = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guildid(), output);
  }

  // required string guildname = 2;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->guildname(), output);
  }

  // required string guildinvitename = 3;
  if (has_guildinvitename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildinvitename().data(), this->guildinvitename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->guildinvitename(), output);
  }

  // required fixed64 guildinviteguid = 4;
  if (has_guildinviteguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->guildinviteguid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AskInviteyAgreeGuildReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guildid = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guildid(), target);
  }

  // required string guildname = 2;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guildname(), target);
  }

  // required string guildinvitename = 3;
  if (has_guildinvitename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildinvitename().data(), this->guildinvitename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guildinvitename(), target);
  }

  // required fixed64 guildinviteguid = 4;
  if (has_guildinviteguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->guildinviteguid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AskInviteyAgreeGuildReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guildid = 1;
    if (has_guildid()) {
      total_size += 1 + 8;
    }

    // required string guildname = 2;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // required string guildinvitename = 3;
    if (has_guildinvitename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildinvitename());
    }

    // required fixed64 guildinviteguid = 4;
    if (has_guildinviteguid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskInviteyAgreeGuildReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskInviteyAgreeGuildReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskInviteyAgreeGuildReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void AskInviteyAgreeGuildReply::MergeFrom(const AskInviteyAgreeGuildReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_guildinvitename()) {
      set_guildinvitename(from.guildinvitename());
    }
    if (from.has_guildinviteguid()) {
      set_guildinviteguid(from.guildinviteguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void AskInviteyAgreeGuildReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void AskInviteyAgreeGuildReply::CopyFrom(const AskInviteyAgreeGuildReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool AskInviteyAgreeGuildReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void AskInviteyAgreeGuildReply::SetInitialized() {
  _has_bits_[0] |= 0x0000000f;

  return;
}

void AskInviteyAgreeGuildReply::Swap(AskInviteyAgreeGuildReply* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(guildname_, other->guildname_);
    std::swap(guildinvitename_, other->guildinvitename_);
    std::swap(guildinviteguid_, other->guildinviteguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata AskInviteyAgreeGuildReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskInviteyAgreeGuildReply_descriptor_;
  metadata.reflection = AskInviteyAgreeGuildReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteyAgreeGuildReq::kGuildidFieldNumber;
const int InviteyAgreeGuildReq::kAgreeFieldNumber;
const int InviteyAgreeGuildReq::kGuildidinviteguidFieldNumber;
#endif  // !_MSC_VER

InviteyAgreeGuildReq::InviteyAgreeGuildReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InviteyAgreeGuildReq::InitAsDefaultInstance() {
}

InviteyAgreeGuildReq::InviteyAgreeGuildReq(const InviteyAgreeGuildReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InviteyAgreeGuildReq::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  agree_ = false;
  guildidinviteguid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteyAgreeGuildReq::~InviteyAgreeGuildReq() {
  SharedDtor();
}

void InviteyAgreeGuildReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InviteyAgreeGuildReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteyAgreeGuildReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteyAgreeGuildReq_descriptor_;
}

const InviteyAgreeGuildReq& InviteyAgreeGuildReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

InviteyAgreeGuildReq* InviteyAgreeGuildReq::default_instance_ = NULL;

InviteyAgreeGuildReq* InviteyAgreeGuildReq::New() const {
  return new InviteyAgreeGuildReq;
}

void InviteyAgreeGuildReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = GOOGLE_ULONGLONG(0);
    agree_ = false;
    guildidinviteguid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool InviteyAgreeGuildReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guildid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_agree;
        break;
      }

      // required bool agree = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_)));
          set_has_agree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_guildidinviteguid;
        break;
      }

      // required fixed64 guildidinviteguid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_guildidinviteguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guildidinviteguid_)));
          set_has_guildidinviteguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void InviteyAgreeGuildReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guildid = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guildid(), output);
  }

  // required bool agree = 2;
  if (has_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->agree(), output);
  }

  // required fixed64 guildidinviteguid = 3;
  if (has_guildidinviteguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->guildidinviteguid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InviteyAgreeGuildReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guildid = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guildid(), target);
  }

  // required bool agree = 2;
  if (has_agree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->agree(), target);
  }

  // required fixed64 guildidinviteguid = 3;
  if (has_guildidinviteguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->guildidinviteguid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InviteyAgreeGuildReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guildid = 1;
    if (has_guildid()) {
      total_size += 1 + 8;
    }

    // required bool agree = 2;
    if (has_agree()) {
      total_size += 1 + 1;
    }

    // required fixed64 guildidinviteguid = 3;
    if (has_guildidinviteguid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteyAgreeGuildReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteyAgreeGuildReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteyAgreeGuildReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void InviteyAgreeGuildReq::MergeFrom(const InviteyAgreeGuildReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_agree()) {
      set_agree(from.agree());
    }
    if (from.has_guildidinviteguid()) {
      set_guildidinviteguid(from.guildidinviteguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void InviteyAgreeGuildReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void InviteyAgreeGuildReq::CopyFrom(const InviteyAgreeGuildReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool InviteyAgreeGuildReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void InviteyAgreeGuildReq::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  return;
}

void InviteyAgreeGuildReq::Swap(InviteyAgreeGuildReq* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(agree_, other->agree_);
    std::swap(guildidinviteguid_, other->guildidinviteguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata InviteyAgreeGuildReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteyAgreeGuildReq_descriptor_;
  metadata.reflection = InviteyAgreeGuildReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgreeApplyGuildReq::kPlayerguidFieldNumber;
const int AgreeApplyGuildReq::kAgreeFieldNumber;
#endif  // !_MSC_VER

AgreeApplyGuildReq::AgreeApplyGuildReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AgreeApplyGuildReq::InitAsDefaultInstance() {
}

AgreeApplyGuildReq::AgreeApplyGuildReq(const AgreeApplyGuildReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AgreeApplyGuildReq::SharedCtor() {
  _cached_size_ = 0;
  playerguid_ = GOOGLE_ULONGLONG(0);
  agree_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgreeApplyGuildReq::~AgreeApplyGuildReq() {
  SharedDtor();
}

void AgreeApplyGuildReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AgreeApplyGuildReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgreeApplyGuildReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgreeApplyGuildReq_descriptor_;
}

const AgreeApplyGuildReq& AgreeApplyGuildReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

AgreeApplyGuildReq* AgreeApplyGuildReq::default_instance_ = NULL;

AgreeApplyGuildReq* AgreeApplyGuildReq::New() const {
  return new AgreeApplyGuildReq;
}

void AgreeApplyGuildReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerguid_ = GOOGLE_ULONGLONG(0);
    agree_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool AgreeApplyGuildReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 playerguid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &playerguid_)));
          set_has_playerguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_agree;
        break;
      }

      // required bool agree = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_)));
          set_has_agree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void AgreeApplyGuildReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 playerguid = 1;
  if (has_playerguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->playerguid(), output);
  }

  // required bool agree = 2;
  if (has_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->agree(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AgreeApplyGuildReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 playerguid = 1;
  if (has_playerguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->playerguid(), target);
  }

  // required bool agree = 2;
  if (has_agree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->agree(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AgreeApplyGuildReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 playerguid = 1;
    if (has_playerguid()) {
      total_size += 1 + 8;
    }

    // required bool agree = 2;
    if (has_agree()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgreeApplyGuildReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgreeApplyGuildReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgreeApplyGuildReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void AgreeApplyGuildReq::MergeFrom(const AgreeApplyGuildReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerguid()) {
      set_playerguid(from.playerguid());
    }
    if (from.has_agree()) {
      set_agree(from.agree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void AgreeApplyGuildReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void AgreeApplyGuildReq::CopyFrom(const AgreeApplyGuildReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool AgreeApplyGuildReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AgreeApplyGuildReq::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void AgreeApplyGuildReq::Swap(AgreeApplyGuildReq* other) {
  if (other != this) {
    std::swap(playerguid_, other->playerguid_);
    std::swap(agree_, other->agree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata AgreeApplyGuildReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgreeApplyGuildReq_descriptor_;
  metadata.reflection = AgreeApplyGuildReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdatePlayerGuildInfo::kGuildidFieldNumber;
const int UpdatePlayerGuildInfo::kGuildnameFieldNumber;
#endif  // !_MSC_VER

UpdatePlayerGuildInfo::UpdatePlayerGuildInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdatePlayerGuildInfo::InitAsDefaultInstance() {
}

UpdatePlayerGuildInfo::UpdatePlayerGuildInfo(const UpdatePlayerGuildInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdatePlayerGuildInfo::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdatePlayerGuildInfo::~UpdatePlayerGuildInfo() {
  SharedDtor();
}

void UpdatePlayerGuildInfo::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void UpdatePlayerGuildInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdatePlayerGuildInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdatePlayerGuildInfo_descriptor_;
}

const UpdatePlayerGuildInfo& UpdatePlayerGuildInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

UpdatePlayerGuildInfo* UpdatePlayerGuildInfo::default_instance_ = NULL;

UpdatePlayerGuildInfo* UpdatePlayerGuildInfo::New() const {
  return new UpdatePlayerGuildInfo;
}

void UpdatePlayerGuildInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = GOOGLE_ULONGLONG(0);
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool UpdatePlayerGuildInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guildid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guildname;
        break;
      }

      // required string guildname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void UpdatePlayerGuildInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guildid = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guildid(), output);
  }

  // required string guildname = 2;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->guildname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdatePlayerGuildInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guildid = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guildid(), target);
  }

  // required string guildname = 2;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guildname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdatePlayerGuildInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guildid = 1;
    if (has_guildid()) {
      total_size += 1 + 8;
    }

    // required string guildname = 2;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdatePlayerGuildInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdatePlayerGuildInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdatePlayerGuildInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void UpdatePlayerGuildInfo::MergeFrom(const UpdatePlayerGuildInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void UpdatePlayerGuildInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void UpdatePlayerGuildInfo::CopyFrom(const UpdatePlayerGuildInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool UpdatePlayerGuildInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UpdatePlayerGuildInfo::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void UpdatePlayerGuildInfo::Swap(UpdatePlayerGuildInfo* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(guildname_, other->guildname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata UpdatePlayerGuildInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdatePlayerGuildInfo_descriptor_;
  metadata.reflection = UpdatePlayerGuildInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildBaseInfo::kGuidFieldNumber;
const int GuildBaseInfo::kNameFieldNumber;
const int GuildBaseInfo::kLastnameFieldNumber;
const int GuildBaseInfo::kNoticeFieldNumber;
const int GuildBaseInfo::kGuildlevelFieldNumber;
const int GuildBaseInfo::kMembersizeFieldNumber;
const int GuildBaseInfo::kMaxmembersizeFieldNumber;
const int GuildBaseInfo::kChieftainnameFieldNumber;
const int GuildBaseInfo::kChieftainguidFieldNumber;
const int GuildBaseInfo::kCreatetimeFieldNumber;
#endif  // !_MSC_VER

GuildBaseInfo::GuildBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildBaseInfo::InitAsDefaultInstance() {
}

GuildBaseInfo::GuildBaseInfo(const GuildBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildlevel_ = 0;
  membersize_ = 0;
  maxmembersize_ = 0;
  chieftainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chieftainguid_ = GOOGLE_ULONGLONG(0);
  createtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildBaseInfo::~GuildBaseInfo() {
  SharedDtor();
}

void GuildBaseInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (lastname_ != &::google::protobuf::internal::kEmptyString) {
    delete lastname_;
  }
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (chieftainname_ != &::google::protobuf::internal::kEmptyString) {
    delete chieftainname_;
  }
  if (this != default_instance_) {
  }
}

void GuildBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBaseInfo_descriptor_;
}

const GuildBaseInfo& GuildBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildBaseInfo* GuildBaseInfo::default_instance_ = NULL;

GuildBaseInfo* GuildBaseInfo::New() const {
  return new GuildBaseInfo;
}

void GuildBaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_lastname()) {
      if (lastname_ != &::google::protobuf::internal::kEmptyString) {
        lastname_->clear();
      }
    }
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
    guildlevel_ = 0;
    membersize_ = 0;
    maxmembersize_ = 0;
    if (has_chieftainname()) {
      if (chieftainname_ != &::google::protobuf::internal::kEmptyString) {
        chieftainname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    chieftainguid_ = GOOGLE_ULONGLONG(0);
    createtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_lastname;
        break;
      }

      // required string lastname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lastname().data(), this->lastname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_notice;
        break;
      }

      // required string notice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_guildlevel;
        break;
      }

      // required int32 guildlevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildlevel_)));
          set_has_guildlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_membersize;
        break;
      }

      // required int32 membersize = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_membersize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &membersize_)));
          set_has_membersize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_maxmembersize;
        break;
      }

      // required int32 maxmembersize = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxmembersize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxmembersize_)));
          set_has_maxmembersize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_chieftainname;
        break;
      }

      // required string chieftainname = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chieftainname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chieftainname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chieftainname().data(), this->chieftainname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_chieftainguid;
        break;
      }

      // required fixed64 chieftainguid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_chieftainguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &chieftainguid_)));
          set_has_chieftainguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_createtime;
        break;
      }

      // required fixed32 createtime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_createtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required string lastname = 3;
  if (has_lastname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastname().data(), this->lastname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lastname(), output);
  }

  // required string notice = 4;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->notice(), output);
  }

  // required int32 guildlevel = 5;
  if (has_guildlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->guildlevel(), output);
  }

  // required int32 membersize = 6;
  if (has_membersize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->membersize(), output);
  }

  // required int32 maxmembersize = 7;
  if (has_maxmembersize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->maxmembersize(), output);
  }

  // required string chieftainname = 8;
  if (has_chieftainname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chieftainname().data(), this->chieftainname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->chieftainname(), output);
  }

  // required fixed64 chieftainguid = 9;
  if (has_chieftainguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(9, this->chieftainguid(), output);
  }

  // required fixed32 createtime = 10;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->createtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required string lastname = 3;
  if (has_lastname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastname().data(), this->lastname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lastname(), target);
  }

  // required string notice = 4;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->notice(), target);
  }

  // required int32 guildlevel = 5;
  if (has_guildlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->guildlevel(), target);
  }

  // required int32 membersize = 6;
  if (has_membersize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->membersize(), target);
  }

  // required int32 maxmembersize = 7;
  if (has_maxmembersize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->maxmembersize(), target);
  }

  // required string chieftainname = 8;
  if (has_chieftainname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chieftainname().data(), this->chieftainname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->chieftainname(), target);
  }

  // required fixed64 chieftainguid = 9;
  if (has_chieftainguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(9, this->chieftainguid(), target);
  }

  // required fixed32 createtime = 10;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(10, this->createtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string lastname = 3;
    if (has_lastname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastname());
    }

    // required string notice = 4;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

    // required int32 guildlevel = 5;
    if (has_guildlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildlevel());
    }

    // required int32 membersize = 6;
    if (has_membersize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->membersize());
    }

    // required int32 maxmembersize = 7;
    if (has_maxmembersize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxmembersize());
    }

    // required string chieftainname = 8;
    if (has_chieftainname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chieftainname());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required fixed64 chieftainguid = 9;
    if (has_chieftainguid()) {
      total_size += 1 + 8;
    }

    // required fixed32 createtime = 10;
    if (has_createtime()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildBaseInfo::MergeFrom(const GuildBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_lastname()) {
      set_lastname(from.lastname());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_guildlevel()) {
      set_guildlevel(from.guildlevel());
    }
    if (from.has_membersize()) {
      set_membersize(from.membersize());
    }
    if (from.has_maxmembersize()) {
      set_maxmembersize(from.maxmembersize());
    }
    if (from.has_chieftainname()) {
      set_chieftainname(from.chieftainname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_chieftainguid()) {
      set_chieftainguid(from.chieftainguid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildBaseInfo::CopyFrom(const GuildBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildBaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void GuildBaseInfo::SetInitialized() {
  _has_bits_[0] |= 0x000003ff;

  return;
}

void GuildBaseInfo::Swap(GuildBaseInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(name_, other->name_);
    std::swap(lastname_, other->lastname_);
    std::swap(notice_, other->notice_);
    std::swap(guildlevel_, other->guildlevel_);
    std::swap(membersize_, other->membersize_);
    std::swap(maxmembersize_, other->maxmembersize_);
    std::swap(chieftainname_, other->chieftainname_);
    std::swap(chieftainguid_, other->chieftainguid_);
    std::swap(createtime_, other->createtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildBaseInfo_descriptor_;
  metadata.reflection = GuildBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetGuildListReq::GetGuildListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGuildListReq::InitAsDefaultInstance() {
}

GetGuildListReq::GetGuildListReq(const GetGuildListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGuildListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGuildListReq::~GetGuildListReq() {
  SharedDtor();
}

void GetGuildListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGuildListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGuildListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGuildListReq_descriptor_;
}

const GetGuildListReq& GetGuildListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GetGuildListReq* GetGuildListReq::default_instance_ = NULL;

GetGuildListReq* GetGuildListReq::New() const {
  return new GetGuildListReq;
}

void GetGuildListReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GetGuildListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void GetGuildListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGuildListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGuildListReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGuildListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGuildListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGuildListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GetGuildListReq::MergeFrom(const GetGuildListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GetGuildListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GetGuildListReq::CopyFrom(const GetGuildListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GetGuildListReq::IsInitialized() const {

  return true;
}

void GetGuildListReq::SetInitialized() {

  return;
}

void GetGuildListReq::Swap(GetGuildListReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GetGuildListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGuildListReq_descriptor_;
  metadata.reflection = GetGuildListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildBaseListReply::kListFieldNumber;
#endif  // !_MSC_VER

GuildBaseListReply::GuildBaseListReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildBaseListReply::InitAsDefaultInstance() {
}

GuildBaseListReply::GuildBaseListReply(const GuildBaseListReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildBaseListReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildBaseListReply::~GuildBaseListReply() {
  SharedDtor();
}

void GuildBaseListReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildBaseListReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildBaseListReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBaseListReply_descriptor_;
}

const GuildBaseListReply& GuildBaseListReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildBaseListReply* GuildBaseListReply::default_instance_ = NULL;

GuildBaseListReply* GuildBaseListReply::New() const {
  return new GuildBaseListReply;
}

void GuildBaseListReply::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildBaseListReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.GuildBaseInfo list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildBaseListReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.GuildBaseInfo list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildBaseListReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.GuildBaseInfo list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildBaseListReply::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.GuildBaseInfo list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildBaseListReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildBaseListReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildBaseListReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildBaseListReply::MergeFrom(const GuildBaseListReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildBaseListReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildBaseListReply::CopyFrom(const GuildBaseListReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildBaseListReply::IsInitialized() const {

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void GuildBaseListReply::SetInitialized() {

  for (int i = 0; i < list_size(); i++) {
    this->mutable_list(i)->SetInitialized();
  }
  return;
}

void GuildBaseListReply::Swap(GuildBaseListReply* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildBaseListReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildBaseListReply_descriptor_;
  metadata.reflection = GuildBaseListReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyGuildPlayerInfo::kPlayerguidFieldNumber;
const int ApplyGuildPlayerInfo::kPlayernameFieldNumber;
const int ApplyGuildPlayerInfo::kPlayerlevelFieldNumber;
const int ApplyGuildPlayerInfo::kProfessionFieldNumber;
#endif  // !_MSC_VER

ApplyGuildPlayerInfo::ApplyGuildPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyGuildPlayerInfo::InitAsDefaultInstance() {
}

ApplyGuildPlayerInfo::ApplyGuildPlayerInfo(const ApplyGuildPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyGuildPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  playerguid_ = GOOGLE_ULONGLONG(0);
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerlevel_ = 0;
  profession_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyGuildPlayerInfo::~ApplyGuildPlayerInfo() {
  SharedDtor();
}

void ApplyGuildPlayerInfo::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void ApplyGuildPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyGuildPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyGuildPlayerInfo_descriptor_;
}

const ApplyGuildPlayerInfo& ApplyGuildPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

ApplyGuildPlayerInfo* ApplyGuildPlayerInfo::default_instance_ = NULL;

ApplyGuildPlayerInfo* ApplyGuildPlayerInfo::New() const {
  return new ApplyGuildPlayerInfo;
}

void ApplyGuildPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerguid_ = GOOGLE_ULONGLONG(0);
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    playerlevel_ = 0;
    profession_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ApplyGuildPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 playerguid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &playerguid_)));
          set_has_playerguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playername;
        break;
      }

      // required string playername = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerlevel;
        break;
      }

      // required int32 playerlevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerlevel_)));
          set_has_playerlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_profession;
        break;
      }

      // required .Packet.Professions profession = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::Professions_IsValid(value)) {
            set_profession(static_cast< ::Packet::Professions >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ApplyGuildPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 playerguid = 1;
  if (has_playerguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->playerguid(), output);
  }

  // required string playername = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->playername(), output);
  }

  // required int32 playerlevel = 3;
  if (has_playerlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playerlevel(), output);
  }

  // required .Packet.Professions profession = 4;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->profession(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplyGuildPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 playerguid = 1;
  if (has_playerguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->playerguid(), target);
  }

  // required string playername = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playername(), target);
  }

  // required int32 playerlevel = 3;
  if (has_playerlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playerlevel(), target);
  }

  // required .Packet.Professions profession = 4;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->profession(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplyGuildPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 playerguid = 1;
    if (has_playerguid()) {
      total_size += 1 + 8;
    }

    // required string playername = 2;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // required int32 playerlevel = 3;
    if (has_playerlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerlevel());
    }

    // required .Packet.Professions profession = 4;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->profession());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyGuildPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyGuildPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyGuildPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ApplyGuildPlayerInfo::MergeFrom(const ApplyGuildPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerguid()) {
      set_playerguid(from.playerguid());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_playerlevel()) {
      set_playerlevel(from.playerlevel());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ApplyGuildPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ApplyGuildPlayerInfo::CopyFrom(const ApplyGuildPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ApplyGuildPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ApplyGuildPlayerInfo::SetInitialized() {
  _has_bits_[0] |= 0x0000000f;

  return;
}

void ApplyGuildPlayerInfo::Swap(ApplyGuildPlayerInfo* other) {
  if (other != this) {
    std::swap(playerguid_, other->playerguid_);
    std::swap(playername_, other->playername_);
    std::swap(playerlevel_, other->playerlevel_);
    std::swap(profession_, other->profession_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ApplyGuildPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyGuildPlayerInfo_descriptor_;
  metadata.reflection = ApplyGuildPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ApplyGuildPlayerListReq::ApplyGuildPlayerListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyGuildPlayerListReq::InitAsDefaultInstance() {
}

ApplyGuildPlayerListReq::ApplyGuildPlayerListReq(const ApplyGuildPlayerListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyGuildPlayerListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyGuildPlayerListReq::~ApplyGuildPlayerListReq() {
  SharedDtor();
}

void ApplyGuildPlayerListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplyGuildPlayerListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyGuildPlayerListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyGuildPlayerListReq_descriptor_;
}

const ApplyGuildPlayerListReq& ApplyGuildPlayerListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

ApplyGuildPlayerListReq* ApplyGuildPlayerListReq::default_instance_ = NULL;

ApplyGuildPlayerListReq* ApplyGuildPlayerListReq::New() const {
  return new ApplyGuildPlayerListReq;
}

void ApplyGuildPlayerListReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ApplyGuildPlayerListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void ApplyGuildPlayerListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplyGuildPlayerListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplyGuildPlayerListReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyGuildPlayerListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyGuildPlayerListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyGuildPlayerListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ApplyGuildPlayerListReq::MergeFrom(const ApplyGuildPlayerListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ApplyGuildPlayerListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ApplyGuildPlayerListReq::CopyFrom(const ApplyGuildPlayerListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ApplyGuildPlayerListReq::IsInitialized() const {

  return true;
}

void ApplyGuildPlayerListReq::SetInitialized() {

  return;
}

void ApplyGuildPlayerListReq::Swap(ApplyGuildPlayerListReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ApplyGuildPlayerListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyGuildPlayerListReq_descriptor_;
  metadata.reflection = ApplyGuildPlayerListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyGuildPlayerListReply::kListFieldNumber;
#endif  // !_MSC_VER

ApplyGuildPlayerListReply::ApplyGuildPlayerListReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyGuildPlayerListReply::InitAsDefaultInstance() {
}

ApplyGuildPlayerListReply::ApplyGuildPlayerListReply(const ApplyGuildPlayerListReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyGuildPlayerListReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyGuildPlayerListReply::~ApplyGuildPlayerListReply() {
  SharedDtor();
}

void ApplyGuildPlayerListReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplyGuildPlayerListReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyGuildPlayerListReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyGuildPlayerListReply_descriptor_;
}

const ApplyGuildPlayerListReply& ApplyGuildPlayerListReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

ApplyGuildPlayerListReply* ApplyGuildPlayerListReply::default_instance_ = NULL;

ApplyGuildPlayerListReply* ApplyGuildPlayerListReply::New() const {
  return new ApplyGuildPlayerListReply;
}

void ApplyGuildPlayerListReply::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ApplyGuildPlayerListReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.ApplyGuildPlayerInfo list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ApplyGuildPlayerListReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.ApplyGuildPlayerInfo list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplyGuildPlayerListReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.ApplyGuildPlayerInfo list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplyGuildPlayerListReply::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.ApplyGuildPlayerInfo list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyGuildPlayerListReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyGuildPlayerListReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyGuildPlayerListReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ApplyGuildPlayerListReply::MergeFrom(const ApplyGuildPlayerListReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ApplyGuildPlayerListReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ApplyGuildPlayerListReply::CopyFrom(const ApplyGuildPlayerListReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ApplyGuildPlayerListReply::IsInitialized() const {

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void ApplyGuildPlayerListReply::SetInitialized() {

  for (int i = 0; i < list_size(); i++) {
    this->mutable_list(i)->SetInitialized();
  }
  return;
}

void ApplyGuildPlayerListReply::Swap(ApplyGuildPlayerListReply* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ApplyGuildPlayerListReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyGuildPlayerListReply_descriptor_;
  metadata.reflection = ApplyGuildPlayerListReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ClearApplyGuildPlayerListReq::ClearApplyGuildPlayerListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClearApplyGuildPlayerListReq::InitAsDefaultInstance() {
}

ClearApplyGuildPlayerListReq::ClearApplyGuildPlayerListReq(const ClearApplyGuildPlayerListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClearApplyGuildPlayerListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClearApplyGuildPlayerListReq::~ClearApplyGuildPlayerListReq() {
  SharedDtor();
}

void ClearApplyGuildPlayerListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClearApplyGuildPlayerListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClearApplyGuildPlayerListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClearApplyGuildPlayerListReq_descriptor_;
}

const ClearApplyGuildPlayerListReq& ClearApplyGuildPlayerListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

ClearApplyGuildPlayerListReq* ClearApplyGuildPlayerListReq::default_instance_ = NULL;

ClearApplyGuildPlayerListReq* ClearApplyGuildPlayerListReq::New() const {
  return new ClearApplyGuildPlayerListReq;
}

void ClearApplyGuildPlayerListReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ClearApplyGuildPlayerListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void ClearApplyGuildPlayerListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClearApplyGuildPlayerListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClearApplyGuildPlayerListReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClearApplyGuildPlayerListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClearApplyGuildPlayerListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClearApplyGuildPlayerListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ClearApplyGuildPlayerListReq::MergeFrom(const ClearApplyGuildPlayerListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ClearApplyGuildPlayerListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ClearApplyGuildPlayerListReq::CopyFrom(const ClearApplyGuildPlayerListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ClearApplyGuildPlayerListReq::IsInitialized() const {

  return true;
}

void ClearApplyGuildPlayerListReq::SetInitialized() {

  return;
}

void ClearApplyGuildPlayerListReq::Swap(ClearApplyGuildPlayerListReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ClearApplyGuildPlayerListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClearApplyGuildPlayerListReq_descriptor_;
  metadata.reflection = ClearApplyGuildPlayerListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetGuildNameRR::kNameFieldNumber;
const int SetGuildNameRR::kLastnameFieldNumber;
#endif  // !_MSC_VER

SetGuildNameRR::SetGuildNameRR()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetGuildNameRR::InitAsDefaultInstance() {
}

SetGuildNameRR::SetGuildNameRR(const SetGuildNameRR& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetGuildNameRR::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetGuildNameRR::~SetGuildNameRR() {
  SharedDtor();
}

void SetGuildNameRR::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (lastname_ != &::google::protobuf::internal::kEmptyString) {
    delete lastname_;
  }
  if (this != default_instance_) {
  }
}

void SetGuildNameRR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetGuildNameRR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetGuildNameRR_descriptor_;
}

const SetGuildNameRR& SetGuildNameRR::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

SetGuildNameRR* SetGuildNameRR::default_instance_ = NULL;

SetGuildNameRR* SetGuildNameRR::New() const {
  return new SetGuildNameRR;
}

void SetGuildNameRR::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_lastname()) {
      if (lastname_ != &::google::protobuf::internal::kEmptyString) {
        lastname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SetGuildNameRR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lastname;
        break;
      }

      // required string lastname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lastname().data(), this->lastname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SetGuildNameRR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string lastname = 2;
  if (has_lastname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastname().data(), this->lastname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->lastname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetGuildNameRR::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string lastname = 2;
  if (has_lastname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastname().data(), this->lastname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lastname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetGuildNameRR::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string lastname = 2;
    if (has_lastname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetGuildNameRR::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetGuildNameRR* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetGuildNameRR*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SetGuildNameRR::MergeFrom(const SetGuildNameRR& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_lastname()) {
      set_lastname(from.lastname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SetGuildNameRR::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SetGuildNameRR::CopyFrom(const SetGuildNameRR& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SetGuildNameRR::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SetGuildNameRR::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void SetGuildNameRR::Swap(SetGuildNameRR* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(lastname_, other->lastname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SetGuildNameRR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetGuildNameRR_descriptor_;
  metadata.reflection = SetGuildNameRR_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetGuildNoticeRR::kNoticeFieldNumber;
#endif  // !_MSC_VER

SetGuildNoticeRR::SetGuildNoticeRR()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetGuildNoticeRR::InitAsDefaultInstance() {
}

SetGuildNoticeRR::SetGuildNoticeRR(const SetGuildNoticeRR& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetGuildNoticeRR::SharedCtor() {
  _cached_size_ = 0;
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetGuildNoticeRR::~SetGuildNoticeRR() {
  SharedDtor();
}

void SetGuildNoticeRR::SharedDtor() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void SetGuildNoticeRR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetGuildNoticeRR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetGuildNoticeRR_descriptor_;
}

const SetGuildNoticeRR& SetGuildNoticeRR::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

SetGuildNoticeRR* SetGuildNoticeRR::default_instance_ = NULL;

SetGuildNoticeRR* SetGuildNoticeRR::New() const {
  return new SetGuildNoticeRR;
}

void SetGuildNoticeRR::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SetGuildNoticeRR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string notice = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SetGuildNoticeRR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string notice = 1;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->notice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetGuildNoticeRR::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string notice = 1;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->notice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetGuildNoticeRR::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string notice = 1;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetGuildNoticeRR::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetGuildNoticeRR* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetGuildNoticeRR*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SetGuildNoticeRR::MergeFrom(const SetGuildNoticeRR& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notice()) {
      set_notice(from.notice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SetGuildNoticeRR::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SetGuildNoticeRR::CopyFrom(const SetGuildNoticeRR& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SetGuildNoticeRR::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetGuildNoticeRR::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void SetGuildNoticeRR::Swap(SetGuildNoticeRR* other) {
  if (other != this) {
    std::swap(notice_, other->notice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SetGuildNoticeRR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetGuildNoticeRR_descriptor_;
  metadata.reflection = SetGuildNoticeRR_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildDonationReq::kTypeFieldNumber;
#endif  // !_MSC_VER

GuildDonationReq::GuildDonationReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildDonationReq::InitAsDefaultInstance() {
}

GuildDonationReq::GuildDonationReq(const GuildDonationReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildDonationReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildDonationReq::~GuildDonationReq() {
  SharedDtor();
}

void GuildDonationReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildDonationReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildDonationReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildDonationReq_descriptor_;
}

const GuildDonationReq& GuildDonationReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildDonationReq* GuildDonationReq::default_instance_ = NULL;

GuildDonationReq* GuildDonationReq::New() const {
  return new GuildDonationReq;
}

void GuildDonationReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildDonationReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildDonationReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildDonationReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildDonationReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildDonationReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildDonationReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildDonationReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildDonationReq::MergeFrom(const GuildDonationReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildDonationReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildDonationReq::CopyFrom(const GuildDonationReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildDonationReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GuildDonationReq::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void GuildDonationReq::Swap(GuildDonationReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildDonationReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildDonationReq_descriptor_;
  metadata.reflection = GuildDonationReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DonationFlagUpdate::kBdonationFieldNumber;
#endif  // !_MSC_VER

DonationFlagUpdate::DonationFlagUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DonationFlagUpdate::InitAsDefaultInstance() {
}

DonationFlagUpdate::DonationFlagUpdate(const DonationFlagUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DonationFlagUpdate::SharedCtor() {
  _cached_size_ = 0;
  bdonation_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DonationFlagUpdate::~DonationFlagUpdate() {
  SharedDtor();
}

void DonationFlagUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DonationFlagUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DonationFlagUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DonationFlagUpdate_descriptor_;
}

const DonationFlagUpdate& DonationFlagUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

DonationFlagUpdate* DonationFlagUpdate::default_instance_ = NULL;

DonationFlagUpdate* DonationFlagUpdate::New() const {
  return new DonationFlagUpdate;
}

void DonationFlagUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bdonation_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool DonationFlagUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bdonation = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bdonation_)));
          set_has_bdonation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void DonationFlagUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 bdonation = 7;
  if (has_bdonation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bdonation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DonationFlagUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 bdonation = 7;
  if (has_bdonation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->bdonation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DonationFlagUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bdonation = 7;
    if (has_bdonation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bdonation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DonationFlagUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DonationFlagUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DonationFlagUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void DonationFlagUpdate::MergeFrom(const DonationFlagUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bdonation()) {
      set_bdonation(from.bdonation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void DonationFlagUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void DonationFlagUpdate::CopyFrom(const DonationFlagUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool DonationFlagUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DonationFlagUpdate::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void DonationFlagUpdate::Swap(DonationFlagUpdate* other) {
  if (other != this) {
    std::swap(bdonation_, other->bdonation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata DonationFlagUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DonationFlagUpdate_descriptor_;
  metadata.reflection = DonationFlagUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMoneyUpdate::kGuildmoneyFieldNumber;
#endif  // !_MSC_VER

GuildMoneyUpdate::GuildMoneyUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMoneyUpdate::InitAsDefaultInstance() {
}

GuildMoneyUpdate::GuildMoneyUpdate(const GuildMoneyUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMoneyUpdate::SharedCtor() {
  _cached_size_ = 0;
  guildmoney_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMoneyUpdate::~GuildMoneyUpdate() {
  SharedDtor();
}

void GuildMoneyUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMoneyUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMoneyUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMoneyUpdate_descriptor_;
}

const GuildMoneyUpdate& GuildMoneyUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildMoneyUpdate* GuildMoneyUpdate::default_instance_ = NULL;

GuildMoneyUpdate* GuildMoneyUpdate::New() const {
  return new GuildMoneyUpdate;
}

void GuildMoneyUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildmoney_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildMoneyUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 guildmoney = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildmoney_)));
          set_has_guildmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildMoneyUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 guildmoney = 1;
  if (has_guildmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guildmoney(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMoneyUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 guildmoney = 1;
  if (has_guildmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guildmoney(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMoneyUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 guildmoney = 1;
    if (has_guildmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildmoney());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMoneyUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMoneyUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMoneyUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildMoneyUpdate::MergeFrom(const GuildMoneyUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildmoney()) {
      set_guildmoney(from.guildmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildMoneyUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildMoneyUpdate::CopyFrom(const GuildMoneyUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildMoneyUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GuildMoneyUpdate::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void GuildMoneyUpdate::Swap(GuildMoneyUpdate* other) {
  if (other != this) {
    std::swap(guildmoney_, other->guildmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildMoneyUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMoneyUpdate_descriptor_;
  metadata.reflection = GuildMoneyUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildImpeachReply::kImpeachFieldNumber;
#endif  // !_MSC_VER

GuildImpeachReply::GuildImpeachReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildImpeachReply::InitAsDefaultInstance() {
  impeach_ = const_cast< ::Packet::GuildImpeach*>(&::Packet::GuildImpeach::default_instance());
}

GuildImpeachReply::GuildImpeachReply(const GuildImpeachReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildImpeachReply::SharedCtor() {
  _cached_size_ = 0;
  impeach_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildImpeachReply::~GuildImpeachReply() {
  SharedDtor();
}

void GuildImpeachReply::SharedDtor() {
  if (this != default_instance_) {
    delete impeach_;
  }
}

void GuildImpeachReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildImpeachReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildImpeachReply_descriptor_;
}

const GuildImpeachReply& GuildImpeachReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildImpeachReply* GuildImpeachReply::default_instance_ = NULL;

GuildImpeachReply* GuildImpeachReply::New() const {
  return new GuildImpeachReply;
}

void GuildImpeachReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_impeach()) {
      if (impeach_ != NULL) impeach_->::Packet::GuildImpeach::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildImpeachReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.GuildImpeach impeach = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_impeach()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildImpeachReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.GuildImpeach impeach = 1;
  if (has_impeach()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->impeach(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildImpeachReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.GuildImpeach impeach = 1;
  if (has_impeach()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->impeach(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildImpeachReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.GuildImpeach impeach = 1;
    if (has_impeach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->impeach());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildImpeachReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildImpeachReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildImpeachReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildImpeachReply::MergeFrom(const GuildImpeachReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_impeach()) {
      mutable_impeach()->::Packet::GuildImpeach::MergeFrom(from.impeach());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildImpeachReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildImpeachReply::CopyFrom(const GuildImpeachReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildImpeachReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_impeach()) {
    if (!this->impeach().IsInitialized()) return false;
  }
  return true;
}

void GuildImpeachReply::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  if (has_impeach()) {
    this->mutable_impeach()->SetInitialized();
  }
  return;
}

void GuildImpeachReply::Swap(GuildImpeachReply* other) {
  if (other != this) {
    std::swap(impeach_, other->impeach_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildImpeachReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildImpeachReply_descriptor_;
  metadata.reflection = GuildImpeachReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetGuildUserPositionRR::kPlayerguidFieldNumber;
const int SetGuildUserPositionRR::kPositionFieldNumber;
#endif  // !_MSC_VER

SetGuildUserPositionRR::SetGuildUserPositionRR()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetGuildUserPositionRR::InitAsDefaultInstance() {
}

SetGuildUserPositionRR::SetGuildUserPositionRR(const SetGuildUserPositionRR& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetGuildUserPositionRR::SharedCtor() {
  _cached_size_ = 0;
  playerguid_ = GOOGLE_ULONGLONG(0);
  position_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetGuildUserPositionRR::~SetGuildUserPositionRR() {
  SharedDtor();
}

void SetGuildUserPositionRR::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetGuildUserPositionRR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetGuildUserPositionRR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetGuildUserPositionRR_descriptor_;
}

const SetGuildUserPositionRR& SetGuildUserPositionRR::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

SetGuildUserPositionRR* SetGuildUserPositionRR::default_instance_ = NULL;

SetGuildUserPositionRR* SetGuildUserPositionRR::New() const {
  return new SetGuildUserPositionRR;
}

void SetGuildUserPositionRR::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerguid_ = GOOGLE_ULONGLONG(0);
    position_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SetGuildUserPositionRR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 playerguid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &playerguid_)));
          set_has_playerguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }

      // required .Packet.GuildPosition position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::GuildPosition_IsValid(value)) {
            set_position(static_cast< ::Packet::GuildPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SetGuildUserPositionRR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 playerguid = 1;
  if (has_playerguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->playerguid(), output);
  }

  // required .Packet.GuildPosition position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetGuildUserPositionRR::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 playerguid = 1;
  if (has_playerguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->playerguid(), target);
  }

  // required .Packet.GuildPosition position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetGuildUserPositionRR::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 playerguid = 1;
    if (has_playerguid()) {
      total_size += 1 + 8;
    }

    // required .Packet.GuildPosition position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetGuildUserPositionRR::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetGuildUserPositionRR* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetGuildUserPositionRR*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SetGuildUserPositionRR::MergeFrom(const SetGuildUserPositionRR& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerguid()) {
      set_playerguid(from.playerguid());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SetGuildUserPositionRR::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SetGuildUserPositionRR::CopyFrom(const SetGuildUserPositionRR& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SetGuildUserPositionRR::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SetGuildUserPositionRR::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void SetGuildUserPositionRR::Swap(SetGuildUserPositionRR* other) {
  if (other != this) {
    std::swap(playerguid_, other->playerguid_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SetGuildUserPositionRR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetGuildUserPositionRR_descriptor_;
  metadata.reflection = SetGuildUserPositionRR_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetGuildBonusReq::GetGuildBonusReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGuildBonusReq::InitAsDefaultInstance() {
}

GetGuildBonusReq::GetGuildBonusReq(const GetGuildBonusReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGuildBonusReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGuildBonusReq::~GetGuildBonusReq() {
  SharedDtor();
}

void GetGuildBonusReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGuildBonusReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGuildBonusReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGuildBonusReq_descriptor_;
}

const GetGuildBonusReq& GetGuildBonusReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GetGuildBonusReq* GetGuildBonusReq::default_instance_ = NULL;

GetGuildBonusReq* GetGuildBonusReq::New() const {
  return new GetGuildBonusReq;
}

void GetGuildBonusReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GetGuildBonusReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void GetGuildBonusReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGuildBonusReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGuildBonusReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGuildBonusReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGuildBonusReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGuildBonusReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GetGuildBonusReq::MergeFrom(const GetGuildBonusReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GetGuildBonusReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GetGuildBonusReq::CopyFrom(const GetGuildBonusReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GetGuildBonusReq::IsInitialized() const {

  return true;
}

void GetGuildBonusReq::SetInitialized() {

  return;
}

void GetGuildBonusReq::Swap(GetGuildBonusReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GetGuildBonusReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGuildBonusReq_descriptor_;
  metadata.reflection = GetGuildBonusReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildCDKInfo::kGuidFieldNumber;
const int GuildCDKInfo::kPlayeridFieldNumber;
const int GuildCDKInfo::kConfigidFieldNumber;
const int GuildCDKInfo::kCountFieldNumber;
const int GuildCDKInfo::kPlayernameFieldNumber;
const int GuildCDKInfo::kLimitlevelFieldNumber;
const int GuildCDKInfo::kLimitdayFieldNumber;
const int GuildCDKInfo::kLimitdonationFieldNumber;
const int GuildCDKInfo::kDatetimeFieldNumber;
const int GuildCDKInfo::kWishFieldNumber;
const int GuildCDKInfo::kGetplayeridFieldNumber;
#endif  // !_MSC_VER

GuildCDKInfo::GuildCDKInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildCDKInfo::InitAsDefaultInstance() {
}

GuildCDKInfo::GuildCDKInfo(const GuildCDKInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildCDKInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  playerid_ = GOOGLE_ULONGLONG(0);
  configid_ = 0;
  count_ = 0;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  limitlevel_ = 0;
  limitday_ = 0;
  limitdonation_ = 0;
  datetime_ = 0u;
  wish_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildCDKInfo::~GuildCDKInfo() {
  SharedDtor();
}

void GuildCDKInfo::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (wish_ != &::google::protobuf::internal::kEmptyString) {
    delete wish_;
  }
  if (this != default_instance_) {
  }
}

void GuildCDKInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildCDKInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildCDKInfo_descriptor_;
}

const GuildCDKInfo& GuildCDKInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildCDKInfo* GuildCDKInfo::default_instance_ = NULL;

GuildCDKInfo* GuildCDKInfo::New() const {
  return new GuildCDKInfo;
}

void GuildCDKInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    playerid_ = GOOGLE_ULONGLONG(0);
    configid_ = 0;
    count_ = 0;
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    limitlevel_ = 0;
    limitday_ = 0;
    limitdonation_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    datetime_ = 0u;
    if (has_wish()) {
      if (wish_ != &::google::protobuf::internal::kEmptyString) {
        wish_->clear();
      }
    }
  }
  getplayerid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildCDKInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_playerid;
        break;
      }

      // required fixed64 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_configid;
        break;
      }

      // required int32 configid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_configid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &configid_)));
          set_has_configid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // required int32 count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_playername;
        break;
      }

      // required string playername = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_limitlevel;
        break;
      }

      // required int32 limitlevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limitlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limitlevel_)));
          set_has_limitlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_limitday;
        break;
      }

      // required int32 limitday = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limitday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limitday_)));
          set_has_limitday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_limitdonation;
        break;
      }

      // required int32 limitdonation = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limitdonation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limitdonation_)));
          set_has_limitdonation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_datetime;
        break;
      }

      // required fixed32 datetime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_datetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &datetime_)));
          set_has_datetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_wish;
        break;
      }

      // required string wish = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wish:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wish()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wish().data(), this->wish().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_getplayerid;
        break;
      }

      // repeated fixed64 getplayerid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_getplayerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 89, input, this->mutable_getplayerid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_getplayerid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_getplayerid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildCDKInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required fixed64 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->playerid(), output);
  }

  // required int32 configid = 3;
  if (has_configid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->configid(), output);
  }

  // required int32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }

  // required string playername = 5;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->playername(), output);
  }

  // required int32 limitlevel = 6;
  if (has_limitlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->limitlevel(), output);
  }

  // required int32 limitday = 7;
  if (has_limitday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->limitday(), output);
  }

  // required int32 limitdonation = 8;
  if (has_limitdonation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->limitdonation(), output);
  }

  // required fixed32 datetime = 9;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->datetime(), output);
  }

  // required string wish = 10;
  if (has_wish()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wish().data(), this->wish().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->wish(), output);
  }

  // repeated fixed64 getplayerid = 11;
  for (int i = 0; i < this->getplayerid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      11, this->getplayerid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildCDKInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required fixed64 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->playerid(), target);
  }

  // required int32 configid = 3;
  if (has_configid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->configid(), target);
  }

  // required int32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count(), target);
  }

  // required string playername = 5;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->playername(), target);
  }

  // required int32 limitlevel = 6;
  if (has_limitlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->limitlevel(), target);
  }

  // required int32 limitday = 7;
  if (has_limitday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->limitday(), target);
  }

  // required int32 limitdonation = 8;
  if (has_limitdonation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->limitdonation(), target);
  }

  // required fixed32 datetime = 9;
  if (has_datetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(9, this->datetime(), target);
  }

  // required string wish = 10;
  if (has_wish()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wish().data(), this->wish().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->wish(), target);
  }

  // repeated fixed64 getplayerid = 11;
  for (int i = 0; i < this->getplayerid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(11, this->getplayerid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildCDKInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 playerid = 2;
    if (has_playerid()) {
      total_size += 1 + 8;
    }

    // required int32 configid = 3;
    if (has_configid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->configid());
    }

    // required int32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // required string playername = 5;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // required int32 limitlevel = 6;
    if (has_limitlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limitlevel());
    }

    // required int32 limitday = 7;
    if (has_limitday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limitday());
    }

    // required int32 limitdonation = 8;
    if (has_limitdonation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limitdonation());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required fixed32 datetime = 9;
    if (has_datetime()) {
      total_size += 1 + 4;
    }

    // required string wish = 10;
    if (has_wish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wish());
    }

  }
  // repeated fixed64 getplayerid = 11;
  {
    int data_size = 0;
    data_size = 8 * this->getplayerid_size();
    total_size += 1 * this->getplayerid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildCDKInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildCDKInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildCDKInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildCDKInfo::MergeFrom(const GuildCDKInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  getplayerid_.MergeFrom(from.getplayerid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_configid()) {
      set_configid(from.configid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_limitlevel()) {
      set_limitlevel(from.limitlevel());
    }
    if (from.has_limitday()) {
      set_limitday(from.limitday());
    }
    if (from.has_limitdonation()) {
      set_limitdonation(from.limitdonation());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_datetime()) {
      set_datetime(from.datetime());
    }
    if (from.has_wish()) {
      set_wish(from.wish());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildCDKInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildCDKInfo::CopyFrom(const GuildCDKInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildCDKInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void GuildCDKInfo::SetInitialized() {
  _has_bits_[0] |= 0x000003ff;

  return;
}

void GuildCDKInfo::Swap(GuildCDKInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(playerid_, other->playerid_);
    std::swap(configid_, other->configid_);
    std::swap(count_, other->count_);
    std::swap(playername_, other->playername_);
    std::swap(limitlevel_, other->limitlevel_);
    std::swap(limitday_, other->limitday_);
    std::swap(limitdonation_, other->limitdonation_);
    std::swap(datetime_, other->datetime_);
    std::swap(wish_, other->wish_);
    getplayerid_.Swap(&other->getplayerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildCDKInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildCDKInfo_descriptor_;
  metadata.reflection = GuildCDKInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateGuildCDK::kConfigidFieldNumber;
const int CreateGuildCDK::kCountFieldNumber;
const int CreateGuildCDK::kLimitlevelFieldNumber;
const int CreateGuildCDK::kLimitdayFieldNumber;
const int CreateGuildCDK::kLimitdonationFieldNumber;
const int CreateGuildCDK::kWishFieldNumber;
#endif  // !_MSC_VER

CreateGuildCDK::CreateGuildCDK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateGuildCDK::InitAsDefaultInstance() {
}

CreateGuildCDK::CreateGuildCDK(const CreateGuildCDK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateGuildCDK::SharedCtor() {
  _cached_size_ = 0;
  configid_ = 0;
  count_ = 0;
  limitlevel_ = 0;
  limitday_ = 0;
  limitdonation_ = 0;
  wish_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateGuildCDK::~CreateGuildCDK() {
  SharedDtor();
}

void CreateGuildCDK::SharedDtor() {
  if (wish_ != &::google::protobuf::internal::kEmptyString) {
    delete wish_;
  }
  if (this != default_instance_) {
  }
}

void CreateGuildCDK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateGuildCDK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateGuildCDK_descriptor_;
}

const CreateGuildCDK& CreateGuildCDK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

CreateGuildCDK* CreateGuildCDK::default_instance_ = NULL;

CreateGuildCDK* CreateGuildCDK::New() const {
  return new CreateGuildCDK;
}

void CreateGuildCDK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    configid_ = 0;
    count_ = 0;
    limitlevel_ = 0;
    limitday_ = 0;
    limitdonation_ = 0;
    if (has_wish()) {
      if (wish_ != &::google::protobuf::internal::kEmptyString) {
        wish_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool CreateGuildCDK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 configid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &configid_)));
          set_has_configid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_limitlevel;
        break;
      }

      // required int32 limitlevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limitlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limitlevel_)));
          set_has_limitlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_limitday;
        break;
      }

      // required int32 limitday = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limitday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limitday_)));
          set_has_limitday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_limitdonation;
        break;
      }

      // required int32 limitdonation = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limitdonation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limitdonation_)));
          set_has_limitdonation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_wish;
        break;
      }

      // required string wish = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wish:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wish()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wish().data(), this->wish().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void CreateGuildCDK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 configid = 1;
  if (has_configid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->configid(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // required int32 limitlevel = 3;
  if (has_limitlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->limitlevel(), output);
  }

  // required int32 limitday = 4;
  if (has_limitday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->limitday(), output);
  }

  // required int32 limitdonation = 5;
  if (has_limitdonation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->limitdonation(), output);
  }

  // required string wish = 6;
  if (has_wish()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wish().data(), this->wish().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->wish(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateGuildCDK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 configid = 1;
  if (has_configid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->configid(), target);
  }

  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // required int32 limitlevel = 3;
  if (has_limitlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->limitlevel(), target);
  }

  // required int32 limitday = 4;
  if (has_limitday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->limitday(), target);
  }

  // required int32 limitdonation = 5;
  if (has_limitdonation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->limitdonation(), target);
  }

  // required string wish = 6;
  if (has_wish()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wish().data(), this->wish().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->wish(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateGuildCDK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 configid = 1;
    if (has_configid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->configid());
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // required int32 limitlevel = 3;
    if (has_limitlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limitlevel());
    }

    // required int32 limitday = 4;
    if (has_limitday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limitday());
    }

    // required int32 limitdonation = 5;
    if (has_limitdonation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limitdonation());
    }

    // required string wish = 6;
    if (has_wish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wish());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateGuildCDK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateGuildCDK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateGuildCDK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void CreateGuildCDK::MergeFrom(const CreateGuildCDK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_configid()) {
      set_configid(from.configid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_limitlevel()) {
      set_limitlevel(from.limitlevel());
    }
    if (from.has_limitday()) {
      set_limitday(from.limitday());
    }
    if (from.has_limitdonation()) {
      set_limitdonation(from.limitdonation());
    }
    if (from.has_wish()) {
      set_wish(from.wish());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void CreateGuildCDK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void CreateGuildCDK::CopyFrom(const CreateGuildCDK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool CreateGuildCDK::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void CreateGuildCDK::SetInitialized() {
  _has_bits_[0] |= 0x0000003f;

  return;
}

void CreateGuildCDK::Swap(CreateGuildCDK* other) {
  if (other != this) {
    std::swap(configid_, other->configid_);
    std::swap(count_, other->count_);
    std::swap(limitlevel_, other->limitlevel_);
    std::swap(limitday_, other->limitday_);
    std::swap(limitdonation_, other->limitdonation_);
    std::swap(wish_, other->wish_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata CreateGuildCDK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateGuildCDK_descriptor_;
  metadata.reflection = CreateGuildCDK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateGuildCDKReq::kCdksFieldNumber;
#endif  // !_MSC_VER

CreateGuildCDKReq::CreateGuildCDKReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateGuildCDKReq::InitAsDefaultInstance() {
}

CreateGuildCDKReq::CreateGuildCDKReq(const CreateGuildCDKReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateGuildCDKReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateGuildCDKReq::~CreateGuildCDKReq() {
  SharedDtor();
}

void CreateGuildCDKReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreateGuildCDKReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateGuildCDKReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateGuildCDKReq_descriptor_;
}

const CreateGuildCDKReq& CreateGuildCDKReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

CreateGuildCDKReq* CreateGuildCDKReq::default_instance_ = NULL;

CreateGuildCDKReq* CreateGuildCDKReq::New() const {
  return new CreateGuildCDKReq;
}

void CreateGuildCDKReq::Clear() {
  cdks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool CreateGuildCDKReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.CreateGuildCDK cdks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cdks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cdks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cdks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void CreateGuildCDKReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.CreateGuildCDK cdks = 1;
  for (int i = 0; i < this->cdks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cdks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateGuildCDKReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.CreateGuildCDK cdks = 1;
  for (int i = 0; i < this->cdks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cdks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateGuildCDKReq::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.CreateGuildCDK cdks = 1;
  total_size += 1 * this->cdks_size();
  for (int i = 0; i < this->cdks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cdks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateGuildCDKReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateGuildCDKReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateGuildCDKReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void CreateGuildCDKReq::MergeFrom(const CreateGuildCDKReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  cdks_.MergeFrom(from.cdks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void CreateGuildCDKReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void CreateGuildCDKReq::CopyFrom(const CreateGuildCDKReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool CreateGuildCDKReq::IsInitialized() const {

  for (int i = 0; i < cdks_size(); i++) {
    if (!this->cdks(i).IsInitialized()) return false;
  }
  return true;
}

void CreateGuildCDKReq::SetInitialized() {

  for (int i = 0; i < cdks_size(); i++) {
    this->mutable_cdks(i)->SetInitialized();
  }
  return;
}

void CreateGuildCDKReq::Swap(CreateGuildCDKReq* other) {
  if (other != this) {
    cdks_.Swap(&other->cdks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata CreateGuildCDKReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateGuildCDKReq_descriptor_;
  metadata.reflection = CreateGuildCDKReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGuildCDKReq::kGuidFieldNumber;
#endif  // !_MSC_VER

GetGuildCDKReq::GetGuildCDKReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGuildCDKReq::InitAsDefaultInstance() {
}

GetGuildCDKReq::GetGuildCDKReq(const GetGuildCDKReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGuildCDKReq::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGuildCDKReq::~GetGuildCDKReq() {
  SharedDtor();
}

void GetGuildCDKReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGuildCDKReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGuildCDKReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGuildCDKReq_descriptor_;
}

const GetGuildCDKReq& GetGuildCDKReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GetGuildCDKReq* GetGuildCDKReq::default_instance_ = NULL;

GetGuildCDKReq* GetGuildCDKReq::New() const {
  return new GetGuildCDKReq;
}

void GetGuildCDKReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GetGuildCDKReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GetGuildCDKReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGuildCDKReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGuildCDKReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGuildCDKReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGuildCDKReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGuildCDKReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GetGuildCDKReq::MergeFrom(const GetGuildCDKReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GetGuildCDKReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GetGuildCDKReq::CopyFrom(const GetGuildCDKReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GetGuildCDKReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetGuildCDKReq::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void GetGuildCDKReq::Swap(GetGuildCDKReq* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GetGuildCDKReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGuildCDKReq_descriptor_;
  metadata.reflection = GetGuildCDKReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetGuildCDKListReq::GetGuildCDKListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGuildCDKListReq::InitAsDefaultInstance() {
}

GetGuildCDKListReq::GetGuildCDKListReq(const GetGuildCDKListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGuildCDKListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGuildCDKListReq::~GetGuildCDKListReq() {
  SharedDtor();
}

void GetGuildCDKListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGuildCDKListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGuildCDKListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGuildCDKListReq_descriptor_;
}

const GetGuildCDKListReq& GetGuildCDKListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GetGuildCDKListReq* GetGuildCDKListReq::default_instance_ = NULL;

GetGuildCDKListReq* GetGuildCDKListReq::New() const {
  return new GetGuildCDKListReq;
}

void GetGuildCDKListReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GetGuildCDKListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void GetGuildCDKListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGuildCDKListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGuildCDKListReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGuildCDKListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGuildCDKListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGuildCDKListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GetGuildCDKListReq::MergeFrom(const GetGuildCDKListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GetGuildCDKListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GetGuildCDKListReq::CopyFrom(const GetGuildCDKListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GetGuildCDKListReq::IsInitialized() const {

  return true;
}

void GetGuildCDKListReq::SetInitialized() {

  return;
}

void GetGuildCDKListReq::Swap(GetGuildCDKListReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GetGuildCDKListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGuildCDKListReq_descriptor_;
  metadata.reflection = GetGuildCDKListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGuildCDKListReply::kCdksFieldNumber;
#endif  // !_MSC_VER

GetGuildCDKListReply::GetGuildCDKListReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGuildCDKListReply::InitAsDefaultInstance() {
}

GetGuildCDKListReply::GetGuildCDKListReply(const GetGuildCDKListReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGuildCDKListReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGuildCDKListReply::~GetGuildCDKListReply() {
  SharedDtor();
}

void GetGuildCDKListReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGuildCDKListReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGuildCDKListReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGuildCDKListReply_descriptor_;
}

const GetGuildCDKListReply& GetGuildCDKListReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GetGuildCDKListReply* GetGuildCDKListReply::default_instance_ = NULL;

GetGuildCDKListReply* GetGuildCDKListReply::New() const {
  return new GetGuildCDKListReply;
}

void GetGuildCDKListReply::Clear() {
  cdks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GetGuildCDKListReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.GuildCDKInfo cdks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cdks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cdks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cdks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GetGuildCDKListReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.GuildCDKInfo cdks = 1;
  for (int i = 0; i < this->cdks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cdks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGuildCDKListReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.GuildCDKInfo cdks = 1;
  for (int i = 0; i < this->cdks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cdks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGuildCDKListReply::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.GuildCDKInfo cdks = 1;
  total_size += 1 * this->cdks_size();
  for (int i = 0; i < this->cdks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cdks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGuildCDKListReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGuildCDKListReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGuildCDKListReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GetGuildCDKListReply::MergeFrom(const GetGuildCDKListReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  cdks_.MergeFrom(from.cdks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GetGuildCDKListReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GetGuildCDKListReply::CopyFrom(const GetGuildCDKListReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GetGuildCDKListReply::IsInitialized() const {

  for (int i = 0; i < cdks_size(); i++) {
    if (!this->cdks(i).IsInitialized()) return false;
  }
  return true;
}

void GetGuildCDKListReply::SetInitialized() {

  for (int i = 0; i < cdks_size(); i++) {
    this->mutable_cdks(i)->SetInitialized();
  }
  return;
}

void GetGuildCDKListReply::Swap(GetGuildCDKListReply* other) {
  if (other != this) {
    cdks_.Swap(&other->cdks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GetGuildCDKListReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGuildCDKListReply_descriptor_;
  metadata.reflection = GetGuildCDKListReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildLevelUpReq::kBuildtypeFieldNumber;
#endif  // !_MSC_VER

BuildLevelUpReq::BuildLevelUpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuildLevelUpReq::InitAsDefaultInstance() {
}

BuildLevelUpReq::BuildLevelUpReq(const BuildLevelUpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuildLevelUpReq::SharedCtor() {
  _cached_size_ = 0;
  buildtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildLevelUpReq::~BuildLevelUpReq() {
  SharedDtor();
}

void BuildLevelUpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildLevelUpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildLevelUpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildLevelUpReq_descriptor_;
}

const BuildLevelUpReq& BuildLevelUpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

BuildLevelUpReq* BuildLevelUpReq::default_instance_ = NULL;

BuildLevelUpReq* BuildLevelUpReq::New() const {
  return new BuildLevelUpReq;
}

void BuildLevelUpReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buildtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool BuildLevelUpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 buildtype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buildtype_)));
          set_has_buildtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void BuildLevelUpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 buildtype = 1;
  if (has_buildtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buildtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuildLevelUpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 buildtype = 1;
  if (has_buildtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buildtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuildLevelUpReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 buildtype = 1;
    if (has_buildtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buildtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildLevelUpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildLevelUpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildLevelUpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void BuildLevelUpReq::MergeFrom(const BuildLevelUpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buildtype()) {
      set_buildtype(from.buildtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void BuildLevelUpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void BuildLevelUpReq::CopyFrom(const BuildLevelUpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool BuildLevelUpReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BuildLevelUpReq::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void BuildLevelUpReq::Swap(BuildLevelUpReq* other) {
  if (other != this) {
    std::swap(buildtype_, other->buildtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata BuildLevelUpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildLevelUpReq_descriptor_;
  metadata.reflection = BuildLevelUpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildLevelUpReply::kBuildtypeFieldNumber;
const int BuildLevelUpReply::kBuildlevelFieldNumber;
const int BuildLevelUpReply::kCdtimeFieldNumber;
#endif  // !_MSC_VER

BuildLevelUpReply::BuildLevelUpReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuildLevelUpReply::InitAsDefaultInstance() {
}

BuildLevelUpReply::BuildLevelUpReply(const BuildLevelUpReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuildLevelUpReply::SharedCtor() {
  _cached_size_ = 0;
  buildtype_ = 0;
  buildlevel_ = 0;
  cdtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildLevelUpReply::~BuildLevelUpReply() {
  SharedDtor();
}

void BuildLevelUpReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildLevelUpReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildLevelUpReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildLevelUpReply_descriptor_;
}

const BuildLevelUpReply& BuildLevelUpReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

BuildLevelUpReply* BuildLevelUpReply::default_instance_ = NULL;

BuildLevelUpReply* BuildLevelUpReply::New() const {
  return new BuildLevelUpReply;
}

void BuildLevelUpReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buildtype_ = 0;
    buildlevel_ = 0;
    cdtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool BuildLevelUpReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 buildtype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buildtype_)));
          set_has_buildtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buildlevel;
        break;
      }

      // required int32 buildlevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buildlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buildlevel_)));
          set_has_buildlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cdtime;
        break;
      }

      // required uint32 cdtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cdtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cdtime_)));
          set_has_cdtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void BuildLevelUpReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 buildtype = 1;
  if (has_buildtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buildtype(), output);
  }

  // required int32 buildlevel = 2;
  if (has_buildlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buildlevel(), output);
  }

  // required uint32 cdtime = 3;
  if (has_cdtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cdtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuildLevelUpReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 buildtype = 1;
  if (has_buildtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buildtype(), target);
  }

  // required int32 buildlevel = 2;
  if (has_buildlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buildlevel(), target);
  }

  // required uint32 cdtime = 3;
  if (has_cdtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cdtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuildLevelUpReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 buildtype = 1;
    if (has_buildtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buildtype());
    }

    // required int32 buildlevel = 2;
    if (has_buildlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buildlevel());
    }

    // required uint32 cdtime = 3;
    if (has_cdtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cdtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildLevelUpReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildLevelUpReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildLevelUpReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void BuildLevelUpReply::MergeFrom(const BuildLevelUpReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buildtype()) {
      set_buildtype(from.buildtype());
    }
    if (from.has_buildlevel()) {
      set_buildlevel(from.buildlevel());
    }
    if (from.has_cdtime()) {
      set_cdtime(from.cdtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void BuildLevelUpReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void BuildLevelUpReply::CopyFrom(const BuildLevelUpReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool BuildLevelUpReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void BuildLevelUpReply::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  return;
}

void BuildLevelUpReply::Swap(BuildLevelUpReply* other) {
  if (other != this) {
    std::swap(buildtype_, other->buildtype_);
    std::swap(buildlevel_, other->buildlevel_);
    std::swap(cdtime_, other->cdtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata BuildLevelUpReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildLevelUpReply_descriptor_;
  metadata.reflection = BuildLevelUpReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildBossCompetitionDbInfo::kBosslevelFieldNumber;
const int GuildBossCompetitionDbInfo::kHpFieldNumber;
#endif  // !_MSC_VER

GuildBossCompetitionDbInfo::GuildBossCompetitionDbInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildBossCompetitionDbInfo::InitAsDefaultInstance() {
}

GuildBossCompetitionDbInfo::GuildBossCompetitionDbInfo(const GuildBossCompetitionDbInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildBossCompetitionDbInfo::SharedCtor() {
  _cached_size_ = 0;
  bosslevel_ = 0;
  hp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildBossCompetitionDbInfo::~GuildBossCompetitionDbInfo() {
  SharedDtor();
}

void GuildBossCompetitionDbInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildBossCompetitionDbInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildBossCompetitionDbInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBossCompetitionDbInfo_descriptor_;
}

const GuildBossCompetitionDbInfo& GuildBossCompetitionDbInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildBossCompetitionDbInfo* GuildBossCompetitionDbInfo::default_instance_ = NULL;

GuildBossCompetitionDbInfo* GuildBossCompetitionDbInfo::New() const {
  return new GuildBossCompetitionDbInfo;
}

void GuildBossCompetitionDbInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bosslevel_ = 0;
    hp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildBossCompetitionDbInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bosslevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bosslevel_)));
          set_has_bosslevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hp;
        break;
      }

      // required int64 hp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildBossCompetitionDbInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 bosslevel = 1;
  if (has_bosslevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bosslevel(), output);
  }

  // required int64 hp = 2;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildBossCompetitionDbInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 bosslevel = 1;
  if (has_bosslevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bosslevel(), target);
  }

  // required int64 hp = 2;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildBossCompetitionDbInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bosslevel = 1;
    if (has_bosslevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bosslevel());
    }

    // required int64 hp = 2;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildBossCompetitionDbInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildBossCompetitionDbInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildBossCompetitionDbInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildBossCompetitionDbInfo::MergeFrom(const GuildBossCompetitionDbInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bosslevel()) {
      set_bosslevel(from.bosslevel());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildBossCompetitionDbInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildBossCompetitionDbInfo::CopyFrom(const GuildBossCompetitionDbInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildBossCompetitionDbInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GuildBossCompetitionDbInfo::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void GuildBossCompetitionDbInfo::Swap(GuildBossCompetitionDbInfo* other) {
  if (other != this) {
    std::swap(bosslevel_, other->bosslevel_);
    std::swap(hp_, other->hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildBossCompetitionDbInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildBossCompetitionDbInfo_descriptor_;
  metadata.reflection = GuildBossCompetitionDbInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetGuildBossCompetitionReq::GetGuildBossCompetitionReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGuildBossCompetitionReq::InitAsDefaultInstance() {
}

GetGuildBossCompetitionReq::GetGuildBossCompetitionReq(const GetGuildBossCompetitionReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGuildBossCompetitionReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGuildBossCompetitionReq::~GetGuildBossCompetitionReq() {
  SharedDtor();
}

void GetGuildBossCompetitionReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGuildBossCompetitionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGuildBossCompetitionReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGuildBossCompetitionReq_descriptor_;
}

const GetGuildBossCompetitionReq& GetGuildBossCompetitionReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GetGuildBossCompetitionReq* GetGuildBossCompetitionReq::default_instance_ = NULL;

GetGuildBossCompetitionReq* GetGuildBossCompetitionReq::New() const {
  return new GetGuildBossCompetitionReq;
}

void GetGuildBossCompetitionReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GetGuildBossCompetitionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void GetGuildBossCompetitionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGuildBossCompetitionReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGuildBossCompetitionReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGuildBossCompetitionReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGuildBossCompetitionReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGuildBossCompetitionReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GetGuildBossCompetitionReq::MergeFrom(const GetGuildBossCompetitionReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GetGuildBossCompetitionReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GetGuildBossCompetitionReq::CopyFrom(const GetGuildBossCompetitionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GetGuildBossCompetitionReq::IsInitialized() const {

  return true;
}

void GetGuildBossCompetitionReq::SetInitialized() {

  return;
}

void GetGuildBossCompetitionReq::Swap(GetGuildBossCompetitionReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GetGuildBossCompetitionReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGuildBossCompetitionReq_descriptor_;
  metadata.reflection = GetGuildBossCompetitionReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGuildBossCompetitionReply::kInfoFieldNumber;
#endif  // !_MSC_VER

GetGuildBossCompetitionReply::GetGuildBossCompetitionReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGuildBossCompetitionReply::InitAsDefaultInstance() {
  info_ = const_cast< ::Packet::GuildBossCompetitionDbInfo*>(&::Packet::GuildBossCompetitionDbInfo::default_instance());
}

GetGuildBossCompetitionReply::GetGuildBossCompetitionReply(const GetGuildBossCompetitionReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGuildBossCompetitionReply::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGuildBossCompetitionReply::~GetGuildBossCompetitionReply() {
  SharedDtor();
}

void GetGuildBossCompetitionReply::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void GetGuildBossCompetitionReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGuildBossCompetitionReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGuildBossCompetitionReply_descriptor_;
}

const GetGuildBossCompetitionReply& GetGuildBossCompetitionReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GetGuildBossCompetitionReply* GetGuildBossCompetitionReply::default_instance_ = NULL;

GetGuildBossCompetitionReply* GetGuildBossCompetitionReply::New() const {
  return new GetGuildBossCompetitionReply;
}

void GetGuildBossCompetitionReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::Packet::GuildBossCompetitionDbInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GetGuildBossCompetitionReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.GuildBossCompetitionDbInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GetGuildBossCompetitionReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.GuildBossCompetitionDbInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGuildBossCompetitionReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.GuildBossCompetitionDbInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGuildBossCompetitionReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.GuildBossCompetitionDbInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGuildBossCompetitionReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGuildBossCompetitionReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGuildBossCompetitionReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GetGuildBossCompetitionReply::MergeFrom(const GetGuildBossCompetitionReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::Packet::GuildBossCompetitionDbInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GetGuildBossCompetitionReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GetGuildBossCompetitionReply::CopyFrom(const GetGuildBossCompetitionReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GetGuildBossCompetitionReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void GetGuildBossCompetitionReply::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  if (has_info()) {
    this->mutable_info()->SetInitialized();
  }
  return;
}

void GetGuildBossCompetitionReply::Swap(GetGuildBossCompetitionReply* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GetGuildBossCompetitionReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGuildBossCompetitionReply_descriptor_;
  metadata.reflection = GetGuildBossCompetitionReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildUserDamage::kGuidFieldNumber;
const int GuildUserDamage::kPlayeridFieldNumber;
const int GuildUserDamage::kGuildidFieldNumber;
const int GuildUserDamage::kParamidFieldNumber;
const int GuildUserDamage::kPlayernameFieldNumber;
const int GuildUserDamage::kGuildnameFieldNumber;
const int GuildUserDamage::kPlayerhairFieldNumber;
const int GuildUserDamage::kDamagevalueFieldNumber;
const int GuildUserDamage::kActorConfigIdFieldNumber;
#endif  // !_MSC_VER

GuildUserDamage::GuildUserDamage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildUserDamage::InitAsDefaultInstance() {
}

GuildUserDamage::GuildUserDamage(const GuildUserDamage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildUserDamage::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  playerid__ = GOOGLE_ULONGLONG(0);
  guildid__ = GOOGLE_ULONGLONG(0);
  paramid__ = 0;
  playername__ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildname__ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerhair__ = 0;
  damagevalue__ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildUserDamage::~GuildUserDamage() {
  SharedDtor();
}

void GuildUserDamage::SharedDtor() {
  if (playername__ != &::google::protobuf::internal::kEmptyString) {
    delete playername__;
  }
  if (guildname__ != &::google::protobuf::internal::kEmptyString) {
    delete guildname__;
  }
  if (this != default_instance_) {
  }
}

void GuildUserDamage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildUserDamage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildUserDamage_descriptor_;
}

const GuildUserDamage& GuildUserDamage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildUserDamage* GuildUserDamage::default_instance_ = NULL;

GuildUserDamage* GuildUserDamage::New() const {
  return new GuildUserDamage;
}

void GuildUserDamage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    playerid__ = GOOGLE_ULONGLONG(0);
    guildid__ = GOOGLE_ULONGLONG(0);
    paramid__ = 0;
    if (has_playername_()) {
      if (playername__ != &::google::protobuf::internal::kEmptyString) {
        playername__->clear();
      }
    }
    if (has_guildname_()) {
      if (guildname__ != &::google::protobuf::internal::kEmptyString) {
        guildname__->clear();
      }
    }
    playerhair__ = 0;
    damagevalue__ = 0;
  }
  actor_config_id__.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildUserDamage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_playerid_;
        break;
      }

      // required fixed64 playerid_ = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_playerid_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &playerid__)));
          set_has_playerid_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_guildid_;
        break;
      }

      // required fixed64 guildid_ = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_guildid_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guildid__)));
          set_has_guildid_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_paramid_;
        break;
      }

      // required int32 paramid_ = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paramid_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paramid__)));
          set_has_paramid_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_playername_;
        break;
      }

      // required string playername_ = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playername_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername_().data(), this->playername_().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_guildname_;
        break;
      }

      // required string guildname_ = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildname_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname_().data(), this->guildname_().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_playerhair_;
        break;
      }

      // required int32 playerhair_ = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerhair_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerhair__)));
          set_has_playerhair_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_damagevalue_;
        break;
      }

      // required int32 damagevalue_ = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damagevalue_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damagevalue__)));
          set_has_damagevalue_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_actor_config_id_;
        break;
      }

      // repeated int32 actor_config_id_ = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actor_config_id_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_actor_config_id_())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_actor_config_id_())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_actor_config_id_;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildUserDamage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required fixed64 playerid_ = 2;
  if (has_playerid_()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->playerid_(), output);
  }

  // required fixed64 guildid_ = 3;
  if (has_guildid_()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->guildid_(), output);
  }

  // required int32 paramid_ = 4;
  if (has_paramid_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->paramid_(), output);
  }

  // required string playername_ = 5;
  if (has_playername_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername_().data(), this->playername_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->playername_(), output);
  }

  // required string guildname_ = 6;
  if (has_guildname_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname_().data(), this->guildname_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->guildname_(), output);
  }

  // required int32 playerhair_ = 7;
  if (has_playerhair_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->playerhair_(), output);
  }

  // required int32 damagevalue_ = 8;
  if (has_damagevalue_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->damagevalue_(), output);
  }

  // repeated int32 actor_config_id_ = 9;
  for (int i = 0; i < this->actor_config_id__size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->actor_config_id_(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildUserDamage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required fixed64 playerid_ = 2;
  if (has_playerid_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->playerid_(), target);
  }

  // required fixed64 guildid_ = 3;
  if (has_guildid_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->guildid_(), target);
  }

  // required int32 paramid_ = 4;
  if (has_paramid_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->paramid_(), target);
  }

  // required string playername_ = 5;
  if (has_playername_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername_().data(), this->playername_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->playername_(), target);
  }

  // required string guildname_ = 6;
  if (has_guildname_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname_().data(), this->guildname_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->guildname_(), target);
  }

  // required int32 playerhair_ = 7;
  if (has_playerhair_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->playerhair_(), target);
  }

  // required int32 damagevalue_ = 8;
  if (has_damagevalue_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->damagevalue_(), target);
  }

  // repeated int32 actor_config_id_ = 9;
  for (int i = 0; i < this->actor_config_id__size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->actor_config_id_(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildUserDamage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 playerid_ = 2;
    if (has_playerid_()) {
      total_size += 1 + 8;
    }

    // required fixed64 guildid_ = 3;
    if (has_guildid_()) {
      total_size += 1 + 8;
    }

    // required int32 paramid_ = 4;
    if (has_paramid_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paramid_());
    }

    // required string playername_ = 5;
    if (has_playername_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername_());
    }

    // required string guildname_ = 6;
    if (has_guildname_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname_());
    }

    // required int32 playerhair_ = 7;
    if (has_playerhair_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerhair_());
    }

    // required int32 damagevalue_ = 8;
    if (has_damagevalue_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damagevalue_());
    }

  }
  // repeated int32 actor_config_id_ = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->actor_config_id__size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->actor_config_id_(i));
    }
    total_size += 1 * this->actor_config_id__size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildUserDamage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildUserDamage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildUserDamage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildUserDamage::MergeFrom(const GuildUserDamage& from) {
  GOOGLE_CHECK_NE(&from, this);
  actor_config_id__.MergeFrom(from.actor_config_id__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_playerid_()) {
      set_playerid_(from.playerid_());
    }
    if (from.has_guildid_()) {
      set_guildid_(from.guildid_());
    }
    if (from.has_paramid_()) {
      set_paramid_(from.paramid_());
    }
    if (from.has_playername_()) {
      set_playername_(from.playername_());
    }
    if (from.has_guildname_()) {
      set_guildname_(from.guildname_());
    }
    if (from.has_playerhair_()) {
      set_playerhair_(from.playerhair_());
    }
    if (from.has_damagevalue_()) {
      set_damagevalue_(from.damagevalue_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildUserDamage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildUserDamage::CopyFrom(const GuildUserDamage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildUserDamage::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void GuildUserDamage::SetInitialized() {
  _has_bits_[0] |= 0x000000ff;

  return;
}

void GuildUserDamage::Swap(GuildUserDamage* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(playerid__, other->playerid__);
    std::swap(guildid__, other->guildid__);
    std::swap(paramid__, other->paramid__);
    std::swap(playername__, other->playername__);
    std::swap(guildname__, other->guildname__);
    std::swap(playerhair__, other->playerhair__);
    std::swap(damagevalue__, other->damagevalue__);
    actor_config_id__.Swap(&other->actor_config_id__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildUserDamage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildUserDamage_descriptor_;
  metadata.reflection = GuildUserDamage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildAllDamage::kGuildidFieldNumber;
const int GuildAllDamage::kGuildnameFieldNumber;
const int GuildAllDamage::kDamagevalueFieldNumber;
#endif  // !_MSC_VER

GuildAllDamage::GuildAllDamage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildAllDamage::InitAsDefaultInstance() {
}

GuildAllDamage::GuildAllDamage(const GuildAllDamage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildAllDamage::SharedCtor() {
  _cached_size_ = 0;
  guildid__ = GOOGLE_ULONGLONG(0);
  guildname__ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  damagevalue__ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildAllDamage::~GuildAllDamage() {
  SharedDtor();
}

void GuildAllDamage::SharedDtor() {
  if (guildname__ != &::google::protobuf::internal::kEmptyString) {
    delete guildname__;
  }
  if (this != default_instance_) {
  }
}

void GuildAllDamage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildAllDamage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildAllDamage_descriptor_;
}

const GuildAllDamage& GuildAllDamage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildAllDamage* GuildAllDamage::default_instance_ = NULL;

GuildAllDamage* GuildAllDamage::New() const {
  return new GuildAllDamage;
}

void GuildAllDamage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid__ = GOOGLE_ULONGLONG(0);
    if (has_guildname_()) {
      if (guildname__ != &::google::protobuf::internal::kEmptyString) {
        guildname__->clear();
      }
    }
    damagevalue__ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildAllDamage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guildid_ = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guildid__)));
          set_has_guildid_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guildname_;
        break;
      }

      // required string guildname_ = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildname_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname_().data(), this->guildname_().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_damagevalue_;
        break;
      }

      // required int32 damagevalue_ = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damagevalue_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damagevalue__)));
          set_has_damagevalue_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildAllDamage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guildid_ = 1;
  if (has_guildid_()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guildid_(), output);
  }

  // required string guildname_ = 2;
  if (has_guildname_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname_().data(), this->guildname_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->guildname_(), output);
  }

  // required int32 damagevalue_ = 3;
  if (has_damagevalue_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->damagevalue_(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildAllDamage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guildid_ = 1;
  if (has_guildid_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guildid_(), target);
  }

  // required string guildname_ = 2;
  if (has_guildname_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname_().data(), this->guildname_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guildname_(), target);
  }

  // required int32 damagevalue_ = 3;
  if (has_damagevalue_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->damagevalue_(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildAllDamage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guildid_ = 1;
    if (has_guildid_()) {
      total_size += 1 + 8;
    }

    // required string guildname_ = 2;
    if (has_guildname_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname_());
    }

    // required int32 damagevalue_ = 3;
    if (has_damagevalue_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damagevalue_());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildAllDamage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildAllDamage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildAllDamage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildAllDamage::MergeFrom(const GuildAllDamage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid_()) {
      set_guildid_(from.guildid_());
    }
    if (from.has_guildname_()) {
      set_guildname_(from.guildname_());
    }
    if (from.has_damagevalue_()) {
      set_damagevalue_(from.damagevalue_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildAllDamage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildAllDamage::CopyFrom(const GuildAllDamage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildAllDamage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GuildAllDamage::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  return;
}

void GuildAllDamage::Swap(GuildAllDamage* other) {
  if (other != this) {
    std::swap(guildid__, other->guildid__);
    std::swap(guildname__, other->guildname__);
    std::swap(damagevalue__, other->damagevalue__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildAllDamage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildAllDamage_descriptor_;
  metadata.reflection = GuildAllDamage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildBossUserDamage::kPlayeridFieldNumber;
const int GuildBossUserDamage::kPlayernameFieldNumber;
const int GuildBossUserDamage::kPlayerhairFieldNumber;
const int GuildBossUserDamage::kDamagevalueFieldNumber;
#endif  // !_MSC_VER

GuildBossUserDamage::GuildBossUserDamage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildBossUserDamage::InitAsDefaultInstance() {
}

GuildBossUserDamage::GuildBossUserDamage(const GuildBossUserDamage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildBossUserDamage::SharedCtor() {
  _cached_size_ = 0;
  playerid__ = GOOGLE_ULONGLONG(0);
  playername__ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerhair__ = 0;
  damagevalue__ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildBossUserDamage::~GuildBossUserDamage() {
  SharedDtor();
}

void GuildBossUserDamage::SharedDtor() {
  if (playername__ != &::google::protobuf::internal::kEmptyString) {
    delete playername__;
  }
  if (this != default_instance_) {
  }
}

void GuildBossUserDamage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildBossUserDamage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBossUserDamage_descriptor_;
}

const GuildBossUserDamage& GuildBossUserDamage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildBossUserDamage* GuildBossUserDamage::default_instance_ = NULL;

GuildBossUserDamage* GuildBossUserDamage::New() const {
  return new GuildBossUserDamage;
}

void GuildBossUserDamage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid__ = GOOGLE_ULONGLONG(0);
    if (has_playername_()) {
      if (playername__ != &::google::protobuf::internal::kEmptyString) {
        playername__->clear();
      }
    }
    playerhair__ = 0;
    damagevalue__ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildBossUserDamage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 playerid_ = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &playerid__)));
          set_has_playerid_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playername_;
        break;
      }

      // required string playername_ = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playername_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername_().data(), this->playername_().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerhair_;
        break;
      }

      // required int32 playerhair_ = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerhair_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerhair__)));
          set_has_playerhair_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_damagevalue_;
        break;
      }

      // required int32 damagevalue_ = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damagevalue_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damagevalue__)));
          set_has_damagevalue_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildBossUserDamage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 playerid_ = 1;
  if (has_playerid_()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->playerid_(), output);
  }

  // required string playername_ = 2;
  if (has_playername_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername_().data(), this->playername_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->playername_(), output);
  }

  // required int32 playerhair_ = 3;
  if (has_playerhair_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playerhair_(), output);
  }

  // required int32 damagevalue_ = 4;
  if (has_damagevalue_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->damagevalue_(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildBossUserDamage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 playerid_ = 1;
  if (has_playerid_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->playerid_(), target);
  }

  // required string playername_ = 2;
  if (has_playername_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername_().data(), this->playername_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playername_(), target);
  }

  // required int32 playerhair_ = 3;
  if (has_playerhair_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playerhair_(), target);
  }

  // required int32 damagevalue_ = 4;
  if (has_damagevalue_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->damagevalue_(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildBossUserDamage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 playerid_ = 1;
    if (has_playerid_()) {
      total_size += 1 + 8;
    }

    // required string playername_ = 2;
    if (has_playername_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername_());
    }

    // required int32 playerhair_ = 3;
    if (has_playerhair_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerhair_());
    }

    // required int32 damagevalue_ = 4;
    if (has_damagevalue_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damagevalue_());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildBossUserDamage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildBossUserDamage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildBossUserDamage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildBossUserDamage::MergeFrom(const GuildBossUserDamage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid_()) {
      set_playerid_(from.playerid_());
    }
    if (from.has_playername_()) {
      set_playername_(from.playername_());
    }
    if (from.has_playerhair_()) {
      set_playerhair_(from.playerhair_());
    }
    if (from.has_damagevalue_()) {
      set_damagevalue_(from.damagevalue_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildBossUserDamage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildBossUserDamage::CopyFrom(const GuildBossUserDamage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildBossUserDamage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GuildBossUserDamage::SetInitialized() {
  _has_bits_[0] |= 0x0000000f;

  return;
}

void GuildBossUserDamage::Swap(GuildBossUserDamage* other) {
  if (other != this) {
    std::swap(playerid__, other->playerid__);
    std::swap(playername__, other->playername__);
    std::swap(playerhair__, other->playerhair__);
    std::swap(damagevalue__, other->damagevalue__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildBossUserDamage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildBossUserDamage_descriptor_;
  metadata.reflection = GuildBossUserDamage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetGuildUserDamageReq::GetGuildUserDamageReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGuildUserDamageReq::InitAsDefaultInstance() {
}

GetGuildUserDamageReq::GetGuildUserDamageReq(const GetGuildUserDamageReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGuildUserDamageReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGuildUserDamageReq::~GetGuildUserDamageReq() {
  SharedDtor();
}

void GetGuildUserDamageReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGuildUserDamageReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGuildUserDamageReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGuildUserDamageReq_descriptor_;
}

const GetGuildUserDamageReq& GetGuildUserDamageReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GetGuildUserDamageReq* GetGuildUserDamageReq::default_instance_ = NULL;

GetGuildUserDamageReq* GetGuildUserDamageReq::New() const {
  return new GetGuildUserDamageReq;
}

void GetGuildUserDamageReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GetGuildUserDamageReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void GetGuildUserDamageReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGuildUserDamageReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGuildUserDamageReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGuildUserDamageReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGuildUserDamageReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGuildUserDamageReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GetGuildUserDamageReq::MergeFrom(const GetGuildUserDamageReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GetGuildUserDamageReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GetGuildUserDamageReq::CopyFrom(const GetGuildUserDamageReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GetGuildUserDamageReq::IsInitialized() const {

  return true;
}

void GetGuildUserDamageReq::SetInitialized() {

  return;
}

void GetGuildUserDamageReq::Swap(GetGuildUserDamageReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GetGuildUserDamageReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGuildUserDamageReq_descriptor_;
  metadata.reflection = GetGuildUserDamageReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGuildUserDamageReply::kUsersFieldNumber;
#endif  // !_MSC_VER

GetGuildUserDamageReply::GetGuildUserDamageReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGuildUserDamageReply::InitAsDefaultInstance() {
}

GetGuildUserDamageReply::GetGuildUserDamageReply(const GetGuildUserDamageReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGuildUserDamageReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGuildUserDamageReply::~GetGuildUserDamageReply() {
  SharedDtor();
}

void GetGuildUserDamageReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGuildUserDamageReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGuildUserDamageReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGuildUserDamageReply_descriptor_;
}

const GetGuildUserDamageReply& GetGuildUserDamageReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GetGuildUserDamageReply* GetGuildUserDamageReply::default_instance_ = NULL;

GetGuildUserDamageReply* GetGuildUserDamageReply::New() const {
  return new GetGuildUserDamageReply;
}

void GetGuildUserDamageReply::Clear() {
  users__.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GetGuildUserDamageReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.GuildUserDamage users_ = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_users_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users_()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_users_;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GetGuildUserDamageReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.GuildUserDamage users_ = 1;
  for (int i = 0; i < this->users__size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->users_(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGuildUserDamageReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.GuildUserDamage users_ = 1;
  for (int i = 0; i < this->users__size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->users_(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGuildUserDamageReply::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.GuildUserDamage users_ = 1;
  total_size += 1 * this->users__size();
  for (int i = 0; i < this->users__size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users_(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGuildUserDamageReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGuildUserDamageReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGuildUserDamageReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GetGuildUserDamageReply::MergeFrom(const GetGuildUserDamageReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  users__.MergeFrom(from.users__);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GetGuildUserDamageReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GetGuildUserDamageReply::CopyFrom(const GetGuildUserDamageReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GetGuildUserDamageReply::IsInitialized() const {

  for (int i = 0; i < users__size(); i++) {
    if (!this->users_(i).IsInitialized()) return false;
  }
  return true;
}

void GetGuildUserDamageReply::SetInitialized() {

  for (int i = 0; i < users__size(); i++) {
    this->mutable_users_(i)->SetInitialized();
  }
  return;
}

void GetGuildUserDamageReply::Swap(GetGuildUserDamageReply* other) {
  if (other != this) {
    users__.Swap(&other->users__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GetGuildUserDamageReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGuildUserDamageReply_descriptor_;
  metadata.reflection = GetGuildUserDamageReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetServerUserDamageReq::GetServerUserDamageReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetServerUserDamageReq::InitAsDefaultInstance() {
}

GetServerUserDamageReq::GetServerUserDamageReq(const GetServerUserDamageReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetServerUserDamageReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetServerUserDamageReq::~GetServerUserDamageReq() {
  SharedDtor();
}

void GetServerUserDamageReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetServerUserDamageReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetServerUserDamageReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetServerUserDamageReq_descriptor_;
}

const GetServerUserDamageReq& GetServerUserDamageReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GetServerUserDamageReq* GetServerUserDamageReq::default_instance_ = NULL;

GetServerUserDamageReq* GetServerUserDamageReq::New() const {
  return new GetServerUserDamageReq;
}

void GetServerUserDamageReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GetServerUserDamageReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void GetServerUserDamageReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetServerUserDamageReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetServerUserDamageReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServerUserDamageReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetServerUserDamageReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetServerUserDamageReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GetServerUserDamageReq::MergeFrom(const GetServerUserDamageReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GetServerUserDamageReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GetServerUserDamageReq::CopyFrom(const GetServerUserDamageReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GetServerUserDamageReq::IsInitialized() const {

  return true;
}

void GetServerUserDamageReq::SetInitialized() {

  return;
}

void GetServerUserDamageReq::Swap(GetServerUserDamageReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GetServerUserDamageReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetServerUserDamageReq_descriptor_;
  metadata.reflection = GetServerUserDamageReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGuildAllDamageReply::kGuildsFieldNumber;
#endif  // !_MSC_VER

GetGuildAllDamageReply::GetGuildAllDamageReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGuildAllDamageReply::InitAsDefaultInstance() {
}

GetGuildAllDamageReply::GetGuildAllDamageReply(const GetGuildAllDamageReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGuildAllDamageReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGuildAllDamageReply::~GetGuildAllDamageReply() {
  SharedDtor();
}

void GetGuildAllDamageReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGuildAllDamageReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGuildAllDamageReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGuildAllDamageReply_descriptor_;
}

const GetGuildAllDamageReply& GetGuildAllDamageReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GetGuildAllDamageReply* GetGuildAllDamageReply::default_instance_ = NULL;

GetGuildAllDamageReply* GetGuildAllDamageReply::New() const {
  return new GetGuildAllDamageReply;
}

void GetGuildAllDamageReply::Clear() {
  guilds__.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GetGuildAllDamageReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.GuildAllDamage guilds_ = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guilds_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guilds_()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_guilds_;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GetGuildAllDamageReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.GuildAllDamage guilds_ = 1;
  for (int i = 0; i < this->guilds__size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guilds_(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGuildAllDamageReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.GuildAllDamage guilds_ = 1;
  for (int i = 0; i < this->guilds__size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guilds_(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGuildAllDamageReply::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.GuildAllDamage guilds_ = 1;
  total_size += 1 * this->guilds__size();
  for (int i = 0; i < this->guilds__size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guilds_(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGuildAllDamageReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGuildAllDamageReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGuildAllDamageReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GetGuildAllDamageReply::MergeFrom(const GetGuildAllDamageReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  guilds__.MergeFrom(from.guilds__);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GetGuildAllDamageReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GetGuildAllDamageReply::CopyFrom(const GetGuildAllDamageReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GetGuildAllDamageReply::IsInitialized() const {

  for (int i = 0; i < guilds__size(); i++) {
    if (!this->guilds_(i).IsInitialized()) return false;
  }
  return true;
}

void GetGuildAllDamageReply::SetInitialized() {

  for (int i = 0; i < guilds__size(); i++) {
    this->mutable_guilds_(i)->SetInitialized();
  }
  return;
}

void GetGuildAllDamageReply::Swap(GetGuildAllDamageReply* other) {
  if (other != this) {
    guilds__.Swap(&other->guilds__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GetGuildAllDamageReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGuildAllDamageReply_descriptor_;
  metadata.reflection = GetGuildAllDamageReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGuildBossUserDamageReply::kUsersFieldNumber;
#endif  // !_MSC_VER

GetGuildBossUserDamageReply::GetGuildBossUserDamageReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGuildBossUserDamageReply::InitAsDefaultInstance() {
}

GetGuildBossUserDamageReply::GetGuildBossUserDamageReply(const GetGuildBossUserDamageReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGuildBossUserDamageReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGuildBossUserDamageReply::~GetGuildBossUserDamageReply() {
  SharedDtor();
}

void GetGuildBossUserDamageReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGuildBossUserDamageReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGuildBossUserDamageReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGuildBossUserDamageReply_descriptor_;
}

const GetGuildBossUserDamageReply& GetGuildBossUserDamageReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GetGuildBossUserDamageReply* GetGuildBossUserDamageReply::default_instance_ = NULL;

GetGuildBossUserDamageReply* GetGuildBossUserDamageReply::New() const {
  return new GetGuildBossUserDamageReply;
}

void GetGuildBossUserDamageReply::Clear() {
  users__.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GetGuildBossUserDamageReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.GuildBossUserDamage users_ = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_users_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users_()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_users_;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GetGuildBossUserDamageReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.GuildBossUserDamage users_ = 1;
  for (int i = 0; i < this->users__size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->users_(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGuildBossUserDamageReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.GuildBossUserDamage users_ = 1;
  for (int i = 0; i < this->users__size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->users_(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGuildBossUserDamageReply::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.GuildBossUserDamage users_ = 1;
  total_size += 1 * this->users__size();
  for (int i = 0; i < this->users__size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users_(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGuildBossUserDamageReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGuildBossUserDamageReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGuildBossUserDamageReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GetGuildBossUserDamageReply::MergeFrom(const GetGuildBossUserDamageReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  users__.MergeFrom(from.users__);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GetGuildBossUserDamageReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GetGuildBossUserDamageReply::CopyFrom(const GetGuildBossUserDamageReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GetGuildBossUserDamageReply::IsInitialized() const {

  for (int i = 0; i < users__size(); i++) {
    if (!this->users_(i).IsInitialized()) return false;
  }
  return true;
}

void GetGuildBossUserDamageReply::SetInitialized() {

  for (int i = 0; i < users__size(); i++) {
    this->mutable_users_(i)->SetInitialized();
  }
  return;
}

void GetGuildBossUserDamageReply::Swap(GetGuildBossUserDamageReply* other) {
  if (other != this) {
    users__.Swap(&other->users__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GetGuildBossUserDamageReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGuildBossUserDamageReply_descriptor_;
  metadata.reflection = GetGuildBossUserDamageReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateGuildBossUserDamage::kOptFieldNumber;
const int UpdateGuildBossUserDamage::kDamagevalueFieldNumber;
#endif  // !_MSC_VER

UpdateGuildBossUserDamage::UpdateGuildBossUserDamage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateGuildBossUserDamage::InitAsDefaultInstance() {
}

UpdateGuildBossUserDamage::UpdateGuildBossUserDamage(const UpdateGuildBossUserDamage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateGuildBossUserDamage::SharedCtor() {
  _cached_size_ = 0;
  opt_ = 0;
  damagevalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateGuildBossUserDamage::~UpdateGuildBossUserDamage() {
  SharedDtor();
}

void UpdateGuildBossUserDamage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateGuildBossUserDamage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateGuildBossUserDamage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateGuildBossUserDamage_descriptor_;
}

const UpdateGuildBossUserDamage& UpdateGuildBossUserDamage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

UpdateGuildBossUserDamage* UpdateGuildBossUserDamage::default_instance_ = NULL;

UpdateGuildBossUserDamage* UpdateGuildBossUserDamage::New() const {
  return new UpdateGuildBossUserDamage;
}

void UpdateGuildBossUserDamage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opt_ = 0;
    damagevalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool UpdateGuildBossUserDamage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_damagevalue;
        break;
      }

      // required int32 damagevalue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damagevalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damagevalue_)));
          set_has_damagevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void UpdateGuildBossUserDamage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 opt = 1;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opt(), output);
  }

  // required int32 damagevalue = 2;
  if (has_damagevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->damagevalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateGuildBossUserDamage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 opt = 1;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opt(), target);
  }

  // required int32 damagevalue = 2;
  if (has_damagevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->damagevalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateGuildBossUserDamage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 opt = 1;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt());
    }

    // required int32 damagevalue = 2;
    if (has_damagevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damagevalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateGuildBossUserDamage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateGuildBossUserDamage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateGuildBossUserDamage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void UpdateGuildBossUserDamage::MergeFrom(const UpdateGuildBossUserDamage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opt()) {
      set_opt(from.opt());
    }
    if (from.has_damagevalue()) {
      set_damagevalue(from.damagevalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void UpdateGuildBossUserDamage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void UpdateGuildBossUserDamage::CopyFrom(const UpdateGuildBossUserDamage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool UpdateGuildBossUserDamage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UpdateGuildBossUserDamage::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void UpdateGuildBossUserDamage::Swap(UpdateGuildBossUserDamage* other) {
  if (other != this) {
    std::swap(opt_, other->opt_);
    std::swap(damagevalue_, other->damagevalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata UpdateGuildBossUserDamage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateGuildBossUserDamage_descriptor_;
  metadata.reflection = UpdateGuildBossUserDamage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildWetCopyInfo::kGuildidFieldNumber;
const int GuildWetCopyInfo::kCopyidFieldNumber;
const int GuildWetCopyInfo::kStageidFieldNumber;
const int GuildWetCopyInfo::kStatusFieldNumber;
const int GuildWetCopyInfo::kBosshpFieldNumber;
const int GuildWetCopyInfo::kMaxbosshpFieldNumber;
const int GuildWetCopyInfo::kFighteridFieldNumber;
const int GuildWetCopyInfo::kFightnameFieldNumber;
const int GuildWetCopyInfo::kOpentimeFieldNumber;
#endif  // !_MSC_VER

GuildWetCopyInfo::GuildWetCopyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildWetCopyInfo::InitAsDefaultInstance() {
}

GuildWetCopyInfo::GuildWetCopyInfo(const GuildWetCopyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildWetCopyInfo::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  copyid_ = 0;
  stageid_ = 0;
  status_ = false;
  maxbosshp_ = GOOGLE_ULONGLONG(0);
  fighterid_ = GOOGLE_ULONGLONG(0);
  fightname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  opentime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildWetCopyInfo::~GuildWetCopyInfo() {
  SharedDtor();
}

void GuildWetCopyInfo::SharedDtor() {
  if (fightname_ != &::google::protobuf::internal::kEmptyString) {
    delete fightname_;
  }
  if (this != default_instance_) {
  }
}

void GuildWetCopyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildWetCopyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildWetCopyInfo_descriptor_;
}

const GuildWetCopyInfo& GuildWetCopyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildWetCopyInfo* GuildWetCopyInfo::default_instance_ = NULL;

GuildWetCopyInfo* GuildWetCopyInfo::New() const {
  return new GuildWetCopyInfo;
}

void GuildWetCopyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = GOOGLE_ULONGLONG(0);
    copyid_ = 0;
    stageid_ = 0;
    status_ = false;
    maxbosshp_ = GOOGLE_ULONGLONG(0);
    fighterid_ = GOOGLE_ULONGLONG(0);
    if (has_fightname()) {
      if (fightname_ != &::google::protobuf::internal::kEmptyString) {
        fightname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    opentime_ = 0u;
  }
  bosshp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildWetCopyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guildid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_copyid;
        break;
      }

      // required int32 copyid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copyid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &copyid_)));
          set_has_copyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stageid;
        break;
      }

      // required int32 stageid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stageid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stageid_)));
          set_has_stageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // required bool status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_bosshp;
        break;
      }

      // repeated fixed64 bosshp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bosshp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 41, input, this->mutable_bosshp())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_bosshp())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_bosshp;
        if (input->ExpectTag(49)) goto parse_maxbosshp;
        break;
      }

      // required fixed64 maxbosshp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_maxbosshp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &maxbosshp_)));
          set_has_maxbosshp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_fighterid;
        break;
      }

      // required fixed64 fighterid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_fighterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &fighterid_)));
          set_has_fighterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_fightname;
        break;
      }

      // required string fightname = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fightname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fightname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fightname().data(), this->fightname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_opentime;
        break;
      }

      // required uint32 opentime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opentime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opentime_)));
          set_has_opentime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildWetCopyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guildid = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guildid(), output);
  }

  // required int32 copyid = 2;
  if (has_copyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->copyid(), output);
  }

  // required int32 stageid = 3;
  if (has_stageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stageid(), output);
  }

  // required bool status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->status(), output);
  }

  // repeated fixed64 bosshp = 5;
  for (int i = 0; i < this->bosshp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      5, this->bosshp(i), output);
  }

  // required fixed64 maxbosshp = 6;
  if (has_maxbosshp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->maxbosshp(), output);
  }

  // required fixed64 fighterid = 7;
  if (has_fighterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->fighterid(), output);
  }

  // required string fightname = 8;
  if (has_fightname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fightname().data(), this->fightname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->fightname(), output);
  }

  // required uint32 opentime = 9;
  if (has_opentime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->opentime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildWetCopyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guildid = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guildid(), target);
  }

  // required int32 copyid = 2;
  if (has_copyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->copyid(), target);
  }

  // required int32 stageid = 3;
  if (has_stageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->stageid(), target);
  }

  // required bool status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->status(), target);
  }

  // repeated fixed64 bosshp = 5;
  for (int i = 0; i < this->bosshp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(5, this->bosshp(i), target);
  }

  // required fixed64 maxbosshp = 6;
  if (has_maxbosshp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->maxbosshp(), target);
  }

  // required fixed64 fighterid = 7;
  if (has_fighterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->fighterid(), target);
  }

  // required string fightname = 8;
  if (has_fightname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fightname().data(), this->fightname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->fightname(), target);
  }

  // required uint32 opentime = 9;
  if (has_opentime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->opentime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildWetCopyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guildid = 1;
    if (has_guildid()) {
      total_size += 1 + 8;
    }

    // required int32 copyid = 2;
    if (has_copyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->copyid());
    }

    // required int32 stageid = 3;
    if (has_stageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stageid());
    }

    // required bool status = 4;
    if (has_status()) {
      total_size += 1 + 1;
    }

    // required fixed64 maxbosshp = 6;
    if (has_maxbosshp()) {
      total_size += 1 + 8;
    }

    // required fixed64 fighterid = 7;
    if (has_fighterid()) {
      total_size += 1 + 8;
    }

    // required string fightname = 8;
    if (has_fightname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fightname());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 opentime = 9;
    if (has_opentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opentime());
    }

  }
  // repeated fixed64 bosshp = 5;
  {
    int data_size = 0;
    data_size = 8 * this->bosshp_size();
    total_size += 1 * this->bosshp_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildWetCopyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildWetCopyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildWetCopyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildWetCopyInfo::MergeFrom(const GuildWetCopyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  bosshp_.MergeFrom(from.bosshp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_copyid()) {
      set_copyid(from.copyid());
    }
    if (from.has_stageid()) {
      set_stageid(from.stageid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_maxbosshp()) {
      set_maxbosshp(from.maxbosshp());
    }
    if (from.has_fighterid()) {
      set_fighterid(from.fighterid());
    }
    if (from.has_fightname()) {
      set_fightname(from.fightname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_opentime()) {
      set_opentime(from.opentime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildWetCopyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildWetCopyInfo::CopyFrom(const GuildWetCopyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildWetCopyInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ef) != 0x000001ef) return false;

  return true;
}

void GuildWetCopyInfo::SetInitialized() {
  _has_bits_[0] |= 0x000001ef;

  return;
}

void GuildWetCopyInfo::Swap(GuildWetCopyInfo* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(copyid_, other->copyid_);
    std::swap(stageid_, other->stageid_);
    std::swap(status_, other->status_);
    bosshp_.Swap(&other->bosshp_);
    std::swap(maxbosshp_, other->maxbosshp_);
    std::swap(fighterid_, other->fighterid_);
    std::swap(fightname_, other->fightname_);
    std::swap(opentime_, other->opentime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildWetCopyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildWetCopyInfo_descriptor_;
  metadata.reflection = GuildWetCopyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetGuildWetCopyInfosReq::GetGuildWetCopyInfosReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGuildWetCopyInfosReq::InitAsDefaultInstance() {
}

GetGuildWetCopyInfosReq::GetGuildWetCopyInfosReq(const GetGuildWetCopyInfosReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGuildWetCopyInfosReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGuildWetCopyInfosReq::~GetGuildWetCopyInfosReq() {
  SharedDtor();
}

void GetGuildWetCopyInfosReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGuildWetCopyInfosReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGuildWetCopyInfosReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGuildWetCopyInfosReq_descriptor_;
}

const GetGuildWetCopyInfosReq& GetGuildWetCopyInfosReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GetGuildWetCopyInfosReq* GetGuildWetCopyInfosReq::default_instance_ = NULL;

GetGuildWetCopyInfosReq* GetGuildWetCopyInfosReq::New() const {
  return new GetGuildWetCopyInfosReq;
}

void GetGuildWetCopyInfosReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GetGuildWetCopyInfosReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void GetGuildWetCopyInfosReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGuildWetCopyInfosReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGuildWetCopyInfosReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGuildWetCopyInfosReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGuildWetCopyInfosReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGuildWetCopyInfosReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GetGuildWetCopyInfosReq::MergeFrom(const GetGuildWetCopyInfosReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GetGuildWetCopyInfosReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GetGuildWetCopyInfosReq::CopyFrom(const GetGuildWetCopyInfosReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GetGuildWetCopyInfosReq::IsInitialized() const {

  return true;
}

void GetGuildWetCopyInfosReq::SetInitialized() {

  return;
}

void GetGuildWetCopyInfosReq::Swap(GetGuildWetCopyInfosReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GetGuildWetCopyInfosReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGuildWetCopyInfosReq_descriptor_;
  metadata.reflection = GetGuildWetCopyInfosReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetGuildWetCopyInfosReply::kWetcopysFieldNumber;
const int GetGuildWetCopyInfosReply::kTimesFieldNumber;
#endif  // !_MSC_VER

GetGuildWetCopyInfosReply::GetGuildWetCopyInfosReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetGuildWetCopyInfosReply::InitAsDefaultInstance() {
}

GetGuildWetCopyInfosReply::GetGuildWetCopyInfosReply(const GetGuildWetCopyInfosReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetGuildWetCopyInfosReply::SharedCtor() {
  _cached_size_ = 0;
  times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGuildWetCopyInfosReply::~GetGuildWetCopyInfosReply() {
  SharedDtor();
}

void GetGuildWetCopyInfosReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetGuildWetCopyInfosReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGuildWetCopyInfosReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGuildWetCopyInfosReply_descriptor_;
}

const GetGuildWetCopyInfosReply& GetGuildWetCopyInfosReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GetGuildWetCopyInfosReply* GetGuildWetCopyInfosReply::default_instance_ = NULL;

GetGuildWetCopyInfosReply* GetGuildWetCopyInfosReply::New() const {
  return new GetGuildWetCopyInfosReply;
}

void GetGuildWetCopyInfosReply::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    times_ = 0;
  }
  wetcopys__.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GetGuildWetCopyInfosReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.GuildWetCopyInfo wetcopys_ = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wetcopys_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wetcopys_()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_wetcopys_;
        if (input->ExpectTag(16)) goto parse_times;
        break;
      }

      // required int32 times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GetGuildWetCopyInfosReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.GuildWetCopyInfo wetcopys_ = 1;
  for (int i = 0; i < this->wetcopys__size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->wetcopys_(i), output);
  }

  // required int32 times = 2;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetGuildWetCopyInfosReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.GuildWetCopyInfo wetcopys_ = 1;
  for (int i = 0; i < this->wetcopys__size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->wetcopys_(i), target);
  }

  // required int32 times = 2;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetGuildWetCopyInfosReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 times = 2;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

  }
  // repeated .Packet.GuildWetCopyInfo wetcopys_ = 1;
  total_size += 1 * this->wetcopys__size();
  for (int i = 0; i < this->wetcopys__size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wetcopys_(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGuildWetCopyInfosReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetGuildWetCopyInfosReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetGuildWetCopyInfosReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GetGuildWetCopyInfosReply::MergeFrom(const GetGuildWetCopyInfosReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  wetcopys__.MergeFrom(from.wetcopys__);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GetGuildWetCopyInfosReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GetGuildWetCopyInfosReply::CopyFrom(const GetGuildWetCopyInfosReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GetGuildWetCopyInfosReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < wetcopys__size(); i++) {
    if (!this->wetcopys_(i).IsInitialized()) return false;
  }
  return true;
}

void GetGuildWetCopyInfosReply::SetInitialized() {
  _has_bits_[0] |= 0x00000002;

  for (int i = 0; i < wetcopys__size(); i++) {
    this->mutable_wetcopys_(i)->SetInitialized();
  }
  return;
}

void GetGuildWetCopyInfosReply::Swap(GetGuildWetCopyInfosReply* other) {
  if (other != this) {
    wetcopys__.Swap(&other->wetcopys__);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GetGuildWetCopyInfosReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGuildWetCopyInfosReply_descriptor_;
  metadata.reflection = GetGuildWetCopyInfosReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildWetCopyInfoUpdate::kWetcopyFieldNumber;
#endif  // !_MSC_VER

GuildWetCopyInfoUpdate::GuildWetCopyInfoUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildWetCopyInfoUpdate::InitAsDefaultInstance() {
  wetcopy_ = const_cast< ::Packet::GuildWetCopyInfo*>(&::Packet::GuildWetCopyInfo::default_instance());
}

GuildWetCopyInfoUpdate::GuildWetCopyInfoUpdate(const GuildWetCopyInfoUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildWetCopyInfoUpdate::SharedCtor() {
  _cached_size_ = 0;
  wetcopy_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildWetCopyInfoUpdate::~GuildWetCopyInfoUpdate() {
  SharedDtor();
}

void GuildWetCopyInfoUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete wetcopy_;
  }
}

void GuildWetCopyInfoUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildWetCopyInfoUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildWetCopyInfoUpdate_descriptor_;
}

const GuildWetCopyInfoUpdate& GuildWetCopyInfoUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildWetCopyInfoUpdate* GuildWetCopyInfoUpdate::default_instance_ = NULL;

GuildWetCopyInfoUpdate* GuildWetCopyInfoUpdate::New() const {
  return new GuildWetCopyInfoUpdate;
}

void GuildWetCopyInfoUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_wetcopy()) {
      if (wetcopy_ != NULL) wetcopy_->::Packet::GuildWetCopyInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildWetCopyInfoUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.GuildWetCopyInfo wetcopy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wetcopy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildWetCopyInfoUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.GuildWetCopyInfo wetcopy = 1;
  if (has_wetcopy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->wetcopy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildWetCopyInfoUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.GuildWetCopyInfo wetcopy = 1;
  if (has_wetcopy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->wetcopy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildWetCopyInfoUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.GuildWetCopyInfo wetcopy = 1;
    if (has_wetcopy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wetcopy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildWetCopyInfoUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildWetCopyInfoUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildWetCopyInfoUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildWetCopyInfoUpdate::MergeFrom(const GuildWetCopyInfoUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wetcopy()) {
      mutable_wetcopy()->::Packet::GuildWetCopyInfo::MergeFrom(from.wetcopy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildWetCopyInfoUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildWetCopyInfoUpdate::CopyFrom(const GuildWetCopyInfoUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildWetCopyInfoUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_wetcopy()) {
    if (!this->wetcopy().IsInitialized()) return false;
  }
  return true;
}

void GuildWetCopyInfoUpdate::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  if (has_wetcopy()) {
    this->mutable_wetcopy()->SetInitialized();
  }
  return;
}

void GuildWetCopyInfoUpdate::Swap(GuildWetCopyInfoUpdate* other) {
  if (other != this) {
    std::swap(wetcopy_, other->wetcopy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildWetCopyInfoUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildWetCopyInfoUpdate_descriptor_;
  metadata.reflection = GuildWetCopyInfoUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenGuildWetCopy::kCopyidFieldNumber;
#endif  // !_MSC_VER

OpenGuildWetCopy::OpenGuildWetCopy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpenGuildWetCopy::InitAsDefaultInstance() {
}

OpenGuildWetCopy::OpenGuildWetCopy(const OpenGuildWetCopy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpenGuildWetCopy::SharedCtor() {
  _cached_size_ = 0;
  copyid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenGuildWetCopy::~OpenGuildWetCopy() {
  SharedDtor();
}

void OpenGuildWetCopy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenGuildWetCopy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenGuildWetCopy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenGuildWetCopy_descriptor_;
}

const OpenGuildWetCopy& OpenGuildWetCopy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

OpenGuildWetCopy* OpenGuildWetCopy::default_instance_ = NULL;

OpenGuildWetCopy* OpenGuildWetCopy::New() const {
  return new OpenGuildWetCopy;
}

void OpenGuildWetCopy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copyid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool OpenGuildWetCopy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 copyid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &copyid_)));
          set_has_copyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void OpenGuildWetCopy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 copyid = 1;
  if (has_copyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->copyid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpenGuildWetCopy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 copyid = 1;
  if (has_copyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->copyid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpenGuildWetCopy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 copyid = 1;
    if (has_copyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->copyid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenGuildWetCopy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenGuildWetCopy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenGuildWetCopy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void OpenGuildWetCopy::MergeFrom(const OpenGuildWetCopy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copyid()) {
      set_copyid(from.copyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void OpenGuildWetCopy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void OpenGuildWetCopy::CopyFrom(const OpenGuildWetCopy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool OpenGuildWetCopy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OpenGuildWetCopy::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void OpenGuildWetCopy::Swap(OpenGuildWetCopy* other) {
  if (other != this) {
    std::swap(copyid_, other->copyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata OpenGuildWetCopy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenGuildWetCopy_descriptor_;
  metadata.reflection = OpenGuildWetCopy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResetGuildWetCopy::kCopyidFieldNumber;
#endif  // !_MSC_VER

ResetGuildWetCopy::ResetGuildWetCopy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResetGuildWetCopy::InitAsDefaultInstance() {
}

ResetGuildWetCopy::ResetGuildWetCopy(const ResetGuildWetCopy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResetGuildWetCopy::SharedCtor() {
  _cached_size_ = 0;
  copyid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResetGuildWetCopy::~ResetGuildWetCopy() {
  SharedDtor();
}

void ResetGuildWetCopy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResetGuildWetCopy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetGuildWetCopy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResetGuildWetCopy_descriptor_;
}

const ResetGuildWetCopy& ResetGuildWetCopy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

ResetGuildWetCopy* ResetGuildWetCopy::default_instance_ = NULL;

ResetGuildWetCopy* ResetGuildWetCopy::New() const {
  return new ResetGuildWetCopy;
}

void ResetGuildWetCopy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copyid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ResetGuildWetCopy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 copyid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &copyid_)));
          set_has_copyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ResetGuildWetCopy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 copyid = 1;
  if (has_copyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->copyid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResetGuildWetCopy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 copyid = 1;
  if (has_copyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->copyid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResetGuildWetCopy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 copyid = 1;
    if (has_copyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->copyid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetGuildWetCopy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResetGuildWetCopy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResetGuildWetCopy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ResetGuildWetCopy::MergeFrom(const ResetGuildWetCopy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copyid()) {
      set_copyid(from.copyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ResetGuildWetCopy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ResetGuildWetCopy::CopyFrom(const ResetGuildWetCopy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ResetGuildWetCopy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ResetGuildWetCopy::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void ResetGuildWetCopy::Swap(ResetGuildWetCopy* other) {
  if (other != this) {
    std::swap(copyid_, other->copyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ResetGuildWetCopy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResetGuildWetCopy_descriptor_;
  metadata.reflection = ResetGuildWetCopy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildBattleInfo::kAGuildidFieldNumber;
const int GuildBattleInfo::kBGuildidFieldNumber;
const int GuildBattleInfo::kAGuildnameFieldNumber;
const int GuildBattleInfo::kBGuildnameFieldNumber;
const int GuildBattleInfo::kRaididFieldNumber;
const int GuildBattleInfo::kWinGuildidFieldNumber;
#endif  // !_MSC_VER

GuildBattleInfo::GuildBattleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildBattleInfo::InitAsDefaultInstance() {
}

GuildBattleInfo::GuildBattleInfo(const GuildBattleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildBattleInfo::SharedCtor() {
  _cached_size_ = 0;
  a_guildid_ = GOOGLE_ULONGLONG(0);
  b_guildid_ = GOOGLE_ULONGLONG(0);
  a_guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  b_guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  raidid_ = 0;
  win_guildid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildBattleInfo::~GuildBattleInfo() {
  SharedDtor();
}

void GuildBattleInfo::SharedDtor() {
  if (a_guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete a_guildname_;
  }
  if (b_guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete b_guildname_;
  }
  if (this != default_instance_) {
  }
}

void GuildBattleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildBattleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBattleInfo_descriptor_;
}

const GuildBattleInfo& GuildBattleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildBattleInfo* GuildBattleInfo::default_instance_ = NULL;

GuildBattleInfo* GuildBattleInfo::New() const {
  return new GuildBattleInfo;
}

void GuildBattleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    a_guildid_ = GOOGLE_ULONGLONG(0);
    b_guildid_ = GOOGLE_ULONGLONG(0);
    if (has_a_guildname()) {
      if (a_guildname_ != &::google::protobuf::internal::kEmptyString) {
        a_guildname_->clear();
      }
    }
    if (has_b_guildname()) {
      if (b_guildname_ != &::google::protobuf::internal::kEmptyString) {
        b_guildname_->clear();
      }
    }
    raidid_ = 0;
    win_guildid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildBattleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 a_guildid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &a_guildid_)));
          set_has_a_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_b_guildid;
        break;
      }

      // required fixed64 b_guildid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_b_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &b_guildid_)));
          set_has_b_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_a_guildname;
        break;
      }

      // required string a_guildname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_a_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_a_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->a_guildname().data(), this->a_guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_b_guildname;
        break;
      }

      // required string b_guildname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_b_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_b_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->b_guildname().data(), this->b_guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_raidid;
        break;
      }

      // required int32 raidid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raidid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &raidid_)));
          set_has_raidid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_win_guildid;
        break;
      }

      // required fixed64 win_guildid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_win_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &win_guildid_)));
          set_has_win_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildBattleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 a_guildid = 1;
  if (has_a_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->a_guildid(), output);
  }

  // required fixed64 b_guildid = 2;
  if (has_b_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->b_guildid(), output);
  }

  // required string a_guildname = 3;
  if (has_a_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->a_guildname().data(), this->a_guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->a_guildname(), output);
  }

  // required string b_guildname = 4;
  if (has_b_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->b_guildname().data(), this->b_guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->b_guildname(), output);
  }

  // required int32 raidid = 5;
  if (has_raidid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->raidid(), output);
  }

  // required fixed64 win_guildid = 6;
  if (has_win_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->win_guildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildBattleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 a_guildid = 1;
  if (has_a_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->a_guildid(), target);
  }

  // required fixed64 b_guildid = 2;
  if (has_b_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->b_guildid(), target);
  }

  // required string a_guildname = 3;
  if (has_a_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->a_guildname().data(), this->a_guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->a_guildname(), target);
  }

  // required string b_guildname = 4;
  if (has_b_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->b_guildname().data(), this->b_guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->b_guildname(), target);
  }

  // required int32 raidid = 5;
  if (has_raidid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->raidid(), target);
  }

  // required fixed64 win_guildid = 6;
  if (has_win_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->win_guildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildBattleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 a_guildid = 1;
    if (has_a_guildid()) {
      total_size += 1 + 8;
    }

    // required fixed64 b_guildid = 2;
    if (has_b_guildid()) {
      total_size += 1 + 8;
    }

    // required string a_guildname = 3;
    if (has_a_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->a_guildname());
    }

    // required string b_guildname = 4;
    if (has_b_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->b_guildname());
    }

    // required int32 raidid = 5;
    if (has_raidid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->raidid());
    }

    // required fixed64 win_guildid = 6;
    if (has_win_guildid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildBattleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildBattleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildBattleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildBattleInfo::MergeFrom(const GuildBattleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_a_guildid()) {
      set_a_guildid(from.a_guildid());
    }
    if (from.has_b_guildid()) {
      set_b_guildid(from.b_guildid());
    }
    if (from.has_a_guildname()) {
      set_a_guildname(from.a_guildname());
    }
    if (from.has_b_guildname()) {
      set_b_guildname(from.b_guildname());
    }
    if (from.has_raidid()) {
      set_raidid(from.raidid());
    }
    if (from.has_win_guildid()) {
      set_win_guildid(from.win_guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildBattleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildBattleInfo::CopyFrom(const GuildBattleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildBattleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void GuildBattleInfo::SetInitialized() {
  _has_bits_[0] |= 0x0000003f;

  return;
}

void GuildBattleInfo::Swap(GuildBattleInfo* other) {
  if (other != this) {
    std::swap(a_guildid_, other->a_guildid_);
    std::swap(b_guildid_, other->b_guildid_);
    std::swap(a_guildname_, other->a_guildname_);
    std::swap(b_guildname_, other->b_guildname_);
    std::swap(raidid_, other->raidid_);
    std::swap(win_guildid_, other->win_guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildBattleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildBattleInfo_descriptor_;
  metadata.reflection = GuildBattleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildBattleInfoList::kGblistFieldNumber;
const int GuildBattleInfoList::kBattletimesFieldNumber;
#endif  // !_MSC_VER

GuildBattleInfoList::GuildBattleInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildBattleInfoList::InitAsDefaultInstance() {
}

GuildBattleInfoList::GuildBattleInfoList(const GuildBattleInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildBattleInfoList::SharedCtor() {
  _cached_size_ = 0;
  battletimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildBattleInfoList::~GuildBattleInfoList() {
  SharedDtor();
}

void GuildBattleInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildBattleInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildBattleInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBattleInfoList_descriptor_;
}

const GuildBattleInfoList& GuildBattleInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildBattleInfoList* GuildBattleInfoList::default_instance_ = NULL;

GuildBattleInfoList* GuildBattleInfoList::New() const {
  return new GuildBattleInfoList;
}

void GuildBattleInfoList::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    battletimes_ = 0;
  }
  gblist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildBattleInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.GuildBattleInfo gblist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gblist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gblist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_gblist;
        if (input->ExpectTag(16)) goto parse_battletimes;
        break;
      }

      // required int32 battletimes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battletimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battletimes_)));
          set_has_battletimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildBattleInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.GuildBattleInfo gblist = 1;
  for (int i = 0; i < this->gblist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gblist(i), output);
  }

  // required int32 battletimes = 2;
  if (has_battletimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->battletimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildBattleInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.GuildBattleInfo gblist = 1;
  for (int i = 0; i < this->gblist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gblist(i), target);
  }

  // required int32 battletimes = 2;
  if (has_battletimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->battletimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildBattleInfoList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 battletimes = 2;
    if (has_battletimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battletimes());
    }

  }
  // repeated .Packet.GuildBattleInfo gblist = 1;
  total_size += 1 * this->gblist_size();
  for (int i = 0; i < this->gblist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gblist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildBattleInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildBattleInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildBattleInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildBattleInfoList::MergeFrom(const GuildBattleInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  gblist_.MergeFrom(from.gblist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_battletimes()) {
      set_battletimes(from.battletimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildBattleInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildBattleInfoList::CopyFrom(const GuildBattleInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildBattleInfoList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < gblist_size(); i++) {
    if (!this->gblist(i).IsInitialized()) return false;
  }
  return true;
}

void GuildBattleInfoList::SetInitialized() {
  _has_bits_[0] |= 0x00000002;

  for (int i = 0; i < gblist_size(); i++) {
    this->mutable_gblist(i)->SetInitialized();
  }
  return;
}

void GuildBattleInfoList::Swap(GuildBattleInfoList* other) {
  if (other != this) {
    gblist_.Swap(&other->gblist_);
    std::swap(battletimes_, other->battletimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildBattleInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildBattleInfoList_descriptor_;
  metadata.reflection = GuildBattleInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SelfGuildBattleInfo::kGbinfoFieldNumber;
#endif  // !_MSC_VER

SelfGuildBattleInfo::SelfGuildBattleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SelfGuildBattleInfo::InitAsDefaultInstance() {
  gbinfo_ = const_cast< ::Packet::GuildBattleInfo*>(&::Packet::GuildBattleInfo::default_instance());
}

SelfGuildBattleInfo::SelfGuildBattleInfo(const SelfGuildBattleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SelfGuildBattleInfo::SharedCtor() {
  _cached_size_ = 0;
  gbinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SelfGuildBattleInfo::~SelfGuildBattleInfo() {
  SharedDtor();
}

void SelfGuildBattleInfo::SharedDtor() {
  if (this != default_instance_) {
    delete gbinfo_;
  }
}

void SelfGuildBattleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelfGuildBattleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelfGuildBattleInfo_descriptor_;
}

const SelfGuildBattleInfo& SelfGuildBattleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

SelfGuildBattleInfo* SelfGuildBattleInfo::default_instance_ = NULL;

SelfGuildBattleInfo* SelfGuildBattleInfo::New() const {
  return new SelfGuildBattleInfo;
}

void SelfGuildBattleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gbinfo()) {
      if (gbinfo_ != NULL) gbinfo_->::Packet::GuildBattleInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SelfGuildBattleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.GuildBattleInfo gbinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gbinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SelfGuildBattleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.GuildBattleInfo gbinfo = 1;
  if (has_gbinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gbinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SelfGuildBattleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.GuildBattleInfo gbinfo = 1;
  if (has_gbinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gbinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SelfGuildBattleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.GuildBattleInfo gbinfo = 1;
    if (has_gbinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gbinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelfGuildBattleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SelfGuildBattleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SelfGuildBattleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SelfGuildBattleInfo::MergeFrom(const SelfGuildBattleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gbinfo()) {
      mutable_gbinfo()->::Packet::GuildBattleInfo::MergeFrom(from.gbinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SelfGuildBattleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SelfGuildBattleInfo::CopyFrom(const SelfGuildBattleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SelfGuildBattleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_gbinfo()) {
    if (!this->gbinfo().IsInitialized()) return false;
  }
  return true;
}

void SelfGuildBattleInfo::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  if (has_gbinfo()) {
    this->mutable_gbinfo()->SetInitialized();
  }
  return;
}

void SelfGuildBattleInfo::Swap(SelfGuildBattleInfo* other) {
  if (other != this) {
    std::swap(gbinfo_, other->gbinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SelfGuildBattleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelfGuildBattleInfo_descriptor_;
  metadata.reflection = SelfGuildBattleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GuildBattleListReq::GuildBattleListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildBattleListReq::InitAsDefaultInstance() {
}

GuildBattleListReq::GuildBattleListReq(const GuildBattleListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildBattleListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildBattleListReq::~GuildBattleListReq() {
  SharedDtor();
}

void GuildBattleListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildBattleListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildBattleListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBattleListReq_descriptor_;
}

const GuildBattleListReq& GuildBattleListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildBattleListReq* GuildBattleListReq::default_instance_ = NULL;

GuildBattleListReq* GuildBattleListReq::New() const {
  return new GuildBattleListReq;
}

void GuildBattleListReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildBattleListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildBattleListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildBattleListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildBattleListReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildBattleListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildBattleListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildBattleListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildBattleListReq::MergeFrom(const GuildBattleListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildBattleListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildBattleListReq::CopyFrom(const GuildBattleListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildBattleListReq::IsInitialized() const {

  return true;
}

void GuildBattleListReq::SetInitialized() {

  return;
}

void GuildBattleListReq::Swap(GuildBattleListReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildBattleListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildBattleListReq_descriptor_;
  metadata.reflection = GuildBattleListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildBattleWeekRankInfo::kGuildidFieldNumber;
const int GuildBattleWeekRankInfo::kGuildnameFieldNumber;
const int GuildBattleWeekRankInfo::kLevelFieldNumber;
const int GuildBattleWeekRankInfo::kScoreFieldNumber;
#endif  // !_MSC_VER

GuildBattleWeekRankInfo::GuildBattleWeekRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildBattleWeekRankInfo::InitAsDefaultInstance() {
}

GuildBattleWeekRankInfo::GuildBattleWeekRankInfo(const GuildBattleWeekRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildBattleWeekRankInfo::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildBattleWeekRankInfo::~GuildBattleWeekRankInfo() {
  SharedDtor();
}

void GuildBattleWeekRankInfo::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void GuildBattleWeekRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildBattleWeekRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBattleWeekRankInfo_descriptor_;
}

const GuildBattleWeekRankInfo& GuildBattleWeekRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildBattleWeekRankInfo* GuildBattleWeekRankInfo::default_instance_ = NULL;

GuildBattleWeekRankInfo* GuildBattleWeekRankInfo::New() const {
  return new GuildBattleWeekRankInfo;
}

void GuildBattleWeekRankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = GOOGLE_ULONGLONG(0);
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    level_ = 0;
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildBattleWeekRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guildid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guildname;
        break;
      }

      // required string guildname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // required int32 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildBattleWeekRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guildid = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guildid(), output);
  }

  // required string guildname = 2;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->guildname(), output);
  }

  // required int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // required int32 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildBattleWeekRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guildid = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guildid(), target);
  }

  // required string guildname = 2;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guildname(), target);
  }

  // required int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // required int32 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildBattleWeekRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guildid = 1;
    if (has_guildid()) {
      total_size += 1 + 8;
    }

    // required string guildname = 2;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // required int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildBattleWeekRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildBattleWeekRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildBattleWeekRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildBattleWeekRankInfo::MergeFrom(const GuildBattleWeekRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildBattleWeekRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildBattleWeekRankInfo::CopyFrom(const GuildBattleWeekRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildBattleWeekRankInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GuildBattleWeekRankInfo::SetInitialized() {
  _has_bits_[0] |= 0x0000000f;

  return;
}

void GuildBattleWeekRankInfo::Swap(GuildBattleWeekRankInfo* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(guildname_, other->guildname_);
    std::swap(level_, other->level_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildBattleWeekRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildBattleWeekRankInfo_descriptor_;
  metadata.reflection = GuildBattleWeekRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GuildBattleWeekRankReq::GuildBattleWeekRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildBattleWeekRankReq::InitAsDefaultInstance() {
}

GuildBattleWeekRankReq::GuildBattleWeekRankReq(const GuildBattleWeekRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildBattleWeekRankReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildBattleWeekRankReq::~GuildBattleWeekRankReq() {
  SharedDtor();
}

void GuildBattleWeekRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildBattleWeekRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildBattleWeekRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBattleWeekRankReq_descriptor_;
}

const GuildBattleWeekRankReq& GuildBattleWeekRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildBattleWeekRankReq* GuildBattleWeekRankReq::default_instance_ = NULL;

GuildBattleWeekRankReq* GuildBattleWeekRankReq::New() const {
  return new GuildBattleWeekRankReq;
}

void GuildBattleWeekRankReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildBattleWeekRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildBattleWeekRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildBattleWeekRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildBattleWeekRankReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildBattleWeekRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildBattleWeekRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildBattleWeekRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildBattleWeekRankReq::MergeFrom(const GuildBattleWeekRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildBattleWeekRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildBattleWeekRankReq::CopyFrom(const GuildBattleWeekRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildBattleWeekRankReq::IsInitialized() const {

  return true;
}

void GuildBattleWeekRankReq::SetInitialized() {

  return;
}

void GuildBattleWeekRankReq::Swap(GuildBattleWeekRankReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildBattleWeekRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildBattleWeekRankReq_descriptor_;
  metadata.reflection = GuildBattleWeekRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildBattleWeekRankReply::kListFieldNumber;
#endif  // !_MSC_VER

GuildBattleWeekRankReply::GuildBattleWeekRankReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildBattleWeekRankReply::InitAsDefaultInstance() {
}

GuildBattleWeekRankReply::GuildBattleWeekRankReply(const GuildBattleWeekRankReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildBattleWeekRankReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildBattleWeekRankReply::~GuildBattleWeekRankReply() {
  SharedDtor();
}

void GuildBattleWeekRankReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildBattleWeekRankReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildBattleWeekRankReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBattleWeekRankReply_descriptor_;
}

const GuildBattleWeekRankReply& GuildBattleWeekRankReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildBattleWeekRankReply* GuildBattleWeekRankReply::default_instance_ = NULL;

GuildBattleWeekRankReply* GuildBattleWeekRankReply::New() const {
  return new GuildBattleWeekRankReply;
}

void GuildBattleWeekRankReply::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildBattleWeekRankReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.GuildBattleWeekRankInfo list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildBattleWeekRankReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.GuildBattleWeekRankInfo list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildBattleWeekRankReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.GuildBattleWeekRankInfo list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildBattleWeekRankReply::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.GuildBattleWeekRankInfo list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildBattleWeekRankReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildBattleWeekRankReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildBattleWeekRankReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildBattleWeekRankReply::MergeFrom(const GuildBattleWeekRankReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildBattleWeekRankReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildBattleWeekRankReply::CopyFrom(const GuildBattleWeekRankReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildBattleWeekRankReply::IsInitialized() const {

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void GuildBattleWeekRankReply::SetInitialized() {

  for (int i = 0; i < list_size(); i++) {
    this->mutable_list(i)->SetInitialized();
  }
  return;
}

void GuildBattleWeekRankReply::Swap(GuildBattleWeekRankReply* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildBattleWeekRankReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildBattleWeekRankReply_descriptor_;
  metadata.reflection = GuildBattleWeekRankReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildBattleAllRankInfo::kGuildidFieldNumber;
const int GuildBattleAllRankInfo::kGuildnameFieldNumber;
const int GuildBattleAllRankInfo::kLevelFieldNumber;
const int GuildBattleAllRankInfo::kBattlewintimesFieldNumber;
const int GuildBattleAllRankInfo::kBattletimesFieldNumber;
const int GuildBattleAllRankInfo::kWinrateFieldNumber;
#endif  // !_MSC_VER

GuildBattleAllRankInfo::GuildBattleAllRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildBattleAllRankInfo::InitAsDefaultInstance() {
}

GuildBattleAllRankInfo::GuildBattleAllRankInfo(const GuildBattleAllRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildBattleAllRankInfo::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  battlewintimes_ = 0;
  battletimes_ = 0;
  winrate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildBattleAllRankInfo::~GuildBattleAllRankInfo() {
  SharedDtor();
}

void GuildBattleAllRankInfo::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void GuildBattleAllRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildBattleAllRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBattleAllRankInfo_descriptor_;
}

const GuildBattleAllRankInfo& GuildBattleAllRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildBattleAllRankInfo* GuildBattleAllRankInfo::default_instance_ = NULL;

GuildBattleAllRankInfo* GuildBattleAllRankInfo::New() const {
  return new GuildBattleAllRankInfo;
}

void GuildBattleAllRankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = GOOGLE_ULONGLONG(0);
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    level_ = 0;
    battlewintimes_ = 0;
    battletimes_ = 0;
    winrate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildBattleAllRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guildid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guildname;
        break;
      }

      // required string guildname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_battlewintimes;
        break;
      }

      // required int32 battlewintimes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlewintimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battlewintimes_)));
          set_has_battlewintimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_battletimes;
        break;
      }

      // required int32 battletimes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battletimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battletimes_)));
          set_has_battletimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_winrate;
        break;
      }

      // required float winrate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_winrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &winrate_)));
          set_has_winrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildBattleAllRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guildid = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guildid(), output);
  }

  // required string guildname = 2;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->guildname(), output);
  }

  // required int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // required int32 battlewintimes = 4;
  if (has_battlewintimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->battlewintimes(), output);
  }

  // required int32 battletimes = 5;
  if (has_battletimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->battletimes(), output);
  }

  // required float winrate = 6;
  if (has_winrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->winrate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildBattleAllRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guildid = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guildid(), target);
  }

  // required string guildname = 2;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guildname(), target);
  }

  // required int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // required int32 battlewintimes = 4;
  if (has_battlewintimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->battlewintimes(), target);
  }

  // required int32 battletimes = 5;
  if (has_battletimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->battletimes(), target);
  }

  // required float winrate = 6;
  if (has_winrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->winrate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildBattleAllRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guildid = 1;
    if (has_guildid()) {
      total_size += 1 + 8;
    }

    // required string guildname = 2;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // required int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 battlewintimes = 4;
    if (has_battlewintimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battlewintimes());
    }

    // required int32 battletimes = 5;
    if (has_battletimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battletimes());
    }

    // required float winrate = 6;
    if (has_winrate()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildBattleAllRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildBattleAllRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildBattleAllRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildBattleAllRankInfo::MergeFrom(const GuildBattleAllRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_battlewintimes()) {
      set_battlewintimes(from.battlewintimes());
    }
    if (from.has_battletimes()) {
      set_battletimes(from.battletimes());
    }
    if (from.has_winrate()) {
      set_winrate(from.winrate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildBattleAllRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildBattleAllRankInfo::CopyFrom(const GuildBattleAllRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildBattleAllRankInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void GuildBattleAllRankInfo::SetInitialized() {
  _has_bits_[0] |= 0x0000003f;

  return;
}

void GuildBattleAllRankInfo::Swap(GuildBattleAllRankInfo* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(guildname_, other->guildname_);
    std::swap(level_, other->level_);
    std::swap(battlewintimes_, other->battlewintimes_);
    std::swap(battletimes_, other->battletimes_);
    std::swap(winrate_, other->winrate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildBattleAllRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildBattleAllRankInfo_descriptor_;
  metadata.reflection = GuildBattleAllRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GuildBattleAllRankReq::GuildBattleAllRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildBattleAllRankReq::InitAsDefaultInstance() {
}

GuildBattleAllRankReq::GuildBattleAllRankReq(const GuildBattleAllRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildBattleAllRankReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildBattleAllRankReq::~GuildBattleAllRankReq() {
  SharedDtor();
}

void GuildBattleAllRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildBattleAllRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildBattleAllRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBattleAllRankReq_descriptor_;
}

const GuildBattleAllRankReq& GuildBattleAllRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildBattleAllRankReq* GuildBattleAllRankReq::default_instance_ = NULL;

GuildBattleAllRankReq* GuildBattleAllRankReq::New() const {
  return new GuildBattleAllRankReq;
}

void GuildBattleAllRankReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildBattleAllRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildBattleAllRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildBattleAllRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildBattleAllRankReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildBattleAllRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildBattleAllRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildBattleAllRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildBattleAllRankReq::MergeFrom(const GuildBattleAllRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildBattleAllRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildBattleAllRankReq::CopyFrom(const GuildBattleAllRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildBattleAllRankReq::IsInitialized() const {

  return true;
}

void GuildBattleAllRankReq::SetInitialized() {

  return;
}

void GuildBattleAllRankReq::Swap(GuildBattleAllRankReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildBattleAllRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildBattleAllRankReq_descriptor_;
  metadata.reflection = GuildBattleAllRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildBattleAllRankReply::kListFieldNumber;
#endif  // !_MSC_VER

GuildBattleAllRankReply::GuildBattleAllRankReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildBattleAllRankReply::InitAsDefaultInstance() {
}

GuildBattleAllRankReply::GuildBattleAllRankReply(const GuildBattleAllRankReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildBattleAllRankReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildBattleAllRankReply::~GuildBattleAllRankReply() {
  SharedDtor();
}

void GuildBattleAllRankReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildBattleAllRankReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildBattleAllRankReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBattleAllRankReply_descriptor_;
}

const GuildBattleAllRankReply& GuildBattleAllRankReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildBattleAllRankReply* GuildBattleAllRankReply::default_instance_ = NULL;

GuildBattleAllRankReply* GuildBattleAllRankReply::New() const {
  return new GuildBattleAllRankReply;
}

void GuildBattleAllRankReply::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildBattleAllRankReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.GuildBattleAllRankInfo list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildBattleAllRankReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.GuildBattleAllRankInfo list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildBattleAllRankReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.GuildBattleAllRankInfo list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildBattleAllRankReply::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.GuildBattleAllRankInfo list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildBattleAllRankReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildBattleAllRankReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildBattleAllRankReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildBattleAllRankReply::MergeFrom(const GuildBattleAllRankReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildBattleAllRankReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildBattleAllRankReply::CopyFrom(const GuildBattleAllRankReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildBattleAllRankReply::IsInitialized() const {

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void GuildBattleAllRankReply::SetInitialized() {

  for (int i = 0; i < list_size(); i++) {
    this->mutable_list(i)->SetInitialized();
  }
  return;
}

void GuildBattleAllRankReply::Swap(GuildBattleAllRankReply* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildBattleAllRankReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildBattleAllRankReply_descriptor_;
  metadata.reflection = GuildBattleAllRankReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildBattleResultReply::kWinFieldNumber;
const int GuildBattleResultReply::kTimeFieldNumber;
#endif  // !_MSC_VER

GuildBattleResultReply::GuildBattleResultReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildBattleResultReply::InitAsDefaultInstance() {
}

GuildBattleResultReply::GuildBattleResultReply(const GuildBattleResultReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildBattleResultReply::SharedCtor() {
  _cached_size_ = 0;
  win_ = false;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildBattleResultReply::~GuildBattleResultReply() {
  SharedDtor();
}

void GuildBattleResultReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildBattleResultReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildBattleResultReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBattleResultReply_descriptor_;
}

const GuildBattleResultReply& GuildBattleResultReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildBattleResultReply* GuildBattleResultReply::default_instance_ = NULL;

GuildBattleResultReply* GuildBattleResultReply::New() const {
  return new GuildBattleResultReply;
}

void GuildBattleResultReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    win_ = false;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildBattleResultReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool win = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required int32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildBattleResultReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool win = 1;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->win(), output);
  }

  // required int32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildBattleResultReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool win = 1;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->win(), target);
  }

  // required int32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildBattleResultReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool win = 1;
    if (has_win()) {
      total_size += 1 + 1;
    }

    // required int32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildBattleResultReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildBattleResultReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildBattleResultReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildBattleResultReply::MergeFrom(const GuildBattleResultReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_win()) {
      set_win(from.win());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildBattleResultReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildBattleResultReply::CopyFrom(const GuildBattleResultReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildBattleResultReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GuildBattleResultReply::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void GuildBattleResultReply::Swap(GuildBattleResultReply* other) {
  if (other != this) {
    std::swap(win_, other->win_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildBattleResultReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildBattleResultReply_descriptor_;
  metadata.reflection = GuildBattleResultReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildBattlePlayerInfo::kPlayerIdFieldNumber;
const int GuildBattlePlayerInfo::kPlayerNameFieldNumber;
const int GuildBattlePlayerInfo::kGuildIdFieldNumber;
const int GuildBattlePlayerInfo::kScoreFieldNumber;
const int GuildBattlePlayerInfo::kFightingFieldNumber;
const int GuildBattlePlayerInfo::kStreakwinFieldNumber;
const int GuildBattlePlayerInfo::kMobilityFieldNumber;
const int GuildBattlePlayerInfo::kProtectcdFieldNumber;
const int GuildBattlePlayerInfo::kBattlerewardFieldNumber;
const int GuildBattlePlayerInfo::kInitActoridFieldNumber;
#endif  // !_MSC_VER

GuildBattlePlayerInfo::GuildBattlePlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildBattlePlayerInfo::InitAsDefaultInstance() {
}

GuildBattlePlayerInfo::GuildBattlePlayerInfo(const GuildBattlePlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildBattlePlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_ULONGLONG(0);
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guild_id_ = GOOGLE_ULONGLONG(0);
  score_ = 0;
  fighting_ = false;
  streakwin_ = 0;
  mobility_ = 0;
  protectcd_ = 0;
  battlereward_ = 0;
  init_actorid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildBattlePlayerInfo::~GuildBattlePlayerInfo() {
  SharedDtor();
}

void GuildBattlePlayerInfo::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (this != default_instance_) {
  }
}

void GuildBattlePlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildBattlePlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBattlePlayerInfo_descriptor_;
}

const GuildBattlePlayerInfo& GuildBattlePlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildBattlePlayerInfo* GuildBattlePlayerInfo::default_instance_ = NULL;

GuildBattlePlayerInfo* GuildBattlePlayerInfo::New() const {
  return new GuildBattlePlayerInfo;
}

void GuildBattlePlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_ULONGLONG(0);
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    guild_id_ = GOOGLE_ULONGLONG(0);
    score_ = 0;
    fighting_ = false;
    streakwin_ = 0;
    mobility_ = 0;
    protectcd_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    battlereward_ = 0;
    init_actorid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildBattlePlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_name;
        break;
      }

      // required string player_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_guild_id;
        break;
      }

      // required fixed64 guild_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // required int32 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fighting;
        break;
      }

      // required bool fighting = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fighting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fighting_)));
          set_has_fighting();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_streakwin;
        break;
      }

      // required int32 streakwin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_streakwin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &streakwin_)));
          set_has_streakwin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_mobility;
        break;
      }

      // required int32 mobility = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mobility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mobility_)));
          set_has_mobility();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_protectcd;
        break;
      }

      // required int32 protectcd = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protectcd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protectcd_)));
          set_has_protectcd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_battlereward;
        break;
      }

      // required int32 battlereward = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlereward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battlereward_)));
          set_has_battlereward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_init_actorid;
        break;
      }

      // required int32 init_actorid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_init_actorid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &init_actorid_)));
          set_has_init_actorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildBattlePlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->player_id(), output);
  }

  // required string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->player_name(), output);
  }

  // required fixed64 guild_id = 3;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->guild_id(), output);
  }

  // required int32 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->score(), output);
  }

  // required bool fighting = 5;
  if (has_fighting()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->fighting(), output);
  }

  // required int32 streakwin = 6;
  if (has_streakwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->streakwin(), output);
  }

  // required int32 mobility = 7;
  if (has_mobility()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->mobility(), output);
  }

  // required int32 protectcd = 8;
  if (has_protectcd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->protectcd(), output);
  }

  // required int32 battlereward = 9;
  if (has_battlereward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->battlereward(), output);
  }

  // required int32 init_actorid = 10;
  if (has_init_actorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->init_actorid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildBattlePlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->player_id(), target);
  }

  // required string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  // required fixed64 guild_id = 3;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->guild_id(), target);
  }

  // required int32 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->score(), target);
  }

  // required bool fighting = 5;
  if (has_fighting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->fighting(), target);
  }

  // required int32 streakwin = 6;
  if (has_streakwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->streakwin(), target);
  }

  // required int32 mobility = 7;
  if (has_mobility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->mobility(), target);
  }

  // required int32 protectcd = 8;
  if (has_protectcd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->protectcd(), target);
  }

  // required int32 battlereward = 9;
  if (has_battlereward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->battlereward(), target);
  }

  // required int32 init_actorid = 10;
  if (has_init_actorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->init_actorid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildBattlePlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 + 8;
    }

    // required string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // required fixed64 guild_id = 3;
    if (has_guild_id()) {
      total_size += 1 + 8;
    }

    // required int32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // required bool fighting = 5;
    if (has_fighting()) {
      total_size += 1 + 1;
    }

    // required int32 streakwin = 6;
    if (has_streakwin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->streakwin());
    }

    // required int32 mobility = 7;
    if (has_mobility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mobility());
    }

    // required int32 protectcd = 8;
    if (has_protectcd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->protectcd());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 battlereward = 9;
    if (has_battlereward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battlereward());
    }

    // required int32 init_actorid = 10;
    if (has_init_actorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->init_actorid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildBattlePlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildBattlePlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildBattlePlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildBattlePlayerInfo::MergeFrom(const GuildBattlePlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_fighting()) {
      set_fighting(from.fighting());
    }
    if (from.has_streakwin()) {
      set_streakwin(from.streakwin());
    }
    if (from.has_mobility()) {
      set_mobility(from.mobility());
    }
    if (from.has_protectcd()) {
      set_protectcd(from.protectcd());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_battlereward()) {
      set_battlereward(from.battlereward());
    }
    if (from.has_init_actorid()) {
      set_init_actorid(from.init_actorid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildBattlePlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildBattlePlayerInfo::CopyFrom(const GuildBattlePlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildBattlePlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void GuildBattlePlayerInfo::SetInitialized() {
  _has_bits_[0] |= 0x000003ff;

  return;
}

void GuildBattlePlayerInfo::Swap(GuildBattlePlayerInfo* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(player_name_, other->player_name_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(score_, other->score_);
    std::swap(fighting_, other->fighting_);
    std::swap(streakwin_, other->streakwin_);
    std::swap(mobility_, other->mobility_);
    std::swap(protectcd_, other->protectcd_);
    std::swap(battlereward_, other->battlereward_);
    std::swap(init_actorid_, other->init_actorid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildBattlePlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildBattlePlayerInfo_descriptor_;
  metadata.reflection = GuildBattlePlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildBattlePlayerListInfo::kPlayerlistFieldNumber;
#endif  // !_MSC_VER

GuildBattlePlayerListInfo::GuildBattlePlayerListInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildBattlePlayerListInfo::InitAsDefaultInstance() {
}

GuildBattlePlayerListInfo::GuildBattlePlayerListInfo(const GuildBattlePlayerListInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildBattlePlayerListInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildBattlePlayerListInfo::~GuildBattlePlayerListInfo() {
  SharedDtor();
}

void GuildBattlePlayerListInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildBattlePlayerListInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildBattlePlayerListInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBattlePlayerListInfo_descriptor_;
}

const GuildBattlePlayerListInfo& GuildBattlePlayerListInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildBattlePlayerListInfo* GuildBattlePlayerListInfo::default_instance_ = NULL;

GuildBattlePlayerListInfo* GuildBattlePlayerListInfo::New() const {
  return new GuildBattlePlayerListInfo;
}

void GuildBattlePlayerListInfo::Clear() {
  playerlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildBattlePlayerListInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.GuildBattlePlayerInfo playerlist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_playerlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildBattlePlayerListInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.GuildBattlePlayerInfo playerlist = 1;
  for (int i = 0; i < this->playerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->playerlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildBattlePlayerListInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.GuildBattlePlayerInfo playerlist = 1;
  for (int i = 0; i < this->playerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->playerlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildBattlePlayerListInfo::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.GuildBattlePlayerInfo playerlist = 1;
  total_size += 1 * this->playerlist_size();
  for (int i = 0; i < this->playerlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildBattlePlayerListInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildBattlePlayerListInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildBattlePlayerListInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildBattlePlayerListInfo::MergeFrom(const GuildBattlePlayerListInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerlist_.MergeFrom(from.playerlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildBattlePlayerListInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildBattlePlayerListInfo::CopyFrom(const GuildBattlePlayerListInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildBattlePlayerListInfo::IsInitialized() const {

  for (int i = 0; i < playerlist_size(); i++) {
    if (!this->playerlist(i).IsInitialized()) return false;
  }
  return true;
}

void GuildBattlePlayerListInfo::SetInitialized() {

  for (int i = 0; i < playerlist_size(); i++) {
    this->mutable_playerlist(i)->SetInitialized();
  }
  return;
}

void GuildBattlePlayerListInfo::Swap(GuildBattlePlayerListInfo* other) {
  if (other != this) {
    playerlist_.Swap(&other->playerlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildBattlePlayerListInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildBattlePlayerListInfo_descriptor_;
  metadata.reflection = GuildBattlePlayerListInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateGuildBattlePlayerInfo::kPlayerinfoFieldNumber;
#endif  // !_MSC_VER

UpdateGuildBattlePlayerInfo::UpdateGuildBattlePlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateGuildBattlePlayerInfo::InitAsDefaultInstance() {
  playerinfo_ = const_cast< ::Packet::GuildBattlePlayerInfo*>(&::Packet::GuildBattlePlayerInfo::default_instance());
}

UpdateGuildBattlePlayerInfo::UpdateGuildBattlePlayerInfo(const UpdateGuildBattlePlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateGuildBattlePlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  playerinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateGuildBattlePlayerInfo::~UpdateGuildBattlePlayerInfo() {
  SharedDtor();
}

void UpdateGuildBattlePlayerInfo::SharedDtor() {
  if (this != default_instance_) {
    delete playerinfo_;
  }
}

void UpdateGuildBattlePlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateGuildBattlePlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateGuildBattlePlayerInfo_descriptor_;
}

const UpdateGuildBattlePlayerInfo& UpdateGuildBattlePlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

UpdateGuildBattlePlayerInfo* UpdateGuildBattlePlayerInfo::default_instance_ = NULL;

UpdateGuildBattlePlayerInfo* UpdateGuildBattlePlayerInfo::New() const {
  return new UpdateGuildBattlePlayerInfo;
}

void UpdateGuildBattlePlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerinfo()) {
      if (playerinfo_ != NULL) playerinfo_->::Packet::GuildBattlePlayerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool UpdateGuildBattlePlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.GuildBattlePlayerInfo playerinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void UpdateGuildBattlePlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.GuildBattlePlayerInfo playerinfo = 1;
  if (has_playerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->playerinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateGuildBattlePlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.GuildBattlePlayerInfo playerinfo = 1;
  if (has_playerinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->playerinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateGuildBattlePlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.GuildBattlePlayerInfo playerinfo = 1;
    if (has_playerinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateGuildBattlePlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateGuildBattlePlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateGuildBattlePlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void UpdateGuildBattlePlayerInfo::MergeFrom(const UpdateGuildBattlePlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerinfo()) {
      mutable_playerinfo()->::Packet::GuildBattlePlayerInfo::MergeFrom(from.playerinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void UpdateGuildBattlePlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void UpdateGuildBattlePlayerInfo::CopyFrom(const UpdateGuildBattlePlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool UpdateGuildBattlePlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_playerinfo()) {
    if (!this->playerinfo().IsInitialized()) return false;
  }
  return true;
}

void UpdateGuildBattlePlayerInfo::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  if (has_playerinfo()) {
    this->mutable_playerinfo()->SetInitialized();
  }
  return;
}

void UpdateGuildBattlePlayerInfo::Swap(UpdateGuildBattlePlayerInfo* other) {
  if (other != this) {
    std::swap(playerinfo_, other->playerinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata UpdateGuildBattlePlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateGuildBattlePlayerInfo_descriptor_;
  metadata.reflection = UpdateGuildBattlePlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateGuildBattleStage::kStageFieldNumber;
const int UpdateGuildBattleStage::kDialogFieldNumber;
#endif  // !_MSC_VER

UpdateGuildBattleStage::UpdateGuildBattleStage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateGuildBattleStage::InitAsDefaultInstance() {
}

UpdateGuildBattleStage::UpdateGuildBattleStage(const UpdateGuildBattleStage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateGuildBattleStage::SharedCtor() {
  _cached_size_ = 0;
  stage_ = 0;
  dialog_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateGuildBattleStage::~UpdateGuildBattleStage() {
  SharedDtor();
}

void UpdateGuildBattleStage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateGuildBattleStage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateGuildBattleStage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateGuildBattleStage_descriptor_;
}

const UpdateGuildBattleStage& UpdateGuildBattleStage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

UpdateGuildBattleStage* UpdateGuildBattleStage::default_instance_ = NULL;

UpdateGuildBattleStage* UpdateGuildBattleStage::New() const {
  return new UpdateGuildBattleStage;
}

void UpdateGuildBattleStage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stage_ = 0;
    dialog_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool UpdateGuildBattleStage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.GuildBattle_Stage stage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::GuildBattle_Stage_IsValid(value)) {
            set_stage(static_cast< ::Packet::GuildBattle_Stage >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dialog;
        break;
      }

      // required bool dialog = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dialog:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dialog_)));
          set_has_dialog();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void UpdateGuildBattleStage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.GuildBattle_Stage stage = 1;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->stage(), output);
  }

  // required bool dialog = 2;
  if (has_dialog()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->dialog(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateGuildBattleStage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.GuildBattle_Stage stage = 1;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->stage(), target);
  }

  // required bool dialog = 2;
  if (has_dialog()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->dialog(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateGuildBattleStage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.GuildBattle_Stage stage = 1;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stage());
    }

    // required bool dialog = 2;
    if (has_dialog()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateGuildBattleStage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateGuildBattleStage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateGuildBattleStage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void UpdateGuildBattleStage::MergeFrom(const UpdateGuildBattleStage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage()) {
      set_stage(from.stage());
    }
    if (from.has_dialog()) {
      set_dialog(from.dialog());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void UpdateGuildBattleStage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void UpdateGuildBattleStage::CopyFrom(const UpdateGuildBattleStage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool UpdateGuildBattleStage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UpdateGuildBattleStage::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void UpdateGuildBattleStage::Swap(UpdateGuildBattleStage* other) {
  if (other != this) {
    std::swap(stage_, other->stage_);
    std::swap(dialog_, other->dialog_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata UpdateGuildBattleStage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateGuildBattleStage_descriptor_;
  metadata.reflection = UpdateGuildBattleStage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildBattleFightTarget::kTargetGuidFieldNumber;
const int GuildBattleFightTarget::kBattleGroupIdFieldNumber;
#endif  // !_MSC_VER

GuildBattleFightTarget::GuildBattleFightTarget()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildBattleFightTarget::InitAsDefaultInstance() {
}

GuildBattleFightTarget::GuildBattleFightTarget(const GuildBattleFightTarget& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildBattleFightTarget::SharedCtor() {
  _cached_size_ = 0;
  target_guid_ = GOOGLE_ULONGLONG(0);
  battle_group_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildBattleFightTarget::~GuildBattleFightTarget() {
  SharedDtor();
}

void GuildBattleFightTarget::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildBattleFightTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildBattleFightTarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBattleFightTarget_descriptor_;
}

const GuildBattleFightTarget& GuildBattleFightTarget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildBattleFightTarget* GuildBattleFightTarget::default_instance_ = NULL;

GuildBattleFightTarget* GuildBattleFightTarget::New() const {
  return new GuildBattleFightTarget;
}

void GuildBattleFightTarget::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    target_guid_ = GOOGLE_ULONGLONG(0);
    battle_group_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildBattleFightTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 target_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &target_guid_)));
          set_has_target_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_group_id;
        break;
      }

      // required int32 battle_group_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_group_id_)));
          set_has_battle_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildBattleFightTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 target_guid = 1;
  if (has_target_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->target_guid(), output);
  }

  // required int32 battle_group_id = 2;
  if (has_battle_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->battle_group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildBattleFightTarget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 target_guid = 1;
  if (has_target_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->target_guid(), target);
  }

  // required int32 battle_group_id = 2;
  if (has_battle_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->battle_group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildBattleFightTarget::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 target_guid = 1;
    if (has_target_guid()) {
      total_size += 1 + 8;
    }

    // required int32 battle_group_id = 2;
    if (has_battle_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildBattleFightTarget::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildBattleFightTarget* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildBattleFightTarget*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildBattleFightTarget::MergeFrom(const GuildBattleFightTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_guid()) {
      set_target_guid(from.target_guid());
    }
    if (from.has_battle_group_id()) {
      set_battle_group_id(from.battle_group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildBattleFightTarget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildBattleFightTarget::CopyFrom(const GuildBattleFightTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildBattleFightTarget::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GuildBattleFightTarget::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void GuildBattleFightTarget::Swap(GuildBattleFightTarget* other) {
  if (other != this) {
    std::swap(target_guid_, other->target_guid_);
    std::swap(battle_group_id_, other->battle_group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildBattleFightTarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildBattleFightTarget_descriptor_;
  metadata.reflection = GuildBattleFightTarget_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildWarehouse::kGuildidFieldNumber;
const int GuildWarehouse::kIndexFieldNumber;
const int GuildWarehouse::kItemidFieldNumber;
const int GuildWarehouse::kReceiveplayeridFieldNumber;
#endif  // !_MSC_VER

GuildWarehouse::GuildWarehouse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildWarehouse::InitAsDefaultInstance() {
}

GuildWarehouse::GuildWarehouse(const GuildWarehouse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildWarehouse::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  index_ = 0;
  itemid_ = 0;
  receiveplayerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildWarehouse::~GuildWarehouse() {
  SharedDtor();
}

void GuildWarehouse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildWarehouse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildWarehouse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildWarehouse_descriptor_;
}

const GuildWarehouse& GuildWarehouse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildWarehouse* GuildWarehouse::default_instance_ = NULL;

GuildWarehouse* GuildWarehouse::New() const {
  return new GuildWarehouse;
}

void GuildWarehouse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = GOOGLE_ULONGLONG(0);
    index_ = 0;
    itemid_ = 0;
    receiveplayerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildWarehouse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guildid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemid;
        break;
      }

      // required int32 itemid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_receiveplayerid;
        break;
      }

      // required fixed64 receiveplayerid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_receiveplayerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &receiveplayerid_)));
          set_has_receiveplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildWarehouse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guildid = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guildid(), output);
  }

  // required int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // required int32 itemid = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemid(), output);
  }

  // required fixed64 receiveplayerid = 4;
  if (has_receiveplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->receiveplayerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildWarehouse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guildid = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guildid(), target);
  }

  // required int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // required int32 itemid = 3;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemid(), target);
  }

  // required fixed64 receiveplayerid = 4;
  if (has_receiveplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->receiveplayerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildWarehouse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guildid = 1;
    if (has_guildid()) {
      total_size += 1 + 8;
    }

    // required int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 itemid = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // required fixed64 receiveplayerid = 4;
    if (has_receiveplayerid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildWarehouse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildWarehouse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildWarehouse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildWarehouse::MergeFrom(const GuildWarehouse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_receiveplayerid()) {
      set_receiveplayerid(from.receiveplayerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildWarehouse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildWarehouse::CopyFrom(const GuildWarehouse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildWarehouse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GuildWarehouse::SetInitialized() {
  _has_bits_[0] |= 0x0000000f;

  return;
}

void GuildWarehouse::Swap(GuildWarehouse* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(index_, other->index_);
    std::swap(itemid_, other->itemid_);
    std::swap(receiveplayerid_, other->receiveplayerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildWarehouse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildWarehouse_descriptor_;
  metadata.reflection = GuildWarehouse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GuildWarehouseReq::GuildWarehouseReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildWarehouseReq::InitAsDefaultInstance() {
}

GuildWarehouseReq::GuildWarehouseReq(const GuildWarehouseReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildWarehouseReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildWarehouseReq::~GuildWarehouseReq() {
  SharedDtor();
}

void GuildWarehouseReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildWarehouseReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildWarehouseReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildWarehouseReq_descriptor_;
}

const GuildWarehouseReq& GuildWarehouseReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildWarehouseReq* GuildWarehouseReq::default_instance_ = NULL;

GuildWarehouseReq* GuildWarehouseReq::New() const {
  return new GuildWarehouseReq;
}

void GuildWarehouseReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildWarehouseReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildWarehouseReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildWarehouseReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildWarehouseReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildWarehouseReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildWarehouseReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildWarehouseReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildWarehouseReq::MergeFrom(const GuildWarehouseReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildWarehouseReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildWarehouseReq::CopyFrom(const GuildWarehouseReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildWarehouseReq::IsInitialized() const {

  return true;
}

void GuildWarehouseReq::SetInitialized() {

  return;
}

void GuildWarehouseReq::Swap(GuildWarehouseReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildWarehouseReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildWarehouseReq_descriptor_;
  metadata.reflection = GuildWarehouseReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildWarehouseReply::kWhlistFieldNumber;
#endif  // !_MSC_VER

GuildWarehouseReply::GuildWarehouseReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildWarehouseReply::InitAsDefaultInstance() {
}

GuildWarehouseReply::GuildWarehouseReply(const GuildWarehouseReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildWarehouseReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildWarehouseReply::~GuildWarehouseReply() {
  SharedDtor();
}

void GuildWarehouseReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildWarehouseReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildWarehouseReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildWarehouseReply_descriptor_;
}

const GuildWarehouseReply& GuildWarehouseReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildWarehouseReply* GuildWarehouseReply::default_instance_ = NULL;

GuildWarehouseReply* GuildWarehouseReply::New() const {
  return new GuildWarehouseReply;
}

void GuildWarehouseReply::Clear() {
  whlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildWarehouseReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.GuildWarehouse whlist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_whlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_whlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_whlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildWarehouseReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.GuildWarehouse whlist = 1;
  for (int i = 0; i < this->whlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->whlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildWarehouseReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.GuildWarehouse whlist = 1;
  for (int i = 0; i < this->whlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->whlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildWarehouseReply::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.GuildWarehouse whlist = 1;
  total_size += 1 * this->whlist_size();
  for (int i = 0; i < this->whlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->whlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildWarehouseReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildWarehouseReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildWarehouseReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildWarehouseReply::MergeFrom(const GuildWarehouseReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  whlist_.MergeFrom(from.whlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildWarehouseReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildWarehouseReply::CopyFrom(const GuildWarehouseReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildWarehouseReply::IsInitialized() const {

  for (int i = 0; i < whlist_size(); i++) {
    if (!this->whlist(i).IsInitialized()) return false;
  }
  return true;
}

void GuildWarehouseReply::SetInitialized() {

  for (int i = 0; i < whlist_size(); i++) {
    this->mutable_whlist(i)->SetInitialized();
  }
  return;
}

void GuildWarehouseReply::Swap(GuildWarehouseReply* other) {
  if (other != this) {
    whlist_.Swap(&other->whlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildWarehouseReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildWarehouseReply_descriptor_;
  metadata.reflection = GuildWarehouseReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildWarehouseReceiveReq::kIndexFieldNumber;
#endif  // !_MSC_VER

GuildWarehouseReceiveReq::GuildWarehouseReceiveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildWarehouseReceiveReq::InitAsDefaultInstance() {
}

GuildWarehouseReceiveReq::GuildWarehouseReceiveReq(const GuildWarehouseReceiveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildWarehouseReceiveReq::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildWarehouseReceiveReq::~GuildWarehouseReceiveReq() {
  SharedDtor();
}

void GuildWarehouseReceiveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildWarehouseReceiveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildWarehouseReceiveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildWarehouseReceiveReq_descriptor_;
}

const GuildWarehouseReceiveReq& GuildWarehouseReceiveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildWarehouseReceiveReq* GuildWarehouseReceiveReq::default_instance_ = NULL;

GuildWarehouseReceiveReq* GuildWarehouseReceiveReq::New() const {
  return new GuildWarehouseReceiveReq;
}

void GuildWarehouseReceiveReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildWarehouseReceiveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildWarehouseReceiveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildWarehouseReceiveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildWarehouseReceiveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildWarehouseReceiveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildWarehouseReceiveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildWarehouseReceiveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildWarehouseReceiveReq::MergeFrom(const GuildWarehouseReceiveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildWarehouseReceiveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildWarehouseReceiveReq::CopyFrom(const GuildWarehouseReceiveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildWarehouseReceiveReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GuildWarehouseReceiveReq::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void GuildWarehouseReceiveReq::Swap(GuildWarehouseReceiveReq* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildWarehouseReceiveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildWarehouseReceiveReq_descriptor_;
  metadata.reflection = GuildWarehouseReceiveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildWarehouseSetReceivePlayerReq::kIndexFieldNumber;
const int GuildWarehouseSetReceivePlayerReq::kReceiveplayeridFieldNumber;
#endif  // !_MSC_VER

GuildWarehouseSetReceivePlayerReq::GuildWarehouseSetReceivePlayerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildWarehouseSetReceivePlayerReq::InitAsDefaultInstance() {
}

GuildWarehouseSetReceivePlayerReq::GuildWarehouseSetReceivePlayerReq(const GuildWarehouseSetReceivePlayerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildWarehouseSetReceivePlayerReq::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  receiveplayerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildWarehouseSetReceivePlayerReq::~GuildWarehouseSetReceivePlayerReq() {
  SharedDtor();
}

void GuildWarehouseSetReceivePlayerReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildWarehouseSetReceivePlayerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildWarehouseSetReceivePlayerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildWarehouseSetReceivePlayerReq_descriptor_;
}

const GuildWarehouseSetReceivePlayerReq& GuildWarehouseSetReceivePlayerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildWarehouseSetReceivePlayerReq* GuildWarehouseSetReceivePlayerReq::default_instance_ = NULL;

GuildWarehouseSetReceivePlayerReq* GuildWarehouseSetReceivePlayerReq::New() const {
  return new GuildWarehouseSetReceivePlayerReq;
}

void GuildWarehouseSetReceivePlayerReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    receiveplayerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildWarehouseSetReceivePlayerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_receiveplayerid;
        break;
      }

      // required fixed64 receiveplayerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_receiveplayerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &receiveplayerid_)));
          set_has_receiveplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildWarehouseSetReceivePlayerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required fixed64 receiveplayerid = 2;
  if (has_receiveplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->receiveplayerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildWarehouseSetReceivePlayerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required fixed64 receiveplayerid = 2;
  if (has_receiveplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->receiveplayerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildWarehouseSetReceivePlayerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required fixed64 receiveplayerid = 2;
    if (has_receiveplayerid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildWarehouseSetReceivePlayerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildWarehouseSetReceivePlayerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildWarehouseSetReceivePlayerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildWarehouseSetReceivePlayerReq::MergeFrom(const GuildWarehouseSetReceivePlayerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_receiveplayerid()) {
      set_receiveplayerid(from.receiveplayerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildWarehouseSetReceivePlayerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildWarehouseSetReceivePlayerReq::CopyFrom(const GuildWarehouseSetReceivePlayerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildWarehouseSetReceivePlayerReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GuildWarehouseSetReceivePlayerReq::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void GuildWarehouseSetReceivePlayerReq::Swap(GuildWarehouseSetReceivePlayerReq* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(receiveplayerid_, other->receiveplayerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildWarehouseSetReceivePlayerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildWarehouseSetReceivePlayerReq_descriptor_;
  metadata.reflection = GuildWarehouseSetReceivePlayerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildWarehouseUpdate::kItemFieldNumber;
#endif  // !_MSC_VER

GuildWarehouseUpdate::GuildWarehouseUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildWarehouseUpdate::InitAsDefaultInstance() {
  item_ = const_cast< ::Packet::GuildWarehouse*>(&::Packet::GuildWarehouse::default_instance());
}

GuildWarehouseUpdate::GuildWarehouseUpdate(const GuildWarehouseUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildWarehouseUpdate::SharedCtor() {
  _cached_size_ = 0;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildWarehouseUpdate::~GuildWarehouseUpdate() {
  SharedDtor();
}

void GuildWarehouseUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void GuildWarehouseUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildWarehouseUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildWarehouseUpdate_descriptor_;
}

const GuildWarehouseUpdate& GuildWarehouseUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildWarehouseUpdate* GuildWarehouseUpdate::default_instance_ = NULL;

GuildWarehouseUpdate* GuildWarehouseUpdate::New() const {
  return new GuildWarehouseUpdate;
}

void GuildWarehouseUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_item()) {
      if (item_ != NULL) item_->::Packet::GuildWarehouse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildWarehouseUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.GuildWarehouse item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildWarehouseUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.GuildWarehouse item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildWarehouseUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.GuildWarehouse item = 1;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildWarehouseUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.GuildWarehouse item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildWarehouseUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildWarehouseUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildWarehouseUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildWarehouseUpdate::MergeFrom(const GuildWarehouseUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item()) {
      mutable_item()->::Packet::GuildWarehouse::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildWarehouseUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildWarehouseUpdate::CopyFrom(const GuildWarehouseUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildWarehouseUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  return true;
}

void GuildWarehouseUpdate::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  if (has_item()) {
    this->mutable_item()->SetInitialized();
  }
  return;
}

void GuildWarehouseUpdate::Swap(GuildWarehouseUpdate* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildWarehouseUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildWarehouseUpdate_descriptor_;
  metadata.reflection = GuildWarehouseUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildWarehouseRecord::kGuildidFieldNumber;
const int GuildWarehouseRecord::kIdFieldNumber;
const int GuildWarehouseRecord::kDateFieldNumber;
const int GuildWarehouseRecord::kPlayerNameFieldNumber;
const int GuildWarehouseRecord::kItemidFieldNumber;
#endif  // !_MSC_VER

GuildWarehouseRecord::GuildWarehouseRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildWarehouseRecord::InitAsDefaultInstance() {
}

GuildWarehouseRecord::GuildWarehouseRecord(const GuildWarehouseRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildWarehouseRecord::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  id_ = GOOGLE_ULONGLONG(0);
  date_ = 0u;
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itemid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildWarehouseRecord::~GuildWarehouseRecord() {
  SharedDtor();
}

void GuildWarehouseRecord::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (this != default_instance_) {
  }
}

void GuildWarehouseRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildWarehouseRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildWarehouseRecord_descriptor_;
}

const GuildWarehouseRecord& GuildWarehouseRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildWarehouseRecord* GuildWarehouseRecord::default_instance_ = NULL;

GuildWarehouseRecord* GuildWarehouseRecord::New() const {
  return new GuildWarehouseRecord;
}

void GuildWarehouseRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = GOOGLE_ULONGLONG(0);
    id_ = GOOGLE_ULONGLONG(0);
    date_ = 0u;
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    itemid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildWarehouseRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guildid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_id;
        break;
      }

      // required fixed64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_date;
        break;
      }

      // required uint32 date = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_player_name;
        break;
      }

      // required string player_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_itemid;
        break;
      }

      // required int32 itemid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildWarehouseRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guildid = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guildid(), output);
  }

  // required fixed64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->id(), output);
  }

  // required uint32 date = 3;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->date(), output);
  }

  // required string player_name = 4;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->player_name(), output);
  }

  // required int32 itemid = 5;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildWarehouseRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guildid = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guildid(), target);
  }

  // required fixed64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->id(), target);
  }

  // required uint32 date = 3;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->date(), target);
  }

  // required string player_name = 4;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->player_name(), target);
  }

  // required int32 itemid = 5;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildWarehouseRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guildid = 1;
    if (has_guildid()) {
      total_size += 1 + 8;
    }

    // required fixed64 id = 2;
    if (has_id()) {
      total_size += 1 + 8;
    }

    // required uint32 date = 3;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->date());
    }

    // required string player_name = 4;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // required int32 itemid = 5;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildWarehouseRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildWarehouseRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildWarehouseRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildWarehouseRecord::MergeFrom(const GuildWarehouseRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildWarehouseRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildWarehouseRecord::CopyFrom(const GuildWarehouseRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildWarehouseRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void GuildWarehouseRecord::SetInitialized() {
  _has_bits_[0] |= 0x0000001f;

  return;
}

void GuildWarehouseRecord::Swap(GuildWarehouseRecord* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(id_, other->id_);
    std::swap(date_, other->date_);
    std::swap(player_name_, other->player_name_);
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildWarehouseRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildWarehouseRecord_descriptor_;
  metadata.reflection = GuildWarehouseRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GuildWarehouseRecordReq::GuildWarehouseRecordReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildWarehouseRecordReq::InitAsDefaultInstance() {
}

GuildWarehouseRecordReq::GuildWarehouseRecordReq(const GuildWarehouseRecordReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildWarehouseRecordReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildWarehouseRecordReq::~GuildWarehouseRecordReq() {
  SharedDtor();
}

void GuildWarehouseRecordReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildWarehouseRecordReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildWarehouseRecordReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildWarehouseRecordReq_descriptor_;
}

const GuildWarehouseRecordReq& GuildWarehouseRecordReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildWarehouseRecordReq* GuildWarehouseRecordReq::default_instance_ = NULL;

GuildWarehouseRecordReq* GuildWarehouseRecordReq::New() const {
  return new GuildWarehouseRecordReq;
}

void GuildWarehouseRecordReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildWarehouseRecordReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildWarehouseRecordReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildWarehouseRecordReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildWarehouseRecordReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildWarehouseRecordReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildWarehouseRecordReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildWarehouseRecordReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildWarehouseRecordReq::MergeFrom(const GuildWarehouseRecordReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildWarehouseRecordReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildWarehouseRecordReq::CopyFrom(const GuildWarehouseRecordReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildWarehouseRecordReq::IsInitialized() const {

  return true;
}

void GuildWarehouseRecordReq::SetInitialized() {

  return;
}

void GuildWarehouseRecordReq::Swap(GuildWarehouseRecordReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildWarehouseRecordReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildWarehouseRecordReq_descriptor_;
  metadata.reflection = GuildWarehouseRecordReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildWarehouseRecordReply::kRecordFieldNumber;
#endif  // !_MSC_VER

GuildWarehouseRecordReply::GuildWarehouseRecordReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildWarehouseRecordReply::InitAsDefaultInstance() {
}

GuildWarehouseRecordReply::GuildWarehouseRecordReply(const GuildWarehouseRecordReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildWarehouseRecordReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildWarehouseRecordReply::~GuildWarehouseRecordReply() {
  SharedDtor();
}

void GuildWarehouseRecordReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildWarehouseRecordReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildWarehouseRecordReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildWarehouseRecordReply_descriptor_;
}

const GuildWarehouseRecordReply& GuildWarehouseRecordReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildWarehouseRecordReply* GuildWarehouseRecordReply::default_instance_ = NULL;

GuildWarehouseRecordReply* GuildWarehouseRecordReply::New() const {
  return new GuildWarehouseRecordReply;
}

void GuildWarehouseRecordReply::Clear() {
  record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildWarehouseRecordReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.GuildWarehouseRecord record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildWarehouseRecordReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.GuildWarehouseRecord record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildWarehouseRecordReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.GuildWarehouseRecord record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildWarehouseRecordReply::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.GuildWarehouseRecord record = 1;
  total_size += 1 * this->record_size();
  for (int i = 0; i < this->record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildWarehouseRecordReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildWarehouseRecordReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildWarehouseRecordReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildWarehouseRecordReply::MergeFrom(const GuildWarehouseRecordReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_.MergeFrom(from.record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildWarehouseRecordReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildWarehouseRecordReply::CopyFrom(const GuildWarehouseRecordReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildWarehouseRecordReply::IsInitialized() const {

  for (int i = 0; i < record_size(); i++) {
    if (!this->record(i).IsInitialized()) return false;
  }
  return true;
}

void GuildWarehouseRecordReply::SetInitialized() {

  for (int i = 0; i < record_size(); i++) {
    this->mutable_record(i)->SetInitialized();
  }
  return;
}

void GuildWarehouseRecordReply::Swap(GuildWarehouseRecordReply* other) {
  if (other != this) {
    record_.Swap(&other->record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildWarehouseRecordReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildWarehouseRecordReply_descriptor_;
  metadata.reflection = GuildWarehouseRecordReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildSpoilItem::kGuildidFieldNumber;
const int GuildSpoilItem::kIndexFieldNumber;
const int GuildSpoilItem::kCopyidFieldNumber;
const int GuildSpoilItem::kItemidFieldNumber;
const int GuildSpoilItem::kTimecdFieldNumber;
const int GuildSpoilItem::kPlayeridFieldNumber;
#endif  // !_MSC_VER

GuildSpoilItem::GuildSpoilItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildSpoilItem::InitAsDefaultInstance() {
}

GuildSpoilItem::GuildSpoilItem(const GuildSpoilItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildSpoilItem::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  index_ = 0;
  copyid_ = 0;
  itemid_ = 0;
  timecd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildSpoilItem::~GuildSpoilItem() {
  SharedDtor();
}

void GuildSpoilItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildSpoilItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildSpoilItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildSpoilItem_descriptor_;
}

const GuildSpoilItem& GuildSpoilItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildSpoilItem* GuildSpoilItem::default_instance_ = NULL;

GuildSpoilItem* GuildSpoilItem::New() const {
  return new GuildSpoilItem;
}

void GuildSpoilItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = GOOGLE_ULONGLONG(0);
    index_ = 0;
    copyid_ = 0;
    itemid_ = 0;
    timecd_ = 0;
  }
  playerid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildSpoilItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guildid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_copyid;
        break;
      }

      // required int32 copyid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copyid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &copyid_)));
          set_has_copyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_itemid;
        break;
      }

      // required int32 itemid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_timecd;
        break;
      }

      // required int32 timecd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timecd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timecd_)));
          set_has_timecd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_playerid;
        break;
      }

      // repeated fixed64 playerid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 49, input, this->mutable_playerid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_playerid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_playerid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildSpoilItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guildid = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guildid(), output);
  }

  // required int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // required int32 copyid = 3;
  if (has_copyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->copyid(), output);
  }

  // required int32 itemid = 4;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->itemid(), output);
  }

  // required int32 timecd = 5;
  if (has_timecd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->timecd(), output);
  }

  // repeated fixed64 playerid = 6;
  for (int i = 0; i < this->playerid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      6, this->playerid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildSpoilItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guildid = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guildid(), target);
  }

  // required int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // required int32 copyid = 3;
  if (has_copyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->copyid(), target);
  }

  // required int32 itemid = 4;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->itemid(), target);
  }

  // required int32 timecd = 5;
  if (has_timecd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->timecd(), target);
  }

  // repeated fixed64 playerid = 6;
  for (int i = 0; i < this->playerid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(6, this->playerid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildSpoilItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guildid = 1;
    if (has_guildid()) {
      total_size += 1 + 8;
    }

    // required int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 copyid = 3;
    if (has_copyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->copyid());
    }

    // required int32 itemid = 4;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // required int32 timecd = 5;
    if (has_timecd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timecd());
    }

  }
  // repeated fixed64 playerid = 6;
  {
    int data_size = 0;
    data_size = 8 * this->playerid_size();
    total_size += 1 * this->playerid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildSpoilItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildSpoilItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildSpoilItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildSpoilItem::MergeFrom(const GuildSpoilItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerid_.MergeFrom(from.playerid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_copyid()) {
      set_copyid(from.copyid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_timecd()) {
      set_timecd(from.timecd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildSpoilItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildSpoilItem::CopyFrom(const GuildSpoilItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildSpoilItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void GuildSpoilItem::SetInitialized() {
  _has_bits_[0] |= 0x0000001f;

  return;
}

void GuildSpoilItem::Swap(GuildSpoilItem* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(index_, other->index_);
    std::swap(copyid_, other->copyid_);
    std::swap(itemid_, other->itemid_);
    std::swap(timecd_, other->timecd_);
    playerid_.Swap(&other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildSpoilItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildSpoilItem_descriptor_;
  metadata.reflection = GuildSpoilItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRecord::kGuildidFieldNumber;
const int GuildRecord::kIndexFieldNumber;
const int GuildRecord::kRecordFieldNumber;
const int GuildRecord::kDateFieldNumber;
#endif  // !_MSC_VER

GuildRecord::GuildRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRecord::InitAsDefaultInstance() {
}

GuildRecord::GuildRecord(const GuildRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRecord::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  index_ = 0;
  record_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  date_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRecord::~GuildRecord() {
  SharedDtor();
}

void GuildRecord::SharedDtor() {
  if (record_ != &::google::protobuf::internal::kEmptyString) {
    delete record_;
  }
  if (this != default_instance_) {
  }
}

void GuildRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRecord_descriptor_;
}

const GuildRecord& GuildRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildRecord* GuildRecord::default_instance_ = NULL;

GuildRecord* GuildRecord::New() const {
  return new GuildRecord;
}

void GuildRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = GOOGLE_ULONGLONG(0);
    index_ = 0;
    if (has_record()) {
      if (record_ != &::google::protobuf::internal::kEmptyString) {
        record_->clear();
      }
    }
    date_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guildid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_record;
        break;
      }

      // required string record = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_record()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->record().data(), this->record().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_date;
        break;
      }

      // required uint32 date = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guildid = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guildid(), output);
  }

  // required int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // required string record = 3;
  if (has_record()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->record().data(), this->record().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->record(), output);
  }

  // required uint32 date = 4;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->date(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guildid = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guildid(), target);
  }

  // required int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // required string record = 3;
  if (has_record()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->record().data(), this->record().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->record(), target);
  }

  // required uint32 date = 4;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->date(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guildid = 1;
    if (has_guildid()) {
      total_size += 1 + 8;
    }

    // required int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required string record = 3;
    if (has_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->record());
    }

    // required uint32 date = 4;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->date());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildRecord::MergeFrom(const GuildRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_record()) {
      set_record(from.record());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildRecord::CopyFrom(const GuildRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GuildRecord::SetInitialized() {
  _has_bits_[0] |= 0x0000000f;

  return;
}

void GuildRecord::Swap(GuildRecord* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(index_, other->index_);
    std::swap(record_, other->record_);
    std::swap(date_, other->date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRecord_descriptor_;
  metadata.reflection = GuildRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRecordReply::kRecordsFieldNumber;
#endif  // !_MSC_VER

GuildRecordReply::GuildRecordReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRecordReply::InitAsDefaultInstance() {
}

GuildRecordReply::GuildRecordReply(const GuildRecordReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRecordReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRecordReply::~GuildRecordReply() {
  SharedDtor();
}

void GuildRecordReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRecordReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRecordReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRecordReply_descriptor_;
}

const GuildRecordReply& GuildRecordReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildRecordReply* GuildRecordReply::default_instance_ = NULL;

GuildRecordReply* GuildRecordReply::New() const {
  return new GuildRecordReply;
}

void GuildRecordReply::Clear() {
  records_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildRecordReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.GuildRecord records = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_records;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildRecordReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.GuildRecord records = 1;
  for (int i = 0; i < this->records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->records(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRecordReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.GuildRecord records = 1;
  for (int i = 0; i < this->records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->records(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRecordReply::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.GuildRecord records = 1;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->records(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRecordReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRecordReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRecordReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildRecordReply::MergeFrom(const GuildRecordReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  records_.MergeFrom(from.records_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildRecordReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildRecordReply::CopyFrom(const GuildRecordReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildRecordReply::IsInitialized() const {

  for (int i = 0; i < records_size(); i++) {
    if (!this->records(i).IsInitialized()) return false;
  }
  return true;
}

void GuildRecordReply::SetInitialized() {

  for (int i = 0; i < records_size(); i++) {
    this->mutable_records(i)->SetInitialized();
  }
  return;
}

void GuildRecordReply::Swap(GuildRecordReply* other) {
  if (other != this) {
    records_.Swap(&other->records_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildRecordReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRecordReply_descriptor_;
  metadata.reflection = GuildRecordReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildUserName::kPlayeridFieldNumber;
const int GuildUserName::kPlayernameFieldNumber;
const int GuildUserName::kHairFieldNumber;
#endif  // !_MSC_VER

GuildUserName::GuildUserName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildUserName::InitAsDefaultInstance() {
}

GuildUserName::GuildUserName(const GuildUserName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildUserName::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hair_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildUserName::~GuildUserName() {
  SharedDtor();
}

void GuildUserName::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void GuildUserName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildUserName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildUserName_descriptor_;
}

const GuildUserName& GuildUserName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildUserName* GuildUserName::default_instance_ = NULL;

GuildUserName* GuildUserName::New() const {
  return new GuildUserName;
}

void GuildUserName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    hair_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildUserName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playername;
        break;
      }

      // required string playername = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hair;
        break;
      }

      // required int32 hair = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hair_)));
          set_has_hair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildUserName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->playerid(), output);
  }

  // required string playername = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->playername(), output);
  }

  // required int32 hair = 3;
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hair(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildUserName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->playerid(), target);
  }

  // required string playername = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playername(), target);
  }

  // required int32 hair = 3;
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hair(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildUserName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 + 8;
    }

    // required string playername = 2;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // required int32 hair = 3;
    if (has_hair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hair());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildUserName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildUserName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildUserName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildUserName::MergeFrom(const GuildUserName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_hair()) {
      set_hair(from.hair());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildUserName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildUserName::CopyFrom(const GuildUserName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildUserName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GuildUserName::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  return;
}

void GuildUserName::Swap(GuildUserName* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(playername_, other->playername_);
    std::swap(hair_, other->hair_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildUserName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildUserName_descriptor_;
  metadata.reflection = GuildUserName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildSpoilItemClient::kIndexFieldNumber;
const int GuildSpoilItemClient::kCopyidFieldNumber;
const int GuildSpoilItemClient::kItemidFieldNumber;
const int GuildSpoilItemClient::kTimecdFieldNumber;
const int GuildSpoilItemClient::kApplyplayerFieldNumber;
#endif  // !_MSC_VER

GuildSpoilItemClient::GuildSpoilItemClient()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildSpoilItemClient::InitAsDefaultInstance() {
}

GuildSpoilItemClient::GuildSpoilItemClient(const GuildSpoilItemClient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildSpoilItemClient::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  copyid_ = 0;
  itemid_ = 0;
  timecd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildSpoilItemClient::~GuildSpoilItemClient() {
  SharedDtor();
}

void GuildSpoilItemClient::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildSpoilItemClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildSpoilItemClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildSpoilItemClient_descriptor_;
}

const GuildSpoilItemClient& GuildSpoilItemClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildSpoilItemClient* GuildSpoilItemClient::default_instance_ = NULL;

GuildSpoilItemClient* GuildSpoilItemClient::New() const {
  return new GuildSpoilItemClient;
}

void GuildSpoilItemClient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    copyid_ = 0;
    itemid_ = 0;
    timecd_ = 0;
  }
  applyplayer_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildSpoilItemClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_copyid;
        break;
      }

      // required int32 copyid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copyid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &copyid_)));
          set_has_copyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemid;
        break;
      }

      // required int32 itemid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timecd;
        break;
      }

      // required int32 timecd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timecd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timecd_)));
          set_has_timecd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_applyplayer;
        break;
      }

      // repeated .Packet.GuildUserName applyplayer = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_applyplayer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applyplayer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_applyplayer;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildSpoilItemClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required int32 copyid = 2;
  if (has_copyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->copyid(), output);
  }

  // required int32 itemid = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemid(), output);
  }

  // required int32 timecd = 4;
  if (has_timecd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->timecd(), output);
  }

  // repeated .Packet.GuildUserName applyplayer = 5;
  for (int i = 0; i < this->applyplayer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->applyplayer(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildSpoilItemClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required int32 copyid = 2;
  if (has_copyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->copyid(), target);
  }

  // required int32 itemid = 3;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemid(), target);
  }

  // required int32 timecd = 4;
  if (has_timecd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->timecd(), target);
  }

  // repeated .Packet.GuildUserName applyplayer = 5;
  for (int i = 0; i < this->applyplayer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->applyplayer(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildSpoilItemClient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 copyid = 2;
    if (has_copyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->copyid());
    }

    // required int32 itemid = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // required int32 timecd = 4;
    if (has_timecd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timecd());
    }

  }
  // repeated .Packet.GuildUserName applyplayer = 5;
  total_size += 1 * this->applyplayer_size();
  for (int i = 0; i < this->applyplayer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applyplayer(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildSpoilItemClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildSpoilItemClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildSpoilItemClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildSpoilItemClient::MergeFrom(const GuildSpoilItemClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  applyplayer_.MergeFrom(from.applyplayer_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_copyid()) {
      set_copyid(from.copyid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_timecd()) {
      set_timecd(from.timecd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildSpoilItemClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildSpoilItemClient::CopyFrom(const GuildSpoilItemClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildSpoilItemClient::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  for (int i = 0; i < applyplayer_size(); i++) {
    if (!this->applyplayer(i).IsInitialized()) return false;
  }
  return true;
}

void GuildSpoilItemClient::SetInitialized() {
  _has_bits_[0] |= 0x0000000f;

  for (int i = 0; i < applyplayer_size(); i++) {
    this->mutable_applyplayer(i)->SetInitialized();
  }
  return;
}

void GuildSpoilItemClient::Swap(GuildSpoilItemClient* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(copyid_, other->copyid_);
    std::swap(itemid_, other->itemid_);
    std::swap(timecd_, other->timecd_);
    applyplayer_.Swap(&other->applyplayer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildSpoilItemClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildSpoilItemClient_descriptor_;
  metadata.reflection = GuildSpoilItemClient_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildSpoilItemReply::kItemsFieldNumber;
#endif  // !_MSC_VER

GuildSpoilItemReply::GuildSpoilItemReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildSpoilItemReply::InitAsDefaultInstance() {
}

GuildSpoilItemReply::GuildSpoilItemReply(const GuildSpoilItemReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildSpoilItemReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildSpoilItemReply::~GuildSpoilItemReply() {
  SharedDtor();
}

void GuildSpoilItemReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildSpoilItemReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildSpoilItemReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildSpoilItemReply_descriptor_;
}

const GuildSpoilItemReply& GuildSpoilItemReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

GuildSpoilItemReply* GuildSpoilItemReply::default_instance_ = NULL;

GuildSpoilItemReply* GuildSpoilItemReply::New() const {
  return new GuildSpoilItemReply;
}

void GuildSpoilItemReply::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildSpoilItemReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.GuildSpoilItemClient items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildSpoilItemReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.GuildSpoilItemClient items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildSpoilItemReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.GuildSpoilItemClient items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildSpoilItemReply::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.GuildSpoilItemClient items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildSpoilItemReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildSpoilItemReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildSpoilItemReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildSpoilItemReply::MergeFrom(const GuildSpoilItemReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildSpoilItemReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildSpoilItemReply::CopyFrom(const GuildSpoilItemReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildSpoilItemReply::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void GuildSpoilItemReply::SetInitialized() {

  for (int i = 0; i < items_size(); i++) {
    this->mutable_items(i)->SetInitialized();
  }
  return;
}

void GuildSpoilItemReply::Swap(GuildSpoilItemReply* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildSpoilItemReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildSpoilItemReply_descriptor_;
  metadata.reflection = GuildSpoilItemReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateGuildSpoilItemClient::kIndexFieldNumber;
const int UpdateGuildSpoilItemClient::kApplyplayerFieldNumber;
#endif  // !_MSC_VER

UpdateGuildSpoilItemClient::UpdateGuildSpoilItemClient()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateGuildSpoilItemClient::InitAsDefaultInstance() {
}

UpdateGuildSpoilItemClient::UpdateGuildSpoilItemClient(const UpdateGuildSpoilItemClient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateGuildSpoilItemClient::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateGuildSpoilItemClient::~UpdateGuildSpoilItemClient() {
  SharedDtor();
}

void UpdateGuildSpoilItemClient::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateGuildSpoilItemClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateGuildSpoilItemClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateGuildSpoilItemClient_descriptor_;
}

const UpdateGuildSpoilItemClient& UpdateGuildSpoilItemClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Guild_2eproto();
  return *default_instance_;
}

UpdateGuildSpoilItemClient* UpdateGuildSpoilItemClient::default_instance_ = NULL;

UpdateGuildSpoilItemClient* UpdateGuildSpoilItemClient::New() const {
  return new UpdateGuildSpoilItemClient;
}

void UpdateGuildSpoilItemClient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
  }
  applyplayer_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool UpdateGuildSpoilItemClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_applyplayer;
        break;
      }

      // repeated .Packet.GuildUserName applyplayer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_applyplayer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applyplayer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_applyplayer;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void UpdateGuildSpoilItemClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // repeated .Packet.GuildUserName applyplayer = 2;
  for (int i = 0; i < this->applyplayer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->applyplayer(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateGuildSpoilItemClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // repeated .Packet.GuildUserName applyplayer = 2;
  for (int i = 0; i < this->applyplayer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->applyplayer(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateGuildSpoilItemClient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  // repeated .Packet.GuildUserName applyplayer = 2;
  total_size += 1 * this->applyplayer_size();
  for (int i = 0; i < this->applyplayer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applyplayer(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateGuildSpoilItemClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateGuildSpoilItemClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateGuildSpoilItemClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void UpdateGuildSpoilItemClient::MergeFrom(const UpdateGuildSpoilItemClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  applyplayer_.MergeFrom(from.applyplayer_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void UpdateGuildSpoilItemClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void UpdateGuildSpoilItemClient::CopyFrom(const UpdateGuildSpoilItemClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool UpdateGuildSpoilItemClient::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < applyplayer_size(); i++) {
    if (!this->applyplayer(i).IsInitialized()) return false;
  }
  return true;
}

void UpdateGuildSpoilItemClient::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  for (int i = 0; i < applyplayer_size(); i++) {
    this->mutable_applyplayer(i)->SetInitialized();
  }
  return;
}

void UpdateGuildSpoilItemClient::Swap(UpdateGuildSpoilItemClient* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    applyplayer_.Swap(&other->applyplayer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata UpdateGuildSpoilItemClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateGuildSpoilItemClient_descriptor_;
  metadata.reflection = UpdateGuildSpoilItemClient_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

// @@protoc_insertion_point(global_scope)
