// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BattleField.proto
#include "BattleField.pb.h"
#include "BattleField.proto.fflua.h"
namespace Packet {
bool BFConfig_fflua_reg(lua_State* state)
{
//for decltype
	BFConfig* message(nullptr);
	message;
	ff::fflua_register_t<BFConfig, ctor()>(state, "BFConfig", "google::protobuf::Message")
		// required int32 level = 1;
		.def(&BFConfig::level, "level")
		.def(&BFConfig::set_level, "set_level")
		// required int32 win_exp = 2;
		.def(&BFConfig::win_exp, "win_exp")
		.def(&BFConfig::set_win_exp, "set_win_exp")
		// required int32 win_gold = 3;
		.def(&BFConfig::win_gold, "win_gold")
		.def(&BFConfig::set_win_gold, "set_win_gold")
		// required int32 lose_exp = 4;
		.def(&BFConfig::lose_exp, "lose_exp")
		.def(&BFConfig::set_lose_exp, "set_lose_exp")
		// required int32 lose_gold = 5;
		.def(&BFConfig::lose_gold, "lose_gold")
		.def(&BFConfig::set_lose_gold, "set_lose_gold")
		// required int32 get_flag_exp = 6;
		.def(&BFConfig::get_flag_exp, "get_flag_exp")
		.def(&BFConfig::set_get_flag_exp, "set_get_flag_exp")
		// required int32 get_flag_gold = 7;
		.def(&BFConfig::get_flag_gold, "get_flag_gold")
		.def(&BFConfig::set_get_flag_gold, "set_get_flag_gold")
		// required int32 battle_win_exp = 8;
		.def(&BFConfig::battle_win_exp, "battle_win_exp")
		.def(&BFConfig::set_battle_win_exp, "set_battle_win_exp")
		// required int32 battle_win_gold = 9;
		.def(&BFConfig::battle_win_gold, "battle_win_gold")
		.def(&BFConfig::set_battle_win_gold, "set_battle_win_gold")
		.def(&BFConfig::ByteSize, "ByteSize")
		.def(&BFConfig::SetInitialized, "SetInitialized")
		;
	return true;
}
bool BattleFeildProxy_fflua_reg(lua_State* state)
{
//for decltype
	BattleFeildProxy* message(nullptr);
	message;
	ff::fflua_register_t<BattleFeildProxy, ctor()>(state, "BattleFeildProxy", "google::protobuf::Message")
		// required int32 raid_rtid = 1;
		.def(&BattleFeildProxy::raid_rtid, "raid_rtid")
		.def(&BattleFeildProxy::set_raid_rtid, "set_raid_rtid")
		// required .Config.BFState bf_state = 2;
		.def(&BattleFeildProxy::bf_state, "bf_state")
		.def(&BattleFeildProxy::set_bf_state, "set_bf_state")
		.def(&BattleFeildProxy::ByteSize, "ByteSize")
		.def(&BattleFeildProxy::SetInitialized, "SetInitialized")
		;
	return true;
}
bool BattleRoomInfo_fflua_reg(lua_State* state)
{
//for decltype
	BattleRoomInfo* message(nullptr);
	message;
	ff::fflua_register_t<BattleRoomInfo, ctor()>(state, "BattleRoomInfo", "google::protobuf::Message")
		// required int32 min_level = 1;
		.def(&BattleRoomInfo::min_level, "min_level")
		.def(&BattleRoomInfo::set_min_level, "set_min_level")
		// required int32 max_level = 2;
		.def(&BattleRoomInfo::max_level, "max_level")
		.def(&BattleRoomInfo::set_max_level, "set_max_level")
		// required int32 max_count = 3;
		.def(&BattleRoomInfo::max_count, "max_count")
		.def(&BattleRoomInfo::set_max_count, "set_max_count")
		// required int32 scene_id = 4;
		.def(&BattleRoomInfo::scene_id, "scene_id")
		.def(&BattleRoomInfo::set_scene_id, "set_scene_id")
		// required .Packet.BattleFieldState bf_state = 5;
		.def(&BattleRoomInfo::bf_state, "bf_state")
		.def(&BattleRoomInfo::set_bf_state, "set_bf_state")
		// repeated .Packet.BattleFieldPlayerInfo players = 6;
		.def(&BattleRoomInfo::players_size, "players_size")
		.def<decltype(message->players(0)) (BattleRoomInfo::*)(int) const>(&BattleRoomInfo::players, "players")
		.def<decltype(message->mutable_players(0)) (BattleRoomInfo::*)(int)>(&BattleRoomInfo::mutable_players, "mutable_players")
		.def(&BattleRoomInfo::add_players, "add_players")
		.def(&BattleRoomInfo::ByteSize, "ByteSize")
		.def(&BattleRoomInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool BattleFieldPlayerInfo_fflua_reg(lua_State* state)
{
//for decltype
	BattleFieldPlayerInfo* message(nullptr);
	message;
	ff::fflua_register_t<BattleFieldPlayerInfo, ctor()>(state, "BattleFieldPlayerInfo", "google::protobuf::Message")
		// required fixed64 guid = 1;
		.def(&BattleFieldPlayerInfo::guid, "guid")
		.def(&BattleFieldPlayerInfo::set_guid, "set_guid")
		// required int32 kill_num = 2;
		.def(&BattleFieldPlayerInfo::kill_num, "kill_num")
		.def(&BattleFieldPlayerInfo::set_kill_num, "set_kill_num")
		// required int32 dead_num = 3;
		.def(&BattleFieldPlayerInfo::dead_num, "dead_num")
		.def(&BattleFieldPlayerInfo::set_dead_num, "set_dead_num")
		// required int32 get_flag_num = 4;
		.def(&BattleFieldPlayerInfo::get_flag_num, "get_flag_num")
		.def(&BattleFieldPlayerInfo::set_get_flag_num, "set_get_flag_num")
		// required int32 return_flag_num = 5;
		.def(&BattleFieldPlayerInfo::return_flag_num, "return_flag_num")
		.def(&BattleFieldPlayerInfo::set_return_flag_num, "set_return_flag_num")
		// required int32 honor = 6;
		.def(&BattleFieldPlayerInfo::honor, "honor")
		.def(&BattleFieldPlayerInfo::set_honor, "set_honor")
		// required bool has_flag = 7;
		.def(&BattleFieldPlayerInfo::has_flag, "has_flag")
		.def(&BattleFieldPlayerInfo::set_has_flag, "set_has_flag")
		// required .Packet.BattleFieldState bf_state = 8;
		.def(&BattleFieldPlayerInfo::bf_state, "bf_state")
		.def(&BattleFieldPlayerInfo::set_bf_state, "set_bf_state")
		// required bool locked = 9;
		.def(&BattleFieldPlayerInfo::locked, "locked")
		.def(&BattleFieldPlayerInfo::set_locked, "set_locked")
		// required bool dead = 10;
		.def(&BattleFieldPlayerInfo::dead, "dead")
		.def(&BattleFieldPlayerInfo::set_dead, "set_dead")
		// required int32 old_camp = 11;
		.def(&BattleFieldPlayerInfo::old_camp, "old_camp")
		.def(&BattleFieldPlayerInfo::set_old_camp, "set_old_camp")
		// required string name = 12;
		.def(&BattleFieldPlayerInfo::name, "name")
		.def<void (BattleFieldPlayerInfo::*)(const std::string&)>(&BattleFieldPlayerInfo::set_name, "set_name")
		// required .Packet.Professions prof = 13;
		.def(&BattleFieldPlayerInfo::prof, "prof")
		.def(&BattleFieldPlayerInfo::set_prof, "set_prof")
		.def(&BattleFieldPlayerInfo::ByteSize, "ByteSize")
		.def(&BattleFieldPlayerInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool BattleFieldInfo_fflua_reg(lua_State* state)
{
//for decltype
	BattleFieldInfo* message(nullptr);
	message;
	ff::fflua_register_t<BattleFieldInfo, ctor()>(state, "BattleFieldInfo", "google::protobuf::Message")
		// repeated fixed64 attackers = 1;
		.def(&BattleFieldInfo::attackers_size, "attackers_size")
		.def<decltype(message->attackers(0)) (BattleFieldInfo::*)(int) const>(&BattleFieldInfo::attackers, "attackers")
		.def<void(BattleFieldInfo::*)(int, const decltype(message->attackers(0)))>(&BattleFieldInfo::set_attackers, "set_attackers")
		.def(&BattleFieldInfo::add_attackers, "add_attackers")
		// repeated fixed64 defenders = 2;
		.def(&BattleFieldInfo::defenders_size, "defenders_size")
		.def<decltype(message->defenders(0)) (BattleFieldInfo::*)(int) const>(&BattleFieldInfo::defenders, "defenders")
		.def<void(BattleFieldInfo::*)(int, const decltype(message->defenders(0)))>(&BattleFieldInfo::set_defenders, "set_defenders")
		.def(&BattleFieldInfo::add_defenders, "add_defenders")
		// required bool attacker_flag = 3;
		.def(&BattleFieldInfo::attacker_flag, "attacker_flag")
		.def(&BattleFieldInfo::set_attacker_flag, "set_attacker_flag")
		// required bool defender_flag = 4;
		.def(&BattleFieldInfo::defender_flag, "defender_flag")
		.def(&BattleFieldInfo::set_defender_flag, "set_defender_flag")
		// required int32 attacker_flag_count = 5;
		.def(&BattleFieldInfo::attacker_flag_count, "attacker_flag_count")
		.def(&BattleFieldInfo::set_attacker_flag_count, "set_attacker_flag_count")
		// required int32 defender_flag_count = 6;
		.def(&BattleFieldInfo::defender_flag_count, "defender_flag_count")
		.def(&BattleFieldInfo::set_defender_flag_count, "set_defender_flag_count")
		// required int32 attacker_point = 7;
		.def(&BattleFieldInfo::attacker_point, "attacker_point")
		.def(&BattleFieldInfo::set_attacker_point, "set_attacker_point")
		// required int32 defender_point = 8;
		.def(&BattleFieldInfo::defender_point, "defender_point")
		.def(&BattleFieldInfo::set_defender_point, "set_defender_point")
		.def(&BattleFieldInfo::ByteSize, "ByteSize")
		.def(&BattleFieldInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool JoinBattleRoom_fflua_reg(lua_State* state)
{
//for decltype
	JoinBattleRoom* message(nullptr);
	message;
	ff::fflua_register_t<JoinBattleRoom, ctor()>(state, "JoinBattleRoom", "google::protobuf::Message")
		// required int32 scene_id = 1;
		.def(&JoinBattleRoom::scene_id, "scene_id")
		.def(&JoinBattleRoom::set_scene_id, "set_scene_id")
		// required int32 npc_index = 2;
		.def(&JoinBattleRoom::npc_index, "npc_index")
		.def(&JoinBattleRoom::set_npc_index, "set_npc_index")
		// required int32 script_id = 3;
		.def(&JoinBattleRoom::script_id, "script_id")
		.def(&JoinBattleRoom::set_script_id, "set_script_id")
		.def(&JoinBattleRoom::ByteSize, "ByteSize")
		.def(&JoinBattleRoom::SetInitialized, "SetInitialized")
		;
	return true;
}
bool LeaveBattleRoom_fflua_reg(lua_State* state)
{
//for decltype
	LeaveBattleRoom* message(nullptr);
	message;
	ff::fflua_register_t<LeaveBattleRoom, ctor()>(state, "LeaveBattleRoom", "google::protobuf::Message");
	return true;
}
bool LeaveBattleField_fflua_reg(lua_State* state)
{
//for decltype
	LeaveBattleField* message(nullptr);
	message;
	ff::fflua_register_t<LeaveBattleField, ctor()>(state, "LeaveBattleField", "google::protobuf::Message");
	return true;
}
bool AgreeEnterBattleField_fflua_reg(lua_State* state)
{
//for decltype
	AgreeEnterBattleField* message(nullptr);
	message;
	ff::fflua_register_t<AgreeEnterBattleField, ctor()>(state, "AgreeEnterBattleField", "google::protobuf::Message");
	return true;
}
bool DisAgreeEnterBattleField_fflua_reg(lua_State* state)
{
//for decltype
	DisAgreeEnterBattleField* message(nullptr);
	message;
	ff::fflua_register_t<DisAgreeEnterBattleField, ctor()>(state, "DisAgreeEnterBattleField", "google::protobuf::Message");
	return true;
}
bool EnterRoomNotify_fflua_reg(lua_State* state)
{
//for decltype
	EnterRoomNotify* message(nullptr);
	message;
	ff::fflua_register_t<EnterRoomNotify, ctor()>(state, "EnterRoomNotify", "google::protobuf::Message")
		// required int32 time = 1;
		.def(&EnterRoomNotify::time, "time")
		.def(&EnterRoomNotify::set_time, "set_time")
		.def(&EnterRoomNotify::ByteSize, "ByteSize")
		.def(&EnterRoomNotify::SetInitialized, "SetInitialized")
		;
	return true;
}
bool EnterBattleFieldNotify_fflua_reg(lua_State* state)
{
//for decltype
	EnterBattleFieldNotify* message(nullptr);
	message;
	ff::fflua_register_t<EnterBattleFieldNotify, ctor()>(state, "EnterBattleFieldNotify", "google::protobuf::Message")
		// required int32 time = 1;
		.def(&EnterBattleFieldNotify::time, "time")
		.def(&EnterBattleFieldNotify::set_time, "set_time")
		.def(&EnterBattleFieldNotify::ByteSize, "ByteSize")
		.def(&EnterBattleFieldNotify::SetInitialized, "SetInitialized")
		;
	return true;
}
bool BeginBattleFieldNotify_fflua_reg(lua_State* state)
{
//for decltype
	BeginBattleFieldNotify* message(nullptr);
	message;
	ff::fflua_register_t<BeginBattleFieldNotify, ctor()>(state, "BeginBattleFieldNotify", "google::protobuf::Message")
		// required int32 time = 1;
		.def(&BeginBattleFieldNotify::time, "time")
		.def(&BeginBattleFieldNotify::set_time, "set_time")
		.def(&BeginBattleFieldNotify::ByteSize, "ByteSize")
		.def(&BeginBattleFieldNotify::SetInitialized, "SetInitialized")
		;
	return true;
}
bool BeginBattleField_fflua_reg(lua_State* state)
{
//for decltype
	BeginBattleField* message(nullptr);
	message;
	ff::fflua_register_t<BeginBattleField, ctor()>(state, "BeginBattleField", "google::protobuf::Message");
	return true;
}
bool BattleFieldFightTarget_fflua_reg(lua_State* state)
{
//for decltype
	BattleFieldFightTarget* message(nullptr);
	message;
	ff::fflua_register_t<BattleFieldFightTarget, ctor()>(state, "BattleFieldFightTarget", "google::protobuf::Message")
		// required fixed64 target_guid = 1;
		.def(&BattleFieldFightTarget::target_guid, "target_guid")
		.def(&BattleFieldFightTarget::set_target_guid, "set_target_guid")
		// required int32 battle_group_id = 2;
		.def(&BattleFieldFightTarget::battle_group_id, "battle_group_id")
		.def(&BattleFieldFightTarget::set_battle_group_id, "set_battle_group_id")
		.def(&BattleFieldFightTarget::ByteSize, "ByteSize")
		.def(&BattleFieldFightTarget::SetInitialized, "SetInitialized")
		;
	return true;
}
bool FlagOprate_fflua_reg(lua_State* state)
{
//for decltype
	FlagOprate* message(nullptr);
	message;
	ff::fflua_register_t<FlagOprate, ctor()>(state, "FlagOprate", "google::protobuf::Message")
		// required .Packet.FlagOption option = 1;
		.def(&FlagOprate::option, "option")
		.def(&FlagOprate::set_option, "set_option")
		// required fixed64 guid = 2;
		.def(&FlagOprate::guid, "guid")
		.def(&FlagOprate::set_guid, "set_guid")
		.def(&FlagOprate::ByteSize, "ByteSize")
		.def(&FlagOprate::SetInitialized, "SetInitialized")
		;
	return true;
}
bool BfResult_fflua_reg(lua_State* state)
{
//for decltype
	BfResult* message(nullptr);
	message;
	ff::fflua_register_t<BfResult, ctor()>(state, "BfResult", "google::protobuf::Message")
		// required int32 winner = 1;
		.def(&BfResult::winner, "winner")
		.def(&BfResult::set_winner, "set_winner")
		.def(&BfResult::ByteSize, "ByteSize")
		.def(&BfResult::SetInitialized, "SetInitialized")
		;
	return true;
}
bool BattleField_fflua_regist_all(lua_State* state)
{
	BFConfig_fflua_reg(state);
	BattleFeildProxy_fflua_reg(state);
	BattleRoomInfo_fflua_reg(state);
	BattleFieldPlayerInfo_fflua_reg(state);
	BattleFieldInfo_fflua_reg(state);
	JoinBattleRoom_fflua_reg(state);
	LeaveBattleRoom_fflua_reg(state);
	LeaveBattleField_fflua_reg(state);
	AgreeEnterBattleField_fflua_reg(state);
	DisAgreeEnterBattleField_fflua_reg(state);
	EnterRoomNotify_fflua_reg(state);
	EnterBattleFieldNotify_fflua_reg(state);
	BeginBattleFieldNotify_fflua_reg(state);
	BeginBattleField_fflua_reg(state);
	BattleFieldFightTarget_fflua_reg(state);
	FlagOprate_fflua_reg(state);
	BfResult_fflua_reg(state);
	return true;
}
}
