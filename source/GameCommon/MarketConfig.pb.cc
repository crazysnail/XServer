// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MarketConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MarketConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Config {

namespace {

const ::google::protobuf::Descriptor* MarketConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketItemConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketItemConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChargeItemConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChargeItemConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChargeList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChargeList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MarketConfig_2eproto() {
  protobuf_AddDesc_MarketConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MarketConfig.proto");
  GOOGLE_CHECK(file != NULL);
  MarketConfig_descriptor_ = file->message_type(0);
  static const int MarketConfig_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketConfig, market_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketConfig, count_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketConfig, refresh_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketConfig, token_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketConfig, refresh_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketConfig, refresh_cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketConfig, refresh_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketConfig, gen_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketConfig, open_),
  };
  MarketConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketConfig_descriptor_,
      MarketConfig::default_instance_,
      MarketConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketConfig));
  MarketItemConfig_descriptor_ = file->message_type(1);
  static const int MarketItemConfig_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketItemConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketItemConfig, market_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketItemConfig, count_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketItemConfig, open_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketItemConfig, off_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketItemConfig, gen_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketItemConfig, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketItemConfig, item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketItemConfig, price_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketItemConfig, price_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketItemConfig, day_limit_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketItemConfig, open_),
  };
  MarketItemConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketItemConfig_descriptor_,
      MarketItemConfig::default_instance_,
      MarketItemConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketItemConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketItemConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketItemConfig));
  ChargeItemConfig_descriptor_ = file->message_type(2);
  static const int ChargeItemConfig_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeItemConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeItemConfig, group_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeItemConfig, price_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeItemConfig, effect_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeItemConfig, effect_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeItemConfig, extra_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeItemConfig, rmb_price_),
  };
  ChargeItemConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChargeItemConfig_descriptor_,
      ChargeItemConfig::default_instance_,
      ChargeItemConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeItemConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeItemConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChargeItemConfig));
  ChargeList_descriptor_ = file->message_type(3);
  static const int ChargeList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeList, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeList, product_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeList, product_id_),
  };
  ChargeList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChargeList_descriptor_,
      ChargeList::default_instance_,
      ChargeList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChargeList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MarketConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketConfig_descriptor_, &MarketConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketItemConfig_descriptor_, &MarketItemConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChargeItemConfig_descriptor_, &ChargeItemConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChargeList_descriptor_, &ChargeList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MarketConfig_2eproto() {
  delete MarketConfig::default_instance_;
  delete MarketConfig_reflection_;
  delete MarketItemConfig::default_instance_;
  delete MarketItemConfig_reflection_;
  delete ChargeItemConfig::default_instance_;
  delete ChargeItemConfig_reflection_;
  delete ChargeList::default_instance_;
  delete ChargeList_reflection_;
}

void protobuf_AddDesc_MarketConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Config::protobuf_AddDesc_AllConfigEnum_2eproto();
  ::Packet::protobuf_AddDesc_AllPacketEnum_2eproto();
  ::Packet::protobuf_AddDesc_ProtoBufOption_2eproto();
  ::Packet::protobuf_AddDesc_PlayerBasicInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022MarketConfig.proto\022\006Config\032\023AllConfigE"
    "num.proto\032\023AllPacketEnum.proto\032\024ProtoBuf"
    "Option.proto\032\025PlayerBasicInfo.proto\"\354\001\n\014"
    "MarketConfig\022%\n\tmarket_id\030\001 \002(\0162\022.Config"
    ".MarketType\022\014\n\004type\030\002 \002(\005\022\031\n\013count_group"
    "\030\003 \003(\005B\004\300\363\030\006\022\025\n\rrefresh_token\030\004 \002(\005\022\023\n\013t"
    "oken_count\030\005 \002(\005\022\025\n\rrefresh_count\030\006 \002(\005\022"
    "\022\n\nrefresh_cd\030\007 \002(\005\022\024\n\014refresh_rate\030\010 \002("
    "\005\022\021\n\tgen_level\030\t \002(\005\022\014\n\004open\030\n \002(\005\"\243\002\n\020M"
    "arketItemConfig\022\n\n\002id\030\001 \002(\005\022%\n\tmarket_id"
    "\030\002 \002(\0162\022.Config.MarketType\022,\n\013count_grou"
    "p\030\003 \002(\0162\027.Config.MarketItemGroup\022\022\n\nopen"
    "_level\030\004 \002(\005\022\021\n\toff_level\030\005 \002(\005\022\022\n\ngen_w"
    "eight\030\006 \002(\005\022\017\n\007item_id\030\007 \002(\005\022\022\n\nitem_cou"
    "nt\030\010 \002(\005\022\022\n\nprice_type\030\t \002(\005\022\023\n\013price_va"
    "lue\030\n \002(\005\022\027\n\017day_limit_count\030\013 \002(\005\022\014\n\004op"
    "en\030\014 \002(\005\"\232\001\n\020ChargeItemConfig\022\n\n\002id\030\001 \002("
    "\005\022\022\n\ngroup_type\030\002 \002(\t\022\022\n\nprice_type\030\003 \002("
    "\t\022\024\n\014effect_value\030\004 \002(\005\022\024\n\014effect_count\030"
    "\005 \002(\005\022\023\n\013extra_value\030\006 \002(\005\022\021\n\trmb_price\030"
    "\r \002(\002\"K\n\nChargeList\022\022\n\nchannel_id\030\001 \002(\t\022"
    "\025\n\rproduct_index\030\002 \002(\005\022\022\n\nproduct_id\030\003 \002"
    "(\t", 882);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MarketConfig.proto", &protobuf_RegisterTypes);
  MarketConfig::default_instance_ = new MarketConfig();
  MarketItemConfig::default_instance_ = new MarketItemConfig();
  ChargeItemConfig::default_instance_ = new ChargeItemConfig();
  ChargeList::default_instance_ = new ChargeList();
  MarketConfig::default_instance_->InitAsDefaultInstance();
  MarketItemConfig::default_instance_->InitAsDefaultInstance();
  ChargeItemConfig::default_instance_->InitAsDefaultInstance();
  ChargeList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MarketConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MarketConfig_2eproto {
  StaticDescriptorInitializer_MarketConfig_2eproto() {
    protobuf_AddDesc_MarketConfig_2eproto();
  }
} static_descriptor_initializer_MarketConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MarketConfig::kMarketIdFieldNumber;
const int MarketConfig::kTypeFieldNumber;
const int MarketConfig::kCountGroupFieldNumber;
const int MarketConfig::kRefreshTokenFieldNumber;
const int MarketConfig::kTokenCountFieldNumber;
const int MarketConfig::kRefreshCountFieldNumber;
const int MarketConfig::kRefreshCdFieldNumber;
const int MarketConfig::kRefreshRateFieldNumber;
const int MarketConfig::kGenLevelFieldNumber;
const int MarketConfig::kOpenFieldNumber;
#endif  // !_MSC_VER

MarketConfig::MarketConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarketConfig::InitAsDefaultInstance() {
}

MarketConfig::MarketConfig(const MarketConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarketConfig::SharedCtor() {
  _cached_size_ = 0;
  market_id_ = -1;
  type_ = 0;
  refresh_token_ = 0;
  token_count_ = 0;
  refresh_count_ = 0;
  refresh_cd_ = 0;
  refresh_rate_ = 0;
  gen_level_ = 0;
  open_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketConfig::~MarketConfig() {
  SharedDtor();
}

void MarketConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketConfig_descriptor_;
}

const MarketConfig& MarketConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MarketConfig_2eproto();
  return *default_instance_;
}

MarketConfig* MarketConfig::default_instance_ = NULL;

MarketConfig* MarketConfig::New() const {
  return new MarketConfig;
}

void MarketConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    market_id_ = -1;
    type_ = 0;
    refresh_token_ = 0;
    token_count_ = 0;
    refresh_count_ = 0;
    refresh_cd_ = 0;
    refresh_rate_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    gen_level_ = 0;
    open_ = 0;
  }
  count_group_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool MarketConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Config.MarketType market_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Config::MarketType_IsValid(value)) {
            set_market_id(static_cast< ::Config::MarketType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count_group;
        break;
      }

      // repeated int32 count_group = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_count_group())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_count_group())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count_group;
        if (input->ExpectTag(32)) goto parse_refresh_token;
        break;
      }

      // required int32 refresh_token = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refresh_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refresh_token_)));
          set_has_refresh_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_token_count;
        break;
      }

      // required int32 token_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &token_count_)));
          set_has_token_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_refresh_count;
        break;
      }

      // required int32 refresh_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refresh_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refresh_count_)));
          set_has_refresh_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_refresh_cd;
        break;
      }

      // required int32 refresh_cd = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refresh_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refresh_cd_)));
          set_has_refresh_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_refresh_rate;
        break;
      }

      // required int32 refresh_rate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refresh_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refresh_rate_)));
          set_has_refresh_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_gen_level;
        break;
      }

      // required int32 gen_level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gen_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gen_level_)));
          set_has_gen_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_open;
        break;
      }

      // required int32 open = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void MarketConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Config.MarketType market_id = 1;
  if (has_market_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->market_id(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // repeated int32 count_group = 3;
  for (int i = 0; i < this->count_group_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->count_group(i), output);
  }

  // required int32 refresh_token = 4;
  if (has_refresh_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->refresh_token(), output);
  }

  // required int32 token_count = 5;
  if (has_token_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->token_count(), output);
  }

  // required int32 refresh_count = 6;
  if (has_refresh_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->refresh_count(), output);
  }

  // required int32 refresh_cd = 7;
  if (has_refresh_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->refresh_cd(), output);
  }

  // required int32 refresh_rate = 8;
  if (has_refresh_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->refresh_rate(), output);
  }

  // required int32 gen_level = 9;
  if (has_gen_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->gen_level(), output);
  }

  // required int32 open = 10;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->open(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarketConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Config.MarketType market_id = 1;
  if (has_market_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->market_id(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // repeated int32 count_group = 3;
  for (int i = 0; i < this->count_group_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->count_group(i), target);
  }

  // required int32 refresh_token = 4;
  if (has_refresh_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->refresh_token(), target);
  }

  // required int32 token_count = 5;
  if (has_token_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->token_count(), target);
  }

  // required int32 refresh_count = 6;
  if (has_refresh_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->refresh_count(), target);
  }

  // required int32 refresh_cd = 7;
  if (has_refresh_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->refresh_cd(), target);
  }

  // required int32 refresh_rate = 8;
  if (has_refresh_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->refresh_rate(), target);
  }

  // required int32 gen_level = 9;
  if (has_gen_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->gen_level(), target);
  }

  // required int32 open = 10;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->open(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarketConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Config.MarketType market_id = 1;
    if (has_market_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->market_id());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 refresh_token = 4;
    if (has_refresh_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refresh_token());
    }

    // required int32 token_count = 5;
    if (has_token_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->token_count());
    }

    // required int32 refresh_count = 6;
    if (has_refresh_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refresh_count());
    }

    // required int32 refresh_cd = 7;
    if (has_refresh_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refresh_cd());
    }

    // required int32 refresh_rate = 8;
    if (has_refresh_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refresh_rate());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 gen_level = 9;
    if (has_gen_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gen_level());
    }

    // required int32 open = 10;
    if (has_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open());
    }

  }
  // repeated int32 count_group = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->count_group_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->count_group(i));
    }
    total_size += 1 * this->count_group_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void MarketConfig::MergeFrom(const MarketConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  count_group_.MergeFrom(from.count_group_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_market_id()) {
      set_market_id(from.market_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_refresh_token()) {
      set_refresh_token(from.refresh_token());
    }
    if (from.has_token_count()) {
      set_token_count(from.token_count());
    }
    if (from.has_refresh_count()) {
      set_refresh_count(from.refresh_count());
    }
    if (from.has_refresh_cd()) {
      set_refresh_cd(from.refresh_cd());
    }
    if (from.has_refresh_rate()) {
      set_refresh_rate(from.refresh_rate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gen_level()) {
      set_gen_level(from.gen_level());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void MarketConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void MarketConfig::CopyFrom(const MarketConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool MarketConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003fb) != 0x000003fb) return false;

  return true;
}

void MarketConfig::SetInitialized() {
  _has_bits_[0] |= 0x000003fb;

  return;
}

void MarketConfig::Swap(MarketConfig* other) {
  if (other != this) {
    std::swap(market_id_, other->market_id_);
    std::swap(type_, other->type_);
    count_group_.Swap(&other->count_group_);
    std::swap(refresh_token_, other->refresh_token_);
    std::swap(token_count_, other->token_count_);
    std::swap(refresh_count_, other->refresh_count_);
    std::swap(refresh_cd_, other->refresh_cd_);
    std::swap(refresh_rate_, other->refresh_rate_);
    std::swap(gen_level_, other->gen_level_);
    std::swap(open_, other->open_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata MarketConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketConfig_descriptor_;
  metadata.reflection = MarketConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketItemConfig::kIdFieldNumber;
const int MarketItemConfig::kMarketIdFieldNumber;
const int MarketItemConfig::kCountGroupFieldNumber;
const int MarketItemConfig::kOpenLevelFieldNumber;
const int MarketItemConfig::kOffLevelFieldNumber;
const int MarketItemConfig::kGenWeightFieldNumber;
const int MarketItemConfig::kItemIdFieldNumber;
const int MarketItemConfig::kItemCountFieldNumber;
const int MarketItemConfig::kPriceTypeFieldNumber;
const int MarketItemConfig::kPriceValueFieldNumber;
const int MarketItemConfig::kDayLimitCountFieldNumber;
const int MarketItemConfig::kOpenFieldNumber;
#endif  // !_MSC_VER

MarketItemConfig::MarketItemConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarketItemConfig::InitAsDefaultInstance() {
}

MarketItemConfig::MarketItemConfig(const MarketItemConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarketItemConfig::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  market_id_ = -1;
  count_group_ = -1;
  open_level_ = 0;
  off_level_ = 0;
  gen_weight_ = 0;
  item_id_ = 0;
  item_count_ = 0;
  price_type_ = 0;
  price_value_ = 0;
  day_limit_count_ = 0;
  open_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketItemConfig::~MarketItemConfig() {
  SharedDtor();
}

void MarketItemConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketItemConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketItemConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketItemConfig_descriptor_;
}

const MarketItemConfig& MarketItemConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MarketConfig_2eproto();
  return *default_instance_;
}

MarketItemConfig* MarketItemConfig::default_instance_ = NULL;

MarketItemConfig* MarketItemConfig::New() const {
  return new MarketItemConfig;
}

void MarketItemConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    market_id_ = -1;
    count_group_ = -1;
    open_level_ = 0;
    off_level_ = 0;
    gen_weight_ = 0;
    item_id_ = 0;
    item_count_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    price_type_ = 0;
    price_value_ = 0;
    day_limit_count_ = 0;
    open_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool MarketItemConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_market_id;
        break;
      }

      // required .Config.MarketType market_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_market_id:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Config::MarketType_IsValid(value)) {
            set_market_id(static_cast< ::Config::MarketType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count_group;
        break;
      }

      // required .Config.MarketItemGroup count_group = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_group:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Config::MarketItemGroup_IsValid(value)) {
            set_count_group(static_cast< ::Config::MarketItemGroup >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_open_level;
        break;
      }

      // required int32 open_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_level_)));
          set_has_open_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_off_level;
        break;
      }

      // required int32 off_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_off_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &off_level_)));
          set_has_off_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gen_weight;
        break;
      }

      // required int32 gen_weight = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gen_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gen_weight_)));
          set_has_gen_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_item_id;
        break;
      }

      // required int32 item_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_item_count;
        break;
      }

      // required int32 item_count = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_price_type;
        break;
      }

      // required int32 price_type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_type_)));
          set_has_price_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_price_value;
        break;
      }

      // required int32 price_value = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_value_)));
          set_has_price_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_day_limit_count;
        break;
      }

      // required int32 day_limit_count = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day_limit_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_limit_count_)));
          set_has_day_limit_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_open;
        break;
      }

      // required int32 open = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void MarketItemConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .Config.MarketType market_id = 2;
  if (has_market_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->market_id(), output);
  }

  // required .Config.MarketItemGroup count_group = 3;
  if (has_count_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->count_group(), output);
  }

  // required int32 open_level = 4;
  if (has_open_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->open_level(), output);
  }

  // required int32 off_level = 5;
  if (has_off_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->off_level(), output);
  }

  // required int32 gen_weight = 6;
  if (has_gen_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gen_weight(), output);
  }

  // required int32 item_id = 7;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->item_id(), output);
  }

  // required int32 item_count = 8;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->item_count(), output);
  }

  // required int32 price_type = 9;
  if (has_price_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->price_type(), output);
  }

  // required int32 price_value = 10;
  if (has_price_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->price_value(), output);
  }

  // required int32 day_limit_count = 11;
  if (has_day_limit_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->day_limit_count(), output);
  }

  // required int32 open = 12;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->open(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarketItemConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .Config.MarketType market_id = 2;
  if (has_market_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->market_id(), target);
  }

  // required .Config.MarketItemGroup count_group = 3;
  if (has_count_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->count_group(), target);
  }

  // required int32 open_level = 4;
  if (has_open_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->open_level(), target);
  }

  // required int32 off_level = 5;
  if (has_off_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->off_level(), target);
  }

  // required int32 gen_weight = 6;
  if (has_gen_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gen_weight(), target);
  }

  // required int32 item_id = 7;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->item_id(), target);
  }

  // required int32 item_count = 8;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->item_count(), target);
  }

  // required int32 price_type = 9;
  if (has_price_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->price_type(), target);
  }

  // required int32 price_value = 10;
  if (has_price_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->price_value(), target);
  }

  // required int32 day_limit_count = 11;
  if (has_day_limit_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->day_limit_count(), target);
  }

  // required int32 open = 12;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->open(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarketItemConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required .Config.MarketType market_id = 2;
    if (has_market_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->market_id());
    }

    // required .Config.MarketItemGroup count_group = 3;
    if (has_count_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->count_group());
    }

    // required int32 open_level = 4;
    if (has_open_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open_level());
    }

    // required int32 off_level = 5;
    if (has_off_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->off_level());
    }

    // required int32 gen_weight = 6;
    if (has_gen_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gen_weight());
    }

    // required int32 item_id = 7;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

    // required int32 item_count = 8;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 price_type = 9;
    if (has_price_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_type());
    }

    // required int32 price_value = 10;
    if (has_price_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_value());
    }

    // required int32 day_limit_count = 11;
    if (has_day_limit_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day_limit_count());
    }

    // required int32 open = 12;
    if (has_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketItemConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketItemConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketItemConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void MarketItemConfig::MergeFrom(const MarketItemConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_market_id()) {
      set_market_id(from.market_id());
    }
    if (from.has_count_group()) {
      set_count_group(from.count_group());
    }
    if (from.has_open_level()) {
      set_open_level(from.open_level());
    }
    if (from.has_off_level()) {
      set_off_level(from.off_level());
    }
    if (from.has_gen_weight()) {
      set_gen_weight(from.gen_weight());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_price_type()) {
      set_price_type(from.price_type());
    }
    if (from.has_price_value()) {
      set_price_value(from.price_value());
    }
    if (from.has_day_limit_count()) {
      set_day_limit_count(from.day_limit_count());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void MarketItemConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void MarketItemConfig::CopyFrom(const MarketItemConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool MarketItemConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  return true;
}

void MarketItemConfig::SetInitialized() {
  _has_bits_[0] |= 0x00000fff;

  return;
}

void MarketItemConfig::Swap(MarketItemConfig* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(market_id_, other->market_id_);
    std::swap(count_group_, other->count_group_);
    std::swap(open_level_, other->open_level_);
    std::swap(off_level_, other->off_level_);
    std::swap(gen_weight_, other->gen_weight_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_count_, other->item_count_);
    std::swap(price_type_, other->price_type_);
    std::swap(price_value_, other->price_value_);
    std::swap(day_limit_count_, other->day_limit_count_);
    std::swap(open_, other->open_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata MarketItemConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketItemConfig_descriptor_;
  metadata.reflection = MarketItemConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChargeItemConfig::kIdFieldNumber;
const int ChargeItemConfig::kGroupTypeFieldNumber;
const int ChargeItemConfig::kPriceTypeFieldNumber;
const int ChargeItemConfig::kEffectValueFieldNumber;
const int ChargeItemConfig::kEffectCountFieldNumber;
const int ChargeItemConfig::kExtraValueFieldNumber;
const int ChargeItemConfig::kRmbPriceFieldNumber;
#endif  // !_MSC_VER

ChargeItemConfig::ChargeItemConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChargeItemConfig::InitAsDefaultInstance() {
}

ChargeItemConfig::ChargeItemConfig(const ChargeItemConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChargeItemConfig::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  group_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  price_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  effect_value_ = 0;
  effect_count_ = 0;
  extra_value_ = 0;
  rmb_price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChargeItemConfig::~ChargeItemConfig() {
  SharedDtor();
}

void ChargeItemConfig::SharedDtor() {
  if (group_type_ != &::google::protobuf::internal::kEmptyString) {
    delete group_type_;
  }
  if (price_type_ != &::google::protobuf::internal::kEmptyString) {
    delete price_type_;
  }
  if (this != default_instance_) {
  }
}

void ChargeItemConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChargeItemConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChargeItemConfig_descriptor_;
}

const ChargeItemConfig& ChargeItemConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MarketConfig_2eproto();
  return *default_instance_;
}

ChargeItemConfig* ChargeItemConfig::default_instance_ = NULL;

ChargeItemConfig* ChargeItemConfig::New() const {
  return new ChargeItemConfig;
}

void ChargeItemConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_group_type()) {
      if (group_type_ != &::google::protobuf::internal::kEmptyString) {
        group_type_->clear();
      }
    }
    if (has_price_type()) {
      if (price_type_ != &::google::protobuf::internal::kEmptyString) {
        price_type_->clear();
      }
    }
    effect_value_ = 0;
    effect_count_ = 0;
    extra_value_ = 0;
    rmb_price_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ChargeItemConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_group_type;
        break;
      }

      // required string group_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->group_type().data(), this->group_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_price_type;
        break;
      }

      // required string price_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_price_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_price_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->price_type().data(), this->price_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_effect_value;
        break;
      }

      // required int32 effect_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effect_value_)));
          set_has_effect_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_effect_count;
        break;
      }

      // required int32 effect_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effect_count_)));
          set_has_effect_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_extra_value;
        break;
      }

      // required int32 extra_value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extra_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extra_value_)));
          set_has_extra_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_rmb_price;
        break;
      }

      // required float rmb_price = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rmb_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rmb_price_)));
          set_has_rmb_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ChargeItemConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string group_type = 2;
  if (has_group_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_type().data(), this->group_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->group_type(), output);
  }

  // required string price_type = 3;
  if (has_price_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->price_type().data(), this->price_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->price_type(), output);
  }

  // required int32 effect_value = 4;
  if (has_effect_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->effect_value(), output);
  }

  // required int32 effect_count = 5;
  if (has_effect_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->effect_count(), output);
  }

  // required int32 extra_value = 6;
  if (has_extra_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->extra_value(), output);
  }

  // required float rmb_price = 13;
  if (has_rmb_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->rmb_price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChargeItemConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string group_type = 2;
  if (has_group_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_type().data(), this->group_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->group_type(), target);
  }

  // required string price_type = 3;
  if (has_price_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->price_type().data(), this->price_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->price_type(), target);
  }

  // required int32 effect_value = 4;
  if (has_effect_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->effect_value(), target);
  }

  // required int32 effect_count = 5;
  if (has_effect_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->effect_count(), target);
  }

  // required int32 extra_value = 6;
  if (has_extra_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->extra_value(), target);
  }

  // required float rmb_price = 13;
  if (has_rmb_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->rmb_price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChargeItemConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string group_type = 2;
    if (has_group_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_type());
    }

    // required string price_type = 3;
    if (has_price_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->price_type());
    }

    // required int32 effect_value = 4;
    if (has_effect_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effect_value());
    }

    // required int32 effect_count = 5;
    if (has_effect_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effect_count());
    }

    // required int32 extra_value = 6;
    if (has_extra_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extra_value());
    }

    // required float rmb_price = 13;
    if (has_rmb_price()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChargeItemConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChargeItemConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChargeItemConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ChargeItemConfig::MergeFrom(const ChargeItemConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_group_type()) {
      set_group_type(from.group_type());
    }
    if (from.has_price_type()) {
      set_price_type(from.price_type());
    }
    if (from.has_effect_value()) {
      set_effect_value(from.effect_value());
    }
    if (from.has_effect_count()) {
      set_effect_count(from.effect_count());
    }
    if (from.has_extra_value()) {
      set_extra_value(from.extra_value());
    }
    if (from.has_rmb_price()) {
      set_rmb_price(from.rmb_price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ChargeItemConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ChargeItemConfig::CopyFrom(const ChargeItemConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ChargeItemConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void ChargeItemConfig::SetInitialized() {
  _has_bits_[0] |= 0x0000007f;

  return;
}

void ChargeItemConfig::Swap(ChargeItemConfig* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(group_type_, other->group_type_);
    std::swap(price_type_, other->price_type_);
    std::swap(effect_value_, other->effect_value_);
    std::swap(effect_count_, other->effect_count_);
    std::swap(extra_value_, other->extra_value_);
    std::swap(rmb_price_, other->rmb_price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ChargeItemConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChargeItemConfig_descriptor_;
  metadata.reflection = ChargeItemConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChargeList::kChannelIdFieldNumber;
const int ChargeList::kProductIndexFieldNumber;
const int ChargeList::kProductIdFieldNumber;
#endif  // !_MSC_VER

ChargeList::ChargeList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChargeList::InitAsDefaultInstance() {
}

ChargeList::ChargeList(const ChargeList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChargeList::SharedCtor() {
  _cached_size_ = 0;
  channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  product_index_ = 0;
  product_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChargeList::~ChargeList() {
  SharedDtor();
}

void ChargeList::SharedDtor() {
  if (channel_id_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_id_;
  }
  if (product_id_ != &::google::protobuf::internal::kEmptyString) {
    delete product_id_;
  }
  if (this != default_instance_) {
  }
}

void ChargeList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChargeList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChargeList_descriptor_;
}

const ChargeList& ChargeList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MarketConfig_2eproto();
  return *default_instance_;
}

ChargeList* ChargeList::default_instance_ = NULL;

ChargeList* ChargeList::New() const {
  return new ChargeList;
}

void ChargeList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_channel_id()) {
      if (channel_id_ != &::google::protobuf::internal::kEmptyString) {
        channel_id_->clear();
      }
    }
    product_index_ = 0;
    if (has_product_id()) {
      if (product_id_ != &::google::protobuf::internal::kEmptyString) {
        product_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ChargeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string channel_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_id().data(), this->channel_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_product_index;
        break;
      }

      // required int32 product_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_product_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &product_index_)));
          set_has_product_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_product_id;
        break;
      }

      // required string product_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_product_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->product_id().data(), this->product_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ChargeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string channel_id = 1;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_id().data(), this->channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->channel_id(), output);
  }

  // required int32 product_index = 2;
  if (has_product_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->product_index(), output);
  }

  // required string product_id = 3;
  if (has_product_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->product_id().data(), this->product_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->product_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChargeList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string channel_id = 1;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_id().data(), this->channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel_id(), target);
  }

  // required int32 product_index = 2;
  if (has_product_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->product_index(), target);
  }

  // required string product_id = 3;
  if (has_product_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->product_id().data(), this->product_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->product_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChargeList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string channel_id = 1;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_id());
    }

    // required int32 product_index = 2;
    if (has_product_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->product_index());
    }

    // required string product_id = 3;
    if (has_product_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->product_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChargeList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChargeList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChargeList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ChargeList::MergeFrom(const ChargeList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_product_index()) {
      set_product_index(from.product_index());
    }
    if (from.has_product_id()) {
      set_product_id(from.product_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ChargeList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ChargeList::CopyFrom(const ChargeList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ChargeList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ChargeList::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  return;
}

void ChargeList::Swap(ChargeList* other) {
  if (other != this) {
    std::swap(channel_id_, other->channel_id_);
    std::swap(product_index_, other->product_index_);
    std::swap(product_id_, other->product_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ChargeList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChargeList_descriptor_;
  metadata.reflection = ChargeList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config

// @@protoc_insertion_point(global_scope)
