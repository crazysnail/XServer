// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EquipmentConfig.proto
#include "EquipmentConfig.pb.h"
#include "EquipmentConfig.proto.fflua.h"
namespace Config {
bool EquipmentConfig_fflua_reg(lua_State* state)
{
//for decltype
	EquipmentConfig* message(nullptr);
	message;
	ff::fflua_register_t<EquipmentConfig, ctor()>(state, "EquipmentConfig", "google::protobuf::Message")
		// required int32 id = 1;
		.def(&EquipmentConfig::id, "id")
		.def(&EquipmentConfig::set_id, "set_id")
		// required .Config.EquipmentType type = 2;
		.def(&EquipmentConfig::type, "type")
		.def(&EquipmentConfig::set_type, "set_type")
		// required .Config.WeaponType weapon_type = 3;
		.def(&EquipmentConfig::weapon_type, "weapon_type")
		.def(&EquipmentConfig::set_weapon_type, "set_weapon_type")
		// required .Config.EquipmentColor color = 4;
		.def(&EquipmentConfig::color, "color")
		.def(&EquipmentConfig::set_color, "set_color")
		// repeated .Packet.Race race_limit = 5;
		.def(&EquipmentConfig::race_limit_size, "race_limit_size")
		.def<decltype(message->race_limit(0)) (EquipmentConfig::*)(int) const>(&EquipmentConfig::race_limit, "race_limit")
		.def(&EquipmentConfig::set_race_limit, "set_race_limit")
		.def(&EquipmentConfig::add_race_limit, "add_race_limit")
		// repeated .Packet.Professions prof_limit = 6;
		.def(&EquipmentConfig::prof_limit_size, "prof_limit_size")
		.def<decltype(message->prof_limit(0)) (EquipmentConfig::*)(int) const>(&EquipmentConfig::prof_limit, "prof_limit")
		.def(&EquipmentConfig::set_prof_limit, "set_prof_limit")
		.def(&EquipmentConfig::add_prof_limit, "add_prof_limit")
		// repeated .Packet.Talent talent_limit = 7;
		.def(&EquipmentConfig::talent_limit_size, "talent_limit_size")
		.def<decltype(message->talent_limit(0)) (EquipmentConfig::*)(int) const>(&EquipmentConfig::talent_limit, "talent_limit")
		.def(&EquipmentConfig::set_talent_limit, "set_talent_limit")
		.def(&EquipmentConfig::add_talent_limit, "add_talent_limit")
		// required int32 level_limit = 8;
		.def(&EquipmentConfig::level_limit, "level_limit")
		.def(&EquipmentConfig::set_level_limit, "set_level_limit")
		// required int32 init_durable = 9;
		.def(&EquipmentConfig::init_durable, "init_durable")
		.def(&EquipmentConfig::set_init_durable, "set_init_durable")
		// required int32 suit_group_id = 10;
		.def(&EquipmentConfig::suit_group_id, "suit_group_id")
		.def(&EquipmentConfig::set_suit_group_id, "set_suit_group_id")
		// required .Packet.BattleInfo property_effect = 11;
		.def(&EquipmentConfig::property_effect, "property_effect")
		.def(&EquipmentConfig::mutable_property_effect, "mutable_property_effect")
		// required string strength_type = 12;
		.def(&EquipmentConfig::strength_type, "strength_type")
		.def<void (EquipmentConfig::*)(const std::string&)>(&EquipmentConfig::set_strength_type, "set_strength_type")
		// required float strength_value = 13;
		.def(&EquipmentConfig::strength_value, "strength_value")
		.def(&EquipmentConfig::set_strength_value, "set_strength_value")
		// required int32 gem_slot_count = 14;
		.def(&EquipmentConfig::gem_slot_count, "gem_slot_count")
		.def(&EquipmentConfig::set_gem_slot_count, "set_gem_slot_count")
		// required int32 res = 15;
		.def(&EquipmentConfig::res, "res")
		.def(&EquipmentConfig::set_res, "set_res")
		.def(&EquipmentConfig::ByteSize, "ByteSize")
		.def(&EquipmentConfig::SetInitialized, "SetInitialized")
		;
	return true;
}
bool EquipFixCost_fflua_reg(lua_State* state)
{
//for decltype
	EquipFixCost* message(nullptr);
	message;
	ff::fflua_register_t<EquipFixCost, ctor()>(state, "EquipFixCost", "google::protobuf::Message")
		// required int32 level = 1;
		.def(&EquipFixCost::level, "level")
		.def(&EquipFixCost::set_level, "set_level")
		// required int32 green_fix_gold = 2;
		.def(&EquipFixCost::green_fix_gold, "green_fix_gold")
		.def(&EquipFixCost::set_green_fix_gold, "set_green_fix_gold")
		// required int32 blue_fix_gold = 3;
		.def(&EquipFixCost::blue_fix_gold, "blue_fix_gold")
		.def(&EquipFixCost::set_blue_fix_gold, "set_blue_fix_gold")
		// required int32 purple_fix_gold = 4;
		.def(&EquipFixCost::purple_fix_gold, "purple_fix_gold")
		.def(&EquipFixCost::set_purple_fix_gold, "set_purple_fix_gold")
		// required int32 orange_fix_gold = 5;
		.def(&EquipFixCost::orange_fix_gold, "orange_fix_gold")
		.def(&EquipFixCost::set_orange_fix_gold, "set_orange_fix_gold")
		// required int32 white_fix_gold = 6;
		.def(&EquipFixCost::white_fix_gold, "white_fix_gold")
		.def(&EquipFixCost::set_white_fix_gold, "set_white_fix_gold")
		.def(&EquipFixCost::ByteSize, "ByteSize")
		.def(&EquipFixCost::SetInitialized, "SetInitialized")
		;
	return true;
}
bool EquipEnhenceCost_fflua_reg(lua_State* state)
{
//for decltype
	EquipEnhenceCost* message(nullptr);
	message;
	ff::fflua_register_t<EquipEnhenceCost, ctor()>(state, "EquipEnhenceCost", "google::protobuf::Message")
		// required int32 level = 1;
		.def(&EquipEnhenceCost::level, "level")
		.def(&EquipEnhenceCost::set_level, "set_level")
		// required int32 enhence_gold = 2;
		.def(&EquipEnhenceCost::enhence_gold, "enhence_gold")
		.def(&EquipEnhenceCost::set_enhence_gold, "set_enhence_gold")
		.def(&EquipEnhenceCost::ByteSize, "ByteSize")
		.def(&EquipEnhenceCost::SetInitialized, "SetInitialized")
		;
	return true;
}
bool EquipEnchantCost_fflua_reg(lua_State* state)
{
//for decltype
	EquipEnchantCost* message(nullptr);
	message;
	ff::fflua_register_t<EquipEnchantCost, ctor()>(state, "EquipEnchantCost", "google::protobuf::Message")
		// required int32 level = 1;
		.def(&EquipEnchantCost::level, "level")
		.def(&EquipEnchantCost::set_level, "set_level")
		// required int32 enchant_item_id = 3;
		.def(&EquipEnchantCost::enchant_item_id, "enchant_item_id")
		.def(&EquipEnchantCost::set_enchant_item_id, "set_enchant_item_id")
		// required int32 enchant_item_amount = 4;
		.def(&EquipEnchantCost::enchant_item_amount, "enchant_item_amount")
		.def(&EquipEnchantCost::set_enchant_item_amount, "set_enchant_item_amount")
		// required int32 enchant_property_factor = 5;
		.def(&EquipEnchantCost::enchant_property_factor, "enchant_property_factor")
		.def(&EquipEnchantCost::set_enchant_property_factor, "set_enchant_property_factor")
		// required int32 lock_item_id = 6;
		.def(&EquipEnchantCost::lock_item_id, "lock_item_id")
		.def(&EquipEnchantCost::set_lock_item_id, "set_lock_item_id")
		// required int32 lock_item_cost_1 = 7;
		.def(&EquipEnchantCost::lock_item_cost_1, "lock_item_cost_1")
		.def(&EquipEnchantCost::set_lock_item_cost_1, "set_lock_item_cost_1")
		// required int32 lock_item_cost_2 = 8;
		.def(&EquipEnchantCost::lock_item_cost_2, "lock_item_cost_2")
		.def(&EquipEnchantCost::set_lock_item_cost_2, "set_lock_item_cost_2")
		// required int32 lock_item_cost_3 = 9;
		.def(&EquipEnchantCost::lock_item_cost_3, "lock_item_cost_3")
		.def(&EquipEnchantCost::set_lock_item_cost_3, "set_lock_item_cost_3")
		// required int32 enchant_lock_item_factor_1 = 10;
		.def(&EquipEnchantCost::enchant_lock_item_factor_1, "enchant_lock_item_factor_1")
		.def(&EquipEnchantCost::set_enchant_lock_item_factor_1, "set_enchant_lock_item_factor_1")
		// required int32 enchant_lock_item_factor_2 = 11;
		.def(&EquipEnchantCost::enchant_lock_item_factor_2, "enchant_lock_item_factor_2")
		.def(&EquipEnchantCost::set_enchant_lock_item_factor_2, "set_enchant_lock_item_factor_2")
		// required int32 enchant_lock_item_factor_3 = 12;
		.def(&EquipEnchantCost::enchant_lock_item_factor_3, "enchant_lock_item_factor_3")
		.def(&EquipEnchantCost::set_enchant_lock_item_factor_3, "set_enchant_lock_item_factor_3")
		.def(&EquipEnchantCost::ByteSize, "ByteSize")
		.def(&EquipEnchantCost::SetInitialized, "SetInitialized")
		;
	return true;
}
bool EquipDismantle_fflua_reg(lua_State* state)
{
//for decltype
	EquipDismantle* message(nullptr);
	message;
	ff::fflua_register_t<EquipDismantle, ctor()>(state, "EquipDismantle", "google::protobuf::Message")
		// required int32 level = 1;
		.def(&EquipDismantle::level, "level")
		.def(&EquipDismantle::set_level, "set_level")
		// required .Config.EquipmentColor color = 2;
		.def(&EquipDismantle::color, "color")
		.def(&EquipDismantle::set_color, "set_color")
		// repeated .Config.EquipDismantle.DismantleItem dismantle_items = 3;
		.def(&EquipDismantle::dismantle_items_size, "dismantle_items_size")
		.def<decltype(message->dismantle_items(0)) (EquipDismantle::*)(int) const>(&EquipDismantle::dismantle_items, "dismantle_items")
		.def<decltype(message->mutable_dismantle_items(0)) (EquipDismantle::*)(int)>(&EquipDismantle::mutable_dismantle_items, "mutable_dismantle_items")
		.def(&EquipDismantle::add_dismantle_items, "add_dismantle_items")
		.def(&EquipDismantle::ByteSize, "ByteSize")
		.def(&EquipDismantle::SetInitialized, "SetInitialized")
		;
	return true;
}
bool EquipmentSuitConfig_fflua_reg(lua_State* state)
{
//for decltype
	EquipmentSuitConfig* message(nullptr);
	message;
	ff::fflua_register_t<EquipmentSuitConfig, ctor()>(state, "EquipmentSuitConfig", "google::protobuf::Message")
		// required int32 id = 1;
		.def(&EquipmentSuitConfig::id, "id")
		.def(&EquipmentSuitConfig::set_id, "set_id")
		// repeated int32 part_count = 2;
		.def(&EquipmentSuitConfig::part_count_size, "part_count_size")
		.def<decltype(message->part_count(0)) (EquipmentSuitConfig::*)(int) const>(&EquipmentSuitConfig::part_count, "part_count")
		.def<void(EquipmentSuitConfig::*)(int, const decltype(message->part_count(0)))>(&EquipmentSuitConfig::set_part_count, "set_part_count")
		.def(&EquipmentSuitConfig::add_part_count, "add_part_count")
		// repeated string part_attr = 3;
		.def(&EquipmentSuitConfig::part_attr_size, "part_attr_size")
		.def<const std::string& (EquipmentSuitConfig::*)(int) const>(&EquipmentSuitConfig::part_attr, "part_attr")
		.def<void (EquipmentSuitConfig::*)(int, const std::string&)>(&EquipmentSuitConfig::set_part_attr, "set_part_attr")
		.def<void (EquipmentSuitConfig::*)(const std::string&)>(&EquipmentSuitConfig::add_part_attr, "add_part_attr")
		// repeated int32 part_value = 4;
		.def(&EquipmentSuitConfig::part_value_size, "part_value_size")
		.def<decltype(message->part_value(0)) (EquipmentSuitConfig::*)(int) const>(&EquipmentSuitConfig::part_value, "part_value")
		.def<void(EquipmentSuitConfig::*)(int, const decltype(message->part_value(0)))>(&EquipmentSuitConfig::set_part_value, "set_part_value")
		.def(&EquipmentSuitConfig::add_part_value, "add_part_value")
		.def(&EquipmentSuitConfig::ByteSize, "ByteSize")
		.def(&EquipmentSuitConfig::SetInitialized, "SetInitialized")
		;
	return true;
}
bool EnhanceMasterConfig_fflua_reg(lua_State* state)
{
//for decltype
	EnhanceMasterConfig* message(nullptr);
	message;
	ff::fflua_register_t<EnhanceMasterConfig, ctor()>(state, "EnhanceMasterConfig", "google::protobuf::Message")
		// required int32 level = 1;
		.def(&EnhanceMasterConfig::level, "level")
		.def(&EnhanceMasterConfig::set_level, "set_level")
		// repeated string attr = 2;
		.def(&EnhanceMasterConfig::attr_size, "attr_size")
		.def<const std::string& (EnhanceMasterConfig::*)(int) const>(&EnhanceMasterConfig::attr, "attr")
		.def<void (EnhanceMasterConfig::*)(int, const std::string&)>(&EnhanceMasterConfig::set_attr, "set_attr")
		.def<void (EnhanceMasterConfig::*)(const std::string&)>(&EnhanceMasterConfig::add_attr, "add_attr")
		// repeated int32 value = 3;
		.def(&EnhanceMasterConfig::value_size, "value_size")
		.def<decltype(message->value(0)) (EnhanceMasterConfig::*)(int) const>(&EnhanceMasterConfig::value, "value")
		.def<void(EnhanceMasterConfig::*)(int, const decltype(message->value(0)))>(&EnhanceMasterConfig::set_value, "set_value")
		.def(&EnhanceMasterConfig::add_value, "add_value")
		.def(&EnhanceMasterConfig::ByteSize, "ByteSize")
		.def(&EnhanceMasterConfig::SetInitialized, "SetInitialized")
		;
	return true;
}
bool EquipmentConfig_fflua_regist_all(lua_State* state)
{
	EquipmentConfig_fflua_reg(state);
	EquipFixCost_fflua_reg(state);
	EquipEnhenceCost_fflua_reg(state);
	EquipEnchantCost_fflua_reg(state);
	EquipDismantle_fflua_reg(state);
	EquipmentSuitConfig_fflua_reg(state);
	EnhanceMasterConfig_fflua_reg(state);
	return true;
}
}
