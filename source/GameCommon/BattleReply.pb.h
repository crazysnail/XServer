// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BattleReply.proto

#ifndef PROTOBUF_BattleReply_2eproto__INCLUDED
#define PROTOBUF_BattleReply_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ProtoBufOption.pb.h"
#include "AllPacketEnum.pb.h"
#include "BattleExpression.pb.h"
#include "BattleGroundInfo.pb.h"
// @@protoc_insertion_point(includes)

namespace Packet {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BattleReply_2eproto();
void protobuf_AssignDesc_BattleReply_2eproto();
void protobuf_ShutdownFile_BattleReply_2eproto();

class RawReply;
class BattleReply;
class CG_GetBattleReply;

// ===================================================================

class RawReply : public ::google::protobuf::Message {
 public:
  RawReply();
  virtual ~RawReply();

  RawReply(const RawReply& from);

  inline RawReply& operator=(const RawReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RawReply& default_instance();

  void Swap(RawReply* other);

  // implements Message ----------------------------------------------

  RawReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RawReply& from);
  void MergeFrom(const RawReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:Packet.RawReply)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_BattleReply_2eproto();
  friend void protobuf_AssignDesc_BattleReply_2eproto();
  friend void protobuf_ShutdownFile_BattleReply_2eproto();

  void InitAsDefaultInstance();
  static RawReply* default_instance_;
};
// -------------------------------------------------------------------

class BattleReply : public ::google::protobuf::Message {
 public:
  BattleReply();
  virtual ~BattleReply();

  BattleReply(const BattleReply& from);

  inline BattleReply& operator=(const BattleReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BattleReply& default_instance();

  void Swap(BattleReply* other);

  // implements Message ----------------------------------------------

  BattleReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BattleReply& from);
  void MergeFrom(const BattleReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // required .Packet.EnterBattleGroundReply enter_msg = 2;
  inline bool has_enter_msg() const;
  inline void clear_enter_msg();
  static const int kEnterMsgFieldNumber = 2;
  inline const ::Packet::EnterBattleGroundReply& enter_msg() const;
  inline ::Packet::EnterBattleGroundReply* mutable_enter_msg();
  inline ::Packet::EnterBattleGroundReply* release_enter_msg();
  inline void set_allocated_enter_msg(::Packet::EnterBattleGroundReply* enter_msg);

  // required .Packet.RawReply messages = 3;
  inline bool has_messages() const;
  inline void clear_messages();
  static const int kMessagesFieldNumber = 3;
  inline const ::Packet::RawReply& messages() const;
  inline ::Packet::RawReply* mutable_messages();
  inline ::Packet::RawReply* release_messages();
  inline void set_allocated_messages(::Packet::RawReply* messages);

  // required .Packet.BattleGroundType type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::Packet::BattleGroundType type() const;
  inline void set_type(::Packet::BattleGroundType value);

  // required .Packet.Stat stat = 5;
  inline bool has_stat() const;
  inline void clear_stat();
  static const int kStatFieldNumber = 5;
  inline const ::Packet::Stat& stat() const;
  inline ::Packet::Stat* mutable_stat();
  inline ::Packet::Stat* release_stat();
  inline void set_allocated_stat(::Packet::Stat* stat);

  // required int32 create_time = 6;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 6;
  inline ::google::protobuf::int32 create_time() const;
  inline void set_create_time(::google::protobuf::int32 value);

  // required int32 scene_id = 7;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 7;
  inline ::google::protobuf::int32 scene_id() const;
  inline void set_scene_id(::google::protobuf::int32 value);

  // required int32 battle_group_id = 8;
  inline bool has_battle_group_id() const;
  inline void clear_battle_group_id();
  static const int kBattleGroupIdFieldNumber = 8;
  inline ::google::protobuf::int32 battle_group_id() const;
  inline void set_battle_group_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.BattleReply)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_enter_msg();
  inline void clear_has_enter_msg();
  inline void set_has_messages();
  inline void clear_has_messages();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_stat();
  inline void clear_has_stat();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_battle_group_id();
  inline void clear_has_battle_group_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::Packet::EnterBattleGroundReply* enter_msg_;
  ::Packet::RawReply* messages_;
  ::Packet::Stat* stat_;
  int type_;
  ::google::protobuf::int32 create_time_;
  ::google::protobuf::int32 scene_id_;
  ::google::protobuf::int32 battle_group_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_BattleReply_2eproto();
  friend void protobuf_AssignDesc_BattleReply_2eproto();
  friend void protobuf_ShutdownFile_BattleReply_2eproto();

  void InitAsDefaultInstance();
  static BattleReply* default_instance_;
};
// -------------------------------------------------------------------

class CG_GetBattleReply : public ::google::protobuf::Message {
 public:
  CG_GetBattleReply();
  virtual ~CG_GetBattleReply();

  CG_GetBattleReply(const CG_GetBattleReply& from);

  inline CG_GetBattleReply& operator=(const CG_GetBattleReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CG_GetBattleReply& default_instance();

  void Swap(CG_GetBattleReply* other);

  // implements Message ----------------------------------------------

  CG_GetBattleReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CG_GetBattleReply& from);
  void MergeFrom(const CG_GetBattleReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Packet.CG_GetBattleReply)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_BattleReply_2eproto();
  friend void protobuf_AssignDesc_BattleReply_2eproto();
  friend void protobuf_ShutdownFile_BattleReply_2eproto();

  void InitAsDefaultInstance();
  static CG_GetBattleReply* default_instance_;
};
// ===================================================================


// ===================================================================

// RawReply

// required bytes data = 1;
inline bool RawReply::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RawReply::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RawReply::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RawReply::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
  SetDirty();
}
inline const ::std::string& RawReply::data() const {
  return *data_;
}
inline void RawReply::set_data(const ::std::string& value) {
  SetDirty();
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void RawReply::set_data(const char* value) {
  SetDirty();
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void RawReply::set_data(const void* value, size_t size) {
  SetDirty();
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RawReply::mutable_data() {
  SetDirty();
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* RawReply::release_data() {
  SetDirty();
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RawReply::set_allocated_data(::std::string* data) {
  SetDirty();
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BattleReply

// required fixed64 guid = 1;
inline bool BattleReply::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BattleReply::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BattleReply::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BattleReply::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 BattleReply::guid() const {
  return guid_;
}
inline void BattleReply::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// required .Packet.EnterBattleGroundReply enter_msg = 2;
inline bool BattleReply::has_enter_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BattleReply::set_has_enter_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BattleReply::clear_has_enter_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BattleReply::clear_enter_msg() {
  if (enter_msg_ != NULL) enter_msg_->::Packet::EnterBattleGroundReply::Clear();
  clear_has_enter_msg();
  SetDirty();
}
inline const ::Packet::EnterBattleGroundReply& BattleReply::enter_msg() const {
  return enter_msg_ != NULL ? *enter_msg_ : *default_instance_->enter_msg_;
}
inline ::Packet::EnterBattleGroundReply* BattleReply::mutable_enter_msg() {
  SetDirty();
  set_has_enter_msg();
  if (enter_msg_ == NULL) enter_msg_ = new ::Packet::EnterBattleGroundReply;
  return enter_msg_;
}
inline ::Packet::EnterBattleGroundReply* BattleReply::release_enter_msg() {
  SetDirty();
  clear_has_enter_msg();
  ::Packet::EnterBattleGroundReply* temp = enter_msg_;
  enter_msg_ = NULL;
  return temp;
}
inline void BattleReply::set_allocated_enter_msg(::Packet::EnterBattleGroundReply* enter_msg) {
  SetDirty();
  delete enter_msg_;
  enter_msg_ = enter_msg;
  if (enter_msg) {
    set_has_enter_msg();
  } else {
    clear_has_enter_msg();
  }
}

// required .Packet.RawReply messages = 3;
inline bool BattleReply::has_messages() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BattleReply::set_has_messages() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BattleReply::clear_has_messages() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BattleReply::clear_messages() {
  if (messages_ != NULL) messages_->::Packet::RawReply::Clear();
  clear_has_messages();
  SetDirty();
}
inline const ::Packet::RawReply& BattleReply::messages() const {
  return messages_ != NULL ? *messages_ : *default_instance_->messages_;
}
inline ::Packet::RawReply* BattleReply::mutable_messages() {
  SetDirty();
  set_has_messages();
  if (messages_ == NULL) messages_ = new ::Packet::RawReply;
  return messages_;
}
inline ::Packet::RawReply* BattleReply::release_messages() {
  SetDirty();
  clear_has_messages();
  ::Packet::RawReply* temp = messages_;
  messages_ = NULL;
  return temp;
}
inline void BattleReply::set_allocated_messages(::Packet::RawReply* messages) {
  SetDirty();
  delete messages_;
  messages_ = messages;
  if (messages) {
    set_has_messages();
  } else {
    clear_has_messages();
  }
}

// required .Packet.BattleGroundType type = 4;
inline bool BattleReply::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BattleReply::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BattleReply::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BattleReply::clear_type() {
  type_ = 0;
  clear_has_type();
  SetDirty();
}
inline ::Packet::BattleGroundType BattleReply::type() const {
  return static_cast< ::Packet::BattleGroundType >(type_);
}
inline void BattleReply::set_type(::Packet::BattleGroundType value) {
  assert(::Packet::BattleGroundType_IsValid(value));
  SetDirty();
  set_has_type();
  type_ = value;
}

// required .Packet.Stat stat = 5;
inline bool BattleReply::has_stat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BattleReply::set_has_stat() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BattleReply::clear_has_stat() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BattleReply::clear_stat() {
  if (stat_ != NULL) stat_->::Packet::Stat::Clear();
  clear_has_stat();
  SetDirty();
}
inline const ::Packet::Stat& BattleReply::stat() const {
  return stat_ != NULL ? *stat_ : *default_instance_->stat_;
}
inline ::Packet::Stat* BattleReply::mutable_stat() {
  SetDirty();
  set_has_stat();
  if (stat_ == NULL) stat_ = new ::Packet::Stat;
  return stat_;
}
inline ::Packet::Stat* BattleReply::release_stat() {
  SetDirty();
  clear_has_stat();
  ::Packet::Stat* temp = stat_;
  stat_ = NULL;
  return temp;
}
inline void BattleReply::set_allocated_stat(::Packet::Stat* stat) {
  SetDirty();
  delete stat_;
  stat_ = stat;
  if (stat) {
    set_has_stat();
  } else {
    clear_has_stat();
  }
}

// required int32 create_time = 6;
inline bool BattleReply::has_create_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BattleReply::set_has_create_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BattleReply::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BattleReply::clear_create_time() {
  create_time_ = 0;
  clear_has_create_time();
  SetDirty();
}
inline ::google::protobuf::int32 BattleReply::create_time() const {
  return create_time_;
}
inline void BattleReply::set_create_time(::google::protobuf::int32 value) {
  SetDirty();
  set_has_create_time();
  create_time_ = value;
}

// required int32 scene_id = 7;
inline bool BattleReply::has_scene_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BattleReply::set_has_scene_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BattleReply::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BattleReply::clear_scene_id() {
  scene_id_ = 0;
  clear_has_scene_id();
  SetDirty();
}
inline ::google::protobuf::int32 BattleReply::scene_id() const {
  return scene_id_;
}
inline void BattleReply::set_scene_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_scene_id();
  scene_id_ = value;
}

// required int32 battle_group_id = 8;
inline bool BattleReply::has_battle_group_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BattleReply::set_has_battle_group_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BattleReply::clear_has_battle_group_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BattleReply::clear_battle_group_id() {
  battle_group_id_ = 0;
  clear_has_battle_group_id();
  SetDirty();
}
inline ::google::protobuf::int32 BattleReply::battle_group_id() const {
  return battle_group_id_;
}
inline void BattleReply::set_battle_group_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_battle_group_id();
  battle_group_id_ = value;
}

// -------------------------------------------------------------------

// CG_GetBattleReply

// required fixed64 guid = 1;
inline bool CG_GetBattleReply::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CG_GetBattleReply::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CG_GetBattleReply::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CG_GetBattleReply::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 CG_GetBattleReply::guid() const {
  return guid_;
}
inline void CG_GetBattleReply::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BattleReply_2eproto__INCLUDED
