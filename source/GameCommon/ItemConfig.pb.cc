// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ItemConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ItemConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Config {

namespace {

const ::google::protobuf::Descriptor* ItemConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* GemConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GemConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* GemCostConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GemCostConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemAddLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemAddLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemDelLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemDelLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipBookConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipBookConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ItemConfig_2eproto() {
  protobuf_AddDesc_ItemConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ItemConfig.proto");
  GOOGLE_CHECK(file != NULL);
  ItemConfig_descriptor_ = file->message_type(0);
  static const int ItemConfig_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, block_max_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, can_sale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, min_level_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, max_level_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, can_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, can_destroy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, impact_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, cool_down_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, life_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, script_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, value_),
  };
  ItemConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemConfig_descriptor_,
      ItemConfig::default_instance_,
      ItemConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemConfig));
  GemConfig_descriptor_ = file->message_type(1);
  static const int GemConfig_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemConfig, property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemConfig, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemConfig, fusion_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemConfig, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemConfig, inset_locations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemConfig, block_max_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemConfig, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemConfig, coin_),
  };
  GemConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GemConfig_descriptor_,
      GemConfig::default_instance_,
      GemConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GemConfig));
  GemCostConfig_descriptor_ = file->message_type(2);
  static const int GemCostConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemCostConfig, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemCostConfig, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemCostConfig, cost_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemCostConfig, cost_count_),
  };
  GemCostConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GemCostConfig_descriptor_,
      GemCostConfig::default_instance_,
      GemCostConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemCostConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemCostConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GemCostConfig));
  ItemAddLog_descriptor_ = file->message_type(3);
  static const int ItemAddLog_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemAddLog, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemAddLog, player_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemAddLog, container_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemAddLog, add_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemAddLog, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemAddLog, item_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemAddLog, source_id_),
  };
  ItemAddLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemAddLog_descriptor_,
      ItemAddLog::default_instance_,
      ItemAddLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemAddLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemAddLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemAddLog));
  ItemDelLog_descriptor_ = file->message_type(4);
  static const int ItemDelLog_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemDelLog, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemDelLog, player_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemDelLog, container_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemDelLog, del_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemDelLog, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemDelLog, item_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemDelLog, source_id_),
  };
  ItemDelLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemDelLog_descriptor_,
      ItemDelLog::default_instance_,
      ItemDelLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemDelLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemDelLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemDelLog));
  EquipBookConfig_descriptor_ = file->message_type(5);
  static const int EquipBookConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBookConfig, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBookConfig, id_),
  };
  EquipBookConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipBookConfig_descriptor_,
      EquipBookConfig::default_instance_,
      EquipBookConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBookConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipBookConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipBookConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ItemConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemConfig_descriptor_, &ItemConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GemConfig_descriptor_, &GemConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GemCostConfig_descriptor_, &GemCostConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemAddLog_descriptor_, &ItemAddLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemDelLog_descriptor_, &ItemDelLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipBookConfig_descriptor_, &EquipBookConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ItemConfig_2eproto() {
  delete ItemConfig::default_instance_;
  delete ItemConfig_reflection_;
  delete GemConfig::default_instance_;
  delete GemConfig_reflection_;
  delete GemCostConfig::default_instance_;
  delete GemCostConfig_reflection_;
  delete ItemAddLog::default_instance_;
  delete ItemAddLog_reflection_;
  delete ItemDelLog::default_instance_;
  delete ItemDelLog_reflection_;
  delete EquipBookConfig::default_instance_;
  delete EquipBookConfig_reflection_;
}

void protobuf_AddDesc_ItemConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Config::protobuf_AddDesc_AllConfigEnum_2eproto();
  ::Packet::protobuf_AddDesc_ProtoBufOption_2eproto();
  ::Packet::protobuf_AddDesc_BattleInfo_2eproto();
  ::Config::protobuf_AddDesc_EquipmentConfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020ItemConfig.proto\022\006Config\032\023AllConfigEnu"
    "m.proto\032\024ProtoBufOption.proto\032\020BattleInf"
    "o.proto\032\025EquipmentConfig.proto\"\326\002\n\nItemC"
    "onfig\022\n\n\002id\030\001 \002(\005\022\036\n\004type\030\002 \002(\0162\020.Config"
    ".ItemType\022\017\n\007quality\030\003 \002(\005\022\027\n\017block_max_"
    "count\030\004 \002(\005\022\020\n\010can_sale\030\005 \002(\005\022\014\n\004coin\030\006 "
    "\002(\005\022\027\n\017min_level_limit\030\007 \002(\005\022\027\n\017max_leve"
    "l_limit\030\010 \002(\005\022\r\n\005level\030\t \002(\005\022\017\n\007can_use\030"
    "\n \002(\010\022\023\n\013can_destroy\030\013 \002(\010\022\016\n\006impact\030\014 \002"
    "(\005\022\021\n\tcool_down\030\r \002(\005\022\021\n\tlife_time\030\016 \002(\005"
    "\022\021\n\tscript_id\030\017 \002(\005\022\023\n\005param\030\020 \003(\005B\004\300\363\030\002"
    "\022\r\n\005value\030\021 \002(\005\"\320\001\n\tGemConfig\022\n\n\002id\030\001 \002("
    "\005\022\020\n\010property\030\002 \002(\t\022\r\n\005value\030\003 \002(\005\022\021\n\tfu"
    "sion_id\030\004 \002(\005\022\r\n\005level\030\005 \002(\005\022.\n\017inset_lo"
    "cations\030\006 \003(\0162\025.Config.EquipmentType\022\027\n\017"
    "block_max_count\030\007 \002(\005\022\017\n\007quality\030\010 \002(\005\022\014"
    "\n\004type\030\t \002(\005\022\014\n\004coin\030\n \002(\005\"S\n\rGemCostCon"
    "fig\022\r\n\005level\030\001 \002(\005\022\014\n\004rate\030\002 \002(\005\022\021\n\tcost"
    "_item\030\003 \002(\005\022\022\n\ncost_count\030\004 \002(\005\"\252\001\n\nItem"
    "AddLog\022\014\n\004guid\030\001 \002(\006\022\023\n\013player_guid\030\002 \002("
    "\006\022\026\n\016container_guid\030\003 \002(\006\022(\n\010add_type\030\004 "
    "\002(\0162\026.Config.ItemAddLogType\022\017\n\007item_id\030\005"
    " \002(\005\022\023\n\013item_amount\030\006 \002(\005\022\021\n\tsource_id\030\007"
    " \002(\006\"\252\001\n\nItemDelLog\022\014\n\004guid\030\001 \002(\006\022\023\n\013pla"
    "yer_guid\030\002 \002(\006\022\026\n\016container_guid\030\003 \002(\006\022("
    "\n\010del_type\030\004 \002(\0162\026.Config.ItemDelLogType"
    "\022\017\n\007item_id\030\005 \002(\005\022\023\n\013item_amount\030\006 \002(\005\022\021"
    "\n\tsource_id\030\007 \002(\006\",\n\017EquipBookConfig\022\r\n\005"
    "index\030\001 \002(\005\022\n\n\002id\030\002 \002(\005", 1143);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ItemConfig.proto", &protobuf_RegisterTypes);
  ItemConfig::default_instance_ = new ItemConfig();
  GemConfig::default_instance_ = new GemConfig();
  GemCostConfig::default_instance_ = new GemCostConfig();
  ItemAddLog::default_instance_ = new ItemAddLog();
  ItemDelLog::default_instance_ = new ItemDelLog();
  EquipBookConfig::default_instance_ = new EquipBookConfig();
  ItemConfig::default_instance_->InitAsDefaultInstance();
  GemConfig::default_instance_->InitAsDefaultInstance();
  GemCostConfig::default_instance_->InitAsDefaultInstance();
  ItemAddLog::default_instance_->InitAsDefaultInstance();
  ItemDelLog::default_instance_->InitAsDefaultInstance();
  EquipBookConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ItemConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ItemConfig_2eproto {
  StaticDescriptorInitializer_ItemConfig_2eproto() {
    protobuf_AddDesc_ItemConfig_2eproto();
  }
} static_descriptor_initializer_ItemConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ItemConfig::kIdFieldNumber;
const int ItemConfig::kTypeFieldNumber;
const int ItemConfig::kQualityFieldNumber;
const int ItemConfig::kBlockMaxCountFieldNumber;
const int ItemConfig::kCanSaleFieldNumber;
const int ItemConfig::kCoinFieldNumber;
const int ItemConfig::kMinLevelLimitFieldNumber;
const int ItemConfig::kMaxLevelLimitFieldNumber;
const int ItemConfig::kLevelFieldNumber;
const int ItemConfig::kCanUseFieldNumber;
const int ItemConfig::kCanDestroyFieldNumber;
const int ItemConfig::kImpactFieldNumber;
const int ItemConfig::kCoolDownFieldNumber;
const int ItemConfig::kLifeTimeFieldNumber;
const int ItemConfig::kScriptIdFieldNumber;
const int ItemConfig::kParamFieldNumber;
const int ItemConfig::kValueFieldNumber;
#endif  // !_MSC_VER

ItemConfig::ItemConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemConfig::InitAsDefaultInstance() {
}

ItemConfig::ItemConfig(const ItemConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemConfig::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = -1;
  quality_ = 0;
  block_max_count_ = 0;
  can_sale_ = 0;
  coin_ = 0;
  min_level_limit_ = 0;
  max_level_limit_ = 0;
  level_ = 0;
  can_use_ = false;
  can_destroy_ = false;
  impact_ = 0;
  cool_down_ = 0;
  life_time_ = 0;
  script_id_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemConfig::~ItemConfig() {
  SharedDtor();
}

void ItemConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemConfig_descriptor_;
}

const ItemConfig& ItemConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemConfig_2eproto();
  return *default_instance_;
}

ItemConfig* ItemConfig::default_instance_ = NULL;

ItemConfig* ItemConfig::New() const {
  return new ItemConfig;
}

void ItemConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = -1;
    quality_ = 0;
    block_max_count_ = 0;
    can_sale_ = 0;
    coin_ = 0;
    min_level_limit_ = 0;
    max_level_limit_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    level_ = 0;
    can_use_ = false;
    can_destroy_ = false;
    impact_ = 0;
    cool_down_ = 0;
    life_time_ = 0;
    script_id_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    value_ = 0;
  }
  param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ItemConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .Config.ItemType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Config::ItemType_IsValid(value)) {
            set_type(static_cast< ::Config::ItemType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_quality;
        break;
      }

      // required int32 quality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_block_max_count;
        break;
      }

      // required int32 block_max_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &block_max_count_)));
          set_has_block_max_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_can_sale;
        break;
      }

      // required int32 can_sale = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_sale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_sale_)));
          set_has_can_sale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_coin;
        break;
      }

      // required int32 coin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_min_level_limit;
        break;
      }

      // required int32 min_level_limit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_level_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_level_limit_)));
          set_has_min_level_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_max_level_limit;
        break;
      }

      // required int32 max_level_limit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_level_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_level_limit_)));
          set_has_max_level_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_level;
        break;
      }

      // required int32 level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_can_use;
        break;
      }

      // required bool can_use = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_use:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_use_)));
          set_has_can_use();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_can_destroy;
        break;
      }

      // required bool can_destroy = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_destroy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_destroy_)));
          set_has_can_destroy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_impact;
        break;
      }

      // required int32 impact = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_impact:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &impact_)));
          set_has_impact();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_cool_down;
        break;
      }

      // required int32 cool_down = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cool_down:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cool_down_)));
          set_has_cool_down();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_life_time;
        break;
      }

      // required int32 life_time = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_life_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &life_time_)));
          set_has_life_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_script_id;
        break;
      }

      // required int32 script_id = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_script_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &script_id_)));
          set_has_script_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_param;
        break;
      }

      // repeated int32 param = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 128, input, this->mutable_param())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_param())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_param;
        if (input->ExpectTag(136)) goto parse_value;
        break;
      }

      // required int32 value = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ItemConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .Config.ItemType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required int32 quality = 3;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->quality(), output);
  }

  // required int32 block_max_count = 4;
  if (has_block_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->block_max_count(), output);
  }

  // required int32 can_sale = 5;
  if (has_can_sale()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->can_sale(), output);
  }

  // required int32 coin = 6;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->coin(), output);
  }

  // required int32 min_level_limit = 7;
  if (has_min_level_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->min_level_limit(), output);
  }

  // required int32 max_level_limit = 8;
  if (has_max_level_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->max_level_limit(), output);
  }

  // required int32 level = 9;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->level(), output);
  }

  // required bool can_use = 10;
  if (has_can_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->can_use(), output);
  }

  // required bool can_destroy = 11;
  if (has_can_destroy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->can_destroy(), output);
  }

  // required int32 impact = 12;
  if (has_impact()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->impact(), output);
  }

  // required int32 cool_down = 13;
  if (has_cool_down()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->cool_down(), output);
  }

  // required int32 life_time = 14;
  if (has_life_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->life_time(), output);
  }

  // required int32 script_id = 15;
  if (has_script_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->script_id(), output);
  }

  // repeated int32 param = 16;
  for (int i = 0; i < this->param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      16, this->param(i), output);
  }

  // required int32 value = 17;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .Config.ItemType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required int32 quality = 3;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->quality(), target);
  }

  // required int32 block_max_count = 4;
  if (has_block_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->block_max_count(), target);
  }

  // required int32 can_sale = 5;
  if (has_can_sale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->can_sale(), target);
  }

  // required int32 coin = 6;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->coin(), target);
  }

  // required int32 min_level_limit = 7;
  if (has_min_level_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->min_level_limit(), target);
  }

  // required int32 max_level_limit = 8;
  if (has_max_level_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->max_level_limit(), target);
  }

  // required int32 level = 9;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->level(), target);
  }

  // required bool can_use = 10;
  if (has_can_use()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->can_use(), target);
  }

  // required bool can_destroy = 11;
  if (has_can_destroy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->can_destroy(), target);
  }

  // required int32 impact = 12;
  if (has_impact()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->impact(), target);
  }

  // required int32 cool_down = 13;
  if (has_cool_down()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->cool_down(), target);
  }

  // required int32 life_time = 14;
  if (has_life_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->life_time(), target);
  }

  // required int32 script_id = 15;
  if (has_script_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->script_id(), target);
  }

  // repeated int32 param = 16;
  for (int i = 0; i < this->param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(16, this->param(i), target);
  }

  // required int32 value = 17;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required .Config.ItemType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 quality = 3;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // required int32 block_max_count = 4;
    if (has_block_max_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->block_max_count());
    }

    // required int32 can_sale = 5;
    if (has_can_sale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_sale());
    }

    // required int32 coin = 6;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }

    // required int32 min_level_limit = 7;
    if (has_min_level_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_level_limit());
    }

    // required int32 max_level_limit = 8;
    if (has_max_level_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_level_limit());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 level = 9;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required bool can_use = 10;
    if (has_can_use()) {
      total_size += 1 + 1;
    }

    // required bool can_destroy = 11;
    if (has_can_destroy()) {
      total_size += 1 + 1;
    }

    // required int32 impact = 12;
    if (has_impact()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->impact());
    }

    // required int32 cool_down = 13;
    if (has_cool_down()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cool_down());
    }

    // required int32 life_time = 14;
    if (has_life_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->life_time());
    }

    // required int32 script_id = 15;
    if (has_script_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->script_id());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 value = 17;
    if (has_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  // repeated int32 param = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->param_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->param(i));
    }
    total_size += 2 * this->param_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ItemConfig::MergeFrom(const ItemConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  param_.MergeFrom(from.param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_block_max_count()) {
      set_block_max_count(from.block_max_count());
    }
    if (from.has_can_sale()) {
      set_can_sale(from.can_sale());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_min_level_limit()) {
      set_min_level_limit(from.min_level_limit());
    }
    if (from.has_max_level_limit()) {
      set_max_level_limit(from.max_level_limit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_can_use()) {
      set_can_use(from.can_use());
    }
    if (from.has_can_destroy()) {
      set_can_destroy(from.can_destroy());
    }
    if (from.has_impact()) {
      set_impact(from.impact());
    }
    if (from.has_cool_down()) {
      set_cool_down(from.cool_down());
    }
    if (from.has_life_time()) {
      set_life_time(from.life_time());
    }
    if (from.has_script_id()) {
      set_script_id(from.script_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ItemConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ItemConfig::CopyFrom(const ItemConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ItemConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00017fff) != 0x00017fff) return false;

  return true;
}

void ItemConfig::SetInitialized() {
  _has_bits_[0] |= 0x00017fff;

  return;
}

void ItemConfig::Swap(ItemConfig* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(quality_, other->quality_);
    std::swap(block_max_count_, other->block_max_count_);
    std::swap(can_sale_, other->can_sale_);
    std::swap(coin_, other->coin_);
    std::swap(min_level_limit_, other->min_level_limit_);
    std::swap(max_level_limit_, other->max_level_limit_);
    std::swap(level_, other->level_);
    std::swap(can_use_, other->can_use_);
    std::swap(can_destroy_, other->can_destroy_);
    std::swap(impact_, other->impact_);
    std::swap(cool_down_, other->cool_down_);
    std::swap(life_time_, other->life_time_);
    std::swap(script_id_, other->script_id_);
    param_.Swap(&other->param_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ItemConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemConfig_descriptor_;
  metadata.reflection = ItemConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GemConfig::kIdFieldNumber;
const int GemConfig::kPropertyFieldNumber;
const int GemConfig::kValueFieldNumber;
const int GemConfig::kFusionIdFieldNumber;
const int GemConfig::kLevelFieldNumber;
const int GemConfig::kInsetLocationsFieldNumber;
const int GemConfig::kBlockMaxCountFieldNumber;
const int GemConfig::kQualityFieldNumber;
const int GemConfig::kTypeFieldNumber;
const int GemConfig::kCoinFieldNumber;
#endif  // !_MSC_VER

GemConfig::GemConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GemConfig::InitAsDefaultInstance() {
}

GemConfig::GemConfig(const GemConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GemConfig::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  property_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = 0;
  fusion_id_ = 0;
  level_ = 0;
  block_max_count_ = 0;
  quality_ = 0;
  type_ = 0;
  coin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GemConfig::~GemConfig() {
  SharedDtor();
}

void GemConfig::SharedDtor() {
  if (property_ != &::google::protobuf::internal::kEmptyString) {
    delete property_;
  }
  if (this != default_instance_) {
  }
}

void GemConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GemConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GemConfig_descriptor_;
}

const GemConfig& GemConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemConfig_2eproto();
  return *default_instance_;
}

GemConfig* GemConfig::default_instance_ = NULL;

GemConfig* GemConfig::New() const {
  return new GemConfig;
}

void GemConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_property()) {
      if (property_ != &::google::protobuf::internal::kEmptyString) {
        property_->clear();
      }
    }
    value_ = 0;
    fusion_id_ = 0;
    level_ = 0;
    block_max_count_ = 0;
    quality_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    type_ = 0;
    coin_ = 0;
  }
  inset_locations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GemConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_property;
        break;
      }

      // required string property = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_property:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_property()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->property().data(), this->property().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // required int32 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fusion_id;
        break;
      }

      // required int32 fusion_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fusion_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fusion_id_)));
          set_has_fusion_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // required int32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_inset_locations;
        break;
      }

      // repeated .Config.EquipmentType inset_locations = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inset_locations:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Config::EquipmentType_IsValid(value)) {
            add_inset_locations(static_cast< ::Config::EquipmentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::Config::EquipmentType_IsValid,
                 this->mutable_inset_locations())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_inset_locations;
        if (input->ExpectTag(56)) goto parse_block_max_count;
        break;
      }

      // required int32 block_max_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &block_max_count_)));
          set_has_block_max_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_quality;
        break;
      }

      // required int32 quality = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_type;
        break;
      }

      // required int32 type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_coin;
        break;
      }

      // required int32 coin = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GemConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string property = 2;
  if (has_property()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->property().data(), this->property().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->property(), output);
  }

  // required int32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->value(), output);
  }

  // required int32 fusion_id = 4;
  if (has_fusion_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fusion_id(), output);
  }

  // required int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // repeated .Config.EquipmentType inset_locations = 6;
  for (int i = 0; i < this->inset_locations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->inset_locations(i), output);
  }

  // required int32 block_max_count = 7;
  if (has_block_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->block_max_count(), output);
  }

  // required int32 quality = 8;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->quality(), output);
  }

  // required int32 type = 9;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->type(), output);
  }

  // required int32 coin = 10;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->coin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GemConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string property = 2;
  if (has_property()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->property().data(), this->property().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->property(), target);
  }

  // required int32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->value(), target);
  }

  // required int32 fusion_id = 4;
  if (has_fusion_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fusion_id(), target);
  }

  // required int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  // repeated .Config.EquipmentType inset_locations = 6;
  for (int i = 0; i < this->inset_locations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->inset_locations(i), target);
  }

  // required int32 block_max_count = 7;
  if (has_block_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->block_max_count(), target);
  }

  // required int32 quality = 8;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->quality(), target);
  }

  // required int32 type = 9;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->type(), target);
  }

  // required int32 coin = 10;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->coin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GemConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string property = 2;
    if (has_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->property());
    }

    // required int32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

    // required int32 fusion_id = 4;
    if (has_fusion_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fusion_id());
    }

    // required int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 block_max_count = 7;
    if (has_block_max_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->block_max_count());
    }

    // required int32 quality = 8;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 type = 9;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 coin = 10;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coin());
    }

  }
  // repeated .Config.EquipmentType inset_locations = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->inset_locations_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->inset_locations(i));
    }
    total_size += 1 * this->inset_locations_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GemConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GemConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GemConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GemConfig::MergeFrom(const GemConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  inset_locations_.MergeFrom(from.inset_locations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_property()) {
      set_property(from.property());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_fusion_id()) {
      set_fusion_id(from.fusion_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_block_max_count()) {
      set_block_max_count(from.block_max_count());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GemConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GemConfig::CopyFrom(const GemConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GemConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003df) != 0x000003df) return false;

  return true;
}

void GemConfig::SetInitialized() {
  _has_bits_[0] |= 0x000003df;

  return;
}

void GemConfig::Swap(GemConfig* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(property_, other->property_);
    std::swap(value_, other->value_);
    std::swap(fusion_id_, other->fusion_id_);
    std::swap(level_, other->level_);
    inset_locations_.Swap(&other->inset_locations_);
    std::swap(block_max_count_, other->block_max_count_);
    std::swap(quality_, other->quality_);
    std::swap(type_, other->type_);
    std::swap(coin_, other->coin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GemConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GemConfig_descriptor_;
  metadata.reflection = GemConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GemCostConfig::kLevelFieldNumber;
const int GemCostConfig::kRateFieldNumber;
const int GemCostConfig::kCostItemFieldNumber;
const int GemCostConfig::kCostCountFieldNumber;
#endif  // !_MSC_VER

GemCostConfig::GemCostConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GemCostConfig::InitAsDefaultInstance() {
}

GemCostConfig::GemCostConfig(const GemCostConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GemCostConfig::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  rate_ = 0;
  cost_item_ = 0;
  cost_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GemCostConfig::~GemCostConfig() {
  SharedDtor();
}

void GemCostConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GemCostConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GemCostConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GemCostConfig_descriptor_;
}

const GemCostConfig& GemCostConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemConfig_2eproto();
  return *default_instance_;
}

GemCostConfig* GemCostConfig::default_instance_ = NULL;

GemCostConfig* GemCostConfig::New() const {
  return new GemCostConfig;
}

void GemCostConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    rate_ = 0;
    cost_item_ = 0;
    cost_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GemCostConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rate;
        break;
      }

      // required int32 rate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cost_item;
        break;
      }

      // required int32 cost_item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_item_)));
          set_has_cost_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cost_count;
        break;
      }

      // required int32 cost_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_count_)));
          set_has_cost_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GemCostConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // required int32 rate = 2;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rate(), output);
  }

  // required int32 cost_item = 3;
  if (has_cost_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cost_item(), output);
  }

  // required int32 cost_count = 4;
  if (has_cost_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cost_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GemCostConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // required int32 rate = 2;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rate(), target);
  }

  // required int32 cost_item = 3;
  if (has_cost_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cost_item(), target);
  }

  // required int32 cost_count = 4;
  if (has_cost_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cost_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GemCostConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 rate = 2;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate());
    }

    // required int32 cost_item = 3;
    if (has_cost_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost_item());
    }

    // required int32 cost_count = 4;
    if (has_cost_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GemCostConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GemCostConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GemCostConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GemCostConfig::MergeFrom(const GemCostConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_cost_item()) {
      set_cost_item(from.cost_item());
    }
    if (from.has_cost_count()) {
      set_cost_count(from.cost_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GemCostConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GemCostConfig::CopyFrom(const GemCostConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GemCostConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GemCostConfig::SetInitialized() {
  _has_bits_[0] |= 0x0000000f;

  return;
}

void GemCostConfig::Swap(GemCostConfig* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(rate_, other->rate_);
    std::swap(cost_item_, other->cost_item_);
    std::swap(cost_count_, other->cost_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GemCostConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GemCostConfig_descriptor_;
  metadata.reflection = GemCostConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemAddLog::kGuidFieldNumber;
const int ItemAddLog::kPlayerGuidFieldNumber;
const int ItemAddLog::kContainerGuidFieldNumber;
const int ItemAddLog::kAddTypeFieldNumber;
const int ItemAddLog::kItemIdFieldNumber;
const int ItemAddLog::kItemAmountFieldNumber;
const int ItemAddLog::kSourceIdFieldNumber;
#endif  // !_MSC_VER

ItemAddLog::ItemAddLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemAddLog::InitAsDefaultInstance() {
}

ItemAddLog::ItemAddLog(const ItemAddLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemAddLog::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  player_guid_ = GOOGLE_ULONGLONG(0);
  container_guid_ = GOOGLE_ULONGLONG(0);
  add_type_ = 1;
  item_id_ = 0;
  item_amount_ = 0;
  source_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemAddLog::~ItemAddLog() {
  SharedDtor();
}

void ItemAddLog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemAddLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemAddLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemAddLog_descriptor_;
}

const ItemAddLog& ItemAddLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemConfig_2eproto();
  return *default_instance_;
}

ItemAddLog* ItemAddLog::default_instance_ = NULL;

ItemAddLog* ItemAddLog::New() const {
  return new ItemAddLog;
}

void ItemAddLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    player_guid_ = GOOGLE_ULONGLONG(0);
    container_guid_ = GOOGLE_ULONGLONG(0);
    add_type_ = 1;
    item_id_ = 0;
    item_amount_ = 0;
    source_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ItemAddLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_player_guid;
        break;
      }

      // required fixed64 player_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_player_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &player_guid_)));
          set_has_player_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_container_guid;
        break;
      }

      // required fixed64 container_guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_container_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &container_guid_)));
          set_has_container_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_add_type;
        break;
      }

      // required .Config.ItemAddLogType add_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Config::ItemAddLogType_IsValid(value)) {
            set_add_type(static_cast< ::Config::ItemAddLogType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_item_id;
        break;
      }

      // required int32 item_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_item_amount;
        break;
      }

      // required int32 item_amount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_amount_)));
          set_has_item_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_source_id;
        break;
      }

      // required fixed64 source_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_source_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &source_id_)));
          set_has_source_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ItemAddLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required fixed64 player_guid = 2;
  if (has_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->player_guid(), output);
  }

  // required fixed64 container_guid = 3;
  if (has_container_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->container_guid(), output);
  }

  // required .Config.ItemAddLogType add_type = 4;
  if (has_add_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->add_type(), output);
  }

  // required int32 item_id = 5;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->item_id(), output);
  }

  // required int32 item_amount = 6;
  if (has_item_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->item_amount(), output);
  }

  // required fixed64 source_id = 7;
  if (has_source_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->source_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemAddLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required fixed64 player_guid = 2;
  if (has_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->player_guid(), target);
  }

  // required fixed64 container_guid = 3;
  if (has_container_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->container_guid(), target);
  }

  // required .Config.ItemAddLogType add_type = 4;
  if (has_add_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->add_type(), target);
  }

  // required int32 item_id = 5;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->item_id(), target);
  }

  // required int32 item_amount = 6;
  if (has_item_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->item_amount(), target);
  }

  // required fixed64 source_id = 7;
  if (has_source_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->source_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemAddLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 player_guid = 2;
    if (has_player_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 container_guid = 3;
    if (has_container_guid()) {
      total_size += 1 + 8;
    }

    // required .Config.ItemAddLogType add_type = 4;
    if (has_add_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->add_type());
    }

    // required int32 item_id = 5;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

    // required int32 item_amount = 6;
    if (has_item_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_amount());
    }

    // required fixed64 source_id = 7;
    if (has_source_id()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemAddLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemAddLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemAddLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ItemAddLog::MergeFrom(const ItemAddLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_player_guid()) {
      set_player_guid(from.player_guid());
    }
    if (from.has_container_guid()) {
      set_container_guid(from.container_guid());
    }
    if (from.has_add_type()) {
      set_add_type(from.add_type());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_amount()) {
      set_item_amount(from.item_amount());
    }
    if (from.has_source_id()) {
      set_source_id(from.source_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ItemAddLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ItemAddLog::CopyFrom(const ItemAddLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ItemAddLog::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void ItemAddLog::SetInitialized() {
  _has_bits_[0] |= 0x0000007f;

  return;
}

void ItemAddLog::Swap(ItemAddLog* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(player_guid_, other->player_guid_);
    std::swap(container_guid_, other->container_guid_);
    std::swap(add_type_, other->add_type_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_amount_, other->item_amount_);
    std::swap(source_id_, other->source_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ItemAddLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemAddLog_descriptor_;
  metadata.reflection = ItemAddLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemDelLog::kGuidFieldNumber;
const int ItemDelLog::kPlayerGuidFieldNumber;
const int ItemDelLog::kContainerGuidFieldNumber;
const int ItemDelLog::kDelTypeFieldNumber;
const int ItemDelLog::kItemIdFieldNumber;
const int ItemDelLog::kItemAmountFieldNumber;
const int ItemDelLog::kSourceIdFieldNumber;
#endif  // !_MSC_VER

ItemDelLog::ItemDelLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemDelLog::InitAsDefaultInstance() {
}

ItemDelLog::ItemDelLog(const ItemDelLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemDelLog::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  player_guid_ = GOOGLE_ULONGLONG(0);
  container_guid_ = GOOGLE_ULONGLONG(0);
  del_type_ = 1;
  item_id_ = 0;
  item_amount_ = 0;
  source_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemDelLog::~ItemDelLog() {
  SharedDtor();
}

void ItemDelLog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemDelLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemDelLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemDelLog_descriptor_;
}

const ItemDelLog& ItemDelLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemConfig_2eproto();
  return *default_instance_;
}

ItemDelLog* ItemDelLog::default_instance_ = NULL;

ItemDelLog* ItemDelLog::New() const {
  return new ItemDelLog;
}

void ItemDelLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    player_guid_ = GOOGLE_ULONGLONG(0);
    container_guid_ = GOOGLE_ULONGLONG(0);
    del_type_ = 1;
    item_id_ = 0;
    item_amount_ = 0;
    source_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ItemDelLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_player_guid;
        break;
      }

      // required fixed64 player_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_player_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &player_guid_)));
          set_has_player_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_container_guid;
        break;
      }

      // required fixed64 container_guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_container_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &container_guid_)));
          set_has_container_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_del_type;
        break;
      }

      // required .Config.ItemDelLogType del_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_del_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Config::ItemDelLogType_IsValid(value)) {
            set_del_type(static_cast< ::Config::ItemDelLogType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_item_id;
        break;
      }

      // required int32 item_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_item_amount;
        break;
      }

      // required int32 item_amount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_amount_)));
          set_has_item_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_source_id;
        break;
      }

      // required fixed64 source_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_source_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &source_id_)));
          set_has_source_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ItemDelLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required fixed64 player_guid = 2;
  if (has_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->player_guid(), output);
  }

  // required fixed64 container_guid = 3;
  if (has_container_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->container_guid(), output);
  }

  // required .Config.ItemDelLogType del_type = 4;
  if (has_del_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->del_type(), output);
  }

  // required int32 item_id = 5;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->item_id(), output);
  }

  // required int32 item_amount = 6;
  if (has_item_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->item_amount(), output);
  }

  // required fixed64 source_id = 7;
  if (has_source_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->source_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemDelLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required fixed64 player_guid = 2;
  if (has_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->player_guid(), target);
  }

  // required fixed64 container_guid = 3;
  if (has_container_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->container_guid(), target);
  }

  // required .Config.ItemDelLogType del_type = 4;
  if (has_del_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->del_type(), target);
  }

  // required int32 item_id = 5;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->item_id(), target);
  }

  // required int32 item_amount = 6;
  if (has_item_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->item_amount(), target);
  }

  // required fixed64 source_id = 7;
  if (has_source_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->source_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemDelLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 player_guid = 2;
    if (has_player_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 container_guid = 3;
    if (has_container_guid()) {
      total_size += 1 + 8;
    }

    // required .Config.ItemDelLogType del_type = 4;
    if (has_del_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->del_type());
    }

    // required int32 item_id = 5;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

    // required int32 item_amount = 6;
    if (has_item_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_amount());
    }

    // required fixed64 source_id = 7;
    if (has_source_id()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemDelLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemDelLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemDelLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ItemDelLog::MergeFrom(const ItemDelLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_player_guid()) {
      set_player_guid(from.player_guid());
    }
    if (from.has_container_guid()) {
      set_container_guid(from.container_guid());
    }
    if (from.has_del_type()) {
      set_del_type(from.del_type());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_amount()) {
      set_item_amount(from.item_amount());
    }
    if (from.has_source_id()) {
      set_source_id(from.source_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ItemDelLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ItemDelLog::CopyFrom(const ItemDelLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ItemDelLog::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void ItemDelLog::SetInitialized() {
  _has_bits_[0] |= 0x0000007f;

  return;
}

void ItemDelLog::Swap(ItemDelLog* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(player_guid_, other->player_guid_);
    std::swap(container_guid_, other->container_guid_);
    std::swap(del_type_, other->del_type_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_amount_, other->item_amount_);
    std::swap(source_id_, other->source_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ItemDelLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemDelLog_descriptor_;
  metadata.reflection = ItemDelLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipBookConfig::kIndexFieldNumber;
const int EquipBookConfig::kIdFieldNumber;
#endif  // !_MSC_VER

EquipBookConfig::EquipBookConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipBookConfig::InitAsDefaultInstance() {
}

EquipBookConfig::EquipBookConfig(const EquipBookConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipBookConfig::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipBookConfig::~EquipBookConfig() {
  SharedDtor();
}

void EquipBookConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipBookConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipBookConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipBookConfig_descriptor_;
}

const EquipBookConfig& EquipBookConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ItemConfig_2eproto();
  return *default_instance_;
}

EquipBookConfig* EquipBookConfig::default_instance_ = NULL;

EquipBookConfig* EquipBookConfig::New() const {
  return new EquipBookConfig;
}

void EquipBookConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool EquipBookConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void EquipBookConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipBookConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipBookConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipBookConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipBookConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipBookConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void EquipBookConfig::MergeFrom(const EquipBookConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void EquipBookConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void EquipBookConfig::CopyFrom(const EquipBookConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool EquipBookConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EquipBookConfig::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void EquipBookConfig::Swap(EquipBookConfig* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata EquipBookConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipBookConfig_descriptor_;
  metadata.reflection = EquipBookConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config

// @@protoc_insertion_point(global_scope)
