// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: S2SMessage.proto
#include "S2SMessage.pb.h"
#include "S2SMessage.proto.fflua.h"
namespace S2S {
bool S2SCommonMessage_fflua_reg(lua_State* state)
{
//for decltype
	S2SCommonMessage* message(nullptr);
	message;
	ff::fflua_register_t<S2SCommonMessage, ctor()>(state, "S2SCommonMessage", "google::protobuf::Message")
		// required string request_name = 1;
		.def(&S2SCommonMessage::request_name, "request_name")
		.def<void (S2SCommonMessage::*)(const std::string&)>(&S2SCommonMessage::set_request_name, "set_request_name")
		// repeated int32 int32_params = 2;
		.def(&S2SCommonMessage::int32_params_size, "int32_params_size")
		.def<decltype(message->int32_params(0)) (S2SCommonMessage::*)(int) const>(&S2SCommonMessage::int32_params, "int32_params")
		.def<void(S2SCommonMessage::*)(int, const decltype(message->int32_params(0)))>(&S2SCommonMessage::set_int32_params, "set_int32_params")
		.def(&S2SCommonMessage::add_int32_params, "add_int32_params")
		// repeated fixed64 int64_params = 3;
		.def(&S2SCommonMessage::int64_params_size, "int64_params_size")
		.def<decltype(message->int64_params(0)) (S2SCommonMessage::*)(int) const>(&S2SCommonMessage::int64_params, "int64_params")
		.def<void(S2SCommonMessage::*)(int, const decltype(message->int64_params(0)))>(&S2SCommonMessage::set_int64_params, "set_int64_params")
		.def(&S2SCommonMessage::add_int64_params, "add_int64_params")
		// repeated string string_params = 4;
		.def(&S2SCommonMessage::string_params_size, "string_params_size")
		.def<const std::string& (S2SCommonMessage::*)(int) const>(&S2SCommonMessage::string_params, "string_params")
		.def<void (S2SCommonMessage::*)(int, const std::string&)>(&S2SCommonMessage::set_string_params, "set_string_params")
		.def<void (S2SCommonMessage::*)(const std::string&)>(&S2SCommonMessage::add_string_params, "add_string_params")
		.def(&S2SCommonMessage::ByteSize, "ByteSize")
		.def(&S2SCommonMessage::SetInitialized, "SetInitialized")
		;
	return true;
}
bool S2SMessage_fflua_regist_all(lua_State* state)
{
	S2SCommonMessage_fflua_reg(state);
	return true;
}
}
