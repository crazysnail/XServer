// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GuildCapturePoint.proto

#ifndef PROTOBUF_GuildCapturePoint_2eproto__INCLUDED
#define PROTOBUF_GuildCapturePoint_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ProtoBufOption.pb.h"
#include "AllPacketEnum.pb.h"
#include "BattleReply.pb.h"
// @@protoc_insertion_point(includes)

namespace Packet {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GuildCapturePoint_2eproto();
void protobuf_AssignDesc_GuildCapturePoint_2eproto();
void protobuf_ShutdownFile_GuildCapturePoint_2eproto();

class HeroData;
class StrongHoldData;
class CapturePointDB;
class GuildCapturePointDB;
class GuildCaptureBattleDetail;
class GuildCaptureBattleLogDB;
class GuildCaptureBattleLog;
class GC_GuildCaptureAllBattleLog;
class CapturePotinBrief;
class CG_AllBattleLog;
class CG_CetCapturePointInfo;
class CG_PullAllCapturePoint;
class CG_ReleaseCapturePoint;
class GC_AllGuildCapturePoint;
class CG_PullCapturePoint;
class CG_UpdateTaxRate;
class CG_CollectGuildTax;
class GC_GuildCapturePoint;
class CG_StartChallengeCapturePoint;
class CG_UpdateStrongHold;

// ===================================================================

class HeroData : public ::google::protobuf::Message {
 public:
  HeroData();
  virtual ~HeroData();

  HeroData(const HeroData& from);

  inline HeroData& operator=(const HeroData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeroData& default_instance();

  void Swap(HeroData* other);

  // implements Message ----------------------------------------------

  HeroData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeroData& from);
  void MergeFrom(const HeroData& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 player_guid = 1;
  inline bool has_player_guid() const;
  inline void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 player_guid() const;
  inline void set_player_guid(::google::protobuf::uint64 value);

  // required int32 actor_config_id = 2;
  inline bool has_actor_config_id() const;
  inline void clear_actor_config_id();
  static const int kActorConfigIdFieldNumber = 2;
  inline ::google::protobuf::int32 actor_config_id() const;
  inline void set_actor_config_id(::google::protobuf::int32 value);

  // required int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required .Packet.ActorColor color = 4;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 4;
  inline ::Packet::ActorColor color() const;
  inline void set_color(::Packet::ActorColor value);

  // required .Packet.ActorStar star = 5;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 5;
  inline ::Packet::ActorStar star() const;
  inline void set_star(::Packet::ActorStar value);

  // required int32 hair = 6;
  inline bool has_hair() const;
  inline void clear_hair();
  static const int kHairFieldNumber = 6;
  inline ::google::protobuf::int32 hair() const;
  inline void set_hair(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.HeroData)
 private:
  inline void set_has_player_guid();
  inline void clear_has_player_guid();
  inline void set_has_actor_config_id();
  inline void clear_has_actor_config_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_hair();
  inline void clear_has_hair();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 player_guid_;
  ::google::protobuf::int32 actor_config_id_;
  ::google::protobuf::int32 level_;
  int color_;
  int star_;
  ::google::protobuf::int32 hair_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_GuildCapturePoint_2eproto();
  friend void protobuf_AssignDesc_GuildCapturePoint_2eproto();
  friend void protobuf_ShutdownFile_GuildCapturePoint_2eproto();

  void InitAsDefaultInstance();
  static HeroData* default_instance_;
};
// -------------------------------------------------------------------

class StrongHoldData : public ::google::protobuf::Message {
 public:
  StrongHoldData();
  virtual ~StrongHoldData();

  StrongHoldData(const StrongHoldData& from);

  inline StrongHoldData& operator=(const StrongHoldData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StrongHoldData& default_instance();

  void Swap(StrongHoldData* other);

  // implements Message ----------------------------------------------

  StrongHoldData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StrongHoldData& from);
  void MergeFrom(const StrongHoldData& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Packet.HeroData heros = 1;
  inline int heros_size() const;
  inline void clear_heros();
  static const int kHerosFieldNumber = 1;
  inline const ::Packet::HeroData& heros(int index) const;
  inline ::Packet::HeroData* mutable_heros(int index);
  inline ::Packet::HeroData* add_heros();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::HeroData >&
      heros() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::HeroData >*
      mutable_heros();

  // required int32 score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.StrongHoldData)
 private:
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::HeroData > heros_;
  ::google::protobuf::int32 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildCapturePoint_2eproto();
  friend void protobuf_AssignDesc_GuildCapturePoint_2eproto();
  friend void protobuf_ShutdownFile_GuildCapturePoint_2eproto();

  void InitAsDefaultInstance();
  static StrongHoldData* default_instance_;
};
// -------------------------------------------------------------------

class CapturePointDB : public ::google::protobuf::Message {
 public:
  CapturePointDB();
  virtual ~CapturePointDB();

  CapturePointDB(const CapturePointDB& from);

  inline CapturePointDB& operator=(const CapturePointDB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CapturePointDB& default_instance();

  void Swap(CapturePointDB* other);

  // implements Message ----------------------------------------------

  CapturePointDB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CapturePointDB& from);
  void MergeFrom(const CapturePointDB& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 chapter_id = 1;
  inline bool has_chapter_id() const;
  inline void clear_chapter_id();
  static const int kChapterIdFieldNumber = 1;
  inline ::google::protobuf::int32 chapter_id() const;
  inline void set_chapter_id(::google::protobuf::int32 value);

  // required .Packet.CaptureStatus status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::Packet::CaptureStatus status() const;
  inline void set_status(::Packet::CaptureStatus value);

  // required fixed64 capture_guild_guid = 5;
  inline bool has_capture_guild_guid() const;
  inline void clear_capture_guild_guid();
  static const int kCaptureGuildGuidFieldNumber = 5;
  inline ::google::protobuf::uint64 capture_guild_guid() const;
  inline void set_capture_guild_guid(::google::protobuf::uint64 value);

  // required fixed64 challenger_guild_guid = 6;
  inline bool has_challenger_guild_guid() const;
  inline void clear_challenger_guild_guid();
  static const int kChallengerGuildGuidFieldNumber = 6;
  inline ::google::protobuf::uint64 challenger_guild_guid() const;
  inline void set_challenger_guild_guid(::google::protobuf::uint64 value);

  // required int32 status_change_time = 7;
  inline bool has_status_change_time() const;
  inline void clear_status_change_time();
  static const int kStatusChangeTimeFieldNumber = 7;
  inline ::google::protobuf::int32 status_change_time() const;
  inline void set_status_change_time(::google::protobuf::int32 value);

  // required fixed64 winner_guid = 8;
  inline bool has_winner_guid() const;
  inline void clear_winner_guid();
  static const int kWinnerGuidFieldNumber = 8;
  inline ::google::protobuf::uint64 winner_guid() const;
  inline void set_winner_guid(::google::protobuf::uint64 value);

  // required fixed64 log_guid = 9;
  inline bool has_log_guid() const;
  inline void clear_log_guid();
  static const int kLogGuidFieldNumber = 9;
  inline ::google::protobuf::uint64 log_guid() const;
  inline void set_log_guid(::google::protobuf::uint64 value);

  // repeated .Packet.HeroData capture_hero_datas = 10;
  inline int capture_hero_datas_size() const;
  inline void clear_capture_hero_datas();
  static const int kCaptureHeroDatasFieldNumber = 10;
  inline const ::Packet::HeroData& capture_hero_datas(int index) const;
  inline ::Packet::HeroData* mutable_capture_hero_datas(int index);
  inline ::Packet::HeroData* add_capture_hero_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::HeroData >&
      capture_hero_datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::HeroData >*
      mutable_capture_hero_datas();

  // repeated .Packet.HeroData challenger_hero_datas = 11;
  inline int challenger_hero_datas_size() const;
  inline void clear_challenger_hero_datas();
  static const int kChallengerHeroDatasFieldNumber = 11;
  inline const ::Packet::HeroData& challenger_hero_datas(int index) const;
  inline ::Packet::HeroData* mutable_challenger_hero_datas(int index);
  inline ::Packet::HeroData* add_challenger_hero_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::HeroData >&
      challenger_hero_datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::HeroData >*
      mutable_challenger_hero_datas();

  // repeated .Packet.StrongHoldStatus strong_hold_status = 12;
  inline int strong_hold_status_size() const;
  inline void clear_strong_hold_status();
  static const int kStrongHoldStatusFieldNumber = 12;
  inline ::Packet::StrongHoldStatus strong_hold_status(int index) const;
  inline void set_strong_hold_status(int index, ::Packet::StrongHoldStatus value);
  inline void add_strong_hold_status(::Packet::StrongHoldStatus value);
  inline const ::google::protobuf::RepeatedField<int>& strong_hold_status() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_strong_hold_status();

  // @@protoc_insertion_point(class_scope:Packet.CapturePointDB)
 private:
  inline void set_has_chapter_id();
  inline void clear_has_chapter_id();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_capture_guild_guid();
  inline void clear_has_capture_guild_guid();
  inline void set_has_challenger_guild_guid();
  inline void clear_has_challenger_guild_guid();
  inline void set_has_status_change_time();
  inline void clear_has_status_change_time();
  inline void set_has_winner_guid();
  inline void clear_has_winner_guid();
  inline void set_has_log_guid();
  inline void clear_has_log_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 chapter_id_;
  int status_;
  ::google::protobuf::uint64 capture_guild_guid_;
  ::google::protobuf::uint64 challenger_guild_guid_;
  ::google::protobuf::uint64 winner_guid_;
  ::google::protobuf::uint64 log_guid_;
  ::google::protobuf::RepeatedPtrField< ::Packet::HeroData > capture_hero_datas_;
  ::google::protobuf::RepeatedPtrField< ::Packet::HeroData > challenger_hero_datas_;
  ::google::protobuf::RepeatedField<int> strong_hold_status_;
  ::google::protobuf::int32 status_change_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_GuildCapturePoint_2eproto();
  friend void protobuf_AssignDesc_GuildCapturePoint_2eproto();
  friend void protobuf_ShutdownFile_GuildCapturePoint_2eproto();

  void InitAsDefaultInstance();
  static CapturePointDB* default_instance_;
};
// -------------------------------------------------------------------

class GuildCapturePointDB : public ::google::protobuf::Message {
 public:
  GuildCapturePointDB();
  virtual ~GuildCapturePointDB();

  GuildCapturePointDB(const GuildCapturePointDB& from);

  inline GuildCapturePointDB& operator=(const GuildCapturePointDB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildCapturePointDB& default_instance();

  void Swap(GuildCapturePointDB* other);

  // implements Message ----------------------------------------------

  GuildCapturePointDB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildCapturePointDB& from);
  void MergeFrom(const GuildCapturePointDB& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // repeated .Packet.StrongHoldData strong_holds = 2;
  inline int strong_holds_size() const;
  inline void clear_strong_holds();
  static const int kStrongHoldsFieldNumber = 2;
  inline const ::Packet::StrongHoldData& strong_holds(int index) const;
  inline ::Packet::StrongHoldData* mutable_strong_holds(int index);
  inline ::Packet::StrongHoldData* add_strong_holds();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::StrongHoldData >&
      strong_holds() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::StrongHoldData >*
      mutable_strong_holds();

  // @@protoc_insertion_point(class_scope:Packet.GuildCapturePointDB)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::google::protobuf::RepeatedPtrField< ::Packet::StrongHoldData > strong_holds_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildCapturePoint_2eproto();
  friend void protobuf_AssignDesc_GuildCapturePoint_2eproto();
  friend void protobuf_ShutdownFile_GuildCapturePoint_2eproto();

  void InitAsDefaultInstance();
  static GuildCapturePointDB* default_instance_;
};
// -------------------------------------------------------------------

class GuildCaptureBattleDetail : public ::google::protobuf::Message {
 public:
  GuildCaptureBattleDetail();
  virtual ~GuildCaptureBattleDetail();

  GuildCaptureBattleDetail(const GuildCaptureBattleDetail& from);

  inline GuildCaptureBattleDetail& operator=(const GuildCaptureBattleDetail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildCaptureBattleDetail& default_instance();

  void Swap(GuildCaptureBattleDetail* other);

  // implements Message ----------------------------------------------

  GuildCaptureBattleDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildCaptureBattleDetail& from);
  void MergeFrom(const GuildCaptureBattleDetail& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Packet.HeroData attacker_heros = 1;
  inline int attacker_heros_size() const;
  inline void clear_attacker_heros();
  static const int kAttackerHerosFieldNumber = 1;
  inline const ::Packet::HeroData& attacker_heros(int index) const;
  inline ::Packet::HeroData* mutable_attacker_heros(int index);
  inline ::Packet::HeroData* add_attacker_heros();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::HeroData >&
      attacker_heros() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::HeroData >*
      mutable_attacker_heros();

  // repeated .Packet.HeroData defender_heros = 2;
  inline int defender_heros_size() const;
  inline void clear_defender_heros();
  static const int kDefenderHerosFieldNumber = 2;
  inline const ::Packet::HeroData& defender_heros(int index) const;
  inline ::Packet::HeroData* mutable_defender_heros(int index);
  inline ::Packet::HeroData* add_defender_heros();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::HeroData >&
      defender_heros() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::HeroData >*
      mutable_defender_heros();

  // required bool attacker_win = 3;
  inline bool has_attacker_win() const;
  inline void clear_attacker_win();
  static const int kAttackerWinFieldNumber = 3;
  inline bool attacker_win() const;
  inline void set_attacker_win(bool value);

  // required fixed64 reply_guid = 4;
  inline bool has_reply_guid() const;
  inline void clear_reply_guid();
  static const int kReplyGuidFieldNumber = 4;
  inline ::google::protobuf::uint64 reply_guid() const;
  inline void set_reply_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Packet.GuildCaptureBattleDetail)
 private:
  inline void set_has_attacker_win();
  inline void clear_has_attacker_win();
  inline void set_has_reply_guid();
  inline void clear_has_reply_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::HeroData > attacker_heros_;
  ::google::protobuf::RepeatedPtrField< ::Packet::HeroData > defender_heros_;
  ::google::protobuf::uint64 reply_guid_;
  bool attacker_win_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_GuildCapturePoint_2eproto();
  friend void protobuf_AssignDesc_GuildCapturePoint_2eproto();
  friend void protobuf_ShutdownFile_GuildCapturePoint_2eproto();

  void InitAsDefaultInstance();
  static GuildCaptureBattleDetail* default_instance_;
};
// -------------------------------------------------------------------

class GuildCaptureBattleLogDB : public ::google::protobuf::Message {
 public:
  GuildCaptureBattleLogDB();
  virtual ~GuildCaptureBattleLogDB();

  GuildCaptureBattleLogDB(const GuildCaptureBattleLogDB& from);

  inline GuildCaptureBattleLogDB& operator=(const GuildCaptureBattleLogDB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildCaptureBattleLogDB& default_instance();

  void Swap(GuildCaptureBattleLogDB* other);

  // implements Message ----------------------------------------------

  GuildCaptureBattleLogDB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildCaptureBattleLogDB& from);
  void MergeFrom(const GuildCaptureBattleLogDB& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // required fixed64 attacker_guid = 2;
  inline bool has_attacker_guid() const;
  inline void clear_attacker_guid();
  static const int kAttackerGuidFieldNumber = 2;
  inline ::google::protobuf::uint64 attacker_guid() const;
  inline void set_attacker_guid(::google::protobuf::uint64 value);

  // required fixed64 defender_guid = 3;
  inline bool has_defender_guid() const;
  inline void clear_defender_guid();
  static const int kDefenderGuidFieldNumber = 3;
  inline ::google::protobuf::uint64 defender_guid() const;
  inline void set_defender_guid(::google::protobuf::uint64 value);

  // required int32 chapter_id = 4;
  inline bool has_chapter_id() const;
  inline void clear_chapter_id();
  static const int kChapterIdFieldNumber = 4;
  inline ::google::protobuf::int32 chapter_id() const;
  inline void set_chapter_id(::google::protobuf::int32 value);

  // required int32 battle_time = 5;
  inline bool has_battle_time() const;
  inline void clear_battle_time();
  static const int kBattleTimeFieldNumber = 5;
  inline ::google::protobuf::int32 battle_time() const;
  inline void set_battle_time(::google::protobuf::int32 value);

  // required bool attacker_win = 6;
  inline bool has_attacker_win() const;
  inline void clear_attacker_win();
  static const int kAttackerWinFieldNumber = 6;
  inline bool attacker_win() const;
  inline void set_attacker_win(bool value);

  // required bool finish = 7;
  inline bool has_finish() const;
  inline void clear_finish();
  static const int kFinishFieldNumber = 7;
  inline bool finish() const;
  inline void set_finish(bool value);

  // repeated .Packet.GuildCaptureBattleDetail details = 8;
  inline int details_size() const;
  inline void clear_details();
  static const int kDetailsFieldNumber = 8;
  inline const ::Packet::GuildCaptureBattleDetail& details(int index) const;
  inline ::Packet::GuildCaptureBattleDetail* mutable_details(int index);
  inline ::Packet::GuildCaptureBattleDetail* add_details();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::GuildCaptureBattleDetail >&
      details() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::GuildCaptureBattleDetail >*
      mutable_details();

  // @@protoc_insertion_point(class_scope:Packet.GuildCaptureBattleLogDB)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_attacker_guid();
  inline void clear_has_attacker_guid();
  inline void set_has_defender_guid();
  inline void clear_has_defender_guid();
  inline void set_has_chapter_id();
  inline void clear_has_chapter_id();
  inline void set_has_battle_time();
  inline void clear_has_battle_time();
  inline void set_has_attacker_win();
  inline void clear_has_attacker_win();
  inline void set_has_finish();
  inline void clear_has_finish();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::google::protobuf::uint64 attacker_guid_;
  ::google::protobuf::uint64 defender_guid_;
  ::google::protobuf::int32 chapter_id_;
  ::google::protobuf::int32 battle_time_;
  ::google::protobuf::RepeatedPtrField< ::Packet::GuildCaptureBattleDetail > details_;
  bool attacker_win_;
  bool finish_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_GuildCapturePoint_2eproto();
  friend void protobuf_AssignDesc_GuildCapturePoint_2eproto();
  friend void protobuf_ShutdownFile_GuildCapturePoint_2eproto();

  void InitAsDefaultInstance();
  static GuildCaptureBattleLogDB* default_instance_;
};
// -------------------------------------------------------------------

class GuildCaptureBattleLog : public ::google::protobuf::Message {
 public:
  GuildCaptureBattleLog();
  virtual ~GuildCaptureBattleLog();

  GuildCaptureBattleLog(const GuildCaptureBattleLog& from);

  inline GuildCaptureBattleLog& operator=(const GuildCaptureBattleLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildCaptureBattleLog& default_instance();

  void Swap(GuildCaptureBattleLog* other);

  // implements Message ----------------------------------------------

  GuildCaptureBattleLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildCaptureBattleLog& from);
  void MergeFrom(const GuildCaptureBattleLog& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 attacker_guid = 1;
  inline bool has_attacker_guid() const;
  inline void clear_attacker_guid();
  static const int kAttackerGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 attacker_guid() const;
  inline void set_attacker_guid(::google::protobuf::uint64 value);

  // required string attacker_name = 2;
  inline bool has_attacker_name() const;
  inline void clear_attacker_name();
  static const int kAttackerNameFieldNumber = 2;
  inline const ::std::string& attacker_name() const;
  inline void set_attacker_name(const ::std::string& value);
  inline void set_attacker_name(const char* value);
  inline void set_attacker_name(const char* value, size_t size);
  inline ::std::string* mutable_attacker_name();
  inline ::std::string* release_attacker_name();
  inline void set_allocated_attacker_name(::std::string* attacker_name);

  // required string attacker_icon = 3;
  inline bool has_attacker_icon() const;
  inline void clear_attacker_icon();
  static const int kAttackerIconFieldNumber = 3;
  inline const ::std::string& attacker_icon() const;
  inline void set_attacker_icon(const ::std::string& value);
  inline void set_attacker_icon(const char* value);
  inline void set_attacker_icon(const char* value, size_t size);
  inline ::std::string* mutable_attacker_icon();
  inline ::std::string* release_attacker_icon();
  inline void set_allocated_attacker_icon(::std::string* attacker_icon);

  // required fixed64 defender_guid = 4;
  inline bool has_defender_guid() const;
  inline void clear_defender_guid();
  static const int kDefenderGuidFieldNumber = 4;
  inline ::google::protobuf::uint64 defender_guid() const;
  inline void set_defender_guid(::google::protobuf::uint64 value);

  // required string defender_name = 5;
  inline bool has_defender_name() const;
  inline void clear_defender_name();
  static const int kDefenderNameFieldNumber = 5;
  inline const ::std::string& defender_name() const;
  inline void set_defender_name(const ::std::string& value);
  inline void set_defender_name(const char* value);
  inline void set_defender_name(const char* value, size_t size);
  inline ::std::string* mutable_defender_name();
  inline ::std::string* release_defender_name();
  inline void set_allocated_defender_name(::std::string* defender_name);

  // required string defender_icon = 6;
  inline bool has_defender_icon() const;
  inline void clear_defender_icon();
  static const int kDefenderIconFieldNumber = 6;
  inline const ::std::string& defender_icon() const;
  inline void set_defender_icon(const ::std::string& value);
  inline void set_defender_icon(const char* value);
  inline void set_defender_icon(const char* value, size_t size);
  inline ::std::string* mutable_defender_icon();
  inline ::std::string* release_defender_icon();
  inline void set_allocated_defender_icon(::std::string* defender_icon);

  // required bool attacker_win = 7;
  inline bool has_attacker_win() const;
  inline void clear_attacker_win();
  static const int kAttackerWinFieldNumber = 7;
  inline bool attacker_win() const;
  inline void set_attacker_win(bool value);

  // required int32 battle_time = 8;
  inline bool has_battle_time() const;
  inline void clear_battle_time();
  static const int kBattleTimeFieldNumber = 8;
  inline ::google::protobuf::int32 battle_time() const;
  inline void set_battle_time(::google::protobuf::int32 value);

  // repeated .Packet.GuildCaptureBattleDetail details = 9;
  inline int details_size() const;
  inline void clear_details();
  static const int kDetailsFieldNumber = 9;
  inline const ::Packet::GuildCaptureBattleDetail& details(int index) const;
  inline ::Packet::GuildCaptureBattleDetail* mutable_details(int index);
  inline ::Packet::GuildCaptureBattleDetail* add_details();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::GuildCaptureBattleDetail >&
      details() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::GuildCaptureBattleDetail >*
      mutable_details();

  // required int32 chapter_id = 10;
  inline bool has_chapter_id() const;
  inline void clear_chapter_id();
  static const int kChapterIdFieldNumber = 10;
  inline ::google::protobuf::int32 chapter_id() const;
  inline void set_chapter_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.GuildCaptureBattleLog)
 private:
  inline void set_has_attacker_guid();
  inline void clear_has_attacker_guid();
  inline void set_has_attacker_name();
  inline void clear_has_attacker_name();
  inline void set_has_attacker_icon();
  inline void clear_has_attacker_icon();
  inline void set_has_defender_guid();
  inline void clear_has_defender_guid();
  inline void set_has_defender_name();
  inline void clear_has_defender_name();
  inline void set_has_defender_icon();
  inline void clear_has_defender_icon();
  inline void set_has_attacker_win();
  inline void clear_has_attacker_win();
  inline void set_has_battle_time();
  inline void clear_has_battle_time();
  inline void set_has_chapter_id();
  inline void clear_has_chapter_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 attacker_guid_;
  ::std::string* attacker_name_;
  ::std::string* attacker_icon_;
  ::google::protobuf::uint64 defender_guid_;
  ::std::string* defender_name_;
  ::std::string* defender_icon_;
  bool attacker_win_;
  ::google::protobuf::int32 battle_time_;
  ::google::protobuf::RepeatedPtrField< ::Packet::GuildCaptureBattleDetail > details_;
  ::google::protobuf::int32 chapter_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_GuildCapturePoint_2eproto();
  friend void protobuf_AssignDesc_GuildCapturePoint_2eproto();
  friend void protobuf_ShutdownFile_GuildCapturePoint_2eproto();

  void InitAsDefaultInstance();
  static GuildCaptureBattleLog* default_instance_;
};
// -------------------------------------------------------------------

class GC_GuildCaptureAllBattleLog : public ::google::protobuf::Message {
 public:
  GC_GuildCaptureAllBattleLog();
  virtual ~GC_GuildCaptureAllBattleLog();

  GC_GuildCaptureAllBattleLog(const GC_GuildCaptureAllBattleLog& from);

  inline GC_GuildCaptureAllBattleLog& operator=(const GC_GuildCaptureAllBattleLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GC_GuildCaptureAllBattleLog& default_instance();

  void Swap(GC_GuildCaptureAllBattleLog* other);

  // implements Message ----------------------------------------------

  GC_GuildCaptureAllBattleLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GC_GuildCaptureAllBattleLog& from);
  void MergeFrom(const GC_GuildCaptureAllBattleLog& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Packet.GuildCaptureBattleLog logs = 1;
  inline int logs_size() const;
  inline void clear_logs();
  static const int kLogsFieldNumber = 1;
  inline const ::Packet::GuildCaptureBattleLog& logs(int index) const;
  inline ::Packet::GuildCaptureBattleLog* mutable_logs(int index);
  inline ::Packet::GuildCaptureBattleLog* add_logs();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::GuildCaptureBattleLog >&
      logs() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::GuildCaptureBattleLog >*
      mutable_logs();

  // @@protoc_insertion_point(class_scope:Packet.GC_GuildCaptureAllBattleLog)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::GuildCaptureBattleLog > logs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildCapturePoint_2eproto();
  friend void protobuf_AssignDesc_GuildCapturePoint_2eproto();
  friend void protobuf_ShutdownFile_GuildCapturePoint_2eproto();

  void InitAsDefaultInstance();
  static GC_GuildCaptureAllBattleLog* default_instance_;
};
// -------------------------------------------------------------------

class CapturePotinBrief : public ::google::protobuf::Message {
 public:
  CapturePotinBrief();
  virtual ~CapturePotinBrief();

  CapturePotinBrief(const CapturePotinBrief& from);

  inline CapturePotinBrief& operator=(const CapturePotinBrief& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CapturePotinBrief& default_instance();

  void Swap(CapturePotinBrief* other);

  // implements Message ----------------------------------------------

  CapturePotinBrief* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CapturePotinBrief& from);
  void MergeFrom(const CapturePotinBrief& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 chapter_id = 1;
  inline bool has_chapter_id() const;
  inline void clear_chapter_id();
  static const int kChapterIdFieldNumber = 1;
  inline ::google::protobuf::int32 chapter_id() const;
  inline void set_chapter_id(::google::protobuf::int32 value);

  // required .Packet.CaptureStatus status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::Packet::CaptureStatus status() const;
  inline void set_status(::Packet::CaptureStatus value);

  // required string capture_guild_name = 3;
  inline bool has_capture_guild_name() const;
  inline void clear_capture_guild_name();
  static const int kCaptureGuildNameFieldNumber = 3;
  inline const ::std::string& capture_guild_name() const;
  inline void set_capture_guild_name(const ::std::string& value);
  inline void set_capture_guild_name(const char* value);
  inline void set_capture_guild_name(const char* value, size_t size);
  inline ::std::string* mutable_capture_guild_name();
  inline ::std::string* release_capture_guild_name();
  inline void set_allocated_capture_guild_name(::std::string* capture_guild_name);

  // required string capture_guild_icon = 4;
  inline bool has_capture_guild_icon() const;
  inline void clear_capture_guild_icon();
  static const int kCaptureGuildIconFieldNumber = 4;
  inline const ::std::string& capture_guild_icon() const;
  inline void set_capture_guild_icon(const ::std::string& value);
  inline void set_capture_guild_icon(const char* value);
  inline void set_capture_guild_icon(const char* value, size_t size);
  inline ::std::string* mutable_capture_guild_icon();
  inline ::std::string* release_capture_guild_icon();
  inline void set_allocated_capture_guild_icon(::std::string* capture_guild_icon);

  // required fixed64 capture_guild_guid = 5;
  inline bool has_capture_guild_guid() const;
  inline void clear_capture_guild_guid();
  static const int kCaptureGuildGuidFieldNumber = 5;
  inline ::google::protobuf::uint64 capture_guild_guid() const;
  inline void set_capture_guild_guid(::google::protobuf::uint64 value);

  // required int32 hook_users = 6;
  inline bool has_hook_users() const;
  inline void clear_hook_users();
  static const int kHookUsersFieldNumber = 6;
  inline ::google::protobuf::int32 hook_users() const;
  inline void set_hook_users(::google::protobuf::int32 value);

  // required int32 tax = 7;
  inline bool has_tax() const;
  inline void clear_tax();
  static const int kTaxFieldNumber = 7;
  inline ::google::protobuf::int32 tax() const;
  inline void set_tax(::google::protobuf::int32 value);

  // required int32 tax_rate = 8;
  inline bool has_tax_rate() const;
  inline void clear_tax_rate();
  static const int kTaxRateFieldNumber = 8;
  inline ::google::protobuf::int32 tax_rate() const;
  inline void set_tax_rate(::google::protobuf::int32 value);

  // required int32 status_change_time = 9;
  inline bool has_status_change_time() const;
  inline void clear_status_change_time();
  static const int kStatusChangeTimeFieldNumber = 9;
  inline ::google::protobuf::int32 status_change_time() const;
  inline void set_status_change_time(::google::protobuf::int32 value);

  // repeated .Packet.HeroData capture_hero_datas = 10;
  inline int capture_hero_datas_size() const;
  inline void clear_capture_hero_datas();
  static const int kCaptureHeroDatasFieldNumber = 10;
  inline const ::Packet::HeroData& capture_hero_datas(int index) const;
  inline ::Packet::HeroData* mutable_capture_hero_datas(int index);
  inline ::Packet::HeroData* add_capture_hero_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::HeroData >&
      capture_hero_datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::HeroData >*
      mutable_capture_hero_datas();

  // repeated .Packet.HeroData challenger_hero_datas = 11;
  inline int challenger_hero_datas_size() const;
  inline void clear_challenger_hero_datas();
  static const int kChallengerHeroDatasFieldNumber = 11;
  inline const ::Packet::HeroData& challenger_hero_datas(int index) const;
  inline ::Packet::HeroData* mutable_challenger_hero_datas(int index);
  inline ::Packet::HeroData* add_challenger_hero_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::HeroData >&
      challenger_hero_datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::HeroData >*
      mutable_challenger_hero_datas();

  // repeated .Packet.StrongHoldStatus strong_hold_status = 12;
  inline int strong_hold_status_size() const;
  inline void clear_strong_hold_status();
  static const int kStrongHoldStatusFieldNumber = 12;
  inline ::Packet::StrongHoldStatus strong_hold_status(int index) const;
  inline void set_strong_hold_status(int index, ::Packet::StrongHoldStatus value);
  inline void add_strong_hold_status(::Packet::StrongHoldStatus value);
  inline const ::google::protobuf::RepeatedField<int>& strong_hold_status() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_strong_hold_status();

  // optional string challenger_name = 13;
  inline bool has_challenger_name() const;
  inline void clear_challenger_name();
  static const int kChallengerNameFieldNumber = 13;
  inline const ::std::string& challenger_name() const;
  inline void set_challenger_name(const ::std::string& value);
  inline void set_challenger_name(const char* value);
  inline void set_challenger_name(const char* value, size_t size);
  inline ::std::string* mutable_challenger_name();
  inline ::std::string* release_challenger_name();
  inline void set_allocated_challenger_name(::std::string* challenger_name);

  // optional string challenger_icon = 14;
  inline bool has_challenger_icon() const;
  inline void clear_challenger_icon();
  static const int kChallengerIconFieldNumber = 14;
  inline const ::std::string& challenger_icon() const;
  inline void set_challenger_icon(const ::std::string& value);
  inline void set_challenger_icon(const char* value);
  inline void set_challenger_icon(const char* value, size_t size);
  inline ::std::string* mutable_challenger_icon();
  inline ::std::string* release_challenger_icon();
  inline void set_allocated_challenger_icon(::std::string* challenger_icon);

  // @@protoc_insertion_point(class_scope:Packet.CapturePotinBrief)
 private:
  inline void set_has_chapter_id();
  inline void clear_has_chapter_id();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_capture_guild_name();
  inline void clear_has_capture_guild_name();
  inline void set_has_capture_guild_icon();
  inline void clear_has_capture_guild_icon();
  inline void set_has_capture_guild_guid();
  inline void clear_has_capture_guild_guid();
  inline void set_has_hook_users();
  inline void clear_has_hook_users();
  inline void set_has_tax();
  inline void clear_has_tax();
  inline void set_has_tax_rate();
  inline void clear_has_tax_rate();
  inline void set_has_status_change_time();
  inline void clear_has_status_change_time();
  inline void set_has_challenger_name();
  inline void clear_has_challenger_name();
  inline void set_has_challenger_icon();
  inline void clear_has_challenger_icon();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 chapter_id_;
  int status_;
  ::std::string* capture_guild_name_;
  ::std::string* capture_guild_icon_;
  ::google::protobuf::uint64 capture_guild_guid_;
  ::google::protobuf::int32 hook_users_;
  ::google::protobuf::int32 tax_;
  ::google::protobuf::int32 tax_rate_;
  ::google::protobuf::int32 status_change_time_;
  ::google::protobuf::RepeatedPtrField< ::Packet::HeroData > capture_hero_datas_;
  ::google::protobuf::RepeatedPtrField< ::Packet::HeroData > challenger_hero_datas_;
  ::google::protobuf::RepeatedField<int> strong_hold_status_;
  ::std::string* challenger_name_;
  ::std::string* challenger_icon_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_GuildCapturePoint_2eproto();
  friend void protobuf_AssignDesc_GuildCapturePoint_2eproto();
  friend void protobuf_ShutdownFile_GuildCapturePoint_2eproto();

  void InitAsDefaultInstance();
  static CapturePotinBrief* default_instance_;
};
// -------------------------------------------------------------------

class CG_AllBattleLog : public ::google::protobuf::Message {
 public:
  CG_AllBattleLog();
  virtual ~CG_AllBattleLog();

  CG_AllBattleLog(const CG_AllBattleLog& from);

  inline CG_AllBattleLog& operator=(const CG_AllBattleLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CG_AllBattleLog& default_instance();

  void Swap(CG_AllBattleLog* other);

  // implements Message ----------------------------------------------

  CG_AllBattleLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CG_AllBattleLog& from);
  void MergeFrom(const CG_AllBattleLog& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Packet.CG_AllBattleLog)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_GuildCapturePoint_2eproto();
  friend void protobuf_AssignDesc_GuildCapturePoint_2eproto();
  friend void protobuf_ShutdownFile_GuildCapturePoint_2eproto();

  void InitAsDefaultInstance();
  static CG_AllBattleLog* default_instance_;
};
// -------------------------------------------------------------------

class CG_CetCapturePointInfo : public ::google::protobuf::Message {
 public:
  CG_CetCapturePointInfo();
  virtual ~CG_CetCapturePointInfo();

  CG_CetCapturePointInfo(const CG_CetCapturePointInfo& from);

  inline CG_CetCapturePointInfo& operator=(const CG_CetCapturePointInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CG_CetCapturePointInfo& default_instance();

  void Swap(CG_CetCapturePointInfo* other);

  // implements Message ----------------------------------------------

  CG_CetCapturePointInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CG_CetCapturePointInfo& from);
  void MergeFrom(const CG_CetCapturePointInfo& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 chapter_id = 1;
  inline bool has_chapter_id() const;
  inline void clear_chapter_id();
  static const int kChapterIdFieldNumber = 1;
  inline ::google::protobuf::int32 chapter_id() const;
  inline void set_chapter_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.CG_CetCapturePointInfo)
 private:
  inline void set_has_chapter_id();
  inline void clear_has_chapter_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 chapter_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildCapturePoint_2eproto();
  friend void protobuf_AssignDesc_GuildCapturePoint_2eproto();
  friend void protobuf_ShutdownFile_GuildCapturePoint_2eproto();

  void InitAsDefaultInstance();
  static CG_CetCapturePointInfo* default_instance_;
};
// -------------------------------------------------------------------

class CG_PullAllCapturePoint : public ::google::protobuf::Message {
 public:
  CG_PullAllCapturePoint();
  virtual ~CG_PullAllCapturePoint();

  CG_PullAllCapturePoint(const CG_PullAllCapturePoint& from);

  inline CG_PullAllCapturePoint& operator=(const CG_PullAllCapturePoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CG_PullAllCapturePoint& default_instance();

  void Swap(CG_PullAllCapturePoint* other);

  // implements Message ----------------------------------------------

  CG_PullAllCapturePoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CG_PullAllCapturePoint& from);
  void MergeFrom(const CG_PullAllCapturePoint& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Packet.CG_PullAllCapturePoint)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_GuildCapturePoint_2eproto();
  friend void protobuf_AssignDesc_GuildCapturePoint_2eproto();
  friend void protobuf_ShutdownFile_GuildCapturePoint_2eproto();

  void InitAsDefaultInstance();
  static CG_PullAllCapturePoint* default_instance_;
};
// -------------------------------------------------------------------

class CG_ReleaseCapturePoint : public ::google::protobuf::Message {
 public:
  CG_ReleaseCapturePoint();
  virtual ~CG_ReleaseCapturePoint();

  CG_ReleaseCapturePoint(const CG_ReleaseCapturePoint& from);

  inline CG_ReleaseCapturePoint& operator=(const CG_ReleaseCapturePoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CG_ReleaseCapturePoint& default_instance();

  void Swap(CG_ReleaseCapturePoint* other);

  // implements Message ----------------------------------------------

  CG_ReleaseCapturePoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CG_ReleaseCapturePoint& from);
  void MergeFrom(const CG_ReleaseCapturePoint& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Packet.CG_ReleaseCapturePoint)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_GuildCapturePoint_2eproto();
  friend void protobuf_AssignDesc_GuildCapturePoint_2eproto();
  friend void protobuf_ShutdownFile_GuildCapturePoint_2eproto();

  void InitAsDefaultInstance();
  static CG_ReleaseCapturePoint* default_instance_;
};
// -------------------------------------------------------------------

class GC_AllGuildCapturePoint : public ::google::protobuf::Message {
 public:
  GC_AllGuildCapturePoint();
  virtual ~GC_AllGuildCapturePoint();

  GC_AllGuildCapturePoint(const GC_AllGuildCapturePoint& from);

  inline GC_AllGuildCapturePoint& operator=(const GC_AllGuildCapturePoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GC_AllGuildCapturePoint& default_instance();

  void Swap(GC_AllGuildCapturePoint* other);

  // implements Message ----------------------------------------------

  GC_AllGuildCapturePoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GC_AllGuildCapturePoint& from);
  void MergeFrom(const GC_AllGuildCapturePoint& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Packet.CapturePotinBrief all_points = 1;
  inline int all_points_size() const;
  inline void clear_all_points();
  static const int kAllPointsFieldNumber = 1;
  inline const ::Packet::CapturePotinBrief& all_points(int index) const;
  inline ::Packet::CapturePotinBrief* mutable_all_points(int index);
  inline ::Packet::CapturePotinBrief* add_all_points();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::CapturePotinBrief >&
      all_points() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::CapturePotinBrief >*
      mutable_all_points();

  // @@protoc_insertion_point(class_scope:Packet.GC_AllGuildCapturePoint)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::CapturePotinBrief > all_points_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildCapturePoint_2eproto();
  friend void protobuf_AssignDesc_GuildCapturePoint_2eproto();
  friend void protobuf_ShutdownFile_GuildCapturePoint_2eproto();

  void InitAsDefaultInstance();
  static GC_AllGuildCapturePoint* default_instance_;
};
// -------------------------------------------------------------------

class CG_PullCapturePoint : public ::google::protobuf::Message {
 public:
  CG_PullCapturePoint();
  virtual ~CG_PullCapturePoint();

  CG_PullCapturePoint(const CG_PullCapturePoint& from);

  inline CG_PullCapturePoint& operator=(const CG_PullCapturePoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CG_PullCapturePoint& default_instance();

  void Swap(CG_PullCapturePoint* other);

  // implements Message ----------------------------------------------

  CG_PullCapturePoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CG_PullCapturePoint& from);
  void MergeFrom(const CG_PullCapturePoint& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Packet.CG_PullCapturePoint)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_GuildCapturePoint_2eproto();
  friend void protobuf_AssignDesc_GuildCapturePoint_2eproto();
  friend void protobuf_ShutdownFile_GuildCapturePoint_2eproto();

  void InitAsDefaultInstance();
  static CG_PullCapturePoint* default_instance_;
};
// -------------------------------------------------------------------

class CG_UpdateTaxRate : public ::google::protobuf::Message {
 public:
  CG_UpdateTaxRate();
  virtual ~CG_UpdateTaxRate();

  CG_UpdateTaxRate(const CG_UpdateTaxRate& from);

  inline CG_UpdateTaxRate& operator=(const CG_UpdateTaxRate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CG_UpdateTaxRate& default_instance();

  void Swap(CG_UpdateTaxRate* other);

  // implements Message ----------------------------------------------

  CG_UpdateTaxRate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CG_UpdateTaxRate& from);
  void MergeFrom(const CG_UpdateTaxRate& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 rate = 1;
  inline bool has_rate() const;
  inline void clear_rate();
  static const int kRateFieldNumber = 1;
  inline ::google::protobuf::int32 rate() const;
  inline void set_rate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.CG_UpdateTaxRate)
 private:
  inline void set_has_rate();
  inline void clear_has_rate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 rate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildCapturePoint_2eproto();
  friend void protobuf_AssignDesc_GuildCapturePoint_2eproto();
  friend void protobuf_ShutdownFile_GuildCapturePoint_2eproto();

  void InitAsDefaultInstance();
  static CG_UpdateTaxRate* default_instance_;
};
// -------------------------------------------------------------------

class CG_CollectGuildTax : public ::google::protobuf::Message {
 public:
  CG_CollectGuildTax();
  virtual ~CG_CollectGuildTax();

  CG_CollectGuildTax(const CG_CollectGuildTax& from);

  inline CG_CollectGuildTax& operator=(const CG_CollectGuildTax& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CG_CollectGuildTax& default_instance();

  void Swap(CG_CollectGuildTax* other);

  // implements Message ----------------------------------------------

  CG_CollectGuildTax* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CG_CollectGuildTax& from);
  void MergeFrom(const CG_CollectGuildTax& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Packet.CG_CollectGuildTax)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_GuildCapturePoint_2eproto();
  friend void protobuf_AssignDesc_GuildCapturePoint_2eproto();
  friend void protobuf_ShutdownFile_GuildCapturePoint_2eproto();

  void InitAsDefaultInstance();
  static CG_CollectGuildTax* default_instance_;
};
// -------------------------------------------------------------------

class GC_GuildCapturePoint : public ::google::protobuf::Message {
 public:
  GC_GuildCapturePoint();
  virtual ~GC_GuildCapturePoint();

  GC_GuildCapturePoint(const GC_GuildCapturePoint& from);

  inline GC_GuildCapturePoint& operator=(const GC_GuildCapturePoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GC_GuildCapturePoint& default_instance();

  void Swap(GC_GuildCapturePoint* other);

  // implements Message ----------------------------------------------

  GC_GuildCapturePoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GC_GuildCapturePoint& from);
  void MergeFrom(const GC_GuildCapturePoint& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 chapter_id = 1;
  inline bool has_chapter_id() const;
  inline void clear_chapter_id();
  static const int kChapterIdFieldNumber = 1;
  inline ::google::protobuf::int32 chapter_id() const;
  inline void set_chapter_id(::google::protobuf::int32 value);

  // repeated .Packet.StrongHoldData strong_holds = 2;
  inline int strong_holds_size() const;
  inline void clear_strong_holds();
  static const int kStrongHoldsFieldNumber = 2;
  inline const ::Packet::StrongHoldData& strong_holds(int index) const;
  inline ::Packet::StrongHoldData* mutable_strong_holds(int index);
  inline ::Packet::StrongHoldData* add_strong_holds();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::StrongHoldData >&
      strong_holds() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::StrongHoldData >*
      mutable_strong_holds();

  // required int32 hook_users = 3;
  inline bool has_hook_users() const;
  inline void clear_hook_users();
  static const int kHookUsersFieldNumber = 3;
  inline ::google::protobuf::int32 hook_users() const;
  inline void set_hook_users(::google::protobuf::int32 value);

  // required int32 tax = 4;
  inline bool has_tax() const;
  inline void clear_tax();
  static const int kTaxFieldNumber = 4;
  inline ::google::protobuf::int32 tax() const;
  inline void set_tax(::google::protobuf::int32 value);

  // required int32 tax_rate = 5;
  inline bool has_tax_rate() const;
  inline void clear_tax_rate();
  static const int kTaxRateFieldNumber = 5;
  inline ::google::protobuf::int32 tax_rate() const;
  inline void set_tax_rate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.GC_GuildCapturePoint)
 private:
  inline void set_has_chapter_id();
  inline void clear_has_chapter_id();
  inline void set_has_hook_users();
  inline void clear_has_hook_users();
  inline void set_has_tax();
  inline void clear_has_tax();
  inline void set_has_tax_rate();
  inline void clear_has_tax_rate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::StrongHoldData > strong_holds_;
  ::google::protobuf::int32 chapter_id_;
  ::google::protobuf::int32 hook_users_;
  ::google::protobuf::int32 tax_;
  ::google::protobuf::int32 tax_rate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_GuildCapturePoint_2eproto();
  friend void protobuf_AssignDesc_GuildCapturePoint_2eproto();
  friend void protobuf_ShutdownFile_GuildCapturePoint_2eproto();

  void InitAsDefaultInstance();
  static GC_GuildCapturePoint* default_instance_;
};
// -------------------------------------------------------------------

class CG_StartChallengeCapturePoint : public ::google::protobuf::Message {
 public:
  CG_StartChallengeCapturePoint();
  virtual ~CG_StartChallengeCapturePoint();

  CG_StartChallengeCapturePoint(const CG_StartChallengeCapturePoint& from);

  inline CG_StartChallengeCapturePoint& operator=(const CG_StartChallengeCapturePoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CG_StartChallengeCapturePoint& default_instance();

  void Swap(CG_StartChallengeCapturePoint* other);

  // implements Message ----------------------------------------------

  CG_StartChallengeCapturePoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CG_StartChallengeCapturePoint& from);
  void MergeFrom(const CG_StartChallengeCapturePoint& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 chapter_id = 1;
  inline bool has_chapter_id() const;
  inline void clear_chapter_id();
  static const int kChapterIdFieldNumber = 1;
  inline ::google::protobuf::int32 chapter_id() const;
  inline void set_chapter_id(::google::protobuf::int32 value);

  // required int32 target_guild_guid = 2;
  inline bool has_target_guild_guid() const;
  inline void clear_target_guild_guid();
  static const int kTargetGuildGuidFieldNumber = 2;
  inline ::google::protobuf::int32 target_guild_guid() const;
  inline void set_target_guild_guid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.CG_StartChallengeCapturePoint)
 private:
  inline void set_has_chapter_id();
  inline void clear_has_chapter_id();
  inline void set_has_target_guild_guid();
  inline void clear_has_target_guild_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 chapter_id_;
  ::google::protobuf::int32 target_guild_guid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GuildCapturePoint_2eproto();
  friend void protobuf_AssignDesc_GuildCapturePoint_2eproto();
  friend void protobuf_ShutdownFile_GuildCapturePoint_2eproto();

  void InitAsDefaultInstance();
  static CG_StartChallengeCapturePoint* default_instance_;
};
// -------------------------------------------------------------------

class CG_UpdateStrongHold : public ::google::protobuf::Message {
 public:
  CG_UpdateStrongHold();
  virtual ~CG_UpdateStrongHold();

  CG_UpdateStrongHold(const CG_UpdateStrongHold& from);

  inline CG_UpdateStrongHold& operator=(const CG_UpdateStrongHold& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CG_UpdateStrongHold& default_instance();

  void Swap(CG_UpdateStrongHold* other);

  // implements Message ----------------------------------------------

  CG_UpdateStrongHold* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CG_UpdateStrongHold& from);
  void MergeFrom(const CG_UpdateStrongHold& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Packet.StrongHoldData strong_holds = 1;
  inline int strong_holds_size() const;
  inline void clear_strong_holds();
  static const int kStrongHoldsFieldNumber = 1;
  inline const ::Packet::StrongHoldData& strong_holds(int index) const;
  inline ::Packet::StrongHoldData* mutable_strong_holds(int index);
  inline ::Packet::StrongHoldData* add_strong_holds();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::StrongHoldData >&
      strong_holds() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::StrongHoldData >*
      mutable_strong_holds();

  // @@protoc_insertion_point(class_scope:Packet.CG_UpdateStrongHold)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::StrongHoldData > strong_holds_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GuildCapturePoint_2eproto();
  friend void protobuf_AssignDesc_GuildCapturePoint_2eproto();
  friend void protobuf_ShutdownFile_GuildCapturePoint_2eproto();

  void InitAsDefaultInstance();
  static CG_UpdateStrongHold* default_instance_;
};
// ===================================================================


// ===================================================================

// HeroData

// required fixed64 player_guid = 1;
inline bool HeroData::has_player_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeroData::set_has_player_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeroData::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeroData::clear_player_guid() {
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 HeroData::player_guid() const {
  return player_guid_;
}
inline void HeroData::set_player_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_player_guid();
  player_guid_ = value;
}

// required int32 actor_config_id = 2;
inline bool HeroData::has_actor_config_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeroData::set_has_actor_config_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeroData::clear_has_actor_config_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeroData::clear_actor_config_id() {
  actor_config_id_ = 0;
  clear_has_actor_config_id();
  SetDirty();
}
inline ::google::protobuf::int32 HeroData::actor_config_id() const {
  return actor_config_id_;
}
inline void HeroData::set_actor_config_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_actor_config_id();
  actor_config_id_ = value;
}

// required int32 level = 3;
inline bool HeroData::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeroData::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeroData::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeroData::clear_level() {
  level_ = 0;
  clear_has_level();
  SetDirty();
}
inline ::google::protobuf::int32 HeroData::level() const {
  return level_;
}
inline void HeroData::set_level(::google::protobuf::int32 value) {
  SetDirty();
  set_has_level();
  level_ = value;
}

// required .Packet.ActorColor color = 4;
inline bool HeroData::has_color() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HeroData::set_has_color() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HeroData::clear_has_color() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HeroData::clear_color() {
  color_ = 1;
  clear_has_color();
  SetDirty();
}
inline ::Packet::ActorColor HeroData::color() const {
  return static_cast< ::Packet::ActorColor >(color_);
}
inline void HeroData::set_color(::Packet::ActorColor value) {
  assert(::Packet::ActorColor_IsValid(value));
  SetDirty();
  set_has_color();
  color_ = value;
}

// required .Packet.ActorStar star = 5;
inline bool HeroData::has_star() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HeroData::set_has_star() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HeroData::clear_has_star() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HeroData::clear_star() {
  star_ = 1;
  clear_has_star();
  SetDirty();
}
inline ::Packet::ActorStar HeroData::star() const {
  return static_cast< ::Packet::ActorStar >(star_);
}
inline void HeroData::set_star(::Packet::ActorStar value) {
  assert(::Packet::ActorStar_IsValid(value));
  SetDirty();
  set_has_star();
  star_ = value;
}

// required int32 hair = 6;
inline bool HeroData::has_hair() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HeroData::set_has_hair() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HeroData::clear_has_hair() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HeroData::clear_hair() {
  hair_ = 0;
  clear_has_hair();
  SetDirty();
}
inline ::google::protobuf::int32 HeroData::hair() const {
  return hair_;
}
inline void HeroData::set_hair(::google::protobuf::int32 value) {
  SetDirty();
  set_has_hair();
  hair_ = value;
}

// -------------------------------------------------------------------

// StrongHoldData

// repeated .Packet.HeroData heros = 1;
inline int StrongHoldData::heros_size() const {
  return heros_.size();
}
inline void StrongHoldData::clear_heros() {
  heros_.Clear();
  SetDirty();
}
inline const ::Packet::HeroData& StrongHoldData::heros(int index) const {
  return heros_.Get(index);
}
inline ::Packet::HeroData* StrongHoldData::mutable_heros(int index) {
  SetDirty();
  return heros_.Mutable(index);
}
inline ::Packet::HeroData* StrongHoldData::add_heros() {
  SetDirty();
  return heros_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::HeroData >&
StrongHoldData::heros() const {
  return heros_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::HeroData >*
StrongHoldData::mutable_heros() {
  SetDirty();
  return &heros_;
}

// required int32 score = 2;
inline bool StrongHoldData::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StrongHoldData::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StrongHoldData::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StrongHoldData::clear_score() {
  score_ = 0;
  clear_has_score();
  SetDirty();
}
inline ::google::protobuf::int32 StrongHoldData::score() const {
  return score_;
}
inline void StrongHoldData::set_score(::google::protobuf::int32 value) {
  SetDirty();
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// CapturePointDB

// required int32 chapter_id = 1;
inline bool CapturePointDB::has_chapter_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CapturePointDB::set_has_chapter_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CapturePointDB::clear_has_chapter_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CapturePointDB::clear_chapter_id() {
  chapter_id_ = 0;
  clear_has_chapter_id();
  SetDirty();
}
inline ::google::protobuf::int32 CapturePointDB::chapter_id() const {
  return chapter_id_;
}
inline void CapturePointDB::set_chapter_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_chapter_id();
  chapter_id_ = value;
}

// required .Packet.CaptureStatus status = 2;
inline bool CapturePointDB::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CapturePointDB::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CapturePointDB::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CapturePointDB::clear_status() {
  status_ = 0;
  clear_has_status();
  SetDirty();
}
inline ::Packet::CaptureStatus CapturePointDB::status() const {
  return static_cast< ::Packet::CaptureStatus >(status_);
}
inline void CapturePointDB::set_status(::Packet::CaptureStatus value) {
  assert(::Packet::CaptureStatus_IsValid(value));
  SetDirty();
  set_has_status();
  status_ = value;
}

// required fixed64 capture_guild_guid = 5;
inline bool CapturePointDB::has_capture_guild_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CapturePointDB::set_has_capture_guild_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CapturePointDB::clear_has_capture_guild_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CapturePointDB::clear_capture_guild_guid() {
  capture_guild_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_capture_guild_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 CapturePointDB::capture_guild_guid() const {
  return capture_guild_guid_;
}
inline void CapturePointDB::set_capture_guild_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_capture_guild_guid();
  capture_guild_guid_ = value;
}

// required fixed64 challenger_guild_guid = 6;
inline bool CapturePointDB::has_challenger_guild_guid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CapturePointDB::set_has_challenger_guild_guid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CapturePointDB::clear_has_challenger_guild_guid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CapturePointDB::clear_challenger_guild_guid() {
  challenger_guild_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_challenger_guild_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 CapturePointDB::challenger_guild_guid() const {
  return challenger_guild_guid_;
}
inline void CapturePointDB::set_challenger_guild_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_challenger_guild_guid();
  challenger_guild_guid_ = value;
}

// required int32 status_change_time = 7;
inline bool CapturePointDB::has_status_change_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CapturePointDB::set_has_status_change_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CapturePointDB::clear_has_status_change_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CapturePointDB::clear_status_change_time() {
  status_change_time_ = 0;
  clear_has_status_change_time();
  SetDirty();
}
inline ::google::protobuf::int32 CapturePointDB::status_change_time() const {
  return status_change_time_;
}
inline void CapturePointDB::set_status_change_time(::google::protobuf::int32 value) {
  SetDirty();
  set_has_status_change_time();
  status_change_time_ = value;
}

// required fixed64 winner_guid = 8;
inline bool CapturePointDB::has_winner_guid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CapturePointDB::set_has_winner_guid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CapturePointDB::clear_has_winner_guid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CapturePointDB::clear_winner_guid() {
  winner_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_winner_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 CapturePointDB::winner_guid() const {
  return winner_guid_;
}
inline void CapturePointDB::set_winner_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_winner_guid();
  winner_guid_ = value;
}

// required fixed64 log_guid = 9;
inline bool CapturePointDB::has_log_guid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CapturePointDB::set_has_log_guid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CapturePointDB::clear_has_log_guid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CapturePointDB::clear_log_guid() {
  log_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_log_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 CapturePointDB::log_guid() const {
  return log_guid_;
}
inline void CapturePointDB::set_log_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_log_guid();
  log_guid_ = value;
}

// repeated .Packet.HeroData capture_hero_datas = 10;
inline int CapturePointDB::capture_hero_datas_size() const {
  return capture_hero_datas_.size();
}
inline void CapturePointDB::clear_capture_hero_datas() {
  capture_hero_datas_.Clear();
  SetDirty();
}
inline const ::Packet::HeroData& CapturePointDB::capture_hero_datas(int index) const {
  return capture_hero_datas_.Get(index);
}
inline ::Packet::HeroData* CapturePointDB::mutable_capture_hero_datas(int index) {
  SetDirty();
  return capture_hero_datas_.Mutable(index);
}
inline ::Packet::HeroData* CapturePointDB::add_capture_hero_datas() {
  SetDirty();
  return capture_hero_datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::HeroData >&
CapturePointDB::capture_hero_datas() const {
  return capture_hero_datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::HeroData >*
CapturePointDB::mutable_capture_hero_datas() {
  SetDirty();
  return &capture_hero_datas_;
}

// repeated .Packet.HeroData challenger_hero_datas = 11;
inline int CapturePointDB::challenger_hero_datas_size() const {
  return challenger_hero_datas_.size();
}
inline void CapturePointDB::clear_challenger_hero_datas() {
  challenger_hero_datas_.Clear();
  SetDirty();
}
inline const ::Packet::HeroData& CapturePointDB::challenger_hero_datas(int index) const {
  return challenger_hero_datas_.Get(index);
}
inline ::Packet::HeroData* CapturePointDB::mutable_challenger_hero_datas(int index) {
  SetDirty();
  return challenger_hero_datas_.Mutable(index);
}
inline ::Packet::HeroData* CapturePointDB::add_challenger_hero_datas() {
  SetDirty();
  return challenger_hero_datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::HeroData >&
CapturePointDB::challenger_hero_datas() const {
  return challenger_hero_datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::HeroData >*
CapturePointDB::mutable_challenger_hero_datas() {
  SetDirty();
  return &challenger_hero_datas_;
}

// repeated .Packet.StrongHoldStatus strong_hold_status = 12;
inline int CapturePointDB::strong_hold_status_size() const {
  return strong_hold_status_.size();
}
inline void CapturePointDB::clear_strong_hold_status() {
  strong_hold_status_.Clear();
  SetDirty();
}
inline ::Packet::StrongHoldStatus CapturePointDB::strong_hold_status(int index) const {
  return static_cast< ::Packet::StrongHoldStatus >(strong_hold_status_.Get(index));
}
inline void CapturePointDB::set_strong_hold_status(int index, ::Packet::StrongHoldStatus value) {
  assert(::Packet::StrongHoldStatus_IsValid(value));
  SetDirty();
  strong_hold_status_.Set(index, value);
}
inline void CapturePointDB::add_strong_hold_status(::Packet::StrongHoldStatus value) {
  assert(::Packet::StrongHoldStatus_IsValid(value));
  SetDirty();
  strong_hold_status_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
CapturePointDB::strong_hold_status() const {
  return strong_hold_status_;
}
inline ::google::protobuf::RepeatedField<int>*
CapturePointDB::mutable_strong_hold_status() {
  SetDirty();
  return &strong_hold_status_;
}

// -------------------------------------------------------------------

// GuildCapturePointDB

// required fixed64 guid = 1;
inline bool GuildCapturePointDB::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildCapturePointDB::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildCapturePointDB::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildCapturePointDB::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildCapturePointDB::guid() const {
  return guid_;
}
inline void GuildCapturePointDB::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// repeated .Packet.StrongHoldData strong_holds = 2;
inline int GuildCapturePointDB::strong_holds_size() const {
  return strong_holds_.size();
}
inline void GuildCapturePointDB::clear_strong_holds() {
  strong_holds_.Clear();
  SetDirty();
}
inline const ::Packet::StrongHoldData& GuildCapturePointDB::strong_holds(int index) const {
  return strong_holds_.Get(index);
}
inline ::Packet::StrongHoldData* GuildCapturePointDB::mutable_strong_holds(int index) {
  SetDirty();
  return strong_holds_.Mutable(index);
}
inline ::Packet::StrongHoldData* GuildCapturePointDB::add_strong_holds() {
  SetDirty();
  return strong_holds_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::StrongHoldData >&
GuildCapturePointDB::strong_holds() const {
  return strong_holds_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::StrongHoldData >*
GuildCapturePointDB::mutable_strong_holds() {
  SetDirty();
  return &strong_holds_;
}

// -------------------------------------------------------------------

// GuildCaptureBattleDetail

// repeated .Packet.HeroData attacker_heros = 1;
inline int GuildCaptureBattleDetail::attacker_heros_size() const {
  return attacker_heros_.size();
}
inline void GuildCaptureBattleDetail::clear_attacker_heros() {
  attacker_heros_.Clear();
  SetDirty();
}
inline const ::Packet::HeroData& GuildCaptureBattleDetail::attacker_heros(int index) const {
  return attacker_heros_.Get(index);
}
inline ::Packet::HeroData* GuildCaptureBattleDetail::mutable_attacker_heros(int index) {
  SetDirty();
  return attacker_heros_.Mutable(index);
}
inline ::Packet::HeroData* GuildCaptureBattleDetail::add_attacker_heros() {
  SetDirty();
  return attacker_heros_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::HeroData >&
GuildCaptureBattleDetail::attacker_heros() const {
  return attacker_heros_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::HeroData >*
GuildCaptureBattleDetail::mutable_attacker_heros() {
  SetDirty();
  return &attacker_heros_;
}

// repeated .Packet.HeroData defender_heros = 2;
inline int GuildCaptureBattleDetail::defender_heros_size() const {
  return defender_heros_.size();
}
inline void GuildCaptureBattleDetail::clear_defender_heros() {
  defender_heros_.Clear();
  SetDirty();
}
inline const ::Packet::HeroData& GuildCaptureBattleDetail::defender_heros(int index) const {
  return defender_heros_.Get(index);
}
inline ::Packet::HeroData* GuildCaptureBattleDetail::mutable_defender_heros(int index) {
  SetDirty();
  return defender_heros_.Mutable(index);
}
inline ::Packet::HeroData* GuildCaptureBattleDetail::add_defender_heros() {
  SetDirty();
  return defender_heros_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::HeroData >&
GuildCaptureBattleDetail::defender_heros() const {
  return defender_heros_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::HeroData >*
GuildCaptureBattleDetail::mutable_defender_heros() {
  SetDirty();
  return &defender_heros_;
}

// required bool attacker_win = 3;
inline bool GuildCaptureBattleDetail::has_attacker_win() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildCaptureBattleDetail::set_has_attacker_win() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildCaptureBattleDetail::clear_has_attacker_win() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildCaptureBattleDetail::clear_attacker_win() {
  attacker_win_ = false;
  clear_has_attacker_win();
  SetDirty();
}
inline bool GuildCaptureBattleDetail::attacker_win() const {
  return attacker_win_;
}
inline void GuildCaptureBattleDetail::set_attacker_win(bool value) {
  SetDirty();
  set_has_attacker_win();
  attacker_win_ = value;
}

// required fixed64 reply_guid = 4;
inline bool GuildCaptureBattleDetail::has_reply_guid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildCaptureBattleDetail::set_has_reply_guid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildCaptureBattleDetail::clear_has_reply_guid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildCaptureBattleDetail::clear_reply_guid() {
  reply_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_reply_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildCaptureBattleDetail::reply_guid() const {
  return reply_guid_;
}
inline void GuildCaptureBattleDetail::set_reply_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_reply_guid();
  reply_guid_ = value;
}

// -------------------------------------------------------------------

// GuildCaptureBattleLogDB

// required fixed64 guid = 1;
inline bool GuildCaptureBattleLogDB::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildCaptureBattleLogDB::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildCaptureBattleLogDB::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildCaptureBattleLogDB::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildCaptureBattleLogDB::guid() const {
  return guid_;
}
inline void GuildCaptureBattleLogDB::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// required fixed64 attacker_guid = 2;
inline bool GuildCaptureBattleLogDB::has_attacker_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildCaptureBattleLogDB::set_has_attacker_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildCaptureBattleLogDB::clear_has_attacker_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildCaptureBattleLogDB::clear_attacker_guid() {
  attacker_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_attacker_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildCaptureBattleLogDB::attacker_guid() const {
  return attacker_guid_;
}
inline void GuildCaptureBattleLogDB::set_attacker_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_attacker_guid();
  attacker_guid_ = value;
}

// required fixed64 defender_guid = 3;
inline bool GuildCaptureBattleLogDB::has_defender_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildCaptureBattleLogDB::set_has_defender_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildCaptureBattleLogDB::clear_has_defender_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildCaptureBattleLogDB::clear_defender_guid() {
  defender_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_defender_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildCaptureBattleLogDB::defender_guid() const {
  return defender_guid_;
}
inline void GuildCaptureBattleLogDB::set_defender_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_defender_guid();
  defender_guid_ = value;
}

// required int32 chapter_id = 4;
inline bool GuildCaptureBattleLogDB::has_chapter_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildCaptureBattleLogDB::set_has_chapter_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildCaptureBattleLogDB::clear_has_chapter_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildCaptureBattleLogDB::clear_chapter_id() {
  chapter_id_ = 0;
  clear_has_chapter_id();
  SetDirty();
}
inline ::google::protobuf::int32 GuildCaptureBattleLogDB::chapter_id() const {
  return chapter_id_;
}
inline void GuildCaptureBattleLogDB::set_chapter_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_chapter_id();
  chapter_id_ = value;
}

// required int32 battle_time = 5;
inline bool GuildCaptureBattleLogDB::has_battle_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuildCaptureBattleLogDB::set_has_battle_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuildCaptureBattleLogDB::clear_has_battle_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuildCaptureBattleLogDB::clear_battle_time() {
  battle_time_ = 0;
  clear_has_battle_time();
  SetDirty();
}
inline ::google::protobuf::int32 GuildCaptureBattleLogDB::battle_time() const {
  return battle_time_;
}
inline void GuildCaptureBattleLogDB::set_battle_time(::google::protobuf::int32 value) {
  SetDirty();
  set_has_battle_time();
  battle_time_ = value;
}

// required bool attacker_win = 6;
inline bool GuildCaptureBattleLogDB::has_attacker_win() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GuildCaptureBattleLogDB::set_has_attacker_win() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GuildCaptureBattleLogDB::clear_has_attacker_win() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GuildCaptureBattleLogDB::clear_attacker_win() {
  attacker_win_ = false;
  clear_has_attacker_win();
  SetDirty();
}
inline bool GuildCaptureBattleLogDB::attacker_win() const {
  return attacker_win_;
}
inline void GuildCaptureBattleLogDB::set_attacker_win(bool value) {
  SetDirty();
  set_has_attacker_win();
  attacker_win_ = value;
}

// required bool finish = 7;
inline bool GuildCaptureBattleLogDB::has_finish() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GuildCaptureBattleLogDB::set_has_finish() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GuildCaptureBattleLogDB::clear_has_finish() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GuildCaptureBattleLogDB::clear_finish() {
  finish_ = false;
  clear_has_finish();
  SetDirty();
}
inline bool GuildCaptureBattleLogDB::finish() const {
  return finish_;
}
inline void GuildCaptureBattleLogDB::set_finish(bool value) {
  SetDirty();
  set_has_finish();
  finish_ = value;
}

// repeated .Packet.GuildCaptureBattleDetail details = 8;
inline int GuildCaptureBattleLogDB::details_size() const {
  return details_.size();
}
inline void GuildCaptureBattleLogDB::clear_details() {
  details_.Clear();
  SetDirty();
}
inline const ::Packet::GuildCaptureBattleDetail& GuildCaptureBattleLogDB::details(int index) const {
  return details_.Get(index);
}
inline ::Packet::GuildCaptureBattleDetail* GuildCaptureBattleLogDB::mutable_details(int index) {
  SetDirty();
  return details_.Mutable(index);
}
inline ::Packet::GuildCaptureBattleDetail* GuildCaptureBattleLogDB::add_details() {
  SetDirty();
  return details_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::GuildCaptureBattleDetail >&
GuildCaptureBattleLogDB::details() const {
  return details_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::GuildCaptureBattleDetail >*
GuildCaptureBattleLogDB::mutable_details() {
  SetDirty();
  return &details_;
}

// -------------------------------------------------------------------

// GuildCaptureBattleLog

// required fixed64 attacker_guid = 1;
inline bool GuildCaptureBattleLog::has_attacker_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildCaptureBattleLog::set_has_attacker_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildCaptureBattleLog::clear_has_attacker_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildCaptureBattleLog::clear_attacker_guid() {
  attacker_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_attacker_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildCaptureBattleLog::attacker_guid() const {
  return attacker_guid_;
}
inline void GuildCaptureBattleLog::set_attacker_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_attacker_guid();
  attacker_guid_ = value;
}

// required string attacker_name = 2;
inline bool GuildCaptureBattleLog::has_attacker_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildCaptureBattleLog::set_has_attacker_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildCaptureBattleLog::clear_has_attacker_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildCaptureBattleLog::clear_attacker_name() {
  if (attacker_name_ != &::google::protobuf::internal::kEmptyString) {
    attacker_name_->clear();
  }
  clear_has_attacker_name();
  SetDirty();
}
inline const ::std::string& GuildCaptureBattleLog::attacker_name() const {
  return *attacker_name_;
}
inline void GuildCaptureBattleLog::set_attacker_name(const ::std::string& value) {
  SetDirty();
  set_has_attacker_name();
  if (attacker_name_ == &::google::protobuf::internal::kEmptyString) {
    attacker_name_ = new ::std::string;
  }
  attacker_name_->assign(value);
}
inline void GuildCaptureBattleLog::set_attacker_name(const char* value) {
  SetDirty();
  set_has_attacker_name();
  if (attacker_name_ == &::google::protobuf::internal::kEmptyString) {
    attacker_name_ = new ::std::string;
  }
  attacker_name_->assign(value);
}
inline void GuildCaptureBattleLog::set_attacker_name(const char* value, size_t size) {
  SetDirty();
  set_has_attacker_name();
  if (attacker_name_ == &::google::protobuf::internal::kEmptyString) {
    attacker_name_ = new ::std::string;
  }
  attacker_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildCaptureBattleLog::mutable_attacker_name() {
  SetDirty();
  set_has_attacker_name();
  if (attacker_name_ == &::google::protobuf::internal::kEmptyString) {
    attacker_name_ = new ::std::string;
  }
  return attacker_name_;
}
inline ::std::string* GuildCaptureBattleLog::release_attacker_name() {
  SetDirty();
  clear_has_attacker_name();
  if (attacker_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attacker_name_;
    attacker_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildCaptureBattleLog::set_allocated_attacker_name(::std::string* attacker_name) {
  SetDirty();
  if (attacker_name_ != &::google::protobuf::internal::kEmptyString) {
    delete attacker_name_;
  }
  if (attacker_name) {
    set_has_attacker_name();
    attacker_name_ = attacker_name;
  } else {
    clear_has_attacker_name();
    attacker_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string attacker_icon = 3;
inline bool GuildCaptureBattleLog::has_attacker_icon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildCaptureBattleLog::set_has_attacker_icon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildCaptureBattleLog::clear_has_attacker_icon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildCaptureBattleLog::clear_attacker_icon() {
  if (attacker_icon_ != &::google::protobuf::internal::kEmptyString) {
    attacker_icon_->clear();
  }
  clear_has_attacker_icon();
  SetDirty();
}
inline const ::std::string& GuildCaptureBattleLog::attacker_icon() const {
  return *attacker_icon_;
}
inline void GuildCaptureBattleLog::set_attacker_icon(const ::std::string& value) {
  SetDirty();
  set_has_attacker_icon();
  if (attacker_icon_ == &::google::protobuf::internal::kEmptyString) {
    attacker_icon_ = new ::std::string;
  }
  attacker_icon_->assign(value);
}
inline void GuildCaptureBattleLog::set_attacker_icon(const char* value) {
  SetDirty();
  set_has_attacker_icon();
  if (attacker_icon_ == &::google::protobuf::internal::kEmptyString) {
    attacker_icon_ = new ::std::string;
  }
  attacker_icon_->assign(value);
}
inline void GuildCaptureBattleLog::set_attacker_icon(const char* value, size_t size) {
  SetDirty();
  set_has_attacker_icon();
  if (attacker_icon_ == &::google::protobuf::internal::kEmptyString) {
    attacker_icon_ = new ::std::string;
  }
  attacker_icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildCaptureBattleLog::mutable_attacker_icon() {
  SetDirty();
  set_has_attacker_icon();
  if (attacker_icon_ == &::google::protobuf::internal::kEmptyString) {
    attacker_icon_ = new ::std::string;
  }
  return attacker_icon_;
}
inline ::std::string* GuildCaptureBattleLog::release_attacker_icon() {
  SetDirty();
  clear_has_attacker_icon();
  if (attacker_icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attacker_icon_;
    attacker_icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildCaptureBattleLog::set_allocated_attacker_icon(::std::string* attacker_icon) {
  SetDirty();
  if (attacker_icon_ != &::google::protobuf::internal::kEmptyString) {
    delete attacker_icon_;
  }
  if (attacker_icon) {
    set_has_attacker_icon();
    attacker_icon_ = attacker_icon;
  } else {
    clear_has_attacker_icon();
    attacker_icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required fixed64 defender_guid = 4;
inline bool GuildCaptureBattleLog::has_defender_guid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildCaptureBattleLog::set_has_defender_guid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildCaptureBattleLog::clear_has_defender_guid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildCaptureBattleLog::clear_defender_guid() {
  defender_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_defender_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 GuildCaptureBattleLog::defender_guid() const {
  return defender_guid_;
}
inline void GuildCaptureBattleLog::set_defender_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_defender_guid();
  defender_guid_ = value;
}

// required string defender_name = 5;
inline bool GuildCaptureBattleLog::has_defender_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuildCaptureBattleLog::set_has_defender_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuildCaptureBattleLog::clear_has_defender_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuildCaptureBattleLog::clear_defender_name() {
  if (defender_name_ != &::google::protobuf::internal::kEmptyString) {
    defender_name_->clear();
  }
  clear_has_defender_name();
  SetDirty();
}
inline const ::std::string& GuildCaptureBattleLog::defender_name() const {
  return *defender_name_;
}
inline void GuildCaptureBattleLog::set_defender_name(const ::std::string& value) {
  SetDirty();
  set_has_defender_name();
  if (defender_name_ == &::google::protobuf::internal::kEmptyString) {
    defender_name_ = new ::std::string;
  }
  defender_name_->assign(value);
}
inline void GuildCaptureBattleLog::set_defender_name(const char* value) {
  SetDirty();
  set_has_defender_name();
  if (defender_name_ == &::google::protobuf::internal::kEmptyString) {
    defender_name_ = new ::std::string;
  }
  defender_name_->assign(value);
}
inline void GuildCaptureBattleLog::set_defender_name(const char* value, size_t size) {
  SetDirty();
  set_has_defender_name();
  if (defender_name_ == &::google::protobuf::internal::kEmptyString) {
    defender_name_ = new ::std::string;
  }
  defender_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildCaptureBattleLog::mutable_defender_name() {
  SetDirty();
  set_has_defender_name();
  if (defender_name_ == &::google::protobuf::internal::kEmptyString) {
    defender_name_ = new ::std::string;
  }
  return defender_name_;
}
inline ::std::string* GuildCaptureBattleLog::release_defender_name() {
  SetDirty();
  clear_has_defender_name();
  if (defender_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = defender_name_;
    defender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildCaptureBattleLog::set_allocated_defender_name(::std::string* defender_name) {
  SetDirty();
  if (defender_name_ != &::google::protobuf::internal::kEmptyString) {
    delete defender_name_;
  }
  if (defender_name) {
    set_has_defender_name();
    defender_name_ = defender_name;
  } else {
    clear_has_defender_name();
    defender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string defender_icon = 6;
inline bool GuildCaptureBattleLog::has_defender_icon() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GuildCaptureBattleLog::set_has_defender_icon() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GuildCaptureBattleLog::clear_has_defender_icon() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GuildCaptureBattleLog::clear_defender_icon() {
  if (defender_icon_ != &::google::protobuf::internal::kEmptyString) {
    defender_icon_->clear();
  }
  clear_has_defender_icon();
  SetDirty();
}
inline const ::std::string& GuildCaptureBattleLog::defender_icon() const {
  return *defender_icon_;
}
inline void GuildCaptureBattleLog::set_defender_icon(const ::std::string& value) {
  SetDirty();
  set_has_defender_icon();
  if (defender_icon_ == &::google::protobuf::internal::kEmptyString) {
    defender_icon_ = new ::std::string;
  }
  defender_icon_->assign(value);
}
inline void GuildCaptureBattleLog::set_defender_icon(const char* value) {
  SetDirty();
  set_has_defender_icon();
  if (defender_icon_ == &::google::protobuf::internal::kEmptyString) {
    defender_icon_ = new ::std::string;
  }
  defender_icon_->assign(value);
}
inline void GuildCaptureBattleLog::set_defender_icon(const char* value, size_t size) {
  SetDirty();
  set_has_defender_icon();
  if (defender_icon_ == &::google::protobuf::internal::kEmptyString) {
    defender_icon_ = new ::std::string;
  }
  defender_icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildCaptureBattleLog::mutable_defender_icon() {
  SetDirty();
  set_has_defender_icon();
  if (defender_icon_ == &::google::protobuf::internal::kEmptyString) {
    defender_icon_ = new ::std::string;
  }
  return defender_icon_;
}
inline ::std::string* GuildCaptureBattleLog::release_defender_icon() {
  SetDirty();
  clear_has_defender_icon();
  if (defender_icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = defender_icon_;
    defender_icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildCaptureBattleLog::set_allocated_defender_icon(::std::string* defender_icon) {
  SetDirty();
  if (defender_icon_ != &::google::protobuf::internal::kEmptyString) {
    delete defender_icon_;
  }
  if (defender_icon) {
    set_has_defender_icon();
    defender_icon_ = defender_icon;
  } else {
    clear_has_defender_icon();
    defender_icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool attacker_win = 7;
inline bool GuildCaptureBattleLog::has_attacker_win() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GuildCaptureBattleLog::set_has_attacker_win() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GuildCaptureBattleLog::clear_has_attacker_win() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GuildCaptureBattleLog::clear_attacker_win() {
  attacker_win_ = false;
  clear_has_attacker_win();
  SetDirty();
}
inline bool GuildCaptureBattleLog::attacker_win() const {
  return attacker_win_;
}
inline void GuildCaptureBattleLog::set_attacker_win(bool value) {
  SetDirty();
  set_has_attacker_win();
  attacker_win_ = value;
}

// required int32 battle_time = 8;
inline bool GuildCaptureBattleLog::has_battle_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GuildCaptureBattleLog::set_has_battle_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GuildCaptureBattleLog::clear_has_battle_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GuildCaptureBattleLog::clear_battle_time() {
  battle_time_ = 0;
  clear_has_battle_time();
  SetDirty();
}
inline ::google::protobuf::int32 GuildCaptureBattleLog::battle_time() const {
  return battle_time_;
}
inline void GuildCaptureBattleLog::set_battle_time(::google::protobuf::int32 value) {
  SetDirty();
  set_has_battle_time();
  battle_time_ = value;
}

// repeated .Packet.GuildCaptureBattleDetail details = 9;
inline int GuildCaptureBattleLog::details_size() const {
  return details_.size();
}
inline void GuildCaptureBattleLog::clear_details() {
  details_.Clear();
  SetDirty();
}
inline const ::Packet::GuildCaptureBattleDetail& GuildCaptureBattleLog::details(int index) const {
  return details_.Get(index);
}
inline ::Packet::GuildCaptureBattleDetail* GuildCaptureBattleLog::mutable_details(int index) {
  SetDirty();
  return details_.Mutable(index);
}
inline ::Packet::GuildCaptureBattleDetail* GuildCaptureBattleLog::add_details() {
  SetDirty();
  return details_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::GuildCaptureBattleDetail >&
GuildCaptureBattleLog::details() const {
  return details_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::GuildCaptureBattleDetail >*
GuildCaptureBattleLog::mutable_details() {
  SetDirty();
  return &details_;
}

// required int32 chapter_id = 10;
inline bool GuildCaptureBattleLog::has_chapter_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GuildCaptureBattleLog::set_has_chapter_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GuildCaptureBattleLog::clear_has_chapter_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GuildCaptureBattleLog::clear_chapter_id() {
  chapter_id_ = 0;
  clear_has_chapter_id();
  SetDirty();
}
inline ::google::protobuf::int32 GuildCaptureBattleLog::chapter_id() const {
  return chapter_id_;
}
inline void GuildCaptureBattleLog::set_chapter_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_chapter_id();
  chapter_id_ = value;
}

// -------------------------------------------------------------------

// GC_GuildCaptureAllBattleLog

// repeated .Packet.GuildCaptureBattleLog logs = 1;
inline int GC_GuildCaptureAllBattleLog::logs_size() const {
  return logs_.size();
}
inline void GC_GuildCaptureAllBattleLog::clear_logs() {
  logs_.Clear();
  SetDirty();
}
inline const ::Packet::GuildCaptureBattleLog& GC_GuildCaptureAllBattleLog::logs(int index) const {
  return logs_.Get(index);
}
inline ::Packet::GuildCaptureBattleLog* GC_GuildCaptureAllBattleLog::mutable_logs(int index) {
  SetDirty();
  return logs_.Mutable(index);
}
inline ::Packet::GuildCaptureBattleLog* GC_GuildCaptureAllBattleLog::add_logs() {
  SetDirty();
  return logs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::GuildCaptureBattleLog >&
GC_GuildCaptureAllBattleLog::logs() const {
  return logs_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::GuildCaptureBattleLog >*
GC_GuildCaptureAllBattleLog::mutable_logs() {
  SetDirty();
  return &logs_;
}

// -------------------------------------------------------------------

// CapturePotinBrief

// required int32 chapter_id = 1;
inline bool CapturePotinBrief::has_chapter_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CapturePotinBrief::set_has_chapter_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CapturePotinBrief::clear_has_chapter_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CapturePotinBrief::clear_chapter_id() {
  chapter_id_ = 0;
  clear_has_chapter_id();
  SetDirty();
}
inline ::google::protobuf::int32 CapturePotinBrief::chapter_id() const {
  return chapter_id_;
}
inline void CapturePotinBrief::set_chapter_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_chapter_id();
  chapter_id_ = value;
}

// required .Packet.CaptureStatus status = 2;
inline bool CapturePotinBrief::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CapturePotinBrief::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CapturePotinBrief::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CapturePotinBrief::clear_status() {
  status_ = 0;
  clear_has_status();
  SetDirty();
}
inline ::Packet::CaptureStatus CapturePotinBrief::status() const {
  return static_cast< ::Packet::CaptureStatus >(status_);
}
inline void CapturePotinBrief::set_status(::Packet::CaptureStatus value) {
  assert(::Packet::CaptureStatus_IsValid(value));
  SetDirty();
  set_has_status();
  status_ = value;
}

// required string capture_guild_name = 3;
inline bool CapturePotinBrief::has_capture_guild_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CapturePotinBrief::set_has_capture_guild_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CapturePotinBrief::clear_has_capture_guild_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CapturePotinBrief::clear_capture_guild_name() {
  if (capture_guild_name_ != &::google::protobuf::internal::kEmptyString) {
    capture_guild_name_->clear();
  }
  clear_has_capture_guild_name();
  SetDirty();
}
inline const ::std::string& CapturePotinBrief::capture_guild_name() const {
  return *capture_guild_name_;
}
inline void CapturePotinBrief::set_capture_guild_name(const ::std::string& value) {
  SetDirty();
  set_has_capture_guild_name();
  if (capture_guild_name_ == &::google::protobuf::internal::kEmptyString) {
    capture_guild_name_ = new ::std::string;
  }
  capture_guild_name_->assign(value);
}
inline void CapturePotinBrief::set_capture_guild_name(const char* value) {
  SetDirty();
  set_has_capture_guild_name();
  if (capture_guild_name_ == &::google::protobuf::internal::kEmptyString) {
    capture_guild_name_ = new ::std::string;
  }
  capture_guild_name_->assign(value);
}
inline void CapturePotinBrief::set_capture_guild_name(const char* value, size_t size) {
  SetDirty();
  set_has_capture_guild_name();
  if (capture_guild_name_ == &::google::protobuf::internal::kEmptyString) {
    capture_guild_name_ = new ::std::string;
  }
  capture_guild_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CapturePotinBrief::mutable_capture_guild_name() {
  SetDirty();
  set_has_capture_guild_name();
  if (capture_guild_name_ == &::google::protobuf::internal::kEmptyString) {
    capture_guild_name_ = new ::std::string;
  }
  return capture_guild_name_;
}
inline ::std::string* CapturePotinBrief::release_capture_guild_name() {
  SetDirty();
  clear_has_capture_guild_name();
  if (capture_guild_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = capture_guild_name_;
    capture_guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CapturePotinBrief::set_allocated_capture_guild_name(::std::string* capture_guild_name) {
  SetDirty();
  if (capture_guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete capture_guild_name_;
  }
  if (capture_guild_name) {
    set_has_capture_guild_name();
    capture_guild_name_ = capture_guild_name;
  } else {
    clear_has_capture_guild_name();
    capture_guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string capture_guild_icon = 4;
inline bool CapturePotinBrief::has_capture_guild_icon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CapturePotinBrief::set_has_capture_guild_icon() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CapturePotinBrief::clear_has_capture_guild_icon() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CapturePotinBrief::clear_capture_guild_icon() {
  if (capture_guild_icon_ != &::google::protobuf::internal::kEmptyString) {
    capture_guild_icon_->clear();
  }
  clear_has_capture_guild_icon();
  SetDirty();
}
inline const ::std::string& CapturePotinBrief::capture_guild_icon() const {
  return *capture_guild_icon_;
}
inline void CapturePotinBrief::set_capture_guild_icon(const ::std::string& value) {
  SetDirty();
  set_has_capture_guild_icon();
  if (capture_guild_icon_ == &::google::protobuf::internal::kEmptyString) {
    capture_guild_icon_ = new ::std::string;
  }
  capture_guild_icon_->assign(value);
}
inline void CapturePotinBrief::set_capture_guild_icon(const char* value) {
  SetDirty();
  set_has_capture_guild_icon();
  if (capture_guild_icon_ == &::google::protobuf::internal::kEmptyString) {
    capture_guild_icon_ = new ::std::string;
  }
  capture_guild_icon_->assign(value);
}
inline void CapturePotinBrief::set_capture_guild_icon(const char* value, size_t size) {
  SetDirty();
  set_has_capture_guild_icon();
  if (capture_guild_icon_ == &::google::protobuf::internal::kEmptyString) {
    capture_guild_icon_ = new ::std::string;
  }
  capture_guild_icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CapturePotinBrief::mutable_capture_guild_icon() {
  SetDirty();
  set_has_capture_guild_icon();
  if (capture_guild_icon_ == &::google::protobuf::internal::kEmptyString) {
    capture_guild_icon_ = new ::std::string;
  }
  return capture_guild_icon_;
}
inline ::std::string* CapturePotinBrief::release_capture_guild_icon() {
  SetDirty();
  clear_has_capture_guild_icon();
  if (capture_guild_icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = capture_guild_icon_;
    capture_guild_icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CapturePotinBrief::set_allocated_capture_guild_icon(::std::string* capture_guild_icon) {
  SetDirty();
  if (capture_guild_icon_ != &::google::protobuf::internal::kEmptyString) {
    delete capture_guild_icon_;
  }
  if (capture_guild_icon) {
    set_has_capture_guild_icon();
    capture_guild_icon_ = capture_guild_icon;
  } else {
    clear_has_capture_guild_icon();
    capture_guild_icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required fixed64 capture_guild_guid = 5;
inline bool CapturePotinBrief::has_capture_guild_guid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CapturePotinBrief::set_has_capture_guild_guid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CapturePotinBrief::clear_has_capture_guild_guid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CapturePotinBrief::clear_capture_guild_guid() {
  capture_guild_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_capture_guild_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 CapturePotinBrief::capture_guild_guid() const {
  return capture_guild_guid_;
}
inline void CapturePotinBrief::set_capture_guild_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_capture_guild_guid();
  capture_guild_guid_ = value;
}

// required int32 hook_users = 6;
inline bool CapturePotinBrief::has_hook_users() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CapturePotinBrief::set_has_hook_users() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CapturePotinBrief::clear_has_hook_users() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CapturePotinBrief::clear_hook_users() {
  hook_users_ = 0;
  clear_has_hook_users();
  SetDirty();
}
inline ::google::protobuf::int32 CapturePotinBrief::hook_users() const {
  return hook_users_;
}
inline void CapturePotinBrief::set_hook_users(::google::protobuf::int32 value) {
  SetDirty();
  set_has_hook_users();
  hook_users_ = value;
}

// required int32 tax = 7;
inline bool CapturePotinBrief::has_tax() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CapturePotinBrief::set_has_tax() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CapturePotinBrief::clear_has_tax() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CapturePotinBrief::clear_tax() {
  tax_ = 0;
  clear_has_tax();
  SetDirty();
}
inline ::google::protobuf::int32 CapturePotinBrief::tax() const {
  return tax_;
}
inline void CapturePotinBrief::set_tax(::google::protobuf::int32 value) {
  SetDirty();
  set_has_tax();
  tax_ = value;
}

// required int32 tax_rate = 8;
inline bool CapturePotinBrief::has_tax_rate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CapturePotinBrief::set_has_tax_rate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CapturePotinBrief::clear_has_tax_rate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CapturePotinBrief::clear_tax_rate() {
  tax_rate_ = 0;
  clear_has_tax_rate();
  SetDirty();
}
inline ::google::protobuf::int32 CapturePotinBrief::tax_rate() const {
  return tax_rate_;
}
inline void CapturePotinBrief::set_tax_rate(::google::protobuf::int32 value) {
  SetDirty();
  set_has_tax_rate();
  tax_rate_ = value;
}

// required int32 status_change_time = 9;
inline bool CapturePotinBrief::has_status_change_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CapturePotinBrief::set_has_status_change_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CapturePotinBrief::clear_has_status_change_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CapturePotinBrief::clear_status_change_time() {
  status_change_time_ = 0;
  clear_has_status_change_time();
  SetDirty();
}
inline ::google::protobuf::int32 CapturePotinBrief::status_change_time() const {
  return status_change_time_;
}
inline void CapturePotinBrief::set_status_change_time(::google::protobuf::int32 value) {
  SetDirty();
  set_has_status_change_time();
  status_change_time_ = value;
}

// repeated .Packet.HeroData capture_hero_datas = 10;
inline int CapturePotinBrief::capture_hero_datas_size() const {
  return capture_hero_datas_.size();
}
inline void CapturePotinBrief::clear_capture_hero_datas() {
  capture_hero_datas_.Clear();
  SetDirty();
}
inline const ::Packet::HeroData& CapturePotinBrief::capture_hero_datas(int index) const {
  return capture_hero_datas_.Get(index);
}
inline ::Packet::HeroData* CapturePotinBrief::mutable_capture_hero_datas(int index) {
  SetDirty();
  return capture_hero_datas_.Mutable(index);
}
inline ::Packet::HeroData* CapturePotinBrief::add_capture_hero_datas() {
  SetDirty();
  return capture_hero_datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::HeroData >&
CapturePotinBrief::capture_hero_datas() const {
  return capture_hero_datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::HeroData >*
CapturePotinBrief::mutable_capture_hero_datas() {
  SetDirty();
  return &capture_hero_datas_;
}

// repeated .Packet.HeroData challenger_hero_datas = 11;
inline int CapturePotinBrief::challenger_hero_datas_size() const {
  return challenger_hero_datas_.size();
}
inline void CapturePotinBrief::clear_challenger_hero_datas() {
  challenger_hero_datas_.Clear();
  SetDirty();
}
inline const ::Packet::HeroData& CapturePotinBrief::challenger_hero_datas(int index) const {
  return challenger_hero_datas_.Get(index);
}
inline ::Packet::HeroData* CapturePotinBrief::mutable_challenger_hero_datas(int index) {
  SetDirty();
  return challenger_hero_datas_.Mutable(index);
}
inline ::Packet::HeroData* CapturePotinBrief::add_challenger_hero_datas() {
  SetDirty();
  return challenger_hero_datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::HeroData >&
CapturePotinBrief::challenger_hero_datas() const {
  return challenger_hero_datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::HeroData >*
CapturePotinBrief::mutable_challenger_hero_datas() {
  SetDirty();
  return &challenger_hero_datas_;
}

// repeated .Packet.StrongHoldStatus strong_hold_status = 12;
inline int CapturePotinBrief::strong_hold_status_size() const {
  return strong_hold_status_.size();
}
inline void CapturePotinBrief::clear_strong_hold_status() {
  strong_hold_status_.Clear();
  SetDirty();
}
inline ::Packet::StrongHoldStatus CapturePotinBrief::strong_hold_status(int index) const {
  return static_cast< ::Packet::StrongHoldStatus >(strong_hold_status_.Get(index));
}
inline void CapturePotinBrief::set_strong_hold_status(int index, ::Packet::StrongHoldStatus value) {
  assert(::Packet::StrongHoldStatus_IsValid(value));
  SetDirty();
  strong_hold_status_.Set(index, value);
}
inline void CapturePotinBrief::add_strong_hold_status(::Packet::StrongHoldStatus value) {
  assert(::Packet::StrongHoldStatus_IsValid(value));
  SetDirty();
  strong_hold_status_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
CapturePotinBrief::strong_hold_status() const {
  return strong_hold_status_;
}
inline ::google::protobuf::RepeatedField<int>*
CapturePotinBrief::mutable_strong_hold_status() {
  SetDirty();
  return &strong_hold_status_;
}

// optional string challenger_name = 13;
inline bool CapturePotinBrief::has_challenger_name() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CapturePotinBrief::set_has_challenger_name() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CapturePotinBrief::clear_has_challenger_name() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CapturePotinBrief::clear_challenger_name() {
  if (challenger_name_ != &::google::protobuf::internal::kEmptyString) {
    challenger_name_->clear();
  }
  clear_has_challenger_name();
  SetDirty();
}
inline const ::std::string& CapturePotinBrief::challenger_name() const {
  return *challenger_name_;
}
inline void CapturePotinBrief::set_challenger_name(const ::std::string& value) {
  SetDirty();
  set_has_challenger_name();
  if (challenger_name_ == &::google::protobuf::internal::kEmptyString) {
    challenger_name_ = new ::std::string;
  }
  challenger_name_->assign(value);
}
inline void CapturePotinBrief::set_challenger_name(const char* value) {
  SetDirty();
  set_has_challenger_name();
  if (challenger_name_ == &::google::protobuf::internal::kEmptyString) {
    challenger_name_ = new ::std::string;
  }
  challenger_name_->assign(value);
}
inline void CapturePotinBrief::set_challenger_name(const char* value, size_t size) {
  SetDirty();
  set_has_challenger_name();
  if (challenger_name_ == &::google::protobuf::internal::kEmptyString) {
    challenger_name_ = new ::std::string;
  }
  challenger_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CapturePotinBrief::mutable_challenger_name() {
  SetDirty();
  set_has_challenger_name();
  if (challenger_name_ == &::google::protobuf::internal::kEmptyString) {
    challenger_name_ = new ::std::string;
  }
  return challenger_name_;
}
inline ::std::string* CapturePotinBrief::release_challenger_name() {
  SetDirty();
  clear_has_challenger_name();
  if (challenger_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = challenger_name_;
    challenger_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CapturePotinBrief::set_allocated_challenger_name(::std::string* challenger_name) {
  SetDirty();
  if (challenger_name_ != &::google::protobuf::internal::kEmptyString) {
    delete challenger_name_;
  }
  if (challenger_name) {
    set_has_challenger_name();
    challenger_name_ = challenger_name;
  } else {
    clear_has_challenger_name();
    challenger_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string challenger_icon = 14;
inline bool CapturePotinBrief::has_challenger_icon() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CapturePotinBrief::set_has_challenger_icon() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CapturePotinBrief::clear_has_challenger_icon() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CapturePotinBrief::clear_challenger_icon() {
  if (challenger_icon_ != &::google::protobuf::internal::kEmptyString) {
    challenger_icon_->clear();
  }
  clear_has_challenger_icon();
  SetDirty();
}
inline const ::std::string& CapturePotinBrief::challenger_icon() const {
  return *challenger_icon_;
}
inline void CapturePotinBrief::set_challenger_icon(const ::std::string& value) {
  SetDirty();
  set_has_challenger_icon();
  if (challenger_icon_ == &::google::protobuf::internal::kEmptyString) {
    challenger_icon_ = new ::std::string;
  }
  challenger_icon_->assign(value);
}
inline void CapturePotinBrief::set_challenger_icon(const char* value) {
  SetDirty();
  set_has_challenger_icon();
  if (challenger_icon_ == &::google::protobuf::internal::kEmptyString) {
    challenger_icon_ = new ::std::string;
  }
  challenger_icon_->assign(value);
}
inline void CapturePotinBrief::set_challenger_icon(const char* value, size_t size) {
  SetDirty();
  set_has_challenger_icon();
  if (challenger_icon_ == &::google::protobuf::internal::kEmptyString) {
    challenger_icon_ = new ::std::string;
  }
  challenger_icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CapturePotinBrief::mutable_challenger_icon() {
  SetDirty();
  set_has_challenger_icon();
  if (challenger_icon_ == &::google::protobuf::internal::kEmptyString) {
    challenger_icon_ = new ::std::string;
  }
  return challenger_icon_;
}
inline ::std::string* CapturePotinBrief::release_challenger_icon() {
  SetDirty();
  clear_has_challenger_icon();
  if (challenger_icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = challenger_icon_;
    challenger_icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CapturePotinBrief::set_allocated_challenger_icon(::std::string* challenger_icon) {
  SetDirty();
  if (challenger_icon_ != &::google::protobuf::internal::kEmptyString) {
    delete challenger_icon_;
  }
  if (challenger_icon) {
    set_has_challenger_icon();
    challenger_icon_ = challenger_icon;
  } else {
    clear_has_challenger_icon();
    challenger_icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CG_AllBattleLog

// -------------------------------------------------------------------

// CG_CetCapturePointInfo

// required int32 chapter_id = 1;
inline bool CG_CetCapturePointInfo::has_chapter_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CG_CetCapturePointInfo::set_has_chapter_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CG_CetCapturePointInfo::clear_has_chapter_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CG_CetCapturePointInfo::clear_chapter_id() {
  chapter_id_ = 0;
  clear_has_chapter_id();
  SetDirty();
}
inline ::google::protobuf::int32 CG_CetCapturePointInfo::chapter_id() const {
  return chapter_id_;
}
inline void CG_CetCapturePointInfo::set_chapter_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_chapter_id();
  chapter_id_ = value;
}

// -------------------------------------------------------------------

// CG_PullAllCapturePoint

// -------------------------------------------------------------------

// CG_ReleaseCapturePoint

// -------------------------------------------------------------------

// GC_AllGuildCapturePoint

// repeated .Packet.CapturePotinBrief all_points = 1;
inline int GC_AllGuildCapturePoint::all_points_size() const {
  return all_points_.size();
}
inline void GC_AllGuildCapturePoint::clear_all_points() {
  all_points_.Clear();
  SetDirty();
}
inline const ::Packet::CapturePotinBrief& GC_AllGuildCapturePoint::all_points(int index) const {
  return all_points_.Get(index);
}
inline ::Packet::CapturePotinBrief* GC_AllGuildCapturePoint::mutable_all_points(int index) {
  SetDirty();
  return all_points_.Mutable(index);
}
inline ::Packet::CapturePotinBrief* GC_AllGuildCapturePoint::add_all_points() {
  SetDirty();
  return all_points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::CapturePotinBrief >&
GC_AllGuildCapturePoint::all_points() const {
  return all_points_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::CapturePotinBrief >*
GC_AllGuildCapturePoint::mutable_all_points() {
  SetDirty();
  return &all_points_;
}

// -------------------------------------------------------------------

// CG_PullCapturePoint

// -------------------------------------------------------------------

// CG_UpdateTaxRate

// required int32 rate = 1;
inline bool CG_UpdateTaxRate::has_rate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CG_UpdateTaxRate::set_has_rate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CG_UpdateTaxRate::clear_has_rate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CG_UpdateTaxRate::clear_rate() {
  rate_ = 0;
  clear_has_rate();
  SetDirty();
}
inline ::google::protobuf::int32 CG_UpdateTaxRate::rate() const {
  return rate_;
}
inline void CG_UpdateTaxRate::set_rate(::google::protobuf::int32 value) {
  SetDirty();
  set_has_rate();
  rate_ = value;
}

// -------------------------------------------------------------------

// CG_CollectGuildTax

// -------------------------------------------------------------------

// GC_GuildCapturePoint

// required int32 chapter_id = 1;
inline bool GC_GuildCapturePoint::has_chapter_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GC_GuildCapturePoint::set_has_chapter_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GC_GuildCapturePoint::clear_has_chapter_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GC_GuildCapturePoint::clear_chapter_id() {
  chapter_id_ = 0;
  clear_has_chapter_id();
  SetDirty();
}
inline ::google::protobuf::int32 GC_GuildCapturePoint::chapter_id() const {
  return chapter_id_;
}
inline void GC_GuildCapturePoint::set_chapter_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_chapter_id();
  chapter_id_ = value;
}

// repeated .Packet.StrongHoldData strong_holds = 2;
inline int GC_GuildCapturePoint::strong_holds_size() const {
  return strong_holds_.size();
}
inline void GC_GuildCapturePoint::clear_strong_holds() {
  strong_holds_.Clear();
  SetDirty();
}
inline const ::Packet::StrongHoldData& GC_GuildCapturePoint::strong_holds(int index) const {
  return strong_holds_.Get(index);
}
inline ::Packet::StrongHoldData* GC_GuildCapturePoint::mutable_strong_holds(int index) {
  SetDirty();
  return strong_holds_.Mutable(index);
}
inline ::Packet::StrongHoldData* GC_GuildCapturePoint::add_strong_holds() {
  SetDirty();
  return strong_holds_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::StrongHoldData >&
GC_GuildCapturePoint::strong_holds() const {
  return strong_holds_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::StrongHoldData >*
GC_GuildCapturePoint::mutable_strong_holds() {
  SetDirty();
  return &strong_holds_;
}

// required int32 hook_users = 3;
inline bool GC_GuildCapturePoint::has_hook_users() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GC_GuildCapturePoint::set_has_hook_users() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GC_GuildCapturePoint::clear_has_hook_users() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GC_GuildCapturePoint::clear_hook_users() {
  hook_users_ = 0;
  clear_has_hook_users();
  SetDirty();
}
inline ::google::protobuf::int32 GC_GuildCapturePoint::hook_users() const {
  return hook_users_;
}
inline void GC_GuildCapturePoint::set_hook_users(::google::protobuf::int32 value) {
  SetDirty();
  set_has_hook_users();
  hook_users_ = value;
}

// required int32 tax = 4;
inline bool GC_GuildCapturePoint::has_tax() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GC_GuildCapturePoint::set_has_tax() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GC_GuildCapturePoint::clear_has_tax() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GC_GuildCapturePoint::clear_tax() {
  tax_ = 0;
  clear_has_tax();
  SetDirty();
}
inline ::google::protobuf::int32 GC_GuildCapturePoint::tax() const {
  return tax_;
}
inline void GC_GuildCapturePoint::set_tax(::google::protobuf::int32 value) {
  SetDirty();
  set_has_tax();
  tax_ = value;
}

// required int32 tax_rate = 5;
inline bool GC_GuildCapturePoint::has_tax_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GC_GuildCapturePoint::set_has_tax_rate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GC_GuildCapturePoint::clear_has_tax_rate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GC_GuildCapturePoint::clear_tax_rate() {
  tax_rate_ = 0;
  clear_has_tax_rate();
  SetDirty();
}
inline ::google::protobuf::int32 GC_GuildCapturePoint::tax_rate() const {
  return tax_rate_;
}
inline void GC_GuildCapturePoint::set_tax_rate(::google::protobuf::int32 value) {
  SetDirty();
  set_has_tax_rate();
  tax_rate_ = value;
}

// -------------------------------------------------------------------

// CG_StartChallengeCapturePoint

// required int32 chapter_id = 1;
inline bool CG_StartChallengeCapturePoint::has_chapter_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CG_StartChallengeCapturePoint::set_has_chapter_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CG_StartChallengeCapturePoint::clear_has_chapter_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CG_StartChallengeCapturePoint::clear_chapter_id() {
  chapter_id_ = 0;
  clear_has_chapter_id();
  SetDirty();
}
inline ::google::protobuf::int32 CG_StartChallengeCapturePoint::chapter_id() const {
  return chapter_id_;
}
inline void CG_StartChallengeCapturePoint::set_chapter_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_chapter_id();
  chapter_id_ = value;
}

// required int32 target_guild_guid = 2;
inline bool CG_StartChallengeCapturePoint::has_target_guild_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CG_StartChallengeCapturePoint::set_has_target_guild_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CG_StartChallengeCapturePoint::clear_has_target_guild_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CG_StartChallengeCapturePoint::clear_target_guild_guid() {
  target_guild_guid_ = 0;
  clear_has_target_guild_guid();
  SetDirty();
}
inline ::google::protobuf::int32 CG_StartChallengeCapturePoint::target_guild_guid() const {
  return target_guild_guid_;
}
inline void CG_StartChallengeCapturePoint::set_target_guild_guid(::google::protobuf::int32 value) {
  SetDirty();
  set_has_target_guild_guid();
  target_guild_guid_ = value;
}

// -------------------------------------------------------------------

// CG_UpdateStrongHold

// repeated .Packet.StrongHoldData strong_holds = 1;
inline int CG_UpdateStrongHold::strong_holds_size() const {
  return strong_holds_.size();
}
inline void CG_UpdateStrongHold::clear_strong_holds() {
  strong_holds_.Clear();
  SetDirty();
}
inline const ::Packet::StrongHoldData& CG_UpdateStrongHold::strong_holds(int index) const {
  return strong_holds_.Get(index);
}
inline ::Packet::StrongHoldData* CG_UpdateStrongHold::mutable_strong_holds(int index) {
  SetDirty();
  return strong_holds_.Mutable(index);
}
inline ::Packet::StrongHoldData* CG_UpdateStrongHold::add_strong_holds() {
  SetDirty();
  return strong_holds_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::StrongHoldData >&
CG_UpdateStrongHold::strong_holds() const {
  return strong_holds_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::StrongHoldData >*
CG_UpdateStrongHold::mutable_strong_holds() {
  SetDirty();
  return &strong_holds_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GuildCapturePoint_2eproto__INCLUDED
