// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FriendMail.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FriendMail.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Packet {

namespace {

const ::google::protobuf::Descriptor* FriendInfotReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendInfotReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageListPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageListPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZoneInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZoneInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageBoard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageBoard_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessagePlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessagePlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientFriendMessageNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientFriendMessageNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddClientFriendMessageNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddClientFriendMessageNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelClientFriendMessageNotifyRR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelClientFriendMessageNotifyRR_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendMessageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendMessageInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendInfotReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendInfotReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecommendReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecommendReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FindPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FindPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FindFriendByNameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FindFriendByNameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FindFriendByGuidReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FindFriendByGuidReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FindFriendReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FindFriendReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendListUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendListUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecommendsUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecommendsUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessagesUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessagesUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddFriendMessagesReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddFriendMessagesReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendMessageReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendMessageReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetZoneSignatureReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetZoneSignatureReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignatureUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignatureUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddFriendReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddFriendReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelFriendReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelFriendReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskTeamReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskTeamReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskGuildReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskGuildReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendGiftReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendGiftReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ViewZoneReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ViewZoneReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZoneBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZoneBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ViewZoneReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ViewZoneReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelMessageReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelMessageReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewMessageNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewMessageNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateSign_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateSign_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMessageBoard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMessageBoard_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddMessageBoard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddMessageBoard_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FriendMail_2eproto() {
  protobuf_AddDesc_FriendMail_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FriendMail.proto");
  GOOGLE_CHECK(file != NULL);
  FriendInfotReq_descriptor_ = file->message_type(0);
  static const int FriendInfotReq_offsets_[1] = {
  };
  FriendInfotReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendInfotReq_descriptor_,
      FriendInfotReq::default_instance_,
      FriendInfotReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfotReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfotReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendInfotReq));
  MessageListPlayerInfo_descriptor_ = file->message_type(1);
  static const int MessageListPlayerInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageListPlayerInfo, player_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageListPlayerInfo, msg_player_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageListPlayerInfo, msg_player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageListPlayerInfo, msg_player_hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageListPlayerInfo, msg_player_level_),
  };
  MessageListPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageListPlayerInfo_descriptor_,
      MessageListPlayerInfo::default_instance_,
      MessageListPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageListPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageListPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageListPlayerInfo));
  FriendPlayer_descriptor_ = file->message_type(2);
  static const int FriendPlayer_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendPlayer, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendPlayer, player_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendPlayer, friend_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendPlayer, friendvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendPlayer, init_actor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendPlayer, hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendPlayer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendPlayer, level_),
  };
  FriendPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendPlayer_descriptor_,
      FriendPlayer::default_instance_,
      FriendPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendPlayer));
  ZoneInfo_descriptor_ = file->message_type(3);
  static const int ZoneInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfo, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfo, signid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfo, popularity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfo, celldata_),
  };
  ZoneInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZoneInfo_descriptor_,
      ZoneInfo::default_instance_,
      ZoneInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZoneInfo));
  MessageBoard_descriptor_ = file->message_type(4);
  static const int MessageBoard_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageBoard, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageBoard, owerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageBoard, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageBoard, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageBoard, playerhair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageBoard, playerlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageBoard, replyplayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageBoard, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageBoard, date_),
  };
  MessageBoard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageBoard_descriptor_,
      MessageBoard::default_instance_,
      MessageBoard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageBoard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageBoard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageBoard));
  MessagePlayerInfo_descriptor_ = file->message_type(5);
  static const int MessagePlayerInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePlayerInfo, source_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePlayerInfo, source_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePlayerInfo, source_hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePlayerInfo, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePlayerInfo, init_actor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePlayerInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePlayerInfo, havenew_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePlayerInfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePlayerInfo, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePlayerInfo, online_),
  };
  MessagePlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessagePlayerInfo_descriptor_,
      MessagePlayerInfo::default_instance_,
      MessagePlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessagePlayerInfo));
  ClientFriendMessageNotify_descriptor_ = file->message_type(6);
  static const int ClientFriendMessageNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientFriendMessageNotify, notify_),
  };
  ClientFriendMessageNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientFriendMessageNotify_descriptor_,
      ClientFriendMessageNotify::default_instance_,
      ClientFriendMessageNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientFriendMessageNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientFriendMessageNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientFriendMessageNotify));
  AddClientFriendMessageNotify_descriptor_ = file->message_type(7);
  static const int AddClientFriendMessageNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddClientFriendMessageNotify, notify_),
  };
  AddClientFriendMessageNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddClientFriendMessageNotify_descriptor_,
      AddClientFriendMessageNotify::default_instance_,
      AddClientFriendMessageNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddClientFriendMessageNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddClientFriendMessageNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddClientFriendMessageNotify));
  DelClientFriendMessageNotifyRR_descriptor_ = file->message_type(8);
  static const int DelClientFriendMessageNotifyRR_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelClientFriendMessageNotifyRR, source_guid_),
  };
  DelClientFriendMessageNotifyRR_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelClientFriendMessageNotifyRR_descriptor_,
      DelClientFriendMessageNotifyRR::default_instance_,
      DelClientFriendMessageNotifyRR_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelClientFriendMessageNotifyRR, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelClientFriendMessageNotifyRR, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelClientFriendMessageNotifyRR));
  ItemCount_descriptor_ = file->message_type(9);
  static const int ItemCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemCount, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemCount, itemcount_),
  };
  ItemCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemCount_descriptor_,
      ItemCount::default_instance_,
      ItemCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemCount));
  MessageInfo_descriptor_ = file->message_type(10);
  static const int MessageInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, owner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, source_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, chat_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, items_),
  };
  MessageInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageInfo_descriptor_,
      MessageInfo::default_instance_,
      MessageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageInfo));
  FriendMessageInfo_descriptor_ = file->message_type(11);
  static const int FriendMessageInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendMessageInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendMessageInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendMessageInfo, receive_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendMessageInfo, datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendMessageInfo, send_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendMessageInfo, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendMessageInfo, chat_time_),
  };
  FriendMessageInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendMessageInfo_descriptor_,
      FriendMessageInfo::default_instance_,
      FriendMessageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendMessageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendMessageInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendMessageInfo));
  FriendInfo_descriptor_ = file->message_type(12);
  static const int FriendInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, init_actor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, friendvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, online_),
  };
  FriendInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendInfo_descriptor_,
      FriendInfo::default_instance_,
      FriendInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendInfo));
  FriendInfotReply_descriptor_ = file->message_type(13);
  static const int FriendInfotReply_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfotReply, mailmessages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfotReply, friends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfotReply, recommends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfotReply, notifyinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfotReply, zoneinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfotReply, msgs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfotReply, offlinemsgs_),
  };
  FriendInfotReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendInfotReply_descriptor_,
      FriendInfotReply::default_instance_,
      FriendInfotReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfotReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfotReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendInfotReply));
  RecommendReq_descriptor_ = file->message_type(14);
  static const int RecommendReq_offsets_[1] = {
  };
  RecommendReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecommendReq_descriptor_,
      RecommendReq::default_instance_,
      RecommendReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecommendReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecommendReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecommendReq));
  FriendListReq_descriptor_ = file->message_type(15);
  static const int FriendListReq_offsets_[1] = {
  };
  FriendListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendListReq_descriptor_,
      FriendListReq::default_instance_,
      FriendListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendListReq));
  FindPlayerInfo_descriptor_ = file->message_type(16);
  static const int FindPlayerInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindPlayerInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindPlayerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindPlayerInfo, hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindPlayerInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindPlayerInfo, init_actor_id_),
  };
  FindPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FindPlayerInfo_descriptor_,
      FindPlayerInfo::default_instance_,
      FindPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FindPlayerInfo));
  FindFriendByNameReq_descriptor_ = file->message_type(17);
  static const int FindFriendByNameReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindFriendByNameReq, name_),
  };
  FindFriendByNameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FindFriendByNameReq_descriptor_,
      FindFriendByNameReq::default_instance_,
      FindFriendByNameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindFriendByNameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindFriendByNameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FindFriendByNameReq));
  FindFriendByGuidReq_descriptor_ = file->message_type(18);
  static const int FindFriendByGuidReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindFriendByGuidReq, guid_),
  };
  FindFriendByGuidReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FindFriendByGuidReq_descriptor_,
      FindFriendByGuidReq::default_instance_,
      FindFriendByGuidReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindFriendByGuidReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindFriendByGuidReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FindFriendByGuidReq));
  FindFriendReply_descriptor_ = file->message_type(19);
  static const int FindFriendReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindFriendReply, info_),
  };
  FindFriendReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FindFriendReply_descriptor_,
      FindFriendReply::default_instance_,
      FindFriendReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindFriendReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FindFriendReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FindFriendReply));
  FriendListUpdate_descriptor_ = file->message_type(20);
  static const int FriendListUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendListUpdate, friends_),
  };
  FriendListUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendListUpdate_descriptor_,
      FriendListUpdate::default_instance_,
      FriendListUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendListUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendListUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendListUpdate));
  RecommendsUpdate_descriptor_ = file->message_type(21);
  static const int RecommendsUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecommendsUpdate, recommends_),
  };
  RecommendsUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecommendsUpdate_descriptor_,
      RecommendsUpdate::default_instance_,
      RecommendsUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecommendsUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecommendsUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecommendsUpdate));
  MessagesUpdate_descriptor_ = file->message_type(22);
  static const int MessagesUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagesUpdate, messages_),
  };
  MessagesUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessagesUpdate_descriptor_,
      MessagesUpdate::default_instance_,
      MessagesUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagesUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagesUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessagesUpdate));
  AddFriendMessagesReply_descriptor_ = file->message_type(23);
  static const int AddFriendMessagesReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendMessagesReply, messages_),
  };
  AddFriendMessagesReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddFriendMessagesReply_descriptor_,
      AddFriendMessagesReply::default_instance_,
      AddFriendMessagesReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendMessagesReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendMessagesReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddFriendMessagesReply));
  FriendMessageReq_descriptor_ = file->message_type(24);
  static const int FriendMessageReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendMessageReq, player_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendMessageReq, chat_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendMessageReq, chat_time_),
  };
  FriendMessageReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendMessageReq_descriptor_,
      FriendMessageReq::default_instance_,
      FriendMessageReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendMessageReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendMessageReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendMessageReq));
  SetZoneSignatureReq_descriptor_ = file->message_type(25);
  static const int SetZoneSignatureReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetZoneSignatureReq, signature_),
  };
  SetZoneSignatureReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetZoneSignatureReq_descriptor_,
      SetZoneSignatureReq::default_instance_,
      SetZoneSignatureReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetZoneSignatureReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetZoneSignatureReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetZoneSignatureReq));
  SignatureUpdate_descriptor_ = file->message_type(26);
  static const int SignatureUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureUpdate, signature_),
  };
  SignatureUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignatureUpdate_descriptor_,
      SignatureUpdate::default_instance_,
      SignatureUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignatureUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignatureUpdate));
  AddFriendReq_descriptor_ = file->message_type(27);
  static const int AddFriendReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendReq, player_guid_),
  };
  AddFriendReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddFriendReq_descriptor_,
      AddFriendReq::default_instance_,
      AddFriendReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddFriendReq));
  DelFriendReq_descriptor_ = file->message_type(28);
  static const int DelFriendReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelFriendReq, player_guid_),
  };
  DelFriendReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelFriendReq_descriptor_,
      DelFriendReq::default_instance_,
      DelFriendReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelFriendReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelFriendReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelFriendReq));
  AskTeamReq_descriptor_ = file->message_type(29);
  static const int AskTeamReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskTeamReq, player_guid_),
  };
  AskTeamReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskTeamReq_descriptor_,
      AskTeamReq::default_instance_,
      AskTeamReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskTeamReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskTeamReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskTeamReq));
  AskGuildReq_descriptor_ = file->message_type(30);
  static const int AskGuildReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskGuildReq, player_guid_),
  };
  AskGuildReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskGuildReq_descriptor_,
      AskGuildReq::default_instance_,
      AskGuildReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskGuildReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskGuildReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskGuildReq));
  SendGiftReq_descriptor_ = file->message_type(31);
  static const int SendGiftReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendGiftReq, player_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendGiftReq, items_),
  };
  SendGiftReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendGiftReq_descriptor_,
      SendGiftReq::default_instance_,
      SendGiftReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendGiftReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendGiftReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendGiftReq));
  ViewZoneReq_descriptor_ = file->message_type(32);
  static const int ViewZoneReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewZoneReq, player_guid_),
  };
  ViewZoneReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ViewZoneReq_descriptor_,
      ViewZoneReq::default_instance_,
      ViewZoneReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewZoneReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewZoneReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ViewZoneReq));
  ZoneBaseInfo_descriptor_ = file->message_type(33);
  static const int ZoneBaseInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneBaseInfo, player_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneBaseInfo, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneBaseInfo, player_hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneBaseInfo, init_actor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneBaseInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneBaseInfo, guildname_),
  };
  ZoneBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZoneBaseInfo_descriptor_,
      ZoneBaseInfo::default_instance_,
      ZoneBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZoneBaseInfo));
  ViewZoneReply_descriptor_ = file->message_type(34);
  static const int ViewZoneReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewZoneReply, base_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewZoneReply, main_equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewZoneReply, msgs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewZoneReply, zoneinfo_),
  };
  ViewZoneReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ViewZoneReply_descriptor_,
      ViewZoneReply::default_instance_,
      ViewZoneReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewZoneReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewZoneReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ViewZoneReply));
  DelMessageReq_descriptor_ = file->message_type(35);
  static const int DelMessageReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelMessageReq, message_id_),
  };
  DelMessageReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelMessageReq_descriptor_,
      DelMessageReq::default_instance_,
      DelMessageReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelMessageReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelMessageReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelMessageReq));
  NewMessageNotify_descriptor_ = file->message_type(36);
  static const int NewMessageNotify_offsets_[1] = {
  };
  NewMessageNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewMessageNotify_descriptor_,
      NewMessageNotify::default_instance_,
      NewMessageNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewMessageNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewMessageNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewMessageNotify));
  SignConfig_descriptor_ = file->message_type(37);
  static const int SignConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignConfig, sign_),
  };
  SignConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignConfig_descriptor_,
      SignConfig::default_instance_,
      SignConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignConfig));
  UpdateSign_descriptor_ = file->message_type(38);
  static const int UpdateSign_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSign, id_),
  };
  UpdateSign_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateSign_descriptor_,
      UpdateSign::default_instance_,
      UpdateSign_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSign, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSign, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateSign));
  GetMessageBoard_descriptor_ = file->message_type(39);
  static const int GetMessageBoard_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMessageBoard, list_),
  };
  GetMessageBoard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetMessageBoard_descriptor_,
      GetMessageBoard::default_instance_,
      GetMessageBoard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMessageBoard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMessageBoard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetMessageBoard));
  AddMessageBoard_descriptor_ = file->message_type(40);
  static const int AddMessageBoard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMessageBoard, addmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMessageBoard, self_),
  };
  AddMessageBoard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddMessageBoard_descriptor_,
      AddMessageBoard::default_instance_,
      AddMessageBoard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMessageBoard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMessageBoard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddMessageBoard));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FriendMail_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendInfotReq_descriptor_, &FriendInfotReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageListPlayerInfo_descriptor_, &MessageListPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendPlayer_descriptor_, &FriendPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZoneInfo_descriptor_, &ZoneInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageBoard_descriptor_, &MessageBoard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessagePlayerInfo_descriptor_, &MessagePlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientFriendMessageNotify_descriptor_, &ClientFriendMessageNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddClientFriendMessageNotify_descriptor_, &AddClientFriendMessageNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelClientFriendMessageNotifyRR_descriptor_, &DelClientFriendMessageNotifyRR::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemCount_descriptor_, &ItemCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageInfo_descriptor_, &MessageInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendMessageInfo_descriptor_, &FriendMessageInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendInfo_descriptor_, &FriendInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendInfotReply_descriptor_, &FriendInfotReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecommendReq_descriptor_, &RecommendReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendListReq_descriptor_, &FriendListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FindPlayerInfo_descriptor_, &FindPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FindFriendByNameReq_descriptor_, &FindFriendByNameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FindFriendByGuidReq_descriptor_, &FindFriendByGuidReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FindFriendReply_descriptor_, &FindFriendReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendListUpdate_descriptor_, &FriendListUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecommendsUpdate_descriptor_, &RecommendsUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessagesUpdate_descriptor_, &MessagesUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddFriendMessagesReply_descriptor_, &AddFriendMessagesReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendMessageReq_descriptor_, &FriendMessageReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetZoneSignatureReq_descriptor_, &SetZoneSignatureReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignatureUpdate_descriptor_, &SignatureUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddFriendReq_descriptor_, &AddFriendReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelFriendReq_descriptor_, &DelFriendReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskTeamReq_descriptor_, &AskTeamReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskGuildReq_descriptor_, &AskGuildReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendGiftReq_descriptor_, &SendGiftReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ViewZoneReq_descriptor_, &ViewZoneReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZoneBaseInfo_descriptor_, &ZoneBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ViewZoneReply_descriptor_, &ViewZoneReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelMessageReq_descriptor_, &DelMessageReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewMessageNotify_descriptor_, &NewMessageNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignConfig_descriptor_, &SignConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateSign_descriptor_, &UpdateSign::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetMessageBoard_descriptor_, &GetMessageBoard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddMessageBoard_descriptor_, &AddMessageBoard::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FriendMail_2eproto() {
  delete FriendInfotReq::default_instance_;
  delete FriendInfotReq_reflection_;
  delete MessageListPlayerInfo::default_instance_;
  delete MessageListPlayerInfo_reflection_;
  delete FriendPlayer::default_instance_;
  delete FriendPlayer_reflection_;
  delete ZoneInfo::default_instance_;
  delete ZoneInfo_reflection_;
  delete MessageBoard::default_instance_;
  delete MessageBoard_reflection_;
  delete MessagePlayerInfo::default_instance_;
  delete MessagePlayerInfo_reflection_;
  delete ClientFriendMessageNotify::default_instance_;
  delete ClientFriendMessageNotify_reflection_;
  delete AddClientFriendMessageNotify::default_instance_;
  delete AddClientFriendMessageNotify_reflection_;
  delete DelClientFriendMessageNotifyRR::default_instance_;
  delete DelClientFriendMessageNotifyRR_reflection_;
  delete ItemCount::default_instance_;
  delete ItemCount_reflection_;
  delete MessageInfo::default_instance_;
  delete MessageInfo_reflection_;
  delete FriendMessageInfo::default_instance_;
  delete FriendMessageInfo_reflection_;
  delete FriendInfo::default_instance_;
  delete FriendInfo_reflection_;
  delete FriendInfotReply::default_instance_;
  delete FriendInfotReply_reflection_;
  delete RecommendReq::default_instance_;
  delete RecommendReq_reflection_;
  delete FriendListReq::default_instance_;
  delete FriendListReq_reflection_;
  delete FindPlayerInfo::default_instance_;
  delete FindPlayerInfo_reflection_;
  delete FindFriendByNameReq::default_instance_;
  delete FindFriendByNameReq_reflection_;
  delete FindFriendByGuidReq::default_instance_;
  delete FindFriendByGuidReq_reflection_;
  delete FindFriendReply::default_instance_;
  delete FindFriendReply_reflection_;
  delete FriendListUpdate::default_instance_;
  delete FriendListUpdate_reflection_;
  delete RecommendsUpdate::default_instance_;
  delete RecommendsUpdate_reflection_;
  delete MessagesUpdate::default_instance_;
  delete MessagesUpdate_reflection_;
  delete AddFriendMessagesReply::default_instance_;
  delete AddFriendMessagesReply_reflection_;
  delete FriendMessageReq::default_instance_;
  delete FriendMessageReq_reflection_;
  delete SetZoneSignatureReq::default_instance_;
  delete SetZoneSignatureReq_reflection_;
  delete SignatureUpdate::default_instance_;
  delete SignatureUpdate_reflection_;
  delete AddFriendReq::default_instance_;
  delete AddFriendReq_reflection_;
  delete DelFriendReq::default_instance_;
  delete DelFriendReq_reflection_;
  delete AskTeamReq::default_instance_;
  delete AskTeamReq_reflection_;
  delete AskGuildReq::default_instance_;
  delete AskGuildReq_reflection_;
  delete SendGiftReq::default_instance_;
  delete SendGiftReq_reflection_;
  delete ViewZoneReq::default_instance_;
  delete ViewZoneReq_reflection_;
  delete ZoneBaseInfo::default_instance_;
  delete ZoneBaseInfo_reflection_;
  delete ViewZoneReply::default_instance_;
  delete ViewZoneReply_reflection_;
  delete DelMessageReq::default_instance_;
  delete DelMessageReq_reflection_;
  delete NewMessageNotify::default_instance_;
  delete NewMessageNotify_reflection_;
  delete SignConfig::default_instance_;
  delete SignConfig_reflection_;
  delete UpdateSign::default_instance_;
  delete UpdateSign_reflection_;
  delete GetMessageBoard::default_instance_;
  delete GetMessageBoard_reflection_;
  delete AddMessageBoard::default_instance_;
  delete AddMessageBoard_reflection_;
}

void protobuf_AddDesc_FriendMail_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Packet::protobuf_AddDesc_AllPacketEnum_2eproto();
  ::Packet::protobuf_AddDesc_PlayerBasicInfo_2eproto();
  ::Packet::protobuf_AddDesc_ItemAndEquip_2eproto();
  ::Packet::protobuf_AddDesc_ProtoBufOption_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020FriendMail.proto\022\006Packet\032\023AllPacketEnu"
    "m.proto\032\025PlayerBasicInfo.proto\032\022ItemAndE"
    "quip.proto\032\024ProtoBufOption.proto\"\020\n\016Frie"
    "ndInfotReq\"\235\001\n\025MessageListPlayerInfo\022\031\n\013"
    "player_guid\030\001 \002(\006B\004\310\363\030\001\022\035\n\017msg_player_gu"
    "id\030\002 \002(\006B\004\310\363\030\001\022\027\n\017msg_player_name\030\003 \002(\t\022"
    "\027\n\017msg_player_hair\030\004 \002(\005\022\030\n\020msg_player_l"
    "evel\030\005 \002(\005\"\235\001\n\014FriendPlayer\022\014\n\004guid\030\001 \002("
    "\006\022\023\n\013player_guid\030\002 \002(\006\022\023\n\013friend_guid\030\003 "
    "\002(\006\022\023\n\013friendvalue\030\004 \002(\005\022\025\n\rinit_actor_i"
    "d\030\005 \002(\005\022\014\n\004hair\030\006 \002(\005\022\014\n\004name\030\007 \002(\t\022\r\n\005l"
    "evel\030\010 \002(\005\"g\n\010ZoneInfo\022\014\n\004guid\030\001 \002(\006\022\021\n\t"
    "signature\030\002 \002(\t\022\024\n\006signid\030\003 \003(\005B\004\300\363\030\004\022\022\n"
    "\npopularity\030\004 \002(\005\022\020\n\010celldata\030\005 \002(\005\"\257\001\n\014"
    "MessageBoard\022\014\n\004guid\030\001 \002(\006\022\016\n\006owerid\030\002 \002"
    "(\006\022\020\n\010playerid\030\003 \002(\006\022\022\n\nplayername\030\004 \002(\t"
    "\022\022\n\nplayerhair\030\005 \002(\005\022\023\n\013playerlevel\030\006 \002("
    "\005\022\023\n\013replyplayer\030\007 \002(\t\022\017\n\007message\030\010 \002(\t\022"
    "\014\n\004date\030\t \002(\007\"\317\001\n\021MessagePlayerInfo\022\023\n\013s"
    "ource_guid\030\001 \002(\006\022\023\n\013source_name\030\002 \002(\t\022\023\n"
    "\013source_hair\030\003 \002(\005\022\021\n\tsignature\030\004 \001(\t\022\025\n"
    "\rinit_actor_id\030\005 \001(\005\022\r\n\005level\030\006 \002(\005\022\017\n\007h"
    "avenew\030\007 \001(\010\022\021\n\tguildname\030\010 \001(\t\022\016\n\006teami"
    "d\030\t \001(\006\022\016\n\006online\030\n \001(\005\"F\n\031ClientFriendM"
    "essageNotify\022)\n\006notify\030\001 \003(\0132\031.Packet.Me"
    "ssagePlayerInfo\"I\n\034AddClientFriendMessag"
    "eNotify\022)\n\006notify\030\001 \002(\0132\031.Packet.Message"
    "PlayerInfo\"5\n\036DelClientFriendMessageNoti"
    "fyRR\022\023\n\013source_guid\030\001 \002(\006\".\n\tItemCount\022\016"
    "\n\006itemid\030\001 \002(\005\022\021\n\titemcount\030\002 \002(\005\"\257\001\n\013Me"
    "ssageInfo\022\014\n\004guid\030\001 \002(\006\022\020\n\010owner_id\030\002 \002("
    "\006\022\020\n\010datetime\030\003 \002(\006\022\023\n\013source_guid\030\004 \002(\006"
    "\022\r\n\005title\030\005 \002(\t\022\017\n\007content\030\006 \002(\014\022\021\n\tchat"
    "_time\030\007 \002(\005\022&\n\005items\030\010 \003(\0132\021.Packet.Item"
    "CountB\004\300\363\030\005\"\251\001\n\021FriendMessageInfo\022\014\n\004gui"
    "d\030\001 \002(\006\022\'\n\004type\030\002 \002(\0162\031.Packet.FriendMes"
    "sageType\022\024\n\014receive_guid\030\003 \002(\006\022\020\n\010dateti"
    "me\030\004 \002(\006\022\021\n\tsend_guid\030\005 \002(\006\022\017\n\007content\030\006"
    " \002(\014\022\021\n\tchat_time\030\007 \002(\005\"\267\001\n\nFriendInfo\022\014"
    "\n\004guid\030\001 \002(\006\022\025\n\rinit_actor_id\030\003 \002(\005\022\014\n\004h"
    "air\030\004 \002(\005\022\014\n\004name\030\005 \002(\t\022\r\n\005level\030\006 \002(\005\022\021"
    "\n\tsignature\030\007 \002(\t\022\021\n\tguildname\030\010 \002(\t\022\023\n\013"
    "friendvalue\030\t \002(\005\022\016\n\006teamid\030\n \002(\006\022\016\n\006onl"
    "ine\030\013 \002(\005\"\311\002\n\020FriendInfotReply\022,\n\014mailme"
    "ssages\030\001 \002(\0132\026.Packet.MessagesUpdate\022)\n\007"
    "friends\030\003 \002(\0132\030.Packet.FriendListUpdate\022"
    ",\n\nrecommends\030\004 \002(\0132\030.Packet.RecommendsU"
    "pdate\0226\n\013notifyinfos\030\005 \002(\0132!.Packet.Clie"
    "ntFriendMessageNotify\022\"\n\010zoneinfo\030\006 \001(\0132"
    "\020.Packet.ZoneInfo\022\"\n\004msgs\030\007 \003(\0132\024.Packet"
    ".MessageBoard\022.\n\013offlinemsgs\030\010 \003(\0132\031.Pac"
    "ket.FriendMessageInfo\"\016\n\014RecommendReq\"\017\n"
    "\rFriendListReq\"`\n\016FindPlayerInfo\022\014\n\004guid"
    "\030\001 \002(\006\022\014\n\004name\030\002 \002(\t\022\014\n\004hair\030\003 \002(\005\022\r\n\005le"
    "vel\030\004 \002(\005\022\025\n\rinit_actor_id\030\005 \002(\005\"#\n\023Find"
    "FriendByNameReq\022\014\n\004name\030\001 \002(\t\"#\n\023FindFri"
    "endByGuidReq\022\014\n\004guid\030\001 \002(\006\"7\n\017FindFriend"
    "Reply\022$\n\004info\030\001 \002(\0132\026.Packet.FindPlayerI"
    "nfo\"7\n\020FriendListUpdate\022#\n\007friends\030\001 \003(\013"
    "2\022.Packet.FriendInfo\":\n\020RecommendsUpdate"
    "\022&\n\nrecommends\030\001 \003(\0132\022.Packet.FriendInfo"
    "\"7\n\016MessagesUpdate\022%\n\010messages\030\001 \003(\0132\023.P"
    "acket.MessageInfo\"E\n\026AddFriendMessagesRe"
    "ply\022+\n\010messages\030\001 \002(\0132\031.Packet.FriendMes"
    "sageInfo\"P\n\020FriendMessageReq\022\023\n\013player_g"
    "uid\030\001 \002(\006\022\024\n\014chat_message\030\002 \002(\014\022\021\n\tchat_"
    "time\030\003 \002(\005\"(\n\023SetZoneSignatureReq\022\021\n\tsig"
    "nature\030\001 \002(\t\"$\n\017SignatureUpdate\022\021\n\tsigna"
    "ture\030\001 \002(\t\"#\n\014AddFriendReq\022\023\n\013player_gui"
    "d\030\001 \002(\006\"#\n\014DelFriendReq\022\023\n\013player_guid\030\001"
    " \002(\006\"!\n\nAskTeamReq\022\023\n\013player_guid\030\001 \002(\006\""
    "\"\n\013AskGuildReq\022\023\n\013player_guid\030\001 \002(\006\"D\n\013S"
    "endGiftReq\022\023\n\013player_guid\030\001 \002(\006\022 \n\005items"
    "\030\002 \003(\0132\021.Packet.ItemCount\"\"\n\013ViewZoneReq"
    "\022\023\n\013player_guid\030\001 \002(\006\"\206\001\n\014ZoneBaseInfo\022\023"
    "\n\013player_guid\030\001 \002(\006\022\023\n\013player_name\030\002 \002(\t"
    "\022\023\n\013player_hair\030\003 \002(\005\022\025\n\rinit_actor_id\030\004"
    " \002(\005\022\r\n\005level\030\005 \002(\005\022\021\n\tguildname\030\006 \002(\t\"\250"
    "\001\n\rViewZoneReply\022\'\n\tbase_info\030\001 \002(\0132\024.Pa"
    "cket.ZoneBaseInfo\022&\n\013main_equips\030\004 \003(\0132\021"
    ".Packet.EquipItem\022\"\n\004msgs\030\005 \003(\0132\024.Packet"
    ".MessageBoard\022\"\n\010zoneinfo\030\006 \002(\0132\020.Packet"
    ".ZoneInfo\"#\n\rDelMessageReq\022\022\n\nmessage_id"
    "\030\001 \002(\006\"\022\n\020NewMessageNotify\"4\n\nSignConfig"
    "\022\n\n\002id\030\001 \002(\005\022\014\n\004type\030\002 \002(\t\022\014\n\004sign\030\003 \002(\t"
    "\"\030\n\nUpdateSign\022\n\n\002id\030\001 \003(\005\"5\n\017GetMessage"
    "Board\022\"\n\004list\030\001 \003(\0132\024.Packet.MessageBoar"
    "d\"E\n\017AddMessageBoard\022$\n\006addmsg\030\001 \002(\0132\024.P"
    "acket.MessageBoard\022\014\n\004self\030\002 \002(\010", 3552);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FriendMail.proto", &protobuf_RegisterTypes);
  FriendInfotReq::default_instance_ = new FriendInfotReq();
  MessageListPlayerInfo::default_instance_ = new MessageListPlayerInfo();
  FriendPlayer::default_instance_ = new FriendPlayer();
  ZoneInfo::default_instance_ = new ZoneInfo();
  MessageBoard::default_instance_ = new MessageBoard();
  MessagePlayerInfo::default_instance_ = new MessagePlayerInfo();
  ClientFriendMessageNotify::default_instance_ = new ClientFriendMessageNotify();
  AddClientFriendMessageNotify::default_instance_ = new AddClientFriendMessageNotify();
  DelClientFriendMessageNotifyRR::default_instance_ = new DelClientFriendMessageNotifyRR();
  ItemCount::default_instance_ = new ItemCount();
  MessageInfo::default_instance_ = new MessageInfo();
  FriendMessageInfo::default_instance_ = new FriendMessageInfo();
  FriendInfo::default_instance_ = new FriendInfo();
  FriendInfotReply::default_instance_ = new FriendInfotReply();
  RecommendReq::default_instance_ = new RecommendReq();
  FriendListReq::default_instance_ = new FriendListReq();
  FindPlayerInfo::default_instance_ = new FindPlayerInfo();
  FindFriendByNameReq::default_instance_ = new FindFriendByNameReq();
  FindFriendByGuidReq::default_instance_ = new FindFriendByGuidReq();
  FindFriendReply::default_instance_ = new FindFriendReply();
  FriendListUpdate::default_instance_ = new FriendListUpdate();
  RecommendsUpdate::default_instance_ = new RecommendsUpdate();
  MessagesUpdate::default_instance_ = new MessagesUpdate();
  AddFriendMessagesReply::default_instance_ = new AddFriendMessagesReply();
  FriendMessageReq::default_instance_ = new FriendMessageReq();
  SetZoneSignatureReq::default_instance_ = new SetZoneSignatureReq();
  SignatureUpdate::default_instance_ = new SignatureUpdate();
  AddFriendReq::default_instance_ = new AddFriendReq();
  DelFriendReq::default_instance_ = new DelFriendReq();
  AskTeamReq::default_instance_ = new AskTeamReq();
  AskGuildReq::default_instance_ = new AskGuildReq();
  SendGiftReq::default_instance_ = new SendGiftReq();
  ViewZoneReq::default_instance_ = new ViewZoneReq();
  ZoneBaseInfo::default_instance_ = new ZoneBaseInfo();
  ViewZoneReply::default_instance_ = new ViewZoneReply();
  DelMessageReq::default_instance_ = new DelMessageReq();
  NewMessageNotify::default_instance_ = new NewMessageNotify();
  SignConfig::default_instance_ = new SignConfig();
  UpdateSign::default_instance_ = new UpdateSign();
  GetMessageBoard::default_instance_ = new GetMessageBoard();
  AddMessageBoard::default_instance_ = new AddMessageBoard();
  FriendInfotReq::default_instance_->InitAsDefaultInstance();
  MessageListPlayerInfo::default_instance_->InitAsDefaultInstance();
  FriendPlayer::default_instance_->InitAsDefaultInstance();
  ZoneInfo::default_instance_->InitAsDefaultInstance();
  MessageBoard::default_instance_->InitAsDefaultInstance();
  MessagePlayerInfo::default_instance_->InitAsDefaultInstance();
  ClientFriendMessageNotify::default_instance_->InitAsDefaultInstance();
  AddClientFriendMessageNotify::default_instance_->InitAsDefaultInstance();
  DelClientFriendMessageNotifyRR::default_instance_->InitAsDefaultInstance();
  ItemCount::default_instance_->InitAsDefaultInstance();
  MessageInfo::default_instance_->InitAsDefaultInstance();
  FriendMessageInfo::default_instance_->InitAsDefaultInstance();
  FriendInfo::default_instance_->InitAsDefaultInstance();
  FriendInfotReply::default_instance_->InitAsDefaultInstance();
  RecommendReq::default_instance_->InitAsDefaultInstance();
  FriendListReq::default_instance_->InitAsDefaultInstance();
  FindPlayerInfo::default_instance_->InitAsDefaultInstance();
  FindFriendByNameReq::default_instance_->InitAsDefaultInstance();
  FindFriendByGuidReq::default_instance_->InitAsDefaultInstance();
  FindFriendReply::default_instance_->InitAsDefaultInstance();
  FriendListUpdate::default_instance_->InitAsDefaultInstance();
  RecommendsUpdate::default_instance_->InitAsDefaultInstance();
  MessagesUpdate::default_instance_->InitAsDefaultInstance();
  AddFriendMessagesReply::default_instance_->InitAsDefaultInstance();
  FriendMessageReq::default_instance_->InitAsDefaultInstance();
  SetZoneSignatureReq::default_instance_->InitAsDefaultInstance();
  SignatureUpdate::default_instance_->InitAsDefaultInstance();
  AddFriendReq::default_instance_->InitAsDefaultInstance();
  DelFriendReq::default_instance_->InitAsDefaultInstance();
  AskTeamReq::default_instance_->InitAsDefaultInstance();
  AskGuildReq::default_instance_->InitAsDefaultInstance();
  SendGiftReq::default_instance_->InitAsDefaultInstance();
  ViewZoneReq::default_instance_->InitAsDefaultInstance();
  ZoneBaseInfo::default_instance_->InitAsDefaultInstance();
  ViewZoneReply::default_instance_->InitAsDefaultInstance();
  DelMessageReq::default_instance_->InitAsDefaultInstance();
  NewMessageNotify::default_instance_->InitAsDefaultInstance();
  SignConfig::default_instance_->InitAsDefaultInstance();
  UpdateSign::default_instance_->InitAsDefaultInstance();
  GetMessageBoard::default_instance_->InitAsDefaultInstance();
  AddMessageBoard::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FriendMail_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FriendMail_2eproto {
  StaticDescriptorInitializer_FriendMail_2eproto() {
    protobuf_AddDesc_FriendMail_2eproto();
  }
} static_descriptor_initializer_FriendMail_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FriendInfotReq::FriendInfotReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendInfotReq::InitAsDefaultInstance() {
}

FriendInfotReq::FriendInfotReq(const FriendInfotReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendInfotReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendInfotReq::~FriendInfotReq() {
  SharedDtor();
}

void FriendInfotReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendInfotReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendInfotReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendInfotReq_descriptor_;
}

const FriendInfotReq& FriendInfotReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

FriendInfotReq* FriendInfotReq::default_instance_ = NULL;

FriendInfotReq* FriendInfotReq::New() const {
  return new FriendInfotReq;
}

void FriendInfotReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool FriendInfotReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void FriendInfotReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendInfotReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendInfotReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendInfotReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendInfotReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendInfotReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void FriendInfotReq::MergeFrom(const FriendInfotReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void FriendInfotReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void FriendInfotReq::CopyFrom(const FriendInfotReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool FriendInfotReq::IsInitialized() const {

  return true;
}

void FriendInfotReq::SetInitialized() {

  return;
}

void FriendInfotReq::Swap(FriendInfotReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata FriendInfotReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendInfotReq_descriptor_;
  metadata.reflection = FriendInfotReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageListPlayerInfo::kPlayerGuidFieldNumber;
const int MessageListPlayerInfo::kMsgPlayerGuidFieldNumber;
const int MessageListPlayerInfo::kMsgPlayerNameFieldNumber;
const int MessageListPlayerInfo::kMsgPlayerHairFieldNumber;
const int MessageListPlayerInfo::kMsgPlayerLevelFieldNumber;
#endif  // !_MSC_VER

MessageListPlayerInfo::MessageListPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MessageListPlayerInfo::InitAsDefaultInstance() {
}

MessageListPlayerInfo::MessageListPlayerInfo(const MessageListPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MessageListPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  player_guid_ = GOOGLE_ULONGLONG(0);
  msg_player_guid_ = GOOGLE_ULONGLONG(0);
  msg_player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_player_hair_ = 0;
  msg_player_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageListPlayerInfo::~MessageListPlayerInfo() {
  SharedDtor();
}

void MessageListPlayerInfo::SharedDtor() {
  if (msg_player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_player_name_;
  }
  if (this != default_instance_) {
  }
}

void MessageListPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageListPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageListPlayerInfo_descriptor_;
}

const MessageListPlayerInfo& MessageListPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

MessageListPlayerInfo* MessageListPlayerInfo::default_instance_ = NULL;

MessageListPlayerInfo* MessageListPlayerInfo::New() const {
  return new MessageListPlayerInfo;
}

void MessageListPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_guid_ = GOOGLE_ULONGLONG(0);
    msg_player_guid_ = GOOGLE_ULONGLONG(0);
    if (has_msg_player_name()) {
      if (msg_player_name_ != &::google::protobuf::internal::kEmptyString) {
        msg_player_name_->clear();
      }
    }
    msg_player_hair_ = 0;
    msg_player_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool MessageListPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 player_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &player_guid_)));
          set_has_player_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_msg_player_guid;
        break;
      }

      // required fixed64 msg_player_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_msg_player_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &msg_player_guid_)));
          set_has_msg_player_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg_player_name;
        break;
      }

      // required string msg_player_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_player_name().data(), this->msg_player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_msg_player_hair;
        break;
      }

      // required int32 msg_player_hair = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msg_player_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_player_hair_)));
          set_has_msg_player_hair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_msg_player_level;
        break;
      }

      // required int32 msg_player_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msg_player_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_player_level_)));
          set_has_msg_player_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void MessageListPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 player_guid = 1;
  if (has_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->player_guid(), output);
  }

  // required fixed64 msg_player_guid = 2;
  if (has_msg_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->msg_player_guid(), output);
  }

  // required string msg_player_name = 3;
  if (has_msg_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_player_name().data(), this->msg_player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msg_player_name(), output);
  }

  // required int32 msg_player_hair = 4;
  if (has_msg_player_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->msg_player_hair(), output);
  }

  // required int32 msg_player_level = 5;
  if (has_msg_player_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->msg_player_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MessageListPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 player_guid = 1;
  if (has_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->player_guid(), target);
  }

  // required fixed64 msg_player_guid = 2;
  if (has_msg_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->msg_player_guid(), target);
  }

  // required string msg_player_name = 3;
  if (has_msg_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_player_name().data(), this->msg_player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg_player_name(), target);
  }

  // required int32 msg_player_hair = 4;
  if (has_msg_player_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->msg_player_hair(), target);
  }

  // required int32 msg_player_level = 5;
  if (has_msg_player_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->msg_player_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MessageListPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 player_guid = 1;
    if (has_player_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 msg_player_guid = 2;
    if (has_msg_player_guid()) {
      total_size += 1 + 8;
    }

    // required string msg_player_name = 3;
    if (has_msg_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_player_name());
    }

    // required int32 msg_player_hair = 4;
    if (has_msg_player_hair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_player_hair());
    }

    // required int32 msg_player_level = 5;
    if (has_msg_player_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_player_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageListPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageListPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageListPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void MessageListPlayerInfo::MergeFrom(const MessageListPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_guid()) {
      set_player_guid(from.player_guid());
    }
    if (from.has_msg_player_guid()) {
      set_msg_player_guid(from.msg_player_guid());
    }
    if (from.has_msg_player_name()) {
      set_msg_player_name(from.msg_player_name());
    }
    if (from.has_msg_player_hair()) {
      set_msg_player_hair(from.msg_player_hair());
    }
    if (from.has_msg_player_level()) {
      set_msg_player_level(from.msg_player_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void MessageListPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void MessageListPlayerInfo::CopyFrom(const MessageListPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool MessageListPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void MessageListPlayerInfo::SetInitialized() {
  _has_bits_[0] |= 0x0000001f;

  return;
}

void MessageListPlayerInfo::Swap(MessageListPlayerInfo* other) {
  if (other != this) {
    std::swap(player_guid_, other->player_guid_);
    std::swap(msg_player_guid_, other->msg_player_guid_);
    std::swap(msg_player_name_, other->msg_player_name_);
    std::swap(msg_player_hair_, other->msg_player_hair_);
    std::swap(msg_player_level_, other->msg_player_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata MessageListPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageListPlayerInfo_descriptor_;
  metadata.reflection = MessageListPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendPlayer::kGuidFieldNumber;
const int FriendPlayer::kPlayerGuidFieldNumber;
const int FriendPlayer::kFriendGuidFieldNumber;
const int FriendPlayer::kFriendvalueFieldNumber;
const int FriendPlayer::kInitActorIdFieldNumber;
const int FriendPlayer::kHairFieldNumber;
const int FriendPlayer::kNameFieldNumber;
const int FriendPlayer::kLevelFieldNumber;
#endif  // !_MSC_VER

FriendPlayer::FriendPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendPlayer::InitAsDefaultInstance() {
}

FriendPlayer::FriendPlayer(const FriendPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendPlayer::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  player_guid_ = GOOGLE_ULONGLONG(0);
  friend_guid_ = GOOGLE_ULONGLONG(0);
  friendvalue_ = 0;
  init_actor_id_ = 0;
  hair_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendPlayer::~FriendPlayer() {
  SharedDtor();
}

void FriendPlayer::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FriendPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendPlayer_descriptor_;
}

const FriendPlayer& FriendPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

FriendPlayer* FriendPlayer::default_instance_ = NULL;

FriendPlayer* FriendPlayer::New() const {
  return new FriendPlayer;
}

void FriendPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    player_guid_ = GOOGLE_ULONGLONG(0);
    friend_guid_ = GOOGLE_ULONGLONG(0);
    friendvalue_ = 0;
    init_actor_id_ = 0;
    hair_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool FriendPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_player_guid;
        break;
      }

      // required fixed64 player_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_player_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &player_guid_)));
          set_has_player_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_friend_guid;
        break;
      }

      // required fixed64 friend_guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_friend_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &friend_guid_)));
          set_has_friend_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_friendvalue;
        break;
      }

      // required int32 friendvalue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendvalue_)));
          set_has_friendvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_init_actor_id;
        break;
      }

      // required int32 init_actor_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_init_actor_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &init_actor_id_)));
          set_has_init_actor_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hair;
        break;
      }

      // required int32 hair = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hair_)));
          set_has_hair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // required string name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_level;
        break;
      }

      // required int32 level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void FriendPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required fixed64 player_guid = 2;
  if (has_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->player_guid(), output);
  }

  // required fixed64 friend_guid = 3;
  if (has_friend_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->friend_guid(), output);
  }

  // required int32 friendvalue = 4;
  if (has_friendvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->friendvalue(), output);
  }

  // required int32 init_actor_id = 5;
  if (has_init_actor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->init_actor_id(), output);
  }

  // required int32 hair = 6;
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hair(), output);
  }

  // required string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->name(), output);
  }

  // required int32 level = 8;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required fixed64 player_guid = 2;
  if (has_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->player_guid(), target);
  }

  // required fixed64 friend_guid = 3;
  if (has_friend_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->friend_guid(), target);
  }

  // required int32 friendvalue = 4;
  if (has_friendvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->friendvalue(), target);
  }

  // required int32 init_actor_id = 5;
  if (has_init_actor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->init_actor_id(), target);
  }

  // required int32 hair = 6;
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hair(), target);
  }

  // required string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  // required int32 level = 8;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 player_guid = 2;
    if (has_player_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 friend_guid = 3;
    if (has_friend_guid()) {
      total_size += 1 + 8;
    }

    // required int32 friendvalue = 4;
    if (has_friendvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendvalue());
    }

    // required int32 init_actor_id = 5;
    if (has_init_actor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->init_actor_id());
    }

    // required int32 hair = 6;
    if (has_hair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hair());
    }

    // required string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 level = 8;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void FriendPlayer::MergeFrom(const FriendPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_player_guid()) {
      set_player_guid(from.player_guid());
    }
    if (from.has_friend_guid()) {
      set_friend_guid(from.friend_guid());
    }
    if (from.has_friendvalue()) {
      set_friendvalue(from.friendvalue());
    }
    if (from.has_init_actor_id()) {
      set_init_actor_id(from.init_actor_id());
    }
    if (from.has_hair()) {
      set_hair(from.hair());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void FriendPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void FriendPlayer::CopyFrom(const FriendPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool FriendPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void FriendPlayer::SetInitialized() {
  _has_bits_[0] |= 0x000000ff;

  return;
}

void FriendPlayer::Swap(FriendPlayer* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(player_guid_, other->player_guid_);
    std::swap(friend_guid_, other->friend_guid_);
    std::swap(friendvalue_, other->friendvalue_);
    std::swap(init_actor_id_, other->init_actor_id_);
    std::swap(hair_, other->hair_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata FriendPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendPlayer_descriptor_;
  metadata.reflection = FriendPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZoneInfo::kGuidFieldNumber;
const int ZoneInfo::kSignatureFieldNumber;
const int ZoneInfo::kSignidFieldNumber;
const int ZoneInfo::kPopularityFieldNumber;
const int ZoneInfo::kCelldataFieldNumber;
#endif  // !_MSC_VER

ZoneInfo::ZoneInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZoneInfo::InitAsDefaultInstance() {
}

ZoneInfo::ZoneInfo(const ZoneInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZoneInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  popularity_ = 0;
  celldata_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZoneInfo::~ZoneInfo() {
  SharedDtor();
}

void ZoneInfo::SharedDtor() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (this != default_instance_) {
  }
}

void ZoneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZoneInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZoneInfo_descriptor_;
}

const ZoneInfo& ZoneInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

ZoneInfo* ZoneInfo::default_instance_ = NULL;

ZoneInfo* ZoneInfo::New() const {
  return new ZoneInfo;
}

void ZoneInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
    popularity_ = 0;
    celldata_ = 0;
  }
  signid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ZoneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_signature;
        break;
      }

      // required string signature = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_signid;
        break;
      }

      // repeated int32 signid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_signid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_signid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_signid;
        if (input->ExpectTag(32)) goto parse_popularity;
        break;
      }

      // required int32 popularity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_popularity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &popularity_)));
          set_has_popularity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_celldata;
        break;
      }

      // required int32 celldata = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_celldata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &celldata_)));
          set_has_celldata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ZoneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required string signature = 2;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->signature(), output);
  }

  // repeated int32 signid = 3;
  for (int i = 0; i < this->signid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->signid(i), output);
  }

  // required int32 popularity = 4;
  if (has_popularity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->popularity(), output);
  }

  // required int32 celldata = 5;
  if (has_celldata()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->celldata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZoneInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required string signature = 2;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->signature(), target);
  }

  // repeated int32 signid = 3;
  for (int i = 0; i < this->signid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->signid(i), target);
  }

  // required int32 popularity = 4;
  if (has_popularity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->popularity(), target);
  }

  // required int32 celldata = 5;
  if (has_celldata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->celldata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZoneInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required string signature = 2;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

    // required int32 popularity = 4;
    if (has_popularity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->popularity());
    }

    // required int32 celldata = 5;
    if (has_celldata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->celldata());
    }

  }
  // repeated int32 signid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->signid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->signid(i));
    }
    total_size += 1 * this->signid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZoneInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZoneInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZoneInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ZoneInfo::MergeFrom(const ZoneInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  signid_.MergeFrom(from.signid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_popularity()) {
      set_popularity(from.popularity());
    }
    if (from.has_celldata()) {
      set_celldata(from.celldata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ZoneInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ZoneInfo::CopyFrom(const ZoneInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ZoneInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;

  return true;
}

void ZoneInfo::SetInitialized() {
  _has_bits_[0] |= 0x0000001b;

  return;
}

void ZoneInfo::Swap(ZoneInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(signature_, other->signature_);
    signid_.Swap(&other->signid_);
    std::swap(popularity_, other->popularity_);
    std::swap(celldata_, other->celldata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ZoneInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZoneInfo_descriptor_;
  metadata.reflection = ZoneInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageBoard::kGuidFieldNumber;
const int MessageBoard::kOweridFieldNumber;
const int MessageBoard::kPlayeridFieldNumber;
const int MessageBoard::kPlayernameFieldNumber;
const int MessageBoard::kPlayerhairFieldNumber;
const int MessageBoard::kPlayerlevelFieldNumber;
const int MessageBoard::kReplyplayerFieldNumber;
const int MessageBoard::kMessageFieldNumber;
const int MessageBoard::kDateFieldNumber;
#endif  // !_MSC_VER

MessageBoard::MessageBoard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MessageBoard::InitAsDefaultInstance() {
}

MessageBoard::MessageBoard(const MessageBoard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MessageBoard::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  owerid_ = GOOGLE_ULONGLONG(0);
  playerid_ = GOOGLE_ULONGLONG(0);
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerhair_ = 0;
  playerlevel_ = 0;
  replyplayer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  date_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageBoard::~MessageBoard() {
  SharedDtor();
}

void MessageBoard::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (replyplayer_ != &::google::protobuf::internal::kEmptyString) {
    delete replyplayer_;
  }
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void MessageBoard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageBoard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageBoard_descriptor_;
}

const MessageBoard& MessageBoard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

MessageBoard* MessageBoard::default_instance_ = NULL;

MessageBoard* MessageBoard::New() const {
  return new MessageBoard;
}

void MessageBoard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    owerid_ = GOOGLE_ULONGLONG(0);
    playerid_ = GOOGLE_ULONGLONG(0);
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    playerhair_ = 0;
    playerlevel_ = 0;
    if (has_replyplayer()) {
      if (replyplayer_ != &::google::protobuf::internal::kEmptyString) {
        replyplayer_->clear();
      }
    }
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    date_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool MessageBoard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_owerid;
        break;
      }

      // required fixed64 owerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_owerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &owerid_)));
          set_has_owerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_playerid;
        break;
      }

      // required fixed64 playerid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_playername;
        break;
      }

      // required string playername = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_playerhair;
        break;
      }

      // required int32 playerhair = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerhair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerhair_)));
          set_has_playerhair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_playerlevel;
        break;
      }

      // required int32 playerlevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerlevel_)));
          set_has_playerlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_replyplayer;
        break;
      }

      // required string replyplayer = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_replyplayer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_replyplayer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->replyplayer().data(), this->replyplayer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_message;
        break;
      }

      // required string message = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_date;
        break;
      }

      // required fixed32 date = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void MessageBoard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required fixed64 owerid = 2;
  if (has_owerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->owerid(), output);
  }

  // required fixed64 playerid = 3;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->playerid(), output);
  }

  // required string playername = 4;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->playername(), output);
  }

  // required int32 playerhair = 5;
  if (has_playerhair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->playerhair(), output);
  }

  // required int32 playerlevel = 6;
  if (has_playerlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->playerlevel(), output);
  }

  // required string replyplayer = 7;
  if (has_replyplayer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->replyplayer().data(), this->replyplayer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->replyplayer(), output);
  }

  // required string message = 8;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->message(), output);
  }

  // required fixed32 date = 9;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->date(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MessageBoard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required fixed64 owerid = 2;
  if (has_owerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->owerid(), target);
  }

  // required fixed64 playerid = 3;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->playerid(), target);
  }

  // required string playername = 4;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->playername(), target);
  }

  // required int32 playerhair = 5;
  if (has_playerhair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->playerhair(), target);
  }

  // required int32 playerlevel = 6;
  if (has_playerlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->playerlevel(), target);
  }

  // required string replyplayer = 7;
  if (has_replyplayer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->replyplayer().data(), this->replyplayer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->replyplayer(), target);
  }

  // required string message = 8;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->message(), target);
  }

  // required fixed32 date = 9;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(9, this->date(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MessageBoard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 owerid = 2;
    if (has_owerid()) {
      total_size += 1 + 8;
    }

    // required fixed64 playerid = 3;
    if (has_playerid()) {
      total_size += 1 + 8;
    }

    // required string playername = 4;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // required int32 playerhair = 5;
    if (has_playerhair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerhair());
    }

    // required int32 playerlevel = 6;
    if (has_playerlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerlevel());
    }

    // required string replyplayer = 7;
    if (has_replyplayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->replyplayer());
    }

    // required string message = 8;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required fixed32 date = 9;
    if (has_date()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageBoard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageBoard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageBoard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void MessageBoard::MergeFrom(const MessageBoard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_owerid()) {
      set_owerid(from.owerid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_playerhair()) {
      set_playerhair(from.playerhair());
    }
    if (from.has_playerlevel()) {
      set_playerlevel(from.playerlevel());
    }
    if (from.has_replyplayer()) {
      set_replyplayer(from.replyplayer());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_date()) {
      set_date(from.date());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void MessageBoard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void MessageBoard::CopyFrom(const MessageBoard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool MessageBoard::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void MessageBoard::SetInitialized() {
  _has_bits_[0] |= 0x000001ff;

  return;
}

void MessageBoard::Swap(MessageBoard* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(owerid_, other->owerid_);
    std::swap(playerid_, other->playerid_);
    std::swap(playername_, other->playername_);
    std::swap(playerhair_, other->playerhair_);
    std::swap(playerlevel_, other->playerlevel_);
    std::swap(replyplayer_, other->replyplayer_);
    std::swap(message_, other->message_);
    std::swap(date_, other->date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata MessageBoard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageBoard_descriptor_;
  metadata.reflection = MessageBoard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessagePlayerInfo::kSourceGuidFieldNumber;
const int MessagePlayerInfo::kSourceNameFieldNumber;
const int MessagePlayerInfo::kSourceHairFieldNumber;
const int MessagePlayerInfo::kSignatureFieldNumber;
const int MessagePlayerInfo::kInitActorIdFieldNumber;
const int MessagePlayerInfo::kLevelFieldNumber;
const int MessagePlayerInfo::kHavenewFieldNumber;
const int MessagePlayerInfo::kGuildnameFieldNumber;
const int MessagePlayerInfo::kTeamidFieldNumber;
const int MessagePlayerInfo::kOnlineFieldNumber;
#endif  // !_MSC_VER

MessagePlayerInfo::MessagePlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MessagePlayerInfo::InitAsDefaultInstance() {
}

MessagePlayerInfo::MessagePlayerInfo(const MessagePlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MessagePlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  source_guid_ = GOOGLE_ULONGLONG(0);
  source_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  source_hair_ = 0;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  init_actor_id_ = 0;
  level_ = 0;
  havenew_ = false;
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  teamid_ = GOOGLE_ULONGLONG(0);
  online_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessagePlayerInfo::~MessagePlayerInfo() {
  SharedDtor();
}

void MessagePlayerInfo::SharedDtor() {
  if (source_name_ != &::google::protobuf::internal::kEmptyString) {
    delete source_name_;
  }
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void MessagePlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessagePlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessagePlayerInfo_descriptor_;
}

const MessagePlayerInfo& MessagePlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

MessagePlayerInfo* MessagePlayerInfo::default_instance_ = NULL;

MessagePlayerInfo* MessagePlayerInfo::New() const {
  return new MessagePlayerInfo;
}

void MessagePlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    source_guid_ = GOOGLE_ULONGLONG(0);
    if (has_source_name()) {
      if (source_name_ != &::google::protobuf::internal::kEmptyString) {
        source_name_->clear();
      }
    }
    source_hair_ = 0;
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
    init_actor_id_ = 0;
    level_ = 0;
    havenew_ = false;
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    teamid_ = GOOGLE_ULONGLONG(0);
    online_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool MessagePlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 source_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &source_guid_)));
          set_has_source_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_source_name;
        break;
      }

      // required string source_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_source_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->source_name().data(), this->source_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_source_hair;
        break;
      }

      // required int32 source_hair = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_hair_)));
          set_has_source_hair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_signature;
        break;
      }

      // optional string signature = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_init_actor_id;
        break;
      }

      // optional int32 init_actor_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_init_actor_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &init_actor_id_)));
          set_has_init_actor_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // required int32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_havenew;
        break;
      }

      // optional bool havenew = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_havenew:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &havenew_)));
          set_has_havenew();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_guildname;
        break;
      }

      // optional string guildname = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_teamid;
        break;
      }

      // optional fixed64 teamid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_online;
        break;
      }

      // optional int32 online = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void MessagePlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 source_guid = 1;
  if (has_source_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->source_guid(), output);
  }

  // required string source_name = 2;
  if (has_source_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source_name().data(), this->source_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->source_name(), output);
  }

  // required int32 source_hair = 3;
  if (has_source_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->source_hair(), output);
  }

  // optional string signature = 4;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->signature(), output);
  }

  // optional int32 init_actor_id = 5;
  if (has_init_actor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->init_actor_id(), output);
  }

  // required int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }

  // optional bool havenew = 7;
  if (has_havenew()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->havenew(), output);
  }

  // optional string guildname = 8;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->guildname(), output);
  }

  // optional fixed64 teamid = 9;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(9, this->teamid(), output);
  }

  // optional int32 online = 10;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->online(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MessagePlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 source_guid = 1;
  if (has_source_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->source_guid(), target);
  }

  // required string source_name = 2;
  if (has_source_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source_name().data(), this->source_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->source_name(), target);
  }

  // required int32 source_hair = 3;
  if (has_source_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->source_hair(), target);
  }

  // optional string signature = 4;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->signature(), target);
  }

  // optional int32 init_actor_id = 5;
  if (has_init_actor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->init_actor_id(), target);
  }

  // required int32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }

  // optional bool havenew = 7;
  if (has_havenew()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->havenew(), target);
  }

  // optional string guildname = 8;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->guildname(), target);
  }

  // optional fixed64 teamid = 9;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(9, this->teamid(), target);
  }

  // optional int32 online = 10;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->online(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MessagePlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 source_guid = 1;
    if (has_source_guid()) {
      total_size += 1 + 8;
    }

    // required string source_name = 2;
    if (has_source_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source_name());
    }

    // required int32 source_hair = 3;
    if (has_source_hair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->source_hair());
    }

    // optional string signature = 4;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

    // optional int32 init_actor_id = 5;
    if (has_init_actor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->init_actor_id());
    }

    // required int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional bool havenew = 7;
    if (has_havenew()) {
      total_size += 1 + 1;
    }

    // optional string guildname = 8;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional fixed64 teamid = 9;
    if (has_teamid()) {
      total_size += 1 + 8;
    }

    // optional int32 online = 10;
    if (has_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessagePlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessagePlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessagePlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void MessagePlayerInfo::MergeFrom(const MessagePlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_guid()) {
      set_source_guid(from.source_guid());
    }
    if (from.has_source_name()) {
      set_source_name(from.source_name());
    }
    if (from.has_source_hair()) {
      set_source_hair(from.source_hair());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_init_actor_id()) {
      set_init_actor_id(from.init_actor_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_havenew()) {
      set_havenew(from.havenew());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void MessagePlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void MessagePlayerInfo::CopyFrom(const MessagePlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool MessagePlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000027) != 0x00000027) return false;

  return true;
}

void MessagePlayerInfo::SetInitialized() {
  _has_bits_[0] |= 0x00000027;

  return;
}

void MessagePlayerInfo::Swap(MessagePlayerInfo* other) {
  if (other != this) {
    std::swap(source_guid_, other->source_guid_);
    std::swap(source_name_, other->source_name_);
    std::swap(source_hair_, other->source_hair_);
    std::swap(signature_, other->signature_);
    std::swap(init_actor_id_, other->init_actor_id_);
    std::swap(level_, other->level_);
    std::swap(havenew_, other->havenew_);
    std::swap(guildname_, other->guildname_);
    std::swap(teamid_, other->teamid_);
    std::swap(online_, other->online_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata MessagePlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessagePlayerInfo_descriptor_;
  metadata.reflection = MessagePlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientFriendMessageNotify::kNotifyFieldNumber;
#endif  // !_MSC_VER

ClientFriendMessageNotify::ClientFriendMessageNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientFriendMessageNotify::InitAsDefaultInstance() {
}

ClientFriendMessageNotify::ClientFriendMessageNotify(const ClientFriendMessageNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientFriendMessageNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientFriendMessageNotify::~ClientFriendMessageNotify() {
  SharedDtor();
}

void ClientFriendMessageNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientFriendMessageNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientFriendMessageNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientFriendMessageNotify_descriptor_;
}

const ClientFriendMessageNotify& ClientFriendMessageNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

ClientFriendMessageNotify* ClientFriendMessageNotify::default_instance_ = NULL;

ClientFriendMessageNotify* ClientFriendMessageNotify::New() const {
  return new ClientFriendMessageNotify;
}

void ClientFriendMessageNotify::Clear() {
  notify_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ClientFriendMessageNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.MessagePlayerInfo notify = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_notify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_notify;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ClientFriendMessageNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.MessagePlayerInfo notify = 1;
  for (int i = 0; i < this->notify_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->notify(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientFriendMessageNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.MessagePlayerInfo notify = 1;
  for (int i = 0; i < this->notify_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->notify(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientFriendMessageNotify::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.MessagePlayerInfo notify = 1;
  total_size += 1 * this->notify_size();
  for (int i = 0; i < this->notify_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->notify(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientFriendMessageNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientFriendMessageNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientFriendMessageNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ClientFriendMessageNotify::MergeFrom(const ClientFriendMessageNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  notify_.MergeFrom(from.notify_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ClientFriendMessageNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ClientFriendMessageNotify::CopyFrom(const ClientFriendMessageNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ClientFriendMessageNotify::IsInitialized() const {

  for (int i = 0; i < notify_size(); i++) {
    if (!this->notify(i).IsInitialized()) return false;
  }
  return true;
}

void ClientFriendMessageNotify::SetInitialized() {

  for (int i = 0; i < notify_size(); i++) {
    this->mutable_notify(i)->SetInitialized();
  }
  return;
}

void ClientFriendMessageNotify::Swap(ClientFriendMessageNotify* other) {
  if (other != this) {
    notify_.Swap(&other->notify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ClientFriendMessageNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientFriendMessageNotify_descriptor_;
  metadata.reflection = ClientFriendMessageNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddClientFriendMessageNotify::kNotifyFieldNumber;
#endif  // !_MSC_VER

AddClientFriendMessageNotify::AddClientFriendMessageNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddClientFriendMessageNotify::InitAsDefaultInstance() {
  notify_ = const_cast< ::Packet::MessagePlayerInfo*>(&::Packet::MessagePlayerInfo::default_instance());
}

AddClientFriendMessageNotify::AddClientFriendMessageNotify(const AddClientFriendMessageNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddClientFriendMessageNotify::SharedCtor() {
  _cached_size_ = 0;
  notify_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddClientFriendMessageNotify::~AddClientFriendMessageNotify() {
  SharedDtor();
}

void AddClientFriendMessageNotify::SharedDtor() {
  if (this != default_instance_) {
    delete notify_;
  }
}

void AddClientFriendMessageNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddClientFriendMessageNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddClientFriendMessageNotify_descriptor_;
}

const AddClientFriendMessageNotify& AddClientFriendMessageNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

AddClientFriendMessageNotify* AddClientFriendMessageNotify::default_instance_ = NULL;

AddClientFriendMessageNotify* AddClientFriendMessageNotify::New() const {
  return new AddClientFriendMessageNotify;
}

void AddClientFriendMessageNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_notify()) {
      if (notify_ != NULL) notify_->::Packet::MessagePlayerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool AddClientFriendMessageNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.MessagePlayerInfo notify = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void AddClientFriendMessageNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.MessagePlayerInfo notify = 1;
  if (has_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->notify(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddClientFriendMessageNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.MessagePlayerInfo notify = 1;
  if (has_notify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->notify(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddClientFriendMessageNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.MessagePlayerInfo notify = 1;
    if (has_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->notify());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddClientFriendMessageNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddClientFriendMessageNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddClientFriendMessageNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void AddClientFriendMessageNotify::MergeFrom(const AddClientFriendMessageNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notify()) {
      mutable_notify()->::Packet::MessagePlayerInfo::MergeFrom(from.notify());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void AddClientFriendMessageNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void AddClientFriendMessageNotify::CopyFrom(const AddClientFriendMessageNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool AddClientFriendMessageNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_notify()) {
    if (!this->notify().IsInitialized()) return false;
  }
  return true;
}

void AddClientFriendMessageNotify::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  if (has_notify()) {
    this->mutable_notify()->SetInitialized();
  }
  return;
}

void AddClientFriendMessageNotify::Swap(AddClientFriendMessageNotify* other) {
  if (other != this) {
    std::swap(notify_, other->notify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata AddClientFriendMessageNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddClientFriendMessageNotify_descriptor_;
  metadata.reflection = AddClientFriendMessageNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelClientFriendMessageNotifyRR::kSourceGuidFieldNumber;
#endif  // !_MSC_VER

DelClientFriendMessageNotifyRR::DelClientFriendMessageNotifyRR()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DelClientFriendMessageNotifyRR::InitAsDefaultInstance() {
}

DelClientFriendMessageNotifyRR::DelClientFriendMessageNotifyRR(const DelClientFriendMessageNotifyRR& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DelClientFriendMessageNotifyRR::SharedCtor() {
  _cached_size_ = 0;
  source_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelClientFriendMessageNotifyRR::~DelClientFriendMessageNotifyRR() {
  SharedDtor();
}

void DelClientFriendMessageNotifyRR::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DelClientFriendMessageNotifyRR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelClientFriendMessageNotifyRR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelClientFriendMessageNotifyRR_descriptor_;
}

const DelClientFriendMessageNotifyRR& DelClientFriendMessageNotifyRR::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

DelClientFriendMessageNotifyRR* DelClientFriendMessageNotifyRR::default_instance_ = NULL;

DelClientFriendMessageNotifyRR* DelClientFriendMessageNotifyRR::New() const {
  return new DelClientFriendMessageNotifyRR;
}

void DelClientFriendMessageNotifyRR::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    source_guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool DelClientFriendMessageNotifyRR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 source_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &source_guid_)));
          set_has_source_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void DelClientFriendMessageNotifyRR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 source_guid = 1;
  if (has_source_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->source_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DelClientFriendMessageNotifyRR::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 source_guid = 1;
  if (has_source_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->source_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DelClientFriendMessageNotifyRR::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 source_guid = 1;
    if (has_source_guid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelClientFriendMessageNotifyRR::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelClientFriendMessageNotifyRR* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelClientFriendMessageNotifyRR*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void DelClientFriendMessageNotifyRR::MergeFrom(const DelClientFriendMessageNotifyRR& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_guid()) {
      set_source_guid(from.source_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void DelClientFriendMessageNotifyRR::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void DelClientFriendMessageNotifyRR::CopyFrom(const DelClientFriendMessageNotifyRR& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool DelClientFriendMessageNotifyRR::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DelClientFriendMessageNotifyRR::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void DelClientFriendMessageNotifyRR::Swap(DelClientFriendMessageNotifyRR* other) {
  if (other != this) {
    std::swap(source_guid_, other->source_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata DelClientFriendMessageNotifyRR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelClientFriendMessageNotifyRR_descriptor_;
  metadata.reflection = DelClientFriendMessageNotifyRR_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemCount::kItemidFieldNumber;
const int ItemCount::kItemcountFieldNumber;
#endif  // !_MSC_VER

ItemCount::ItemCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemCount::InitAsDefaultInstance() {
}

ItemCount::ItemCount(const ItemCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemCount::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  itemcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemCount::~ItemCount() {
  SharedDtor();
}

void ItemCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemCount_descriptor_;
}

const ItemCount& ItemCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

ItemCount* ItemCount::default_instance_ = NULL;

ItemCount* ItemCount::New() const {
  return new ItemCount;
}

void ItemCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
    itemcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ItemCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 itemid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemcount;
        break;
      }

      // required int32 itemcount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemcount_)));
          set_has_itemcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ItemCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // required int32 itemcount = 2;
  if (has_itemcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // required int32 itemcount = 2;
  if (has_itemcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // required int32 itemcount = 2;
    if (has_itemcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ItemCount::MergeFrom(const ItemCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemcount()) {
      set_itemcount(from.itemcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ItemCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ItemCount::CopyFrom(const ItemCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ItemCount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ItemCount::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void ItemCount::Swap(ItemCount* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemcount_, other->itemcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ItemCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemCount_descriptor_;
  metadata.reflection = ItemCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageInfo::kGuidFieldNumber;
const int MessageInfo::kOwnerIdFieldNumber;
const int MessageInfo::kDatetimeFieldNumber;
const int MessageInfo::kSourceGuidFieldNumber;
const int MessageInfo::kTitleFieldNumber;
const int MessageInfo::kContentFieldNumber;
const int MessageInfo::kChatTimeFieldNumber;
const int MessageInfo::kItemsFieldNumber;
#endif  // !_MSC_VER

MessageInfo::MessageInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MessageInfo::InitAsDefaultInstance() {
}

MessageInfo::MessageInfo(const MessageInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MessageInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  owner_id_ = GOOGLE_ULONGLONG(0);
  datetime_ = GOOGLE_ULONGLONG(0);
  source_guid_ = GOOGLE_ULONGLONG(0);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chat_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageInfo::~MessageInfo() {
  SharedDtor();
}

void MessageInfo::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void MessageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageInfo_descriptor_;
}

const MessageInfo& MessageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

MessageInfo* MessageInfo::default_instance_ = NULL;

MessageInfo* MessageInfo::New() const {
  return new MessageInfo;
}

void MessageInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    owner_id_ = GOOGLE_ULONGLONG(0);
    datetime_ = GOOGLE_ULONGLONG(0);
    source_guid_ = GOOGLE_ULONGLONG(0);
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    chat_time_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool MessageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_owner_id;
        break;
      }

      // required fixed64 owner_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_owner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &owner_id_)));
          set_has_owner_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_datetime;
        break;
      }

      // required fixed64 datetime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_datetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datetime_)));
          set_has_datetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_source_guid;
        break;
      }

      // required fixed64 source_guid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_source_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &source_guid_)));
          set_has_source_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_title;
        break;
      }

      // required string title = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }

      // required bytes content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_chat_time;
        break;
      }

      // required int32 chat_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chat_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chat_time_)));
          set_has_chat_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_items;
        break;
      }

      // repeated .Packet.ItemCount items = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void MessageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required fixed64 owner_id = 2;
  if (has_owner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->owner_id(), output);
  }

  // required fixed64 datetime = 3;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->datetime(), output);
  }

  // required fixed64 source_guid = 4;
  if (has_source_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->source_guid(), output);
  }

  // required string title = 5;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->title(), output);
  }

  // required bytes content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->content(), output);
  }

  // required int32 chat_time = 7;
  if (has_chat_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->chat_time(), output);
  }

  // repeated .Packet.ItemCount items = 8;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MessageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required fixed64 owner_id = 2;
  if (has_owner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->owner_id(), target);
  }

  // required fixed64 datetime = 3;
  if (has_datetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->datetime(), target);
  }

  // required fixed64 source_guid = 4;
  if (has_source_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->source_guid(), target);
  }

  // required string title = 5;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->title(), target);
  }

  // required bytes content = 6;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->content(), target);
  }

  // required int32 chat_time = 7;
  if (has_chat_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->chat_time(), target);
  }

  // repeated .Packet.ItemCount items = 8;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MessageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 owner_id = 2;
    if (has_owner_id()) {
      total_size += 1 + 8;
    }

    // required fixed64 datetime = 3;
    if (has_datetime()) {
      total_size += 1 + 8;
    }

    // required fixed64 source_guid = 4;
    if (has_source_guid()) {
      total_size += 1 + 8;
    }

    // required string title = 5;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // required bytes content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // required int32 chat_time = 7;
    if (has_chat_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chat_time());
    }

  }
  // repeated .Packet.ItemCount items = 8;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void MessageInfo::MergeFrom(const MessageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_owner_id()) {
      set_owner_id(from.owner_id());
    }
    if (from.has_datetime()) {
      set_datetime(from.datetime());
    }
    if (from.has_source_guid()) {
      set_source_guid(from.source_guid());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_chat_time()) {
      set_chat_time(from.chat_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void MessageInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void MessageInfo::CopyFrom(const MessageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool MessageInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void MessageInfo::SetInitialized() {
  _has_bits_[0] |= 0x0000007f;

  for (int i = 0; i < items_size(); i++) {
    this->mutable_items(i)->SetInitialized();
  }
  return;
}

void MessageInfo::Swap(MessageInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(owner_id_, other->owner_id_);
    std::swap(datetime_, other->datetime_);
    std::swap(source_guid_, other->source_guid_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(chat_time_, other->chat_time_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata MessageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageInfo_descriptor_;
  metadata.reflection = MessageInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendMessageInfo::kGuidFieldNumber;
const int FriendMessageInfo::kTypeFieldNumber;
const int FriendMessageInfo::kReceiveGuidFieldNumber;
const int FriendMessageInfo::kDatetimeFieldNumber;
const int FriendMessageInfo::kSendGuidFieldNumber;
const int FriendMessageInfo::kContentFieldNumber;
const int FriendMessageInfo::kChatTimeFieldNumber;
#endif  // !_MSC_VER

FriendMessageInfo::FriendMessageInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendMessageInfo::InitAsDefaultInstance() {
}

FriendMessageInfo::FriendMessageInfo(const FriendMessageInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendMessageInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  type_ = 1;
  receive_guid_ = GOOGLE_ULONGLONG(0);
  datetime_ = GOOGLE_ULONGLONG(0);
  send_guid_ = GOOGLE_ULONGLONG(0);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chat_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendMessageInfo::~FriendMessageInfo() {
  SharedDtor();
}

void FriendMessageInfo::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void FriendMessageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendMessageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendMessageInfo_descriptor_;
}

const FriendMessageInfo& FriendMessageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

FriendMessageInfo* FriendMessageInfo::default_instance_ = NULL;

FriendMessageInfo* FriendMessageInfo::New() const {
  return new FriendMessageInfo;
}

void FriendMessageInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    type_ = 1;
    receive_guid_ = GOOGLE_ULONGLONG(0);
    datetime_ = GOOGLE_ULONGLONG(0);
    send_guid_ = GOOGLE_ULONGLONG(0);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    chat_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool FriendMessageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .Packet.FriendMessageType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::FriendMessageType_IsValid(value)) {
            set_type(static_cast< ::Packet::FriendMessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_receive_guid;
        break;
      }

      // required fixed64 receive_guid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_receive_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &receive_guid_)));
          set_has_receive_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_datetime;
        break;
      }

      // required fixed64 datetime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_datetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datetime_)));
          set_has_datetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_send_guid;
        break;
      }

      // required fixed64 send_guid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_send_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &send_guid_)));
          set_has_send_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }

      // required bytes content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_chat_time;
        break;
      }

      // required int32 chat_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chat_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chat_time_)));
          set_has_chat_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void FriendMessageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required .Packet.FriendMessageType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required fixed64 receive_guid = 3;
  if (has_receive_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->receive_guid(), output);
  }

  // required fixed64 datetime = 4;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->datetime(), output);
  }

  // required fixed64 send_guid = 5;
  if (has_send_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->send_guid(), output);
  }

  // required bytes content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->content(), output);
  }

  // required int32 chat_time = 7;
  if (has_chat_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->chat_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendMessageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required .Packet.FriendMessageType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required fixed64 receive_guid = 3;
  if (has_receive_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->receive_guid(), target);
  }

  // required fixed64 datetime = 4;
  if (has_datetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->datetime(), target);
  }

  // required fixed64 send_guid = 5;
  if (has_send_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->send_guid(), target);
  }

  // required bytes content = 6;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->content(), target);
  }

  // required int32 chat_time = 7;
  if (has_chat_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->chat_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendMessageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required .Packet.FriendMessageType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required fixed64 receive_guid = 3;
    if (has_receive_guid()) {
      total_size += 1 + 8;
    }

    // required fixed64 datetime = 4;
    if (has_datetime()) {
      total_size += 1 + 8;
    }

    // required fixed64 send_guid = 5;
    if (has_send_guid()) {
      total_size += 1 + 8;
    }

    // required bytes content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // required int32 chat_time = 7;
    if (has_chat_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chat_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendMessageInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendMessageInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendMessageInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void FriendMessageInfo::MergeFrom(const FriendMessageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_receive_guid()) {
      set_receive_guid(from.receive_guid());
    }
    if (from.has_datetime()) {
      set_datetime(from.datetime());
    }
    if (from.has_send_guid()) {
      set_send_guid(from.send_guid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_chat_time()) {
      set_chat_time(from.chat_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void FriendMessageInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void FriendMessageInfo::CopyFrom(const FriendMessageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool FriendMessageInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void FriendMessageInfo::SetInitialized() {
  _has_bits_[0] |= 0x0000007f;

  return;
}

void FriendMessageInfo::Swap(FriendMessageInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(type_, other->type_);
    std::swap(receive_guid_, other->receive_guid_);
    std::swap(datetime_, other->datetime_);
    std::swap(send_guid_, other->send_guid_);
    std::swap(content_, other->content_);
    std::swap(chat_time_, other->chat_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata FriendMessageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendMessageInfo_descriptor_;
  metadata.reflection = FriendMessageInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendInfo::kGuidFieldNumber;
const int FriendInfo::kInitActorIdFieldNumber;
const int FriendInfo::kHairFieldNumber;
const int FriendInfo::kNameFieldNumber;
const int FriendInfo::kLevelFieldNumber;
const int FriendInfo::kSignatureFieldNumber;
const int FriendInfo::kGuildnameFieldNumber;
const int FriendInfo::kFriendvalueFieldNumber;
const int FriendInfo::kTeamidFieldNumber;
const int FriendInfo::kOnlineFieldNumber;
#endif  // !_MSC_VER

FriendInfo::FriendInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendInfo::InitAsDefaultInstance() {
}

FriendInfo::FriendInfo(const FriendInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  init_actor_id_ = 0;
  hair_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  friendvalue_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  online_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendInfo::~FriendInfo() {
  SharedDtor();
}

void FriendInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void FriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendInfo_descriptor_;
}

const FriendInfo& FriendInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

FriendInfo* FriendInfo::default_instance_ = NULL;

FriendInfo* FriendInfo::New() const {
  return new FriendInfo;
}

void FriendInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    init_actor_id_ = 0;
    hair_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    friendvalue_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    teamid_ = GOOGLE_ULONGLONG(0);
    online_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool FriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_init_actor_id;
        break;
      }

      // required int32 init_actor_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_init_actor_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &init_actor_id_)));
          set_has_init_actor_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hair;
        break;
      }

      // required int32 hair = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hair_)));
          set_has_hair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // required string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // required int32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_signature;
        break;
      }

      // required string signature = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_guildname;
        break;
      }

      // required string guildname = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_friendvalue;
        break;
      }

      // required int32 friendvalue = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendvalue_)));
          set_has_friendvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_teamid;
        break;
      }

      // required fixed64 teamid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_online;
        break;
      }

      // required int32 online = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void FriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required int32 init_actor_id = 3;
  if (has_init_actor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->init_actor_id(), output);
  }

  // required int32 hair = 4;
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hair(), output);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }

  // required int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }

  // required string signature = 7;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->signature(), output);
  }

  // required string guildname = 8;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->guildname(), output);
  }

  // required int32 friendvalue = 9;
  if (has_friendvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->friendvalue(), output);
  }

  // required fixed64 teamid = 10;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(10, this->teamid(), output);
  }

  // required int32 online = 11;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->online(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required int32 init_actor_id = 3;
  if (has_init_actor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->init_actor_id(), target);
  }

  // required int32 hair = 4;
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hair(), target);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // required int32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }

  // required string signature = 7;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->signature(), target);
  }

  // required string guildname = 8;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->guildname(), target);
  }

  // required int32 friendvalue = 9;
  if (has_friendvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->friendvalue(), target);
  }

  // required fixed64 teamid = 10;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(10, this->teamid(), target);
  }

  // required int32 online = 11;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->online(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required int32 init_actor_id = 3;
    if (has_init_actor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->init_actor_id());
    }

    // required int32 hair = 4;
    if (has_hair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hair());
    }

    // required string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required string signature = 7;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

    // required string guildname = 8;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // required int32 friendvalue = 9;
    if (has_friendvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendvalue());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required fixed64 teamid = 10;
    if (has_teamid()) {
      total_size += 1 + 8;
    }

    // required int32 online = 11;
    if (has_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void FriendInfo::MergeFrom(const FriendInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_init_actor_id()) {
      set_init_actor_id(from.init_actor_id());
    }
    if (from.has_hair()) {
      set_hair(from.hair());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_friendvalue()) {
      set_friendvalue(from.friendvalue());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void FriendInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void FriendInfo::CopyFrom(const FriendInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool FriendInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void FriendInfo::SetInitialized() {
  _has_bits_[0] |= 0x000003ff;

  return;
}

void FriendInfo::Swap(FriendInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(init_actor_id_, other->init_actor_id_);
    std::swap(hair_, other->hair_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(signature_, other->signature_);
    std::swap(guildname_, other->guildname_);
    std::swap(friendvalue_, other->friendvalue_);
    std::swap(teamid_, other->teamid_);
    std::swap(online_, other->online_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata FriendInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendInfo_descriptor_;
  metadata.reflection = FriendInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendInfotReply::kMailmessagesFieldNumber;
const int FriendInfotReply::kFriendsFieldNumber;
const int FriendInfotReply::kRecommendsFieldNumber;
const int FriendInfotReply::kNotifyinfosFieldNumber;
const int FriendInfotReply::kZoneinfoFieldNumber;
const int FriendInfotReply::kMsgsFieldNumber;
const int FriendInfotReply::kOfflinemsgsFieldNumber;
#endif  // !_MSC_VER

FriendInfotReply::FriendInfotReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendInfotReply::InitAsDefaultInstance() {
  mailmessages_ = const_cast< ::Packet::MessagesUpdate*>(&::Packet::MessagesUpdate::default_instance());
  friends_ = const_cast< ::Packet::FriendListUpdate*>(&::Packet::FriendListUpdate::default_instance());
  recommends_ = const_cast< ::Packet::RecommendsUpdate*>(&::Packet::RecommendsUpdate::default_instance());
  notifyinfos_ = const_cast< ::Packet::ClientFriendMessageNotify*>(&::Packet::ClientFriendMessageNotify::default_instance());
  zoneinfo_ = const_cast< ::Packet::ZoneInfo*>(&::Packet::ZoneInfo::default_instance());
}

FriendInfotReply::FriendInfotReply(const FriendInfotReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendInfotReply::SharedCtor() {
  _cached_size_ = 0;
  mailmessages_ = NULL;
  friends_ = NULL;
  recommends_ = NULL;
  notifyinfos_ = NULL;
  zoneinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendInfotReply::~FriendInfotReply() {
  SharedDtor();
}

void FriendInfotReply::SharedDtor() {
  if (this != default_instance_) {
    delete mailmessages_;
    delete friends_;
    delete recommends_;
    delete notifyinfos_;
    delete zoneinfo_;
  }
}

void FriendInfotReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendInfotReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendInfotReply_descriptor_;
}

const FriendInfotReply& FriendInfotReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

FriendInfotReply* FriendInfotReply::default_instance_ = NULL;

FriendInfotReply* FriendInfotReply::New() const {
  return new FriendInfotReply;
}

void FriendInfotReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mailmessages()) {
      if (mailmessages_ != NULL) mailmessages_->::Packet::MessagesUpdate::Clear();
    }
    if (has_friends()) {
      if (friends_ != NULL) friends_->::Packet::FriendListUpdate::Clear();
    }
    if (has_recommends()) {
      if (recommends_ != NULL) recommends_->::Packet::RecommendsUpdate::Clear();
    }
    if (has_notifyinfos()) {
      if (notifyinfos_ != NULL) notifyinfos_->::Packet::ClientFriendMessageNotify::Clear();
    }
    if (has_zoneinfo()) {
      if (zoneinfo_ != NULL) zoneinfo_->::Packet::ZoneInfo::Clear();
    }
  }
  msgs_.Clear();
  offlinemsgs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool FriendInfotReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.MessagesUpdate mailmessages = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mailmessages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_friends;
        break;
      }

      // required .Packet.FriendListUpdate friends = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_recommends;
        break;
      }

      // required .Packet.RecommendsUpdate recommends = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recommends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recommends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_notifyinfos;
        break;
      }

      // required .Packet.ClientFriendMessageNotify notifyinfos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notifyinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notifyinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_zoneinfo;
        break;
      }

      // optional .Packet.ZoneInfo zoneinfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zoneinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_zoneinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_msgs;
        break;
      }

      // repeated .Packet.MessageBoard msgs = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msgs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_msgs;
        if (input->ExpectTag(66)) goto parse_offlinemsgs;
        break;
      }

      // repeated .Packet.FriendMessageInfo offlinemsgs = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_offlinemsgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_offlinemsgs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_offlinemsgs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void FriendInfotReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.MessagesUpdate mailmessages = 1;
  if (has_mailmessages()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mailmessages(), output);
  }

  // required .Packet.FriendListUpdate friends = 3;
  if (has_friends()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->friends(), output);
  }

  // required .Packet.RecommendsUpdate recommends = 4;
  if (has_recommends()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->recommends(), output);
  }

  // required .Packet.ClientFriendMessageNotify notifyinfos = 5;
  if (has_notifyinfos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->notifyinfos(), output);
  }

  // optional .Packet.ZoneInfo zoneinfo = 6;
  if (has_zoneinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->zoneinfo(), output);
  }

  // repeated .Packet.MessageBoard msgs = 7;
  for (int i = 0; i < this->msgs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->msgs(i), output);
  }

  // repeated .Packet.FriendMessageInfo offlinemsgs = 8;
  for (int i = 0; i < this->offlinemsgs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->offlinemsgs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendInfotReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.MessagesUpdate mailmessages = 1;
  if (has_mailmessages()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mailmessages(), target);
  }

  // required .Packet.FriendListUpdate friends = 3;
  if (has_friends()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->friends(), target);
  }

  // required .Packet.RecommendsUpdate recommends = 4;
  if (has_recommends()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->recommends(), target);
  }

  // required .Packet.ClientFriendMessageNotify notifyinfos = 5;
  if (has_notifyinfos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->notifyinfos(), target);
  }

  // optional .Packet.ZoneInfo zoneinfo = 6;
  if (has_zoneinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->zoneinfo(), target);
  }

  // repeated .Packet.MessageBoard msgs = 7;
  for (int i = 0; i < this->msgs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->msgs(i), target);
  }

  // repeated .Packet.FriendMessageInfo offlinemsgs = 8;
  for (int i = 0; i < this->offlinemsgs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->offlinemsgs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendInfotReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.MessagesUpdate mailmessages = 1;
    if (has_mailmessages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mailmessages());
    }

    // required .Packet.FriendListUpdate friends = 3;
    if (has_friends()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friends());
    }

    // required .Packet.RecommendsUpdate recommends = 4;
    if (has_recommends()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recommends());
    }

    // required .Packet.ClientFriendMessageNotify notifyinfos = 5;
    if (has_notifyinfos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->notifyinfos());
    }

    // optional .Packet.ZoneInfo zoneinfo = 6;
    if (has_zoneinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->zoneinfo());
    }

  }
  // repeated .Packet.MessageBoard msgs = 7;
  total_size += 1 * this->msgs_size();
  for (int i = 0; i < this->msgs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msgs(i));
  }

  // repeated .Packet.FriendMessageInfo offlinemsgs = 8;
  total_size += 1 * this->offlinemsgs_size();
  for (int i = 0; i < this->offlinemsgs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->offlinemsgs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendInfotReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendInfotReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendInfotReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void FriendInfotReply::MergeFrom(const FriendInfotReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  msgs_.MergeFrom(from.msgs_);
  offlinemsgs_.MergeFrom(from.offlinemsgs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailmessages()) {
      mutable_mailmessages()->::Packet::MessagesUpdate::MergeFrom(from.mailmessages());
    }
    if (from.has_friends()) {
      mutable_friends()->::Packet::FriendListUpdate::MergeFrom(from.friends());
    }
    if (from.has_recommends()) {
      mutable_recommends()->::Packet::RecommendsUpdate::MergeFrom(from.recommends());
    }
    if (from.has_notifyinfos()) {
      mutable_notifyinfos()->::Packet::ClientFriendMessageNotify::MergeFrom(from.notifyinfos());
    }
    if (from.has_zoneinfo()) {
      mutable_zoneinfo()->::Packet::ZoneInfo::MergeFrom(from.zoneinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void FriendInfotReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void FriendInfotReply::CopyFrom(const FriendInfotReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool FriendInfotReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_mailmessages()) {
    if (!this->mailmessages().IsInitialized()) return false;
  }
  if (has_friends()) {
    if (!this->friends().IsInitialized()) return false;
  }
  if (has_recommends()) {
    if (!this->recommends().IsInitialized()) return false;
  }
  if (has_notifyinfos()) {
    if (!this->notifyinfos().IsInitialized()) return false;
  }
  if (has_zoneinfo()) {
    if (!this->zoneinfo().IsInitialized()) return false;
  }
  for (int i = 0; i < msgs_size(); i++) {
    if (!this->msgs(i).IsInitialized()) return false;
  }
  for (int i = 0; i < offlinemsgs_size(); i++) {
    if (!this->offlinemsgs(i).IsInitialized()) return false;
  }
  return true;
}

void FriendInfotReply::SetInitialized() {
  _has_bits_[0] |= 0x0000000f;

  if (has_mailmessages()) {
    this->mutable_mailmessages()->SetInitialized();
  }
  if (has_friends()) {
    this->mutable_friends()->SetInitialized();
  }
  if (has_recommends()) {
    this->mutable_recommends()->SetInitialized();
  }
  if (has_notifyinfos()) {
    this->mutable_notifyinfos()->SetInitialized();
  }
  if (has_zoneinfo()) {
    this->mutable_zoneinfo()->SetInitialized();
  }
  for (int i = 0; i < msgs_size(); i++) {
    this->mutable_msgs(i)->SetInitialized();
  }
  for (int i = 0; i < offlinemsgs_size(); i++) {
    this->mutable_offlinemsgs(i)->SetInitialized();
  }
  return;
}

void FriendInfotReply::Swap(FriendInfotReply* other) {
  if (other != this) {
    std::swap(mailmessages_, other->mailmessages_);
    std::swap(friends_, other->friends_);
    std::swap(recommends_, other->recommends_);
    std::swap(notifyinfos_, other->notifyinfos_);
    std::swap(zoneinfo_, other->zoneinfo_);
    msgs_.Swap(&other->msgs_);
    offlinemsgs_.Swap(&other->offlinemsgs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata FriendInfotReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendInfotReply_descriptor_;
  metadata.reflection = FriendInfotReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RecommendReq::RecommendReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecommendReq::InitAsDefaultInstance() {
}

RecommendReq::RecommendReq(const RecommendReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecommendReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecommendReq::~RecommendReq() {
  SharedDtor();
}

void RecommendReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecommendReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecommendReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecommendReq_descriptor_;
}

const RecommendReq& RecommendReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

RecommendReq* RecommendReq::default_instance_ = NULL;

RecommendReq* RecommendReq::New() const {
  return new RecommendReq;
}

void RecommendReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool RecommendReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void RecommendReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecommendReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecommendReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecommendReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecommendReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecommendReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void RecommendReq::MergeFrom(const RecommendReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void RecommendReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void RecommendReq::CopyFrom(const RecommendReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool RecommendReq::IsInitialized() const {

  return true;
}

void RecommendReq::SetInitialized() {

  return;
}

void RecommendReq::Swap(RecommendReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata RecommendReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecommendReq_descriptor_;
  metadata.reflection = RecommendReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FriendListReq::FriendListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendListReq::InitAsDefaultInstance() {
}

FriendListReq::FriendListReq(const FriendListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendListReq::~FriendListReq() {
  SharedDtor();
}

void FriendListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendListReq_descriptor_;
}

const FriendListReq& FriendListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

FriendListReq* FriendListReq::default_instance_ = NULL;

FriendListReq* FriendListReq::New() const {
  return new FriendListReq;
}

void FriendListReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool FriendListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void FriendListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendListReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void FriendListReq::MergeFrom(const FriendListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void FriendListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void FriendListReq::CopyFrom(const FriendListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool FriendListReq::IsInitialized() const {

  return true;
}

void FriendListReq::SetInitialized() {

  return;
}

void FriendListReq::Swap(FriendListReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata FriendListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendListReq_descriptor_;
  metadata.reflection = FriendListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FindPlayerInfo::kGuidFieldNumber;
const int FindPlayerInfo::kNameFieldNumber;
const int FindPlayerInfo::kHairFieldNumber;
const int FindPlayerInfo::kLevelFieldNumber;
const int FindPlayerInfo::kInitActorIdFieldNumber;
#endif  // !_MSC_VER

FindPlayerInfo::FindPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FindPlayerInfo::InitAsDefaultInstance() {
}

FindPlayerInfo::FindPlayerInfo(const FindPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FindPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hair_ = 0;
  level_ = 0;
  init_actor_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FindPlayerInfo::~FindPlayerInfo() {
  SharedDtor();
}

void FindPlayerInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FindPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FindPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FindPlayerInfo_descriptor_;
}

const FindPlayerInfo& FindPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

FindPlayerInfo* FindPlayerInfo::default_instance_ = NULL;

FindPlayerInfo* FindPlayerInfo::New() const {
  return new FindPlayerInfo;
}

void FindPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    hair_ = 0;
    level_ = 0;
    init_actor_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool FindPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hair;
        break;
      }

      // required int32 hair = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hair_)));
          set_has_hair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // required int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_init_actor_id;
        break;
      }

      // required int32 init_actor_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_init_actor_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &init_actor_id_)));
          set_has_init_actor_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void FindPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required int32 hair = 3;
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hair(), output);
  }

  // required int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // required int32 init_actor_id = 5;
  if (has_init_actor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->init_actor_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FindPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required int32 hair = 3;
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hair(), target);
  }

  // required int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // required int32 init_actor_id = 5;
  if (has_init_actor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->init_actor_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FindPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 hair = 3;
    if (has_hair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hair());
    }

    // required int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 init_actor_id = 5;
    if (has_init_actor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->init_actor_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FindPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FindPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FindPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void FindPlayerInfo::MergeFrom(const FindPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_hair()) {
      set_hair(from.hair());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_init_actor_id()) {
      set_init_actor_id(from.init_actor_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void FindPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void FindPlayerInfo::CopyFrom(const FindPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool FindPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void FindPlayerInfo::SetInitialized() {
  _has_bits_[0] |= 0x0000001f;

  return;
}

void FindPlayerInfo::Swap(FindPlayerInfo* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(name_, other->name_);
    std::swap(hair_, other->hair_);
    std::swap(level_, other->level_);
    std::swap(init_actor_id_, other->init_actor_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata FindPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FindPlayerInfo_descriptor_;
  metadata.reflection = FindPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FindFriendByNameReq::kNameFieldNumber;
#endif  // !_MSC_VER

FindFriendByNameReq::FindFriendByNameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FindFriendByNameReq::InitAsDefaultInstance() {
}

FindFriendByNameReq::FindFriendByNameReq(const FindFriendByNameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FindFriendByNameReq::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FindFriendByNameReq::~FindFriendByNameReq() {
  SharedDtor();
}

void FindFriendByNameReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FindFriendByNameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FindFriendByNameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FindFriendByNameReq_descriptor_;
}

const FindFriendByNameReq& FindFriendByNameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

FindFriendByNameReq* FindFriendByNameReq::default_instance_ = NULL;

FindFriendByNameReq* FindFriendByNameReq::New() const {
  return new FindFriendByNameReq;
}

void FindFriendByNameReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool FindFriendByNameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void FindFriendByNameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FindFriendByNameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FindFriendByNameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FindFriendByNameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FindFriendByNameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FindFriendByNameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void FindFriendByNameReq::MergeFrom(const FindFriendByNameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void FindFriendByNameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void FindFriendByNameReq::CopyFrom(const FindFriendByNameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool FindFriendByNameReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FindFriendByNameReq::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void FindFriendByNameReq::Swap(FindFriendByNameReq* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata FindFriendByNameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FindFriendByNameReq_descriptor_;
  metadata.reflection = FindFriendByNameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FindFriendByGuidReq::kGuidFieldNumber;
#endif  // !_MSC_VER

FindFriendByGuidReq::FindFriendByGuidReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FindFriendByGuidReq::InitAsDefaultInstance() {
}

FindFriendByGuidReq::FindFriendByGuidReq(const FindFriendByGuidReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FindFriendByGuidReq::SharedCtor() {
  _cached_size_ = 0;
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FindFriendByGuidReq::~FindFriendByGuidReq() {
  SharedDtor();
}

void FindFriendByGuidReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FindFriendByGuidReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FindFriendByGuidReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FindFriendByGuidReq_descriptor_;
}

const FindFriendByGuidReq& FindFriendByGuidReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

FindFriendByGuidReq* FindFriendByGuidReq::default_instance_ = NULL;

FindFriendByGuidReq* FindFriendByGuidReq::New() const {
  return new FindFriendByGuidReq;
}

void FindFriendByGuidReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool FindFriendByGuidReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void FindFriendByGuidReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FindFriendByGuidReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 guid = 1;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FindFriendByGuidReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 guid = 1;
    if (has_guid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FindFriendByGuidReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FindFriendByGuidReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FindFriendByGuidReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void FindFriendByGuidReq::MergeFrom(const FindFriendByGuidReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void FindFriendByGuidReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void FindFriendByGuidReq::CopyFrom(const FindFriendByGuidReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool FindFriendByGuidReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FindFriendByGuidReq::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void FindFriendByGuidReq::Swap(FindFriendByGuidReq* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata FindFriendByGuidReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FindFriendByGuidReq_descriptor_;
  metadata.reflection = FindFriendByGuidReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FindFriendReply::kInfoFieldNumber;
#endif  // !_MSC_VER

FindFriendReply::FindFriendReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FindFriendReply::InitAsDefaultInstance() {
  info_ = const_cast< ::Packet::FindPlayerInfo*>(&::Packet::FindPlayerInfo::default_instance());
}

FindFriendReply::FindFriendReply(const FindFriendReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FindFriendReply::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FindFriendReply::~FindFriendReply() {
  SharedDtor();
}

void FindFriendReply::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void FindFriendReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FindFriendReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FindFriendReply_descriptor_;
}

const FindFriendReply& FindFriendReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

FindFriendReply* FindFriendReply::default_instance_ = NULL;

FindFriendReply* FindFriendReply::New() const {
  return new FindFriendReply;
}

void FindFriendReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::Packet::FindPlayerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool FindFriendReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.FindPlayerInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void FindFriendReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.FindPlayerInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FindFriendReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.FindPlayerInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FindFriendReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.FindPlayerInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FindFriendReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FindFriendReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FindFriendReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void FindFriendReply::MergeFrom(const FindFriendReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::Packet::FindPlayerInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void FindFriendReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void FindFriendReply::CopyFrom(const FindFriendReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool FindFriendReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void FindFriendReply::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  if (has_info()) {
    this->mutable_info()->SetInitialized();
  }
  return;
}

void FindFriendReply::Swap(FindFriendReply* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata FindFriendReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FindFriendReply_descriptor_;
  metadata.reflection = FindFriendReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendListUpdate::kFriendsFieldNumber;
#endif  // !_MSC_VER

FriendListUpdate::FriendListUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendListUpdate::InitAsDefaultInstance() {
}

FriendListUpdate::FriendListUpdate(const FriendListUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendListUpdate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendListUpdate::~FriendListUpdate() {
  SharedDtor();
}

void FriendListUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendListUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendListUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendListUpdate_descriptor_;
}

const FriendListUpdate& FriendListUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

FriendListUpdate* FriendListUpdate::default_instance_ = NULL;

FriendListUpdate* FriendListUpdate::New() const {
  return new FriendListUpdate;
}

void FriendListUpdate::Clear() {
  friends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool FriendListUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.FriendInfo friends = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_friends;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void FriendListUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.FriendInfo friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friends(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendListUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.FriendInfo friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friends(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendListUpdate::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.FriendInfo friends = 1;
  total_size += 1 * this->friends_size();
  for (int i = 0; i < this->friends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friends(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendListUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendListUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendListUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void FriendListUpdate::MergeFrom(const FriendListUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void FriendListUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void FriendListUpdate::CopyFrom(const FriendListUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool FriendListUpdate::IsInitialized() const {

  for (int i = 0; i < friends_size(); i++) {
    if (!this->friends(i).IsInitialized()) return false;
  }
  return true;
}

void FriendListUpdate::SetInitialized() {

  for (int i = 0; i < friends_size(); i++) {
    this->mutable_friends(i)->SetInitialized();
  }
  return;
}

void FriendListUpdate::Swap(FriendListUpdate* other) {
  if (other != this) {
    friends_.Swap(&other->friends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata FriendListUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendListUpdate_descriptor_;
  metadata.reflection = FriendListUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecommendsUpdate::kRecommendsFieldNumber;
#endif  // !_MSC_VER

RecommendsUpdate::RecommendsUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecommendsUpdate::InitAsDefaultInstance() {
}

RecommendsUpdate::RecommendsUpdate(const RecommendsUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecommendsUpdate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecommendsUpdate::~RecommendsUpdate() {
  SharedDtor();
}

void RecommendsUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecommendsUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecommendsUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecommendsUpdate_descriptor_;
}

const RecommendsUpdate& RecommendsUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

RecommendsUpdate* RecommendsUpdate::default_instance_ = NULL;

RecommendsUpdate* RecommendsUpdate::New() const {
  return new RecommendsUpdate;
}

void RecommendsUpdate::Clear() {
  recommends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool RecommendsUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.FriendInfo recommends = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recommends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recommends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_recommends;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void RecommendsUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.FriendInfo recommends = 1;
  for (int i = 0; i < this->recommends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recommends(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecommendsUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.FriendInfo recommends = 1;
  for (int i = 0; i < this->recommends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recommends(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecommendsUpdate::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.FriendInfo recommends = 1;
  total_size += 1 * this->recommends_size();
  for (int i = 0; i < this->recommends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recommends(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecommendsUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecommendsUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecommendsUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void RecommendsUpdate::MergeFrom(const RecommendsUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  recommends_.MergeFrom(from.recommends_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void RecommendsUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void RecommendsUpdate::CopyFrom(const RecommendsUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool RecommendsUpdate::IsInitialized() const {

  for (int i = 0; i < recommends_size(); i++) {
    if (!this->recommends(i).IsInitialized()) return false;
  }
  return true;
}

void RecommendsUpdate::SetInitialized() {

  for (int i = 0; i < recommends_size(); i++) {
    this->mutable_recommends(i)->SetInitialized();
  }
  return;
}

void RecommendsUpdate::Swap(RecommendsUpdate* other) {
  if (other != this) {
    recommends_.Swap(&other->recommends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata RecommendsUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecommendsUpdate_descriptor_;
  metadata.reflection = RecommendsUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessagesUpdate::kMessagesFieldNumber;
#endif  // !_MSC_VER

MessagesUpdate::MessagesUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MessagesUpdate::InitAsDefaultInstance() {
}

MessagesUpdate::MessagesUpdate(const MessagesUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MessagesUpdate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessagesUpdate::~MessagesUpdate() {
  SharedDtor();
}

void MessagesUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessagesUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessagesUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessagesUpdate_descriptor_;
}

const MessagesUpdate& MessagesUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

MessagesUpdate* MessagesUpdate::default_instance_ = NULL;

MessagesUpdate* MessagesUpdate::New() const {
  return new MessagesUpdate;
}

void MessagesUpdate::Clear() {
  messages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool MessagesUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.MessageInfo messages = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_messages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_messages;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void MessagesUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.MessageInfo messages = 1;
  for (int i = 0; i < this->messages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->messages(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MessagesUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.MessageInfo messages = 1;
  for (int i = 0; i < this->messages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->messages(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MessagesUpdate::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.MessageInfo messages = 1;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messages(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessagesUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessagesUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessagesUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void MessagesUpdate::MergeFrom(const MessagesUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  messages_.MergeFrom(from.messages_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void MessagesUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void MessagesUpdate::CopyFrom(const MessagesUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool MessagesUpdate::IsInitialized() const {

  for (int i = 0; i < messages_size(); i++) {
    if (!this->messages(i).IsInitialized()) return false;
  }
  return true;
}

void MessagesUpdate::SetInitialized() {

  for (int i = 0; i < messages_size(); i++) {
    this->mutable_messages(i)->SetInitialized();
  }
  return;
}

void MessagesUpdate::Swap(MessagesUpdate* other) {
  if (other != this) {
    messages_.Swap(&other->messages_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata MessagesUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessagesUpdate_descriptor_;
  metadata.reflection = MessagesUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddFriendMessagesReply::kMessagesFieldNumber;
#endif  // !_MSC_VER

AddFriendMessagesReply::AddFriendMessagesReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddFriendMessagesReply::InitAsDefaultInstance() {
  messages_ = const_cast< ::Packet::FriendMessageInfo*>(&::Packet::FriendMessageInfo::default_instance());
}

AddFriendMessagesReply::AddFriendMessagesReply(const AddFriendMessagesReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddFriendMessagesReply::SharedCtor() {
  _cached_size_ = 0;
  messages_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddFriendMessagesReply::~AddFriendMessagesReply() {
  SharedDtor();
}

void AddFriendMessagesReply::SharedDtor() {
  if (this != default_instance_) {
    delete messages_;
  }
}

void AddFriendMessagesReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFriendMessagesReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddFriendMessagesReply_descriptor_;
}

const AddFriendMessagesReply& AddFriendMessagesReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

AddFriendMessagesReply* AddFriendMessagesReply::default_instance_ = NULL;

AddFriendMessagesReply* AddFriendMessagesReply::New() const {
  return new AddFriendMessagesReply;
}

void AddFriendMessagesReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_messages()) {
      if (messages_ != NULL) messages_->::Packet::FriendMessageInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool AddFriendMessagesReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.FriendMessageInfo messages = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_messages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void AddFriendMessagesReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.FriendMessageInfo messages = 1;
  if (has_messages()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->messages(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddFriendMessagesReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.FriendMessageInfo messages = 1;
  if (has_messages()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->messages(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddFriendMessagesReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.FriendMessageInfo messages = 1;
    if (has_messages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->messages());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFriendMessagesReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddFriendMessagesReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddFriendMessagesReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void AddFriendMessagesReply::MergeFrom(const AddFriendMessagesReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messages()) {
      mutable_messages()->::Packet::FriendMessageInfo::MergeFrom(from.messages());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void AddFriendMessagesReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void AddFriendMessagesReply::CopyFrom(const AddFriendMessagesReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool AddFriendMessagesReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_messages()) {
    if (!this->messages().IsInitialized()) return false;
  }
  return true;
}

void AddFriendMessagesReply::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  if (has_messages()) {
    this->mutable_messages()->SetInitialized();
  }
  return;
}

void AddFriendMessagesReply::Swap(AddFriendMessagesReply* other) {
  if (other != this) {
    std::swap(messages_, other->messages_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata AddFriendMessagesReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddFriendMessagesReply_descriptor_;
  metadata.reflection = AddFriendMessagesReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendMessageReq::kPlayerGuidFieldNumber;
const int FriendMessageReq::kChatMessageFieldNumber;
const int FriendMessageReq::kChatTimeFieldNumber;
#endif  // !_MSC_VER

FriendMessageReq::FriendMessageReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendMessageReq::InitAsDefaultInstance() {
}

FriendMessageReq::FriendMessageReq(const FriendMessageReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendMessageReq::SharedCtor() {
  _cached_size_ = 0;
  player_guid_ = GOOGLE_ULONGLONG(0);
  chat_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chat_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendMessageReq::~FriendMessageReq() {
  SharedDtor();
}

void FriendMessageReq::SharedDtor() {
  if (chat_message_ != &::google::protobuf::internal::kEmptyString) {
    delete chat_message_;
  }
  if (this != default_instance_) {
  }
}

void FriendMessageReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendMessageReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendMessageReq_descriptor_;
}

const FriendMessageReq& FriendMessageReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

FriendMessageReq* FriendMessageReq::default_instance_ = NULL;

FriendMessageReq* FriendMessageReq::New() const {
  return new FriendMessageReq;
}

void FriendMessageReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_guid_ = GOOGLE_ULONGLONG(0);
    if (has_chat_message()) {
      if (chat_message_ != &::google::protobuf::internal::kEmptyString) {
        chat_message_->clear();
      }
    }
    chat_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool FriendMessageReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 player_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &player_guid_)));
          set_has_player_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chat_message;
        break;
      }

      // required bytes chat_message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chat_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chat_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chat_time;
        break;
      }

      // required int32 chat_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chat_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chat_time_)));
          set_has_chat_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void FriendMessageReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 player_guid = 1;
  if (has_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->player_guid(), output);
  }

  // required bytes chat_message = 2;
  if (has_chat_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->chat_message(), output);
  }

  // required int32 chat_time = 3;
  if (has_chat_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chat_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendMessageReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 player_guid = 1;
  if (has_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->player_guid(), target);
  }

  // required bytes chat_message = 2;
  if (has_chat_message()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->chat_message(), target);
  }

  // required int32 chat_time = 3;
  if (has_chat_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chat_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendMessageReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 player_guid = 1;
    if (has_player_guid()) {
      total_size += 1 + 8;
    }

    // required bytes chat_message = 2;
    if (has_chat_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->chat_message());
    }

    // required int32 chat_time = 3;
    if (has_chat_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chat_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendMessageReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendMessageReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendMessageReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void FriendMessageReq::MergeFrom(const FriendMessageReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_guid()) {
      set_player_guid(from.player_guid());
    }
    if (from.has_chat_message()) {
      set_chat_message(from.chat_message());
    }
    if (from.has_chat_time()) {
      set_chat_time(from.chat_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void FriendMessageReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void FriendMessageReq::CopyFrom(const FriendMessageReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool FriendMessageReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FriendMessageReq::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  return;
}

void FriendMessageReq::Swap(FriendMessageReq* other) {
  if (other != this) {
    std::swap(player_guid_, other->player_guid_);
    std::swap(chat_message_, other->chat_message_);
    std::swap(chat_time_, other->chat_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata FriendMessageReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendMessageReq_descriptor_;
  metadata.reflection = FriendMessageReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetZoneSignatureReq::kSignatureFieldNumber;
#endif  // !_MSC_VER

SetZoneSignatureReq::SetZoneSignatureReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetZoneSignatureReq::InitAsDefaultInstance() {
}

SetZoneSignatureReq::SetZoneSignatureReq(const SetZoneSignatureReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetZoneSignatureReq::SharedCtor() {
  _cached_size_ = 0;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetZoneSignatureReq::~SetZoneSignatureReq() {
  SharedDtor();
}

void SetZoneSignatureReq::SharedDtor() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (this != default_instance_) {
  }
}

void SetZoneSignatureReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetZoneSignatureReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetZoneSignatureReq_descriptor_;
}

const SetZoneSignatureReq& SetZoneSignatureReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

SetZoneSignatureReq* SetZoneSignatureReq::default_instance_ = NULL;

SetZoneSignatureReq* SetZoneSignatureReq::New() const {
  return new SetZoneSignatureReq;
}

void SetZoneSignatureReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SetZoneSignatureReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string signature = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SetZoneSignatureReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string signature = 1;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->signature(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetZoneSignatureReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string signature = 1;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->signature(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetZoneSignatureReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string signature = 1;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetZoneSignatureReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetZoneSignatureReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetZoneSignatureReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SetZoneSignatureReq::MergeFrom(const SetZoneSignatureReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signature()) {
      set_signature(from.signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SetZoneSignatureReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SetZoneSignatureReq::CopyFrom(const SetZoneSignatureReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SetZoneSignatureReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetZoneSignatureReq::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void SetZoneSignatureReq::Swap(SetZoneSignatureReq* other) {
  if (other != this) {
    std::swap(signature_, other->signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SetZoneSignatureReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetZoneSignatureReq_descriptor_;
  metadata.reflection = SetZoneSignatureReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignatureUpdate::kSignatureFieldNumber;
#endif  // !_MSC_VER

SignatureUpdate::SignatureUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignatureUpdate::InitAsDefaultInstance() {
}

SignatureUpdate::SignatureUpdate(const SignatureUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignatureUpdate::SharedCtor() {
  _cached_size_ = 0;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignatureUpdate::~SignatureUpdate() {
  SharedDtor();
}

void SignatureUpdate::SharedDtor() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (this != default_instance_) {
  }
}

void SignatureUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignatureUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignatureUpdate_descriptor_;
}

const SignatureUpdate& SignatureUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

SignatureUpdate* SignatureUpdate::default_instance_ = NULL;

SignatureUpdate* SignatureUpdate::New() const {
  return new SignatureUpdate;
}

void SignatureUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SignatureUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string signature = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SignatureUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string signature = 1;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->signature(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignatureUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string signature = 1;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->signature(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignatureUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string signature = 1;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignatureUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignatureUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignatureUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SignatureUpdate::MergeFrom(const SignatureUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signature()) {
      set_signature(from.signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SignatureUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SignatureUpdate::CopyFrom(const SignatureUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SignatureUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SignatureUpdate::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void SignatureUpdate::Swap(SignatureUpdate* other) {
  if (other != this) {
    std::swap(signature_, other->signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SignatureUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignatureUpdate_descriptor_;
  metadata.reflection = SignatureUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddFriendReq::kPlayerGuidFieldNumber;
#endif  // !_MSC_VER

AddFriendReq::AddFriendReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddFriendReq::InitAsDefaultInstance() {
}

AddFriendReq::AddFriendReq(const AddFriendReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddFriendReq::SharedCtor() {
  _cached_size_ = 0;
  player_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddFriendReq::~AddFriendReq() {
  SharedDtor();
}

void AddFriendReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddFriendReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFriendReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddFriendReq_descriptor_;
}

const AddFriendReq& AddFriendReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

AddFriendReq* AddFriendReq::default_instance_ = NULL;

AddFriendReq* AddFriendReq::New() const {
  return new AddFriendReq;
}

void AddFriendReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool AddFriendReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 player_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &player_guid_)));
          set_has_player_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void AddFriendReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 player_guid = 1;
  if (has_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->player_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddFriendReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 player_guid = 1;
  if (has_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->player_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddFriendReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 player_guid = 1;
    if (has_player_guid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFriendReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddFriendReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddFriendReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void AddFriendReq::MergeFrom(const AddFriendReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_guid()) {
      set_player_guid(from.player_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void AddFriendReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void AddFriendReq::CopyFrom(const AddFriendReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool AddFriendReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AddFriendReq::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void AddFriendReq::Swap(AddFriendReq* other) {
  if (other != this) {
    std::swap(player_guid_, other->player_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata AddFriendReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddFriendReq_descriptor_;
  metadata.reflection = AddFriendReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelFriendReq::kPlayerGuidFieldNumber;
#endif  // !_MSC_VER

DelFriendReq::DelFriendReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DelFriendReq::InitAsDefaultInstance() {
}

DelFriendReq::DelFriendReq(const DelFriendReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DelFriendReq::SharedCtor() {
  _cached_size_ = 0;
  player_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelFriendReq::~DelFriendReq() {
  SharedDtor();
}

void DelFriendReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DelFriendReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelFriendReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelFriendReq_descriptor_;
}

const DelFriendReq& DelFriendReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

DelFriendReq* DelFriendReq::default_instance_ = NULL;

DelFriendReq* DelFriendReq::New() const {
  return new DelFriendReq;
}

void DelFriendReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool DelFriendReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 player_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &player_guid_)));
          set_has_player_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void DelFriendReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 player_guid = 1;
  if (has_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->player_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DelFriendReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 player_guid = 1;
  if (has_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->player_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DelFriendReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 player_guid = 1;
    if (has_player_guid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelFriendReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelFriendReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelFriendReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void DelFriendReq::MergeFrom(const DelFriendReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_guid()) {
      set_player_guid(from.player_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void DelFriendReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void DelFriendReq::CopyFrom(const DelFriendReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool DelFriendReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DelFriendReq::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void DelFriendReq::Swap(DelFriendReq* other) {
  if (other != this) {
    std::swap(player_guid_, other->player_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata DelFriendReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelFriendReq_descriptor_;
  metadata.reflection = DelFriendReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskTeamReq::kPlayerGuidFieldNumber;
#endif  // !_MSC_VER

AskTeamReq::AskTeamReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AskTeamReq::InitAsDefaultInstance() {
}

AskTeamReq::AskTeamReq(const AskTeamReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AskTeamReq::SharedCtor() {
  _cached_size_ = 0;
  player_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskTeamReq::~AskTeamReq() {
  SharedDtor();
}

void AskTeamReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskTeamReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskTeamReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskTeamReq_descriptor_;
}

const AskTeamReq& AskTeamReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

AskTeamReq* AskTeamReq::default_instance_ = NULL;

AskTeamReq* AskTeamReq::New() const {
  return new AskTeamReq;
}

void AskTeamReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool AskTeamReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 player_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &player_guid_)));
          set_has_player_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void AskTeamReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 player_guid = 1;
  if (has_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->player_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AskTeamReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 player_guid = 1;
  if (has_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->player_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AskTeamReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 player_guid = 1;
    if (has_player_guid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskTeamReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskTeamReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskTeamReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void AskTeamReq::MergeFrom(const AskTeamReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_guid()) {
      set_player_guid(from.player_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void AskTeamReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void AskTeamReq::CopyFrom(const AskTeamReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool AskTeamReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AskTeamReq::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void AskTeamReq::Swap(AskTeamReq* other) {
  if (other != this) {
    std::swap(player_guid_, other->player_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata AskTeamReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskTeamReq_descriptor_;
  metadata.reflection = AskTeamReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskGuildReq::kPlayerGuidFieldNumber;
#endif  // !_MSC_VER

AskGuildReq::AskGuildReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AskGuildReq::InitAsDefaultInstance() {
}

AskGuildReq::AskGuildReq(const AskGuildReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AskGuildReq::SharedCtor() {
  _cached_size_ = 0;
  player_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskGuildReq::~AskGuildReq() {
  SharedDtor();
}

void AskGuildReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskGuildReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskGuildReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskGuildReq_descriptor_;
}

const AskGuildReq& AskGuildReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

AskGuildReq* AskGuildReq::default_instance_ = NULL;

AskGuildReq* AskGuildReq::New() const {
  return new AskGuildReq;
}

void AskGuildReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool AskGuildReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 player_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &player_guid_)));
          set_has_player_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void AskGuildReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 player_guid = 1;
  if (has_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->player_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AskGuildReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 player_guid = 1;
  if (has_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->player_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AskGuildReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 player_guid = 1;
    if (has_player_guid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskGuildReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskGuildReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskGuildReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void AskGuildReq::MergeFrom(const AskGuildReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_guid()) {
      set_player_guid(from.player_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void AskGuildReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void AskGuildReq::CopyFrom(const AskGuildReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool AskGuildReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AskGuildReq::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void AskGuildReq::Swap(AskGuildReq* other) {
  if (other != this) {
    std::swap(player_guid_, other->player_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata AskGuildReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskGuildReq_descriptor_;
  metadata.reflection = AskGuildReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendGiftReq::kPlayerGuidFieldNumber;
const int SendGiftReq::kItemsFieldNumber;
#endif  // !_MSC_VER

SendGiftReq::SendGiftReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendGiftReq::InitAsDefaultInstance() {
}

SendGiftReq::SendGiftReq(const SendGiftReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendGiftReq::SharedCtor() {
  _cached_size_ = 0;
  player_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendGiftReq::~SendGiftReq() {
  SharedDtor();
}

void SendGiftReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SendGiftReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendGiftReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendGiftReq_descriptor_;
}

const SendGiftReq& SendGiftReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

SendGiftReq* SendGiftReq::default_instance_ = NULL;

SendGiftReq* SendGiftReq::New() const {
  return new SendGiftReq;
}

void SendGiftReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_guid_ = GOOGLE_ULONGLONG(0);
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SendGiftReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 player_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &player_guid_)));
          set_has_player_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .Packet.ItemCount items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SendGiftReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 player_guid = 1;
  if (has_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->player_guid(), output);
  }

  // repeated .Packet.ItemCount items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendGiftReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 player_guid = 1;
  if (has_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->player_guid(), target);
  }

  // repeated .Packet.ItemCount items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendGiftReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 player_guid = 1;
    if (has_player_guid()) {
      total_size += 1 + 8;
    }

  }
  // repeated .Packet.ItemCount items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendGiftReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendGiftReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendGiftReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SendGiftReq::MergeFrom(const SendGiftReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_guid()) {
      set_player_guid(from.player_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SendGiftReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SendGiftReq::CopyFrom(const SendGiftReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SendGiftReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void SendGiftReq::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  for (int i = 0; i < items_size(); i++) {
    this->mutable_items(i)->SetInitialized();
  }
  return;
}

void SendGiftReq::Swap(SendGiftReq* other) {
  if (other != this) {
    std::swap(player_guid_, other->player_guid_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SendGiftReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendGiftReq_descriptor_;
  metadata.reflection = SendGiftReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ViewZoneReq::kPlayerGuidFieldNumber;
#endif  // !_MSC_VER

ViewZoneReq::ViewZoneReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ViewZoneReq::InitAsDefaultInstance() {
}

ViewZoneReq::ViewZoneReq(const ViewZoneReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ViewZoneReq::SharedCtor() {
  _cached_size_ = 0;
  player_guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ViewZoneReq::~ViewZoneReq() {
  SharedDtor();
}

void ViewZoneReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ViewZoneReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ViewZoneReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ViewZoneReq_descriptor_;
}

const ViewZoneReq& ViewZoneReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

ViewZoneReq* ViewZoneReq::default_instance_ = NULL;

ViewZoneReq* ViewZoneReq::New() const {
  return new ViewZoneReq;
}

void ViewZoneReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ViewZoneReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 player_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &player_guid_)));
          set_has_player_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ViewZoneReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 player_guid = 1;
  if (has_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->player_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ViewZoneReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 player_guid = 1;
  if (has_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->player_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ViewZoneReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 player_guid = 1;
    if (has_player_guid()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ViewZoneReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ViewZoneReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ViewZoneReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ViewZoneReq::MergeFrom(const ViewZoneReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_guid()) {
      set_player_guid(from.player_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ViewZoneReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ViewZoneReq::CopyFrom(const ViewZoneReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ViewZoneReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ViewZoneReq::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void ViewZoneReq::Swap(ViewZoneReq* other) {
  if (other != this) {
    std::swap(player_guid_, other->player_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ViewZoneReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ViewZoneReq_descriptor_;
  metadata.reflection = ViewZoneReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZoneBaseInfo::kPlayerGuidFieldNumber;
const int ZoneBaseInfo::kPlayerNameFieldNumber;
const int ZoneBaseInfo::kPlayerHairFieldNumber;
const int ZoneBaseInfo::kInitActorIdFieldNumber;
const int ZoneBaseInfo::kLevelFieldNumber;
const int ZoneBaseInfo::kGuildnameFieldNumber;
#endif  // !_MSC_VER

ZoneBaseInfo::ZoneBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZoneBaseInfo::InitAsDefaultInstance() {
}

ZoneBaseInfo::ZoneBaseInfo(const ZoneBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZoneBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  player_guid_ = GOOGLE_ULONGLONG(0);
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_hair_ = 0;
  init_actor_id_ = 0;
  level_ = 0;
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZoneBaseInfo::~ZoneBaseInfo() {
  SharedDtor();
}

void ZoneBaseInfo::SharedDtor() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void ZoneBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZoneBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZoneBaseInfo_descriptor_;
}

const ZoneBaseInfo& ZoneBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

ZoneBaseInfo* ZoneBaseInfo::default_instance_ = NULL;

ZoneBaseInfo* ZoneBaseInfo::New() const {
  return new ZoneBaseInfo;
}

void ZoneBaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_guid_ = GOOGLE_ULONGLONG(0);
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    player_hair_ = 0;
    init_actor_id_ = 0;
    level_ = 0;
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ZoneBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 player_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &player_guid_)));
          set_has_player_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_name;
        break;
      }

      // required string player_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_hair;
        break;
      }

      // required int32 player_hair = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_hair_)));
          set_has_player_hair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_init_actor_id;
        break;
      }

      // required int32 init_actor_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_init_actor_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &init_actor_id_)));
          set_has_init_actor_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // required int32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_guildname;
        break;
      }

      // required string guildname = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ZoneBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 player_guid = 1;
  if (has_player_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->player_guid(), output);
  }

  // required string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->player_name(), output);
  }

  // required int32 player_hair = 3;
  if (has_player_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_hair(), output);
  }

  // required int32 init_actor_id = 4;
  if (has_init_actor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->init_actor_id(), output);
  }

  // required int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // required string guildname = 6;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->guildname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZoneBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 player_guid = 1;
  if (has_player_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->player_guid(), target);
  }

  // required string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  // required int32 player_hair = 3;
  if (has_player_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_hair(), target);
  }

  // required int32 init_actor_id = 4;
  if (has_init_actor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->init_actor_id(), target);
  }

  // required int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  // required string guildname = 6;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->guildname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZoneBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 player_guid = 1;
    if (has_player_guid()) {
      total_size += 1 + 8;
    }

    // required string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // required int32 player_hair = 3;
    if (has_player_hair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_hair());
    }

    // required int32 init_actor_id = 4;
    if (has_init_actor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->init_actor_id());
    }

    // required int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required string guildname = 6;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZoneBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZoneBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZoneBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ZoneBaseInfo::MergeFrom(const ZoneBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_guid()) {
      set_player_guid(from.player_guid());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_player_hair()) {
      set_player_hair(from.player_hair());
    }
    if (from.has_init_actor_id()) {
      set_init_actor_id(from.init_actor_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ZoneBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ZoneBaseInfo::CopyFrom(const ZoneBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ZoneBaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void ZoneBaseInfo::SetInitialized() {
  _has_bits_[0] |= 0x0000003f;

  return;
}

void ZoneBaseInfo::Swap(ZoneBaseInfo* other) {
  if (other != this) {
    std::swap(player_guid_, other->player_guid_);
    std::swap(player_name_, other->player_name_);
    std::swap(player_hair_, other->player_hair_);
    std::swap(init_actor_id_, other->init_actor_id_);
    std::swap(level_, other->level_);
    std::swap(guildname_, other->guildname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ZoneBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZoneBaseInfo_descriptor_;
  metadata.reflection = ZoneBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ViewZoneReply::kBaseInfoFieldNumber;
const int ViewZoneReply::kMainEquipsFieldNumber;
const int ViewZoneReply::kMsgsFieldNumber;
const int ViewZoneReply::kZoneinfoFieldNumber;
#endif  // !_MSC_VER

ViewZoneReply::ViewZoneReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ViewZoneReply::InitAsDefaultInstance() {
  base_info_ = const_cast< ::Packet::ZoneBaseInfo*>(&::Packet::ZoneBaseInfo::default_instance());
  zoneinfo_ = const_cast< ::Packet::ZoneInfo*>(&::Packet::ZoneInfo::default_instance());
}

ViewZoneReply::ViewZoneReply(const ViewZoneReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ViewZoneReply::SharedCtor() {
  _cached_size_ = 0;
  base_info_ = NULL;
  zoneinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ViewZoneReply::~ViewZoneReply() {
  SharedDtor();
}

void ViewZoneReply::SharedDtor() {
  if (this != default_instance_) {
    delete base_info_;
    delete zoneinfo_;
  }
}

void ViewZoneReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ViewZoneReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ViewZoneReply_descriptor_;
}

const ViewZoneReply& ViewZoneReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

ViewZoneReply* ViewZoneReply::default_instance_ = NULL;

ViewZoneReply* ViewZoneReply::New() const {
  return new ViewZoneReply;
}

void ViewZoneReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_info()) {
      if (base_info_ != NULL) base_info_->::Packet::ZoneBaseInfo::Clear();
    }
    if (has_zoneinfo()) {
      if (zoneinfo_ != NULL) zoneinfo_->::Packet::ZoneInfo::Clear();
    }
  }
  main_equips_.Clear();
  msgs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool ViewZoneReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.ZoneBaseInfo base_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_main_equips;
        break;
      }

      // repeated .Packet.EquipItem main_equips = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_main_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_main_equips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_main_equips;
        if (input->ExpectTag(42)) goto parse_msgs;
        break;
      }

      // repeated .Packet.MessageBoard msgs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msgs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_msgs;
        if (input->ExpectTag(50)) goto parse_zoneinfo;
        break;
      }

      // required .Packet.ZoneInfo zoneinfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zoneinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_zoneinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void ViewZoneReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.ZoneBaseInfo base_info = 1;
  if (has_base_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_info(), output);
  }

  // repeated .Packet.EquipItem main_equips = 4;
  for (int i = 0; i < this->main_equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->main_equips(i), output);
  }

  // repeated .Packet.MessageBoard msgs = 5;
  for (int i = 0; i < this->msgs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->msgs(i), output);
  }

  // required .Packet.ZoneInfo zoneinfo = 6;
  if (has_zoneinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->zoneinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ViewZoneReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.ZoneBaseInfo base_info = 1;
  if (has_base_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_info(), target);
  }

  // repeated .Packet.EquipItem main_equips = 4;
  for (int i = 0; i < this->main_equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->main_equips(i), target);
  }

  // repeated .Packet.MessageBoard msgs = 5;
  for (int i = 0; i < this->msgs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->msgs(i), target);
  }

  // required .Packet.ZoneInfo zoneinfo = 6;
  if (has_zoneinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->zoneinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ViewZoneReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.ZoneBaseInfo base_info = 1;
    if (has_base_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_info());
    }

    // required .Packet.ZoneInfo zoneinfo = 6;
    if (has_zoneinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->zoneinfo());
    }

  }
  // repeated .Packet.EquipItem main_equips = 4;
  total_size += 1 * this->main_equips_size();
  for (int i = 0; i < this->main_equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->main_equips(i));
  }

  // repeated .Packet.MessageBoard msgs = 5;
  total_size += 1 * this->msgs_size();
  for (int i = 0; i < this->msgs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msgs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ViewZoneReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ViewZoneReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ViewZoneReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void ViewZoneReply::MergeFrom(const ViewZoneReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  main_equips_.MergeFrom(from.main_equips_);
  msgs_.MergeFrom(from.msgs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_info()) {
      mutable_base_info()->::Packet::ZoneBaseInfo::MergeFrom(from.base_info());
    }
    if (from.has_zoneinfo()) {
      mutable_zoneinfo()->::Packet::ZoneInfo::MergeFrom(from.zoneinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void ViewZoneReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void ViewZoneReply::CopyFrom(const ViewZoneReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool ViewZoneReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  if (has_base_info()) {
    if (!this->base_info().IsInitialized()) return false;
  }
  for (int i = 0; i < main_equips_size(); i++) {
    if (!this->main_equips(i).IsInitialized()) return false;
  }
  for (int i = 0; i < msgs_size(); i++) {
    if (!this->msgs(i).IsInitialized()) return false;
  }
  if (has_zoneinfo()) {
    if (!this->zoneinfo().IsInitialized()) return false;
  }
  return true;
}

void ViewZoneReply::SetInitialized() {
  _has_bits_[0] |= 0x00000009;

  if (has_base_info()) {
    this->mutable_base_info()->SetInitialized();
  }
  for (int i = 0; i < main_equips_size(); i++) {
    this->mutable_main_equips(i)->SetInitialized();
  }
  for (int i = 0; i < msgs_size(); i++) {
    this->mutable_msgs(i)->SetInitialized();
  }
  if (has_zoneinfo()) {
    this->mutable_zoneinfo()->SetInitialized();
  }
  return;
}

void ViewZoneReply::Swap(ViewZoneReply* other) {
  if (other != this) {
    std::swap(base_info_, other->base_info_);
    main_equips_.Swap(&other->main_equips_);
    msgs_.Swap(&other->msgs_);
    std::swap(zoneinfo_, other->zoneinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata ViewZoneReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ViewZoneReply_descriptor_;
  metadata.reflection = ViewZoneReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelMessageReq::kMessageIdFieldNumber;
#endif  // !_MSC_VER

DelMessageReq::DelMessageReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DelMessageReq::InitAsDefaultInstance() {
}

DelMessageReq::DelMessageReq(const DelMessageReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DelMessageReq::SharedCtor() {
  _cached_size_ = 0;
  message_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelMessageReq::~DelMessageReq() {
  SharedDtor();
}

void DelMessageReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DelMessageReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelMessageReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelMessageReq_descriptor_;
}

const DelMessageReq& DelMessageReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

DelMessageReq* DelMessageReq::default_instance_ = NULL;

DelMessageReq* DelMessageReq::New() const {
  return new DelMessageReq;
}

void DelMessageReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool DelMessageReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 message_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &message_id_)));
          set_has_message_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void DelMessageReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 message_id = 1;
  if (has_message_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->message_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DelMessageReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 message_id = 1;
  if (has_message_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->message_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DelMessageReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 message_id = 1;
    if (has_message_id()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelMessageReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelMessageReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelMessageReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void DelMessageReq::MergeFrom(const DelMessageReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_id()) {
      set_message_id(from.message_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void DelMessageReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void DelMessageReq::CopyFrom(const DelMessageReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool DelMessageReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DelMessageReq::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void DelMessageReq::Swap(DelMessageReq* other) {
  if (other != this) {
    std::swap(message_id_, other->message_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata DelMessageReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelMessageReq_descriptor_;
  metadata.reflection = DelMessageReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NewMessageNotify::NewMessageNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NewMessageNotify::InitAsDefaultInstance() {
}

NewMessageNotify::NewMessageNotify(const NewMessageNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NewMessageNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewMessageNotify::~NewMessageNotify() {
  SharedDtor();
}

void NewMessageNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewMessageNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewMessageNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewMessageNotify_descriptor_;
}

const NewMessageNotify& NewMessageNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

NewMessageNotify* NewMessageNotify::default_instance_ = NULL;

NewMessageNotify* NewMessageNotify::New() const {
  return new NewMessageNotify;
}

void NewMessageNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool NewMessageNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void NewMessageNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NewMessageNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NewMessageNotify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewMessageNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewMessageNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewMessageNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void NewMessageNotify::MergeFrom(const NewMessageNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void NewMessageNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void NewMessageNotify::CopyFrom(const NewMessageNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool NewMessageNotify::IsInitialized() const {

  return true;
}

void NewMessageNotify::SetInitialized() {

  return;
}

void NewMessageNotify::Swap(NewMessageNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata NewMessageNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewMessageNotify_descriptor_;
  metadata.reflection = NewMessageNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignConfig::kIdFieldNumber;
const int SignConfig::kTypeFieldNumber;
const int SignConfig::kSignFieldNumber;
#endif  // !_MSC_VER

SignConfig::SignConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignConfig::InitAsDefaultInstance() {
}

SignConfig::SignConfig(const SignConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignConfig::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignConfig::~SignConfig() {
  SharedDtor();
}

void SignConfig::SharedDtor() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (this != default_instance_) {
  }
}

void SignConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignConfig_descriptor_;
}

const SignConfig& SignConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

SignConfig* SignConfig::default_instance_ = NULL;

SignConfig* SignConfig::New() const {
  return new SignConfig;
}

void SignConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::kEmptyString) {
        sign_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SignConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // required string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sign;
        break;
      }

      // required string sign = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SignConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }

  // required string sign = 3;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sign(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // required string sign = 3;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sign(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required string sign = 3;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SignConfig::MergeFrom(const SignConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SignConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SignConfig::CopyFrom(const SignConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SignConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SignConfig::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  return;
}

void SignConfig::Swap(SignConfig* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(sign_, other->sign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SignConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignConfig_descriptor_;
  metadata.reflection = SignConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateSign::kIdFieldNumber;
#endif  // !_MSC_VER

UpdateSign::UpdateSign()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateSign::InitAsDefaultInstance() {
}

UpdateSign::UpdateSign(const UpdateSign& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateSign::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateSign::~UpdateSign() {
  SharedDtor();
}

void UpdateSign::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateSign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateSign::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateSign_descriptor_;
}

const UpdateSign& UpdateSign::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

UpdateSign* UpdateSign::default_instance_ = NULL;

UpdateSign* UpdateSign::New() const {
  return new UpdateSign;
}

void UpdateSign::Clear() {
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool UpdateSign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void UpdateSign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateSign::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateSign::ByteSize() const {
  int total_size = 0;

  // repeated int32 id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateSign::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateSign* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateSign*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void UpdateSign::MergeFrom(const UpdateSign& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void UpdateSign::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void UpdateSign::CopyFrom(const UpdateSign& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool UpdateSign::IsInitialized() const {

  return true;
}

void UpdateSign::SetInitialized() {

  return;
}

void UpdateSign::Swap(UpdateSign* other) {
  if (other != this) {
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata UpdateSign::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateSign_descriptor_;
  metadata.reflection = UpdateSign_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetMessageBoard::kListFieldNumber;
#endif  // !_MSC_VER

GetMessageBoard::GetMessageBoard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetMessageBoard::InitAsDefaultInstance() {
}

GetMessageBoard::GetMessageBoard(const GetMessageBoard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetMessageBoard::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMessageBoard::~GetMessageBoard() {
  SharedDtor();
}

void GetMessageBoard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetMessageBoard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMessageBoard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMessageBoard_descriptor_;
}

const GetMessageBoard& GetMessageBoard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

GetMessageBoard* GetMessageBoard::default_instance_ = NULL;

GetMessageBoard* GetMessageBoard::New() const {
  return new GetMessageBoard;
}

void GetMessageBoard::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GetMessageBoard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.MessageBoard list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GetMessageBoard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.MessageBoard list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetMessageBoard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.MessageBoard list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetMessageBoard::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.MessageBoard list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMessageBoard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMessageBoard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetMessageBoard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GetMessageBoard::MergeFrom(const GetMessageBoard& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GetMessageBoard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GetMessageBoard::CopyFrom(const GetMessageBoard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GetMessageBoard::IsInitialized() const {

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void GetMessageBoard::SetInitialized() {

  for (int i = 0; i < list_size(); i++) {
    this->mutable_list(i)->SetInitialized();
  }
  return;
}

void GetMessageBoard::Swap(GetMessageBoard* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GetMessageBoard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMessageBoard_descriptor_;
  metadata.reflection = GetMessageBoard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddMessageBoard::kAddmsgFieldNumber;
const int AddMessageBoard::kSelfFieldNumber;
#endif  // !_MSC_VER

AddMessageBoard::AddMessageBoard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddMessageBoard::InitAsDefaultInstance() {
  addmsg_ = const_cast< ::Packet::MessageBoard*>(&::Packet::MessageBoard::default_instance());
}

AddMessageBoard::AddMessageBoard(const AddMessageBoard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddMessageBoard::SharedCtor() {
  _cached_size_ = 0;
  addmsg_ = NULL;
  self_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddMessageBoard::~AddMessageBoard() {
  SharedDtor();
}

void AddMessageBoard::SharedDtor() {
  if (this != default_instance_) {
    delete addmsg_;
  }
}

void AddMessageBoard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddMessageBoard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddMessageBoard_descriptor_;
}

const AddMessageBoard& AddMessageBoard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendMail_2eproto();
  return *default_instance_;
}

AddMessageBoard* AddMessageBoard::default_instance_ = NULL;

AddMessageBoard* AddMessageBoard::New() const {
  return new AddMessageBoard;
}

void AddMessageBoard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_addmsg()) {
      if (addmsg_ != NULL) addmsg_->::Packet::MessageBoard::Clear();
    }
    self_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool AddMessageBoard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.MessageBoard addmsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_addmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_self;
        break;
      }

      // required bool self = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &self_)));
          set_has_self();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void AddMessageBoard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.MessageBoard addmsg = 1;
  if (has_addmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->addmsg(), output);
  }

  // required bool self = 2;
  if (has_self()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->self(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddMessageBoard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.MessageBoard addmsg = 1;
  if (has_addmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->addmsg(), target);
  }

  // required bool self = 2;
  if (has_self()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->self(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddMessageBoard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.MessageBoard addmsg = 1;
    if (has_addmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->addmsg());
    }

    // required bool self = 2;
    if (has_self()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddMessageBoard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddMessageBoard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddMessageBoard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void AddMessageBoard::MergeFrom(const AddMessageBoard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addmsg()) {
      mutable_addmsg()->::Packet::MessageBoard::MergeFrom(from.addmsg());
    }
    if (from.has_self()) {
      set_self(from.self());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void AddMessageBoard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void AddMessageBoard::CopyFrom(const AddMessageBoard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool AddMessageBoard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_addmsg()) {
    if (!this->addmsg().IsInitialized()) return false;
  }
  return true;
}

void AddMessageBoard::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  if (has_addmsg()) {
    this->mutable_addmsg()->SetInitialized();
  }
  return;
}

void AddMessageBoard::Swap(AddMessageBoard* other) {
  if (other != this) {
    std::swap(addmsg_, other->addmsg_);
    std::swap(self_, other->self_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata AddMessageBoard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddMessageBoard_descriptor_;
  metadata.reflection = AddMessageBoard_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

// @@protoc_insertion_point(global_scope)
