// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneObject.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SceneObject.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Packet {

namespace {

const ::google::protobuf::Descriptor* SceneLayout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneLayout_reflection_ = NULL;
const ::google::protobuf::Descriptor* NpcStaticConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NpcStaticConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* NpcDynamicConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NpcDynamicConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* PositionGroupConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PositionGroupConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* NpcInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NpcInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerList_reflection_ = NULL;
const ::google::protobuf::Descriptor* NpcList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NpcList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerNpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerNpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerNpcList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerNpcList_reflection_ = NULL;
const ::google::protobuf::Descriptor* NpcSession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NpcSession_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerNpcSession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerNpcSession_reflection_ = NULL;
const ::google::protobuf::Descriptor* NpcSessionReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NpcSessionReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* NoNpcSession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NoNpcSession_reflection_ = NULL;
const ::google::protobuf::Descriptor* MountConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MountConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SceneObject_2eproto() {
  protobuf_AddDesc_SceneObject_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SceneObject.proto");
  GOOGLE_CHECK(file != NULL);
  SceneLayout_descriptor_ = file->message_type(0);
  static const int SceneLayout_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneLayout, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneLayout, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneLayout, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneLayout, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneLayout, group_index_),
  };
  SceneLayout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SceneLayout_descriptor_,
      SceneLayout::default_instance_,
      SceneLayout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneLayout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneLayout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SceneLayout));
  NpcStaticConfig_descriptor_ = file->message_type(1);
  static const int NpcStaticConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcStaticConfig, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcStaticConfig, npc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcStaticConfig, pos_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcStaticConfig, talk_option_),
  };
  NpcStaticConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NpcStaticConfig_descriptor_,
      NpcStaticConfig::default_instance_,
      NpcStaticConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcStaticConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcStaticConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NpcStaticConfig));
  NpcDynamicConfig_descriptor_ = file->message_type(2);
  static const int NpcDynamicConfig_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDynamicConfig, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDynamicConfig, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDynamicConfig, npc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDynamicConfig, monster_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDynamicConfig, talk_option_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDynamicConfig, npc_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDynamicConfig, pos_id_),
  };
  NpcDynamicConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NpcDynamicConfig_descriptor_,
      NpcDynamicConfig::default_instance_,
      NpcDynamicConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDynamicConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDynamicConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NpcDynamicConfig));
  PositionGroupConfig_descriptor_ = file->message_type(3);
  static const int PositionGroupConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionGroupConfig, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionGroupConfig, pos_id_),
  };
  PositionGroupConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PositionGroupConfig_descriptor_,
      PositionGroupConfig::default_instance_,
      PositionGroupConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionGroupConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionGroupConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PositionGroupConfig));
  NpcInfo_descriptor_ = file->message_type(4);
  static const int NpcInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcInfo, pos_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcInfo, series_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcInfo, lifetime_),
  };
  NpcInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NpcInfo_descriptor_,
      NpcInfo::default_instance_,
      NpcInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NpcInfo));
  PlayerList_descriptor_ = file->message_type(5);
  static const int PlayerList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerList, player_info_),
  };
  PlayerList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerList_descriptor_,
      PlayerList::default_instance_,
      PlayerList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerList));
  NpcList_descriptor_ = file->message_type(6);
  static const int NpcList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcList, npc_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcList, option_),
  };
  NpcList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NpcList_descriptor_,
      NpcList::default_instance_,
      NpcList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NpcList));
  PlayerNpc_descriptor_ = file->message_type(7);
  static const int PlayerNpc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerNpc, target_),
  };
  PlayerNpc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerNpc_descriptor_,
      PlayerNpc::default_instance_,
      PlayerNpc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerNpc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerNpc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerNpc));
  PlayerNpcList_descriptor_ = file->message_type(8);
  static const int PlayerNpcList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerNpcList, player_npc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerNpcList, option_),
  };
  PlayerNpcList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerNpcList_descriptor_,
      PlayerNpcList::default_instance_,
      PlayerNpcList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerNpcList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerNpcList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerNpcList));
  NpcSession_descriptor_ = file->message_type(9);
  static const int NpcSession_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcSession, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcSession, series_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcSession, mission_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcSession, option_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcSession, option_index_),
  };
  NpcSession_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NpcSession_descriptor_,
      NpcSession::default_instance_,
      NpcSession_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcSession, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcSession, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NpcSession));
  PlayerNpcSession_descriptor_ = file->message_type(10);
  static const int PlayerNpcSession_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerNpcSession, target_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerNpcSession, option_index_),
  };
  PlayerNpcSession_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerNpcSession_descriptor_,
      PlayerNpcSession::default_instance_,
      PlayerNpcSession_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerNpcSession, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerNpcSession, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerNpcSession));
  NpcSessionReply_descriptor_ = file->message_type(11);
  static const int NpcSessionReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcSessionReply, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcSessionReply, msg_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcSessionReply, string_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcSessionReply, int_param_),
  };
  NpcSessionReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NpcSessionReply_descriptor_,
      NpcSessionReply::default_instance_,
      NpcSessionReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcSessionReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcSessionReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NpcSessionReply));
  NoNpcSession_descriptor_ = file->message_type(12);
  static const int NoNpcSession_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoNpcSession, string_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoNpcSession, long_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoNpcSession, int_param_),
  };
  NoNpcSession_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NoNpcSession_descriptor_,
      NoNpcSession::default_instance_,
      NoNpcSession_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoNpcSession, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoNpcSession, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NoNpcSession));
  MountConfig_descriptor_ = file->message_type(13);
  static const int MountConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountConfig, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountConfig, impact_id_),
  };
  MountConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MountConfig_descriptor_,
      MountConfig::default_instance_,
      MountConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MountConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SceneObject_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SceneLayout_descriptor_, &SceneLayout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NpcStaticConfig_descriptor_, &NpcStaticConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NpcDynamicConfig_descriptor_, &NpcDynamicConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PositionGroupConfig_descriptor_, &PositionGroupConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NpcInfo_descriptor_, &NpcInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerList_descriptor_, &PlayerList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NpcList_descriptor_, &NpcList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerNpc_descriptor_, &PlayerNpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerNpcList_descriptor_, &PlayerNpcList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NpcSession_descriptor_, &NpcSession::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerNpcSession_descriptor_, &PlayerNpcSession::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NpcSessionReply_descriptor_, &NpcSessionReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NoNpcSession_descriptor_, &NoNpcSession::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MountConfig_descriptor_, &MountConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SceneObject_2eproto() {
  delete SceneLayout::default_instance_;
  delete SceneLayout_reflection_;
  delete NpcStaticConfig::default_instance_;
  delete NpcStaticConfig_reflection_;
  delete NpcDynamicConfig::default_instance_;
  delete NpcDynamicConfig_reflection_;
  delete PositionGroupConfig::default_instance_;
  delete PositionGroupConfig_reflection_;
  delete NpcInfo::default_instance_;
  delete NpcInfo_reflection_;
  delete PlayerList::default_instance_;
  delete PlayerList_reflection_;
  delete NpcList::default_instance_;
  delete NpcList_reflection_;
  delete PlayerNpc::default_instance_;
  delete PlayerNpc_reflection_;
  delete PlayerNpcList::default_instance_;
  delete PlayerNpcList_reflection_;
  delete NpcSession::default_instance_;
  delete NpcSession_reflection_;
  delete PlayerNpcSession::default_instance_;
  delete PlayerNpcSession_reflection_;
  delete NpcSessionReply::default_instance_;
  delete NpcSessionReply_reflection_;
  delete NoNpcSession::default_instance_;
  delete NoNpcSession_reflection_;
  delete MountConfig::default_instance_;
  delete MountConfig_reflection_;
}

void protobuf_AddDesc_SceneObject_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Packet::protobuf_AddDesc_AllPacketEnum_2eproto();
  ::Packet::protobuf_AddDesc_PlayerBasicInfo_2eproto();
  ::Packet::protobuf_AddDesc_Base_2eproto();
  ::Config::protobuf_AddDesc_MonsterConfig_2eproto();
  ::Packet::protobuf_AddDesc_MissionPacket_2eproto();
  ::Packet::protobuf_AddDesc_ProtoBufOption_2eproto();
  ::DB::protobuf_AddDesc_TrialFieldDB_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021SceneObject.proto\022\006Packet\032\023AllPacketEn"
    "um.proto\032\025PlayerBasicInfo.proto\032\nBase.pr"
    "oto\032\023MonsterConfig.proto\032\023MissionPacket."
    "proto\032\024ProtoBufOption.proto\032\022TrialFieldD"
    "B.proto\"s\n\013SceneLayout\022\n\n\002id\030\001 \002(\005\022\020\n\010sc"
    "ene_id\030\002 \002(\005\022\"\n\010position\030\003 \002(\0132\020.Packet."
    "Position\022\r\n\005angle\030\004 \002(\002\022\023\n\013group_index\030\005"
    " \002(\005\"[\n\017NpcStaticConfig\022\r\n\005index\030\001 \002(\005\022\016"
    "\n\006npc_id\030\002 \002(\005\022\016\n\006pos_id\030\003 \002(\005\022\031\n\013talk_o"
    "ption\030\004 \003(\tB\004\300\363\030\005\"\234\001\n\020NpcDynamicConfig\022\r"
    "\n\005index\030\001 \002(\005\022\020\n\010group_id\030\002 \002(\005\022\016\n\006npc_i"
    "d\030\003 \002(\005\022\033\n\rmonster_group\030\004 \003(\005B\004\300\363\030\n\022\031\n\013"
    "talk_option\030\005 \003(\tB\004\300\363\030\005\022\017\n\007npc_tag\030\006 \002(\t"
    "\022\016\n\006pos_id\030\007 \002(\005\"7\n\023PositionGroupConfig\022"
    "\020\n\010group_id\030\001 \002(\005\022\016\n\006pos_id\030\002 \002(\005\"M\n\007Npc"
    "Info\022\r\n\005index\030\001 \002(\005\022\016\n\006pos_id\030\002 \002(\005\022\021\n\ts"
    "eries_id\030\003 \002(\005\022\020\n\010lifetime\030\004 \002(\005\":\n\nPlay"
    "erList\022,\n\013player_info\030\001 \003(\0132\027.Packet.Pla"
    "yerBasicInfo\"O\n\007NpcList\022!\n\010npc_info\030\001 \003("
    "\0132\017.Packet.NpcInfo\022!\n\006option\030\002 \002(\0162\021.Pac"
    "ket.NpcOption\",\n\tPlayerNpc\022\037\n\006target\030\001 \002"
    "(\0132\017.DB.TrialTarget\"Y\n\rPlayerNpcList\022%\n\n"
    "player_npc\030\001 \003(\0132\021.Packet.PlayerNpc\022!\n\006o"
    "ption\030\002 \002(\0162\021.Packet.NpcOption\"\177\n\nNpcSes"
    "sion\022\r\n\005index\030\001 \002(\005\022\021\n\tseries_id\030\002 \001(\005\022\022"
    "\n\nmission_id\030\003 \001(\005\022%\n\006option\030\004 \001(\0162\025.Pac"
    "ket.MissionOption\022\024\n\014option_index\030\005 \001(\005\""
    "=\n\020PlayerNpcSession\022\023\n\013target_guid\030\001 \002(\006"
    "\022\024\n\014option_index\030\002 \001(\005\"[\n\017NpcSessionRepl"
    "y\022\r\n\005index\030\001 \002(\005\022\020\n\010msg_name\030\002 \002(\t\022\024\n\014st"
    "ring_param\030\003 \001(\t\022\021\n\tint_param\030\004 \001(\005\"K\n\014N"
    "oNpcSession\022\024\n\014string_param\030\001 \002(\t\022\022\n\nlon"
    "g_param\030\002 \002(\006\022\021\n\tint_param\030\003 \002(\005\";\n\013Moun"
    "tConfig\022\n\n\002id\030\001 \002(\005\022\r\n\005speed\030\002 \002(\005\022\021\n\tim"
    "pact_id\030\003 \002(\005", 1373);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SceneObject.proto", &protobuf_RegisterTypes);
  SceneLayout::default_instance_ = new SceneLayout();
  NpcStaticConfig::default_instance_ = new NpcStaticConfig();
  NpcDynamicConfig::default_instance_ = new NpcDynamicConfig();
  PositionGroupConfig::default_instance_ = new PositionGroupConfig();
  NpcInfo::default_instance_ = new NpcInfo();
  PlayerList::default_instance_ = new PlayerList();
  NpcList::default_instance_ = new NpcList();
  PlayerNpc::default_instance_ = new PlayerNpc();
  PlayerNpcList::default_instance_ = new PlayerNpcList();
  NpcSession::default_instance_ = new NpcSession();
  PlayerNpcSession::default_instance_ = new PlayerNpcSession();
  NpcSessionReply::default_instance_ = new NpcSessionReply();
  NoNpcSession::default_instance_ = new NoNpcSession();
  MountConfig::default_instance_ = new MountConfig();
  SceneLayout::default_instance_->InitAsDefaultInstance();
  NpcStaticConfig::default_instance_->InitAsDefaultInstance();
  NpcDynamicConfig::default_instance_->InitAsDefaultInstance();
  PositionGroupConfig::default_instance_->InitAsDefaultInstance();
  NpcInfo::default_instance_->InitAsDefaultInstance();
  PlayerList::default_instance_->InitAsDefaultInstance();
  NpcList::default_instance_->InitAsDefaultInstance();
  PlayerNpc::default_instance_->InitAsDefaultInstance();
  PlayerNpcList::default_instance_->InitAsDefaultInstance();
  NpcSession::default_instance_->InitAsDefaultInstance();
  PlayerNpcSession::default_instance_->InitAsDefaultInstance();
  NpcSessionReply::default_instance_->InitAsDefaultInstance();
  NoNpcSession::default_instance_->InitAsDefaultInstance();
  MountConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SceneObject_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SceneObject_2eproto {
  StaticDescriptorInitializer_SceneObject_2eproto() {
    protobuf_AddDesc_SceneObject_2eproto();
  }
} static_descriptor_initializer_SceneObject_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SceneLayout::kIdFieldNumber;
const int SceneLayout::kSceneIdFieldNumber;
const int SceneLayout::kPositionFieldNumber;
const int SceneLayout::kAngleFieldNumber;
const int SceneLayout::kGroupIndexFieldNumber;
#endif  // !_MSC_VER

SceneLayout::SceneLayout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SceneLayout::InitAsDefaultInstance() {
  position_ = const_cast< ::Packet::Position*>(&::Packet::Position::default_instance());
}

SceneLayout::SceneLayout(const SceneLayout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SceneLayout::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  scene_id_ = 0;
  position_ = NULL;
  angle_ = 0;
  group_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneLayout::~SceneLayout() {
  SharedDtor();
}

void SceneLayout::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

void SceneLayout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneLayout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneLayout_descriptor_;
}

const SceneLayout& SceneLayout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneObject_2eproto();
  return *default_instance_;
}

SceneLayout* SceneLayout::default_instance_ = NULL;

SceneLayout* SceneLayout::New() const {
  return new SceneLayout;
}

void SceneLayout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    scene_id_ = 0;
    if (has_position()) {
      if (position_ != NULL) position_->::Packet::Position::Clear();
    }
    angle_ = 0;
    group_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool SceneLayout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_id;
        break;
      }

      // required int32 scene_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_position;
        break;
      }

      // required .Packet.Position position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_angle;
        break;
      }

      // required float angle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_group_index;
        break;
      }

      // required int32 group_index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_index_)));
          set_has_group_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void SceneLayout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 scene_id = 2;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->scene_id(), output);
  }

  // required .Packet.Position position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->position(), output);
  }

  // required float angle = 4;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->angle(), output);
  }

  // required int32 group_index = 5;
  if (has_group_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->group_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SceneLayout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 scene_id = 2;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->scene_id(), target);
  }

  // required .Packet.Position position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->position(), target);
  }

  // required float angle = 4;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->angle(), target);
  }

  // required int32 group_index = 5;
  if (has_group_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->group_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SceneLayout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 scene_id = 2;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }

    // required .Packet.Position position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // required float angle = 4;
    if (has_angle()) {
      total_size += 1 + 4;
    }

    // required int32 group_index = 5;
    if (has_group_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneLayout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SceneLayout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SceneLayout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void SceneLayout::MergeFrom(const SceneLayout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_position()) {
      mutable_position()->::Packet::Position::MergeFrom(from.position());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_group_index()) {
      set_group_index(from.group_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void SceneLayout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void SceneLayout::CopyFrom(const SceneLayout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool SceneLayout::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void SceneLayout::SetInitialized() {
  _has_bits_[0] |= 0x0000001f;

  if (has_position()) {
    this->mutable_position()->SetInitialized();
  }
  return;
}

void SceneLayout::Swap(SceneLayout* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(position_, other->position_);
    std::swap(angle_, other->angle_);
    std::swap(group_index_, other->group_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata SceneLayout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneLayout_descriptor_;
  metadata.reflection = SceneLayout_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NpcStaticConfig::kIndexFieldNumber;
const int NpcStaticConfig::kNpcIdFieldNumber;
const int NpcStaticConfig::kPosIdFieldNumber;
const int NpcStaticConfig::kTalkOptionFieldNumber;
#endif  // !_MSC_VER

NpcStaticConfig::NpcStaticConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NpcStaticConfig::InitAsDefaultInstance() {
}

NpcStaticConfig::NpcStaticConfig(const NpcStaticConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NpcStaticConfig::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  npc_id_ = 0;
  pos_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NpcStaticConfig::~NpcStaticConfig() {
  SharedDtor();
}

void NpcStaticConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NpcStaticConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NpcStaticConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NpcStaticConfig_descriptor_;
}

const NpcStaticConfig& NpcStaticConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneObject_2eproto();
  return *default_instance_;
}

NpcStaticConfig* NpcStaticConfig::default_instance_ = NULL;

NpcStaticConfig* NpcStaticConfig::New() const {
  return new NpcStaticConfig;
}

void NpcStaticConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    npc_id_ = 0;
    pos_id_ = 0;
  }
  talk_option_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool NpcStaticConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_npc_id;
        break;
      }

      // required int32 npc_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_id_)));
          set_has_npc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos_id;
        break;
      }

      // required int32 pos_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_id_)));
          set_has_pos_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_talk_option;
        break;
      }

      // repeated string talk_option = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_talk_option:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_talk_option()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->talk_option(this->talk_option_size() - 1).data(),
            this->talk_option(this->talk_option_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_talk_option;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void NpcStaticConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required int32 npc_id = 2;
  if (has_npc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->npc_id(), output);
  }

  // required int32 pos_id = 3;
  if (has_pos_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos_id(), output);
  }

  // repeated string talk_option = 4;
  for (int i = 0; i < this->talk_option_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->talk_option(i).data(), this->talk_option(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->talk_option(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NpcStaticConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required int32 npc_id = 2;
  if (has_npc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->npc_id(), target);
  }

  // required int32 pos_id = 3;
  if (has_pos_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos_id(), target);
  }

  // repeated string talk_option = 4;
  for (int i = 0; i < this->talk_option_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->talk_option(i).data(), this->talk_option(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->talk_option(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NpcStaticConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 npc_id = 2;
    if (has_npc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_id());
    }

    // required int32 pos_id = 3;
    if (has_pos_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_id());
    }

  }
  // repeated string talk_option = 4;
  total_size += 1 * this->talk_option_size();
  for (int i = 0; i < this->talk_option_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->talk_option(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NpcStaticConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NpcStaticConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NpcStaticConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void NpcStaticConfig::MergeFrom(const NpcStaticConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  talk_option_.MergeFrom(from.talk_option_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_npc_id()) {
      set_npc_id(from.npc_id());
    }
    if (from.has_pos_id()) {
      set_pos_id(from.pos_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void NpcStaticConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void NpcStaticConfig::CopyFrom(const NpcStaticConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool NpcStaticConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NpcStaticConfig::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  return;
}

void NpcStaticConfig::Swap(NpcStaticConfig* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(npc_id_, other->npc_id_);
    std::swap(pos_id_, other->pos_id_);
    talk_option_.Swap(&other->talk_option_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata NpcStaticConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NpcStaticConfig_descriptor_;
  metadata.reflection = NpcStaticConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NpcDynamicConfig::kIndexFieldNumber;
const int NpcDynamicConfig::kGroupIdFieldNumber;
const int NpcDynamicConfig::kNpcIdFieldNumber;
const int NpcDynamicConfig::kMonsterGroupFieldNumber;
const int NpcDynamicConfig::kTalkOptionFieldNumber;
const int NpcDynamicConfig::kNpcTagFieldNumber;
const int NpcDynamicConfig::kPosIdFieldNumber;
#endif  // !_MSC_VER

NpcDynamicConfig::NpcDynamicConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NpcDynamicConfig::InitAsDefaultInstance() {
}

NpcDynamicConfig::NpcDynamicConfig(const NpcDynamicConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NpcDynamicConfig::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  group_id_ = 0;
  npc_id_ = 0;
  npc_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pos_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NpcDynamicConfig::~NpcDynamicConfig() {
  SharedDtor();
}

void NpcDynamicConfig::SharedDtor() {
  if (npc_tag_ != &::google::protobuf::internal::kEmptyString) {
    delete npc_tag_;
  }
  if (this != default_instance_) {
  }
}

void NpcDynamicConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NpcDynamicConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NpcDynamicConfig_descriptor_;
}

const NpcDynamicConfig& NpcDynamicConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneObject_2eproto();
  return *default_instance_;
}

NpcDynamicConfig* NpcDynamicConfig::default_instance_ = NULL;

NpcDynamicConfig* NpcDynamicConfig::New() const {
  return new NpcDynamicConfig;
}

void NpcDynamicConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    group_id_ = 0;
    npc_id_ = 0;
    if (has_npc_tag()) {
      if (npc_tag_ != &::google::protobuf::internal::kEmptyString) {
        npc_tag_->clear();
      }
    }
    pos_id_ = 0;
  }
  monster_group_.Clear();
  talk_option_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool NpcDynamicConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required int32 group_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_npc_id;
        break;
      }

      // required int32 npc_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_npc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npc_id_)));
          set_has_npc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_monster_group;
        break;
      }

      // repeated int32 monster_group = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_monster_group())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_monster_group())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_monster_group;
        if (input->ExpectTag(42)) goto parse_talk_option;
        break;
      }

      // repeated string talk_option = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_talk_option:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_talk_option()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->talk_option(this->talk_option_size() - 1).data(),
            this->talk_option(this->talk_option_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_talk_option;
        if (input->ExpectTag(50)) goto parse_npc_tag;
        break;
      }

      // required string npc_tag = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_npc_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_npc_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->npc_tag().data(), this->npc_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pos_id;
        break;
      }

      // required int32 pos_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_id_)));
          set_has_pos_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void NpcDynamicConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required int32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->group_id(), output);
  }

  // required int32 npc_id = 3;
  if (has_npc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->npc_id(), output);
  }

  // repeated int32 monster_group = 4;
  for (int i = 0; i < this->monster_group_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->monster_group(i), output);
  }

  // repeated string talk_option = 5;
  for (int i = 0; i < this->talk_option_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->talk_option(i).data(), this->talk_option(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->talk_option(i), output);
  }

  // required string npc_tag = 6;
  if (has_npc_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->npc_tag().data(), this->npc_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->npc_tag(), output);
  }

  // required int32 pos_id = 7;
  if (has_pos_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->pos_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NpcDynamicConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required int32 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->group_id(), target);
  }

  // required int32 npc_id = 3;
  if (has_npc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->npc_id(), target);
  }

  // repeated int32 monster_group = 4;
  for (int i = 0; i < this->monster_group_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->monster_group(i), target);
  }

  // repeated string talk_option = 5;
  for (int i = 0; i < this->talk_option_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->talk_option(i).data(), this->talk_option(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->talk_option(i), target);
  }

  // required string npc_tag = 6;
  if (has_npc_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->npc_tag().data(), this->npc_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->npc_tag(), target);
  }

  // required int32 pos_id = 7;
  if (has_pos_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->pos_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NpcDynamicConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_id());
    }

    // required int32 npc_id = 3;
    if (has_npc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npc_id());
    }

    // required string npc_tag = 6;
    if (has_npc_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->npc_tag());
    }

    // required int32 pos_id = 7;
    if (has_pos_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_id());
    }

  }
  // repeated int32 monster_group = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->monster_group_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->monster_group(i));
    }
    total_size += 1 * this->monster_group_size() + data_size;
  }

  // repeated string talk_option = 5;
  total_size += 1 * this->talk_option_size();
  for (int i = 0; i < this->talk_option_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->talk_option(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NpcDynamicConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NpcDynamicConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NpcDynamicConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void NpcDynamicConfig::MergeFrom(const NpcDynamicConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  monster_group_.MergeFrom(from.monster_group_);
  talk_option_.MergeFrom(from.talk_option_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_npc_id()) {
      set_npc_id(from.npc_id());
    }
    if (from.has_npc_tag()) {
      set_npc_tag(from.npc_tag());
    }
    if (from.has_pos_id()) {
      set_pos_id(from.pos_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void NpcDynamicConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void NpcDynamicConfig::CopyFrom(const NpcDynamicConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool NpcDynamicConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000067) != 0x00000067) return false;

  return true;
}

void NpcDynamicConfig::SetInitialized() {
  _has_bits_[0] |= 0x00000067;

  return;
}

void NpcDynamicConfig::Swap(NpcDynamicConfig* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(group_id_, other->group_id_);
    std::swap(npc_id_, other->npc_id_);
    monster_group_.Swap(&other->monster_group_);
    talk_option_.Swap(&other->talk_option_);
    std::swap(npc_tag_, other->npc_tag_);
    std::swap(pos_id_, other->pos_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata NpcDynamicConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NpcDynamicConfig_descriptor_;
  metadata.reflection = NpcDynamicConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PositionGroupConfig::kGroupIdFieldNumber;
const int PositionGroupConfig::kPosIdFieldNumber;
#endif  // !_MSC_VER

PositionGroupConfig::PositionGroupConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PositionGroupConfig::InitAsDefaultInstance() {
}

PositionGroupConfig::PositionGroupConfig(const PositionGroupConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PositionGroupConfig::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0;
  pos_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PositionGroupConfig::~PositionGroupConfig() {
  SharedDtor();
}

void PositionGroupConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PositionGroupConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PositionGroupConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PositionGroupConfig_descriptor_;
}

const PositionGroupConfig& PositionGroupConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneObject_2eproto();
  return *default_instance_;
}

PositionGroupConfig* PositionGroupConfig::default_instance_ = NULL;

PositionGroupConfig* PositionGroupConfig::New() const {
  return new PositionGroupConfig;
}

void PositionGroupConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_id_ = 0;
    pos_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PositionGroupConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 group_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos_id;
        break;
      }

      // required int32 pos_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_id_)));
          set_has_pos_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PositionGroupConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->group_id(), output);
  }

  // required int32 pos_id = 2;
  if (has_pos_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PositionGroupConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->group_id(), target);
  }

  // required int32 pos_id = 2;
  if (has_pos_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PositionGroupConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_id());
    }

    // required int32 pos_id = 2;
    if (has_pos_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PositionGroupConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PositionGroupConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PositionGroupConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PositionGroupConfig::MergeFrom(const PositionGroupConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_pos_id()) {
      set_pos_id(from.pos_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PositionGroupConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PositionGroupConfig::CopyFrom(const PositionGroupConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PositionGroupConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PositionGroupConfig::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void PositionGroupConfig::Swap(PositionGroupConfig* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(pos_id_, other->pos_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PositionGroupConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PositionGroupConfig_descriptor_;
  metadata.reflection = PositionGroupConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NpcInfo::kIndexFieldNumber;
const int NpcInfo::kPosIdFieldNumber;
const int NpcInfo::kSeriesIdFieldNumber;
const int NpcInfo::kLifetimeFieldNumber;
#endif  // !_MSC_VER

NpcInfo::NpcInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NpcInfo::InitAsDefaultInstance() {
}

NpcInfo::NpcInfo(const NpcInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NpcInfo::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  pos_id_ = 0;
  series_id_ = 0;
  lifetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NpcInfo::~NpcInfo() {
  SharedDtor();
}

void NpcInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NpcInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NpcInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NpcInfo_descriptor_;
}

const NpcInfo& NpcInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneObject_2eproto();
  return *default_instance_;
}

NpcInfo* NpcInfo::default_instance_ = NULL;

NpcInfo* NpcInfo::New() const {
  return new NpcInfo;
}

void NpcInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    pos_id_ = 0;
    series_id_ = 0;
    lifetime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool NpcInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos_id;
        break;
      }

      // required int32 pos_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_id_)));
          set_has_pos_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_series_id;
        break;
      }

      // required int32 series_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_series_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &series_id_)));
          set_has_series_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lifetime;
        break;
      }

      // required int32 lifetime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lifetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lifetime_)));
          set_has_lifetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void NpcInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required int32 pos_id = 2;
  if (has_pos_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos_id(), output);
  }

  // required int32 series_id = 3;
  if (has_series_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->series_id(), output);
  }

  // required int32 lifetime = 4;
  if (has_lifetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lifetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NpcInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required int32 pos_id = 2;
  if (has_pos_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos_id(), target);
  }

  // required int32 series_id = 3;
  if (has_series_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->series_id(), target);
  }

  // required int32 lifetime = 4;
  if (has_lifetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lifetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NpcInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 pos_id = 2;
    if (has_pos_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_id());
    }

    // required int32 series_id = 3;
    if (has_series_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->series_id());
    }

    // required int32 lifetime = 4;
    if (has_lifetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lifetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NpcInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NpcInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NpcInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void NpcInfo::MergeFrom(const NpcInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_pos_id()) {
      set_pos_id(from.pos_id());
    }
    if (from.has_series_id()) {
      set_series_id(from.series_id());
    }
    if (from.has_lifetime()) {
      set_lifetime(from.lifetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void NpcInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void NpcInfo::CopyFrom(const NpcInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool NpcInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void NpcInfo::SetInitialized() {
  _has_bits_[0] |= 0x0000000f;

  return;
}

void NpcInfo::Swap(NpcInfo* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(pos_id_, other->pos_id_);
    std::swap(series_id_, other->series_id_);
    std::swap(lifetime_, other->lifetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata NpcInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NpcInfo_descriptor_;
  metadata.reflection = NpcInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerList::kPlayerInfoFieldNumber;
#endif  // !_MSC_VER

PlayerList::PlayerList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerList::InitAsDefaultInstance() {
}

PlayerList::PlayerList(const PlayerList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerList::~PlayerList() {
  SharedDtor();
}

void PlayerList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerList_descriptor_;
}

const PlayerList& PlayerList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneObject_2eproto();
  return *default_instance_;
}

PlayerList* PlayerList::default_instance_ = NULL;

PlayerList* PlayerList::New() const {
  return new PlayerList;
}

void PlayerList::Clear() {
  player_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.PlayerBasicInfo player_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_player_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.PlayerBasicInfo player_info = 1;
  for (int i = 0; i < this->player_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.PlayerBasicInfo player_info = 1;
  for (int i = 0; i < this->player_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerList::ByteSize() const {
  int total_size = 0;

  // repeated .Packet.PlayerBasicInfo player_info = 1;
  total_size += 1 * this->player_info_size();
  for (int i = 0; i < this->player_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerList::MergeFrom(const PlayerList& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_info_.MergeFrom(from.player_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerList::CopyFrom(const PlayerList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerList::IsInitialized() const {

  for (int i = 0; i < player_info_size(); i++) {
    if (!this->player_info(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerList::SetInitialized() {

  for (int i = 0; i < player_info_size(); i++) {
    this->mutable_player_info(i)->SetInitialized();
  }
  return;
}

void PlayerList::Swap(PlayerList* other) {
  if (other != this) {
    player_info_.Swap(&other->player_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerList_descriptor_;
  metadata.reflection = PlayerList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NpcList::kNpcInfoFieldNumber;
const int NpcList::kOptionFieldNumber;
#endif  // !_MSC_VER

NpcList::NpcList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NpcList::InitAsDefaultInstance() {
}

NpcList::NpcList(const NpcList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NpcList::SharedCtor() {
  _cached_size_ = 0;
  option_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NpcList::~NpcList() {
  SharedDtor();
}

void NpcList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NpcList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NpcList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NpcList_descriptor_;
}

const NpcList& NpcList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneObject_2eproto();
  return *default_instance_;
}

NpcList* NpcList::default_instance_ = NULL;

NpcList* NpcList::New() const {
  return new NpcList;
}

void NpcList::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    option_ = 0;
  }
  npc_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool NpcList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.NpcInfo npc_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_npc_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_npc_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_npc_info;
        if (input->ExpectTag(16)) goto parse_option;
        break;
      }

      // required .Packet.NpcOption option = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_option:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::NpcOption_IsValid(value)) {
            set_option(static_cast< ::Packet::NpcOption >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void NpcList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.NpcInfo npc_info = 1;
  for (int i = 0; i < this->npc_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->npc_info(i), output);
  }

  // required .Packet.NpcOption option = 2;
  if (has_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->option(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NpcList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.NpcInfo npc_info = 1;
  for (int i = 0; i < this->npc_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->npc_info(i), target);
  }

  // required .Packet.NpcOption option = 2;
  if (has_option()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->option(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NpcList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .Packet.NpcOption option = 2;
    if (has_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->option());
    }

  }
  // repeated .Packet.NpcInfo npc_info = 1;
  total_size += 1 * this->npc_info_size();
  for (int i = 0; i < this->npc_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->npc_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NpcList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NpcList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NpcList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void NpcList::MergeFrom(const NpcList& from) {
  GOOGLE_CHECK_NE(&from, this);
  npc_info_.MergeFrom(from.npc_info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_option()) {
      set_option(from.option());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void NpcList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void NpcList::CopyFrom(const NpcList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool NpcList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < npc_info_size(); i++) {
    if (!this->npc_info(i).IsInitialized()) return false;
  }
  return true;
}

void NpcList::SetInitialized() {
  _has_bits_[0] |= 0x00000002;

  for (int i = 0; i < npc_info_size(); i++) {
    this->mutable_npc_info(i)->SetInitialized();
  }
  return;
}

void NpcList::Swap(NpcList* other) {
  if (other != this) {
    npc_info_.Swap(&other->npc_info_);
    std::swap(option_, other->option_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata NpcList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NpcList_descriptor_;
  metadata.reflection = NpcList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerNpc::kTargetFieldNumber;
#endif  // !_MSC_VER

PlayerNpc::PlayerNpc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerNpc::InitAsDefaultInstance() {
  target_ = const_cast< ::DB::TrialTarget*>(&::DB::TrialTarget::default_instance());
}

PlayerNpc::PlayerNpc(const PlayerNpc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerNpc::SharedCtor() {
  _cached_size_ = 0;
  target_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerNpc::~PlayerNpc() {
  SharedDtor();
}

void PlayerNpc::SharedDtor() {
  if (this != default_instance_) {
    delete target_;
  }
}

void PlayerNpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerNpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerNpc_descriptor_;
}

const PlayerNpc& PlayerNpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneObject_2eproto();
  return *default_instance_;
}

PlayerNpc* PlayerNpc::default_instance_ = NULL;

PlayerNpc* PlayerNpc::New() const {
  return new PlayerNpc;
}

void PlayerNpc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_target()) {
      if (target_ != NULL) target_->::DB::TrialTarget::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerNpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DB.TrialTarget target = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerNpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DB.TrialTarget target = 1;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->target(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerNpc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DB.TrialTarget target = 1;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->target(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerNpc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DB.TrialTarget target = 1;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerNpc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerNpc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerNpc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerNpc::MergeFrom(const PlayerNpc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target()) {
      mutable_target()->::DB::TrialTarget::MergeFrom(from.target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerNpc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerNpc::CopyFrom(const PlayerNpc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerNpc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_target()) {
    if (!this->target().IsInitialized()) return false;
  }
  return true;
}

void PlayerNpc::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  if (has_target()) {
    this->mutable_target()->SetInitialized();
  }
  return;
}

void PlayerNpc::Swap(PlayerNpc* other) {
  if (other != this) {
    std::swap(target_, other->target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerNpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerNpc_descriptor_;
  metadata.reflection = PlayerNpc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerNpcList::kPlayerNpcFieldNumber;
const int PlayerNpcList::kOptionFieldNumber;
#endif  // !_MSC_VER

PlayerNpcList::PlayerNpcList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerNpcList::InitAsDefaultInstance() {
}

PlayerNpcList::PlayerNpcList(const PlayerNpcList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerNpcList::SharedCtor() {
  _cached_size_ = 0;
  option_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerNpcList::~PlayerNpcList() {
  SharedDtor();
}

void PlayerNpcList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerNpcList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerNpcList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerNpcList_descriptor_;
}

const PlayerNpcList& PlayerNpcList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneObject_2eproto();
  return *default_instance_;
}

PlayerNpcList* PlayerNpcList::default_instance_ = NULL;

PlayerNpcList* PlayerNpcList::New() const {
  return new PlayerNpcList;
}

void PlayerNpcList::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    option_ = 0;
  }
  player_npc_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerNpcList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Packet.PlayerNpc player_npc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_npc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_npc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_player_npc;
        if (input->ExpectTag(16)) goto parse_option;
        break;
      }

      // required .Packet.NpcOption option = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_option:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::NpcOption_IsValid(value)) {
            set_option(static_cast< ::Packet::NpcOption >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerNpcList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Packet.PlayerNpc player_npc = 1;
  for (int i = 0; i < this->player_npc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_npc(i), output);
  }

  // required .Packet.NpcOption option = 2;
  if (has_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->option(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerNpcList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Packet.PlayerNpc player_npc = 1;
  for (int i = 0; i < this->player_npc_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_npc(i), target);
  }

  // required .Packet.NpcOption option = 2;
  if (has_option()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->option(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerNpcList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .Packet.NpcOption option = 2;
    if (has_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->option());
    }

  }
  // repeated .Packet.PlayerNpc player_npc = 1;
  total_size += 1 * this->player_npc_size();
  for (int i = 0; i < this->player_npc_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_npc(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerNpcList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerNpcList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerNpcList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerNpcList::MergeFrom(const PlayerNpcList& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_npc_.MergeFrom(from.player_npc_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_option()) {
      set_option(from.option());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerNpcList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerNpcList::CopyFrom(const PlayerNpcList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerNpcList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < player_npc_size(); i++) {
    if (!this->player_npc(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerNpcList::SetInitialized() {
  _has_bits_[0] |= 0x00000002;

  for (int i = 0; i < player_npc_size(); i++) {
    this->mutable_player_npc(i)->SetInitialized();
  }
  return;
}

void PlayerNpcList::Swap(PlayerNpcList* other) {
  if (other != this) {
    player_npc_.Swap(&other->player_npc_);
    std::swap(option_, other->option_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerNpcList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerNpcList_descriptor_;
  metadata.reflection = PlayerNpcList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NpcSession::kIndexFieldNumber;
const int NpcSession::kSeriesIdFieldNumber;
const int NpcSession::kMissionIdFieldNumber;
const int NpcSession::kOptionFieldNumber;
const int NpcSession::kOptionIndexFieldNumber;
#endif  // !_MSC_VER

NpcSession::NpcSession()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NpcSession::InitAsDefaultInstance() {
}

NpcSession::NpcSession(const NpcSession& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NpcSession::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  series_id_ = 0;
  mission_id_ = 0;
  option_ = 0;
  option_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NpcSession::~NpcSession() {
  SharedDtor();
}

void NpcSession::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NpcSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NpcSession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NpcSession_descriptor_;
}

const NpcSession& NpcSession::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneObject_2eproto();
  return *default_instance_;
}

NpcSession* NpcSession::default_instance_ = NULL;

NpcSession* NpcSession::New() const {
  return new NpcSession;
}

void NpcSession::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    series_id_ = 0;
    mission_id_ = 0;
    option_ = 0;
    option_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool NpcSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_series_id;
        break;
      }

      // optional int32 series_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_series_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &series_id_)));
          set_has_series_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mission_id;
        break;
      }

      // optional int32 mission_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mission_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mission_id_)));
          set_has_mission_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_option;
        break;
      }

      // optional .Packet.MissionOption option = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_option:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::MissionOption_IsValid(value)) {
            set_option(static_cast< ::Packet::MissionOption >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_option_index;
        break;
      }

      // optional int32 option_index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_option_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &option_index_)));
          set_has_option_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void NpcSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 series_id = 2;
  if (has_series_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->series_id(), output);
  }

  // optional int32 mission_id = 3;
  if (has_mission_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mission_id(), output);
  }

  // optional .Packet.MissionOption option = 4;
  if (has_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->option(), output);
  }

  // optional int32 option_index = 5;
  if (has_option_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->option_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NpcSession::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int32 series_id = 2;
  if (has_series_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->series_id(), target);
  }

  // optional int32 mission_id = 3;
  if (has_mission_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mission_id(), target);
  }

  // optional .Packet.MissionOption option = 4;
  if (has_option()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->option(), target);
  }

  // optional int32 option_index = 5;
  if (has_option_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->option_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NpcSession::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 series_id = 2;
    if (has_series_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->series_id());
    }

    // optional int32 mission_id = 3;
    if (has_mission_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mission_id());
    }

    // optional .Packet.MissionOption option = 4;
    if (has_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->option());
    }

    // optional int32 option_index = 5;
    if (has_option_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->option_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NpcSession::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NpcSession* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NpcSession*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void NpcSession::MergeFrom(const NpcSession& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_series_id()) {
      set_series_id(from.series_id());
    }
    if (from.has_mission_id()) {
      set_mission_id(from.mission_id());
    }
    if (from.has_option()) {
      set_option(from.option());
    }
    if (from.has_option_index()) {
      set_option_index(from.option_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void NpcSession::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void NpcSession::CopyFrom(const NpcSession& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool NpcSession::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NpcSession::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void NpcSession::Swap(NpcSession* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(series_id_, other->series_id_);
    std::swap(mission_id_, other->mission_id_);
    std::swap(option_, other->option_);
    std::swap(option_index_, other->option_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata NpcSession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NpcSession_descriptor_;
  metadata.reflection = NpcSession_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerNpcSession::kTargetGuidFieldNumber;
const int PlayerNpcSession::kOptionIndexFieldNumber;
#endif  // !_MSC_VER

PlayerNpcSession::PlayerNpcSession()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerNpcSession::InitAsDefaultInstance() {
}

PlayerNpcSession::PlayerNpcSession(const PlayerNpcSession& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerNpcSession::SharedCtor() {
  _cached_size_ = 0;
  target_guid_ = GOOGLE_ULONGLONG(0);
  option_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerNpcSession::~PlayerNpcSession() {
  SharedDtor();
}

void PlayerNpcSession::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerNpcSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerNpcSession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerNpcSession_descriptor_;
}

const PlayerNpcSession& PlayerNpcSession::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneObject_2eproto();
  return *default_instance_;
}

PlayerNpcSession* PlayerNpcSession::default_instance_ = NULL;

PlayerNpcSession* PlayerNpcSession::New() const {
  return new PlayerNpcSession;
}

void PlayerNpcSession::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    target_guid_ = GOOGLE_ULONGLONG(0);
    option_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool PlayerNpcSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 target_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &target_guid_)));
          set_has_target_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_option_index;
        break;
      }

      // optional int32 option_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_option_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &option_index_)));
          set_has_option_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void PlayerNpcSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 target_guid = 1;
  if (has_target_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->target_guid(), output);
  }

  // optional int32 option_index = 2;
  if (has_option_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->option_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerNpcSession::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 target_guid = 1;
  if (has_target_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->target_guid(), target);
  }

  // optional int32 option_index = 2;
  if (has_option_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->option_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerNpcSession::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 target_guid = 1;
    if (has_target_guid()) {
      total_size += 1 + 8;
    }

    // optional int32 option_index = 2;
    if (has_option_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->option_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerNpcSession::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerNpcSession* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerNpcSession*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void PlayerNpcSession::MergeFrom(const PlayerNpcSession& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_guid()) {
      set_target_guid(from.target_guid());
    }
    if (from.has_option_index()) {
      set_option_index(from.option_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void PlayerNpcSession::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void PlayerNpcSession::CopyFrom(const PlayerNpcSession& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool PlayerNpcSession::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayerNpcSession::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void PlayerNpcSession::Swap(PlayerNpcSession* other) {
  if (other != this) {
    std::swap(target_guid_, other->target_guid_);
    std::swap(option_index_, other->option_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata PlayerNpcSession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerNpcSession_descriptor_;
  metadata.reflection = PlayerNpcSession_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NpcSessionReply::kIndexFieldNumber;
const int NpcSessionReply::kMsgNameFieldNumber;
const int NpcSessionReply::kStringParamFieldNumber;
const int NpcSessionReply::kIntParamFieldNumber;
#endif  // !_MSC_VER

NpcSessionReply::NpcSessionReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NpcSessionReply::InitAsDefaultInstance() {
}

NpcSessionReply::NpcSessionReply(const NpcSessionReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NpcSessionReply::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  msg_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  string_param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  int_param_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NpcSessionReply::~NpcSessionReply() {
  SharedDtor();
}

void NpcSessionReply::SharedDtor() {
  if (msg_name_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_name_;
  }
  if (string_param_ != &::google::protobuf::internal::kEmptyString) {
    delete string_param_;
  }
  if (this != default_instance_) {
  }
}

void NpcSessionReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NpcSessionReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NpcSessionReply_descriptor_;
}

const NpcSessionReply& NpcSessionReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneObject_2eproto();
  return *default_instance_;
}

NpcSessionReply* NpcSessionReply::default_instance_ = NULL;

NpcSessionReply* NpcSessionReply::New() const {
  return new NpcSessionReply;
}

void NpcSessionReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    if (has_msg_name()) {
      if (msg_name_ != &::google::protobuf::internal::kEmptyString) {
        msg_name_->clear();
      }
    }
    if (has_string_param()) {
      if (string_param_ != &::google::protobuf::internal::kEmptyString) {
        string_param_->clear();
      }
    }
    int_param_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool NpcSessionReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg_name;
        break;
      }

      // required string msg_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_name().data(), this->msg_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_string_param;
        break;
      }

      // optional string string_param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->string_param().data(), this->string_param().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_int_param;
        break;
      }

      // optional int32 int_param = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int_param_)));
          set_has_int_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void NpcSessionReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required string msg_name = 2;
  if (has_msg_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_name().data(), this->msg_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg_name(), output);
  }

  // optional string string_param = 3;
  if (has_string_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_param().data(), this->string_param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->string_param(), output);
  }

  // optional int32 int_param = 4;
  if (has_int_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->int_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NpcSessionReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required string msg_name = 2;
  if (has_msg_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_name().data(), this->msg_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg_name(), target);
  }

  // optional string string_param = 3;
  if (has_string_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_param().data(), this->string_param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->string_param(), target);
  }

  // optional int32 int_param = 4;
  if (has_int_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->int_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NpcSessionReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required string msg_name = 2;
    if (has_msg_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_name());
    }

    // optional string string_param = 3;
    if (has_string_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_param());
    }

    // optional int32 int_param = 4;
    if (has_int_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NpcSessionReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NpcSessionReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NpcSessionReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void NpcSessionReply::MergeFrom(const NpcSessionReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_msg_name()) {
      set_msg_name(from.msg_name());
    }
    if (from.has_string_param()) {
      set_string_param(from.string_param());
    }
    if (from.has_int_param()) {
      set_int_param(from.int_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void NpcSessionReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void NpcSessionReply::CopyFrom(const NpcSessionReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool NpcSessionReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NpcSessionReply::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void NpcSessionReply::Swap(NpcSessionReply* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(msg_name_, other->msg_name_);
    std::swap(string_param_, other->string_param_);
    std::swap(int_param_, other->int_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata NpcSessionReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NpcSessionReply_descriptor_;
  metadata.reflection = NpcSessionReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NoNpcSession::kStringParamFieldNumber;
const int NoNpcSession::kLongParamFieldNumber;
const int NoNpcSession::kIntParamFieldNumber;
#endif  // !_MSC_VER

NoNpcSession::NoNpcSession()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NoNpcSession::InitAsDefaultInstance() {
}

NoNpcSession::NoNpcSession(const NoNpcSession& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NoNpcSession::SharedCtor() {
  _cached_size_ = 0;
  string_param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  long_param_ = GOOGLE_ULONGLONG(0);
  int_param_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NoNpcSession::~NoNpcSession() {
  SharedDtor();
}

void NoNpcSession::SharedDtor() {
  if (string_param_ != &::google::protobuf::internal::kEmptyString) {
    delete string_param_;
  }
  if (this != default_instance_) {
  }
}

void NoNpcSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoNpcSession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NoNpcSession_descriptor_;
}

const NoNpcSession& NoNpcSession::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneObject_2eproto();
  return *default_instance_;
}

NoNpcSession* NoNpcSession::default_instance_ = NULL;

NoNpcSession* NoNpcSession::New() const {
  return new NoNpcSession;
}

void NoNpcSession::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_string_param()) {
      if (string_param_ != &::google::protobuf::internal::kEmptyString) {
        string_param_->clear();
      }
    }
    long_param_ = GOOGLE_ULONGLONG(0);
    int_param_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool NoNpcSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string string_param = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->string_param().data(), this->string_param().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_long_param;
        break;
      }

      // required fixed64 long_param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_long_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &long_param_)));
          set_has_long_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_int_param;
        break;
      }

      // required int32 int_param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int_param_)));
          set_has_int_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void NoNpcSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string string_param = 1;
  if (has_string_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_param().data(), this->string_param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->string_param(), output);
  }

  // required fixed64 long_param = 2;
  if (has_long_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->long_param(), output);
  }

  // required int32 int_param = 3;
  if (has_int_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->int_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NoNpcSession::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string string_param = 1;
  if (has_string_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_param().data(), this->string_param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->string_param(), target);
  }

  // required fixed64 long_param = 2;
  if (has_long_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->long_param(), target);
  }

  // required int32 int_param = 3;
  if (has_int_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->int_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NoNpcSession::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string string_param = 1;
    if (has_string_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_param());
    }

    // required fixed64 long_param = 2;
    if (has_long_param()) {
      total_size += 1 + 8;
    }

    // required int32 int_param = 3;
    if (has_int_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoNpcSession::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NoNpcSession* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NoNpcSession*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void NoNpcSession::MergeFrom(const NoNpcSession& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_string_param()) {
      set_string_param(from.string_param());
    }
    if (from.has_long_param()) {
      set_long_param(from.long_param());
    }
    if (from.has_int_param()) {
      set_int_param(from.int_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void NoNpcSession::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void NoNpcSession::CopyFrom(const NoNpcSession& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool NoNpcSession::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NoNpcSession::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  return;
}

void NoNpcSession::Swap(NoNpcSession* other) {
  if (other != this) {
    std::swap(string_param_, other->string_param_);
    std::swap(long_param_, other->long_param_);
    std::swap(int_param_, other->int_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata NoNpcSession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NoNpcSession_descriptor_;
  metadata.reflection = NoNpcSession_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MountConfig::kIdFieldNumber;
const int MountConfig::kSpeedFieldNumber;
const int MountConfig::kImpactIdFieldNumber;
#endif  // !_MSC_VER

MountConfig::MountConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MountConfig::InitAsDefaultInstance() {
}

MountConfig::MountConfig(const MountConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MountConfig::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  speed_ = 0;
  impact_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MountConfig::~MountConfig() {
  SharedDtor();
}

void MountConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MountConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MountConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MountConfig_descriptor_;
}

const MountConfig& MountConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneObject_2eproto();
  return *default_instance_;
}

MountConfig* MountConfig::default_instance_ = NULL;

MountConfig* MountConfig::New() const {
  return new MountConfig;
}

void MountConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    speed_ = 0;
    impact_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool MountConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_speed;
        break;
      }

      // required int32 speed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_impact_id;
        break;
      }

      // required int32 impact_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_impact_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &impact_id_)));
          set_has_impact_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void MountConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 speed = 2;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->speed(), output);
  }

  // required int32 impact_id = 3;
  if (has_impact_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->impact_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MountConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 speed = 2;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->speed(), target);
  }

  // required int32 impact_id = 3;
  if (has_impact_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->impact_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MountConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 speed = 2;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }

    // required int32 impact_id = 3;
    if (has_impact_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->impact_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MountConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MountConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MountConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void MountConfig::MergeFrom(const MountConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_impact_id()) {
      set_impact_id(from.impact_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void MountConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void MountConfig::CopyFrom(const MountConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool MountConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MountConfig::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  return;
}

void MountConfig::Swap(MountConfig* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(speed_, other->speed_);
    std::swap(impact_id_, other->impact_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata MountConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MountConfig_descriptor_;
  metadata.reflection = MountConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

// @@protoc_insertion_point(global_scope)
