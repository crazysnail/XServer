// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AllConfigEnum.proto

#ifndef PROTOBUF_AllConfigEnum_2eproto__INCLUDED
#define PROTOBUF_AllConfigEnum_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace Config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AllConfigEnum_2eproto();
void protobuf_AssignDesc_AllConfigEnum_2eproto();
void protobuf_ShutdownFile_AllConfigEnum_2eproto();


enum BFState {
  Bf_Invalid = 0,
  Bf_Normal = 1,
  Bf_Dead = 2,
  Bf_Flag = 3,
  Bf_Fighting = 4,
  Bf_Leave = 5
};
bool BFState_IsValid(int value);
const BFState BFState_MIN = Bf_Invalid;
const BFState BFState_MAX = Bf_Leave;
const int BFState_ARRAYSIZE = BFState_MAX + 1;

const ::google::protobuf::EnumDescriptor* BFState_descriptor();
inline const ::std::string& BFState_Name(BFState value) {
  return ::google::protobuf::internal::NameOfEnum(
    BFState_descriptor(), value);
}
inline bool BFState_Parse(
    const ::std::string& name, BFState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BFState>(
    BFState_descriptor(), name, value);
}
enum BattleObjectAbility {
  SELECT_TEAMMATE = 1,
  SELECT_ENEMY = 2,
  MOVE = 3,
  USE_BASE_SKILL = 4,
  USE_MAGIC_SKILL = 5,
  BE_TEAMMATE_SELECT = 6,
  BE_ENEMY_SELECT = 7,
  CHANGE_CURRENT_TARGET = 8,
  CAN_BE_DAMAGE = 9
};
bool BattleObjectAbility_IsValid(int value);
const BattleObjectAbility BattleObjectAbility_MIN = SELECT_TEAMMATE;
const BattleObjectAbility BattleObjectAbility_MAX = CAN_BE_DAMAGE;
const int BattleObjectAbility_ARRAYSIZE = BattleObjectAbility_MAX + 1;

const ::google::protobuf::EnumDescriptor* BattleObjectAbility_descriptor();
inline const ::std::string& BattleObjectAbility_Name(BattleObjectAbility value) {
  return ::google::protobuf::internal::NameOfEnum(
    BattleObjectAbility_descriptor(), value);
}
inline bool BattleObjectAbility_Parse(
    const ::std::string& name, BattleObjectAbility* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BattleObjectAbility>(
    BattleObjectAbility_descriptor(), name, value);
}
enum BattleObjectStatus {
  DEAD = 1,
  FREEZE = 2,
  LOCK = 3,
  SNEER = 4,
  MUTE = 5,
  CONFUSION = 6,
  MOVING = 7,
  STUN = 8,
  FEAR = 9,
  GOD = 10,
  IMMUNE = 11,
  SHEEP = 12,
  FEAKDEAD = 13,
  DISAPPEAR = 14,
  BLIND = 15
};
bool BattleObjectStatus_IsValid(int value);
const BattleObjectStatus BattleObjectStatus_MIN = DEAD;
const BattleObjectStatus BattleObjectStatus_MAX = BLIND;
const int BattleObjectStatus_ARRAYSIZE = BattleObjectStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* BattleObjectStatus_descriptor();
inline const ::std::string& BattleObjectStatus_Name(BattleObjectStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    BattleObjectStatus_descriptor(), value);
}
inline bool BattleObjectStatus_Parse(
    const ::std::string& name, BattleObjectStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BattleObjectStatus>(
    BattleObjectStatus_descriptor(), name, value);
}
enum ActivityGroup {
  Dayly = 0,
  TimeLimit = 1,
  HolyDay = 2
};
bool ActivityGroup_IsValid(int value);
const ActivityGroup ActivityGroup_MIN = Dayly;
const ActivityGroup ActivityGroup_MAX = HolyDay;
const int ActivityGroup_ARRAYSIZE = ActivityGroup_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActivityGroup_descriptor();
inline const ::std::string& ActivityGroup_Name(ActivityGroup value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActivityGroup_descriptor(), value);
}
inline bool ActivityGroup_Parse(
    const ::std::string& name, ActivityGroup* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActivityGroup>(
    ActivityGroup_descriptor(), name, value);
}
enum DrawType {
  CrystalOne = 0,
  CrystalTen = 1,
  GoldOne = 2,
  GoldTen = 3
};
bool DrawType_IsValid(int value);
const DrawType DrawType_MIN = CrystalOne;
const DrawType DrawType_MAX = GoldTen;
const int DrawType_ARRAYSIZE = DrawType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DrawType_descriptor();
inline const ::std::string& DrawType_Name(DrawType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DrawType_descriptor(), value);
}
inline bool DrawType_Parse(
    const ::std::string& name, DrawType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DrawType>(
    DrawType_descriptor(), name, value);
}
enum EquipmentSlot {
  EQUIPMENT_SLOT_INVALID = -1,
  EQUIPMENT_SLOT_HEAD = 1,
  EQUIPMENT_SLOT_NECK = 2,
  EQUIPMENT_SLOT_SHOULDER = 3,
  EQUIPMENT_SLOT_CLOAK = 4,
  EQUIPMENT_SLOT_CHEST = 5,
  EQUIPMENT_SLOT_MAIN_HAND = 6,
  EQUIPMENT_SLOT_CUFF = 7,
  EQUIPMENT_SLOT_SHOES = 8,
  EQUIPMENT_SLOT_RING_ONE = 9,
  EQUIPMENT_SLOT_RING_TWO = 10,
  EQUIPMENT_SLOT_ORNAMENT = 11,
  EQUIPMENT_SLOT_ASSI_HAND = 12
};
bool EquipmentSlot_IsValid(int value);
const EquipmentSlot EquipmentSlot_MIN = EQUIPMENT_SLOT_INVALID;
const EquipmentSlot EquipmentSlot_MAX = EQUIPMENT_SLOT_ASSI_HAND;
const int EquipmentSlot_ARRAYSIZE = EquipmentSlot_MAX + 1;

const ::google::protobuf::EnumDescriptor* EquipmentSlot_descriptor();
inline const ::std::string& EquipmentSlot_Name(EquipmentSlot value) {
  return ::google::protobuf::internal::NameOfEnum(
    EquipmentSlot_descriptor(), value);
}
inline bool EquipmentSlot_Parse(
    const ::std::string& name, EquipmentSlot* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EquipmentSlot>(
    EquipmentSlot_descriptor(), name, value);
}
enum EquipmentType {
  EQUIPMENT_TYPE_INVALID = -1,
  EQUIPMENT_TYPE_MAIN_HAND = 1,
  EQUIPMENT_TYPE_ASSI_HAND = 2,
  EQUIPMENT_TYPE_HELMET = 3,
  EQUIPMENT_TYPE_SHOULDER = 4,
  EQUIPMENT_TYPE_CHEST = 5,
  EQUIPMENT_TYPE_MAIN_CUFF = 6,
  EQUIPMENT_TYPE_SHOES = 7,
  EQUIPMENT_TYPE_CLOAK = 8,
  EQUIPMENT_TYPE_NECKLACE = 9,
  EQUIPMENT_TYPE_RING = 10,
  EQUIPMENT_TYPE_ORNAMENT = 11,
  EQUIPMENT_TYPE_BOTH_HAND = 12
};
bool EquipmentType_IsValid(int value);
const EquipmentType EquipmentType_MIN = EQUIPMENT_TYPE_INVALID;
const EquipmentType EquipmentType_MAX = EQUIPMENT_TYPE_BOTH_HAND;
const int EquipmentType_ARRAYSIZE = EquipmentType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EquipmentType_descriptor();
inline const ::std::string& EquipmentType_Name(EquipmentType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EquipmentType_descriptor(), value);
}
inline bool EquipmentType_Parse(
    const ::std::string& name, EquipmentType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EquipmentType>(
    EquipmentType_descriptor(), name, value);
}
enum WeaponType {
  WEAPONTYPE_INVALID = -1,
  WEAPONTYPE_TWO_HAND_AXE = 1,
  WEAPONTYPE_TWO_HAND_HAMMER = 2,
  WEAPONTYPE_TWO_HAND_SWORD = 3,
  WEAPONTYPE_BOW = 4,
  WEAPONTYPE_SPEAR = 5,
  WEAPONTYPE_WAND = 6,
  WEAPONTYPE_AXE = 7,
  WEAPONTYPE_HAMMER = 8,
  WEAPONTYPE_DAGGER = 9,
  WEAPONTYPE_SWORD = 10,
  WEAPONTYPE_ARROW_BAG = 11,
  WEAPONTYPE_BULLET_BOX = 12,
  WEAPONTYPE_HALIDOM = 13,
  WEAPONTYPE_SHIELD = 14,
  WEAPONTYPE_MAGIC_WARE = 15,
  WEAPONTYPE_JAVELIN = 16,
  WEAPONTYPE_MAGIC_WAND = 17
};
bool WeaponType_IsValid(int value);
const WeaponType WeaponType_MIN = WEAPONTYPE_INVALID;
const WeaponType WeaponType_MAX = WEAPONTYPE_MAGIC_WAND;
const int WeaponType_ARRAYSIZE = WeaponType_MAX + 1;

const ::google::protobuf::EnumDescriptor* WeaponType_descriptor();
inline const ::std::string& WeaponType_Name(WeaponType value) {
  return ::google::protobuf::internal::NameOfEnum(
    WeaponType_descriptor(), value);
}
inline bool WeaponType_Parse(
    const ::std::string& name, WeaponType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WeaponType>(
    WeaponType_descriptor(), name, value);
}
enum EquipmentColor {
  EQUIP_COLOR_INVALID = 0,
  EQUIP_WHITE = 1,
  EQUIP_GREEN = 2,
  EQUIP_BLUE = 3,
  EQUIP_PURPLE = 4,
  EQUIP_ORANGE = 5
};
bool EquipmentColor_IsValid(int value);
const EquipmentColor EquipmentColor_MIN = EQUIP_COLOR_INVALID;
const EquipmentColor EquipmentColor_MAX = EQUIP_ORANGE;
const int EquipmentColor_ARRAYSIZE = EquipmentColor_MAX + 1;

const ::google::protobuf::EnumDescriptor* EquipmentColor_descriptor();
inline const ::std::string& EquipmentColor_Name(EquipmentColor value) {
  return ::google::protobuf::internal::NameOfEnum(
    EquipmentColor_descriptor(), value);
}
inline bool EquipmentColor_Parse(
    const ::std::string& name, EquipmentColor* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EquipmentColor>(
    EquipmentColor_descriptor(), name, value);
}
enum ItemType {
  ItemTypeInvalid = -1,
  POTION = 1,
  MATERIAL = 2,
  CARD_FRAGMENT = 3,
  AUTOMEDIC = 4,
  MISSION_SCROLL = 5,
  MISSION = 11,
  CARD = 88,
  CURRENCY = 99
};
bool ItemType_IsValid(int value);
const ItemType ItemType_MIN = ItemTypeInvalid;
const ItemType ItemType_MAX = CURRENCY;
const int ItemType_ARRAYSIZE = ItemType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ItemType_descriptor();
inline const ::std::string& ItemType_Name(ItemType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ItemType_descriptor(), value);
}
inline bool ItemType_Parse(
    const ::std::string& name, ItemType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ItemType>(
    ItemType_descriptor(), name, value);
}
enum ItemAddLogType {
  AddType_Package = 1,
  AddType_Mission = 2,
  AddType_Friend = 3,
  AddType_MonsterDrop = 9,
  AddType_BankTake = 10,
  AddType_BankStore = 11,
  AddType_UseItem = 12,
  AddType_DismantleItem = 13,
  AddType_SellItem = 14,
  AddType_Gem = 15,
  AddType_Market = 16,
  AddType_ExpPoint = 17,
  AddType_Stage_Tax = 18,
  AddType_Loot = 19,
  AddType_Draw = 20,
  AddType_PlayerInit = 21,
  AddType_Activity = 22,
  AddType_Treasure = 23,
  AddType_Guild = 25,
  AddType_BattleFeild = 26,
  AddType_TargetReward = 27,
  AddType_TakeOutGem = 29,
  AddType_Mail = 30,
  AddType_Arrange = 31,
  AddType_OfflineHook = 32,
  AddType_Charge = 33,
  AddType_Hook = 34,
  AddType_Exchange = 35,
  AddType_Acr = 36,
  AddType_CDK = 37,
  AddType_MissReward = 38,
  AddType_Gm = 50
};
bool ItemAddLogType_IsValid(int value);
const ItemAddLogType ItemAddLogType_MIN = AddType_Package;
const ItemAddLogType ItemAddLogType_MAX = AddType_Gm;
const int ItemAddLogType_ARRAYSIZE = ItemAddLogType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ItemAddLogType_descriptor();
inline const ::std::string& ItemAddLogType_Name(ItemAddLogType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ItemAddLogType_descriptor(), value);
}
inline bool ItemAddLogType_Parse(
    const ::std::string& name, ItemAddLogType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ItemAddLogType>(
    ItemAddLogType_descriptor(), name, value);
}
enum ItemDelLogType {
  DelType_Package = 1,
  DelType_Mission = 2,
  DelType_Friend = 3,
  DelType_TreasureMission = 4,
  DelType_RewardMission = 5,
  DelType_UnionMIssion = 6,
  DelType_CorpsMIssion = 7,
  DelType_CarBonsMIssion = 8,
  DelType_MagicalEquip = 9,
  DelType_Market = 10,
  DelType_BankStore = 11,
  DelType_ExtendContainerSize = 12,
  DelType_BankTake = 13,
  DelType_SellItem = 14,
  DelType_UseItem = 15,
  DelType_EnhanceEquip = 16,
  DelType_Gem = 17,
  DelType_Refix = 18,
  DelType_ExpPoint = 19,
  DelType_ChatGarMsg = 20,
  DelType_Guild = 21,
  DelType_ChallengeBoss = 22,
  DelType_Loot = 23,
  DelType_Draw = 24,
  DelType_Hell = 25,
  DelType_WorldBoss = 26,
  DelType_Actor = 27,
  DelType_Upgrade_Color = 28,
  DelType_Upgrade_Level = 29,
  DelType_Upgrade_Star = 30,
  DelType_Arena = 31,
  DelType_Rename = 32,
  DelType_Activity = 33,
  DelType_Enchant = 34,
  DelType_Enchant_Slot = 35,
  DelType_EmbedGem = 36,
  DelType_OfflineHook = 37,
  DelType_DismantleItem = 38,
  DelType_Exchange = 39,
  DelType_Acr = 40,
  DelType_MissReward = 41,
  DelType_Gm = 50
};
bool ItemDelLogType_IsValid(int value);
const ItemDelLogType ItemDelLogType_MIN = DelType_Package;
const ItemDelLogType ItemDelLogType_MAX = DelType_Gm;
const int ItemDelLogType_ARRAYSIZE = ItemDelLogType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ItemDelLogType_descriptor();
inline const ::std::string& ItemDelLogType_Name(ItemDelLogType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ItemDelLogType_descriptor(), value);
}
inline bool ItemDelLogType_Parse(
    const ::std::string& name, ItemDelLogType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ItemDelLogType>(
    ItemDelLogType_descriptor(), name, value);
}
enum MarketType {
  MarketType_Invalid = -1,
  MarketType_Gem = 0,
  MarketType_Union = 1,
  MarketType_Equip = 2,
  MarketType_LawFal = 3,
  MarketType_Honor = 4,
  MarketType_Mission = 5,
  MarketType_Charge = 6,
  MarketType_Secret = 7,
  MarketType_Goods = 8,
  MarketType_MonthCard = 9,
  MarketType_Point = 10,
  MarketType_Scroll = 11,
  MarketType_Time = 12,
  MarketTypeMax = 13
};
bool MarketType_IsValid(int value);
const MarketType MarketType_MIN = MarketType_Invalid;
const MarketType MarketType_MAX = MarketTypeMax;
const int MarketType_ARRAYSIZE = MarketType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MarketType_descriptor();
inline const ::std::string& MarketType_Name(MarketType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MarketType_descriptor(), value);
}
inline bool MarketType_Parse(
    const ::std::string& name, MarketType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MarketType>(
    MarketType_descriptor(), name, value);
}
enum MarketItemGroup {
  MarketItemGroup_Invalid = -1,
  CountGroup_0 = 0,
  CountGroup_1 = 1,
  CountGroup_2 = 2,
  CountGroup_3 = 3,
  CountGroup_4 = 4,
  CountGroup_5 = 5,
  CountGroupMax = 6
};
bool MarketItemGroup_IsValid(int value);
const MarketItemGroup MarketItemGroup_MIN = MarketItemGroup_Invalid;
const MarketItemGroup MarketItemGroup_MAX = CountGroupMax;
const int MarketItemGroup_ARRAYSIZE = MarketItemGroup_MAX + 1;

const ::google::protobuf::EnumDescriptor* MarketItemGroup_descriptor();
inline const ::std::string& MarketItemGroup_Name(MarketItemGroup value) {
  return ::google::protobuf::internal::NameOfEnum(
    MarketItemGroup_descriptor(), value);
}
inline bool MarketItemGroup_Parse(
    const ::std::string& name, MarketItemGroup* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MarketItemGroup>(
    MarketItemGroup_descriptor(), name, value);
}
enum FinishType {
  InvalidFinish = -1,
  FinishText = 0,
  CommitItem = 1,
  KillMonster = 2,
  KillNpc = 3,
  UseItem = 4,
  MailItem = 5,
  LevelUp = 6,
  RandomNpc = 7,
  Ratrol = 8,
  EnterRaid = 9,
  CollectItem = 10,
  GenTarget = 11,
  Action = 12
};
bool FinishType_IsValid(int value);
const FinishType FinishType_MIN = InvalidFinish;
const FinishType FinishType_MAX = Action;
const int FinishType_ARRAYSIZE = FinishType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FinishType_descriptor();
inline const ::std::string& FinishType_Name(FinishType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FinishType_descriptor(), value);
}
inline bool FinishType_Parse(
    const ::std::string& name, FinishType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FinishType>(
    FinishType_descriptor(), name, value);
}
enum TargetFinishType {
  InvalidTarget = -1,
  TFT_KillMonster = 1,
  StageProcess = 2,
  DayToken = 3,
  DrawCard = 4,
  FinishActivity = 5,
  FightHero = 6,
  GetEquip = 7,
  SuitAttr = 8,
  GetMount = 9,
  StepUp = 10,
  StarUp = 11,
  AllEnhanceLv = 12,
  EmbedGem = 13,
  SkillLv = 14,
  EquipEnchant = 15,
  HeroLevelUp = 16,
  EquipEnhanceLv = 17,
  AnyStepUp = 18,
  JoinUnion = 19,
  WinHell = 20,
  LackeysUse = 21,
  WinBurningBattle = 22,
  GainEquip = 23,
  OnEquip = 24,
  UnionSkil = 25,
  WorldBoss = 26
};
bool TargetFinishType_IsValid(int value);
const TargetFinishType TargetFinishType_MIN = InvalidTarget;
const TargetFinishType TargetFinishType_MAX = WorldBoss;
const int TargetFinishType_ARRAYSIZE = TargetFinishType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TargetFinishType_descriptor();
inline const ::std::string& TargetFinishType_Name(TargetFinishType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TargetFinishType_descriptor(), value);
}
inline bool TargetFinishType_Parse(
    const ::std::string& name, TargetFinishType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TargetFinishType>(
    TargetFinishType_descriptor(), name, value);
}
enum TargetResolveType {
  NoValue = 0,
  EqualValue = 1,
  MoreValue = 2,
  LessLalue = 3,
  StatisticsValue = 4,
  Special = 5
};
bool TargetResolveType_IsValid(int value);
const TargetResolveType TargetResolveType_MIN = NoValue;
const TargetResolveType TargetResolveType_MAX = Special;
const int TargetResolveType_ARRAYSIZE = TargetResolveType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TargetResolveType_descriptor();
inline const ::std::string& TargetResolveType_Name(TargetResolveType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TargetResolveType_descriptor(), value);
}
inline bool TargetResolveType_Parse(
    const ::std::string& name, TargetResolveType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TargetResolveType>(
    TargetResolveType_descriptor(), name, value);
}
enum SubFinishType {
  InvalidSubType = -1,
  KillAndGetWithMonster = 1,
  KillAndGetWithStage = 2,
  KillAndGetWithScene = 3,
  KillMonsterFinish = 4,
  KillAndGetOneWithMonster = 5,
  KillAnyMonster = 6,
  KillStageAnyMonster = 7
};
bool SubFinishType_IsValid(int value);
const SubFinishType SubFinishType_MIN = InvalidSubType;
const SubFinishType SubFinishType_MAX = KillStageAnyMonster;
const int SubFinishType_ARRAYSIZE = SubFinishType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SubFinishType_descriptor();
inline const ::std::string& SubFinishType_Name(SubFinishType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SubFinishType_descriptor(), value);
}
inline bool SubFinishType_Parse(
    const ::std::string& name, SubFinishType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SubFinishType>(
    SubFinishType_descriptor(), name, value);
}
enum MissionType {
  InvalidMission = -1,
  MainMission = 0,
  PartMission = 1,
  UnionMission = 2,
  ArchaeologyMission = 3,
  RewardMission = 4,
  CorpsMission = 5,
  GoblinCarbonMission = 6,
  ExtraRewardMission = 7,
  TinyThreeCarbonMission = 8,
  BlackCarbonMission = 9,
  BloodCarbonMission = 10,
  CommonCarbonMission = 11,
  BigThreeCarbonMission = 12,
  GradeUpMission = 13,
  DayKillMission = 14,
  LevelMission = 15,
  Carbon2001Mission = 16,
  Carbon2002Mission = 17,
  Carbon2003Mission = 18,
  Carbon2004Mission = 19,
  Carbon2005Mission = 20,
  Carbon2006Mission = 21,
  Carbon2007Mission = 22,
  ScrollMission = 23,
  TowerMission = 24
};
bool MissionType_IsValid(int value);
const MissionType MissionType_MIN = InvalidMission;
const MissionType MissionType_MAX = TowerMission;
const int MissionType_ARRAYSIZE = MissionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MissionType_descriptor();
inline const ::std::string& MissionType_Name(MissionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MissionType_descriptor(), value);
}
inline bool MissionType_Parse(
    const ::std::string& name, MissionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MissionType>(
    MissionType_descriptor(), name, value);
}
enum NpcType {
  Npc = 0,
  Monster = 1
};
bool NpcType_IsValid(int value);
const NpcType NpcType_MIN = Npc;
const NpcType NpcType_MAX = Monster;
const int NpcType_ARRAYSIZE = NpcType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NpcType_descriptor();
inline const ::std::string& NpcType_Name(NpcType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NpcType_descriptor(), value);
}
inline bool NpcType_Parse(
    const ::std::string& name, NpcType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NpcType>(
    NpcType_descriptor(), name, value);
}
enum VisibleType {
  StaticPublic = 0,
  CreatePublic = 1,
  CraatePrivate = 2
};
bool VisibleType_IsValid(int value);
const VisibleType VisibleType_MIN = StaticPublic;
const VisibleType VisibleType_MAX = CraatePrivate;
const int VisibleType_ARRAYSIZE = VisibleType_MAX + 1;

const ::google::protobuf::EnumDescriptor* VisibleType_descriptor();
inline const ::std::string& VisibleType_Name(VisibleType value) {
  return ::google::protobuf::internal::NameOfEnum(
    VisibleType_descriptor(), value);
}
inline bool VisibleType_Parse(
    const ::std::string& name, VisibleType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VisibleType>(
    VisibleType_descriptor(), name, value);
}
enum MonsterType {
  Normal = 0,
  Elite = 1,
  Boss = 2
};
bool MonsterType_IsValid(int value);
const MonsterType MonsterType_MIN = Normal;
const MonsterType MonsterType_MAX = Boss;
const int MonsterType_ARRAYSIZE = MonsterType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MonsterType_descriptor();
inline const ::std::string& MonsterType_Name(MonsterType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MonsterType_descriptor(), value);
}
inline bool MonsterType_Parse(
    const ::std::string& name, MonsterType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MonsterType>(
    MonsterType_descriptor(), name, value);
}
enum AttackType {
  PHYSICAL = 1,
  MAGIc = 2
};
bool AttackType_IsValid(int value);
const AttackType AttackType_MIN = PHYSICAL;
const AttackType AttackType_MAX = MAGIc;
const int AttackType_ARRAYSIZE = AttackType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AttackType_descriptor();
inline const ::std::string& AttackType_Name(AttackType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AttackType_descriptor(), value);
}
inline bool AttackType_Parse(
    const ::std::string& name, AttackType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AttackType>(
    AttackType_descriptor(), name, value);
}
enum ItemPackageType {
  RANDOM = 1,
  STABLE = 2,
  DRAW = 3
};
bool ItemPackageType_IsValid(int value);
const ItemPackageType ItemPackageType_MIN = RANDOM;
const ItemPackageType ItemPackageType_MAX = DRAW;
const int ItemPackageType_ARRAYSIZE = ItemPackageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ItemPackageType_descriptor();
inline const ::std::string& ItemPackageType_Name(ItemPackageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ItemPackageType_descriptor(), value);
}
inline bool ItemPackageType_Parse(
    const ::std::string& name, ItemPackageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ItemPackageType>(
    ItemPackageType_descriptor(), name, value);
}
enum SkillType {
  Trigger = 0,
  AiCast = 1,
  SubSkill = 2
};
bool SkillType_IsValid(int value);
const SkillType SkillType_MIN = Trigger;
const SkillType SkillType_MAX = SubSkill;
const int SkillType_ARRAYSIZE = SkillType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SkillType_descriptor();
inline const ::std::string& SkillType_Name(SkillType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SkillType_descriptor(), value);
}
inline bool SkillType_Parse(
    const ::std::string& name, SkillType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SkillType>(
    SkillType_descriptor(), name, value);
}
enum AreaType {
  Circle = 0,
  Sector = 1
};
bool AreaType_IsValid(int value);
const AreaType AreaType_MIN = Circle;
const AreaType AreaType_MAX = Sector;
const int AreaType_ARRAYSIZE = AreaType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AreaType_descriptor();
inline const ::std::string& AreaType_Name(AreaType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AreaType_descriptor(), value);
}
inline bool AreaType_Parse(
    const ::std::string& name, AreaType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AreaType>(
    AreaType_descriptor(), name, value);
}
enum TargetCamp {
  TEAM = 0,
  ENEMY = 1,
  BOTH = 2
};
bool TargetCamp_IsValid(int value);
const TargetCamp TargetCamp_MIN = TEAM;
const TargetCamp TargetCamp_MAX = BOTH;
const int TargetCamp_ARRAYSIZE = TargetCamp_MAX + 1;

const ::google::protobuf::EnumDescriptor* TargetCamp_descriptor();
inline const ::std::string& TargetCamp_Name(TargetCamp value) {
  return ::google::protobuf::internal::NameOfEnum(
    TargetCamp_descriptor(), value);
}
inline bool TargetCamp_Parse(
    const ::std::string& name, TargetCamp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TargetCamp>(
    TargetCamp_descriptor(), name, value);
}
enum PropertyReviseValueType {
  BY_NUMBER = 0,
  BY_PERCENTEGY = 1
};
bool PropertyReviseValueType_IsValid(int value);
const PropertyReviseValueType PropertyReviseValueType_MIN = BY_NUMBER;
const PropertyReviseValueType PropertyReviseValueType_MAX = BY_PERCENTEGY;
const int PropertyReviseValueType_ARRAYSIZE = PropertyReviseValueType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PropertyReviseValueType_descriptor();
inline const ::std::string& PropertyReviseValueType_Name(PropertyReviseValueType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PropertyReviseValueType_descriptor(), value);
}
inline bool PropertyReviseValueType_Parse(
    const ::std::string& name, PropertyReviseValueType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PropertyReviseValueType>(
    PropertyReviseValueType_descriptor(), name, value);
}
enum BuffType {
  add_level2 = 1,
  reduce_level2 = 2,
  bleed = 3,
  add_status = 4,
  immune = 5,
  sweep_away = 6,
  add_hp_max = 7,
  weapon_enhence = 8,
  flash_ball = 9,
  shocker = 10,
  sneer = 11,
  electric_overload = 12,
  sting = 13,
  ice_block = 14,
  combo_point = 15,
  sheep = 16,
  burning = 17,
  ice_shield = 18,
  holy_shield = 19,
  divine_shield = 20,
  fake_dead = 21,
  seal_of_command = 22,
  instant_poison = 23,
  deadly_poison = 24,
  blade_flurry = 25,
  add_critical_percent = 26,
  ghostly_strike = 27,
  disappear = 28,
  hemorrhage = 29,
  seal_of_justice = 30,
  damage_link = 31,
  continue_cure = 32,
  life_burst = 33,
  corruption = 34,
  death_coil = 35,
  redemption_ghost = 36,
  pain = 37,
  dark_mark = 38,
  plague = 39,
  add_source_hp = 40,
  mark = 41,
  add_cure_effect = 42,
  wild = 43,
  add_dodge_percent = 44,
  impaling = 45,
  reduce_cure_effect = 46,
  be_attack_damage = 47,
  reduce_damage = 48,
  fury = 49,
  reckless = 50,
  life_steal = 51,
  slow_down = 52,
  weapon_deterrence = 53,
  transform = 54,
  sacrifice = 55,
  devotion = 56,
  hunter_mark = 57,
  double_attack = 58,
  shield = 59,
  knight_bless = 60,
  warlock_sacrifice = 61,
  warlock_curse = 62,
  add_damage = 63,
  punish_halo = 64,
  reduce_accurate_rate = 65,
  poison = 66,
  pulse_instance = 67
};
bool BuffType_IsValid(int value);
const BuffType BuffType_MIN = add_level2;
const BuffType BuffType_MAX = pulse_instance;
const int BuffType_ARRAYSIZE = BuffType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BuffType_descriptor();
inline const ::std::string& BuffType_Name(BuffType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BuffType_descriptor(), value);
}
inline bool BuffType_Parse(
    const ::std::string& name, BuffType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BuffType>(
    BuffType_descriptor(), name, value);
}
enum TargetSortType {
  INVALID = 0,
  RANGE = 1,
  RANDOM_SEL = 2,
  HATRED = 3,
  LOW_HP_PERCENT = 4,
  LOW_HP = 5,
  REVERSER_RANGE = 6,
  USE_SKILL_TAR_LOGIC = 99
};
bool TargetSortType_IsValid(int value);
const TargetSortType TargetSortType_MIN = INVALID;
const TargetSortType TargetSortType_MAX = USE_SKILL_TAR_LOGIC;
const int TargetSortType_ARRAYSIZE = TargetSortType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TargetSortType_descriptor();
inline const ::std::string& TargetSortType_Name(TargetSortType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TargetSortType_descriptor(), value);
}
inline bool TargetSortType_Parse(
    const ::std::string& name, TargetSortType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TargetSortType>(
    TargetSortType_descriptor(), name, value);
}
enum ImpactEffectType {
  BadImpact = -1,
  NormalImpact = 0,
  GoodImpact = 1
};
bool ImpactEffectType_IsValid(int value);
const ImpactEffectType ImpactEffectType_MIN = BadImpact;
const ImpactEffectType ImpactEffectType_MAX = GoodImpact;
const int ImpactEffectType_ARRAYSIZE = ImpactEffectType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ImpactEffectType_descriptor();
inline const ::std::string& ImpactEffectType_Name(ImpactEffectType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ImpactEffectType_descriptor(), value);
}
inline bool ImpactEffectType_Parse(
    const ::std::string& name, ImpactEffectType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ImpactEffectType>(
    ImpactEffectType_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Config::BFState>() {
  return ::Config::BFState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Config::BattleObjectAbility>() {
  return ::Config::BattleObjectAbility_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Config::BattleObjectStatus>() {
  return ::Config::BattleObjectStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Config::ActivityGroup>() {
  return ::Config::ActivityGroup_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Config::DrawType>() {
  return ::Config::DrawType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Config::EquipmentSlot>() {
  return ::Config::EquipmentSlot_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Config::EquipmentType>() {
  return ::Config::EquipmentType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Config::WeaponType>() {
  return ::Config::WeaponType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Config::EquipmentColor>() {
  return ::Config::EquipmentColor_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Config::ItemType>() {
  return ::Config::ItemType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Config::ItemAddLogType>() {
  return ::Config::ItemAddLogType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Config::ItemDelLogType>() {
  return ::Config::ItemDelLogType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Config::MarketType>() {
  return ::Config::MarketType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Config::MarketItemGroup>() {
  return ::Config::MarketItemGroup_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Config::FinishType>() {
  return ::Config::FinishType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Config::TargetFinishType>() {
  return ::Config::TargetFinishType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Config::TargetResolveType>() {
  return ::Config::TargetResolveType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Config::SubFinishType>() {
  return ::Config::SubFinishType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Config::MissionType>() {
  return ::Config::MissionType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Config::NpcType>() {
  return ::Config::NpcType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Config::VisibleType>() {
  return ::Config::VisibleType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Config::MonsterType>() {
  return ::Config::MonsterType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Config::AttackType>() {
  return ::Config::AttackType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Config::ItemPackageType>() {
  return ::Config::ItemPackageType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Config::SkillType>() {
  return ::Config::SkillType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Config::AreaType>() {
  return ::Config::AreaType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Config::TargetCamp>() {
  return ::Config::TargetCamp_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Config::PropertyReviseValueType>() {
  return ::Config::PropertyReviseValueType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Config::BuffType>() {
  return ::Config::BuffType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Config::TargetSortType>() {
  return ::Config::TargetSortType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Config::ImpactEffectType>() {
  return ::Config::ImpactEffectType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AllConfigEnum_2eproto__INCLUDED
