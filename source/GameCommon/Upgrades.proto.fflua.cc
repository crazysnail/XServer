// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Upgrades.proto
#include "Upgrades.pb.h"
#include "Upgrades.proto.fflua.h"
namespace Packet {
bool UpgradeItemInfo_fflua_reg(lua_State* state)
{
//for decltype
	UpgradeItemInfo* message(nullptr);
	message;
	ff::fflua_register_t<UpgradeItemInfo, ctor()>(state, "UpgradeItemInfo", "google::protobuf::Message")
		// required fixed64 item_guid = 1;
		.def(&UpgradeItemInfo::item_guid, "item_guid")
		.def(&UpgradeItemInfo::set_item_guid, "set_item_guid")
		// required int32 item_amount = 2;
		.def(&UpgradeItemInfo::item_amount, "item_amount")
		.def(&UpgradeItemInfo::set_item_amount, "set_item_amount")
		.def(&UpgradeItemInfo::ByteSize, "ByteSize")
		.def(&UpgradeItemInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool UpgradeInfo_fflua_reg(lua_State* state)
{
//for decltype
	UpgradeInfo* message(nullptr);
	message;
	ff::fflua_register_t<UpgradeInfo, ctor()>(state, "UpgradeInfo", "google::protobuf::Message")
		// required fixed64 actor_guid = 1;
		.def(&UpgradeInfo::actor_guid, "actor_guid")
		.def(&UpgradeInfo::set_actor_guid, "set_actor_guid")
		// repeated .Packet.UpgradeItemInfo items = 2;
		.def(&UpgradeInfo::items_size, "items_size")
		.def<decltype(message->items(0)) (UpgradeInfo::*)(int) const>(&UpgradeInfo::items, "items")
		.def<decltype(message->mutable_items(0)) (UpgradeInfo::*)(int)>(&UpgradeInfo::mutable_items, "mutable_items")
		.def(&UpgradeInfo::add_items, "add_items")
		.def(&UpgradeInfo::ByteSize, "ByteSize")
		.def(&UpgradeInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool UpgradeColorReq_fflua_reg(lua_State* state)
{
//for decltype
	UpgradeColorReq* message(nullptr);
	message;
	ff::fflua_register_t<UpgradeColorReq, ctor()>(state, "UpgradeColorReq", "google::protobuf::Message")
		// required .Packet.UpgradeInfo info = 1;
		.def(&UpgradeColorReq::info, "info")
		.def(&UpgradeColorReq::mutable_info, "mutable_info")
		// required .Packet.ActorColor up_to_color = 2;
		.def(&UpgradeColorReq::up_to_color, "up_to_color")
		.def(&UpgradeColorReq::set_up_to_color, "set_up_to_color")
		.def(&UpgradeColorReq::ByteSize, "ByteSize")
		.def(&UpgradeColorReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool UpgradeColorReply_fflua_reg(lua_State* state)
{
//for decltype
	UpgradeColorReply* message(nullptr);
	message;
	ff::fflua_register_t<UpgradeColorReply, ctor()>(state, "UpgradeColorReply", "google::protobuf::Message")
		// required fixed64 actor_guid = 1;
		.def(&UpgradeColorReply::actor_guid, "actor_guid")
		.def(&UpgradeColorReply::set_actor_guid, "set_actor_guid")
		// required .Packet.ActorColor now_color = 2;
		.def(&UpgradeColorReply::now_color, "now_color")
		.def(&UpgradeColorReply::set_now_color, "set_now_color")
		// optional .Packet.BattleInfo prev = 3;
		.def(&UpgradeColorReply::prev, "prev")
		.def(&UpgradeColorReply::mutable_prev, "mutable_prev")
		.def(&UpgradeColorReply::has_prev, "has_prev")
		// optional .Packet.BattleInfo curr = 4;
		.def(&UpgradeColorReply::curr, "curr")
		.def(&UpgradeColorReply::mutable_curr, "mutable_curr")
		.def(&UpgradeColorReply::has_curr, "has_curr")
		.def(&UpgradeColorReply::ByteSize, "ByteSize")
		.def(&UpgradeColorReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool UpgradeLevelReq_fflua_reg(lua_State* state)
{
//for decltype
	UpgradeLevelReq* message(nullptr);
	message;
	ff::fflua_register_t<UpgradeLevelReq, ctor()>(state, "UpgradeLevelReq", "google::protobuf::Message")
		// required bool one_key = 1;
		.def(&UpgradeLevelReq::one_key, "one_key")
		.def(&UpgradeLevelReq::set_one_key, "set_one_key")
		// required fixed64 actor_guid = 2;
		.def(&UpgradeLevelReq::actor_guid, "actor_guid")
		.def(&UpgradeLevelReq::set_actor_guid, "set_actor_guid")
		.def(&UpgradeLevelReq::ByteSize, "ByteSize")
		.def(&UpgradeLevelReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool UpgradeLevelReply_fflua_reg(lua_State* state)
{
//for decltype
	UpgradeLevelReply* message(nullptr);
	message;
	ff::fflua_register_t<UpgradeLevelReply, ctor()>(state, "UpgradeLevelReply", "google::protobuf::Message")
		// required .Packet.UpgradeLevelReq req = 1;
		.def(&UpgradeLevelReply::req, "req")
		.def(&UpgradeLevelReply::mutable_req, "mutable_req")
		// required .Packet.UpgradeLevelReply.Result result = 2;
		.def(&UpgradeLevelReply::result, "result")
		.def(&UpgradeLevelReply::set_result, "set_result")
		.def(&UpgradeLevelReply::ByteSize, "ByteSize")
		.def(&UpgradeLevelReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool UpgradeStarReq_fflua_reg(lua_State* state)
{
//for decltype
	UpgradeStarReq* message(nullptr);
	message;
	ff::fflua_register_t<UpgradeStarReq, ctor()>(state, "UpgradeStarReq", "google::protobuf::Message")
		// required .Packet.UpgradeInfo info = 1;
		.def(&UpgradeStarReq::info, "info")
		.def(&UpgradeStarReq::mutable_info, "mutable_info")
		// required .Packet.ActorStar up_to_star = 2;
		.def(&UpgradeStarReq::up_to_star, "up_to_star")
		.def(&UpgradeStarReq::set_up_to_star, "set_up_to_star")
		.def(&UpgradeStarReq::ByteSize, "ByteSize")
		.def(&UpgradeStarReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool UpgradeStarReply_fflua_reg(lua_State* state)
{
//for decltype
	UpgradeStarReply* message(nullptr);
	message;
	ff::fflua_register_t<UpgradeStarReply, ctor()>(state, "UpgradeStarReply", "google::protobuf::Message")
		// required .Packet.UpgradeStarReq req = 1;
		.def(&UpgradeStarReply::req, "req")
		.def(&UpgradeStarReply::mutable_req, "mutable_req")
		// required .Packet.UpgradeStarReply.Result result = 2;
		.def(&UpgradeStarReply::result, "result")
		.def(&UpgradeStarReply::set_result, "set_result")
		// optional .Packet.ActorStar now_star = 3;
		.def(&UpgradeStarReply::now_star, "now_star")
		.def(&UpgradeStarReply::set_now_star, "set_now_star")
		.def(&UpgradeStarReply::has_now_star, "has_now_star")
		// optional .Packet.BattleInfo prev = 4;
		.def(&UpgradeStarReply::prev, "prev")
		.def(&UpgradeStarReply::mutable_prev, "mutable_prev")
		.def(&UpgradeStarReply::has_prev, "has_prev")
		// optional .Packet.BattleInfo curr = 5;
		.def(&UpgradeStarReply::curr, "curr")
		.def(&UpgradeStarReply::mutable_curr, "mutable_curr")
		.def(&UpgradeStarReply::has_curr, "has_curr")
		.def(&UpgradeStarReply::ByteSize, "ByteSize")
		.def(&UpgradeStarReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool UpgradeSkillReq_fflua_reg(lua_State* state)
{
//for decltype
	UpgradeSkillReq* message(nullptr);
	message;
	ff::fflua_register_t<UpgradeSkillReq, ctor()>(state, "UpgradeSkillReq", "google::protobuf::Message")
		// required fixed64 actor_guid = 1;
		.def(&UpgradeSkillReq::actor_guid, "actor_guid")
		.def(&UpgradeSkillReq::set_actor_guid, "set_actor_guid")
		// repeated fixed64 skill_guid = 2;
		.def(&UpgradeSkillReq::skill_guid_size, "skill_guid_size")
		.def<decltype(message->skill_guid(0)) (UpgradeSkillReq::*)(int) const>(&UpgradeSkillReq::skill_guid, "skill_guid")
		.def<void(UpgradeSkillReq::*)(int, const decltype(message->skill_guid(0)))>(&UpgradeSkillReq::set_skill_guid, "set_skill_guid")
		.def(&UpgradeSkillReq::add_skill_guid, "add_skill_guid")
		// repeated int32 up_to_level = 3;
		.def(&UpgradeSkillReq::up_to_level_size, "up_to_level_size")
		.def<decltype(message->up_to_level(0)) (UpgradeSkillReq::*)(int) const>(&UpgradeSkillReq::up_to_level, "up_to_level")
		.def<void(UpgradeSkillReq::*)(int, const decltype(message->up_to_level(0)))>(&UpgradeSkillReq::set_up_to_level, "set_up_to_level")
		.def(&UpgradeSkillReq::add_up_to_level, "add_up_to_level")
		.def(&UpgradeSkillReq::ByteSize, "ByteSize")
		.def(&UpgradeSkillReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool EnhenceEquipReq_fflua_reg(lua_State* state)
{
//for decltype
	EnhenceEquipReq* message(nullptr);
	message;
	ff::fflua_register_t<EnhenceEquipReq, ctor()>(state, "EnhenceEquipReq", "google::protobuf::Message")
		// repeated fixed64 equip_guid = 1;
		.def(&EnhenceEquipReq::equip_guid_size, "equip_guid_size")
		.def<decltype(message->equip_guid(0)) (EnhenceEquipReq::*)(int) const>(&EnhenceEquipReq::equip_guid, "equip_guid")
		.def<void(EnhenceEquipReq::*)(int, const decltype(message->equip_guid(0)))>(&EnhenceEquipReq::set_equip_guid, "set_equip_guid")
		.def(&EnhenceEquipReq::add_equip_guid, "add_equip_guid")
		// required bool is_max = 2;
		.def(&EnhenceEquipReq::is_max, "is_max")
		.def(&EnhenceEquipReq::set_is_max, "set_is_max")
		.def(&EnhenceEquipReq::ByteSize, "ByteSize")
		.def(&EnhenceEquipReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool AddEnchantSlotReq_fflua_reg(lua_State* state)
{
//for decltype
	AddEnchantSlotReq* message(nullptr);
	message;
	ff::fflua_register_t<AddEnchantSlotReq, ctor()>(state, "AddEnchantSlotReq", "google::protobuf::Message")
		// required fixed64 equip_guid = 1;
		.def(&AddEnchantSlotReq::equip_guid, "equip_guid")
		.def(&AddEnchantSlotReq::set_equip_guid, "set_equip_guid")
		// required int32 slot_index = 2;
		.def(&AddEnchantSlotReq::slot_index, "slot_index")
		.def(&AddEnchantSlotReq::set_slot_index, "set_slot_index")
		.def(&AddEnchantSlotReq::ByteSize, "ByteSize")
		.def(&AddEnchantSlotReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool EnchantEquipReq_fflua_reg(lua_State* state)
{
//for decltype
	EnchantEquipReq* message(nullptr);
	message;
	ff::fflua_register_t<EnchantEquipReq, ctor()>(state, "EnchantEquipReq", "google::protobuf::Message")
		// required fixed64 equip_guid = 1;
		.def(&EnchantEquipReq::equip_guid, "equip_guid")
		.def(&EnchantEquipReq::set_equip_guid, "set_equip_guid")
		// repeated int32 lock_slots = 2;
		.def(&EnchantEquipReq::lock_slots_size, "lock_slots_size")
		.def<decltype(message->lock_slots(0)) (EnchantEquipReq::*)(int) const>(&EnchantEquipReq::lock_slots, "lock_slots")
		.def<void(EnchantEquipReq::*)(int, const decltype(message->lock_slots(0)))>(&EnchantEquipReq::set_lock_slots, "set_lock_slots")
		.def(&EnchantEquipReq::add_lock_slots, "add_lock_slots")
		// repeated .Packet.UpgradeItemInfo items = 3;
		.def(&EnchantEquipReq::items_size, "items_size")
		.def<decltype(message->items(0)) (EnchantEquipReq::*)(int) const>(&EnchantEquipReq::items, "items")
		.def<decltype(message->mutable_items(0)) (EnchantEquipReq::*)(int)>(&EnchantEquipReq::mutable_items, "mutable_items")
		.def(&EnchantEquipReq::add_items, "add_items")
		.def(&EnchantEquipReq::ByteSize, "ByteSize")
		.def(&EnchantEquipReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool BatchEnchantEquipReq_fflua_reg(lua_State* state)
{
//for decltype
	BatchEnchantEquipReq* message(nullptr);
	message;
	ff::fflua_register_t<BatchEnchantEquipReq, ctor()>(state, "BatchEnchantEquipReq", "google::protobuf::Message")
		// required fixed64 equip_guid = 1;
		.def(&BatchEnchantEquipReq::equip_guid, "equip_guid")
		.def(&BatchEnchantEquipReq::set_equip_guid, "set_equip_guid")
		// repeated int32 lock_slots = 2;
		.def(&BatchEnchantEquipReq::lock_slots_size, "lock_slots_size")
		.def<decltype(message->lock_slots(0)) (BatchEnchantEquipReq::*)(int) const>(&BatchEnchantEquipReq::lock_slots, "lock_slots")
		.def<void(BatchEnchantEquipReq::*)(int, const decltype(message->lock_slots(0)))>(&BatchEnchantEquipReq::set_lock_slots, "set_lock_slots")
		.def(&BatchEnchantEquipReq::add_lock_slots, "add_lock_slots")
		// repeated .Packet.UpgradeItemInfo item = 3;
		.def(&BatchEnchantEquipReq::item_size, "item_size")
		.def<decltype(message->item(0)) (BatchEnchantEquipReq::*)(int) const>(&BatchEnchantEquipReq::item, "item")
		.def<decltype(message->mutable_item(0)) (BatchEnchantEquipReq::*)(int)>(&BatchEnchantEquipReq::mutable_item, "mutable_item")
		.def(&BatchEnchantEquipReq::add_item, "add_item")
		.def(&BatchEnchantEquipReq::ByteSize, "ByteSize")
		.def(&BatchEnchantEquipReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool EnchantPreviewEle_fflua_reg(lua_State* state)
{
//for decltype
	EnchantPreviewEle* message(nullptr);
	message;
	ff::fflua_register_t<EnchantPreviewEle, ctor()>(state, "EnchantPreviewEle", "google::protobuf::Message")
		// required string effect_type = 1;
		.def(&EnchantPreviewEle::effect_type, "effect_type")
		.def<void (EnchantPreviewEle::*)(const std::string&)>(&EnchantPreviewEle::set_effect_type, "set_effect_type")
		// required int32 effect_value = 2;
		.def(&EnchantPreviewEle::effect_value, "effect_value")
		.def(&EnchantPreviewEle::set_effect_value, "set_effect_value")
		// required int32 max_value = 3;
		.def(&EnchantPreviewEle::max_value, "max_value")
		.def(&EnchantPreviewEle::set_max_value, "set_max_value")
		.def(&EnchantPreviewEle::ByteSize, "ByteSize")
		.def(&EnchantPreviewEle::SetInitialized, "SetInitialized")
		;
	return true;
}
bool EnchantPreview_fflua_reg(lua_State* state)
{
//for decltype
	EnchantPreview* message(nullptr);
	message;
	ff::fflua_register_t<EnchantPreview, ctor()>(state, "EnchantPreview", "google::protobuf::Message")
		// repeated .Packet.EnchantPreviewEle elements = 1;
		.def(&EnchantPreview::elements_size, "elements_size")
		.def<decltype(message->elements(0)) (EnchantPreview::*)(int) const>(&EnchantPreview::elements, "elements")
		.def<decltype(message->mutable_elements(0)) (EnchantPreview::*)(int)>(&EnchantPreview::mutable_elements, "mutable_elements")
		.def(&EnchantPreview::add_elements, "add_elements")
		.def(&EnchantPreview::ByteSize, "ByteSize")
		.def(&EnchantPreview::SetInitialized, "SetInitialized")
		;
	return true;
}
bool BatchEnchantEquipReply_fflua_reg(lua_State* state)
{
//for decltype
	BatchEnchantEquipReply* message(nullptr);
	message;
	ff::fflua_register_t<BatchEnchantEquipReply, ctor()>(state, "BatchEnchantEquipReply", "google::protobuf::Message")
		// required .Packet.BatchEnchantEquipReq req = 1;
		.def(&BatchEnchantEquipReply::req, "req")
		.def(&BatchEnchantEquipReply::mutable_req, "mutable_req")
		// repeated .Packet.EnchantPreview previews = 2;
		.def(&BatchEnchantEquipReply::previews_size, "previews_size")
		.def<decltype(message->previews(0)) (BatchEnchantEquipReply::*)(int) const>(&BatchEnchantEquipReply::previews, "previews")
		.def<decltype(message->mutable_previews(0)) (BatchEnchantEquipReply::*)(int)>(&BatchEnchantEquipReply::mutable_previews, "mutable_previews")
		.def(&BatchEnchantEquipReply::add_previews, "add_previews")
		.def(&BatchEnchantEquipReply::ByteSize, "ByteSize")
		.def(&BatchEnchantEquipReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool BatchEnchantEquipConfirmReq_fflua_reg(lua_State* state)
{
//for decltype
	BatchEnchantEquipConfirmReq* message(nullptr);
	message;
	ff::fflua_register_t<BatchEnchantEquipConfirmReq, ctor()>(state, "BatchEnchantEquipConfirmReq", "google::protobuf::Message")
		// required fixed64 equip_guid = 1;
		.def(&BatchEnchantEquipConfirmReq::equip_guid, "equip_guid")
		.def(&BatchEnchantEquipConfirmReq::set_equip_guid, "set_equip_guid")
		// required int32 confirm_index = 2;
		.def(&BatchEnchantEquipConfirmReq::confirm_index, "confirm_index")
		.def(&BatchEnchantEquipConfirmReq::set_confirm_index, "set_confirm_index")
		.def(&BatchEnchantEquipConfirmReq::ByteSize, "ByteSize")
		.def(&BatchEnchantEquipConfirmReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool BatchEnchantEquipConfirmReply_fflua_reg(lua_State* state)
{
//for decltype
	BatchEnchantEquipConfirmReply* message(nullptr);
	message;
	ff::fflua_register_t<BatchEnchantEquipConfirmReply, ctor()>(state, "BatchEnchantEquipConfirmReply", "google::protobuf::Message")
		// required .Packet.BatchEnchantEquipConfirmReq req = 1;
		.def(&BatchEnchantEquipConfirmReply::req, "req")
		.def(&BatchEnchantEquipConfirmReply::mutable_req, "mutable_req")
		// required .Packet.BatchEnchantEquipConfirmReply.Result result = 2;
		.def(&BatchEnchantEquipConfirmReply::result, "result")
		.def(&BatchEnchantEquipConfirmReply::set_result, "set_result")
		.def(&BatchEnchantEquipConfirmReply::ByteSize, "ByteSize")
		.def(&BatchEnchantEquipConfirmReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool InsetEquipReq_fflua_reg(lua_State* state)
{
//for decltype
	InsetEquipReq* message(nullptr);
	message;
	ff::fflua_register_t<InsetEquipReq, ctor()>(state, "InsetEquipReq", "google::protobuf::Message")
		// repeated fixed64 equip_guid = 1;
		.def(&InsetEquipReq::equip_guid_size, "equip_guid_size")
		.def<decltype(message->equip_guid(0)) (InsetEquipReq::*)(int) const>(&InsetEquipReq::equip_guid, "equip_guid")
		.def<void(InsetEquipReq::*)(int, const decltype(message->equip_guid(0)))>(&InsetEquipReq::set_equip_guid, "set_equip_guid")
		.def(&InsetEquipReq::add_equip_guid, "add_equip_guid")
		// repeated int32 gem_config_id = 2;
		.def(&InsetEquipReq::gem_config_id_size, "gem_config_id_size")
		.def<decltype(message->gem_config_id(0)) (InsetEquipReq::*)(int) const>(&InsetEquipReq::gem_config_id, "gem_config_id")
		.def<void(InsetEquipReq::*)(int, const decltype(message->gem_config_id(0)))>(&InsetEquipReq::set_gem_config_id, "set_gem_config_id")
		.def(&InsetEquipReq::add_gem_config_id, "add_gem_config_id")
		// repeated int32 index = 3;
		.def(&InsetEquipReq::index_size, "index_size")
		.def<decltype(message->index(0)) (InsetEquipReq::*)(int) const>(&InsetEquipReq::index, "index")
		.def<void(InsetEquipReq::*)(int, const decltype(message->index(0)))>(&InsetEquipReq::set_index, "set_index")
		.def(&InsetEquipReq::add_index, "add_index")
		.def(&InsetEquipReq::ByteSize, "ByteSize")
		.def(&InsetEquipReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool TakeOutGemReq_fflua_reg(lua_State* state)
{
//for decltype
	TakeOutGemReq* message(nullptr);
	message;
	ff::fflua_register_t<TakeOutGemReq, ctor()>(state, "TakeOutGemReq", "google::protobuf::Message")
		// repeated fixed64 equip_guid = 1;
		.def(&TakeOutGemReq::equip_guid_size, "equip_guid_size")
		.def<decltype(message->equip_guid(0)) (TakeOutGemReq::*)(int) const>(&TakeOutGemReq::equip_guid, "equip_guid")
		.def<void(TakeOutGemReq::*)(int, const decltype(message->equip_guid(0)))>(&TakeOutGemReq::set_equip_guid, "set_equip_guid")
		.def(&TakeOutGemReq::add_equip_guid, "add_equip_guid")
		// repeated int32 gem_config_id = 2;
		.def(&TakeOutGemReq::gem_config_id_size, "gem_config_id_size")
		.def<decltype(message->gem_config_id(0)) (TakeOutGemReq::*)(int) const>(&TakeOutGemReq::gem_config_id, "gem_config_id")
		.def<void(TakeOutGemReq::*)(int, const decltype(message->gem_config_id(0)))>(&TakeOutGemReq::set_gem_config_id, "set_gem_config_id")
		.def(&TakeOutGemReq::add_gem_config_id, "add_gem_config_id")
		// repeated int32 index = 3;
		.def(&TakeOutGemReq::index_size, "index_size")
		.def<decltype(message->index(0)) (TakeOutGemReq::*)(int) const>(&TakeOutGemReq::index, "index")
		.def<void(TakeOutGemReq::*)(int, const decltype(message->index(0)))>(&TakeOutGemReq::set_index, "set_index")
		.def(&TakeOutGemReq::add_index, "add_index")
		.def(&TakeOutGemReq::ByteSize, "ByteSize")
		.def(&TakeOutGemReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool EquipInheritReq_fflua_reg(lua_State* state)
{
//for decltype
	EquipInheritReq* message(nullptr);
	message;
	ff::fflua_register_t<EquipInheritReq, ctor()>(state, "EquipInheritReq", "google::protobuf::Message")
		// required fixed64 old_equip_guid = 1;
		.def(&EquipInheritReq::old_equip_guid, "old_equip_guid")
		.def(&EquipInheritReq::set_old_equip_guid, "set_old_equip_guid")
		// required fixed64 new_equip_guid = 2;
		.def(&EquipInheritReq::new_equip_guid, "new_equip_guid")
		.def(&EquipInheritReq::set_new_equip_guid, "set_new_equip_guid")
		.def(&EquipInheritReq::ByteSize, "ByteSize")
		.def(&EquipInheritReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool FixEquipReq_fflua_reg(lua_State* state)
{
//for decltype
	FixEquipReq* message(nullptr);
	message;
	ff::fflua_register_t<FixEquipReq, ctor()>(state, "FixEquipReq", "google::protobuf::Message")
		// repeated fixed64 equip_guid = 1;
		.def(&FixEquipReq::equip_guid_size, "equip_guid_size")
		.def<decltype(message->equip_guid(0)) (FixEquipReq::*)(int) const>(&FixEquipReq::equip_guid, "equip_guid")
		.def<void(FixEquipReq::*)(int, const decltype(message->equip_guid(0)))>(&FixEquipReq::set_equip_guid, "set_equip_guid")
		.def(&FixEquipReq::add_equip_guid, "add_equip_guid")
		.def(&FixEquipReq::ByteSize, "ByteSize")
		.def(&FixEquipReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GemFusionReq_fflua_reg(lua_State* state)
{
//for decltype
	GemFusionReq* message(nullptr);
	message;
	ff::fflua_register_t<GemFusionReq, ctor()>(state, "GemFusionReq", "google::protobuf::Message")
		// required fixed64 gem_guid = 1;
		.def(&GemFusionReq::gem_guid, "gem_guid")
		.def(&GemFusionReq::set_gem_guid, "set_gem_guid")
		// required bool fusion_all = 2;
		.def(&GemFusionReq::fusion_all, "fusion_all")
		.def(&GemFusionReq::set_fusion_all, "set_fusion_all")
		// required bool cannot_fail = 3;
		.def(&GemFusionReq::cannot_fail, "cannot_fail")
		.def(&GemFusionReq::set_cannot_fail, "set_cannot_fail")
		.def(&GemFusionReq::ByteSize, "ByteSize")
		.def(&GemFusionReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool CG_GemFusion_fflua_reg(lua_State* state)
{
//for decltype
	CG_GemFusion* message(nullptr);
	message;
	ff::fflua_register_t<CG_GemFusion, ctor()>(state, "CG_GemFusion", "google::protobuf::Message")
		// repeated fixed64 bag_gem_guids = 1;
		.def(&CG_GemFusion::bag_gem_guids_size, "bag_gem_guids_size")
		.def<decltype(message->bag_gem_guids(0)) (CG_GemFusion::*)(int) const>(&CG_GemFusion::bag_gem_guids, "bag_gem_guids")
		.def<void(CG_GemFusion::*)(int, const decltype(message->bag_gem_guids(0)))>(&CG_GemFusion::set_bag_gem_guids, "set_bag_gem_guids")
		.def(&CG_GemFusion::add_bag_gem_guids, "add_bag_gem_guids")
		// repeated int32 bag_gem_counts = 2;
		.def(&CG_GemFusion::bag_gem_counts_size, "bag_gem_counts_size")
		.def<decltype(message->bag_gem_counts(0)) (CG_GemFusion::*)(int) const>(&CG_GemFusion::bag_gem_counts, "bag_gem_counts")
		.def<void(CG_GemFusion::*)(int, const decltype(message->bag_gem_counts(0)))>(&CG_GemFusion::set_bag_gem_counts, "set_bag_gem_counts")
		.def(&CG_GemFusion::add_bag_gem_counts, "add_bag_gem_counts")
		// repeated int32 buy_gem_ids = 3;
		.def(&CG_GemFusion::buy_gem_ids_size, "buy_gem_ids_size")
		.def<decltype(message->buy_gem_ids(0)) (CG_GemFusion::*)(int) const>(&CG_GemFusion::buy_gem_ids, "buy_gem_ids")
		.def<void(CG_GemFusion::*)(int, const decltype(message->buy_gem_ids(0)))>(&CG_GemFusion::set_buy_gem_ids, "set_buy_gem_ids")
		.def(&CG_GemFusion::add_buy_gem_ids, "add_buy_gem_ids")
		// repeated int32 buy_gem_counts = 4;
		.def(&CG_GemFusion::buy_gem_counts_size, "buy_gem_counts_size")
		.def<decltype(message->buy_gem_counts(0)) (CG_GemFusion::*)(int) const>(&CG_GemFusion::buy_gem_counts, "buy_gem_counts")
		.def<void(CG_GemFusion::*)(int, const decltype(message->buy_gem_counts(0)))>(&CG_GemFusion::set_buy_gem_counts, "set_buy_gem_counts")
		.def(&CG_GemFusion::add_buy_gem_counts, "add_buy_gem_counts")
		// required int32 target_gem_id = 5;
		.def(&CG_GemFusion::target_gem_id, "target_gem_id")
		.def(&CG_GemFusion::set_target_gem_id, "set_target_gem_id")
		// optional fixed64 equip_guid = 6;
		.def(&CG_GemFusion::equip_guid, "equip_guid")
		.def(&CG_GemFusion::set_equip_guid, "set_equip_guid")
		.def(&CG_GemFusion::has_equip_guid, "has_equip_guid")
		// optional int32 gem_index = 7;
		.def(&CG_GemFusion::gem_index, "gem_index")
		.def(&CG_GemFusion::set_gem_index, "set_gem_index")
		.def(&CG_GemFusion::has_gem_index, "has_gem_index")
		.def(&CG_GemFusion::ByteSize, "ByteSize")
		.def(&CG_GemFusion::SetInitialized, "SetInitialized")
		;
	return true;
}
bool DismantleEquipReq_fflua_reg(lua_State* state)
{
//for decltype
	DismantleEquipReq* message(nullptr);
	message;
	ff::fflua_register_t<DismantleEquipReq, ctor()>(state, "DismantleEquipReq", "google::protobuf::Message")
		// repeated fixed64 equip_guids = 1;
		.def(&DismantleEquipReq::equip_guids_size, "equip_guids_size")
		.def<decltype(message->equip_guids(0)) (DismantleEquipReq::*)(int) const>(&DismantleEquipReq::equip_guids, "equip_guids")
		.def<void(DismantleEquipReq::*)(int, const decltype(message->equip_guids(0)))>(&DismantleEquipReq::set_equip_guids, "set_equip_guids")
		.def(&DismantleEquipReq::add_equip_guids, "add_equip_guids")
		.def(&DismantleEquipReq::ByteSize, "ByteSize")
		.def(&DismantleEquipReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool EquipMagicalReq_fflua_reg(lua_State* state)
{
//for decltype
	EquipMagicalReq* message(nullptr);
	message;
	ff::fflua_register_t<EquipMagicalReq, ctor()>(state, "EquipMagicalReq", "google::protobuf::Message")
		// required fixed64 src_guid = 1;
		.def(&EquipMagicalReq::src_guid, "src_guid")
		.def(&EquipMagicalReq::set_src_guid, "set_src_guid")
		// required fixed64 des_guid = 2;
		.def(&EquipMagicalReq::des_guid, "des_guid")
		.def(&EquipMagicalReq::set_des_guid, "set_des_guid")
		.def(&EquipMagicalReq::ByteSize, "ByteSize")
		.def(&EquipMagicalReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool Upgrades_fflua_regist_all(lua_State* state)
{
	UpgradeItemInfo_fflua_reg(state);
	UpgradeInfo_fflua_reg(state);
	UpgradeColorReq_fflua_reg(state);
	UpgradeColorReply_fflua_reg(state);
	UpgradeLevelReq_fflua_reg(state);
	UpgradeLevelReply_fflua_reg(state);
	UpgradeStarReq_fflua_reg(state);
	UpgradeStarReply_fflua_reg(state);
	UpgradeSkillReq_fflua_reg(state);
	EnhenceEquipReq_fflua_reg(state);
	AddEnchantSlotReq_fflua_reg(state);
	EnchantEquipReq_fflua_reg(state);
	BatchEnchantEquipReq_fflua_reg(state);
	EnchantPreviewEle_fflua_reg(state);
	EnchantPreview_fflua_reg(state);
	BatchEnchantEquipReply_fflua_reg(state);
	BatchEnchantEquipConfirmReq_fflua_reg(state);
	BatchEnchantEquipConfirmReply_fflua_reg(state);
	InsetEquipReq_fflua_reg(state);
	TakeOutGemReq_fflua_reg(state);
	EquipInheritReq_fflua_reg(state);
	FixEquipReq_fflua_reg(state);
	GemFusionReq_fflua_reg(state);
	CG_GemFusion_fflua_reg(state);
	DismantleEquipReq_fflua_reg(state);
	EquipMagicalReq_fflua_reg(state);
	return true;
}
}
