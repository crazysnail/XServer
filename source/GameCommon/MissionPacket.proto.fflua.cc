// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MissionPacket.proto
#include "MissionPacket.pb.h"
#include "MissionPacket.proto.fflua.h"
namespace Packet {
bool Mission_fflua_reg(lua_State* state)
{
//for decltype
	Mission* message(nullptr);
	message;
	ff::fflua_register_t<Mission, ctor()>(state, "Mission", "google::protobuf::Message")
		// required fixed64 guid = 1;
		.def(&Mission::guid, "guid")
		.def(&Mission::set_guid, "set_guid")
		// required fixed64 player_guid = 2;
		.def(&Mission::player_guid, "player_guid")
		.def(&Mission::set_player_guid, "set_player_guid")
		// required .Packet.MissionState state = 3;
		.def(&Mission::state, "state")
		.def(&Mission::set_state, "set_state")
		// repeated int32 param = 4;
		.def(&Mission::param_size, "param_size")
		.def<decltype(message->param(0)) (Mission::*)(int) const>(&Mission::param, "param")
		.def<void(Mission::*)(int, const decltype(message->param(0)))>(&Mission::set_param, "set_param")
		.def(&Mission::add_param, "add_param")
		.def(&Mission::ByteSize, "ByteSize")
		.def(&Mission::SetInitialized, "SetInitialized")
		;
	return true;
}
bool MissionUpdateReply_fflua_reg(lua_State* state)
{
//for decltype
	MissionUpdateReply* message(nullptr);
	message;
	ff::fflua_register_t<MissionUpdateReply, ctor()>(state, "MissionUpdateReply", "google::protobuf::Message")
		// required .Packet.Mission mission = 1;
		.def(&MissionUpdateReply::mission, "mission")
		.def(&MissionUpdateReply::mutable_mission, "mutable_mission")
		.def(&MissionUpdateReply::ByteSize, "ByteSize")
		.def(&MissionUpdateReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool MissionListReply_fflua_reg(lua_State* state)
{
//for decltype
	MissionListReply* message(nullptr);
	message;
	ff::fflua_register_t<MissionListReply, ctor()>(state, "MissionListReply", "google::protobuf::Message")
		// repeated .Packet.Mission mission_list = 1;
		.def(&MissionListReply::mission_list_size, "mission_list_size")
		.def<decltype(message->mission_list(0)) (MissionListReply::*)(int) const>(&MissionListReply::mission_list, "mission_list")
		.def<decltype(message->mutable_mission_list(0)) (MissionListReply::*)(int)>(&MissionListReply::mutable_mission_list, "mutable_mission_list")
		.def(&MissionListReply::add_mission_list, "add_mission_list")
		.def(&MissionListReply::ByteSize, "ByteSize")
		.def(&MissionListReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool SyncMission_fflua_reg(lua_State* state)
{
//for decltype
	SyncMission* message(nullptr);
	message;
	ff::fflua_register_t<SyncMission, ctor()>(state, "SyncMission", "google::protobuf::Message")
		// required fixed64 src_guid = 1;
		.def(&SyncMission::src_guid, "src_guid")
		.def(&SyncMission::set_src_guid, "set_src_guid")
		// required .Config.MissionType type = 2;
		.def(&SyncMission::type, "type")
		.def(&SyncMission::set_type, "set_type")
		// required int32 time_mark = 3;
		.def(&SyncMission::time_mark, "time_mark")
		.def(&SyncMission::set_time_mark, "set_time_mark")
		.def(&SyncMission::ByteSize, "ByteSize")
		.def(&SyncMission::SetInitialized, "SetInitialized")
		;
	return true;
}
bool SyncMissionRequest_fflua_reg(lua_State* state)
{
//for decltype
	SyncMissionRequest* message(nullptr);
	message;
	ff::fflua_register_t<SyncMissionRequest, ctor()>(state, "SyncMissionRequest", "google::protobuf::Message")
		// required .Packet.SyncMission snc_msg = 1;
		.def(&SyncMissionRequest::snc_msg, "snc_msg")
		.def(&SyncMissionRequest::mutable_snc_msg, "mutable_snc_msg")
		// required bool agree = 2;
		.def(&SyncMissionRequest::agree, "agree")
		.def(&SyncMissionRequest::set_agree, "set_agree")
		.def(&SyncMissionRequest::ByteSize, "ByteSize")
		.def(&SyncMissionRequest::SetInitialized, "SetInitialized")
		;
	return true;
}
bool SyncMissionReply_fflua_reg(lua_State* state)
{
//for decltype
	SyncMissionReply* message(nullptr);
	message;
	ff::fflua_register_t<SyncMissionReply, ctor()>(state, "SyncMissionReply", "google::protobuf::Message")
		// required .Packet.SyncMission snc_msg = 1;
		.def(&SyncMissionReply::snc_msg, "snc_msg")
		.def(&SyncMissionReply::mutable_snc_msg, "mutable_snc_msg")
		// required bool agree = 2;
		.def(&SyncMissionReply::agree, "agree")
		.def(&SyncMissionReply::set_agree, "set_agree")
		.def(&SyncMissionReply::ByteSize, "ByteSize")
		.def(&SyncMissionReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool ClickChatMissionReq_fflua_reg(lua_State* state)
{
//for decltype
	ClickChatMissionReq* message(nullptr);
	message;
	ff::fflua_register_t<ClickChatMissionReq, ctor()>(state, "ClickChatMissionReq", "google::protobuf::Message")
		// required fixed64 srcplayer_guid = 1;
		.def(&ClickChatMissionReq::srcplayer_guid, "srcplayer_guid")
		.def(&ClickChatMissionReq::set_srcplayer_guid, "set_srcplayer_guid")
		// required int32 missionid = 2;
		.def(&ClickChatMissionReq::missionid, "missionid")
		.def(&ClickChatMissionReq::set_missionid, "set_missionid")
		// required string t_desc = 3;
		.def(&ClickChatMissionReq::t_desc, "t_desc")
		.def<void (ClickChatMissionReq::*)(const std::string&)>(&ClickChatMissionReq::set_t_desc, "set_t_desc")
		// required string s_desc = 4;
		.def(&ClickChatMissionReq::s_desc, "s_desc")
		.def<void (ClickChatMissionReq::*)(const std::string&)>(&ClickChatMissionReq::set_s_desc, "set_s_desc")
		// required string d_desc = 5;
		.def(&ClickChatMissionReq::d_desc, "d_desc")
		.def<void (ClickChatMissionReq::*)(const std::string&)>(&ClickChatMissionReq::set_d_desc, "set_d_desc")
		.def(&ClickChatMissionReq::ByteSize, "ByteSize")
		.def(&ClickChatMissionReq::SetInitialized, "SetInitialized")
		;
	return true;
}
bool ClickChatMissionReply_fflua_reg(lua_State* state)
{
//for decltype
	ClickChatMissionReply* message(nullptr);
	message;
	ff::fflua_register_t<ClickChatMissionReply, ctor()>(state, "ClickChatMissionReply", "google::protobuf::Message")
		// required int32 missionid = 1;
		.def(&ClickChatMissionReply::missionid, "missionid")
		.def(&ClickChatMissionReply::set_missionid, "set_missionid")
		// required string t_desc = 3;
		.def(&ClickChatMissionReply::t_desc, "t_desc")
		.def<void (ClickChatMissionReply::*)(const std::string&)>(&ClickChatMissionReply::set_t_desc, "set_t_desc")
		// required string s_desc = 4;
		.def(&ClickChatMissionReply::s_desc, "s_desc")
		.def<void (ClickChatMissionReply::*)(const std::string&)>(&ClickChatMissionReply::set_s_desc, "set_s_desc")
		// required string d_desc = 5;
		.def(&ClickChatMissionReply::d_desc, "d_desc")
		.def<void (ClickChatMissionReply::*)(const std::string&)>(&ClickChatMissionReply::set_d_desc, "set_d_desc")
		.def(&ClickChatMissionReply::ByteSize, "ByteSize")
		.def(&ClickChatMissionReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool MissionPacket_fflua_regist_all(lua_State* state)
{
	Mission_fflua_reg(state);
	MissionUpdateReply_fflua_reg(state);
	MissionListReply_fflua_reg(state);
	SyncMission_fflua_reg(state);
	SyncMissionRequest_fflua_reg(state);
	SyncMissionReply_fflua_reg(state);
	ClickChatMissionReq_fflua_reg(state);
	ClickChatMissionReply_fflua_reg(state);
	return true;
}
}
