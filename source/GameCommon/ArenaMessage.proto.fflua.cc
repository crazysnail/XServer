// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ArenaMessage.proto
#include "ArenaMessage.pb.h"
#include "ArenaMessage.proto.fflua.h"
namespace Packet {
bool ArenaMainData_fflua_reg(lua_State* state)
{
//for decltype
	ArenaMainData* message(nullptr);
	message;
	ff::fflua_register_t<ArenaMainData, ctor()>(state, "ArenaMainData", "google::protobuf::Message")
		// repeated .Packet.ArenaPlayer targets = 1;
		.def(&ArenaMainData::targets_size, "targets_size")
		.def<decltype(message->targets(0)) (ArenaMainData::*)(int) const>(&ArenaMainData::targets, "targets")
		.def<decltype(message->mutable_targets(0)) (ArenaMainData::*)(int)>(&ArenaMainData::mutable_targets, "mutable_targets")
		.def(&ArenaMainData::add_targets, "add_targets")
		// required .Packet.ArenaPlayer my_self = 2;
		.def(&ArenaMainData::my_self, "my_self")
		.def(&ArenaMainData::mutable_my_self, "mutable_my_self")
		// repeated .Packet.ArenaLog logs = 3;
		.def(&ArenaMainData::logs_size, "logs_size")
		.def<decltype(message->logs(0)) (ArenaMainData::*)(int) const>(&ArenaMainData::logs, "logs")
		.def<decltype(message->mutable_logs(0)) (ArenaMainData::*)(int)>(&ArenaMainData::mutable_logs, "mutable_logs")
		.def(&ArenaMainData::add_logs, "add_logs")
		// required fixed64 last_reload_tick = 4;
		.def(&ArenaMainData::last_reload_tick, "last_reload_tick")
		.def(&ArenaMainData::set_last_reload_tick, "set_last_reload_tick")
		.def(&ArenaMainData::ByteSize, "ByteSize")
		.def(&ArenaMainData::SetInitialized, "SetInitialized")
		;
	return true;
}
bool ArenaPlayer_fflua_reg(lua_State* state)
{
//for decltype
	ArenaPlayer* message(nullptr);
	message;
	ff::fflua_register_t<ArenaPlayer, ctor()>(state, "ArenaPlayer", "google::protobuf::Message")
		// required .Packet.ArenaPlayerInfo player_info = 1;
		.def(&ArenaPlayer::player_info, "player_info")
		.def(&ArenaPlayer::mutable_player_info, "mutable_player_info")
		// repeated .Packet.ActorFullInfo actors = 2;
		.def(&ArenaPlayer::actors_size, "actors_size")
		.def<decltype(message->actors(0)) (ArenaPlayer::*)(int) const>(&ArenaPlayer::actors, "actors")
		.def<decltype(message->mutable_actors(0)) (ArenaPlayer::*)(int)>(&ArenaPlayer::mutable_actors, "mutable_actors")
		.def(&ArenaPlayer::add_actors, "add_actors")
		// required fixed64 guid = 3;
		.def(&ArenaPlayer::guid, "guid")
		.def(&ArenaPlayer::set_guid, "set_guid")
		// required int32 rank = 4;
		.def(&ArenaPlayer::rank, "rank")
		.def(&ArenaPlayer::set_rank, "set_rank")
		// required int32 yesterday_rank = 5;
		.def(&ArenaPlayer::yesterday_rank, "yesterday_rank")
		.def(&ArenaPlayer::set_yesterday_rank, "set_yesterday_rank")
		// required int32 in_battle = 6;
		.def(&ArenaPlayer::in_battle, "in_battle")
		.def(&ArenaPlayer::set_in_battle, "set_in_battle")
		.def(&ArenaPlayer::ByteSize, "ByteSize")
		.def(&ArenaPlayer::SetInitialized, "SetInitialized")
		;
	return true;
}
bool ArenaPlayerInfo_fflua_reg(lua_State* state)
{
//for decltype
	ArenaPlayerInfo* message(nullptr);
	message;
	ff::fflua_register_t<ArenaPlayerInfo, ctor()>(state, "ArenaPlayerInfo", "google::protobuf::Message")
		// required string icon = 1;
		.def(&ArenaPlayerInfo::icon, "icon")
		.def<void (ArenaPlayerInfo::*)(const std::string&)>(&ArenaPlayerInfo::set_icon, "set_icon")
		// required int32 level = 2;
		.def(&ArenaPlayerInfo::level, "level")
		.def(&ArenaPlayerInfo::set_level, "set_level")
		// required string name = 3;
		.def(&ArenaPlayerInfo::name, "name")
		.def<void (ArenaPlayerInfo::*)(const std::string&)>(&ArenaPlayerInfo::set_name, "set_name")
		// required int32 score = 4;
		.def(&ArenaPlayerInfo::score, "score")
		.def(&ArenaPlayerInfo::set_score, "set_score")
		.def(&ArenaPlayerInfo::ByteSize, "ByteSize")
		.def(&ArenaPlayerInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool ArenaLog_fflua_reg(lua_State* state)
{
//for decltype
	ArenaLog* message(nullptr);
	message;
	ff::fflua_register_t<ArenaLog, ctor()>(state, "ArenaLog", "google::protobuf::Message")
		// required .Packet.ArenaPlayer player = 1;
		.def(&ArenaLog::player, "player")
		.def(&ArenaLog::mutable_player, "mutable_player")
		// required fixed64 replay_guid = 2;
		.def(&ArenaLog::replay_guid, "replay_guid")
		.def(&ArenaLog::set_replay_guid, "set_replay_guid")
		// required bool win = 3;
		.def(&ArenaLog::win, "win")
		.def(&ArenaLog::set_win, "set_win")
		// required int32 rank_change = 4;
		.def(&ArenaLog::rank_change, "rank_change")
		.def(&ArenaLog::set_rank_change, "set_rank_change")
		.def(&ArenaLog::ByteSize, "ByteSize")
		.def(&ArenaLog::SetInitialized, "SetInitialized")
		;
	return true;
}
bool ArenaPlayerDataChange_fflua_reg(lua_State* state)
{
//for decltype
	ArenaPlayerDataChange* message(nullptr);
	message;
	ff::fflua_register_t<ArenaPlayerDataChange, ctor()>(state, "ArenaPlayerDataChange", "google::protobuf::Message")
		// required fixed64 guid = 1;
		.def(&ArenaPlayerDataChange::guid, "guid")
		.def(&ArenaPlayerDataChange::set_guid, "set_guid")
		// required .Packet.ArenaPlayer player = 2;
		.def(&ArenaPlayerDataChange::player, "player")
		.def(&ArenaPlayerDataChange::mutable_player, "mutable_player")
		.def(&ArenaPlayerDataChange::ByteSize, "ByteSize")
		.def(&ArenaPlayerDataChange::SetInitialized, "SetInitialized")
		;
	return true;
}
bool ArenaChallengePlayer_fflua_reg(lua_State* state)
{
//for decltype
	ArenaChallengePlayer* message(nullptr);
	message;
	ff::fflua_register_t<ArenaChallengePlayer, ctor()>(state, "ArenaChallengePlayer", "google::protobuf::Message")
		// required fixed64 target_guid = 1;
		.def(&ArenaChallengePlayer::target_guid, "target_guid")
		.def(&ArenaChallengePlayer::set_target_guid, "set_target_guid")
		.def(&ArenaChallengePlayer::ByteSize, "ByteSize")
		.def(&ArenaChallengePlayer::SetInitialized, "SetInitialized")
		;
	return true;
}
bool ArenaPanelOpen_fflua_reg(lua_State* state)
{
//for decltype
	ArenaPanelOpen* message(nullptr);
	message;
	ff::fflua_register_t<ArenaPanelOpen, ctor()>(state, "ArenaPanelOpen", "google::protobuf::Message");
	return true;
}
bool ArenaRefreshTarget_fflua_reg(lua_State* state)
{
//for decltype
	ArenaRefreshTarget* message(nullptr);
	message;
	ff::fflua_register_t<ArenaRefreshTarget, ctor()>(state, "ArenaRefreshTarget", "google::protobuf::Message");
	return true;
}
bool ArenaPanelClose_fflua_reg(lua_State* state)
{
//for decltype
	ArenaPanelClose* message(nullptr);
	message;
	ff::fflua_register_t<ArenaPanelClose, ctor()>(state, "ArenaPanelClose", "google::protobuf::Message");
	return true;
}
bool ArenaBuyChallengeCount_fflua_reg(lua_State* state)
{
//for decltype
	ArenaBuyChallengeCount* message(nullptr);
	message;
	ff::fflua_register_t<ArenaBuyChallengeCount, ctor()>(state, "ArenaBuyChallengeCount", "google::protobuf::Message");
	return true;
}
bool ArenaMessage_fflua_regist_all(lua_State* state)
{
	ArenaMainData_fflua_reg(state);
	ArenaPlayer_fflua_reg(state);
	ArenaPlayerInfo_fflua_reg(state);
	ArenaLog_fflua_reg(state);
	ArenaPlayerDataChange_fflua_reg(state);
	ArenaChallengePlayer_fflua_reg(state);
	ArenaPanelOpen_fflua_reg(state);
	ArenaRefreshTarget_fflua_reg(state);
	ArenaPanelClose_fflua_reg(state);
	ArenaBuyChallengeCount_fflua_reg(state);
	return true;
}
}
