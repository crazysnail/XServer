// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TrialFieldDB.proto
#include "TrialFieldDB.pb.h"
#include "TrialFieldDB.proto.fflua.h"
namespace DB {
bool TrialTarget_fflua_reg(lua_State* state)
{
//for decltype
	TrialTarget* message(nullptr);
	message;
	ff::fflua_register_t<TrialTarget, ctor()>(state, "TrialTarget", "google::protobuf::Message")
		// required .DB.TrialPlayerInfo player = 1;
		.def(&TrialTarget::player, "player")
		.def(&TrialTarget::mutable_player, "mutable_player")
		// repeated .Packet.ActorFullInfo actors = 2;
		.def(&TrialTarget::actors_size, "actors_size")
		.def<decltype(message->actors(0)) (TrialTarget::*)(int) const>(&TrialTarget::actors, "actors")
		.def<decltype(message->mutable_actors(0)) (TrialTarget::*)(int)>(&TrialTarget::mutable_actors, "mutable_actors")
		.def(&TrialTarget::add_actors, "add_actors")
		// required bool passed = 3;
		.def(&TrialTarget::passed, "passed")
		.def(&TrialTarget::set_passed, "set_passed")
		// required int32 posid = 4;
		.def(&TrialTarget::posid, "posid")
		.def(&TrialTarget::set_posid, "set_posid")
		// required bool rewarded = 5;
		.def(&TrialTarget::rewarded, "rewarded")
		.def(&TrialTarget::set_rewarded, "set_rewarded")
		.def(&TrialTarget::ByteSize, "ByteSize")
		.def(&TrialTarget::SetInitialized, "SetInitialized")
		;
	return true;
}
bool TrialPlayerInfo_fflua_reg(lua_State* state)
{
//for decltype
	TrialPlayerInfo* message(nullptr);
	message;
	ff::fflua_register_t<TrialPlayerInfo, ctor()>(state, "TrialPlayerInfo", "google::protobuf::Message")
		// required int32 actor_config_id = 1;
		.def(&TrialPlayerInfo::actor_config_id, "actor_config_id")
		.def(&TrialPlayerInfo::set_actor_config_id, "set_actor_config_id")
		// required string name = 2;
		.def(&TrialPlayerInfo::name, "name")
		.def<void (TrialPlayerInfo::*)(const std::string&)>(&TrialPlayerInfo::set_name, "set_name")
		// required fixed64 guid = 3;
		.def(&TrialPlayerInfo::guid, "guid")
		.def(&TrialPlayerInfo::set_guid, "set_guid")
		.def(&TrialPlayerInfo::ByteSize, "ByteSize")
		.def(&TrialPlayerInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool TrialTargetFormation_fflua_reg(lua_State* state)
{
//for decltype
	TrialTargetFormation* message(nullptr);
	message;
	ff::fflua_register_t<TrialTargetFormation, ctor()>(state, "TrialTargetFormation", "google::protobuf::Message")
		// repeated .DB.TrialTarget targets = 1;
		.def(&TrialTargetFormation::targets_size, "targets_size")
		.def<decltype(message->targets(0)) (TrialTargetFormation::*)(int) const>(&TrialTargetFormation::targets, "targets")
		.def<decltype(message->mutable_targets(0)) (TrialTargetFormation::*)(int)>(&TrialTargetFormation::mutable_targets, "mutable_targets")
		.def(&TrialTargetFormation::add_targets, "add_targets")
		.def(&TrialTargetFormation::ByteSize, "ByteSize")
		.def(&TrialTargetFormation::SetInitialized, "SetInitialized")
		;
	return true;
}
bool PlayerTrialInfo_fflua_reg(lua_State* state)
{
//for decltype
	PlayerTrialInfo* message(nullptr);
	message;
	ff::fflua_register_t<PlayerTrialInfo, ctor()>(state, "PlayerTrialInfo", "google::protobuf::Message")
		// required fixed64 guid = 1;
		.def(&PlayerTrialInfo::guid, "guid")
		.def(&PlayerTrialInfo::set_guid, "set_guid")
		// required .DB.TrialTargetFormation target = 2;
		.def(&PlayerTrialInfo::target, "target")
		.def(&PlayerTrialInfo::mutable_target, "mutable_target")
		.def(&PlayerTrialInfo::ByteSize, "ByteSize")
		.def(&PlayerTrialInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool PlayerTowerInfo_fflua_reg(lua_State* state)
{
//for decltype
	PlayerTowerInfo* message(nullptr);
	message;
	ff::fflua_register_t<PlayerTowerInfo, ctor()>(state, "PlayerTowerInfo", "google::protobuf::Message")
		// required fixed64 guid = 1;
		.def(&PlayerTowerInfo::guid, "guid")
		.def(&PlayerTowerInfo::set_guid, "set_guid")
		// required int32 tower_level = 2;
		.def(&PlayerTowerInfo::tower_level, "tower_level")
		.def(&PlayerTowerInfo::set_tower_level, "set_tower_level")
		// required int32 tower_time = 3;
		.def(&PlayerTowerInfo::tower_time, "tower_time")
		.def(&PlayerTowerInfo::set_tower_time, "set_tower_time")
		.def(&PlayerTowerInfo::ByteSize, "ByteSize")
		.def(&PlayerTowerInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool TrialFieldDB_fflua_regist_all(lua_State* state)
{
	TrialTarget_fflua_reg(state);
	TrialPlayerInfo_fflua_reg(state);
	TrialTargetFormation_fflua_reg(state);
	PlayerTrialInfo_fflua_reg(state);
	PlayerTowerInfo_fflua_reg(state);
	return true;
}
}
