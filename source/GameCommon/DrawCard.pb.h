// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DrawCard.proto

#ifndef PROTOBUF_DrawCard_2eproto__INCLUDED
#define PROTOBUF_DrawCard_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "AllConfigEnum.pb.h"
#include "AllPacketEnum.pb.h"
#include "PlayerBasicInfo.pb.h"
// @@protoc_insertion_point(includes)

namespace Config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DrawCard_2eproto();
void protobuf_AssignDesc_DrawCard_2eproto();
void protobuf_ShutdownFile_DrawCard_2eproto();

class DrawCardConfig;

// ===================================================================

class DrawCardConfig : public ::google::protobuf::Message {
 public:
  DrawCardConfig();
  virtual ~DrawCardConfig();

  DrawCardConfig(const DrawCardConfig& from);

  inline DrawCardConfig& operator=(const DrawCardConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DrawCardConfig& default_instance();

  void Swap(DrawCardConfig* other);

  // implements Message ----------------------------------------------

  DrawCardConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DrawCardConfig& from);
  void MergeFrom(const DrawCardConfig& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 draw_group = 3;
  inline bool has_draw_group() const;
  inline void clear_draw_group();
  static const int kDrawGroupFieldNumber = 3;
  inline ::google::protobuf::int32 draw_group() const;
  inline void set_draw_group(::google::protobuf::int32 value);

  // required int32 item_id = 4;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 4;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);

  // required int32 item_count = 5;
  inline bool has_item_count() const;
  inline void clear_item_count();
  static const int kItemCountFieldNumber = 5;
  inline ::google::protobuf::int32 item_count() const;
  inline void set_item_count(::google::protobuf::int32 value);

  // required int32 item_weight = 6;
  inline bool has_item_weight() const;
  inline void clear_item_weight();
  static const int kItemWeightFieldNumber = 6;
  inline ::google::protobuf::int32 item_weight() const;
  inline void set_item_weight(::google::protobuf::int32 value);

  // required int32 in_level = 7;
  inline bool has_in_level() const;
  inline void clear_in_level();
  static const int kInLevelFieldNumber = 7;
  inline ::google::protobuf::int32 in_level() const;
  inline void set_in_level(::google::protobuf::int32 value);

  // required int32 out_level = 8;
  inline bool has_out_level() const;
  inline void clear_out_level();
  static const int kOutLevelFieldNumber = 8;
  inline ::google::protobuf::int32 out_level() const;
  inline void set_out_level(::google::protobuf::int32 value);

  // required int32 switch_open = 9;
  inline bool has_switch_open() const;
  inline void clear_switch_open();
  static const int kSwitchOpenFieldNumber = 9;
  inline ::google::protobuf::int32 switch_open() const;
  inline void set_switch_open(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Config.DrawCardConfig)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_draw_group();
  inline void clear_has_draw_group();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_count();
  inline void clear_has_item_count();
  inline void set_has_item_weight();
  inline void clear_has_item_weight();
  inline void set_has_in_level();
  inline void clear_has_in_level();
  inline void set_has_out_level();
  inline void clear_has_out_level();
  inline void set_has_switch_open();
  inline void clear_has_switch_open();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 draw_group_;
  ::google::protobuf::int32 item_id_;
  ::google::protobuf::int32 item_count_;
  ::google::protobuf::int32 item_weight_;
  ::google::protobuf::int32 in_level_;
  ::google::protobuf::int32 out_level_;
  ::google::protobuf::int32 switch_open_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_DrawCard_2eproto();
  friend void protobuf_AssignDesc_DrawCard_2eproto();
  friend void protobuf_ShutdownFile_DrawCard_2eproto();

  void InitAsDefaultInstance();
  static DrawCardConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// DrawCardConfig

// required int32 id = 1;
inline bool DrawCardConfig::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DrawCardConfig::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DrawCardConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DrawCardConfig::clear_id() {
  id_ = 0;
  clear_has_id();
  SetDirty();
}
inline ::google::protobuf::int32 DrawCardConfig::id() const {
  return id_;
}
inline void DrawCardConfig::set_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_id();
  id_ = value;
}

// required int32 draw_group = 3;
inline bool DrawCardConfig::has_draw_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DrawCardConfig::set_has_draw_group() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DrawCardConfig::clear_has_draw_group() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DrawCardConfig::clear_draw_group() {
  draw_group_ = 0;
  clear_has_draw_group();
  SetDirty();
}
inline ::google::protobuf::int32 DrawCardConfig::draw_group() const {
  return draw_group_;
}
inline void DrawCardConfig::set_draw_group(::google::protobuf::int32 value) {
  SetDirty();
  set_has_draw_group();
  draw_group_ = value;
}

// required int32 item_id = 4;
inline bool DrawCardConfig::has_item_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DrawCardConfig::set_has_item_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DrawCardConfig::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DrawCardConfig::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
  SetDirty();
}
inline ::google::protobuf::int32 DrawCardConfig::item_id() const {
  return item_id_;
}
inline void DrawCardConfig::set_item_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_item_id();
  item_id_ = value;
}

// required int32 item_count = 5;
inline bool DrawCardConfig::has_item_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DrawCardConfig::set_has_item_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DrawCardConfig::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DrawCardConfig::clear_item_count() {
  item_count_ = 0;
  clear_has_item_count();
  SetDirty();
}
inline ::google::protobuf::int32 DrawCardConfig::item_count() const {
  return item_count_;
}
inline void DrawCardConfig::set_item_count(::google::protobuf::int32 value) {
  SetDirty();
  set_has_item_count();
  item_count_ = value;
}

// required int32 item_weight = 6;
inline bool DrawCardConfig::has_item_weight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DrawCardConfig::set_has_item_weight() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DrawCardConfig::clear_has_item_weight() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DrawCardConfig::clear_item_weight() {
  item_weight_ = 0;
  clear_has_item_weight();
  SetDirty();
}
inline ::google::protobuf::int32 DrawCardConfig::item_weight() const {
  return item_weight_;
}
inline void DrawCardConfig::set_item_weight(::google::protobuf::int32 value) {
  SetDirty();
  set_has_item_weight();
  item_weight_ = value;
}

// required int32 in_level = 7;
inline bool DrawCardConfig::has_in_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DrawCardConfig::set_has_in_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DrawCardConfig::clear_has_in_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DrawCardConfig::clear_in_level() {
  in_level_ = 0;
  clear_has_in_level();
  SetDirty();
}
inline ::google::protobuf::int32 DrawCardConfig::in_level() const {
  return in_level_;
}
inline void DrawCardConfig::set_in_level(::google::protobuf::int32 value) {
  SetDirty();
  set_has_in_level();
  in_level_ = value;
}

// required int32 out_level = 8;
inline bool DrawCardConfig::has_out_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DrawCardConfig::set_has_out_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DrawCardConfig::clear_has_out_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DrawCardConfig::clear_out_level() {
  out_level_ = 0;
  clear_has_out_level();
  SetDirty();
}
inline ::google::protobuf::int32 DrawCardConfig::out_level() const {
  return out_level_;
}
inline void DrawCardConfig::set_out_level(::google::protobuf::int32 value) {
  SetDirty();
  set_has_out_level();
  out_level_ = value;
}

// required int32 switch_open = 9;
inline bool DrawCardConfig::has_switch_open() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DrawCardConfig::set_has_switch_open() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DrawCardConfig::clear_has_switch_open() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DrawCardConfig::clear_switch_open() {
  switch_open_ = 0;
  clear_has_switch_open();
  SetDirty();
}
inline ::google::protobuf::int32 DrawCardConfig::switch_open() const {
  return switch_open_;
}
inline void DrawCardConfig::set_switch_open(::google::protobuf::int32 value) {
  SetDirty();
  set_has_switch_open();
  switch_open_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DrawCard_2eproto__INCLUDED
