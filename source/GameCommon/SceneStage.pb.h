// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneStage.proto

#ifndef PROTOBUF_SceneStage_2eproto__INCLUDED
#define PROTOBUF_SceneStage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ProtoBufOption.pb.h"
#include "ClientMove.pb.h"
#include "ActorBasicInfo.pb.h"
#include "PlayerBasicInfo.pb.h"
// @@protoc_insertion_point(includes)

namespace Packet {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SceneStage_2eproto();
void protobuf_AssignDesc_SceneStage_2eproto();
void protobuf_ShutdownFile_SceneStage_2eproto();

class GetSceneStageInfo;
class SceneStageInfo;
class HookRank;
class HookRankUser;
class CaptureStage;
class CaptureStageToScene;
class UpdateStageTax;
class CollectAllTax;
class GuardStageSuccess;
class BattleFormation;
class Challengers;
class SceneStageCaptain;
class PlayerStages;
class PlayerStageDB;
class PlayerStage;
class RTHC;
class ResetRealTimeHookEfficient;
class RealTimeHookEfficient;

// ===================================================================

class GetSceneStageInfo : public ::google::protobuf::Message {
 public:
  GetSceneStageInfo();
  virtual ~GetSceneStageInfo();

  GetSceneStageInfo(const GetSceneStageInfo& from);

  inline GetSceneStageInfo& operator=(const GetSceneStageInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSceneStageInfo& default_instance();

  void Swap(GetSceneStageInfo* other);

  // implements Message ----------------------------------------------

  GetSceneStageInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetSceneStageInfo& from);
  void MergeFrom(const GetSceneStageInfo& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 stage_ids = 1;
  inline int stage_ids_size() const;
  inline void clear_stage_ids();
  static const int kStageIdsFieldNumber = 1;
  inline ::google::protobuf::int32 stage_ids(int index) const;
  inline void set_stage_ids(int index, ::google::protobuf::int32 value);
  inline void add_stage_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      stage_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_stage_ids();

  // @@protoc_insertion_point(class_scope:Packet.GetSceneStageInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > stage_ids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SceneStage_2eproto();
  friend void protobuf_AssignDesc_SceneStage_2eproto();
  friend void protobuf_ShutdownFile_SceneStage_2eproto();

  void InitAsDefaultInstance();
  static GetSceneStageInfo* default_instance_;
};
// -------------------------------------------------------------------

class SceneStageInfo : public ::google::protobuf::Message {
 public:
  SceneStageInfo();
  virtual ~SceneStageInfo();

  SceneStageInfo(const SceneStageInfo& from);

  inline SceneStageInfo& operator=(const SceneStageInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneStageInfo& default_instance();

  void Swap(SceneStageInfo* other);

  // implements Message ----------------------------------------------

  SceneStageInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SceneStageInfo& from);
  void MergeFrom(const SceneStageInfo& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 stage_id = 2;
  inline bool has_stage_id() const;
  inline void clear_stage_id();
  static const int kStageIdFieldNumber = 2;
  inline ::google::protobuf::int32 stage_id() const;
  inline void set_stage_id(::google::protobuf::int32 value);

  // required int32 tax_rate = 3;
  inline bool has_tax_rate() const;
  inline void clear_tax_rate();
  static const int kTaxRateFieldNumber = 3;
  inline ::google::protobuf::int32 tax_rate() const;
  inline void set_tax_rate(::google::protobuf::int32 value);

  // required int32 tax = 4;
  inline bool has_tax() const;
  inline void clear_tax();
  static const int kTaxFieldNumber = 4;
  inline ::google::protobuf::int32 tax() const;
  inline void set_tax(::google::protobuf::int32 value);

  // required fixed64 captain_guid = 5;
  inline bool has_captain_guid() const;
  inline void clear_captain_guid();
  static const int kCaptainGuidFieldNumber = 5;
  inline ::google::protobuf::uint64 captain_guid() const;
  inline void set_captain_guid(::google::protobuf::uint64 value);

  // required .Packet.SceneStageCaptain captain = 6;
  inline bool has_captain() const;
  inline void clear_captain();
  static const int kCaptainFieldNumber = 6;
  inline const ::Packet::SceneStageCaptain& captain() const;
  inline ::Packet::SceneStageCaptain* mutable_captain();
  inline ::Packet::SceneStageCaptain* release_captain();
  inline void set_allocated_captain(::Packet::SceneStageCaptain* captain);

  // required int32 fast_time_cost = 8;
  inline bool has_fast_time_cost() const;
  inline void clear_fast_time_cost();
  static const int kFastTimeCostFieldNumber = 8;
  inline ::google::protobuf::int32 fast_time_cost() const;
  inline void set_fast_time_cost(::google::protobuf::int32 value);

  // required .Packet.BattleFormation fast_formation = 9;
  inline bool has_fast_formation() const;
  inline void clear_fast_formation();
  static const int kFastFormationFieldNumber = 9;
  inline const ::Packet::BattleFormation& fast_formation() const;
  inline ::Packet::BattleFormation* mutable_fast_formation();
  inline ::Packet::BattleFormation* release_fast_formation();
  inline void set_allocated_fast_formation(::Packet::BattleFormation* fast_formation);

  // required int32 best_score = 10;
  inline bool has_best_score() const;
  inline void clear_best_score();
  static const int kBestScoreFieldNumber = 10;
  inline ::google::protobuf::int32 best_score() const;
  inline void set_best_score(::google::protobuf::int32 value);

  // required .Packet.BattleFormation best_formation = 11;
  inline bool has_best_formation() const;
  inline void clear_best_formation();
  static const int kBestFormationFieldNumber = 11;
  inline const ::Packet::BattleFormation& best_formation() const;
  inline ::Packet::BattleFormation* mutable_best_formation();
  inline ::Packet::BattleFormation* release_best_formation();
  inline void set_allocated_best_formation(::Packet::BattleFormation* best_formation);

  // required .Packet.Challengers challengers = 12;
  inline bool has_challengers() const;
  inline void clear_challengers();
  static const int kChallengersFieldNumber = 12;
  inline const ::Packet::Challengers& challengers() const;
  inline ::Packet::Challengers* mutable_challengers();
  inline ::Packet::Challengers* release_challengers();
  inline void set_allocated_challengers(::Packet::Challengers* challengers);

  // required int32 guild_tax_rate = 13;
  inline bool has_guild_tax_rate() const;
  inline void clear_guild_tax_rate();
  static const int kGuildTaxRateFieldNumber = 13;
  inline ::google::protobuf::int32 guild_tax_rate() const;
  inline void set_guild_tax_rate(::google::protobuf::int32 value);

  // required int32 guild_tax = 14;
  inline bool has_guild_tax() const;
  inline void clear_guild_tax();
  static const int kGuildTaxFieldNumber = 14;
  inline ::google::protobuf::int32 guild_tax() const;
  inline void set_guild_tax(::google::protobuf::int32 value);

  // optional .Packet.HookRank ranks = 15;
  inline bool has_ranks() const;
  inline void clear_ranks();
  static const int kRanksFieldNumber = 15;
  inline const ::Packet::HookRank& ranks() const;
  inline ::Packet::HookRank* mutable_ranks();
  inline ::Packet::HookRank* release_ranks();
  inline void set_allocated_ranks(::Packet::HookRank* ranks);

  // optional bool tax_broadcasted = 16;
  inline bool has_tax_broadcasted() const;
  inline void clear_tax_broadcasted();
  static const int kTaxBroadcastedFieldNumber = 16;
  inline bool tax_broadcasted() const;
  inline void set_tax_broadcasted(bool value);

  // optional bool guild_tax_broadcasted = 17;
  inline bool has_guild_tax_broadcasted() const;
  inline void clear_guild_tax_broadcasted();
  static const int kGuildTaxBroadcastedFieldNumber = 17;
  inline bool guild_tax_broadcasted() const;
  inline void set_guild_tax_broadcasted(bool value);

  // @@protoc_insertion_point(class_scope:Packet.SceneStageInfo)
 private:
  inline void set_has_stage_id();
  inline void clear_has_stage_id();
  inline void set_has_tax_rate();
  inline void clear_has_tax_rate();
  inline void set_has_tax();
  inline void clear_has_tax();
  inline void set_has_captain_guid();
  inline void clear_has_captain_guid();
  inline void set_has_captain();
  inline void clear_has_captain();
  inline void set_has_fast_time_cost();
  inline void clear_has_fast_time_cost();
  inline void set_has_fast_formation();
  inline void clear_has_fast_formation();
  inline void set_has_best_score();
  inline void clear_has_best_score();
  inline void set_has_best_formation();
  inline void clear_has_best_formation();
  inline void set_has_challengers();
  inline void clear_has_challengers();
  inline void set_has_guild_tax_rate();
  inline void clear_has_guild_tax_rate();
  inline void set_has_guild_tax();
  inline void clear_has_guild_tax();
  inline void set_has_ranks();
  inline void clear_has_ranks();
  inline void set_has_tax_broadcasted();
  inline void clear_has_tax_broadcasted();
  inline void set_has_guild_tax_broadcasted();
  inline void clear_has_guild_tax_broadcasted();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 stage_id_;
  ::google::protobuf::int32 tax_rate_;
  ::google::protobuf::uint64 captain_guid_;
  ::google::protobuf::int32 tax_;
  ::google::protobuf::int32 fast_time_cost_;
  ::Packet::SceneStageCaptain* captain_;
  ::Packet::BattleFormation* fast_formation_;
  ::Packet::BattleFormation* best_formation_;
  ::google::protobuf::int32 best_score_;
  ::google::protobuf::int32 guild_tax_rate_;
  ::Packet::Challengers* challengers_;
  ::Packet::HookRank* ranks_;
  ::google::protobuf::int32 guild_tax_;
  bool tax_broadcasted_;
  bool guild_tax_broadcasted_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_SceneStage_2eproto();
  friend void protobuf_AssignDesc_SceneStage_2eproto();
  friend void protobuf_ShutdownFile_SceneStage_2eproto();

  void InitAsDefaultInstance();
  static SceneStageInfo* default_instance_;
};
// -------------------------------------------------------------------

class HookRank : public ::google::protobuf::Message {
 public:
  HookRank();
  virtual ~HookRank();

  HookRank(const HookRank& from);

  inline HookRank& operator=(const HookRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HookRank& default_instance();

  void Swap(HookRank* other);

  // implements Message ----------------------------------------------

  HookRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HookRank& from);
  void MergeFrom(const HookRank& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Packet.HookRankUser users = 1;
  inline int users_size() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 1;
  inline const ::Packet::HookRankUser& users(int index) const;
  inline ::Packet::HookRankUser* mutable_users(int index);
  inline ::Packet::HookRankUser* add_users();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::HookRankUser >&
      users() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::HookRankUser >*
      mutable_users();

  // @@protoc_insertion_point(class_scope:Packet.HookRank)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::HookRankUser > users_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SceneStage_2eproto();
  friend void protobuf_AssignDesc_SceneStage_2eproto();
  friend void protobuf_ShutdownFile_SceneStage_2eproto();

  void InitAsDefaultInstance();
  static HookRank* default_instance_;
};
// -------------------------------------------------------------------

class HookRankUser : public ::google::protobuf::Message {
 public:
  HookRankUser();
  virtual ~HookRankUser();

  HookRankUser(const HookRankUser& from);

  inline HookRankUser& operator=(const HookRankUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HookRankUser& default_instance();

  void Swap(HookRankUser* other);

  // implements Message ----------------------------------------------

  HookRankUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HookRankUser& from);
  void MergeFrom(const HookRankUser& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 player_guid = 1;
  inline bool has_player_guid() const;
  inline void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 player_guid() const;
  inline void set_player_guid(::google::protobuf::uint64 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 seconds = 3;
  inline bool has_seconds() const;
  inline void clear_seconds();
  static const int kSecondsFieldNumber = 3;
  inline ::google::protobuf::int32 seconds() const;
  inline void set_seconds(::google::protobuf::int32 value);

  // required int32 income_per_min = 4;
  inline bool has_income_per_min() const;
  inline void clear_income_per_min();
  static const int kIncomePerMinFieldNumber = 4;
  inline ::google::protobuf::int32 income_per_min() const;
  inline void set_income_per_min(::google::protobuf::int32 value);

  // required int32 exp_pre_min = 5;
  inline bool has_exp_pre_min() const;
  inline void clear_exp_pre_min();
  static const int kExpPreMinFieldNumber = 5;
  inline ::google::protobuf::int32 exp_pre_min() const;
  inline void set_exp_pre_min(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.HookRankUser)
 private:
  inline void set_has_player_guid();
  inline void clear_has_player_guid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_seconds();
  inline void clear_has_seconds();
  inline void set_has_income_per_min();
  inline void clear_has_income_per_min();
  inline void set_has_exp_pre_min();
  inline void clear_has_exp_pre_min();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 player_guid_;
  ::std::string* name_;
  ::google::protobuf::int32 seconds_;
  ::google::protobuf::int32 income_per_min_;
  ::google::protobuf::int32 exp_pre_min_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_SceneStage_2eproto();
  friend void protobuf_AssignDesc_SceneStage_2eproto();
  friend void protobuf_ShutdownFile_SceneStage_2eproto();

  void InitAsDefaultInstance();
  static HookRankUser* default_instance_;
};
// -------------------------------------------------------------------

class CaptureStage : public ::google::protobuf::Message {
 public:
  CaptureStage();
  virtual ~CaptureStage();

  CaptureStage(const CaptureStage& from);

  inline CaptureStage& operator=(const CaptureStage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CaptureStage& default_instance();

  void Swap(CaptureStage* other);

  // implements Message ----------------------------------------------

  CaptureStage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CaptureStage& from);
  void MergeFrom(const CaptureStage& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 stage_id = 1;
  inline bool has_stage_id() const;
  inline void clear_stage_id();
  static const int kStageIdFieldNumber = 1;
  inline ::google::protobuf::int32 stage_id() const;
  inline void set_stage_id(::google::protobuf::int32 value);

  // required int32 battle_group_id = 2;
  inline bool has_battle_group_id() const;
  inline void clear_battle_group_id();
  static const int kBattleGroupIdFieldNumber = 2;
  inline ::google::protobuf::int32 battle_group_id() const;
  inline void set_battle_group_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.CaptureStage)
 private:
  inline void set_has_stage_id();
  inline void clear_has_stage_id();
  inline void set_has_battle_group_id();
  inline void clear_has_battle_group_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 stage_id_;
  ::google::protobuf::int32 battle_group_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SceneStage_2eproto();
  friend void protobuf_AssignDesc_SceneStage_2eproto();
  friend void protobuf_ShutdownFile_SceneStage_2eproto();

  void InitAsDefaultInstance();
  static CaptureStage* default_instance_;
};
// -------------------------------------------------------------------

class CaptureStageToScene : public ::google::protobuf::Message {
 public:
  CaptureStageToScene();
  virtual ~CaptureStageToScene();

  CaptureStageToScene(const CaptureStageToScene& from);

  inline CaptureStageToScene& operator=(const CaptureStageToScene& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CaptureStageToScene& default_instance();

  void Swap(CaptureStageToScene* other);

  // implements Message ----------------------------------------------

  CaptureStageToScene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CaptureStageToScene& from);
  void MergeFrom(const CaptureStageToScene& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Packet.CaptureStage client_req = 1;
  inline bool has_client_req() const;
  inline void clear_client_req();
  static const int kClientReqFieldNumber = 1;
  inline const ::Packet::CaptureStage& client_req() const;
  inline ::Packet::CaptureStage* mutable_client_req();
  inline ::Packet::CaptureStage* release_client_req();
  inline void set_allocated_client_req(::Packet::CaptureStage* client_req);

  // repeated .Packet.ActorFullInfo actors = 2;
  inline int actors_size() const;
  inline void clear_actors();
  static const int kActorsFieldNumber = 2;
  inline const ::Packet::ActorFullInfo& actors(int index) const;
  inline ::Packet::ActorFullInfo* mutable_actors(int index);
  inline ::Packet::ActorFullInfo* add_actors();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::ActorFullInfo >&
      actors() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::ActorFullInfo >*
      mutable_actors();

  // required int32 boss_group_id = 3;
  inline bool has_boss_group_id() const;
  inline void clear_boss_group_id();
  static const int kBossGroupIdFieldNumber = 3;
  inline ::google::protobuf::int32 boss_group_id() const;
  inline void set_boss_group_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.CaptureStageToScene)
 private:
  inline void set_has_client_req();
  inline void clear_has_client_req();
  inline void set_has_boss_group_id();
  inline void clear_has_boss_group_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Packet::CaptureStage* client_req_;
  ::google::protobuf::RepeatedPtrField< ::Packet::ActorFullInfo > actors_;
  ::google::protobuf::int32 boss_group_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SceneStage_2eproto();
  friend void protobuf_AssignDesc_SceneStage_2eproto();
  friend void protobuf_ShutdownFile_SceneStage_2eproto();

  void InitAsDefaultInstance();
  static CaptureStageToScene* default_instance_;
};
// -------------------------------------------------------------------

class UpdateStageTax : public ::google::protobuf::Message {
 public:
  UpdateStageTax();
  virtual ~UpdateStageTax();

  UpdateStageTax(const UpdateStageTax& from);

  inline UpdateStageTax& operator=(const UpdateStageTax& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateStageTax& default_instance();

  void Swap(UpdateStageTax* other);

  // implements Message ----------------------------------------------

  UpdateStageTax* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateStageTax& from);
  void MergeFrom(const UpdateStageTax& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 stage_id = 1;
  inline bool has_stage_id() const;
  inline void clear_stage_id();
  static const int kStageIdFieldNumber = 1;
  inline ::google::protobuf::int32 stage_id() const;
  inline void set_stage_id(::google::protobuf::int32 value);

  // required int32 new_tax = 2;
  inline bool has_new_tax() const;
  inline void clear_new_tax();
  static const int kNewTaxFieldNumber = 2;
  inline ::google::protobuf::int32 new_tax() const;
  inline void set_new_tax(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.UpdateStageTax)
 private:
  inline void set_has_stage_id();
  inline void clear_has_stage_id();
  inline void set_has_new_tax();
  inline void clear_has_new_tax();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 stage_id_;
  ::google::protobuf::int32 new_tax_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SceneStage_2eproto();
  friend void protobuf_AssignDesc_SceneStage_2eproto();
  friend void protobuf_ShutdownFile_SceneStage_2eproto();

  void InitAsDefaultInstance();
  static UpdateStageTax* default_instance_;
};
// -------------------------------------------------------------------

class CollectAllTax : public ::google::protobuf::Message {
 public:
  CollectAllTax();
  virtual ~CollectAllTax();

  CollectAllTax(const CollectAllTax& from);

  inline CollectAllTax& operator=(const CollectAllTax& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CollectAllTax& default_instance();

  void Swap(CollectAllTax* other);

  // implements Message ----------------------------------------------

  CollectAllTax* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CollectAllTax& from);
  void MergeFrom(const CollectAllTax& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 stage_id = 1;
  inline bool has_stage_id() const;
  inline void clear_stage_id();
  static const int kStageIdFieldNumber = 1;
  inline ::google::protobuf::int32 stage_id() const;
  inline void set_stage_id(::google::protobuf::int32 value);

  // optional int32 tax = 2;
  inline bool has_tax() const;
  inline void clear_tax();
  static const int kTaxFieldNumber = 2;
  inline ::google::protobuf::int32 tax() const;
  inline void set_tax(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.CollectAllTax)
 private:
  inline void set_has_stage_id();
  inline void clear_has_stage_id();
  inline void set_has_tax();
  inline void clear_has_tax();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 stage_id_;
  ::google::protobuf::int32 tax_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SceneStage_2eproto();
  friend void protobuf_AssignDesc_SceneStage_2eproto();
  friend void protobuf_ShutdownFile_SceneStage_2eproto();

  void InitAsDefaultInstance();
  static CollectAllTax* default_instance_;
};
// -------------------------------------------------------------------

class GuardStageSuccess : public ::google::protobuf::Message {
 public:
  GuardStageSuccess();
  virtual ~GuardStageSuccess();

  GuardStageSuccess(const GuardStageSuccess& from);

  inline GuardStageSuccess& operator=(const GuardStageSuccess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuardStageSuccess& default_instance();

  void Swap(GuardStageSuccess* other);

  // implements Message ----------------------------------------------

  GuardStageSuccess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuardStageSuccess& from);
  void MergeFrom(const GuardStageSuccess& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 stage_id = 1;
  inline bool has_stage_id() const;
  inline void clear_stage_id();
  static const int kStageIdFieldNumber = 1;
  inline ::google::protobuf::int32 stage_id() const;
  inline void set_stage_id(::google::protobuf::int32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Packet.GuardStageSuccess)
 private:
  inline void set_has_stage_id();
  inline void clear_has_stage_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 stage_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SceneStage_2eproto();
  friend void protobuf_AssignDesc_SceneStage_2eproto();
  friend void protobuf_ShutdownFile_SceneStage_2eproto();

  void InitAsDefaultInstance();
  static GuardStageSuccess* default_instance_;
};
// -------------------------------------------------------------------

class BattleFormation : public ::google::protobuf::Message {
 public:
  BattleFormation();
  virtual ~BattleFormation();

  BattleFormation(const BattleFormation& from);

  inline BattleFormation& operator=(const BattleFormation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BattleFormation& default_instance();

  void Swap(BattleFormation* other);

  // implements Message ----------------------------------------------

  BattleFormation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BattleFormation& from);
  void MergeFrom(const BattleFormation& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string player_name = 1;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 1;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // repeated .Packet.ActorFullInfo actors = 2;
  inline int actors_size() const;
  inline void clear_actors();
  static const int kActorsFieldNumber = 2;
  inline const ::Packet::ActorFullInfo& actors(int index) const;
  inline ::Packet::ActorFullInfo* mutable_actors(int index);
  inline ::Packet::ActorFullInfo* add_actors();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::ActorFullInfo >&
      actors() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::ActorFullInfo >*
      mutable_actors();

  // optional fixed64 player_guid = 3;
  inline bool has_player_guid() const;
  inline void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 3;
  inline ::google::protobuf::uint64 player_guid() const;
  inline void set_player_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Packet.BattleFormation)
 private:
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_player_guid();
  inline void clear_has_player_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* player_name_;
  ::google::protobuf::RepeatedPtrField< ::Packet::ActorFullInfo > actors_;
  ::google::protobuf::uint64 player_guid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SceneStage_2eproto();
  friend void protobuf_AssignDesc_SceneStage_2eproto();
  friend void protobuf_ShutdownFile_SceneStage_2eproto();

  void InitAsDefaultInstance();
  static BattleFormation* default_instance_;
};
// -------------------------------------------------------------------

class Challengers : public ::google::protobuf::Message {
 public:
  Challengers();
  virtual ~Challengers();

  Challengers(const Challengers& from);

  inline Challengers& operator=(const Challengers& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Challengers& default_instance();

  void Swap(Challengers* other);

  // implements Message ----------------------------------------------

  Challengers* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Challengers& from);
  void MergeFrom(const Challengers& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string names = 1;
  inline int names_size() const;
  inline void clear_names();
  static const int kNamesFieldNumber = 1;
  inline const ::std::string& names(int index) const;
  inline ::std::string* mutable_names(int index);
  inline void set_names(int index, const ::std::string& value);
  inline void set_names(int index, const char* value);
  inline void set_names(int index, const char* value, size_t size);
  inline ::std::string* add_names();
  inline void add_names(const ::std::string& value);
  inline void add_names(const char* value);
  inline void add_names(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_names();

  // @@protoc_insertion_point(class_scope:Packet.Challengers)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> names_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SceneStage_2eproto();
  friend void protobuf_AssignDesc_SceneStage_2eproto();
  friend void protobuf_ShutdownFile_SceneStage_2eproto();

  void InitAsDefaultInstance();
  static Challengers* default_instance_;
};
// -------------------------------------------------------------------

class SceneStageCaptain : public ::google::protobuf::Message {
 public:
  SceneStageCaptain();
  virtual ~SceneStageCaptain();

  SceneStageCaptain(const SceneStageCaptain& from);

  inline SceneStageCaptain& operator=(const SceneStageCaptain& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneStageCaptain& default_instance();

  void Swap(SceneStageCaptain* other);

  // implements Message ----------------------------------------------

  SceneStageCaptain* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SceneStageCaptain& from);
  void MergeFrom(const SceneStageCaptain& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Packet.PlayerBasicInfo player_info = 1;
  inline bool has_player_info() const;
  inline void clear_player_info();
  static const int kPlayerInfoFieldNumber = 1;
  inline const ::Packet::PlayerBasicInfo& player_info() const;
  inline ::Packet::PlayerBasicInfo* mutable_player_info();
  inline ::Packet::PlayerBasicInfo* release_player_info();
  inline void set_allocated_player_info(::Packet::PlayerBasicInfo* player_info);

  // repeated .Packet.ActorFullInfo actors = 2;
  inline int actors_size() const;
  inline void clear_actors();
  static const int kActorsFieldNumber = 2;
  inline const ::Packet::ActorFullInfo& actors(int index) const;
  inline ::Packet::ActorFullInfo* mutable_actors(int index);
  inline ::Packet::ActorFullInfo* add_actors();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::ActorFullInfo >&
      actors() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::ActorFullInfo >*
      mutable_actors();

  // @@protoc_insertion_point(class_scope:Packet.SceneStageCaptain)
 private:
  inline void set_has_player_info();
  inline void clear_has_player_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Packet::PlayerBasicInfo* player_info_;
  ::google::protobuf::RepeatedPtrField< ::Packet::ActorFullInfo > actors_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SceneStage_2eproto();
  friend void protobuf_AssignDesc_SceneStage_2eproto();
  friend void protobuf_ShutdownFile_SceneStage_2eproto();

  void InitAsDefaultInstance();
  static SceneStageCaptain* default_instance_;
};
// -------------------------------------------------------------------

class PlayerStages : public ::google::protobuf::Message {
 public:
  PlayerStages();
  virtual ~PlayerStages();

  PlayerStages(const PlayerStages& from);

  inline PlayerStages& operator=(const PlayerStages& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerStages& default_instance();

  void Swap(PlayerStages* other);

  // implements Message ----------------------------------------------

  PlayerStages* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerStages& from);
  void MergeFrom(const PlayerStages& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 player_guid = 1;
  inline bool has_player_guid() const;
  inline void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 player_guid() const;
  inline void set_player_guid(::google::protobuf::uint64 value);

  // required int32 current_stage = 2;
  inline bool has_current_stage() const;
  inline void clear_current_stage();
  static const int kCurrentStageFieldNumber = 2;
  inline ::google::protobuf::int32 current_stage() const;
  inline void set_current_stage(::google::protobuf::int32 value);

  // repeated .Packet.PlayerStage stages = 3;
  inline int stages_size() const;
  inline void clear_stages();
  static const int kStagesFieldNumber = 3;
  inline const ::Packet::PlayerStage& stages(int index) const;
  inline ::Packet::PlayerStage* mutable_stages(int index);
  inline ::Packet::PlayerStage* add_stages();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::PlayerStage >&
      stages() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::PlayerStage >*
      mutable_stages();

  // repeated .Packet.RTHC configs = 4;
  inline int configs_size() const;
  inline void clear_configs();
  static const int kConfigsFieldNumber = 4;
  inline const ::Packet::RTHC& configs(int index) const;
  inline ::Packet::RTHC* mutable_configs(int index);
  inline ::Packet::RTHC* add_configs();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::RTHC >&
      configs() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::RTHC >*
      mutable_configs();

  // @@protoc_insertion_point(class_scope:Packet.PlayerStages)
 private:
  inline void set_has_player_guid();
  inline void clear_has_player_guid();
  inline void set_has_current_stage();
  inline void clear_has_current_stage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 player_guid_;
  ::google::protobuf::RepeatedPtrField< ::Packet::PlayerStage > stages_;
  ::google::protobuf::RepeatedPtrField< ::Packet::RTHC > configs_;
  ::google::protobuf::int32 current_stage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_SceneStage_2eproto();
  friend void protobuf_AssignDesc_SceneStage_2eproto();
  friend void protobuf_ShutdownFile_SceneStage_2eproto();

  void InitAsDefaultInstance();
  static PlayerStages* default_instance_;
};
// -------------------------------------------------------------------

class PlayerStageDB : public ::google::protobuf::Message {
 public:
  PlayerStageDB();
  virtual ~PlayerStageDB();

  PlayerStageDB(const PlayerStageDB& from);

  inline PlayerStageDB& operator=(const PlayerStageDB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerStageDB& default_instance();

  void Swap(PlayerStageDB* other);

  // implements Message ----------------------------------------------

  PlayerStageDB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerStageDB& from);
  void MergeFrom(const PlayerStageDB& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 player_guid = 1;
  inline bool has_player_guid() const;
  inline void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 player_guid() const;
  inline void set_player_guid(::google::protobuf::uint64 value);

  // required int32 current_stage = 2;
  inline bool has_current_stage() const;
  inline void clear_current_stage();
  static const int kCurrentStageFieldNumber = 2;
  inline ::google::protobuf::int32 current_stage() const;
  inline void set_current_stage(::google::protobuf::int32 value);

  // repeated .Packet.RTHC configs = 3;
  inline int configs_size() const;
  inline void clear_configs();
  static const int kConfigsFieldNumber = 3;
  inline const ::Packet::RTHC& configs(int index) const;
  inline ::Packet::RTHC* mutable_configs(int index);
  inline ::Packet::RTHC* add_configs();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::RTHC >&
      configs() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::RTHC >*
      mutable_configs();

  // @@protoc_insertion_point(class_scope:Packet.PlayerStageDB)
 private:
  inline void set_has_player_guid();
  inline void clear_has_player_guid();
  inline void set_has_current_stage();
  inline void clear_has_current_stage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 player_guid_;
  ::google::protobuf::RepeatedPtrField< ::Packet::RTHC > configs_;
  ::google::protobuf::int32 current_stage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SceneStage_2eproto();
  friend void protobuf_AssignDesc_SceneStage_2eproto();
  friend void protobuf_ShutdownFile_SceneStage_2eproto();

  void InitAsDefaultInstance();
  static PlayerStageDB* default_instance_;
};
// -------------------------------------------------------------------

class PlayerStage : public ::google::protobuf::Message {
 public:
  PlayerStage();
  virtual ~PlayerStage();

  PlayerStage(const PlayerStage& from);

  inline PlayerStage& operator=(const PlayerStage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerStage& default_instance();

  void Swap(PlayerStage* other);

  // implements Message ----------------------------------------------

  PlayerStage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerStage& from);
  void MergeFrom(const PlayerStage& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 player_guid = 1;
  inline bool has_player_guid() const;
  inline void clear_player_guid();
  static const int kPlayerGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 player_guid() const;
  inline void set_player_guid(::google::protobuf::uint64 value);

  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required bool raid = 3;
  inline bool has_raid() const;
  inline void clear_raid();
  static const int kRaidFieldNumber = 3;
  inline bool raid() const;
  inline void set_raid(bool value);

  // required int32 boss = 4;
  inline bool has_boss() const;
  inline void clear_boss();
  static const int kBossFieldNumber = 4;
  inline ::google::protobuf::int32 boss() const;
  inline void set_boss(::google::protobuf::int32 value);

  // required int32 num = 5;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 5;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // required int32 den = 6;
  inline bool has_den() const;
  inline void clear_den();
  static const int kDenFieldNumber = 6;
  inline ::google::protobuf::int32 den() const;
  inline void set_den(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.PlayerStage)
 private:
  inline void set_has_player_guid();
  inline void clear_has_player_guid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_raid();
  inline void clear_has_raid();
  inline void set_has_boss();
  inline void clear_has_boss();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_den();
  inline void clear_has_den();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 player_guid_;
  ::google::protobuf::int32 id_;
  bool raid_;
  ::google::protobuf::int32 boss_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 den_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_SceneStage_2eproto();
  friend void protobuf_AssignDesc_SceneStage_2eproto();
  friend void protobuf_ShutdownFile_SceneStage_2eproto();

  void InitAsDefaultInstance();
  static PlayerStage* default_instance_;
};
// -------------------------------------------------------------------

class RTHC : public ::google::protobuf::Message {
 public:
  RTHC();
  virtual ~RTHC();

  RTHC(const RTHC& from);

  inline RTHC& operator=(const RTHC& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RTHC& default_instance();

  void Swap(RTHC* other);

  // implements Message ----------------------------------------------

  RTHC* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RTHC& from);
  void MergeFrom(const RTHC& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 stage_id = 1;
  inline bool has_stage_id() const;
  inline void clear_stage_id();
  static const int kStageIdFieldNumber = 1;
  inline ::google::protobuf::int32 stage_id() const;
  inline void set_stage_id(::google::protobuf::int32 value);

  // required fixed64 total_time = 2;
  inline bool has_total_time() const;
  inline void clear_total_time();
  static const int kTotalTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 total_time() const;
  inline void set_total_time(::google::protobuf::uint64 value);

  // required fixed64 hook_time = 11;
  inline bool has_hook_time() const;
  inline void clear_hook_time();
  static const int kHookTimeFieldNumber = 11;
  inline ::google::protobuf::uint64 hook_time() const;
  inline void set_hook_time(::google::protobuf::uint64 value);

  // required int32 relate_score = 9;
  inline bool has_relate_score() const;
  inline void clear_relate_score();
  static const int kRelateScoreFieldNumber = 9;
  inline ::google::protobuf::int32 relate_score() const;
  inline void set_relate_score(::google::protobuf::int32 value);

  // required bool calc_done = 10;
  inline bool has_calc_done() const;
  inline void clear_calc_done();
  static const int kCalcDoneFieldNumber = 10;
  inline bool calc_done() const;
  inline void set_calc_done(bool value);

  // required int32 wave_exp = 12;
  inline bool has_wave_exp() const;
  inline void clear_wave_exp();
  static const int kWaveExpFieldNumber = 12;
  inline ::google::protobuf::int32 wave_exp() const;
  inline void set_wave_exp(::google::protobuf::int32 value);

  // required int32 wave_gold = 13;
  inline bool has_wave_gold() const;
  inline void clear_wave_gold();
  static const int kWaveGoldFieldNumber = 13;
  inline ::google::protobuf::int32 wave_gold() const;
  inline void set_wave_gold(::google::protobuf::int32 value);

  // required fixed64 wave_mill_sec = 14;
  inline bool has_wave_mill_sec() const;
  inline void clear_wave_mill_sec();
  static const int kWaveMillSecFieldNumber = 14;
  inline ::google::protobuf::uint64 wave_mill_sec() const;
  inline void set_wave_mill_sec(::google::protobuf::uint64 value);

  // required fixed64 dead_mill_sec = 15;
  inline bool has_dead_mill_sec() const;
  inline void clear_dead_mill_sec();
  static const int kDeadMillSecFieldNumber = 15;
  inline ::google::protobuf::uint64 dead_mill_sec() const;
  inline void set_dead_mill_sec(::google::protobuf::uint64 value);

  // required int32 wave_kill = 16;
  inline bool has_wave_kill() const;
  inline void clear_wave_kill();
  static const int kWaveKillFieldNumber = 16;
  inline ::google::protobuf::int32 wave_kill() const;
  inline void set_wave_kill(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.RTHC)
 private:
  inline void set_has_stage_id();
  inline void clear_has_stage_id();
  inline void set_has_total_time();
  inline void clear_has_total_time();
  inline void set_has_hook_time();
  inline void clear_has_hook_time();
  inline void set_has_relate_score();
  inline void clear_has_relate_score();
  inline void set_has_calc_done();
  inline void clear_has_calc_done();
  inline void set_has_wave_exp();
  inline void clear_has_wave_exp();
  inline void set_has_wave_gold();
  inline void clear_has_wave_gold();
  inline void set_has_wave_mill_sec();
  inline void clear_has_wave_mill_sec();
  inline void set_has_dead_mill_sec();
  inline void clear_has_dead_mill_sec();
  inline void set_has_wave_kill();
  inline void clear_has_wave_kill();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 total_time_;
  ::google::protobuf::int32 stage_id_;
  ::google::protobuf::int32 relate_score_;
  ::google::protobuf::uint64 hook_time_;
  bool calc_done_;
  ::google::protobuf::int32 wave_exp_;
  ::google::protobuf::uint64 wave_mill_sec_;
  ::google::protobuf::int32 wave_gold_;
  ::google::protobuf::int32 wave_kill_;
  ::google::protobuf::uint64 dead_mill_sec_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_SceneStage_2eproto();
  friend void protobuf_AssignDesc_SceneStage_2eproto();
  friend void protobuf_ShutdownFile_SceneStage_2eproto();

  void InitAsDefaultInstance();
  static RTHC* default_instance_;
};
// -------------------------------------------------------------------

class ResetRealTimeHookEfficient : public ::google::protobuf::Message {
 public:
  ResetRealTimeHookEfficient();
  virtual ~ResetRealTimeHookEfficient();

  ResetRealTimeHookEfficient(const ResetRealTimeHookEfficient& from);

  inline ResetRealTimeHookEfficient& operator=(const ResetRealTimeHookEfficient& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResetRealTimeHookEfficient& default_instance();

  void Swap(ResetRealTimeHookEfficient* other);

  // implements Message ----------------------------------------------

  ResetRealTimeHookEfficient* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResetRealTimeHookEfficient& from);
  void MergeFrom(const ResetRealTimeHookEfficient& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Packet.ResetRealTimeHookEfficient)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_SceneStage_2eproto();
  friend void protobuf_AssignDesc_SceneStage_2eproto();
  friend void protobuf_ShutdownFile_SceneStage_2eproto();

  void InitAsDefaultInstance();
  static ResetRealTimeHookEfficient* default_instance_;
};
// -------------------------------------------------------------------

class RealTimeHookEfficient : public ::google::protobuf::Message {
 public:
  RealTimeHookEfficient();
  virtual ~RealTimeHookEfficient();

  RealTimeHookEfficient(const RealTimeHookEfficient& from);

  inline RealTimeHookEfficient& operator=(const RealTimeHookEfficient& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RealTimeHookEfficient& default_instance();

  void Swap(RealTimeHookEfficient* other);

  // implements Message ----------------------------------------------

  RealTimeHookEfficient* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RealTimeHookEfficient& from);
  void MergeFrom(const RealTimeHookEfficient& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Packet.RTHC config = 1;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 1;
  inline const ::Packet::RTHC& config() const;
  inline ::Packet::RTHC* mutable_config();
  inline ::Packet::RTHC* release_config();
  inline void set_allocated_config(::Packet::RTHC* config);

  // repeated int32 item_ids = 2;
  inline int item_ids_size() const;
  inline void clear_item_ids();
  static const int kItemIdsFieldNumber = 2;
  inline ::google::protobuf::int32 item_ids(int index) const;
  inline void set_item_ids(int index, ::google::protobuf::int32 value);
  inline void add_item_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      item_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_item_ids();

  // repeated int32 item_counts = 3;
  inline int item_counts_size() const;
  inline void clear_item_counts();
  static const int kItemCountsFieldNumber = 3;
  inline ::google::protobuf::int32 item_counts(int index) const;
  inline void set_item_counts(int index, ::google::protobuf::int32 value);
  inline void add_item_counts(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      item_counts() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_item_counts();

  // required int32 up_level = 4;
  inline bool has_up_level() const;
  inline void clear_up_level();
  static const int kUpLevelFieldNumber = 4;
  inline ::google::protobuf::int32 up_level() const;
  inline void set_up_level(::google::protobuf::int32 value);

  // required fixed64 off_time = 5;
  inline bool has_off_time() const;
  inline void clear_off_time();
  static const int kOffTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 off_time() const;
  inline void set_off_time(::google::protobuf::uint64 value);

  // required int32 level_up_need_seconds = 6;
  inline bool has_level_up_need_seconds() const;
  inline void clear_level_up_need_seconds();
  static const int kLevelUpNeedSecondsFieldNumber = 6;
  inline ::google::protobuf::int32 level_up_need_seconds() const;
  inline void set_level_up_need_seconds(::google::protobuf::int32 value);

  // required int32 total_exp = 7;
  inline bool has_total_exp() const;
  inline void clear_total_exp();
  static const int kTotalExpFieldNumber = 7;
  inline ::google::protobuf::int32 total_exp() const;
  inline void set_total_exp(::google::protobuf::int32 value);

  // required int32 total_exp_extra = 20;
  inline bool has_total_exp_extra() const;
  inline void clear_total_exp_extra();
  static const int kTotalExpExtraFieldNumber = 20;
  inline ::google::protobuf::int32 total_exp_extra() const;
  inline void set_total_exp_extra(::google::protobuf::int32 value);

  // required int32 total_gold = 8;
  inline bool has_total_gold() const;
  inline void clear_total_gold();
  static const int kTotalGoldFieldNumber = 8;
  inline ::google::protobuf::int32 total_gold() const;
  inline void set_total_gold(::google::protobuf::int32 value);

  // required int32 battle_times = 9;
  inline bool has_battle_times() const;
  inline void clear_battle_times();
  static const int kBattleTimesFieldNumber = 9;
  inline ::google::protobuf::int32 battle_times() const;
  inline void set_battle_times(::google::protobuf::int32 value);

  // required int32 battle_time_costs = 19;
  inline bool has_battle_time_costs() const;
  inline void clear_battle_time_costs();
  static const int kBattleTimeCostsFieldNumber = 19;
  inline ::google::protobuf::int32 battle_time_costs() const;
  inline void set_battle_time_costs(::google::protobuf::int32 value);

  // required int32 monster_kills = 10;
  inline bool has_monster_kills() const;
  inline void clear_monster_kills();
  static const int kMonsterKillsFieldNumber = 10;
  inline ::google::protobuf::int32 monster_kills() const;
  inline void set_monster_kills(::google::protobuf::int32 value);

  // required int32 dead_times = 11;
  inline bool has_dead_times() const;
  inline void clear_dead_times();
  static const int kDeadTimesFieldNumber = 11;
  inline ::google::protobuf::int32 dead_times() const;
  inline void set_dead_times(::google::protobuf::int32 value);

  // repeated int32 boss_stage_ids = 12;
  inline int boss_stage_ids_size() const;
  inline void clear_boss_stage_ids();
  static const int kBossStageIdsFieldNumber = 12;
  inline ::google::protobuf::int32 boss_stage_ids(int index) const;
  inline void set_boss_stage_ids(int index, ::google::protobuf::int32 value);
  inline void add_boss_stage_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      boss_stage_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_boss_stage_ids();

  // repeated int32 boss_count = 13;
  inline int boss_count_size() const;
  inline void clear_boss_count();
  static const int kBossCountFieldNumber = 13;
  inline ::google::protobuf::int32 boss_count(int index) const;
  inline void set_boss_count(int index, ::google::protobuf::int32 value);
  inline void add_boss_count(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      boss_count() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_boss_count();

  // required int32 green_equip_count = 14;
  inline bool has_green_equip_count() const;
  inline void clear_green_equip_count();
  static const int kGreenEquipCountFieldNumber = 14;
  inline ::google::protobuf::int32 green_equip_count() const;
  inline void set_green_equip_count(::google::protobuf::int32 value);

  // required int32 green_equip_dismantle = 15;
  inline bool has_green_equip_dismantle() const;
  inline void clear_green_equip_dismantle();
  static const int kGreenEquipDismantleFieldNumber = 15;
  inline ::google::protobuf::int32 green_equip_dismantle() const;
  inline void set_green_equip_dismantle(::google::protobuf::int32 value);

  // required int32 blue_equip_count = 16;
  inline bool has_blue_equip_count() const;
  inline void clear_blue_equip_count();
  static const int kBlueEquipCountFieldNumber = 16;
  inline ::google::protobuf::int32 blue_equip_count() const;
  inline void set_blue_equip_count(::google::protobuf::int32 value);

  // required int32 blue_equip_count_dismantle = 17;
  inline bool has_blue_equip_count_dismantle() const;
  inline void clear_blue_equip_count_dismantle();
  static const int kBlueEquipCountDismantleFieldNumber = 17;
  inline ::google::protobuf::int32 blue_equip_count_dismantle() const;
  inline void set_blue_equip_count_dismantle(::google::protobuf::int32 value);

  // required int32 purple_equip_count = 18;
  inline bool has_purple_equip_count() const;
  inline void clear_purple_equip_count();
  static const int kPurpleEquipCountFieldNumber = 18;
  inline ::google::protobuf::int32 purple_equip_count() const;
  inline void set_purple_equip_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.RealTimeHookEfficient)
 private:
  inline void set_has_config();
  inline void clear_has_config();
  inline void set_has_up_level();
  inline void clear_has_up_level();
  inline void set_has_off_time();
  inline void clear_has_off_time();
  inline void set_has_level_up_need_seconds();
  inline void clear_has_level_up_need_seconds();
  inline void set_has_total_exp();
  inline void clear_has_total_exp();
  inline void set_has_total_exp_extra();
  inline void clear_has_total_exp_extra();
  inline void set_has_total_gold();
  inline void clear_has_total_gold();
  inline void set_has_battle_times();
  inline void clear_has_battle_times();
  inline void set_has_battle_time_costs();
  inline void clear_has_battle_time_costs();
  inline void set_has_monster_kills();
  inline void clear_has_monster_kills();
  inline void set_has_dead_times();
  inline void clear_has_dead_times();
  inline void set_has_green_equip_count();
  inline void clear_has_green_equip_count();
  inline void set_has_green_equip_dismantle();
  inline void clear_has_green_equip_dismantle();
  inline void set_has_blue_equip_count();
  inline void clear_has_blue_equip_count();
  inline void set_has_blue_equip_count_dismantle();
  inline void clear_has_blue_equip_count_dismantle();
  inline void set_has_purple_equip_count();
  inline void clear_has_purple_equip_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Packet::RTHC* config_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > item_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > item_counts_;
  ::google::protobuf::uint64 off_time_;
  ::google::protobuf::int32 up_level_;
  ::google::protobuf::int32 level_up_need_seconds_;
  ::google::protobuf::int32 total_exp_;
  ::google::protobuf::int32 total_exp_extra_;
  ::google::protobuf::int32 total_gold_;
  ::google::protobuf::int32 battle_times_;
  ::google::protobuf::int32 battle_time_costs_;
  ::google::protobuf::int32 monster_kills_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > boss_stage_ids_;
  ::google::protobuf::int32 dead_times_;
  ::google::protobuf::int32 green_equip_count_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > boss_count_;
  ::google::protobuf::int32 green_equip_dismantle_;
  ::google::protobuf::int32 blue_equip_count_;
  ::google::protobuf::int32 blue_equip_count_dismantle_;
  ::google::protobuf::int32 purple_equip_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];

  friend void  protobuf_AddDesc_SceneStage_2eproto();
  friend void protobuf_AssignDesc_SceneStage_2eproto();
  friend void protobuf_ShutdownFile_SceneStage_2eproto();

  void InitAsDefaultInstance();
  static RealTimeHookEfficient* default_instance_;
};
// ===================================================================


// ===================================================================

// GetSceneStageInfo

// repeated int32 stage_ids = 1;
inline int GetSceneStageInfo::stage_ids_size() const {
  return stage_ids_.size();
}
inline void GetSceneStageInfo::clear_stage_ids() {
  stage_ids_.Clear();
  SetDirty();
}
inline ::google::protobuf::int32 GetSceneStageInfo::stage_ids(int index) const {
  return stage_ids_.Get(index);
}
inline void GetSceneStageInfo::set_stage_ids(int index, ::google::protobuf::int32 value) {
  SetDirty();
  stage_ids_.Set(index, value);
}
inline void GetSceneStageInfo::add_stage_ids(::google::protobuf::int32 value) {
  SetDirty();
  stage_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GetSceneStageInfo::stage_ids() const {
  return stage_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GetSceneStageInfo::mutable_stage_ids() {
  SetDirty();
  return &stage_ids_;
}

// -------------------------------------------------------------------

// SceneStageInfo

// required int32 stage_id = 2;
inline bool SceneStageInfo::has_stage_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SceneStageInfo::set_has_stage_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SceneStageInfo::clear_has_stage_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SceneStageInfo::clear_stage_id() {
  stage_id_ = 0;
  clear_has_stage_id();
  SetDirty();
}
inline ::google::protobuf::int32 SceneStageInfo::stage_id() const {
  return stage_id_;
}
inline void SceneStageInfo::set_stage_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_stage_id();
  stage_id_ = value;
}

// required int32 tax_rate = 3;
inline bool SceneStageInfo::has_tax_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SceneStageInfo::set_has_tax_rate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SceneStageInfo::clear_has_tax_rate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SceneStageInfo::clear_tax_rate() {
  tax_rate_ = 0;
  clear_has_tax_rate();
  SetDirty();
}
inline ::google::protobuf::int32 SceneStageInfo::tax_rate() const {
  return tax_rate_;
}
inline void SceneStageInfo::set_tax_rate(::google::protobuf::int32 value) {
  SetDirty();
  set_has_tax_rate();
  tax_rate_ = value;
}

// required int32 tax = 4;
inline bool SceneStageInfo::has_tax() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SceneStageInfo::set_has_tax() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SceneStageInfo::clear_has_tax() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SceneStageInfo::clear_tax() {
  tax_ = 0;
  clear_has_tax();
  SetDirty();
}
inline ::google::protobuf::int32 SceneStageInfo::tax() const {
  return tax_;
}
inline void SceneStageInfo::set_tax(::google::protobuf::int32 value) {
  SetDirty();
  set_has_tax();
  tax_ = value;
}

// required fixed64 captain_guid = 5;
inline bool SceneStageInfo::has_captain_guid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SceneStageInfo::set_has_captain_guid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SceneStageInfo::clear_has_captain_guid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SceneStageInfo::clear_captain_guid() {
  captain_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_captain_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 SceneStageInfo::captain_guid() const {
  return captain_guid_;
}
inline void SceneStageInfo::set_captain_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_captain_guid();
  captain_guid_ = value;
}

// required .Packet.SceneStageCaptain captain = 6;
inline bool SceneStageInfo::has_captain() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SceneStageInfo::set_has_captain() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SceneStageInfo::clear_has_captain() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SceneStageInfo::clear_captain() {
  if (captain_ != NULL) captain_->::Packet::SceneStageCaptain::Clear();
  clear_has_captain();
  SetDirty();
}
inline const ::Packet::SceneStageCaptain& SceneStageInfo::captain() const {
  return captain_ != NULL ? *captain_ : *default_instance_->captain_;
}
inline ::Packet::SceneStageCaptain* SceneStageInfo::mutable_captain() {
  SetDirty();
  set_has_captain();
  if (captain_ == NULL) captain_ = new ::Packet::SceneStageCaptain;
  return captain_;
}
inline ::Packet::SceneStageCaptain* SceneStageInfo::release_captain() {
  SetDirty();
  clear_has_captain();
  ::Packet::SceneStageCaptain* temp = captain_;
  captain_ = NULL;
  return temp;
}
inline void SceneStageInfo::set_allocated_captain(::Packet::SceneStageCaptain* captain) {
  SetDirty();
  delete captain_;
  captain_ = captain;
  if (captain) {
    set_has_captain();
  } else {
    clear_has_captain();
  }
}

// required int32 fast_time_cost = 8;
inline bool SceneStageInfo::has_fast_time_cost() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SceneStageInfo::set_has_fast_time_cost() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SceneStageInfo::clear_has_fast_time_cost() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SceneStageInfo::clear_fast_time_cost() {
  fast_time_cost_ = 0;
  clear_has_fast_time_cost();
  SetDirty();
}
inline ::google::protobuf::int32 SceneStageInfo::fast_time_cost() const {
  return fast_time_cost_;
}
inline void SceneStageInfo::set_fast_time_cost(::google::protobuf::int32 value) {
  SetDirty();
  set_has_fast_time_cost();
  fast_time_cost_ = value;
}

// required .Packet.BattleFormation fast_formation = 9;
inline bool SceneStageInfo::has_fast_formation() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SceneStageInfo::set_has_fast_formation() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SceneStageInfo::clear_has_fast_formation() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SceneStageInfo::clear_fast_formation() {
  if (fast_formation_ != NULL) fast_formation_->::Packet::BattleFormation::Clear();
  clear_has_fast_formation();
  SetDirty();
}
inline const ::Packet::BattleFormation& SceneStageInfo::fast_formation() const {
  return fast_formation_ != NULL ? *fast_formation_ : *default_instance_->fast_formation_;
}
inline ::Packet::BattleFormation* SceneStageInfo::mutable_fast_formation() {
  SetDirty();
  set_has_fast_formation();
  if (fast_formation_ == NULL) fast_formation_ = new ::Packet::BattleFormation;
  return fast_formation_;
}
inline ::Packet::BattleFormation* SceneStageInfo::release_fast_formation() {
  SetDirty();
  clear_has_fast_formation();
  ::Packet::BattleFormation* temp = fast_formation_;
  fast_formation_ = NULL;
  return temp;
}
inline void SceneStageInfo::set_allocated_fast_formation(::Packet::BattleFormation* fast_formation) {
  SetDirty();
  delete fast_formation_;
  fast_formation_ = fast_formation;
  if (fast_formation) {
    set_has_fast_formation();
  } else {
    clear_has_fast_formation();
  }
}

// required int32 best_score = 10;
inline bool SceneStageInfo::has_best_score() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SceneStageInfo::set_has_best_score() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SceneStageInfo::clear_has_best_score() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SceneStageInfo::clear_best_score() {
  best_score_ = 0;
  clear_has_best_score();
  SetDirty();
}
inline ::google::protobuf::int32 SceneStageInfo::best_score() const {
  return best_score_;
}
inline void SceneStageInfo::set_best_score(::google::protobuf::int32 value) {
  SetDirty();
  set_has_best_score();
  best_score_ = value;
}

// required .Packet.BattleFormation best_formation = 11;
inline bool SceneStageInfo::has_best_formation() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SceneStageInfo::set_has_best_formation() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SceneStageInfo::clear_has_best_formation() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SceneStageInfo::clear_best_formation() {
  if (best_formation_ != NULL) best_formation_->::Packet::BattleFormation::Clear();
  clear_has_best_formation();
  SetDirty();
}
inline const ::Packet::BattleFormation& SceneStageInfo::best_formation() const {
  return best_formation_ != NULL ? *best_formation_ : *default_instance_->best_formation_;
}
inline ::Packet::BattleFormation* SceneStageInfo::mutable_best_formation() {
  SetDirty();
  set_has_best_formation();
  if (best_formation_ == NULL) best_formation_ = new ::Packet::BattleFormation;
  return best_formation_;
}
inline ::Packet::BattleFormation* SceneStageInfo::release_best_formation() {
  SetDirty();
  clear_has_best_formation();
  ::Packet::BattleFormation* temp = best_formation_;
  best_formation_ = NULL;
  return temp;
}
inline void SceneStageInfo::set_allocated_best_formation(::Packet::BattleFormation* best_formation) {
  SetDirty();
  delete best_formation_;
  best_formation_ = best_formation;
  if (best_formation) {
    set_has_best_formation();
  } else {
    clear_has_best_formation();
  }
}

// required .Packet.Challengers challengers = 12;
inline bool SceneStageInfo::has_challengers() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SceneStageInfo::set_has_challengers() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SceneStageInfo::clear_has_challengers() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SceneStageInfo::clear_challengers() {
  if (challengers_ != NULL) challengers_->::Packet::Challengers::Clear();
  clear_has_challengers();
  SetDirty();
}
inline const ::Packet::Challengers& SceneStageInfo::challengers() const {
  return challengers_ != NULL ? *challengers_ : *default_instance_->challengers_;
}
inline ::Packet::Challengers* SceneStageInfo::mutable_challengers() {
  SetDirty();
  set_has_challengers();
  if (challengers_ == NULL) challengers_ = new ::Packet::Challengers;
  return challengers_;
}
inline ::Packet::Challengers* SceneStageInfo::release_challengers() {
  SetDirty();
  clear_has_challengers();
  ::Packet::Challengers* temp = challengers_;
  challengers_ = NULL;
  return temp;
}
inline void SceneStageInfo::set_allocated_challengers(::Packet::Challengers* challengers) {
  SetDirty();
  delete challengers_;
  challengers_ = challengers;
  if (challengers) {
    set_has_challengers();
  } else {
    clear_has_challengers();
  }
}

// required int32 guild_tax_rate = 13;
inline bool SceneStageInfo::has_guild_tax_rate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SceneStageInfo::set_has_guild_tax_rate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SceneStageInfo::clear_has_guild_tax_rate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SceneStageInfo::clear_guild_tax_rate() {
  guild_tax_rate_ = 0;
  clear_has_guild_tax_rate();
  SetDirty();
}
inline ::google::protobuf::int32 SceneStageInfo::guild_tax_rate() const {
  return guild_tax_rate_;
}
inline void SceneStageInfo::set_guild_tax_rate(::google::protobuf::int32 value) {
  SetDirty();
  set_has_guild_tax_rate();
  guild_tax_rate_ = value;
}

// required int32 guild_tax = 14;
inline bool SceneStageInfo::has_guild_tax() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SceneStageInfo::set_has_guild_tax() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SceneStageInfo::clear_has_guild_tax() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SceneStageInfo::clear_guild_tax() {
  guild_tax_ = 0;
  clear_has_guild_tax();
  SetDirty();
}
inline ::google::protobuf::int32 SceneStageInfo::guild_tax() const {
  return guild_tax_;
}
inline void SceneStageInfo::set_guild_tax(::google::protobuf::int32 value) {
  SetDirty();
  set_has_guild_tax();
  guild_tax_ = value;
}

// optional .Packet.HookRank ranks = 15;
inline bool SceneStageInfo::has_ranks() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SceneStageInfo::set_has_ranks() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SceneStageInfo::clear_has_ranks() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SceneStageInfo::clear_ranks() {
  if (ranks_ != NULL) ranks_->::Packet::HookRank::Clear();
  clear_has_ranks();
  SetDirty();
}
inline const ::Packet::HookRank& SceneStageInfo::ranks() const {
  return ranks_ != NULL ? *ranks_ : *default_instance_->ranks_;
}
inline ::Packet::HookRank* SceneStageInfo::mutable_ranks() {
  SetDirty();
  set_has_ranks();
  if (ranks_ == NULL) ranks_ = new ::Packet::HookRank;
  return ranks_;
}
inline ::Packet::HookRank* SceneStageInfo::release_ranks() {
  SetDirty();
  clear_has_ranks();
  ::Packet::HookRank* temp = ranks_;
  ranks_ = NULL;
  return temp;
}
inline void SceneStageInfo::set_allocated_ranks(::Packet::HookRank* ranks) {
  SetDirty();
  delete ranks_;
  ranks_ = ranks;
  if (ranks) {
    set_has_ranks();
  } else {
    clear_has_ranks();
  }
}

// optional bool tax_broadcasted = 16;
inline bool SceneStageInfo::has_tax_broadcasted() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SceneStageInfo::set_has_tax_broadcasted() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SceneStageInfo::clear_has_tax_broadcasted() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SceneStageInfo::clear_tax_broadcasted() {
  tax_broadcasted_ = false;
  clear_has_tax_broadcasted();
  SetDirty();
}
inline bool SceneStageInfo::tax_broadcasted() const {
  return tax_broadcasted_;
}
inline void SceneStageInfo::set_tax_broadcasted(bool value) {
  SetDirty();
  set_has_tax_broadcasted();
  tax_broadcasted_ = value;
}

// optional bool guild_tax_broadcasted = 17;
inline bool SceneStageInfo::has_guild_tax_broadcasted() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SceneStageInfo::set_has_guild_tax_broadcasted() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SceneStageInfo::clear_has_guild_tax_broadcasted() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SceneStageInfo::clear_guild_tax_broadcasted() {
  guild_tax_broadcasted_ = false;
  clear_has_guild_tax_broadcasted();
  SetDirty();
}
inline bool SceneStageInfo::guild_tax_broadcasted() const {
  return guild_tax_broadcasted_;
}
inline void SceneStageInfo::set_guild_tax_broadcasted(bool value) {
  SetDirty();
  set_has_guild_tax_broadcasted();
  guild_tax_broadcasted_ = value;
}

// -------------------------------------------------------------------

// HookRank

// repeated .Packet.HookRankUser users = 1;
inline int HookRank::users_size() const {
  return users_.size();
}
inline void HookRank::clear_users() {
  users_.Clear();
  SetDirty();
}
inline const ::Packet::HookRankUser& HookRank::users(int index) const {
  return users_.Get(index);
}
inline ::Packet::HookRankUser* HookRank::mutable_users(int index) {
  SetDirty();
  return users_.Mutable(index);
}
inline ::Packet::HookRankUser* HookRank::add_users() {
  SetDirty();
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::HookRankUser >&
HookRank::users() const {
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::HookRankUser >*
HookRank::mutable_users() {
  SetDirty();
  return &users_;
}

// -------------------------------------------------------------------

// HookRankUser

// required fixed64 player_guid = 1;
inline bool HookRankUser::has_player_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HookRankUser::set_has_player_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HookRankUser::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HookRankUser::clear_player_guid() {
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 HookRankUser::player_guid() const {
  return player_guid_;
}
inline void HookRankUser::set_player_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_player_guid();
  player_guid_ = value;
}

// required string name = 2;
inline bool HookRankUser::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HookRankUser::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HookRankUser::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HookRankUser::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
  SetDirty();
}
inline const ::std::string& HookRankUser::name() const {
  return *name_;
}
inline void HookRankUser::set_name(const ::std::string& value) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void HookRankUser::set_name(const char* value) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void HookRankUser::set_name(const char* value, size_t size) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HookRankUser::mutable_name() {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* HookRankUser::release_name() {
  SetDirty();
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HookRankUser::set_allocated_name(::std::string* name) {
  SetDirty();
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 seconds = 3;
inline bool HookRankUser::has_seconds() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HookRankUser::set_has_seconds() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HookRankUser::clear_has_seconds() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HookRankUser::clear_seconds() {
  seconds_ = 0;
  clear_has_seconds();
  SetDirty();
}
inline ::google::protobuf::int32 HookRankUser::seconds() const {
  return seconds_;
}
inline void HookRankUser::set_seconds(::google::protobuf::int32 value) {
  SetDirty();
  set_has_seconds();
  seconds_ = value;
}

// required int32 income_per_min = 4;
inline bool HookRankUser::has_income_per_min() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HookRankUser::set_has_income_per_min() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HookRankUser::clear_has_income_per_min() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HookRankUser::clear_income_per_min() {
  income_per_min_ = 0;
  clear_has_income_per_min();
  SetDirty();
}
inline ::google::protobuf::int32 HookRankUser::income_per_min() const {
  return income_per_min_;
}
inline void HookRankUser::set_income_per_min(::google::protobuf::int32 value) {
  SetDirty();
  set_has_income_per_min();
  income_per_min_ = value;
}

// required int32 exp_pre_min = 5;
inline bool HookRankUser::has_exp_pre_min() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HookRankUser::set_has_exp_pre_min() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HookRankUser::clear_has_exp_pre_min() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HookRankUser::clear_exp_pre_min() {
  exp_pre_min_ = 0;
  clear_has_exp_pre_min();
  SetDirty();
}
inline ::google::protobuf::int32 HookRankUser::exp_pre_min() const {
  return exp_pre_min_;
}
inline void HookRankUser::set_exp_pre_min(::google::protobuf::int32 value) {
  SetDirty();
  set_has_exp_pre_min();
  exp_pre_min_ = value;
}

// -------------------------------------------------------------------

// CaptureStage

// required int32 stage_id = 1;
inline bool CaptureStage::has_stage_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CaptureStage::set_has_stage_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CaptureStage::clear_has_stage_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CaptureStage::clear_stage_id() {
  stage_id_ = 0;
  clear_has_stage_id();
  SetDirty();
}
inline ::google::protobuf::int32 CaptureStage::stage_id() const {
  return stage_id_;
}
inline void CaptureStage::set_stage_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_stage_id();
  stage_id_ = value;
}

// required int32 battle_group_id = 2;
inline bool CaptureStage::has_battle_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CaptureStage::set_has_battle_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CaptureStage::clear_has_battle_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CaptureStage::clear_battle_group_id() {
  battle_group_id_ = 0;
  clear_has_battle_group_id();
  SetDirty();
}
inline ::google::protobuf::int32 CaptureStage::battle_group_id() const {
  return battle_group_id_;
}
inline void CaptureStage::set_battle_group_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_battle_group_id();
  battle_group_id_ = value;
}

// -------------------------------------------------------------------

// CaptureStageToScene

// required .Packet.CaptureStage client_req = 1;
inline bool CaptureStageToScene::has_client_req() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CaptureStageToScene::set_has_client_req() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CaptureStageToScene::clear_has_client_req() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CaptureStageToScene::clear_client_req() {
  if (client_req_ != NULL) client_req_->::Packet::CaptureStage::Clear();
  clear_has_client_req();
  SetDirty();
}
inline const ::Packet::CaptureStage& CaptureStageToScene::client_req() const {
  return client_req_ != NULL ? *client_req_ : *default_instance_->client_req_;
}
inline ::Packet::CaptureStage* CaptureStageToScene::mutable_client_req() {
  SetDirty();
  set_has_client_req();
  if (client_req_ == NULL) client_req_ = new ::Packet::CaptureStage;
  return client_req_;
}
inline ::Packet::CaptureStage* CaptureStageToScene::release_client_req() {
  SetDirty();
  clear_has_client_req();
  ::Packet::CaptureStage* temp = client_req_;
  client_req_ = NULL;
  return temp;
}
inline void CaptureStageToScene::set_allocated_client_req(::Packet::CaptureStage* client_req) {
  SetDirty();
  delete client_req_;
  client_req_ = client_req;
  if (client_req) {
    set_has_client_req();
  } else {
    clear_has_client_req();
  }
}

// repeated .Packet.ActorFullInfo actors = 2;
inline int CaptureStageToScene::actors_size() const {
  return actors_.size();
}
inline void CaptureStageToScene::clear_actors() {
  actors_.Clear();
  SetDirty();
}
inline const ::Packet::ActorFullInfo& CaptureStageToScene::actors(int index) const {
  return actors_.Get(index);
}
inline ::Packet::ActorFullInfo* CaptureStageToScene::mutable_actors(int index) {
  SetDirty();
  return actors_.Mutable(index);
}
inline ::Packet::ActorFullInfo* CaptureStageToScene::add_actors() {
  SetDirty();
  return actors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::ActorFullInfo >&
CaptureStageToScene::actors() const {
  return actors_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::ActorFullInfo >*
CaptureStageToScene::mutable_actors() {
  SetDirty();
  return &actors_;
}

// required int32 boss_group_id = 3;
inline bool CaptureStageToScene::has_boss_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CaptureStageToScene::set_has_boss_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CaptureStageToScene::clear_has_boss_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CaptureStageToScene::clear_boss_group_id() {
  boss_group_id_ = 0;
  clear_has_boss_group_id();
  SetDirty();
}
inline ::google::protobuf::int32 CaptureStageToScene::boss_group_id() const {
  return boss_group_id_;
}
inline void CaptureStageToScene::set_boss_group_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_boss_group_id();
  boss_group_id_ = value;
}

// -------------------------------------------------------------------

// UpdateStageTax

// required int32 stage_id = 1;
inline bool UpdateStageTax::has_stage_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateStageTax::set_has_stage_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateStageTax::clear_has_stage_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateStageTax::clear_stage_id() {
  stage_id_ = 0;
  clear_has_stage_id();
  SetDirty();
}
inline ::google::protobuf::int32 UpdateStageTax::stage_id() const {
  return stage_id_;
}
inline void UpdateStageTax::set_stage_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_stage_id();
  stage_id_ = value;
}

// required int32 new_tax = 2;
inline bool UpdateStageTax::has_new_tax() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateStageTax::set_has_new_tax() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateStageTax::clear_has_new_tax() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateStageTax::clear_new_tax() {
  new_tax_ = 0;
  clear_has_new_tax();
  SetDirty();
}
inline ::google::protobuf::int32 UpdateStageTax::new_tax() const {
  return new_tax_;
}
inline void UpdateStageTax::set_new_tax(::google::protobuf::int32 value) {
  SetDirty();
  set_has_new_tax();
  new_tax_ = value;
}

// -------------------------------------------------------------------

// CollectAllTax

// required int32 stage_id = 1;
inline bool CollectAllTax::has_stage_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CollectAllTax::set_has_stage_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CollectAllTax::clear_has_stage_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CollectAllTax::clear_stage_id() {
  stage_id_ = 0;
  clear_has_stage_id();
  SetDirty();
}
inline ::google::protobuf::int32 CollectAllTax::stage_id() const {
  return stage_id_;
}
inline void CollectAllTax::set_stage_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_stage_id();
  stage_id_ = value;
}

// optional int32 tax = 2;
inline bool CollectAllTax::has_tax() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CollectAllTax::set_has_tax() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CollectAllTax::clear_has_tax() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CollectAllTax::clear_tax() {
  tax_ = 0;
  clear_has_tax();
  SetDirty();
}
inline ::google::protobuf::int32 CollectAllTax::tax() const {
  return tax_;
}
inline void CollectAllTax::set_tax(::google::protobuf::int32 value) {
  SetDirty();
  set_has_tax();
  tax_ = value;
}

// -------------------------------------------------------------------

// GuardStageSuccess

// required int32 stage_id = 1;
inline bool GuardStageSuccess::has_stage_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuardStageSuccess::set_has_stage_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuardStageSuccess::clear_has_stage_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuardStageSuccess::clear_stage_id() {
  stage_id_ = 0;
  clear_has_stage_id();
  SetDirty();
}
inline ::google::protobuf::int32 GuardStageSuccess::stage_id() const {
  return stage_id_;
}
inline void GuardStageSuccess::set_stage_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_stage_id();
  stage_id_ = value;
}

// required string name = 2;
inline bool GuardStageSuccess::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuardStageSuccess::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuardStageSuccess::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuardStageSuccess::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
  SetDirty();
}
inline const ::std::string& GuardStageSuccess::name() const {
  return *name_;
}
inline void GuardStageSuccess::set_name(const ::std::string& value) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GuardStageSuccess::set_name(const char* value) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GuardStageSuccess::set_name(const char* value, size_t size) {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuardStageSuccess::mutable_name() {
  SetDirty();
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GuardStageSuccess::release_name() {
  SetDirty();
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuardStageSuccess::set_allocated_name(::std::string* name) {
  SetDirty();
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BattleFormation

// optional string player_name = 1;
inline bool BattleFormation::has_player_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BattleFormation::set_has_player_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BattleFormation::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BattleFormation::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
  SetDirty();
}
inline const ::std::string& BattleFormation::player_name() const {
  return *player_name_;
}
inline void BattleFormation::set_player_name(const ::std::string& value) {
  SetDirty();
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void BattleFormation::set_player_name(const char* value) {
  SetDirty();
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void BattleFormation::set_player_name(const char* value, size_t size) {
  SetDirty();
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BattleFormation::mutable_player_name() {
  SetDirty();
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* BattleFormation::release_player_name() {
  SetDirty();
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BattleFormation::set_allocated_player_name(::std::string* player_name) {
  SetDirty();
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .Packet.ActorFullInfo actors = 2;
inline int BattleFormation::actors_size() const {
  return actors_.size();
}
inline void BattleFormation::clear_actors() {
  actors_.Clear();
  SetDirty();
}
inline const ::Packet::ActorFullInfo& BattleFormation::actors(int index) const {
  return actors_.Get(index);
}
inline ::Packet::ActorFullInfo* BattleFormation::mutable_actors(int index) {
  SetDirty();
  return actors_.Mutable(index);
}
inline ::Packet::ActorFullInfo* BattleFormation::add_actors() {
  SetDirty();
  return actors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::ActorFullInfo >&
BattleFormation::actors() const {
  return actors_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::ActorFullInfo >*
BattleFormation::mutable_actors() {
  SetDirty();
  return &actors_;
}

// optional fixed64 player_guid = 3;
inline bool BattleFormation::has_player_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BattleFormation::set_has_player_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BattleFormation::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BattleFormation::clear_player_guid() {
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 BattleFormation::player_guid() const {
  return player_guid_;
}
inline void BattleFormation::set_player_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_player_guid();
  player_guid_ = value;
}

// -------------------------------------------------------------------

// Challengers

// repeated string names = 1;
inline int Challengers::names_size() const {
  return names_.size();
}
inline void Challengers::clear_names() {
  names_.Clear();
  SetDirty();
}
inline const ::std::string& Challengers::names(int index) const {
  return names_.Get(index);
}
inline ::std::string* Challengers::mutable_names(int index) {
  SetDirty();
  return names_.Mutable(index);
}
inline void Challengers::set_names(int index, const ::std::string& value) {
  SetDirty();
  names_.Mutable(index)->assign(value);
}
inline void Challengers::set_names(int index, const char* value) {
  SetDirty();
  names_.Mutable(index)->assign(value);
}
inline void Challengers::set_names(int index, const char* value, size_t size) {
  SetDirty();
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Challengers::add_names() {
  SetDirty();
  return names_.Add();
}
inline void Challengers::add_names(const ::std::string& value) {
  SetDirty();
  names_.Add()->assign(value);
}
inline void Challengers::add_names(const char* value) {
  SetDirty();
  names_.Add()->assign(value);
}
inline void Challengers::add_names(const char* value, size_t size) {
  SetDirty();
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Challengers::names() const {
  return names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Challengers::mutable_names() {
  SetDirty();
  return &names_;
}

// -------------------------------------------------------------------

// SceneStageCaptain

// optional .Packet.PlayerBasicInfo player_info = 1;
inline bool SceneStageCaptain::has_player_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SceneStageCaptain::set_has_player_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SceneStageCaptain::clear_has_player_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SceneStageCaptain::clear_player_info() {
  if (player_info_ != NULL) player_info_->::Packet::PlayerBasicInfo::Clear();
  clear_has_player_info();
  SetDirty();
}
inline const ::Packet::PlayerBasicInfo& SceneStageCaptain::player_info() const {
  return player_info_ != NULL ? *player_info_ : *default_instance_->player_info_;
}
inline ::Packet::PlayerBasicInfo* SceneStageCaptain::mutable_player_info() {
  SetDirty();
  set_has_player_info();
  if (player_info_ == NULL) player_info_ = new ::Packet::PlayerBasicInfo;
  return player_info_;
}
inline ::Packet::PlayerBasicInfo* SceneStageCaptain::release_player_info() {
  SetDirty();
  clear_has_player_info();
  ::Packet::PlayerBasicInfo* temp = player_info_;
  player_info_ = NULL;
  return temp;
}
inline void SceneStageCaptain::set_allocated_player_info(::Packet::PlayerBasicInfo* player_info) {
  SetDirty();
  delete player_info_;
  player_info_ = player_info;
  if (player_info) {
    set_has_player_info();
  } else {
    clear_has_player_info();
  }
}

// repeated .Packet.ActorFullInfo actors = 2;
inline int SceneStageCaptain::actors_size() const {
  return actors_.size();
}
inline void SceneStageCaptain::clear_actors() {
  actors_.Clear();
  SetDirty();
}
inline const ::Packet::ActorFullInfo& SceneStageCaptain::actors(int index) const {
  return actors_.Get(index);
}
inline ::Packet::ActorFullInfo* SceneStageCaptain::mutable_actors(int index) {
  SetDirty();
  return actors_.Mutable(index);
}
inline ::Packet::ActorFullInfo* SceneStageCaptain::add_actors() {
  SetDirty();
  return actors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::ActorFullInfo >&
SceneStageCaptain::actors() const {
  return actors_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::ActorFullInfo >*
SceneStageCaptain::mutable_actors() {
  SetDirty();
  return &actors_;
}

// -------------------------------------------------------------------

// PlayerStages

// required fixed64 player_guid = 1;
inline bool PlayerStages::has_player_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerStages::set_has_player_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerStages::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerStages::clear_player_guid() {
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 PlayerStages::player_guid() const {
  return player_guid_;
}
inline void PlayerStages::set_player_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_player_guid();
  player_guid_ = value;
}

// required int32 current_stage = 2;
inline bool PlayerStages::has_current_stage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerStages::set_has_current_stage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerStages::clear_has_current_stage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerStages::clear_current_stage() {
  current_stage_ = 0;
  clear_has_current_stage();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerStages::current_stage() const {
  return current_stage_;
}
inline void PlayerStages::set_current_stage(::google::protobuf::int32 value) {
  SetDirty();
  set_has_current_stage();
  current_stage_ = value;
}

// repeated .Packet.PlayerStage stages = 3;
inline int PlayerStages::stages_size() const {
  return stages_.size();
}
inline void PlayerStages::clear_stages() {
  stages_.Clear();
  SetDirty();
}
inline const ::Packet::PlayerStage& PlayerStages::stages(int index) const {
  return stages_.Get(index);
}
inline ::Packet::PlayerStage* PlayerStages::mutable_stages(int index) {
  SetDirty();
  return stages_.Mutable(index);
}
inline ::Packet::PlayerStage* PlayerStages::add_stages() {
  SetDirty();
  return stages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::PlayerStage >&
PlayerStages::stages() const {
  return stages_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::PlayerStage >*
PlayerStages::mutable_stages() {
  SetDirty();
  return &stages_;
}

// repeated .Packet.RTHC configs = 4;
inline int PlayerStages::configs_size() const {
  return configs_.size();
}
inline void PlayerStages::clear_configs() {
  configs_.Clear();
  SetDirty();
}
inline const ::Packet::RTHC& PlayerStages::configs(int index) const {
  return configs_.Get(index);
}
inline ::Packet::RTHC* PlayerStages::mutable_configs(int index) {
  SetDirty();
  return configs_.Mutable(index);
}
inline ::Packet::RTHC* PlayerStages::add_configs() {
  SetDirty();
  return configs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::RTHC >&
PlayerStages::configs() const {
  return configs_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::RTHC >*
PlayerStages::mutable_configs() {
  SetDirty();
  return &configs_;
}

// -------------------------------------------------------------------

// PlayerStageDB

// required fixed64 player_guid = 1;
inline bool PlayerStageDB::has_player_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerStageDB::set_has_player_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerStageDB::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerStageDB::clear_player_guid() {
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 PlayerStageDB::player_guid() const {
  return player_guid_;
}
inline void PlayerStageDB::set_player_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_player_guid();
  player_guid_ = value;
}

// required int32 current_stage = 2;
inline bool PlayerStageDB::has_current_stage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerStageDB::set_has_current_stage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerStageDB::clear_has_current_stage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerStageDB::clear_current_stage() {
  current_stage_ = 0;
  clear_has_current_stage();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerStageDB::current_stage() const {
  return current_stage_;
}
inline void PlayerStageDB::set_current_stage(::google::protobuf::int32 value) {
  SetDirty();
  set_has_current_stage();
  current_stage_ = value;
}

// repeated .Packet.RTHC configs = 3;
inline int PlayerStageDB::configs_size() const {
  return configs_.size();
}
inline void PlayerStageDB::clear_configs() {
  configs_.Clear();
  SetDirty();
}
inline const ::Packet::RTHC& PlayerStageDB::configs(int index) const {
  return configs_.Get(index);
}
inline ::Packet::RTHC* PlayerStageDB::mutable_configs(int index) {
  SetDirty();
  return configs_.Mutable(index);
}
inline ::Packet::RTHC* PlayerStageDB::add_configs() {
  SetDirty();
  return configs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::RTHC >&
PlayerStageDB::configs() const {
  return configs_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::RTHC >*
PlayerStageDB::mutable_configs() {
  SetDirty();
  return &configs_;
}

// -------------------------------------------------------------------

// PlayerStage

// required fixed64 player_guid = 1;
inline bool PlayerStage::has_player_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerStage::set_has_player_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerStage::clear_has_player_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerStage::clear_player_guid() {
  player_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_player_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 PlayerStage::player_guid() const {
  return player_guid_;
}
inline void PlayerStage::set_player_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_player_guid();
  player_guid_ = value;
}

// required int32 id = 2;
inline bool PlayerStage::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerStage::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerStage::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerStage::clear_id() {
  id_ = 0;
  clear_has_id();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerStage::id() const {
  return id_;
}
inline void PlayerStage::set_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_id();
  id_ = value;
}

// required bool raid = 3;
inline bool PlayerStage::has_raid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerStage::set_has_raid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerStage::clear_has_raid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerStage::clear_raid() {
  raid_ = false;
  clear_has_raid();
  SetDirty();
}
inline bool PlayerStage::raid() const {
  return raid_;
}
inline void PlayerStage::set_raid(bool value) {
  SetDirty();
  set_has_raid();
  raid_ = value;
}

// required int32 boss = 4;
inline bool PlayerStage::has_boss() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerStage::set_has_boss() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerStage::clear_has_boss() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerStage::clear_boss() {
  boss_ = 0;
  clear_has_boss();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerStage::boss() const {
  return boss_;
}
inline void PlayerStage::set_boss(::google::protobuf::int32 value) {
  SetDirty();
  set_has_boss();
  boss_ = value;
}

// required int32 num = 5;
inline bool PlayerStage::has_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerStage::set_has_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerStage::clear_has_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerStage::clear_num() {
  num_ = 0;
  clear_has_num();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerStage::num() const {
  return num_;
}
inline void PlayerStage::set_num(::google::protobuf::int32 value) {
  SetDirty();
  set_has_num();
  num_ = value;
}

// required int32 den = 6;
inline bool PlayerStage::has_den() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerStage::set_has_den() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerStage::clear_has_den() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerStage::clear_den() {
  den_ = 0;
  clear_has_den();
  SetDirty();
}
inline ::google::protobuf::int32 PlayerStage::den() const {
  return den_;
}
inline void PlayerStage::set_den(::google::protobuf::int32 value) {
  SetDirty();
  set_has_den();
  den_ = value;
}

// -------------------------------------------------------------------

// RTHC

// required int32 stage_id = 1;
inline bool RTHC::has_stage_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RTHC::set_has_stage_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RTHC::clear_has_stage_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RTHC::clear_stage_id() {
  stage_id_ = 0;
  clear_has_stage_id();
  SetDirty();
}
inline ::google::protobuf::int32 RTHC::stage_id() const {
  return stage_id_;
}
inline void RTHC::set_stage_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_stage_id();
  stage_id_ = value;
}

// required fixed64 total_time = 2;
inline bool RTHC::has_total_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RTHC::set_has_total_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RTHC::clear_has_total_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RTHC::clear_total_time() {
  total_time_ = GOOGLE_ULONGLONG(0);
  clear_has_total_time();
  SetDirty();
}
inline ::google::protobuf::uint64 RTHC::total_time() const {
  return total_time_;
}
inline void RTHC::set_total_time(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_total_time();
  total_time_ = value;
}

// required fixed64 hook_time = 11;
inline bool RTHC::has_hook_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RTHC::set_has_hook_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RTHC::clear_has_hook_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RTHC::clear_hook_time() {
  hook_time_ = GOOGLE_ULONGLONG(0);
  clear_has_hook_time();
  SetDirty();
}
inline ::google::protobuf::uint64 RTHC::hook_time() const {
  return hook_time_;
}
inline void RTHC::set_hook_time(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_hook_time();
  hook_time_ = value;
}

// required int32 relate_score = 9;
inline bool RTHC::has_relate_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RTHC::set_has_relate_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RTHC::clear_has_relate_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RTHC::clear_relate_score() {
  relate_score_ = 0;
  clear_has_relate_score();
  SetDirty();
}
inline ::google::protobuf::int32 RTHC::relate_score() const {
  return relate_score_;
}
inline void RTHC::set_relate_score(::google::protobuf::int32 value) {
  SetDirty();
  set_has_relate_score();
  relate_score_ = value;
}

// required bool calc_done = 10;
inline bool RTHC::has_calc_done() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RTHC::set_has_calc_done() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RTHC::clear_has_calc_done() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RTHC::clear_calc_done() {
  calc_done_ = false;
  clear_has_calc_done();
  SetDirty();
}
inline bool RTHC::calc_done() const {
  return calc_done_;
}
inline void RTHC::set_calc_done(bool value) {
  SetDirty();
  set_has_calc_done();
  calc_done_ = value;
}

// required int32 wave_exp = 12;
inline bool RTHC::has_wave_exp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RTHC::set_has_wave_exp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RTHC::clear_has_wave_exp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RTHC::clear_wave_exp() {
  wave_exp_ = 0;
  clear_has_wave_exp();
  SetDirty();
}
inline ::google::protobuf::int32 RTHC::wave_exp() const {
  return wave_exp_;
}
inline void RTHC::set_wave_exp(::google::protobuf::int32 value) {
  SetDirty();
  set_has_wave_exp();
  wave_exp_ = value;
}

// required int32 wave_gold = 13;
inline bool RTHC::has_wave_gold() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RTHC::set_has_wave_gold() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RTHC::clear_has_wave_gold() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RTHC::clear_wave_gold() {
  wave_gold_ = 0;
  clear_has_wave_gold();
  SetDirty();
}
inline ::google::protobuf::int32 RTHC::wave_gold() const {
  return wave_gold_;
}
inline void RTHC::set_wave_gold(::google::protobuf::int32 value) {
  SetDirty();
  set_has_wave_gold();
  wave_gold_ = value;
}

// required fixed64 wave_mill_sec = 14;
inline bool RTHC::has_wave_mill_sec() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RTHC::set_has_wave_mill_sec() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RTHC::clear_has_wave_mill_sec() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RTHC::clear_wave_mill_sec() {
  wave_mill_sec_ = GOOGLE_ULONGLONG(0);
  clear_has_wave_mill_sec();
  SetDirty();
}
inline ::google::protobuf::uint64 RTHC::wave_mill_sec() const {
  return wave_mill_sec_;
}
inline void RTHC::set_wave_mill_sec(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_wave_mill_sec();
  wave_mill_sec_ = value;
}

// required fixed64 dead_mill_sec = 15;
inline bool RTHC::has_dead_mill_sec() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RTHC::set_has_dead_mill_sec() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RTHC::clear_has_dead_mill_sec() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RTHC::clear_dead_mill_sec() {
  dead_mill_sec_ = GOOGLE_ULONGLONG(0);
  clear_has_dead_mill_sec();
  SetDirty();
}
inline ::google::protobuf::uint64 RTHC::dead_mill_sec() const {
  return dead_mill_sec_;
}
inline void RTHC::set_dead_mill_sec(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_dead_mill_sec();
  dead_mill_sec_ = value;
}

// required int32 wave_kill = 16;
inline bool RTHC::has_wave_kill() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RTHC::set_has_wave_kill() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RTHC::clear_has_wave_kill() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RTHC::clear_wave_kill() {
  wave_kill_ = 0;
  clear_has_wave_kill();
  SetDirty();
}
inline ::google::protobuf::int32 RTHC::wave_kill() const {
  return wave_kill_;
}
inline void RTHC::set_wave_kill(::google::protobuf::int32 value) {
  SetDirty();
  set_has_wave_kill();
  wave_kill_ = value;
}

// -------------------------------------------------------------------

// ResetRealTimeHookEfficient

// -------------------------------------------------------------------

// RealTimeHookEfficient

// required .Packet.RTHC config = 1;
inline bool RealTimeHookEfficient::has_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RealTimeHookEfficient::set_has_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RealTimeHookEfficient::clear_has_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RealTimeHookEfficient::clear_config() {
  if (config_ != NULL) config_->::Packet::RTHC::Clear();
  clear_has_config();
  SetDirty();
}
inline const ::Packet::RTHC& RealTimeHookEfficient::config() const {
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
inline ::Packet::RTHC* RealTimeHookEfficient::mutable_config() {
  SetDirty();
  set_has_config();
  if (config_ == NULL) config_ = new ::Packet::RTHC;
  return config_;
}
inline ::Packet::RTHC* RealTimeHookEfficient::release_config() {
  SetDirty();
  clear_has_config();
  ::Packet::RTHC* temp = config_;
  config_ = NULL;
  return temp;
}
inline void RealTimeHookEfficient::set_allocated_config(::Packet::RTHC* config) {
  SetDirty();
  delete config_;
  config_ = config;
  if (config) {
    set_has_config();
  } else {
    clear_has_config();
  }
}

// repeated int32 item_ids = 2;
inline int RealTimeHookEfficient::item_ids_size() const {
  return item_ids_.size();
}
inline void RealTimeHookEfficient::clear_item_ids() {
  item_ids_.Clear();
  SetDirty();
}
inline ::google::protobuf::int32 RealTimeHookEfficient::item_ids(int index) const {
  return item_ids_.Get(index);
}
inline void RealTimeHookEfficient::set_item_ids(int index, ::google::protobuf::int32 value) {
  SetDirty();
  item_ids_.Set(index, value);
}
inline void RealTimeHookEfficient::add_item_ids(::google::protobuf::int32 value) {
  SetDirty();
  item_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RealTimeHookEfficient::item_ids() const {
  return item_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RealTimeHookEfficient::mutable_item_ids() {
  SetDirty();
  return &item_ids_;
}

// repeated int32 item_counts = 3;
inline int RealTimeHookEfficient::item_counts_size() const {
  return item_counts_.size();
}
inline void RealTimeHookEfficient::clear_item_counts() {
  item_counts_.Clear();
  SetDirty();
}
inline ::google::protobuf::int32 RealTimeHookEfficient::item_counts(int index) const {
  return item_counts_.Get(index);
}
inline void RealTimeHookEfficient::set_item_counts(int index, ::google::protobuf::int32 value) {
  SetDirty();
  item_counts_.Set(index, value);
}
inline void RealTimeHookEfficient::add_item_counts(::google::protobuf::int32 value) {
  SetDirty();
  item_counts_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RealTimeHookEfficient::item_counts() const {
  return item_counts_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RealTimeHookEfficient::mutable_item_counts() {
  SetDirty();
  return &item_counts_;
}

// required int32 up_level = 4;
inline bool RealTimeHookEfficient::has_up_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RealTimeHookEfficient::set_has_up_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RealTimeHookEfficient::clear_has_up_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RealTimeHookEfficient::clear_up_level() {
  up_level_ = 0;
  clear_has_up_level();
  SetDirty();
}
inline ::google::protobuf::int32 RealTimeHookEfficient::up_level() const {
  return up_level_;
}
inline void RealTimeHookEfficient::set_up_level(::google::protobuf::int32 value) {
  SetDirty();
  set_has_up_level();
  up_level_ = value;
}

// required fixed64 off_time = 5;
inline bool RealTimeHookEfficient::has_off_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RealTimeHookEfficient::set_has_off_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RealTimeHookEfficient::clear_has_off_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RealTimeHookEfficient::clear_off_time() {
  off_time_ = GOOGLE_ULONGLONG(0);
  clear_has_off_time();
  SetDirty();
}
inline ::google::protobuf::uint64 RealTimeHookEfficient::off_time() const {
  return off_time_;
}
inline void RealTimeHookEfficient::set_off_time(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_off_time();
  off_time_ = value;
}

// required int32 level_up_need_seconds = 6;
inline bool RealTimeHookEfficient::has_level_up_need_seconds() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RealTimeHookEfficient::set_has_level_up_need_seconds() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RealTimeHookEfficient::clear_has_level_up_need_seconds() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RealTimeHookEfficient::clear_level_up_need_seconds() {
  level_up_need_seconds_ = 0;
  clear_has_level_up_need_seconds();
  SetDirty();
}
inline ::google::protobuf::int32 RealTimeHookEfficient::level_up_need_seconds() const {
  return level_up_need_seconds_;
}
inline void RealTimeHookEfficient::set_level_up_need_seconds(::google::protobuf::int32 value) {
  SetDirty();
  set_has_level_up_need_seconds();
  level_up_need_seconds_ = value;
}

// required int32 total_exp = 7;
inline bool RealTimeHookEfficient::has_total_exp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RealTimeHookEfficient::set_has_total_exp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RealTimeHookEfficient::clear_has_total_exp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RealTimeHookEfficient::clear_total_exp() {
  total_exp_ = 0;
  clear_has_total_exp();
  SetDirty();
}
inline ::google::protobuf::int32 RealTimeHookEfficient::total_exp() const {
  return total_exp_;
}
inline void RealTimeHookEfficient::set_total_exp(::google::protobuf::int32 value) {
  SetDirty();
  set_has_total_exp();
  total_exp_ = value;
}

// required int32 total_exp_extra = 20;
inline bool RealTimeHookEfficient::has_total_exp_extra() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RealTimeHookEfficient::set_has_total_exp_extra() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RealTimeHookEfficient::clear_has_total_exp_extra() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RealTimeHookEfficient::clear_total_exp_extra() {
  total_exp_extra_ = 0;
  clear_has_total_exp_extra();
  SetDirty();
}
inline ::google::protobuf::int32 RealTimeHookEfficient::total_exp_extra() const {
  return total_exp_extra_;
}
inline void RealTimeHookEfficient::set_total_exp_extra(::google::protobuf::int32 value) {
  SetDirty();
  set_has_total_exp_extra();
  total_exp_extra_ = value;
}

// required int32 total_gold = 8;
inline bool RealTimeHookEfficient::has_total_gold() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RealTimeHookEfficient::set_has_total_gold() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RealTimeHookEfficient::clear_has_total_gold() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RealTimeHookEfficient::clear_total_gold() {
  total_gold_ = 0;
  clear_has_total_gold();
  SetDirty();
}
inline ::google::protobuf::int32 RealTimeHookEfficient::total_gold() const {
  return total_gold_;
}
inline void RealTimeHookEfficient::set_total_gold(::google::protobuf::int32 value) {
  SetDirty();
  set_has_total_gold();
  total_gold_ = value;
}

// required int32 battle_times = 9;
inline bool RealTimeHookEfficient::has_battle_times() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RealTimeHookEfficient::set_has_battle_times() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RealTimeHookEfficient::clear_has_battle_times() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RealTimeHookEfficient::clear_battle_times() {
  battle_times_ = 0;
  clear_has_battle_times();
  SetDirty();
}
inline ::google::protobuf::int32 RealTimeHookEfficient::battle_times() const {
  return battle_times_;
}
inline void RealTimeHookEfficient::set_battle_times(::google::protobuf::int32 value) {
  SetDirty();
  set_has_battle_times();
  battle_times_ = value;
}

// required int32 battle_time_costs = 19;
inline bool RealTimeHookEfficient::has_battle_time_costs() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RealTimeHookEfficient::set_has_battle_time_costs() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RealTimeHookEfficient::clear_has_battle_time_costs() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RealTimeHookEfficient::clear_battle_time_costs() {
  battle_time_costs_ = 0;
  clear_has_battle_time_costs();
  SetDirty();
}
inline ::google::protobuf::int32 RealTimeHookEfficient::battle_time_costs() const {
  return battle_time_costs_;
}
inline void RealTimeHookEfficient::set_battle_time_costs(::google::protobuf::int32 value) {
  SetDirty();
  set_has_battle_time_costs();
  battle_time_costs_ = value;
}

// required int32 monster_kills = 10;
inline bool RealTimeHookEfficient::has_monster_kills() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RealTimeHookEfficient::set_has_monster_kills() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RealTimeHookEfficient::clear_has_monster_kills() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RealTimeHookEfficient::clear_monster_kills() {
  monster_kills_ = 0;
  clear_has_monster_kills();
  SetDirty();
}
inline ::google::protobuf::int32 RealTimeHookEfficient::monster_kills() const {
  return monster_kills_;
}
inline void RealTimeHookEfficient::set_monster_kills(::google::protobuf::int32 value) {
  SetDirty();
  set_has_monster_kills();
  monster_kills_ = value;
}

// required int32 dead_times = 11;
inline bool RealTimeHookEfficient::has_dead_times() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RealTimeHookEfficient::set_has_dead_times() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RealTimeHookEfficient::clear_has_dead_times() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RealTimeHookEfficient::clear_dead_times() {
  dead_times_ = 0;
  clear_has_dead_times();
  SetDirty();
}
inline ::google::protobuf::int32 RealTimeHookEfficient::dead_times() const {
  return dead_times_;
}
inline void RealTimeHookEfficient::set_dead_times(::google::protobuf::int32 value) {
  SetDirty();
  set_has_dead_times();
  dead_times_ = value;
}

// repeated int32 boss_stage_ids = 12;
inline int RealTimeHookEfficient::boss_stage_ids_size() const {
  return boss_stage_ids_.size();
}
inline void RealTimeHookEfficient::clear_boss_stage_ids() {
  boss_stage_ids_.Clear();
  SetDirty();
}
inline ::google::protobuf::int32 RealTimeHookEfficient::boss_stage_ids(int index) const {
  return boss_stage_ids_.Get(index);
}
inline void RealTimeHookEfficient::set_boss_stage_ids(int index, ::google::protobuf::int32 value) {
  SetDirty();
  boss_stage_ids_.Set(index, value);
}
inline void RealTimeHookEfficient::add_boss_stage_ids(::google::protobuf::int32 value) {
  SetDirty();
  boss_stage_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RealTimeHookEfficient::boss_stage_ids() const {
  return boss_stage_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RealTimeHookEfficient::mutable_boss_stage_ids() {
  SetDirty();
  return &boss_stage_ids_;
}

// repeated int32 boss_count = 13;
inline int RealTimeHookEfficient::boss_count_size() const {
  return boss_count_.size();
}
inline void RealTimeHookEfficient::clear_boss_count() {
  boss_count_.Clear();
  SetDirty();
}
inline ::google::protobuf::int32 RealTimeHookEfficient::boss_count(int index) const {
  return boss_count_.Get(index);
}
inline void RealTimeHookEfficient::set_boss_count(int index, ::google::protobuf::int32 value) {
  SetDirty();
  boss_count_.Set(index, value);
}
inline void RealTimeHookEfficient::add_boss_count(::google::protobuf::int32 value) {
  SetDirty();
  boss_count_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RealTimeHookEfficient::boss_count() const {
  return boss_count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RealTimeHookEfficient::mutable_boss_count() {
  SetDirty();
  return &boss_count_;
}

// required int32 green_equip_count = 14;
inline bool RealTimeHookEfficient::has_green_equip_count() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RealTimeHookEfficient::set_has_green_equip_count() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RealTimeHookEfficient::clear_has_green_equip_count() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RealTimeHookEfficient::clear_green_equip_count() {
  green_equip_count_ = 0;
  clear_has_green_equip_count();
  SetDirty();
}
inline ::google::protobuf::int32 RealTimeHookEfficient::green_equip_count() const {
  return green_equip_count_;
}
inline void RealTimeHookEfficient::set_green_equip_count(::google::protobuf::int32 value) {
  SetDirty();
  set_has_green_equip_count();
  green_equip_count_ = value;
}

// required int32 green_equip_dismantle = 15;
inline bool RealTimeHookEfficient::has_green_equip_dismantle() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RealTimeHookEfficient::set_has_green_equip_dismantle() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RealTimeHookEfficient::clear_has_green_equip_dismantle() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RealTimeHookEfficient::clear_green_equip_dismantle() {
  green_equip_dismantle_ = 0;
  clear_has_green_equip_dismantle();
  SetDirty();
}
inline ::google::protobuf::int32 RealTimeHookEfficient::green_equip_dismantle() const {
  return green_equip_dismantle_;
}
inline void RealTimeHookEfficient::set_green_equip_dismantle(::google::protobuf::int32 value) {
  SetDirty();
  set_has_green_equip_dismantle();
  green_equip_dismantle_ = value;
}

// required int32 blue_equip_count = 16;
inline bool RealTimeHookEfficient::has_blue_equip_count() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RealTimeHookEfficient::set_has_blue_equip_count() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RealTimeHookEfficient::clear_has_blue_equip_count() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RealTimeHookEfficient::clear_blue_equip_count() {
  blue_equip_count_ = 0;
  clear_has_blue_equip_count();
  SetDirty();
}
inline ::google::protobuf::int32 RealTimeHookEfficient::blue_equip_count() const {
  return blue_equip_count_;
}
inline void RealTimeHookEfficient::set_blue_equip_count(::google::protobuf::int32 value) {
  SetDirty();
  set_has_blue_equip_count();
  blue_equip_count_ = value;
}

// required int32 blue_equip_count_dismantle = 17;
inline bool RealTimeHookEfficient::has_blue_equip_count_dismantle() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RealTimeHookEfficient::set_has_blue_equip_count_dismantle() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RealTimeHookEfficient::clear_has_blue_equip_count_dismantle() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RealTimeHookEfficient::clear_blue_equip_count_dismantle() {
  blue_equip_count_dismantle_ = 0;
  clear_has_blue_equip_count_dismantle();
  SetDirty();
}
inline ::google::protobuf::int32 RealTimeHookEfficient::blue_equip_count_dismantle() const {
  return blue_equip_count_dismantle_;
}
inline void RealTimeHookEfficient::set_blue_equip_count_dismantle(::google::protobuf::int32 value) {
  SetDirty();
  set_has_blue_equip_count_dismantle();
  blue_equip_count_dismantle_ = value;
}

// required int32 purple_equip_count = 18;
inline bool RealTimeHookEfficient::has_purple_equip_count() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void RealTimeHookEfficient::set_has_purple_equip_count() {
  _has_bits_[0] |= 0x00080000u;
}
inline void RealTimeHookEfficient::clear_has_purple_equip_count() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void RealTimeHookEfficient::clear_purple_equip_count() {
  purple_equip_count_ = 0;
  clear_has_purple_equip_count();
  SetDirty();
}
inline ::google::protobuf::int32 RealTimeHookEfficient::purple_equip_count() const {
  return purple_equip_count_;
}
inline void RealTimeHookEfficient::set_purple_equip_count(::google::protobuf::int32 value) {
  SetDirty();
  set_has_purple_equip_count();
  purple_equip_count_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SceneStage_2eproto__INCLUDED
