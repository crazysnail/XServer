// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MapPush.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MapPush.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Packet {

namespace {

const ::google::protobuf::Descriptor* MapPushStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapPushStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapPushStartReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapPushStartReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MapPushStartReply_Result_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MapPushStop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapPushStop_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapPushStopReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapPushStopReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MapPushStopReply_Result_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MapPush_2eproto() {
  protobuf_AddDesc_MapPush_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MapPush.proto");
  GOOGLE_CHECK(file != NULL);
  MapPushStart_descriptor_ = file->message_type(0);
  static const int MapPushStart_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPushStart, scene_id_),
  };
  MapPushStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapPushStart_descriptor_,
      MapPushStart::default_instance_,
      MapPushStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPushStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPushStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapPushStart));
  MapPushStartReply_descriptor_ = file->message_type(1);
  static const int MapPushStartReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPushStartReply, result_),
  };
  MapPushStartReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapPushStartReply_descriptor_,
      MapPushStartReply::default_instance_,
      MapPushStartReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPushStartReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPushStartReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapPushStartReply));
  MapPushStartReply_Result_descriptor_ = MapPushStartReply_descriptor_->enum_type(0);
  MapPushStop_descriptor_ = file->message_type(2);
  static const int MapPushStop_offsets_[1] = {
  };
  MapPushStop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapPushStop_descriptor_,
      MapPushStop::default_instance_,
      MapPushStop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPushStop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPushStop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapPushStop));
  MapPushStopReply_descriptor_ = file->message_type(3);
  static const int MapPushStopReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPushStopReply, result_),
  };
  MapPushStopReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapPushStopReply_descriptor_,
      MapPushStopReply::default_instance_,
      MapPushStopReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPushStopReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapPushStopReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapPushStopReply));
  MapPushStopReply_Result_descriptor_ = MapPushStopReply_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MapPush_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapPushStart_descriptor_, &MapPushStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapPushStartReply_descriptor_, &MapPushStartReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapPushStop_descriptor_, &MapPushStop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapPushStopReply_descriptor_, &MapPushStopReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MapPush_2eproto() {
  delete MapPushStart::default_instance_;
  delete MapPushStart_reflection_;
  delete MapPushStartReply::default_instance_;
  delete MapPushStartReply_reflection_;
  delete MapPushStop::default_instance_;
  delete MapPushStop_reflection_;
  delete MapPushStopReply::default_instance_;
  delete MapPushStopReply_reflection_;
}

void protobuf_AddDesc_MapPush_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rMapPush.proto\022\006Packet\" \n\014MapPushStart\022"
    "\020\n\010scene_id\030\001 \002(\005\"|\n\021MapPushStartReply\0220"
    "\n\006result\030\001 \002(\0162 .Packet.MapPushStartRepl"
    "y.Result\"5\n\006Result\022\013\n\007SUCCESS\020\001\022\021\n\rALREA"
    "DY_START\020\002\022\013\n\007UNKNOWN\020\003\"\r\n\013MapPushStop\"x"
    "\n\020MapPushStopReply\022/\n\006result\030\001 \002(\0162\037.Pac"
    "ket.MapPushStopReply.Result\"3\n\006Result\022\013\n"
    "\007SUCCESS\020\001\022\017\n\013CANNOT_STOP\020\002\022\013\n\007UNKNOWN\020\003", 320);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MapPush.proto", &protobuf_RegisterTypes);
  MapPushStart::default_instance_ = new MapPushStart();
  MapPushStartReply::default_instance_ = new MapPushStartReply();
  MapPushStop::default_instance_ = new MapPushStop();
  MapPushStopReply::default_instance_ = new MapPushStopReply();
  MapPushStart::default_instance_->InitAsDefaultInstance();
  MapPushStartReply::default_instance_->InitAsDefaultInstance();
  MapPushStop::default_instance_->InitAsDefaultInstance();
  MapPushStopReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MapPush_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MapPush_2eproto {
  StaticDescriptorInitializer_MapPush_2eproto() {
    protobuf_AddDesc_MapPush_2eproto();
  }
} static_descriptor_initializer_MapPush_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MapPushStart::kSceneIdFieldNumber;
#endif  // !_MSC_VER

MapPushStart::MapPushStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapPushStart::InitAsDefaultInstance() {
}

MapPushStart::MapPushStart(const MapPushStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapPushStart::SharedCtor() {
  _cached_size_ = 0;
  scene_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapPushStart::~MapPushStart() {
  SharedDtor();
}

void MapPushStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapPushStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapPushStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapPushStart_descriptor_;
}

const MapPushStart& MapPushStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapPush_2eproto();
  return *default_instance_;
}

MapPushStart* MapPushStart::default_instance_ = NULL;

MapPushStart* MapPushStart::New() const {
  return new MapPushStart;
}

void MapPushStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scene_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool MapPushStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 scene_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void MapPushStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 scene_id = 1;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->scene_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapPushStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 scene_id = 1;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->scene_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapPushStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 scene_id = 1;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapPushStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapPushStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapPushStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void MapPushStart::MergeFrom(const MapPushStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void MapPushStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void MapPushStart::CopyFrom(const MapPushStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool MapPushStart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MapPushStart::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void MapPushStart::Swap(MapPushStart* other) {
  if (other != this) {
    std::swap(scene_id_, other->scene_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata MapPushStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapPushStart_descriptor_;
  metadata.reflection = MapPushStart_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MapPushStartReply_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapPushStartReply_Result_descriptor_;
}
bool MapPushStartReply_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MapPushStartReply_Result MapPushStartReply::SUCCESS;
const MapPushStartReply_Result MapPushStartReply::ALREADY_START;
const MapPushStartReply_Result MapPushStartReply::UNKNOWN;
const MapPushStartReply_Result MapPushStartReply::Result_MIN;
const MapPushStartReply_Result MapPushStartReply::Result_MAX;
const int MapPushStartReply::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MapPushStartReply::kResultFieldNumber;
#endif  // !_MSC_VER

MapPushStartReply::MapPushStartReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapPushStartReply::InitAsDefaultInstance() {
}

MapPushStartReply::MapPushStartReply(const MapPushStartReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapPushStartReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapPushStartReply::~MapPushStartReply() {
  SharedDtor();
}

void MapPushStartReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapPushStartReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapPushStartReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapPushStartReply_descriptor_;
}

const MapPushStartReply& MapPushStartReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapPush_2eproto();
  return *default_instance_;
}

MapPushStartReply* MapPushStartReply::default_instance_ = NULL;

MapPushStartReply* MapPushStartReply::New() const {
  return new MapPushStartReply;
}

void MapPushStartReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool MapPushStartReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.MapPushStartReply.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::MapPushStartReply_Result_IsValid(value)) {
            set_result(static_cast< ::Packet::MapPushStartReply_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void MapPushStartReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.MapPushStartReply.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapPushStartReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.MapPushStartReply.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapPushStartReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.MapPushStartReply.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapPushStartReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapPushStartReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapPushStartReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void MapPushStartReply::MergeFrom(const MapPushStartReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void MapPushStartReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void MapPushStartReply::CopyFrom(const MapPushStartReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool MapPushStartReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MapPushStartReply::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void MapPushStartReply::Swap(MapPushStartReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata MapPushStartReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapPushStartReply_descriptor_;
  metadata.reflection = MapPushStartReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MapPushStop::MapPushStop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapPushStop::InitAsDefaultInstance() {
}

MapPushStop::MapPushStop(const MapPushStop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapPushStop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapPushStop::~MapPushStop() {
  SharedDtor();
}

void MapPushStop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapPushStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapPushStop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapPushStop_descriptor_;
}

const MapPushStop& MapPushStop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapPush_2eproto();
  return *default_instance_;
}

MapPushStop* MapPushStop::default_instance_ = NULL;

MapPushStop* MapPushStop::New() const {
  return new MapPushStop;
}

void MapPushStop::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool MapPushStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  SetDirty();
  return true;
#undef DO_
}

void MapPushStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapPushStop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapPushStop::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapPushStop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapPushStop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapPushStop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void MapPushStop::MergeFrom(const MapPushStop& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void MapPushStop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void MapPushStop::CopyFrom(const MapPushStop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool MapPushStop::IsInitialized() const {

  return true;
}

void MapPushStop::SetInitialized() {

  return;
}

void MapPushStop::Swap(MapPushStop* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata MapPushStop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapPushStop_descriptor_;
  metadata.reflection = MapPushStop_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MapPushStopReply_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapPushStopReply_Result_descriptor_;
}
bool MapPushStopReply_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MapPushStopReply_Result MapPushStopReply::SUCCESS;
const MapPushStopReply_Result MapPushStopReply::CANNOT_STOP;
const MapPushStopReply_Result MapPushStopReply::UNKNOWN;
const MapPushStopReply_Result MapPushStopReply::Result_MIN;
const MapPushStopReply_Result MapPushStopReply::Result_MAX;
const int MapPushStopReply::Result_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MapPushStopReply::kResultFieldNumber;
#endif  // !_MSC_VER

MapPushStopReply::MapPushStopReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapPushStopReply::InitAsDefaultInstance() {
}

MapPushStopReply::MapPushStopReply(const MapPushStopReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapPushStopReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapPushStopReply::~MapPushStopReply() {
  SharedDtor();
}

void MapPushStopReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapPushStopReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapPushStopReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapPushStopReply_descriptor_;
}

const MapPushStopReply& MapPushStopReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MapPush_2eproto();
  return *default_instance_;
}

MapPushStopReply* MapPushStopReply::default_instance_ = NULL;

MapPushStopReply* MapPushStopReply::New() const {
  return new MapPushStopReply;
}

void MapPushStopReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool MapPushStopReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Packet.MapPushStopReply.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Packet::MapPushStopReply_Result_IsValid(value)) {
            set_result(static_cast< ::Packet::MapPushStopReply_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void MapPushStopReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Packet.MapPushStopReply.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapPushStopReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Packet.MapPushStopReply.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapPushStopReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Packet.MapPushStopReply.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapPushStopReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapPushStopReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapPushStopReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void MapPushStopReply::MergeFrom(const MapPushStopReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void MapPushStopReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void MapPushStopReply::CopyFrom(const MapPushStopReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool MapPushStopReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MapPushStopReply::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void MapPushStopReply::Swap(MapPushStopReply* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata MapPushStopReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapPushStopReply_descriptor_;
  metadata.reflection = MapPushStopReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

// @@protoc_insertion_point(global_scope)
