// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GuildConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GuildConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Config {

namespace {

const ::google::protobuf::Descriptor* GuildBuildLevelConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildBuildLevelConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildLevelFixConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildLevelFixConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildPracticeConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildPracticeConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildPracticeLevelConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildPracticeLevelConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildCDKConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildCDKConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildWetCopyConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildWetCopyConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildWetCopyStageConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildWetCopyStageConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildPositionConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildPositionConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildDonateConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildDonateConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GuildConfig_2eproto() {
  protobuf_AddDesc_GuildConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GuildConfig.proto");
  GOOGLE_CHECK(file != NULL);
  GuildBuildLevelConfig_descriptor_ = file->message_type(0);
  static const int GuildBuildLevelConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBuildLevelConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBuildLevelConfig, buildtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBuildLevelConfig, buildlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBuildLevelConfig, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBuildLevelConfig, param_),
  };
  GuildBuildLevelConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildBuildLevelConfig_descriptor_,
      GuildBuildLevelConfig::default_instance_,
      GuildBuildLevelConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBuildLevelConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBuildLevelConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildBuildLevelConfig));
  GuildLevelFixConfig_descriptor_ = file->message_type(1);
  static const int GuildLevelFixConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildLevelFixConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildLevelFixConfig, battle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildLevelFixConfig, playergold_),
  };
  GuildLevelFixConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildLevelFixConfig_descriptor_,
      GuildLevelFixConfig::default_instance_,
      GuildLevelFixConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildLevelFixConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildLevelFixConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildLevelFixConfig));
  GuildPracticeConfig_descriptor_ = file->message_type(2);
  static const int GuildPracticeConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPracticeConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPracticeConfig, attribute_),
  };
  GuildPracticeConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildPracticeConfig_descriptor_,
      GuildPracticeConfig::default_instance_,
      GuildPracticeConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPracticeConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPracticeConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildPracticeConfig));
  GuildPracticeLevelConfig_descriptor_ = file->message_type(3);
  static const int GuildPracticeLevelConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPracticeLevelConfig, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPracticeLevelConfig, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPracticeLevelConfig, playerlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPracticeLevelConfig, guildlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPracticeLevelConfig, contributionlimit_),
  };
  GuildPracticeLevelConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildPracticeLevelConfig_descriptor_,
      GuildPracticeLevelConfig::default_instance_,
      GuildPracticeLevelConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPracticeLevelConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPracticeLevelConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildPracticeLevelConfig));
  GuildCDKConfig_descriptor_ = file->message_type(4);
  static const int GuildCDKConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCDKConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCDKConfig, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCDKConfig, cost_),
  };
  GuildCDKConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildCDKConfig_descriptor_,
      GuildCDKConfig::default_instance_,
      GuildCDKConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCDKConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCDKConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildCDKConfig));
  GuildWetCopyConfig_descriptor_ = file->message_type(5);
  static const int GuildWetCopyConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWetCopyConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWetCopyConfig, coincost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWetCopyConfig, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWetCopyConfig, levellimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWetCopyConfig, guildlevellimit_),
  };
  GuildWetCopyConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildWetCopyConfig_descriptor_,
      GuildWetCopyConfig::default_instance_,
      GuildWetCopyConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWetCopyConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWetCopyConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildWetCopyConfig));
  GuildWetCopyStageConfig_descriptor_ = file->message_type(6);
  static const int GuildWetCopyStageConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWetCopyStageConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWetCopyStageConfig, pro_stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWetCopyStageConfig, copy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWetCopyStageConfig, monster_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWetCopyStageConfig, drop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWetCopyStageConfig, boss_id_),
  };
  GuildWetCopyStageConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildWetCopyStageConfig_descriptor_,
      GuildWetCopyStageConfig::default_instance_,
      GuildWetCopyStageConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWetCopyStageConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWetCopyStageConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildWetCopyStageConfig));
  GuildPositionConfig_descriptor_ = file->message_type(7);
  static const int GuildPositionConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPositionConfig, guildposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPositionConfig, bonus_),
  };
  GuildPositionConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildPositionConfig_descriptor_,
      GuildPositionConfig::default_instance_,
      GuildPositionConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPositionConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPositionConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildPositionConfig));
  GuildDonateConfig_descriptor_ = file->message_type(8);
  static const int GuildDonateConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDonateConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDonateConfig, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDonateConfig, addmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDonateConfig, addcontribute_),
  };
  GuildDonateConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildDonateConfig_descriptor_,
      GuildDonateConfig::default_instance_,
      GuildDonateConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDonateConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDonateConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildDonateConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GuildConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildBuildLevelConfig_descriptor_, &GuildBuildLevelConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildLevelFixConfig_descriptor_, &GuildLevelFixConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildPracticeConfig_descriptor_, &GuildPracticeConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildPracticeLevelConfig_descriptor_, &GuildPracticeLevelConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildCDKConfig_descriptor_, &GuildCDKConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildWetCopyConfig_descriptor_, &GuildWetCopyConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildWetCopyStageConfig_descriptor_, &GuildWetCopyStageConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildPositionConfig_descriptor_, &GuildPositionConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildDonateConfig_descriptor_, &GuildDonateConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GuildConfig_2eproto() {
  delete GuildBuildLevelConfig::default_instance_;
  delete GuildBuildLevelConfig_reflection_;
  delete GuildLevelFixConfig::default_instance_;
  delete GuildLevelFixConfig_reflection_;
  delete GuildPracticeConfig::default_instance_;
  delete GuildPracticeConfig_reflection_;
  delete GuildPracticeLevelConfig::default_instance_;
  delete GuildPracticeLevelConfig_reflection_;
  delete GuildCDKConfig::default_instance_;
  delete GuildCDKConfig_reflection_;
  delete GuildWetCopyConfig::default_instance_;
  delete GuildWetCopyConfig_reflection_;
  delete GuildWetCopyStageConfig::default_instance_;
  delete GuildWetCopyStageConfig_reflection_;
  delete GuildPositionConfig::default_instance_;
  delete GuildPositionConfig_reflection_;
  delete GuildDonateConfig::default_instance_;
  delete GuildDonateConfig_reflection_;
}

void protobuf_AddDesc_GuildConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Packet::protobuf_AddDesc_ProtoBufOption_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021GuildConfig.proto\022\006Config\032\024ProtoBufOpt"
    "ion.proto\"m\n\025GuildBuildLevelConfig\022\n\n\002id"
    "\030\001 \002(\005\022\021\n\tbuildtype\030\002 \002(\005\022\022\n\nbuildlevel\030"
    "\003 \002(\005\022\014\n\004cost\030\004 \002(\005\022\023\n\005param\030\005 \003(\005B\004\300\363\030\002"
    "\"E\n\023GuildLevelFixConfig\022\n\n\002id\030\001 \002(\005\022\016\n\006b"
    "attle\030\002 \002(\005\022\022\n\nplayergold\030\003 \002(\005\":\n\023Guild"
    "PracticeConfig\022\n\n\002id\030\001 \002(\005\022\027\n\tattribute\030"
    "\002 \003(\005B\004\300\363\030\004\"z\n\030GuildPracticeLevelConfig\022"
    "\r\n\005level\030\001 \002(\005\022\013\n\003exp\030\002 \002(\005\022\023\n\013playerlim"
    "it\030\003 \002(\005\022\022\n\nguildlimit\030\004 \002(\005\022\031\n\021contribu"
    "tionlimit\030\005 \002(\005\":\n\016GuildCDKConfig\022\n\n\002id\030"
    "\001 \002(\005\022\016\n\006itemid\030\002 \002(\005\022\014\n\004cost\030\003 \002(\005\"p\n\022G"
    "uildWetCopyConfig\022\n\n\002id\030\001 \002(\005\022\020\n\010coincos"
    "t\030\002 \002(\005\022\017\n\007sceneid\030\003 \002(\005\022\022\n\nlevellimit\030\004"
    " \002(\005\022\027\n\017guildlevellimit\030\005 \002(\005\"|\n\027GuildWe"
    "tCopyStageConfig\022\n\n\002id\030\001 \002(\005\022\021\n\tpro_stag"
    "e\030\002 \002(\005\022\017\n\007copy_id\030\003 \002(\005\022\022\n\nmonster_id\030\004"
    " \002(\005\022\014\n\004drop\030\005 \002(\005\022\017\n\007boss_id\030\006 \002(\005\";\n\023G"
    "uildPositionConfig\022\025\n\rguildposition\030\001 \002("
    "\005\022\r\n\005bonus\030\002 \002(\005\"X\n\021GuildDonateConfig\022\014\n"
    "\004type\030\001 \002(\005\022\014\n\004cost\030\002 \002(\005\022\020\n\010addmoney\030\003 "
    "\002(\005\022\025\n\raddcontribute\030\004 \002(\005", 866);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GuildConfig.proto", &protobuf_RegisterTypes);
  GuildBuildLevelConfig::default_instance_ = new GuildBuildLevelConfig();
  GuildLevelFixConfig::default_instance_ = new GuildLevelFixConfig();
  GuildPracticeConfig::default_instance_ = new GuildPracticeConfig();
  GuildPracticeLevelConfig::default_instance_ = new GuildPracticeLevelConfig();
  GuildCDKConfig::default_instance_ = new GuildCDKConfig();
  GuildWetCopyConfig::default_instance_ = new GuildWetCopyConfig();
  GuildWetCopyStageConfig::default_instance_ = new GuildWetCopyStageConfig();
  GuildPositionConfig::default_instance_ = new GuildPositionConfig();
  GuildDonateConfig::default_instance_ = new GuildDonateConfig();
  GuildBuildLevelConfig::default_instance_->InitAsDefaultInstance();
  GuildLevelFixConfig::default_instance_->InitAsDefaultInstance();
  GuildPracticeConfig::default_instance_->InitAsDefaultInstance();
  GuildPracticeLevelConfig::default_instance_->InitAsDefaultInstance();
  GuildCDKConfig::default_instance_->InitAsDefaultInstance();
  GuildWetCopyConfig::default_instance_->InitAsDefaultInstance();
  GuildWetCopyStageConfig::default_instance_->InitAsDefaultInstance();
  GuildPositionConfig::default_instance_->InitAsDefaultInstance();
  GuildDonateConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GuildConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GuildConfig_2eproto {
  StaticDescriptorInitializer_GuildConfig_2eproto() {
    protobuf_AddDesc_GuildConfig_2eproto();
  }
} static_descriptor_initializer_GuildConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GuildBuildLevelConfig::kIdFieldNumber;
const int GuildBuildLevelConfig::kBuildtypeFieldNumber;
const int GuildBuildLevelConfig::kBuildlevelFieldNumber;
const int GuildBuildLevelConfig::kCostFieldNumber;
const int GuildBuildLevelConfig::kParamFieldNumber;
#endif  // !_MSC_VER

GuildBuildLevelConfig::GuildBuildLevelConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildBuildLevelConfig::InitAsDefaultInstance() {
}

GuildBuildLevelConfig::GuildBuildLevelConfig(const GuildBuildLevelConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildBuildLevelConfig::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  buildtype_ = 0;
  buildlevel_ = 0;
  cost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildBuildLevelConfig::~GuildBuildLevelConfig() {
  SharedDtor();
}

void GuildBuildLevelConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildBuildLevelConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildBuildLevelConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBuildLevelConfig_descriptor_;
}

const GuildBuildLevelConfig& GuildBuildLevelConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildConfig_2eproto();
  return *default_instance_;
}

GuildBuildLevelConfig* GuildBuildLevelConfig::default_instance_ = NULL;

GuildBuildLevelConfig* GuildBuildLevelConfig::New() const {
  return new GuildBuildLevelConfig;
}

void GuildBuildLevelConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    buildtype_ = 0;
    buildlevel_ = 0;
    cost_ = 0;
  }
  param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildBuildLevelConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buildtype;
        break;
      }

      // required int32 buildtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buildtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buildtype_)));
          set_has_buildtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buildlevel;
        break;
      }

      // required int32 buildlevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buildlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buildlevel_)));
          set_has_buildlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cost;
        break;
      }

      // required int32 cost = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_param;
        break;
      }

      // repeated int32 param = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_param())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_param())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_param;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildBuildLevelConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 buildtype = 2;
  if (has_buildtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buildtype(), output);
  }

  // required int32 buildlevel = 3;
  if (has_buildlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->buildlevel(), output);
  }

  // required int32 cost = 4;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cost(), output);
  }

  // repeated int32 param = 5;
  for (int i = 0; i < this->param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->param(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildBuildLevelConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 buildtype = 2;
  if (has_buildtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buildtype(), target);
  }

  // required int32 buildlevel = 3;
  if (has_buildlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->buildlevel(), target);
  }

  // required int32 cost = 4;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cost(), target);
  }

  // repeated int32 param = 5;
  for (int i = 0; i < this->param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->param(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildBuildLevelConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 buildtype = 2;
    if (has_buildtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buildtype());
    }

    // required int32 buildlevel = 3;
    if (has_buildlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buildlevel());
    }

    // required int32 cost = 4;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost());
    }

  }
  // repeated int32 param = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->param_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->param(i));
    }
    total_size += 1 * this->param_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildBuildLevelConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildBuildLevelConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildBuildLevelConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildBuildLevelConfig::MergeFrom(const GuildBuildLevelConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  param_.MergeFrom(from.param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_buildtype()) {
      set_buildtype(from.buildtype());
    }
    if (from.has_buildlevel()) {
      set_buildlevel(from.buildlevel());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildBuildLevelConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildBuildLevelConfig::CopyFrom(const GuildBuildLevelConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildBuildLevelConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GuildBuildLevelConfig::SetInitialized() {
  _has_bits_[0] |= 0x0000000f;

  return;
}

void GuildBuildLevelConfig::Swap(GuildBuildLevelConfig* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(buildtype_, other->buildtype_);
    std::swap(buildlevel_, other->buildlevel_);
    std::swap(cost_, other->cost_);
    param_.Swap(&other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildBuildLevelConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildBuildLevelConfig_descriptor_;
  metadata.reflection = GuildBuildLevelConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildLevelFixConfig::kIdFieldNumber;
const int GuildLevelFixConfig::kBattleFieldNumber;
const int GuildLevelFixConfig::kPlayergoldFieldNumber;
#endif  // !_MSC_VER

GuildLevelFixConfig::GuildLevelFixConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildLevelFixConfig::InitAsDefaultInstance() {
}

GuildLevelFixConfig::GuildLevelFixConfig(const GuildLevelFixConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildLevelFixConfig::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  battle_ = 0;
  playergold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildLevelFixConfig::~GuildLevelFixConfig() {
  SharedDtor();
}

void GuildLevelFixConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildLevelFixConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildLevelFixConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildLevelFixConfig_descriptor_;
}

const GuildLevelFixConfig& GuildLevelFixConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildConfig_2eproto();
  return *default_instance_;
}

GuildLevelFixConfig* GuildLevelFixConfig::default_instance_ = NULL;

GuildLevelFixConfig* GuildLevelFixConfig::New() const {
  return new GuildLevelFixConfig;
}

void GuildLevelFixConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    battle_ = 0;
    playergold_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildLevelFixConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle;
        break;
      }

      // required int32 battle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_)));
          set_has_battle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playergold;
        break;
      }

      // required int32 playergold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playergold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playergold_)));
          set_has_playergold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildLevelFixConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 battle = 2;
  if (has_battle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->battle(), output);
  }

  // required int32 playergold = 3;
  if (has_playergold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playergold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildLevelFixConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 battle = 2;
  if (has_battle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->battle(), target);
  }

  // required int32 playergold = 3;
  if (has_playergold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playergold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildLevelFixConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 battle = 2;
    if (has_battle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle());
    }

    // required int32 playergold = 3;
    if (has_playergold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playergold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildLevelFixConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildLevelFixConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildLevelFixConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildLevelFixConfig::MergeFrom(const GuildLevelFixConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_battle()) {
      set_battle(from.battle());
    }
    if (from.has_playergold()) {
      set_playergold(from.playergold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildLevelFixConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildLevelFixConfig::CopyFrom(const GuildLevelFixConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildLevelFixConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GuildLevelFixConfig::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  return;
}

void GuildLevelFixConfig::Swap(GuildLevelFixConfig* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(battle_, other->battle_);
    std::swap(playergold_, other->playergold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildLevelFixConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildLevelFixConfig_descriptor_;
  metadata.reflection = GuildLevelFixConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildPracticeConfig::kIdFieldNumber;
const int GuildPracticeConfig::kAttributeFieldNumber;
#endif  // !_MSC_VER

GuildPracticeConfig::GuildPracticeConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildPracticeConfig::InitAsDefaultInstance() {
}

GuildPracticeConfig::GuildPracticeConfig(const GuildPracticeConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildPracticeConfig::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildPracticeConfig::~GuildPracticeConfig() {
  SharedDtor();
}

void GuildPracticeConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildPracticeConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildPracticeConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildPracticeConfig_descriptor_;
}

const GuildPracticeConfig& GuildPracticeConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildConfig_2eproto();
  return *default_instance_;
}

GuildPracticeConfig* GuildPracticeConfig::default_instance_ = NULL;

GuildPracticeConfig* GuildPracticeConfig::New() const {
  return new GuildPracticeConfig;
}

void GuildPracticeConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildPracticeConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attribute;
        break;
      }

      // repeated int32 attribute = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_attribute())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_attribute())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildPracticeConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated int32 attribute = 2;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildPracticeConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated int32 attribute = 2;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildPracticeConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  // repeated int32 attribute = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->attribute_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->attribute(i));
    }
    total_size += 1 * this->attribute_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildPracticeConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildPracticeConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildPracticeConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildPracticeConfig::MergeFrom(const GuildPracticeConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildPracticeConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildPracticeConfig::CopyFrom(const GuildPracticeConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildPracticeConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GuildPracticeConfig::SetInitialized() {
  _has_bits_[0] |= 0x00000001;

  return;
}

void GuildPracticeConfig::Swap(GuildPracticeConfig* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildPracticeConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildPracticeConfig_descriptor_;
  metadata.reflection = GuildPracticeConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildPracticeLevelConfig::kLevelFieldNumber;
const int GuildPracticeLevelConfig::kExpFieldNumber;
const int GuildPracticeLevelConfig::kPlayerlimitFieldNumber;
const int GuildPracticeLevelConfig::kGuildlimitFieldNumber;
const int GuildPracticeLevelConfig::kContributionlimitFieldNumber;
#endif  // !_MSC_VER

GuildPracticeLevelConfig::GuildPracticeLevelConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildPracticeLevelConfig::InitAsDefaultInstance() {
}

GuildPracticeLevelConfig::GuildPracticeLevelConfig(const GuildPracticeLevelConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildPracticeLevelConfig::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  exp_ = 0;
  playerlimit_ = 0;
  guildlimit_ = 0;
  contributionlimit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildPracticeLevelConfig::~GuildPracticeLevelConfig() {
  SharedDtor();
}

void GuildPracticeLevelConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildPracticeLevelConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildPracticeLevelConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildPracticeLevelConfig_descriptor_;
}

const GuildPracticeLevelConfig& GuildPracticeLevelConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildConfig_2eproto();
  return *default_instance_;
}

GuildPracticeLevelConfig* GuildPracticeLevelConfig::default_instance_ = NULL;

GuildPracticeLevelConfig* GuildPracticeLevelConfig::New() const {
  return new GuildPracticeLevelConfig;
}

void GuildPracticeLevelConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    exp_ = 0;
    playerlimit_ = 0;
    guildlimit_ = 0;
    contributionlimit_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildPracticeLevelConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // required int32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerlimit;
        break;
      }

      // required int32 playerlimit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerlimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerlimit_)));
          set_has_playerlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_guildlimit;
        break;
      }

      // required int32 guildlimit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildlimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildlimit_)));
          set_has_guildlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_contributionlimit;
        break;
      }

      // required int32 contributionlimit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contributionlimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contributionlimit_)));
          set_has_contributionlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildPracticeLevelConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // required int32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }

  // required int32 playerlimit = 3;
  if (has_playerlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playerlimit(), output);
  }

  // required int32 guildlimit = 4;
  if (has_guildlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->guildlimit(), output);
  }

  // required int32 contributionlimit = 5;
  if (has_contributionlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->contributionlimit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildPracticeLevelConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // required int32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }

  // required int32 playerlimit = 3;
  if (has_playerlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playerlimit(), target);
  }

  // required int32 guildlimit = 4;
  if (has_guildlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->guildlimit(), target);
  }

  // required int32 contributionlimit = 5;
  if (has_contributionlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->contributionlimit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildPracticeLevelConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // required int32 playerlimit = 3;
    if (has_playerlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerlimit());
    }

    // required int32 guildlimit = 4;
    if (has_guildlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildlimit());
    }

    // required int32 contributionlimit = 5;
    if (has_contributionlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contributionlimit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildPracticeLevelConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildPracticeLevelConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildPracticeLevelConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildPracticeLevelConfig::MergeFrom(const GuildPracticeLevelConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_playerlimit()) {
      set_playerlimit(from.playerlimit());
    }
    if (from.has_guildlimit()) {
      set_guildlimit(from.guildlimit());
    }
    if (from.has_contributionlimit()) {
      set_contributionlimit(from.contributionlimit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildPracticeLevelConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildPracticeLevelConfig::CopyFrom(const GuildPracticeLevelConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildPracticeLevelConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void GuildPracticeLevelConfig::SetInitialized() {
  _has_bits_[0] |= 0x0000001f;

  return;
}

void GuildPracticeLevelConfig::Swap(GuildPracticeLevelConfig* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(playerlimit_, other->playerlimit_);
    std::swap(guildlimit_, other->guildlimit_);
    std::swap(contributionlimit_, other->contributionlimit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildPracticeLevelConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildPracticeLevelConfig_descriptor_;
  metadata.reflection = GuildPracticeLevelConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildCDKConfig::kIdFieldNumber;
const int GuildCDKConfig::kItemidFieldNumber;
const int GuildCDKConfig::kCostFieldNumber;
#endif  // !_MSC_VER

GuildCDKConfig::GuildCDKConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildCDKConfig::InitAsDefaultInstance() {
}

GuildCDKConfig::GuildCDKConfig(const GuildCDKConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildCDKConfig::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  itemid_ = 0;
  cost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildCDKConfig::~GuildCDKConfig() {
  SharedDtor();
}

void GuildCDKConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildCDKConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildCDKConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildCDKConfig_descriptor_;
}

const GuildCDKConfig& GuildCDKConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildConfig_2eproto();
  return *default_instance_;
}

GuildCDKConfig* GuildCDKConfig::default_instance_ = NULL;

GuildCDKConfig* GuildCDKConfig::New() const {
  return new GuildCDKConfig;
}

void GuildCDKConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    itemid_ = 0;
    cost_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildCDKConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemid;
        break;
      }

      // required int32 itemid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cost;
        break;
      }

      // required int32 cost = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildCDKConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 itemid = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  // required int32 cost = 3;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildCDKConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 itemid = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemid(), target);
  }

  // required int32 cost = 3;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildCDKConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 itemid = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // required int32 cost = 3;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildCDKConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildCDKConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildCDKConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildCDKConfig::MergeFrom(const GuildCDKConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildCDKConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildCDKConfig::CopyFrom(const GuildCDKConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildCDKConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GuildCDKConfig::SetInitialized() {
  _has_bits_[0] |= 0x00000007;

  return;
}

void GuildCDKConfig::Swap(GuildCDKConfig* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(itemid_, other->itemid_);
    std::swap(cost_, other->cost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildCDKConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildCDKConfig_descriptor_;
  metadata.reflection = GuildCDKConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildWetCopyConfig::kIdFieldNumber;
const int GuildWetCopyConfig::kCoincostFieldNumber;
const int GuildWetCopyConfig::kSceneidFieldNumber;
const int GuildWetCopyConfig::kLevellimitFieldNumber;
const int GuildWetCopyConfig::kGuildlevellimitFieldNumber;
#endif  // !_MSC_VER

GuildWetCopyConfig::GuildWetCopyConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildWetCopyConfig::InitAsDefaultInstance() {
}

GuildWetCopyConfig::GuildWetCopyConfig(const GuildWetCopyConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildWetCopyConfig::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  coincost_ = 0;
  sceneid_ = 0;
  levellimit_ = 0;
  guildlevellimit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildWetCopyConfig::~GuildWetCopyConfig() {
  SharedDtor();
}

void GuildWetCopyConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildWetCopyConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildWetCopyConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildWetCopyConfig_descriptor_;
}

const GuildWetCopyConfig& GuildWetCopyConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildConfig_2eproto();
  return *default_instance_;
}

GuildWetCopyConfig* GuildWetCopyConfig::default_instance_ = NULL;

GuildWetCopyConfig* GuildWetCopyConfig::New() const {
  return new GuildWetCopyConfig;
}

void GuildWetCopyConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    coincost_ = 0;
    sceneid_ = 0;
    levellimit_ = 0;
    guildlevellimit_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildWetCopyConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_coincost;
        break;
      }

      // required int32 coincost = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coincost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coincost_)));
          set_has_coincost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sceneid;
        break;
      }

      // required int32 sceneid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_levellimit;
        break;
      }

      // required int32 levellimit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levellimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levellimit_)));
          set_has_levellimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_guildlevellimit;
        break;
      }

      // required int32 guildlevellimit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildlevellimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildlevellimit_)));
          set_has_guildlevellimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildWetCopyConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 coincost = 2;
  if (has_coincost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->coincost(), output);
  }

  // required int32 sceneid = 3;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sceneid(), output);
  }

  // required int32 levellimit = 4;
  if (has_levellimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->levellimit(), output);
  }

  // required int32 guildlevellimit = 5;
  if (has_guildlevellimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->guildlevellimit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildWetCopyConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 coincost = 2;
  if (has_coincost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->coincost(), target);
  }

  // required int32 sceneid = 3;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sceneid(), target);
  }

  // required int32 levellimit = 4;
  if (has_levellimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->levellimit(), target);
  }

  // required int32 guildlevellimit = 5;
  if (has_guildlevellimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->guildlevellimit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildWetCopyConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 coincost = 2;
    if (has_coincost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coincost());
    }

    // required int32 sceneid = 3;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneid());
    }

    // required int32 levellimit = 4;
    if (has_levellimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levellimit());
    }

    // required int32 guildlevellimit = 5;
    if (has_guildlevellimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildlevellimit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildWetCopyConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildWetCopyConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildWetCopyConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildWetCopyConfig::MergeFrom(const GuildWetCopyConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_coincost()) {
      set_coincost(from.coincost());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_levellimit()) {
      set_levellimit(from.levellimit());
    }
    if (from.has_guildlevellimit()) {
      set_guildlevellimit(from.guildlevellimit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildWetCopyConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildWetCopyConfig::CopyFrom(const GuildWetCopyConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildWetCopyConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void GuildWetCopyConfig::SetInitialized() {
  _has_bits_[0] |= 0x0000001f;

  return;
}

void GuildWetCopyConfig::Swap(GuildWetCopyConfig* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(coincost_, other->coincost_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(levellimit_, other->levellimit_);
    std::swap(guildlevellimit_, other->guildlevellimit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildWetCopyConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildWetCopyConfig_descriptor_;
  metadata.reflection = GuildWetCopyConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildWetCopyStageConfig::kIdFieldNumber;
const int GuildWetCopyStageConfig::kProStageFieldNumber;
const int GuildWetCopyStageConfig::kCopyIdFieldNumber;
const int GuildWetCopyStageConfig::kMonsterIdFieldNumber;
const int GuildWetCopyStageConfig::kDropFieldNumber;
const int GuildWetCopyStageConfig::kBossIdFieldNumber;
#endif  // !_MSC_VER

GuildWetCopyStageConfig::GuildWetCopyStageConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildWetCopyStageConfig::InitAsDefaultInstance() {
}

GuildWetCopyStageConfig::GuildWetCopyStageConfig(const GuildWetCopyStageConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildWetCopyStageConfig::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  pro_stage_ = 0;
  copy_id_ = 0;
  monster_id_ = 0;
  drop_ = 0;
  boss_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildWetCopyStageConfig::~GuildWetCopyStageConfig() {
  SharedDtor();
}

void GuildWetCopyStageConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildWetCopyStageConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildWetCopyStageConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildWetCopyStageConfig_descriptor_;
}

const GuildWetCopyStageConfig& GuildWetCopyStageConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildConfig_2eproto();
  return *default_instance_;
}

GuildWetCopyStageConfig* GuildWetCopyStageConfig::default_instance_ = NULL;

GuildWetCopyStageConfig* GuildWetCopyStageConfig::New() const {
  return new GuildWetCopyStageConfig;
}

void GuildWetCopyStageConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    pro_stage_ = 0;
    copy_id_ = 0;
    monster_id_ = 0;
    drop_ = 0;
    boss_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildWetCopyStageConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pro_stage;
        break;
      }

      // required int32 pro_stage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pro_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pro_stage_)));
          set_has_pro_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_copy_id;
        break;
      }

      // required int32 copy_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &copy_id_)));
          set_has_copy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_monster_id;
        break;
      }

      // required int32 monster_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monster_id_)));
          set_has_monster_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_drop;
        break;
      }

      // required int32 drop = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drop_)));
          set_has_drop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_boss_id;
        break;
      }

      // required int32 boss_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boss_id_)));
          set_has_boss_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildWetCopyStageConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 pro_stage = 2;
  if (has_pro_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pro_stage(), output);
  }

  // required int32 copy_id = 3;
  if (has_copy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->copy_id(), output);
  }

  // required int32 monster_id = 4;
  if (has_monster_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->monster_id(), output);
  }

  // required int32 drop = 5;
  if (has_drop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->drop(), output);
  }

  // required int32 boss_id = 6;
  if (has_boss_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->boss_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildWetCopyStageConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 pro_stage = 2;
  if (has_pro_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pro_stage(), target);
  }

  // required int32 copy_id = 3;
  if (has_copy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->copy_id(), target);
  }

  // required int32 monster_id = 4;
  if (has_monster_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->monster_id(), target);
  }

  // required int32 drop = 5;
  if (has_drop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->drop(), target);
  }

  // required int32 boss_id = 6;
  if (has_boss_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->boss_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildWetCopyStageConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 pro_stage = 2;
    if (has_pro_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pro_stage());
    }

    // required int32 copy_id = 3;
    if (has_copy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->copy_id());
    }

    // required int32 monster_id = 4;
    if (has_monster_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monster_id());
    }

    // required int32 drop = 5;
    if (has_drop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drop());
    }

    // required int32 boss_id = 6;
    if (has_boss_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boss_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildWetCopyStageConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildWetCopyStageConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildWetCopyStageConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildWetCopyStageConfig::MergeFrom(const GuildWetCopyStageConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pro_stage()) {
      set_pro_stage(from.pro_stage());
    }
    if (from.has_copy_id()) {
      set_copy_id(from.copy_id());
    }
    if (from.has_monster_id()) {
      set_monster_id(from.monster_id());
    }
    if (from.has_drop()) {
      set_drop(from.drop());
    }
    if (from.has_boss_id()) {
      set_boss_id(from.boss_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildWetCopyStageConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildWetCopyStageConfig::CopyFrom(const GuildWetCopyStageConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildWetCopyStageConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void GuildWetCopyStageConfig::SetInitialized() {
  _has_bits_[0] |= 0x0000003f;

  return;
}

void GuildWetCopyStageConfig::Swap(GuildWetCopyStageConfig* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pro_stage_, other->pro_stage_);
    std::swap(copy_id_, other->copy_id_);
    std::swap(monster_id_, other->monster_id_);
    std::swap(drop_, other->drop_);
    std::swap(boss_id_, other->boss_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildWetCopyStageConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildWetCopyStageConfig_descriptor_;
  metadata.reflection = GuildWetCopyStageConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildPositionConfig::kGuildpositionFieldNumber;
const int GuildPositionConfig::kBonusFieldNumber;
#endif  // !_MSC_VER

GuildPositionConfig::GuildPositionConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildPositionConfig::InitAsDefaultInstance() {
}

GuildPositionConfig::GuildPositionConfig(const GuildPositionConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildPositionConfig::SharedCtor() {
  _cached_size_ = 0;
  guildposition_ = 0;
  bonus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildPositionConfig::~GuildPositionConfig() {
  SharedDtor();
}

void GuildPositionConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildPositionConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildPositionConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildPositionConfig_descriptor_;
}

const GuildPositionConfig& GuildPositionConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildConfig_2eproto();
  return *default_instance_;
}

GuildPositionConfig* GuildPositionConfig::default_instance_ = NULL;

GuildPositionConfig* GuildPositionConfig::New() const {
  return new GuildPositionConfig;
}

void GuildPositionConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildposition_ = 0;
    bonus_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildPositionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 guildposition = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildposition_)));
          set_has_guildposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bonus;
        break;
      }

      // required int32 bonus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bonus_)));
          set_has_bonus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildPositionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 guildposition = 1;
  if (has_guildposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guildposition(), output);
  }

  // required int32 bonus = 2;
  if (has_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bonus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildPositionConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 guildposition = 1;
  if (has_guildposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guildposition(), target);
  }

  // required int32 bonus = 2;
  if (has_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bonus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildPositionConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 guildposition = 1;
    if (has_guildposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildposition());
    }

    // required int32 bonus = 2;
    if (has_bonus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bonus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildPositionConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildPositionConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildPositionConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildPositionConfig::MergeFrom(const GuildPositionConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildposition()) {
      set_guildposition(from.guildposition());
    }
    if (from.has_bonus()) {
      set_bonus(from.bonus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildPositionConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildPositionConfig::CopyFrom(const GuildPositionConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildPositionConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GuildPositionConfig::SetInitialized() {
  _has_bits_[0] |= 0x00000003;

  return;
}

void GuildPositionConfig::Swap(GuildPositionConfig* other) {
  if (other != this) {
    std::swap(guildposition_, other->guildposition_);
    std::swap(bonus_, other->bonus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildPositionConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildPositionConfig_descriptor_;
  metadata.reflection = GuildPositionConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildDonateConfig::kTypeFieldNumber;
const int GuildDonateConfig::kCostFieldNumber;
const int GuildDonateConfig::kAddmoneyFieldNumber;
const int GuildDonateConfig::kAddcontributeFieldNumber;
#endif  // !_MSC_VER

GuildDonateConfig::GuildDonateConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildDonateConfig::InitAsDefaultInstance() {
}

GuildDonateConfig::GuildDonateConfig(const GuildDonateConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildDonateConfig::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  cost_ = 0;
  addmoney_ = 0;
  addcontribute_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildDonateConfig::~GuildDonateConfig() {
  SharedDtor();
}

void GuildDonateConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildDonateConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildDonateConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildDonateConfig_descriptor_;
}

const GuildDonateConfig& GuildDonateConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildConfig_2eproto();
  return *default_instance_;
}

GuildDonateConfig* GuildDonateConfig::default_instance_ = NULL;

GuildDonateConfig* GuildDonateConfig::New() const {
  return new GuildDonateConfig;
}

void GuildDonateConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    cost_ = 0;
    addmoney_ = 0;
    addcontribute_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
  SetDirty();
}

bool GuildDonateConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cost;
        break;
      }

      // required int32 cost = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_addmoney;
        break;
      }

      // required int32 addmoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addmoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addmoney_)));
          set_has_addmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_addcontribute;
        break;
      }

      // required int32 addcontribute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addcontribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addcontribute_)));
          set_has_addcontribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  SetDirty();
  return true;
#undef DO_
}

void GuildDonateConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 cost = 2;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cost(), output);
  }

  // required int32 addmoney = 3;
  if (has_addmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->addmoney(), output);
  }

  // required int32 addcontribute = 4;
  if (has_addcontribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->addcontribute(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildDonateConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 cost = 2;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cost(), target);
  }

  // required int32 addmoney = 3;
  if (has_addmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->addmoney(), target);
  }

  // required int32 addcontribute = 4;
  if (has_addcontribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->addcontribute(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildDonateConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 cost = 2;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost());
    }

    // required int32 addmoney = 3;
    if (has_addmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addmoney());
    }

    // required int32 addcontribute = 4;
    if (has_addcontribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addcontribute());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildDonateConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildDonateConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildDonateConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
  SetDirty();
}

void GuildDonateConfig::MergeFrom(const GuildDonateConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
    if (from.has_addmoney()) {
      set_addmoney(from.addmoney());
    }
    if (from.has_addcontribute()) {
      set_addcontribute(from.addcontribute());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  SetDirty();
}

void GuildDonateConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

void GuildDonateConfig::CopyFrom(const GuildDonateConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
  SetDirty();
}

bool GuildDonateConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GuildDonateConfig::SetInitialized() {
  _has_bits_[0] |= 0x0000000f;

  return;
}

void GuildDonateConfig::Swap(GuildDonateConfig* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(cost_, other->cost_);
    std::swap(addmoney_, other->addmoney_);
    std::swap(addcontribute_, other->addcontribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    SetDirty(), other->SetDirty();
  }
}

::google::protobuf::Metadata GuildDonateConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildDonateConfig_descriptor_;
  metadata.reflection = GuildDonateConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Config

// @@protoc_insertion_point(global_scope)
