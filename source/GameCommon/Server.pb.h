// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Server.proto

#ifndef PROTOBUF_Server_2eproto__INCLUDED
#define PROTOBUF_Server_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Server {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Server_2eproto();
void protobuf_AssignDesc_Server_2eproto();
void protobuf_ShutdownFile_Server_2eproto();

class IdentifyRequest;
class IdentifyReply;

enum ServerType {
  kUnknownServer = 0,
  kAccountServer = 1,
  kWorldServer = 2,
  kBalanceServer = 3,
  kGameServer = 4
};
bool ServerType_IsValid(int value);
const ServerType ServerType_MIN = kUnknownServer;
const ServerType ServerType_MAX = kGameServer;
const int ServerType_ARRAYSIZE = ServerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerType_descriptor();
inline const ::std::string& ServerType_Name(ServerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerType_descriptor(), value);
}
inline bool ServerType_Parse(
    const ::std::string& name, ServerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerType>(
    ServerType_descriptor(), name, value);
}
// ===================================================================

class IdentifyRequest : public ::google::protobuf::Message {
 public:
  IdentifyRequest();
  virtual ~IdentifyRequest();

  IdentifyRequest(const IdentifyRequest& from);

  inline IdentifyRequest& operator=(const IdentifyRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IdentifyRequest& default_instance();

  void Swap(IdentifyRequest* other);

  // implements Message ----------------------------------------------

  IdentifyRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IdentifyRequest& from);
  void MergeFrom(const IdentifyRequest& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // required string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // required int32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required .Server.ServerType type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::Server::ServerType type() const;
  inline void set_type(::Server::ServerType value);

  // optional string ip = 5;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 5;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 port = 6;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 6;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Server.IdentifyRequest)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* version_;
  ::std::string* password_;
  ::google::protobuf::int32 id_;
  int type_;
  ::std::string* ip_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static IdentifyRequest* default_instance_;
};
// -------------------------------------------------------------------

class IdentifyReply : public ::google::protobuf::Message {
 public:
  IdentifyReply();
  virtual ~IdentifyReply();

  IdentifyReply(const IdentifyReply& from);

  inline IdentifyReply& operator=(const IdentifyReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IdentifyReply& default_instance();

  void Swap(IdentifyReply* other);

  // implements Message ----------------------------------------------

  IdentifyReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IdentifyReply& from);
  void MergeFrom(const IdentifyReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Server.IdentifyReply)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Server_2eproto();
  friend void protobuf_AssignDesc_Server_2eproto();
  friend void protobuf_ShutdownFile_Server_2eproto();

  void InitAsDefaultInstance();
  static IdentifyReply* default_instance_;
};
// ===================================================================


// ===================================================================

// IdentifyRequest

// required string version = 1;
inline bool IdentifyRequest::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IdentifyRequest::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IdentifyRequest::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IdentifyRequest::clear_version() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    version_->clear();
  }
  clear_has_version();
  SetDirty();
}
inline const ::std::string& IdentifyRequest::version() const {
  return *version_;
}
inline void IdentifyRequest::set_version(const ::std::string& value) {
  SetDirty();
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void IdentifyRequest::set_version(const char* value) {
  SetDirty();
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void IdentifyRequest::set_version(const char* value, size_t size) {
  SetDirty();
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IdentifyRequest::mutable_version() {
  SetDirty();
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  return version_;
}
inline ::std::string* IdentifyRequest::release_version() {
  SetDirty();
  clear_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void IdentifyRequest::set_allocated_version(::std::string* version) {
  SetDirty();
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string password = 2;
inline bool IdentifyRequest::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IdentifyRequest::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IdentifyRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IdentifyRequest::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
  SetDirty();
}
inline const ::std::string& IdentifyRequest::password() const {
  return *password_;
}
inline void IdentifyRequest::set_password(const ::std::string& value) {
  SetDirty();
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void IdentifyRequest::set_password(const char* value) {
  SetDirty();
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void IdentifyRequest::set_password(const char* value, size_t size) {
  SetDirty();
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IdentifyRequest::mutable_password() {
  SetDirty();
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* IdentifyRequest::release_password() {
  SetDirty();
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void IdentifyRequest::set_allocated_password(::std::string* password) {
  SetDirty();
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 id = 3;
inline bool IdentifyRequest::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IdentifyRequest::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IdentifyRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IdentifyRequest::clear_id() {
  id_ = 0;
  clear_has_id();
  SetDirty();
}
inline ::google::protobuf::int32 IdentifyRequest::id() const {
  return id_;
}
inline void IdentifyRequest::set_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_id();
  id_ = value;
}

// required .Server.ServerType type = 4;
inline bool IdentifyRequest::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IdentifyRequest::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IdentifyRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IdentifyRequest::clear_type() {
  type_ = 0;
  clear_has_type();
  SetDirty();
}
inline ::Server::ServerType IdentifyRequest::type() const {
  return static_cast< ::Server::ServerType >(type_);
}
inline void IdentifyRequest::set_type(::Server::ServerType value) {
  assert(::Server::ServerType_IsValid(value));
  SetDirty();
  set_has_type();
  type_ = value;
}

// optional string ip = 5;
inline bool IdentifyRequest::has_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IdentifyRequest::set_has_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IdentifyRequest::clear_has_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IdentifyRequest::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
  SetDirty();
}
inline const ::std::string& IdentifyRequest::ip() const {
  return *ip_;
}
inline void IdentifyRequest::set_ip(const ::std::string& value) {
  SetDirty();
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void IdentifyRequest::set_ip(const char* value) {
  SetDirty();
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void IdentifyRequest::set_ip(const char* value, size_t size) {
  SetDirty();
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IdentifyRequest::mutable_ip() {
  SetDirty();
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* IdentifyRequest::release_ip() {
  SetDirty();
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void IdentifyRequest::set_allocated_ip(::std::string* ip) {
  SetDirty();
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 port = 6;
inline bool IdentifyRequest::has_port() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IdentifyRequest::set_has_port() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IdentifyRequest::clear_has_port() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IdentifyRequest::clear_port() {
  port_ = 0;
  clear_has_port();
  SetDirty();
}
inline ::google::protobuf::int32 IdentifyRequest::port() const {
  return port_;
}
inline void IdentifyRequest::set_port(::google::protobuf::int32 value) {
  SetDirty();
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// IdentifyReply

// required int32 result = 1;
inline bool IdentifyReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IdentifyReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IdentifyReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IdentifyReply::clear_result() {
  result_ = 0;
  clear_has_result();
  SetDirty();
}
inline ::google::protobuf::int32 IdentifyReply::result() const {
  return result_;
}
inline void IdentifyReply::set_result(::google::protobuf::int32 value) {
  SetDirty();
  set_has_result();
  result_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Server

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Server::ServerType>() {
  return ::Server::ServerType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Server_2eproto__INCLUDED
