// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: S2GMessage.proto
#include "S2GMessage.pb.h"
#include "S2GMessage.proto.fflua.h"
namespace S2G {
bool S2GCommonMessage_fflua_reg(lua_State* state)
{
//for decltype
	S2GCommonMessage* message(nullptr);
	message;
	ff::fflua_register_t<S2GCommonMessage, ctor()>(state, "S2GCommonMessage", "google::protobuf::Message")
		// required string request_name = 1;
		.def(&S2GCommonMessage::request_name, "request_name")
		.def<void (S2GCommonMessage::*)(const std::string&)>(&S2GCommonMessage::set_request_name, "set_request_name")
		// repeated int32 int32_params = 2;
		.def(&S2GCommonMessage::int32_params_size, "int32_params_size")
		.def<decltype(message->int32_params(0)) (S2GCommonMessage::*)(int) const>(&S2GCommonMessage::int32_params, "int32_params")
		.def<void(S2GCommonMessage::*)(int, const decltype(message->int32_params(0)))>(&S2GCommonMessage::set_int32_params, "set_int32_params")
		.def(&S2GCommonMessage::add_int32_params, "add_int32_params")
		// repeated fixed64 int64_params = 3;
		.def(&S2GCommonMessage::int64_params_size, "int64_params_size")
		.def<decltype(message->int64_params(0)) (S2GCommonMessage::*)(int) const>(&S2GCommonMessage::int64_params, "int64_params")
		.def<void(S2GCommonMessage::*)(int, const decltype(message->int64_params(0)))>(&S2GCommonMessage::set_int64_params, "set_int64_params")
		.def(&S2GCommonMessage::add_int64_params, "add_int64_params")
		// repeated string string_params = 4;
		.def(&S2GCommonMessage::string_params_size, "string_params_size")
		.def<const std::string& (S2GCommonMessage::*)(int) const>(&S2GCommonMessage::string_params, "string_params")
		.def<void (S2GCommonMessage::*)(int, const std::string&)>(&S2GCommonMessage::set_string_params, "set_string_params")
		.def<void (S2GCommonMessage::*)(const std::string&)>(&S2GCommonMessage::add_string_params, "add_string_params")
		.def(&S2GCommonMessage::ByteSize, "ByteSize")
		.def(&S2GCommonMessage::SetInitialized, "SetInitialized")
		;
	return true;
}
bool SaveBattleReply_fflua_reg(lua_State* state)
{
//for decltype
	SaveBattleReply* message(nullptr);
	message;
	ff::fflua_register_t<SaveBattleReply, ctor()>(state, "SaveBattleReply", "google::protobuf::Message")
		// required .Packet.BattleReply reply = 1;
		.def(&SaveBattleReply::reply, "reply")
		.def(&SaveBattleReply::mutable_reply, "mutable_reply")
		.def(&SaveBattleReply::ByteSize, "ByteSize")
		.def(&SaveBattleReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool TeamMemberChangeScene_fflua_reg(lua_State* state)
{
//for decltype
	TeamMemberChangeScene* message(nullptr);
	message;
	ff::fflua_register_t<TeamMemberChangeScene, ctor()>(state, "TeamMemberChangeScene", "google::protobuf::Message")
		// required int32 scene_id = 1;
		.def(&TeamMemberChangeScene::scene_id, "scene_id")
		.def(&TeamMemberChangeScene::set_scene_id, "set_scene_id")
		// optional .Packet.Position init_pos = 2;
		.def(&TeamMemberChangeScene::init_pos, "init_pos")
		.def(&TeamMemberChangeScene::mutable_init_pos, "mutable_init_pos")
		.def(&TeamMemberChangeScene::has_init_pos, "has_init_pos")
		// optional int32 script_id = 3;
		.def(&TeamMemberChangeScene::script_id, "script_id")
		.def(&TeamMemberChangeScene::set_script_id, "set_script_id")
		.def(&TeamMemberChangeScene::has_script_id, "has_script_id")
		// optional int32 rtid = 4;
		.def(&TeamMemberChangeScene::rtid, "rtid")
		.def(&TeamMemberChangeScene::set_rtid, "set_rtid")
		.def(&TeamMemberChangeScene::has_rtid, "has_rtid")
		// optional int32 camp = 5;
		.def(&TeamMemberChangeScene::camp, "camp")
		.def(&TeamMemberChangeScene::set_camp, "set_camp")
		.def(&TeamMemberChangeScene::has_camp, "has_camp")
		.def(&TeamMemberChangeScene::ByteSize, "ByteSize")
		.def(&TeamMemberChangeScene::SetInitialized, "SetInitialized")
		;
	return true;
}
bool TeamChat_fflua_reg(lua_State* state)
{
//for decltype
	TeamChat* message(nullptr);
	message;
	ff::fflua_register_t<TeamChat, ctor()>(state, "TeamChat", "google::protobuf::Message")
		// required fixed64 teamid = 1;
		.def(&TeamChat::teamid, "teamid")
		.def(&TeamChat::set_teamid, "set_teamid")
		// required .Packet.ChatMessage msg = 2;
		.def(&TeamChat::msg, "msg")
		.def(&TeamChat::mutable_msg, "mutable_msg")
		.def(&TeamChat::ByteSize, "ByteSize")
		.def(&TeamChat::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildChat_fflua_reg(lua_State* state)
{
//for decltype
	GuildChat* message(nullptr);
	message;
	ff::fflua_register_t<GuildChat, ctor()>(state, "GuildChat", "google::protobuf::Message")
		// required fixed64 guildid = 1;
		.def(&GuildChat::guildid, "guildid")
		.def(&GuildChat::set_guildid, "set_guildid")
		// required .Packet.ChatMessage msg = 2;
		.def(&GuildChat::msg, "msg")
		.def(&GuildChat::mutable_msg, "mutable_msg")
		.def(&GuildChat::ByteSize, "ByteSize")
		.def(&GuildChat::SetInitialized, "SetInitialized")
		;
	return true;
}
bool WorldChat_fflua_reg(lua_State* state)
{
//for decltype
	WorldChat* message(nullptr);
	message;
	ff::fflua_register_t<WorldChat, ctor()>(state, "WorldChat", "google::protobuf::Message")
		// required .Packet.ChatMessage msg = 1;
		.def(&WorldChat::msg, "msg")
		.def(&WorldChat::mutable_msg, "mutable_msg")
		.def(&WorldChat::ByteSize, "ByteSize")
		.def(&WorldChat::SetInitialized, "SetInitialized")
		;
	return true;
}
bool InsertScenePlayer_fflua_reg(lua_State* state)
{
//for decltype
	InsertScenePlayer* message(nullptr);
	message;
	ff::fflua_register_t<InsertScenePlayer, ctor()>(state, "InsertScenePlayer", "google::protobuf::Message")
		// required .Packet.ScenePlayerInfo msg = 1;
		.def(&InsertScenePlayer::msg, "msg")
		.def(&InsertScenePlayer::mutable_msg, "mutable_msg")
		.def(&InsertScenePlayer::ByteSize, "ByteSize")
		.def(&InsertScenePlayer::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GetOperateInfo_fflua_reg(lua_State* state)
{
//for decltype
	GetOperateInfo* message(nullptr);
	message;
	ff::fflua_register_t<GetOperateInfo, ctor()>(state, "GetOperateInfo", "google::protobuf::Message")
		// required fixed64 playerid = 1;
		.def(&GetOperateInfo::playerid, "playerid")
		.def(&GetOperateInfo::set_playerid, "set_playerid")
		.def(&GetOperateInfo::ByteSize, "ByteSize")
		.def(&GetOperateInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool DestroyRoom_fflua_reg(lua_State* state)
{
//for decltype
	DestroyRoom* message(nullptr);
	message;
	ff::fflua_register_t<DestroyRoom, ctor()>(state, "DestroyRoom", "google::protobuf::Message")
		// required int32 rtid = 1;
		.def(&DestroyRoom::rtid, "rtid")
		.def(&DestroyRoom::set_rtid, "set_rtid")
		.def(&DestroyRoom::ByteSize, "ByteSize")
		.def(&DestroyRoom::SetInitialized, "SetInitialized")
		;
	return true;
}
bool PlayerAutoMatch_fflua_reg(lua_State* state)
{
//for decltype
	PlayerAutoMatch* message(nullptr);
	message;
	ff::fflua_register_t<PlayerAutoMatch, ctor()>(state, "PlayerAutoMatch", "google::protobuf::Message")
		// required int32 purpose = 1;
		.def(&PlayerAutoMatch::purpose, "purpose")
		.def(&PlayerAutoMatch::set_purpose, "set_purpose")
		// required bool setauto = 2;
		.def(&PlayerAutoMatch::setauto, "setauto")
		.def(&PlayerAutoMatch::set_setauto, "set_setauto")
		.def(&PlayerAutoMatch::ByteSize, "ByteSize")
		.def(&PlayerAutoMatch::SetInitialized, "SetInitialized")
		;
	return true;
}
bool EndGuildBoss_fflua_reg(lua_State* state)
{
//for decltype
	EndGuildBoss* message(nullptr);
	message;
	ff::fflua_register_t<EndGuildBoss, ctor()>(state, "EndGuildBoss", "google::protobuf::Message")
		// required fixed64 guid = 1;
		.def(&EndGuildBoss::guid, "guid")
		.def(&EndGuildBoss::set_guid, "set_guid")
		// required fixed64 guild_id = 2;
		.def(&EndGuildBoss::guild_id, "guild_id")
		.def(&EndGuildBoss::set_guild_id, "set_guild_id")
		// required int32 damage = 3;
		.def(&EndGuildBoss::damage, "damage")
		.def(&EndGuildBoss::set_damage, "set_damage")
		.def(&EndGuildBoss::ByteSize, "ByteSize")
		.def(&EndGuildBoss::SetInitialized, "SetInitialized")
		;
	return true;
}
bool RefreshTarget_fflua_reg(lua_State* state)
{
//for decltype
	RefreshTarget* message(nullptr);
	message;
	ff::fflua_register_t<RefreshTarget, ctor()>(state, "RefreshTarget", "google::protobuf::Message")
		// required fixed64 guid = 1;
		.def(&RefreshTarget::guid, "guid")
		.def(&RefreshTarget::set_guid, "set_guid")
		// required int32 wave = 2;
		.def(&RefreshTarget::wave, "wave")
		.def(&RefreshTarget::set_wave, "set_wave")
		.def(&RefreshTarget::ByteSize, "ByteSize")
		.def(&RefreshTarget::SetInitialized, "SetInitialized")
		;
	return true;
}
bool CheckOffLine_fflua_reg(lua_State* state)
{
//for decltype
	CheckOffLine* message(nullptr);
	message;
	ff::fflua_register_t<CheckOffLine, ctor()>(state, "CheckOffLine", "google::protobuf::Message")
		// repeated fixed64 guid = 1;
		.def(&CheckOffLine::guid_size, "guid_size")
		.def<decltype(message->guid(0)) (CheckOffLine::*)(int) const>(&CheckOffLine::guid, "guid")
		.def<void(CheckOffLine::*)(int, const decltype(message->guid(0)))>(&CheckOffLine::set_guid, "set_guid")
		.def(&CheckOffLine::add_guid, "add_guid")
		// repeated uint32 stamp = 2;
		.def(&CheckOffLine::stamp_size, "stamp_size")
		.def<decltype(message->stamp(0)) (CheckOffLine::*)(int) const>(&CheckOffLine::stamp, "stamp")
		.def<void(CheckOffLine::*)(int, const decltype(message->stamp(0)))>(&CheckOffLine::set_stamp, "set_stamp")
		.def(&CheckOffLine::add_stamp, "add_stamp")
		.def(&CheckOffLine::ByteSize, "ByteSize")
		.def(&CheckOffLine::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildBattleWeekRank_fflua_reg(lua_State* state)
{
//for decltype
	GuildBattleWeekRank* message(nullptr);
	message;
	ff::fflua_register_t<GuildBattleWeekRank, ctor()>(state, "GuildBattleWeekRank", "google::protobuf::Message")
		// required .Packet.GuildBattleWeekRankInfo info = 1;
		.def(&GuildBattleWeekRank::info, "info")
		.def(&GuildBattleWeekRank::mutable_info, "mutable_info")
		.def(&GuildBattleWeekRank::ByteSize, "ByteSize")
		.def(&GuildBattleWeekRank::SetInitialized, "SetInitialized")
		;
	return true;
}
bool GuildBattleAllRank_fflua_reg(lua_State* state)
{
//for decltype
	GuildBattleAllRank* message(nullptr);
	message;
	ff::fflua_register_t<GuildBattleAllRank, ctor()>(state, "GuildBattleAllRank", "google::protobuf::Message")
		// required .Packet.GuildBattleAllRankInfo info = 1;
		.def(&GuildBattleAllRank::info, "info")
		.def(&GuildBattleAllRank::mutable_info, "mutable_info")
		.def(&GuildBattleAllRank::ByteSize, "ByteSize")
		.def(&GuildBattleAllRank::SetInitialized, "SetInitialized")
		;
	return true;
}
bool XLuaRegNotify_fflua_reg(lua_State* state)
{
//for decltype
	XLuaRegNotify* message(nullptr);
	message;
	ff::fflua_register_t<XLuaRegNotify, ctor()>(state, "XLuaRegNotify", "google::protobuf::Message");
	return true;
}
bool LuaLoadNotify_fflua_reg(lua_State* state)
{
//for decltype
	LuaLoadNotify* message(nullptr);
	message;
	ff::fflua_register_t<LuaLoadNotify, ctor()>(state, "LuaLoadNotify", "google::protobuf::Message")
		// repeated int32 ids = 1;
		.def(&LuaLoadNotify::ids_size, "ids_size")
		.def<decltype(message->ids(0)) (LuaLoadNotify::*)(int) const>(&LuaLoadNotify::ids, "ids")
		.def<void(LuaLoadNotify::*)(int, const decltype(message->ids(0)))>(&LuaLoadNotify::set_ids, "set_ids")
		.def(&LuaLoadNotify::add_ids, "add_ids")
		.def(&LuaLoadNotify::ByteSize, "ByteSize")
		.def(&LuaLoadNotify::SetInitialized, "SetInitialized")
		;
	return true;
}
bool BuffPoint_fflua_reg(lua_State* state)
{
//for decltype
	BuffPoint* message(nullptr);
	message;
	ff::fflua_register_t<BuffPoint, ctor()>(state, "BuffPoint", "google::protobuf::Message")
		// required int32 posindex = 1;
		.def(&BuffPoint::posindex, "posindex")
		.def(&BuffPoint::set_posindex, "set_posindex")
		.def(&BuffPoint::ByteSize, "ByteSize")
		.def(&BuffPoint::SetInitialized, "SetInitialized")
		;
	return true;
}
bool PlayerCaptureStatge_fflua_reg(lua_State* state)
{
//for decltype
	PlayerCaptureStatge* message(nullptr);
	message;
	ff::fflua_register_t<PlayerCaptureStatge, ctor()>(state, "PlayerCaptureStatge", "google::protobuf::Message")
		// required int32 stage_id = 1;
		.def(&PlayerCaptureStatge::stage_id, "stage_id")
		.def(&PlayerCaptureStatge::set_stage_id, "set_stage_id")
		// required bool win_battle = 2;
		.def(&PlayerCaptureStatge::win_battle, "win_battle")
		.def(&PlayerCaptureStatge::set_win_battle, "set_win_battle")
		// optional .Packet.PlayerBasicInfo player_info = 3;
		.def(&PlayerCaptureStatge::player_info, "player_info")
		.def(&PlayerCaptureStatge::mutable_player_info, "mutable_player_info")
		.def(&PlayerCaptureStatge::has_player_info, "has_player_info")
		// repeated .Packet.ActorFullInfo actors = 4;
		.def(&PlayerCaptureStatge::actors_size, "actors_size")
		.def<decltype(message->actors(0)) (PlayerCaptureStatge::*)(int) const>(&PlayerCaptureStatge::actors, "actors")
		.def<decltype(message->mutable_actors(0)) (PlayerCaptureStatge::*)(int)>(&PlayerCaptureStatge::mutable_actors, "mutable_actors")
		.def(&PlayerCaptureStatge::add_actors, "add_actors")
		.def(&PlayerCaptureStatge::ByteSize, "ByteSize")
		.def(&PlayerCaptureStatge::SetInitialized, "SetInitialized")
		;
	return true;
}
bool PlayerHookDataUpdate_fflua_reg(lua_State* state)
{
//for decltype
	PlayerHookDataUpdate* message(nullptr);
	message;
	ff::fflua_register_t<PlayerHookDataUpdate, ctor()>(state, "PlayerHookDataUpdate", "google::protobuf::Message")
		// required int32 stage_id = 1;
		.def(&PlayerHookDataUpdate::stage_id, "stage_id")
		.def(&PlayerHookDataUpdate::set_stage_id, "set_stage_id")
		// required fixed64 guid = 2;
		.def(&PlayerHookDataUpdate::guid, "guid")
		.def(&PlayerHookDataUpdate::set_guid, "set_guid")
		// required string name = 3;
		.def(&PlayerHookDataUpdate::name, "name")
		.def<void (PlayerHookDataUpdate::*)(const std::string&)>(&PlayerHookDataUpdate::set_name, "set_name")
		// required .Packet.BattleFormation form = 4;
		.def(&PlayerHookDataUpdate::form, "form")
		.def(&PlayerHookDataUpdate::mutable_form, "mutable_form")
		// required int32 time_cost = 5;
		.def(&PlayerHookDataUpdate::time_cost, "time_cost")
		.def(&PlayerHookDataUpdate::set_time_cost, "set_time_cost")
		// required int32 score = 6;
		.def(&PlayerHookDataUpdate::score, "score")
		.def(&PlayerHookDataUpdate::set_score, "set_score")
		// required int32 hook_time = 7;
		.def(&PlayerHookDataUpdate::hook_time, "hook_time")
		.def(&PlayerHookDataUpdate::set_hook_time, "set_hook_time")
		// required int32 income_per_min = 8;
		.def(&PlayerHookDataUpdate::income_per_min, "income_per_min")
		.def(&PlayerHookDataUpdate::set_income_per_min, "set_income_per_min")
		// required int32 exp_pre_min = 9;
		.def(&PlayerHookDataUpdate::exp_pre_min, "exp_pre_min")
		.def(&PlayerHookDataUpdate::set_exp_pre_min, "set_exp_pre_min")
		.def(&PlayerHookDataUpdate::ByteSize, "ByteSize")
		.def(&PlayerHookDataUpdate::SetInitialized, "SetInitialized")
		;
	return true;
}
bool HookStageDistributeUpdate_fflua_reg(lua_State* state)
{
//for decltype
	HookStageDistributeUpdate* message(nullptr);
	message;
	ff::fflua_register_t<HookStageDistributeUpdate, ctor()>(state, "HookStageDistributeUpdate", "google::protobuf::Message")
		// required int32 scene_id = 1;
		.def(&HookStageDistributeUpdate::scene_id, "scene_id")
		.def(&HookStageDistributeUpdate::set_scene_id, "set_scene_id")
		// repeated int32 stage_id = 2;
		.def(&HookStageDistributeUpdate::stage_id_size, "stage_id_size")
		.def<decltype(message->stage_id(0)) (HookStageDistributeUpdate::*)(int) const>(&HookStageDistributeUpdate::stage_id, "stage_id")
		.def<void(HookStageDistributeUpdate::*)(int, const decltype(message->stage_id(0)))>(&HookStageDistributeUpdate::set_stage_id, "set_stage_id")
		.def(&HookStageDistributeUpdate::add_stage_id, "add_stage_id")
		// repeated int32 player_count = 3;
		.def(&HookStageDistributeUpdate::player_count_size, "player_count_size")
		.def<decltype(message->player_count(0)) (HookStageDistributeUpdate::*)(int) const>(&HookStageDistributeUpdate::player_count, "player_count")
		.def<void(HookStageDistributeUpdate::*)(int, const decltype(message->player_count(0)))>(&HookStageDistributeUpdate::set_player_count, "set_player_count")
		.def(&HookStageDistributeUpdate::add_player_count, "add_player_count")
		.def(&HookStageDistributeUpdate::ByteSize, "ByteSize")
		.def(&HookStageDistributeUpdate::SetInitialized, "SetInitialized")
		;
	return true;
}
bool PlayerUpdateCaptureForm_fflua_reg(lua_State* state)
{
//for decltype
	PlayerUpdateCaptureForm* message(nullptr);
	message;
	ff::fflua_register_t<PlayerUpdateCaptureForm, ctor()>(state, "PlayerUpdateCaptureForm", "google::protobuf::Message")
		// required .Packet.PlayerBasicInfo player_info = 1;
		.def(&PlayerUpdateCaptureForm::player_info, "player_info")
		.def(&PlayerUpdateCaptureForm::mutable_player_info, "mutable_player_info")
		// repeated .Packet.ActorFullInfo actors = 2;
		.def(&PlayerUpdateCaptureForm::actors_size, "actors_size")
		.def<decltype(message->actors(0)) (PlayerUpdateCaptureForm::*)(int) const>(&PlayerUpdateCaptureForm::actors, "actors")
		.def<decltype(message->mutable_actors(0)) (PlayerUpdateCaptureForm::*)(int)>(&PlayerUpdateCaptureForm::mutable_actors, "mutable_actors")
		.def(&PlayerUpdateCaptureForm::add_actors, "add_actors")
		.def(&PlayerUpdateCaptureForm::ByteSize, "ByteSize")
		.def(&PlayerUpdateCaptureForm::SetInitialized, "SetInitialized")
		;
	return true;
}
bool AddGuildMoney_fflua_reg(lua_State* state)
{
//for decltype
	AddGuildMoney* message(nullptr);
	message;
	ff::fflua_register_t<AddGuildMoney, ctor()>(state, "AddGuildMoney", "google::protobuf::Message")
		// required fixed64 guildid = 1;
		.def(&AddGuildMoney::guildid, "guildid")
		.def(&AddGuildMoney::set_guildid, "set_guildid")
		// required int32 addcount = 2;
		.def(&AddGuildMoney::addcount, "addcount")
		.def(&AddGuildMoney::set_addcount, "set_addcount")
		.def(&AddGuildMoney::ByteSize, "ByteSize")
		.def(&AddGuildMoney::SetInitialized, "SetInitialized")
		;
	return true;
}
bool S2GMessage_fflua_regist_all(lua_State* state)
{
	S2GCommonMessage_fflua_reg(state);
	SaveBattleReply_fflua_reg(state);
	TeamMemberChangeScene_fflua_reg(state);
	TeamChat_fflua_reg(state);
	GuildChat_fflua_reg(state);
	WorldChat_fflua_reg(state);
	InsertScenePlayer_fflua_reg(state);
	GetOperateInfo_fflua_reg(state);
	DestroyRoom_fflua_reg(state);
	PlayerAutoMatch_fflua_reg(state);
	EndGuildBoss_fflua_reg(state);
	RefreshTarget_fflua_reg(state);
	CheckOffLine_fflua_reg(state);
	GuildBattleWeekRank_fflua_reg(state);
	GuildBattleAllRank_fflua_reg(state);
	XLuaRegNotify_fflua_reg(state);
	LuaLoadNotify_fflua_reg(state);
	BuffPoint_fflua_reg(state);
	PlayerCaptureStatge_fflua_reg(state);
	PlayerHookDataUpdate_fflua_reg(state);
	HookStageDistributeUpdate_fflua_reg(state);
	PlayerUpdateCaptureForm_fflua_reg(state);
	AddGuildMoney_fflua_reg(state);
	return true;
}
}
