// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AllPacketEnum.proto

#ifndef PROTOBUF_AllPacketEnum_2eproto__INCLUDED
#define PROTOBUF_AllPacketEnum_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace Packet {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AllPacketEnum_2eproto();
void protobuf_AssignDesc_AllPacketEnum_2eproto();
void protobuf_ShutdownFile_AllPacketEnum_2eproto();


enum PlayerTeamStatus {
  Team_Follow = 0,
  Team_AFKING = 1,
  Team_AFK = 2
};
bool PlayerTeamStatus_IsValid(int value);
const PlayerTeamStatus PlayerTeamStatus_MIN = Team_Follow;
const PlayerTeamStatus PlayerTeamStatus_MAX = Team_AFK;
const int PlayerTeamStatus_ARRAYSIZE = PlayerTeamStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerTeamStatus_descriptor();
inline const ::std::string& PlayerTeamStatus_Name(PlayerTeamStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerTeamStatus_descriptor(), value);
}
inline bool PlayerTeamStatus_Parse(
    const ::std::string& name, PlayerTeamStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerTeamStatus>(
    PlayerTeamStatus_descriptor(), name, value);
}
enum ActorType {
  Main = 1,
  Hero = 2,
  Monster = 3,
  Boss = 4,
  SUMMON_NORMAL = 5,
  SUMMON_NO_SELECT = 6
};
bool ActorType_IsValid(int value);
const ActorType ActorType_MIN = Main;
const ActorType ActorType_MAX = SUMMON_NO_SELECT;
const int ActorType_ARRAYSIZE = ActorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActorType_descriptor();
inline const ::std::string& ActorType_Name(ActorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActorType_descriptor(), value);
}
inline bool ActorType_Parse(
    const ::std::string& name, ActorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActorType>(
    ActorType_descriptor(), name, value);
}
enum BattleActorType {
  BAT_MAIN = 1,
  BAT_HERO = 2,
  BAT_MONSTER = 3,
  BAT_BOSS = 4,
  BAT_SUMMON = 5
};
bool BattleActorType_IsValid(int value);
const BattleActorType BattleActorType_MIN = BAT_MAIN;
const BattleActorType BattleActorType_MAX = BAT_SUMMON;
const int BattleActorType_ARRAYSIZE = BattleActorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BattleActorType_descriptor();
inline const ::std::string& BattleActorType_Name(BattleActorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BattleActorType_descriptor(), value);
}
inline bool BattleActorType_Parse(
    const ::std::string& name, BattleActorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BattleActorType>(
    BattleActorType_descriptor(), name, value);
}
enum LastHpType {
  HellLastHp = 0,
  BFLastHp = 1,
  GBLastHp = 2,
  GBOSSLastHp = 3,
  LastHpMax = 5
};
bool LastHpType_IsValid(int value);
const LastHpType LastHpType_MIN = HellLastHp;
const LastHpType LastHpType_MAX = LastHpMax;
const int LastHpType_ARRAYSIZE = LastHpType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LastHpType_descriptor();
inline const ::std::string& LastHpType_Name(LastHpType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LastHpType_descriptor(), value);
}
inline bool LastHpType_Parse(
    const ::std::string& name, LastHpType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LastHpType>(
    LastHpType_descriptor(), name, value);
}
enum ActorStar {
  ONE = 1,
  TWO = 2,
  THREE = 3,
  FOUR = 4,
  FIVE = 5
};
bool ActorStar_IsValid(int value);
const ActorStar ActorStar_MIN = ONE;
const ActorStar ActorStar_MAX = FIVE;
const int ActorStar_ARRAYSIZE = ActorStar_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActorStar_descriptor();
inline const ::std::string& ActorStar_Name(ActorStar value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActorStar_descriptor(), value);
}
inline bool ActorStar_Parse(
    const ::std::string& name, ActorStar* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActorStar>(
    ActorStar_descriptor(), name, value);
}
enum ActorColor {
  WHILE = 1,
  GREEN_0 = 2,
  GREEN_1 = 3,
  BLUE_0 = 4,
  BLUE_1 = 5,
  BLUE_2 = 6,
  PURPLE_0 = 7
};
bool ActorColor_IsValid(int value);
const ActorColor ActorColor_MIN = WHILE;
const ActorColor ActorColor_MAX = PURPLE_0;
const int ActorColor_ARRAYSIZE = ActorColor_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActorColor_descriptor();
inline const ::std::string& ActorColor_Name(ActorColor value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActorColor_descriptor(), value);
}
inline bool ActorColor_Parse(
    const ::std::string& name, ActorColor* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActorColor>(
    ActorColor_descriptor(), name, value);
}
enum ActorBattleType {
  USE_PHYSICAL = 1,
  USE_MAGIC = 2
};
bool ActorBattleType_IsValid(int value);
const ActorBattleType ActorBattleType_MIN = USE_PHYSICAL;
const ActorBattleType ActorBattleType_MAX = USE_MAGIC;
const int ActorBattleType_ARRAYSIZE = ActorBattleType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActorBattleType_descriptor();
inline const ::std::string& ActorBattleType_Name(ActorBattleType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActorBattleType_descriptor(), value);
}
inline bool ActorBattleType_Parse(
    const ::std::string& name, ActorBattleType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActorBattleType>(
    ActorBattleType_descriptor(), name, value);
}
enum ActorFigthFormation {
  INVALID_FORMATION = 0,
  AFF_NORMAL_HOOK = 1,
  AFF_PVE_NORMAL = 1,
  AFF_PVP_ONLINE = 2,
  AFF_STAGE_CAPTURE = 3,
  AFF_STAGE_GUARD = 4,
  AFF_PVP_LOOT_FORMATION = 5,
  AFF_PVP_ARENA = 6,
  AFF_PVP_TRIAL_FIELD = 7,
  AFF_PVP_GUARD = 8,
  AFF_PVP_BATTLE_FIELD = 9,
  AFF_PVP_WORLDBOSS_Sun = 10,
  AFF_PVP_WORLDBOSS_Mon = 11,
  AFF_PVP_WORLDBOSS_Tues = 12,
  AFF_PVP_WORLDBOSS_Wed = 13,
  AFF_PVP_WORLDBOSS_Thur = 14,
  AFF_PVP_WORLDBOSS_Fri = 15,
  AFF_PVP_WORLDBOSS_Sat = 16,
  AFF_PVE_GUILD_BOSS = 17,
  AFF_PVE_GUILD_COPY = 18,
  AFF_PVE_REWARD_MISSION = 19,
  AFF_PVE_ARCHAEOLOGY_MISSION = 20,
  AFF_PVE_GOBLIN_CARBON = 21,
  AFF_PVE_BLOOD_CARBON = 22
};
bool ActorFigthFormation_IsValid(int value);
const ActorFigthFormation ActorFigthFormation_MIN = INVALID_FORMATION;
const ActorFigthFormation ActorFigthFormation_MAX = AFF_PVE_BLOOD_CARBON;
const int ActorFigthFormation_ARRAYSIZE = ActorFigthFormation_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActorFigthFormation_descriptor();
inline const ::std::string& ActorFigthFormation_Name(ActorFigthFormation value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActorFigthFormation_descriptor(), value);
}
inline bool ActorFigthFormation_Parse(
    const ::std::string& name, ActorFigthFormation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActorFigthFormation>(
    ActorFigthFormation_descriptor(), name, value);
}
enum DamageType {
  PHYSICAL = 1,
  FLASH = 2,
  ICE = 3,
  FIRE = 4,
  NATURE = 5,
  SHADOW = 6,
  HOLY = 7
};
bool DamageType_IsValid(int value);
const DamageType DamageType_MIN = PHYSICAL;
const DamageType DamageType_MAX = HOLY;
const int DamageType_ARRAYSIZE = DamageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DamageType_descriptor();
inline const ::std::string& DamageType_Name(DamageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DamageType_descriptor(), value);
}
inline bool DamageType_Parse(
    const ::std::string& name, DamageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DamageType>(
    DamageType_descriptor(), name, value);
}
enum DamageExpression {
  ActorOnDamage_NORMAL = 1,
  ActorOnDamage_CRITICAL = 2,
  ActorOnDamage_DODGE = 3,
  ActorOnDamage_CURE = 4
};
bool DamageExpression_IsValid(int value);
const DamageExpression DamageExpression_MIN = ActorOnDamage_NORMAL;
const DamageExpression DamageExpression_MAX = ActorOnDamage_CURE;
const int DamageExpression_ARRAYSIZE = DamageExpression_MAX + 1;

const ::google::protobuf::EnumDescriptor* DamageExpression_descriptor();
inline const ::std::string& DamageExpression_Name(DamageExpression value) {
  return ::google::protobuf::internal::NameOfEnum(
    DamageExpression_descriptor(), value);
}
inline bool DamageExpression_Parse(
    const ::std::string& name, DamageExpression* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DamageExpression>(
    DamageExpression_descriptor(), name, value);
}
enum SkillPositionLogicType {
  CHARGE_LOGIC = 1,
  TELEPORT_LOGIC = 2,
  CAPTURE_LOGIC = 3,
  HITOFF_LOGIC = 4
};
bool SkillPositionLogicType_IsValid(int value);
const SkillPositionLogicType SkillPositionLogicType_MIN = CHARGE_LOGIC;
const SkillPositionLogicType SkillPositionLogicType_MAX = HITOFF_LOGIC;
const int SkillPositionLogicType_ARRAYSIZE = SkillPositionLogicType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SkillPositionLogicType_descriptor();
inline const ::std::string& SkillPositionLogicType_Name(SkillPositionLogicType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SkillPositionLogicType_descriptor(), value);
}
inline bool SkillPositionLogicType_Parse(
    const ::std::string& name, SkillPositionLogicType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SkillPositionLogicType>(
    SkillPositionLogicType_descriptor(), name, value);
}
enum BattleGroundType {
  NO_BATTLE = 0,
  PVE_SINGLE = 1,
  PVE_HOOK = 2,
  PVP_OFFLINE = 3,
  PVP_ONLINE = 4,
  PVP_PVE_CAPTURE_STAGE = 5,
  PVE_STAGE_BOSS = 6,
  PVP_LOOT = 9,
  PVP_ARENA = 10,
  PVP_TRIAL_FIELD = 11,
  PVP_BATTEL_FIELD = 12,
  PVP_GUILD_BATTLE = 13,
  PVE_GUILD_BOSS = 14,
  PVP_WORLDBOSS_BATTLE = 15,
  PVE_GUILD_COPY = 16,
  PVP_GUILD_CAPTURE_POINT = 17,
  PVE_SIMULATE = 18
};
bool BattleGroundType_IsValid(int value);
const BattleGroundType BattleGroundType_MIN = NO_BATTLE;
const BattleGroundType BattleGroundType_MAX = PVE_SIMULATE;
const int BattleGroundType_ARRAYSIZE = BattleGroundType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BattleGroundType_descriptor();
inline const ::std::string& BattleGroundType_Name(BattleGroundType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BattleGroundType_descriptor(), value);
}
inline bool BattleGroundType_Parse(
    const ::std::string& name, BattleGroundType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BattleGroundType>(
    BattleGroundType_descriptor(), name, value);
}
enum BattleObjectType {
  INVALID_TYPE = 0,
  TRAP = 1,
  MAIN_ACTOR = 2,
  HERO_ACTOR = 3,
  NORMAL_MONSTER = 4,
  BOSS = 5
};
bool BattleObjectType_IsValid(int value);
const BattleObjectType BattleObjectType_MIN = INVALID_TYPE;
const BattleObjectType BattleObjectType_MAX = BOSS;
const int BattleObjectType_ARRAYSIZE = BattleObjectType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BattleObjectType_descriptor();
inline const ::std::string& BattleObjectType_Name(BattleObjectType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BattleObjectType_descriptor(), value);
}
inline bool BattleObjectType_Parse(
    const ::std::string& name, BattleObjectType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BattleObjectType>(
    BattleObjectType_descriptor(), name, value);
}
enum ActorStateType {
  ACTOR_IDEL = 1,
  ACTOR_SELECT_TAR = 2,
  ACTOR_MOVE = 3,
  ACTOR_FIGHT = 4,
  ACTOR_DEAD = 5
};
bool ActorStateType_IsValid(int value);
const ActorStateType ActorStateType_MIN = ACTOR_IDEL;
const ActorStateType ActorStateType_MAX = ACTOR_DEAD;
const int ActorStateType_ARRAYSIZE = ActorStateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActorStateType_descriptor();
inline const ::std::string& ActorStateType_Name(ActorStateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActorStateType_descriptor(), value);
}
inline bool ActorStateType_Parse(
    const ::std::string& name, ActorStateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActorStateType>(
    ActorStateType_descriptor(), name, value);
}
enum ActorControlType {
  AI = 0,
  MANUAL = 1
};
bool ActorControlType_IsValid(int value);
const ActorControlType ActorControlType_MIN = AI;
const ActorControlType ActorControlType_MAX = MANUAL;
const int ActorControlType_ARRAYSIZE = ActorControlType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActorControlType_descriptor();
inline const ::std::string& ActorControlType_Name(ActorControlType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActorControlType_descriptor(), value);
}
inline bool ActorControlType_Parse(
    const ::std::string& name, ActorControlType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActorControlType>(
    ActorControlType_descriptor(), name, value);
}
enum Property {
  INVALID_PROPERTY = 0,
  ENDURANCE = 1,
  PHYSICAL_STRENTH = 2,
  AGILE = 3,
  INTELLIGENCE = 4,
  SPIRIT = 5,
  HP = 6,
  PHYSICAL_ATTACK = 7,
  PHYSICAL_ARMOR = 8,
  MAGIC_ATTACK = 9,
  MAGIC_ARMOR = 10,
  ACCURATE = 11,
  DODGE = 12,
  CRITICAL = 13,
  TOUGHNESS = 14,
  MOVE_SPEED = 15,
  ATTACK_SPEED = 16,
  SKILL = 17,
  PERCENT_HP = 18,
  PERCENT_PHYSICAL_ATTACK = 19,
  PERCENT_PHYSICAL_ARMOR = 20,
  PERCENT_MAGIC_ATTACK = 21,
  PERCENT_MAGIC_ARMOR = 22,
  PERCENT_CURE_ABILITY = 23
};
bool Property_IsValid(int value);
const Property Property_MIN = INVALID_PROPERTY;
const Property Property_MAX = PERCENT_CURE_ABILITY;
const int Property_ARRAYSIZE = Property_MAX + 1;

const ::google::protobuf::EnumDescriptor* Property_descriptor();
inline const ::std::string& Property_Name(Property value) {
  return ::google::protobuf::internal::NameOfEnum(
    Property_descriptor(), value);
}
inline bool Property_Parse(
    const ::std::string& name, Property* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Property>(
    Property_descriptor(), name, value);
}
enum ChatChannel {
  SYSTEM = 0,
  WORLD = 1,
  SCENE = 2,
  GUILD = 3,
  TEAM = 4,
  TEAMINFO = 5,
  FARMSG = 6,
  RUNMSG = 7,
  MAX = 8
};
bool ChatChannel_IsValid(int value);
const ChatChannel ChatChannel_MIN = SYSTEM;
const ChatChannel ChatChannel_MAX = MAX;
const int ChatChannel_ARRAYSIZE = ChatChannel_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChatChannel_descriptor();
inline const ::std::string& ChatChannel_Name(ChatChannel value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChatChannel_descriptor(), value);
}
inline bool ChatChannel_Parse(
    const ::std::string& name, ChatChannel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatChannel>(
    ChatChannel_descriptor(), name, value);
}
enum CellLogicType {
  InvalidCellType = -1,
  NumberCell = 0,
  BitFlagCell = 1,
  MissionCell = 2,
  GuideCell = 3,
  AcRewardCell = 4,
  ActivityCell = 5,
  MountCell = 6,
  TargetData = 7,
  ActionData = 8,
  ResetTime = 9,
  GuildUserCell = 10
};
bool CellLogicType_IsValid(int value);
const CellLogicType CellLogicType_MIN = InvalidCellType;
const CellLogicType CellLogicType_MAX = GuildUserCell;
const int CellLogicType_ARRAYSIZE = CellLogicType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CellLogicType_descriptor();
inline const ::std::string& CellLogicType_Name(CellLogicType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CellLogicType_descriptor(), value);
}
inline bool CellLogicType_Parse(
    const ::std::string& name, CellLogicType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CellLogicType>(
    CellLogicType_descriptor(), name, value);
}
enum NumberCellIndex {
  NumberCellIndex_Invalid = -1,
  CrystalToCoinCount = 0,
  TargetRewardFlag = 1,
  DrawLuckyValue = 2,
  ActivityRewardFlag = 3,
  DrawLuckyValue2 = 4,
  DrawLuckyValue3 = 5,
  InspireTimes = 7,
  HellReliveTimes = 8,
  GuildCommonData = 9,
  ArenaChallengeTimeToday = 10,
  ArenaBuyTimesToday = 11,
  HellDayWaveCount = 12,
  ReNameCount = 13,
  GuildFreezeContribute = 14,
  GuildCurContribute = 15,
  GuildAllContribute = 16,
  CrystalExtendEquipBagTimes = 17,
  CrystalExtendBankTimes = 18,
  CrystalExtendItemBagTimes = 19,
  NumberCellIndex_Max = 20
};
bool NumberCellIndex_IsValid(int value);
const NumberCellIndex NumberCellIndex_MIN = NumberCellIndex_Invalid;
const NumberCellIndex NumberCellIndex_MAX = NumberCellIndex_Max;
const int NumberCellIndex_ARRAYSIZE = NumberCellIndex_MAX + 1;

const ::google::protobuf::EnumDescriptor* NumberCellIndex_descriptor();
inline const ::std::string& NumberCellIndex_Name(NumberCellIndex value) {
  return ::google::protobuf::internal::NameOfEnum(
    NumberCellIndex_descriptor(), value);
}
inline bool NumberCellIndex_Parse(
    const ::std::string& name, NumberCellIndex* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NumberCellIndex>(
    NumberCellIndex_descriptor(), name, value);
}
enum BitFlagCellIndex {
  BitFlagCellIndex_Invalid = -1,
  FirstCrystalDrawFlag = 0,
  FirstCoinDrawFlag = 1,
  WorldBossAutoFightFlag = 2,
  FirstDayKillFlag = 3,
  SecondCoinDrawFlag = 4,
  FirstBattleFieldFlag = 5,
  FirstWorldBossFlag = 6,
  FirstTriFieldFlag = 7,
  MonthCardFlag = 8,
  LifeCardFlag = 9,
  InvestFlag = 10,
  DayTriFieldFlag = 11,
  DayTriGuildBossFlag = 12,
  InnerHookInitFlag = 13,
  MissionAutoBuyItemFlag = 14,
  BitFlagCellIndex_Max = 32
};
bool BitFlagCellIndex_IsValid(int value);
const BitFlagCellIndex BitFlagCellIndex_MIN = BitFlagCellIndex_Invalid;
const BitFlagCellIndex BitFlagCellIndex_MAX = BitFlagCellIndex_Max;
const int BitFlagCellIndex_ARRAYSIZE = BitFlagCellIndex_MAX + 1;

const ::google::protobuf::EnumDescriptor* BitFlagCellIndex_descriptor();
inline const ::std::string& BitFlagCellIndex_Name(BitFlagCellIndex value) {
  return ::google::protobuf::internal::NameOfEnum(
    BitFlagCellIndex_descriptor(), value);
}
inline bool BitFlagCellIndex_Parse(
    const ::std::string& name, BitFlagCellIndex* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BitFlagCellIndex>(
    BitFlagCellIndex_descriptor(), name, value);
}
enum MissionCellIndex {
  MissionCellStart = 0,
  MissionCellEnd = 128
};
bool MissionCellIndex_IsValid(int value);
const MissionCellIndex MissionCellIndex_MIN = MissionCellStart;
const MissionCellIndex MissionCellIndex_MAX = MissionCellEnd;
const int MissionCellIndex_ARRAYSIZE = MissionCellIndex_MAX + 1;

const ::google::protobuf::EnumDescriptor* MissionCellIndex_descriptor();
inline const ::std::string& MissionCellIndex_Name(MissionCellIndex value) {
  return ::google::protobuf::internal::NameOfEnum(
    MissionCellIndex_descriptor(), value);
}
inline bool MissionCellIndex_Parse(
    const ::std::string& name, MissionCellIndex* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MissionCellIndex>(
    MissionCellIndex_descriptor(), name, value);
}
enum GuideCellIndex {
  GuideGroupStart = 0,
  GuideGroupEnd = 64
};
bool GuideCellIndex_IsValid(int value);
const GuideCellIndex GuideCellIndex_MIN = GuideGroupStart;
const GuideCellIndex GuideCellIndex_MAX = GuideGroupEnd;
const int GuideCellIndex_ARRAYSIZE = GuideCellIndex_MAX + 1;

const ::google::protobuf::EnumDescriptor* GuideCellIndex_descriptor();
inline const ::std::string& GuideCellIndex_Name(GuideCellIndex value) {
  return ::google::protobuf::internal::NameOfEnum(
    GuideCellIndex_descriptor(), value);
}
inline bool GuideCellIndex_Parse(
    const ::std::string& name, GuideCellIndex* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GuideCellIndex>(
    GuideCellIndex_descriptor(), name, value);
}
enum ActivityDataIndex {
  ActivityDataStart = 0,
  ActivityDataEnd = 128
};
bool ActivityDataIndex_IsValid(int value);
const ActivityDataIndex ActivityDataIndex_MIN = ActivityDataStart;
const ActivityDataIndex ActivityDataIndex_MAX = ActivityDataEnd;
const int ActivityDataIndex_ARRAYSIZE = ActivityDataIndex_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActivityDataIndex_descriptor();
inline const ::std::string& ActivityDataIndex_Name(ActivityDataIndex value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActivityDataIndex_descriptor(), value);
}
inline bool ActivityDataIndex_Parse(
    const ::std::string& name, ActivityDataIndex* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActivityDataIndex>(
    ActivityDataIndex_descriptor(), name, value);
}
enum AcRewardIndex {
  RewardDataStart = 0,
  RewardDataEnd = 256
};
bool AcRewardIndex_IsValid(int value);
const AcRewardIndex AcRewardIndex_MIN = RewardDataStart;
const AcRewardIndex AcRewardIndex_MAX = RewardDataEnd;
const int AcRewardIndex_ARRAYSIZE = AcRewardIndex_MAX + 1;

const ::google::protobuf::EnumDescriptor* AcRewardIndex_descriptor();
inline const ::std::string& AcRewardIndex_Name(AcRewardIndex value) {
  return ::google::protobuf::internal::NameOfEnum(
    AcRewardIndex_descriptor(), value);
}
inline bool AcRewardIndex_Parse(
    const ::std::string& name, AcRewardIndex* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AcRewardIndex>(
    AcRewardIndex_descriptor(), name, value);
}
enum TargetDataIndex {
  TargetDataStart = 0,
  TargetDataEnd = 128
};
bool TargetDataIndex_IsValid(int value);
const TargetDataIndex TargetDataIndex_MIN = TargetDataStart;
const TargetDataIndex TargetDataIndex_MAX = TargetDataEnd;
const int TargetDataIndex_ARRAYSIZE = TargetDataIndex_MAX + 1;

const ::google::protobuf::EnumDescriptor* TargetDataIndex_descriptor();
inline const ::std::string& TargetDataIndex_Name(TargetDataIndex value) {
  return ::google::protobuf::internal::NameOfEnum(
    TargetDataIndex_descriptor(), value);
}
inline bool TargetDataIndex_Parse(
    const ::std::string& name, TargetDataIndex* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TargetDataIndex>(
    TargetDataIndex_descriptor(), name, value);
}
enum ActionDataIndex {
  ActionDataStart = 0,
  ActionDataEnd = 128
};
bool ActionDataIndex_IsValid(int value);
const ActionDataIndex ActionDataIndex_MIN = ActionDataStart;
const ActionDataIndex ActionDataIndex_MAX = ActionDataEnd;
const int ActionDataIndex_ARRAYSIZE = ActionDataIndex_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActionDataIndex_descriptor();
inline const ::std::string& ActionDataIndex_Name(ActionDataIndex value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActionDataIndex_descriptor(), value);
}
inline bool ActionDataIndex_Parse(
    const ::std::string& name, ActionDataIndex* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActionDataIndex>(
    ActionDataIndex_descriptor(), name, value);
}
enum ResetTimeIndex {
  ResetTimeStart = 0,
  ResetTimeEnd = 64
};
bool ResetTimeIndex_IsValid(int value);
const ResetTimeIndex ResetTimeIndex_MIN = ResetTimeStart;
const ResetTimeIndex ResetTimeIndex_MAX = ResetTimeEnd;
const int ResetTimeIndex_ARRAYSIZE = ResetTimeIndex_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResetTimeIndex_descriptor();
inline const ::std::string& ResetTimeIndex_Name(ResetTimeIndex value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResetTimeIndex_descriptor(), value);
}
inline bool ResetTimeIndex_Parse(
    const ::std::string& name, ResetTimeIndex* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResetTimeIndex>(
    ResetTimeIndex_descriptor(), name, value);
}
enum Cell64LogicType {
  InvalidCell64Type = -1,
  NumberCell64 = 0,
  LootCell64Type = 1,
  EquipBook = 2
};
bool Cell64LogicType_IsValid(int value);
const Cell64LogicType Cell64LogicType_MIN = InvalidCell64Type;
const Cell64LogicType Cell64LogicType_MAX = EquipBook;
const int Cell64LogicType_ARRAYSIZE = Cell64LogicType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Cell64LogicType_descriptor();
inline const ::std::string& Cell64LogicType_Name(Cell64LogicType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Cell64LogicType_descriptor(), value);
}
inline bool Cell64LogicType_Parse(
    const ::std::string& name, Cell64LogicType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Cell64LogicType>(
    Cell64LogicType_descriptor(), name, value);
}
enum LootCellIndex {
  LAST_LOOT_PLAYER_GUID = 0,
  UNBIND_COIN = 1,
  LOOT_COUNT_TODAY = 2,
  LAST_BE_LOOT_TIME = 3,
  LAST_LOOT_TIME = 4
};
bool LootCellIndex_IsValid(int value);
const LootCellIndex LootCellIndex_MIN = LAST_LOOT_PLAYER_GUID;
const LootCellIndex LootCellIndex_MAX = LAST_LOOT_TIME;
const int LootCellIndex_ARRAYSIZE = LootCellIndex_MAX + 1;

const ::google::protobuf::EnumDescriptor* LootCellIndex_descriptor();
inline const ::std::string& LootCellIndex_Name(LootCellIndex value) {
  return ::google::protobuf::internal::NameOfEnum(
    LootCellIndex_descriptor(), value);
}
inline bool LootCellIndex_Parse(
    const ::std::string& name, LootCellIndex* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LootCellIndex>(
    LootCellIndex_descriptor(), name, value);
}
enum GuildUserCellIndex {
  DONATION = 0,
  GUILDUSER_MAX = 1
};
bool GuildUserCellIndex_IsValid(int value);
const GuildUserCellIndex GuildUserCellIndex_MIN = DONATION;
const GuildUserCellIndex GuildUserCellIndex_MAX = GUILDUSER_MAX;
const int GuildUserCellIndex_ARRAYSIZE = GuildUserCellIndex_MAX + 1;

const ::google::protobuf::EnumDescriptor* GuildUserCellIndex_descriptor();
inline const ::std::string& GuildUserCellIndex_Name(GuildUserCellIndex value) {
  return ::google::protobuf::internal::NameOfEnum(
    GuildUserCellIndex_descriptor(), value);
}
inline bool GuildUserCellIndex_Parse(
    const ::std::string& name, GuildUserCellIndex* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GuildUserCellIndex>(
    GuildUserCellIndex_descriptor(), name, value);
}
enum NumberCell64Index {
  TestGuid = 0,
  LastGuildId = 1,
  ActorBook = 2,
  GuideFlagData = 3,
  GuideFirstFlag = 4,
  SceneFirstFlag = 5,
  MissRewardFlag = 6,
  InnerHookFlag = 7
};
bool NumberCell64Index_IsValid(int value);
const NumberCell64Index NumberCell64Index_MIN = TestGuid;
const NumberCell64Index NumberCell64Index_MAX = InnerHookFlag;
const int NumberCell64Index_ARRAYSIZE = NumberCell64Index_MAX + 1;

const ::google::protobuf::EnumDescriptor* NumberCell64Index_descriptor();
inline const ::std::string& NumberCell64Index_Name(NumberCell64Index value) {
  return ::google::protobuf::internal::NameOfEnum(
    NumberCell64Index_descriptor(), value);
}
inline bool NumberCell64Index_Parse(
    const ::std::string& name, NumberCell64Index* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NumberCell64Index>(
    NumberCell64Index_descriptor(), name, value);
}
enum EquipBook64Index {
  EquipBookStart = 0,
  EquipBookEnd = 64
};
bool EquipBook64Index_IsValid(int value);
const EquipBook64Index EquipBook64Index_MIN = EquipBookStart;
const EquipBook64Index EquipBook64Index_MAX = EquipBookEnd;
const int EquipBook64Index_ARRAYSIZE = EquipBook64Index_MAX + 1;

const ::google::protobuf::EnumDescriptor* EquipBook64Index_descriptor();
inline const ::std::string& EquipBook64Index_Name(EquipBook64Index value) {
  return ::google::protobuf::internal::NameOfEnum(
    EquipBook64Index_descriptor(), value);
}
inline bool EquipBook64Index_Parse(
    const ::std::string& name, EquipBook64Index* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EquipBook64Index>(
    EquipBook64Index_descriptor(), name, value);
}
enum ZoneCellIndex {
  AddPopularity = 0,
  OffNewMessage = 1
};
bool ZoneCellIndex_IsValid(int value);
const ZoneCellIndex ZoneCellIndex_MIN = AddPopularity;
const ZoneCellIndex ZoneCellIndex_MAX = OffNewMessage;
const int ZoneCellIndex_ARRAYSIZE = ZoneCellIndex_MAX + 1;

const ::google::protobuf::EnumDescriptor* ZoneCellIndex_descriptor();
inline const ::std::string& ZoneCellIndex_Name(ZoneCellIndex value) {
  return ::google::protobuf::internal::NameOfEnum(
    ZoneCellIndex_descriptor(), value);
}
inline bool ZoneCellIndex_Parse(
    const ::std::string& name, ZoneCellIndex* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ZoneCellIndex>(
    ZoneCellIndex_descriptor(), name, value);
}
enum FriendMessageType {
  SystemM = 1,
  FriendTips = 3,
  FriendM = 0
};
bool FriendMessageType_IsValid(int value);
const FriendMessageType FriendMessageType_MIN = FriendM;
const FriendMessageType FriendMessageType_MAX = FriendTips;
const int FriendMessageType_ARRAYSIZE = FriendMessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FriendMessageType_descriptor();
inline const ::std::string& FriendMessageType_Name(FriendMessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FriendMessageType_descriptor(), value);
}
inline bool FriendMessageType_Parse(
    const ::std::string& name, FriendMessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FriendMessageType>(
    FriendMessageType_descriptor(), name, value);
}
enum ContainerType {
  Layer_Invalid = -1,
  Layer_EquipBag = 0,
  Layer_ItemBag = 1,
  Layer_MissionBag = 2,
  Layer_Equip = 3,
  Layer_Bank = 4,
  Layer_EquipAndItemBag = 7,
  Layer_AllBag = 8,
  Layer_TokenBag = 9,
  Layer_MissionAndItemBag = 10,
  Layer_ArrangeBag = 11
};
bool ContainerType_IsValid(int value);
const ContainerType ContainerType_MIN = Layer_Invalid;
const ContainerType ContainerType_MAX = Layer_ArrangeBag;
const int ContainerType_ARRAYSIZE = ContainerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ContainerType_descriptor();
inline const ::std::string& ContainerType_Name(ContainerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ContainerType_descriptor(), value);
}
inline bool ContainerType_Parse(
    const ::std::string& name, ContainerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ContainerType>(
    ContainerType_descriptor(), name, value);
}
enum AccountType {
  FAST = 0,
  BIND = 1,
  THIRD = 2
};
bool AccountType_IsValid(int value);
const AccountType AccountType_MIN = FAST;
const AccountType AccountType_MAX = THIRD;
const int AccountType_ARRAYSIZE = AccountType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AccountType_descriptor();
inline const ::std::string& AccountType_Name(AccountType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AccountType_descriptor(), value);
}
inline bool AccountType_Parse(
    const ::std::string& name, AccountType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AccountType>(
    AccountType_descriptor(), name, value);
}
enum MissionState {
  MissionTodo = 0,
  MissionFinish = 1,
  MissionFailed = 2,
  MissionComplete = 3,
  MissionDrop = 4
};
bool MissionState_IsValid(int value);
const MissionState MissionState_MIN = MissionTodo;
const MissionState MissionState_MAX = MissionDrop;
const int MissionState_ARRAYSIZE = MissionState_MAX + 1;

const ::google::protobuf::EnumDescriptor* MissionState_descriptor();
inline const ::std::string& MissionState_Name(MissionState value) {
  return ::google::protobuf::internal::NameOfEnum(
    MissionState_descriptor(), value);
}
inline bool MissionState_Parse(
    const ::std::string& name, MissionState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MissionState>(
    MissionState_descriptor(), name, value);
}
enum MissionOption {
  Accept = 0,
  Finish = 1,
  Drop = 2,
  Fight = 3,
  Add = 4,
  Raid = 5
};
bool MissionOption_IsValid(int value);
const MissionOption MissionOption_MIN = Accept;
const MissionOption MissionOption_MAX = Raid;
const int MissionOption_ARRAYSIZE = MissionOption_MAX + 1;

const ::google::protobuf::EnumDescriptor* MissionOption_descriptor();
inline const ::std::string& MissionOption_Name(MissionOption value) {
  return ::google::protobuf::internal::NameOfEnum(
    MissionOption_descriptor(), value);
}
inline bool MissionOption_Parse(
    const ::std::string& name, MissionOption* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MissionOption>(
    MissionOption_descriptor(), name, value);
}
enum MissionDB_Param {
  Npc_Index = 0,
  Monster_Group = 1,
  Pos_Id = 2,
  Npc_Series = 3,
  Commit_Npc_Series = 4,
  Finish_Value = 5,
  CarbonRuntimeId = 6,
  MultiFinish_Value1 = 7,
  MultiFinish_Value2 = 8,
  MultiFinish_Value3 = 9,
  MultiFinish_Value4 = 10,
  StoryStage_Value = 11
};
bool MissionDB_Param_IsValid(int value);
const MissionDB_Param MissionDB_Param_MIN = Npc_Index;
const MissionDB_Param MissionDB_Param_MAX = StoryStage_Value;
const int MissionDB_Param_ARRAYSIZE = MissionDB_Param_MAX + 1;

const ::google::protobuf::EnumDescriptor* MissionDB_Param_descriptor();
inline const ::std::string& MissionDB_Param_Name(MissionDB_Param value) {
  return ::google::protobuf::internal::NameOfEnum(
    MissionDB_Param_descriptor(), value);
}
inline bool MissionDB_Param_Parse(
    const ::std::string& name, MissionDB_Param* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MissionDB_Param>(
    MissionDB_Param_descriptor(), name, value);
}
enum Camp {
  Alliance = 0,
  Horde = 1
};
bool Camp_IsValid(int value);
const Camp Camp_MIN = Alliance;
const Camp Camp_MAX = Horde;
const int Camp_ARRAYSIZE = Camp_MAX + 1;

const ::google::protobuf::EnumDescriptor* Camp_descriptor();
inline const ::std::string& Camp_Name(Camp value) {
  return ::google::protobuf::internal::NameOfEnum(
    Camp_descriptor(), value);
}
inline bool Camp_Parse(
    const ::std::string& name, Camp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Camp>(
    Camp_descriptor(), name, value);
}
enum ArrangeType {
  AT_Invalid = -1,
  AT_Leader = 0,
  AT_Roll = 1
};
bool ArrangeType_IsValid(int value);
const ArrangeType ArrangeType_MIN = AT_Invalid;
const ArrangeType ArrangeType_MAX = AT_Roll;
const int ArrangeType_ARRAYSIZE = ArrangeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ArrangeType_descriptor();
inline const ::std::string& ArrangeType_Name(ArrangeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ArrangeType_descriptor(), value);
}
inline bool ArrangeType_Parse(
    const ::std::string& name, ArrangeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ArrangeType>(
    ArrangeType_descriptor(), name, value);
}
enum Race {
  Non_Race = 0,
  Tauren = 1,
  Undead = 2,
  Orc = 3,
  Troll = 4,
  Human = 5,
  NigthElf = 6,
  Gnome = 7
};
bool Race_IsValid(int value);
const Race Race_MIN = Non_Race;
const Race Race_MAX = Gnome;
const int Race_ARRAYSIZE = Race_MAX + 1;

const ::google::protobuf::EnumDescriptor* Race_descriptor();
inline const ::std::string& Race_Name(Race value) {
  return ::google::protobuf::internal::NameOfEnum(
    Race_descriptor(), value);
}
inline bool Race_Parse(
    const ::std::string& name, Race* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Race>(
    Race_descriptor(), name, value);
}
enum Professions {
  Non_Prof = 0,
  Warrior = 1,
  Shaman = 2,
  Hunter = 3,
  Mage = 4,
  Druid = 5,
  Warlock = 6,
  Priest = 7,
  Paladin = 8,
  Rogue = 9
};
bool Professions_IsValid(int value);
const Professions Professions_MIN = Non_Prof;
const Professions Professions_MAX = Rogue;
const int Professions_ARRAYSIZE = Professions_MAX + 1;

const ::google::protobuf::EnumDescriptor* Professions_descriptor();
inline const ::std::string& Professions_Name(Professions value) {
  return ::google::protobuf::internal::NameOfEnum(
    Professions_descriptor(), value);
}
inline bool Professions_Parse(
    const ::std::string& name, Professions* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Professions>(
    Professions_descriptor(), name, value);
}
enum Talent {
  Non_Talent = 0,
  Warrior_Weapon = 1,
  Warrior_Rage = 2,
  Warrior_Armor = 3,
  Shaman_Element = 4,
  Shaman_Strenth = 5,
  Shaman_Cure = 6,
  Hunter_Beast = 7,
  Hunter_Shoot = 8,
  Hunter_Suivival = 9,
  Mage_Profound = 10,
  Mage_Ice = 11,
  Mage_Fire = 12,
  Druid_Cat = 13,
  Druid_Bear = 14,
  Druid_Cure = 15,
  Druid_Bird = 16,
  Warlock_Pain = 17,
  Warlock_Demon = 18,
  Warlock_Ruin = 19,
  Priest_Precept = 20,
  Priest_Holy = 21,
  Priest_Dark = 22,
  Paladin_Cure = 23,
  Paladin_Armor = 24,
  Paladin_Precept = 25,
  Rogue_Assassin = 26,
  Rogue_Fighter = 27,
  Rogue_Agile = 28
};
bool Talent_IsValid(int value);
const Talent Talent_MIN = Non_Talent;
const Talent Talent_MAX = Rogue_Agile;
const int Talent_ARRAYSIZE = Talent_MAX + 1;

const ::google::protobuf::EnumDescriptor* Talent_descriptor();
inline const ::std::string& Talent_Name(Talent value) {
  return ::google::protobuf::internal::NameOfEnum(
    Talent_descriptor(), value);
}
inline bool Talent_Parse(
    const ::std::string& name, Talent* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Talent>(
    Talent_descriptor(), name, value);
}
enum Gender {
  UNKNOWN = 1,
  MALE = 2,
  FEMAIL = 3
};
bool Gender_IsValid(int value);
const Gender Gender_MIN = UNKNOWN;
const Gender Gender_MAX = FEMAIL;
const int Gender_ARRAYSIZE = Gender_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gender_descriptor();
inline const ::std::string& Gender_Name(Gender value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gender_descriptor(), value);
}
inline bool Gender_Parse(
    const ::std::string& name, Gender* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gender>(
    Gender_descriptor(), name, value);
}
enum HeroPosition {
  PhysicalAttack = 0,
  MagicAttack = 1,
  Tank = 2,
  Nanny = 3,
  Max_Position = 4
};
bool HeroPosition_IsValid(int value);
const HeroPosition HeroPosition_MIN = PhysicalAttack;
const HeroPosition HeroPosition_MAX = Max_Position;
const int HeroPosition_ARRAYSIZE = HeroPosition_MAX + 1;

const ::google::protobuf::EnumDescriptor* HeroPosition_descriptor();
inline const ::std::string& HeroPosition_Name(HeroPosition value) {
  return ::google::protobuf::internal::NameOfEnum(
    HeroPosition_descriptor(), value);
}
inline bool HeroPosition_Parse(
    const ::std::string& name, HeroPosition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HeroPosition>(
    HeroPosition_descriptor(), name, value);
}
enum TokenType {
  Token_Invalid = 0,
  Token_Gold = 29910001,
  Token_Crystal = 29910002,
  Token_Honor = 29910003,
  Token_Reward = 29910004,
  Token_Day = 29910005,
  Token_BankGold = 29910006,
  Token_ExpPoint = 29910007,
  Token_Exp = 29910008,
  Token_Hero_Exp = 29910009,
  Token_Friend = 29910010,
  Token_Chivalrous = 29910011,
  Token_ColdExpPoint = 29910012,
  Token_GuildMoney = 29910013,
  Token_GuildContribute = 29910014,
  Token_GuildBonus = 29910015,
  Token_LawFul = 29910016,
  Token_FormationExp = 29910017
};
bool TokenType_IsValid(int value);
const TokenType TokenType_MIN = Token_Invalid;
const TokenType TokenType_MAX = Token_FormationExp;
const int TokenType_ARRAYSIZE = TokenType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TokenType_descriptor();
inline const ::std::string& TokenType_Name(TokenType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TokenType_descriptor(), value);
}
inline bool TokenType_Parse(
    const ::std::string& name, TokenType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TokenType>(
    TokenType_descriptor(), name, value);
}
enum GuildPosition {
  TRAINEE = 0,
  FOUR_GROUP = 1,
  THREE_GROUP = 2,
  SECOND_GROUP = 3,
  ONE_GROUP = 4,
  FOUR_LEADER = 5,
  THREE_LEADER = 6,
  SECOND_LEADER = 7,
  ONE_LEADER = 8,
  VICE_CHIEFTAIN = 9,
  CHIEFTAIN = 10
};
bool GuildPosition_IsValid(int value);
const GuildPosition GuildPosition_MIN = TRAINEE;
const GuildPosition GuildPosition_MAX = CHIEFTAIN;
const int GuildPosition_ARRAYSIZE = GuildPosition_MAX + 1;

const ::google::protobuf::EnumDescriptor* GuildPosition_descriptor();
inline const ::std::string& GuildPosition_Name(GuildPosition value) {
  return ::google::protobuf::internal::NameOfEnum(
    GuildPosition_descriptor(), value);
}
inline bool GuildPosition_Parse(
    const ::std::string& name, GuildPosition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GuildPosition>(
    GuildPosition_descriptor(), name, value);
}
enum GuildBuildType {
  GUILD_MAIN = 0,
  GUILD_CASHBOX = 1,
  GUILD_SHOP = 2,
  GUILD_STORAGE = 3
};
bool GuildBuildType_IsValid(int value);
const GuildBuildType GuildBuildType_MIN = GUILD_MAIN;
const GuildBuildType GuildBuildType_MAX = GUILD_STORAGE;
const int GuildBuildType_ARRAYSIZE = GuildBuildType_MAX + 1;

const ::google::protobuf::EnumDescriptor* GuildBuildType_descriptor();
inline const ::std::string& GuildBuildType_Name(GuildBuildType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GuildBuildType_descriptor(), value);
}
inline bool GuildBuildType_Parse(
    const ::std::string& name, GuildBuildType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GuildBuildType>(
    GuildBuildType_descriptor(), name, value);
}
enum GuildBattle_Stage {
  GuildBattle_Stage_None = 0,
  GuildBattle_Stage_Prepare = 1,
  GuildBattle_Stage_War = 2,
  GuildBattle_Stage_End = 3
};
bool GuildBattle_Stage_IsValid(int value);
const GuildBattle_Stage GuildBattle_Stage_MIN = GuildBattle_Stage_None;
const GuildBattle_Stage GuildBattle_Stage_MAX = GuildBattle_Stage_End;
const int GuildBattle_Stage_ARRAYSIZE = GuildBattle_Stage_MAX + 1;

const ::google::protobuf::EnumDescriptor* GuildBattle_Stage_descriptor();
inline const ::std::string& GuildBattle_Stage_Name(GuildBattle_Stage value) {
  return ::google::protobuf::internal::NameOfEnum(
    GuildBattle_Stage_descriptor(), value);
}
inline bool GuildBattle_Stage_Parse(
    const ::std::string& name, GuildBattle_Stage* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GuildBattle_Stage>(
    GuildBattle_Stage_descriptor(), name, value);
}
enum PlayerSceneStatus {
  NONE = 0,
  WAIT_FOR_ENTER = 1,
  READY_TO_ENTER = 2,
  IDEL = 3,
  MOVING = 4,
  CHANGE_SCENE = 5
};
bool PlayerSceneStatus_IsValid(int value);
const PlayerSceneStatus PlayerSceneStatus_MIN = NONE;
const PlayerSceneStatus PlayerSceneStatus_MAX = CHANGE_SCENE;
const int PlayerSceneStatus_ARRAYSIZE = PlayerSceneStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlayerSceneStatus_descriptor();
inline const ::std::string& PlayerSceneStatus_Name(PlayerSceneStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlayerSceneStatus_descriptor(), value);
}
inline bool PlayerSceneStatus_Parse(
    const ::std::string& name, PlayerSceneStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlayerSceneStatus>(
    PlayerSceneStatus_descriptor(), name, value);
}
enum RaidState {
  RaidInit = 0,
  RaidEnter = 1,
  RaidRunning = 2,
  RaidEnd = 3,
  ToDestroy = 4,
  DBLoading = 5
};
bool RaidState_IsValid(int value);
const RaidState RaidState_MIN = RaidInit;
const RaidState RaidState_MAX = DBLoading;
const int RaidState_ARRAYSIZE = RaidState_MAX + 1;

const ::google::protobuf::EnumDescriptor* RaidState_descriptor();
inline const ::std::string& RaidState_Name(RaidState value) {
  return ::google::protobuf::internal::NameOfEnum(
    RaidState_descriptor(), value);
}
inline bool RaidState_Parse(
    const ::std::string& name, RaidState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RaidState>(
    RaidState_descriptor(), name, value);
}
enum ResultOption {
  Default_Opt = -1,
  Item_Common = 0,
  Magical_Equip = 1,
  Sell_Item = 2,
  Bank_Option = 3,
  Scene_Enter = 4,
  Dismantle_Equip = 5,
  Enhance_Equips = 6,
  Gem_Compose = 7,
  Npc_Option = 8,
  Market_Option = 9,
  Equip_Refix = 10,
  ExpPoint_Option = 11,
  Team_Opt = 13,
  Chat = 14,
  Raid_Opt = 15,
  Mission_Opt = 16,
  Activity_Opt = 17,
  BATTLE = 18,
  Guild_Opt = 19,
  SCENE_STAGE = 20,
  OnHook_Opt = 21,
  ChallengeBoss = 22,
  CaptureStage_Opt = 23,
  Player_Loot = 24,
  Player_Draw = 25,
  WolrdBoss_Opt = 26,
  Hell_Opt = 27,
  ArenaOp = 28,
  Actor_Opt = 30,
  Upgrade_Relate = 31,
  Wear_Equip = 32,
  Friend_Opt = 33,
  BattleField_Opt = 34,
  Equip_Enchant = 35,
  Equip_EnchantSlot = 36,
  Equip_Inset = 37,
  Equip_Inherit = 38,
  Skill_Opt = 39,
  Message_Opt = 40
};
bool ResultOption_IsValid(int value);
const ResultOption ResultOption_MIN = Default_Opt;
const ResultOption ResultOption_MAX = Message_Opt;
const int ResultOption_ARRAYSIZE = ResultOption_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResultOption_descriptor();
inline const ::std::string& ResultOption_Name(ResultOption value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResultOption_descriptor(), value);
}
inline bool ResultOption_Parse(
    const ::std::string& name, ResultOption* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResultOption>(
    ResultOption_descriptor(), name, value);
}
enum ResultCode {
  UnknownError = -1,
  ResultOK = 0,
  BagIsFull = 1,
  GoldNotEnough = 2,
  CrystalNotEnough = 3,
  InvalidItem = 4,
  InvalidEquip = 5,
  RemoveItemFailed = 6,
  CostItemNotEnough = 7,
  InvalidConfigData = 8,
  EquipNotOnBody = 9,
  LevelLimit = 10,
  InvalidRace = 11,
  InvalidProfession = 12,
  InvalidTalent = 13,
  InvalidEquipType = 14,
  CountLimit = 15,
  InvalidContainerType = 16,
  SpaceIsFull = 17,
  InternalResult = 18,
  InvalidDestScene = 19,
  CantUseItem = 20,
  CoolDownLimit = 21,
  CantDestroyItem = 22,
  CantSellItem = 23,
  MaxLimit = 24,
  InvalidGem = 25,
  GemNotEnough = 26,
  GemComposeFailed = 27,
  NpcNotExist = 28,
  NpcLock = 29,
  TokenHonorNotEnough = 30,
  TokenRewardNotEnough = 31,
  TokenDayNotEnough = 32,
  InvalidMarketData = 33,
  ItemIsLocked = 34,
  ExpPointLimit = 35,
  ColdExpPointNotEnough = 36,
  InvalidNpcPosition = 37,
  InvalidMissionPosition = 38,
  CreateRaidFailed = 39,
  InvalidMission = 40,
  LimitedScene = 41,
  PlayerNoExist = 42,
  InvalidMissionData = 43,
  DiffMissionProcess = 44,
  SyncMissionFailed = 45,
  ActivityRewardBoxDone = 46,
  InvalidDrowGroup = 47,
  InvalidDrawType = 48,
  InvalidDrawConfigData = 49,
  MemenberTempLeave = 50,
  Team_In = 51,
  Team_Out = 52,
  Team_Exist = 53,
  Team_NoExist = 54,
  Team_NotLeader = 55,
  Team_Full = 56,
  Team_InApply = 57,
  Team_LimitLevel = 58,
  Team_NotPurpose = 59,
  Team_NotHeroPostion = 60,
  InspireFailed = 61,
  SingleLimit = 62,
  MemberNotEnough = 63,
  InvalidPosition = 64,
  ColorMax = 65,
  MissionCountLimit = 66,
  NoActor = 67,
  InvalidColor = 68,
  InvalidNpcOption = 69,
  Chat_CD = 70,
  Chat_WordLevel = 71,
  SETTING_UNACCEPTABLE = 72,
  NoBattle = 73,
  ReachPos = 74,
  OnHookMove = 75,
  OnHookBattle = 76,
  InvalidTargetPlayer = 77,
  ActorIsDead = 78,
  Guild_NoExist = 80,
  Guild_Full = 81,
  Guild_Have = 82,
  Guild_HaveDonation = 83,
  Guild_Notchieftain = 84,
  Guild_CDKNotEnough = 85,
  Guild_HaveCDK = 86,
  Guild_BuildLevelNotEnough = 87,
  Guild_BuildLevelMore = 88,
  Guild_MoneyNotEnough = 89,
  Guild_PracticePlayerlevel = 90,
  Guild_PracticeGuildlevel = 91,
  BattleCreateFailed = 92,
  ChallengeTimeLimit = 94,
  Wrong_Scene = 95,
  Wrong_Status = 96,
  HookStartOK = 97,
  HookEndOK = 98,
  BattleEnd = 99,
  HookRefreshOK = 100,
  JoinRoomFailed = 101,
  InvalidPlayerData = 102,
  NotJoinRoom = 103,
  BattleFieldOver = 104,
  RoomIsFull = 105,
  InvalidBFCamp = 106,
  SCENE_STAGE_NO_TAX = 120,
  Wait_Loading = 121,
  Win = 122,
  Lost = 123,
  SCENE_STAGE_TAX_COLLECT_OK = 124,
  SameScene = 125,
  TargetInBattle = 126,
  InvalidFormData = 127,
  InvalidBattleGroup = 128,
  InvalidBattleState = 129,
  Activity_NotStart = 130,
  Invalid_Request = 131,
  InvalidSceneStage = 132,
  TimeOut = 133,
  NoFlag = 134,
  InvalidName = 135,
  TimesLimit = 136,
  RewardAlready = 137,
  Guild_InApplyList = 140,
  Guild_DuplicateName = 141,
  Guild_BossDead = 142,
  Guild_LevelUpCD = 143,
  Guild_NoHave = 144,
  Scene_Level_Too_Low = 200,
  Target_Max_Loot_Count = 201,
  Self_Max_Loot_Count = 202,
  Target_In_Protect = 203,
  Target_Dismatch = 204,
  Target_Challenge_Done = 205,
  Target_Busy = 206,
  Team_TargetLevelLimitTen = 230,
  Team_LevelLimitTen = 231,
  Team_CreateResultOK = 232,
  Team_TargetHave = 233,
  Team_CreateInBattle = 234,
  Team_InBattleOpt = 235,
  Guild_Battle_NoOpen = 250,
  Guild_Battle_NoEnter = 251,
  Guild_Battle_NoOpponent = 252,
  Guild_Battle_NoQualify = 253,
  Guild_Battle_Stop = 254,
  FRIEND_SUCCESS = 301,
  FRIEND_FULL = 302,
  ADD_SELF_FRIEND = 303,
  PLAYER_IS_FRIEND = 304,
  FRIEND_NOTEXIST = 305,
  PLAYER_OFFLINE = 306,
  PLAYER_NOTEXIST = 307,
  PLAYER_NOTONLINE = 310,
  MESSAGE_NOT_EXIT = 311,
  MISSION_NOT_EXIT = 312,
  InvalidMissionType = 350,
  DropLimit = 351,
  InvalidMissionState = 352,
  InvalidMissionId = 353,
  InvalidFinishType = 354,
  InvalidPlayer = 355,
  NoMoreMission = 356,
  InvalidItemType = 357,
  InvalidSlot = 358,
  SlotOpened = 359,
  BatchEnchantFirst = 360,
  InvalidIndex = 361,
  MountAreadyGet = 362,
  MountIsLocked = 363,
  MountLimited = 364,
  RewardConditionLimit = 365,
  LuaScriptException = 366,
  InvalidPlayerName = 367,
  DuplicatePlayerName = 368,
  InvalidPlayerConfig = 369,
  CreatePlayerOk = 370,
  MaxLevel = 371,
  InvalidSkill = 372,
  RewardLimit = 373,
  GameServerBusy = 374,
  Bind_Actor = 375,
  TeamGroupLimit = 376
};
bool ResultCode_IsValid(int value);
const ResultCode ResultCode_MIN = UnknownError;
const ResultCode ResultCode_MAX = TeamGroupLimit;
const int ResultCode_ARRAYSIZE = ResultCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResultCode_descriptor();
inline const ::std::string& ResultCode_Name(ResultCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResultCode_descriptor(), value);
}
inline bool ResultCode_Parse(
    const ::std::string& name, ResultCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResultCode>(
    ResultCode_descriptor(), name, value);
}
enum NpcSourceType {
  InvalidSourceType = -1,
  PlayerMission = 0,
  ScenePublic = 1,
  BurningUnion = 2
};
bool NpcSourceType_IsValid(int value);
const NpcSourceType NpcSourceType_MIN = InvalidSourceType;
const NpcSourceType NpcSourceType_MAX = BurningUnion;
const int NpcSourceType_ARRAYSIZE = NpcSourceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NpcSourceType_descriptor();
inline const ::std::string& NpcSourceType_Name(NpcSourceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NpcSourceType_descriptor(), value);
}
inline bool NpcSourceType_Parse(
    const ::std::string& name, NpcSourceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NpcSourceType>(
    NpcSourceType_descriptor(), name, value);
}
enum NpcOption {
  NpcAdd = 0,
  NpcDel = 1,
  NpcUpdate = 2
};
bool NpcOption_IsValid(int value);
const NpcOption NpcOption_MIN = NpcAdd;
const NpcOption NpcOption_MAX = NpcUpdate;
const int NpcOption_ARRAYSIZE = NpcOption_MAX + 1;

const ::google::protobuf::EnumDescriptor* NpcOption_descriptor();
inline const ::std::string& NpcOption_Name(NpcOption value) {
  return ::google::protobuf::internal::NameOfEnum(
    NpcOption_descriptor(), value);
}
inline bool NpcOption_Parse(
    const ::std::string& name, NpcOption* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NpcOption>(
    NpcOption_descriptor(), name, value);
}
enum BattleFieldState {
  bf_state_invalid = -1,
  bf_state_inroom = 1,
  bf_state_room_waiting = 2,
  bf_state_inbattle = 3,
  bf_state_battle_waiting = 4,
  bf_state_wait_leave = 5,
  bf_state_disagree = 6
};
bool BattleFieldState_IsValid(int value);
const BattleFieldState BattleFieldState_MIN = bf_state_invalid;
const BattleFieldState BattleFieldState_MAX = bf_state_disagree;
const int BattleFieldState_ARRAYSIZE = BattleFieldState_MAX + 1;

const ::google::protobuf::EnumDescriptor* BattleFieldState_descriptor();
inline const ::std::string& BattleFieldState_Name(BattleFieldState value) {
  return ::google::protobuf::internal::NameOfEnum(
    BattleFieldState_descriptor(), value);
}
inline bool BattleFieldState_Parse(
    const ::std::string& name, BattleFieldState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BattleFieldState>(
    BattleFieldState_descriptor(), name, value);
}
enum FlagOption {
  BeginPick = 0,
  CancelPick = 1,
  SuccessPick = 2,
  FlagDrop = 3
};
bool FlagOption_IsValid(int value);
const FlagOption FlagOption_MIN = BeginPick;
const FlagOption FlagOption_MAX = FlagDrop;
const int FlagOption_ARRAYSIZE = FlagOption_MAX + 1;

const ::google::protobuf::EnumDescriptor* FlagOption_descriptor();
inline const ::std::string& FlagOption_Name(FlagOption value) {
  return ::google::protobuf::internal::NameOfEnum(
    FlagOption_descriptor(), value);
}
inline bool FlagOption_Parse(
    const ::std::string& name, FlagOption* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FlagOption>(
    FlagOption_descriptor(), name, value);
}
enum RankGroup {
  Rank_FightValue = 1,
  Rank_Arena = 2,
  Rank_FormationFightValue = 3,
  Rank_Tower = 4,
  Rank_Level = 5
};
bool RankGroup_IsValid(int value);
const RankGroup RankGroup_MIN = Rank_FightValue;
const RankGroup RankGroup_MAX = Rank_Level;
const int RankGroup_ARRAYSIZE = RankGroup_MAX + 1;

const ::google::protobuf::EnumDescriptor* RankGroup_descriptor();
inline const ::std::string& RankGroup_Name(RankGroup value) {
  return ::google::protobuf::internal::NameOfEnum(
    RankGroup_descriptor(), value);
}
inline bool RankGroup_Parse(
    const ::std::string& name, RankGroup* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RankGroup>(
    RankGroup_descriptor(), name, value);
}
enum SimpleImpactEffectType {
  EF_InvalidType = -1,
  EF_PlayerSpeed = 1,
  EF_ActorAttribute = 2,
  EF_PlayerSpecial = 3,
  EF_ActorSpecial = 4,
  EF_PlayerLackeys = 5
};
bool SimpleImpactEffectType_IsValid(int value);
const SimpleImpactEffectType SimpleImpactEffectType_MIN = EF_InvalidType;
const SimpleImpactEffectType SimpleImpactEffectType_MAX = EF_PlayerLackeys;
const int SimpleImpactEffectType_ARRAYSIZE = SimpleImpactEffectType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SimpleImpactEffectType_descriptor();
inline const ::std::string& SimpleImpactEffectType_Name(SimpleImpactEffectType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SimpleImpactEffectType_descriptor(), value);
}
inline bool SimpleImpactEffectType_Parse(
    const ::std::string& name, SimpleImpactEffectType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SimpleImpactEffectType>(
    SimpleImpactEffectType_descriptor(), name, value);
}
enum BattleGroundStatus {
  WAIT = 0,
  FIGHTING = 1,
  PAUSE = 2,
  WAIT_TO_END = 3,
  END = 4,
  NEXT = 5,
  RECYCLE = 6
};
bool BattleGroundStatus_IsValid(int value);
const BattleGroundStatus BattleGroundStatus_MIN = WAIT;
const BattleGroundStatus BattleGroundStatus_MAX = RECYCLE;
const int BattleGroundStatus_ARRAYSIZE = BattleGroundStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* BattleGroundStatus_descriptor();
inline const ::std::string& BattleGroundStatus_Name(BattleGroundStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    BattleGroundStatus_descriptor(), value);
}
inline bool BattleGroundStatus_Parse(
    const ::std::string& name, BattleGroundStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BattleGroundStatus>(
    BattleGroundStatus_descriptor(), name, value);
}
enum CaptureStatus {
  CS_INITED = 0,
  CS_LOAD_FIGHTING_DATA = 1,
  CS_DECLARE_WAR = 2,
  CS_FIGHTING = 3,
  CS_PROTECT = 4
};
bool CaptureStatus_IsValid(int value);
const CaptureStatus CaptureStatus_MIN = CS_INITED;
const CaptureStatus CaptureStatus_MAX = CS_PROTECT;
const int CaptureStatus_ARRAYSIZE = CaptureStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* CaptureStatus_descriptor();
inline const ::std::string& CaptureStatus_Name(CaptureStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    CaptureStatus_descriptor(), value);
}
inline bool CaptureStatus_Parse(
    const ::std::string& name, CaptureStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CaptureStatus>(
    CaptureStatus_descriptor(), name, value);
}
enum StrongHoldStatus {
  SHS_IDLE = 0,
  SHS_FIGHTING = 1,
  SHS_ATTACKER_WIN = 2,
  SHS_DEFENDER_WIN = 3,
  SHS_ATTACKER_WIN_BYE = 4,
  SHS_DEFENDER_WIN_BYE = 5
};
bool StrongHoldStatus_IsValid(int value);
const StrongHoldStatus StrongHoldStatus_MIN = SHS_IDLE;
const StrongHoldStatus StrongHoldStatus_MAX = SHS_DEFENDER_WIN_BYE;
const int StrongHoldStatus_ARRAYSIZE = StrongHoldStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* StrongHoldStatus_descriptor();
inline const ::std::string& StrongHoldStatus_Name(StrongHoldStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    StrongHoldStatus_descriptor(), value);
}
inline bool StrongHoldStatus_Parse(
    const ::std::string& name, StrongHoldStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StrongHoldStatus>(
    StrongHoldStatus_descriptor(), name, value);
}
enum SkillBuffStubType {
  after_do_dodge_stub_func = 0,
  after_do_critical_stub_func = 1,
  after_battle_start_stub_func = 2,
  before_battle_start_stub_func = 3,
  after_source_value_calc_stub_func = 4,
  target_after_source_value_calc_stub_func = 5,
  target_after_target_value_calc_stub_func = 6,
  after_target_value_calc_stub_func = 7,
  after_source_critical_etc_value_calc_stub_func = 8,
  before_buff_add_stub_func = 9,
  after_buff_add_stub_func = 10,
  on_time_elapse_stub_func = 11,
  after_control_prob_calc_stub_func = 12,
  after_target_critical_etc_value_calc_stub_func = 13,
  after_be_cure_stub_func = 14,
  before_be_cure_stub_func = 15,
  before_do_cure_stub_func = 16,
  after_do_cure_stub_func = 17,
  before_be_damage_stub_func = 18,
  after_be_damage_stub_func = 19,
  before_do_damage_stub_func = 20,
  after_do_damage_stub_func = 21,
  after_be_dodge_stub_func = 22,
  after_be_critical_stub_func = 23,
  after_calc_critical_percent_stub_func = 24,
  after_calc_dodge_percent_stub_func = 25,
  after_select_skill_stub_func = 26,
  after_hp_change_stub_func = 27,
  combo_point_overflow_stub_func = 28,
  after_use_active_skill_stub_func = 29,
  before_dead_stub_func = 30,
  actor_use_long_time_skill_stub_func = 31,
  max_skill_buff_stub_type = 32
};
bool SkillBuffStubType_IsValid(int value);
const SkillBuffStubType SkillBuffStubType_MIN = after_do_dodge_stub_func;
const SkillBuffStubType SkillBuffStubType_MAX = max_skill_buff_stub_type;
const int SkillBuffStubType_ARRAYSIZE = SkillBuffStubType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SkillBuffStubType_descriptor();
inline const ::std::string& SkillBuffStubType_Name(SkillBuffStubType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SkillBuffStubType_descriptor(), value);
}
inline bool SkillBuffStubType_Parse(
    const ::std::string& name, SkillBuffStubType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SkillBuffStubType>(
    SkillBuffStubType_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::PlayerTeamStatus>() {
  return ::Packet::PlayerTeamStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::ActorType>() {
  return ::Packet::ActorType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::BattleActorType>() {
  return ::Packet::BattleActorType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::LastHpType>() {
  return ::Packet::LastHpType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::ActorStar>() {
  return ::Packet::ActorStar_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::ActorColor>() {
  return ::Packet::ActorColor_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::ActorBattleType>() {
  return ::Packet::ActorBattleType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::ActorFigthFormation>() {
  return ::Packet::ActorFigthFormation_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::DamageType>() {
  return ::Packet::DamageType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::DamageExpression>() {
  return ::Packet::DamageExpression_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::SkillPositionLogicType>() {
  return ::Packet::SkillPositionLogicType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::BattleGroundType>() {
  return ::Packet::BattleGroundType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::BattleObjectType>() {
  return ::Packet::BattleObjectType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::ActorStateType>() {
  return ::Packet::ActorStateType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::ActorControlType>() {
  return ::Packet::ActorControlType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::Property>() {
  return ::Packet::Property_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::ChatChannel>() {
  return ::Packet::ChatChannel_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::CellLogicType>() {
  return ::Packet::CellLogicType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::NumberCellIndex>() {
  return ::Packet::NumberCellIndex_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::BitFlagCellIndex>() {
  return ::Packet::BitFlagCellIndex_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::MissionCellIndex>() {
  return ::Packet::MissionCellIndex_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::GuideCellIndex>() {
  return ::Packet::GuideCellIndex_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::ActivityDataIndex>() {
  return ::Packet::ActivityDataIndex_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::AcRewardIndex>() {
  return ::Packet::AcRewardIndex_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::TargetDataIndex>() {
  return ::Packet::TargetDataIndex_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::ActionDataIndex>() {
  return ::Packet::ActionDataIndex_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::ResetTimeIndex>() {
  return ::Packet::ResetTimeIndex_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::Cell64LogicType>() {
  return ::Packet::Cell64LogicType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::LootCellIndex>() {
  return ::Packet::LootCellIndex_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::GuildUserCellIndex>() {
  return ::Packet::GuildUserCellIndex_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::NumberCell64Index>() {
  return ::Packet::NumberCell64Index_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::EquipBook64Index>() {
  return ::Packet::EquipBook64Index_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::ZoneCellIndex>() {
  return ::Packet::ZoneCellIndex_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::FriendMessageType>() {
  return ::Packet::FriendMessageType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::ContainerType>() {
  return ::Packet::ContainerType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::AccountType>() {
  return ::Packet::AccountType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::MissionState>() {
  return ::Packet::MissionState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::MissionOption>() {
  return ::Packet::MissionOption_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::MissionDB_Param>() {
  return ::Packet::MissionDB_Param_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::Camp>() {
  return ::Packet::Camp_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::ArrangeType>() {
  return ::Packet::ArrangeType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::Race>() {
  return ::Packet::Race_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::Professions>() {
  return ::Packet::Professions_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::Talent>() {
  return ::Packet::Talent_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::Gender>() {
  return ::Packet::Gender_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::HeroPosition>() {
  return ::Packet::HeroPosition_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::TokenType>() {
  return ::Packet::TokenType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::GuildPosition>() {
  return ::Packet::GuildPosition_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::GuildBuildType>() {
  return ::Packet::GuildBuildType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::GuildBattle_Stage>() {
  return ::Packet::GuildBattle_Stage_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::PlayerSceneStatus>() {
  return ::Packet::PlayerSceneStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::RaidState>() {
  return ::Packet::RaidState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::ResultOption>() {
  return ::Packet::ResultOption_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::ResultCode>() {
  return ::Packet::ResultCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::NpcSourceType>() {
  return ::Packet::NpcSourceType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::NpcOption>() {
  return ::Packet::NpcOption_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::BattleFieldState>() {
  return ::Packet::BattleFieldState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::FlagOption>() {
  return ::Packet::FlagOption_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::RankGroup>() {
  return ::Packet::RankGroup_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::SimpleImpactEffectType>() {
  return ::Packet::SimpleImpactEffectType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::BattleGroundStatus>() {
  return ::Packet::BattleGroundStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::CaptureStatus>() {
  return ::Packet::CaptureStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::StrongHoldStatus>() {
  return ::Packet::StrongHoldStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Packet::SkillBuffStubType>() {
  return ::Packet::SkillBuffStubType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AllPacketEnum_2eproto__INCLUDED
