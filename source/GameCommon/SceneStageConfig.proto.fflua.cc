// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneStageConfig.proto
#include "SceneStageConfig.pb.h"
#include "SceneStageConfig.proto.fflua.h"
namespace Config {
bool SceneStageConfig_fflua_reg(lua_State* state)
{
//for decltype
	SceneStageConfig* message(nullptr);
	message;
	ff::fflua_register_t<SceneStageConfig, ctor()>(state, "SceneStageConfig", "google::protobuf::Message")
		// required int32 id = 1;
		.def(&SceneStageConfig::id, "id")
		.def(&SceneStageConfig::set_id, "set_id")
		// required string name = 2;
		.def(&SceneStageConfig::name, "name")
		.def<void (SceneStageConfig::*)(const std::string&)>(&SceneStageConfig::set_name, "set_name")
		// required int32 min_level = 3;
		.def(&SceneStageConfig::min_level, "min_level")
		.def(&SceneStageConfig::set_min_level, "set_min_level")
		// repeated int32 pre_stages = 4;
		.def(&SceneStageConfig::pre_stages_size, "pre_stages_size")
		.def<decltype(message->pre_stages(0)) (SceneStageConfig::*)(int) const>(&SceneStageConfig::pre_stages, "pre_stages")
		.def<void(SceneStageConfig::*)(int, const decltype(message->pre_stages(0)))>(&SceneStageConfig::set_pre_stages, "set_pre_stages")
		.def(&SceneStageConfig::add_pre_stages, "add_pre_stages")
		// required int32 scene_id = 5;
		.def(&SceneStageConfig::scene_id, "scene_id")
		.def(&SceneStageConfig::set_scene_id, "set_scene_id")
		// required string rewards = 6;
		.def(&SceneStageConfig::rewards, "rewards")
		.def<void (SceneStageConfig::*)(const std::string&)>(&SceneStageConfig::set_rewards, "set_rewards")
		// required int32 refresh_time = 7;
		.def(&SceneStageConfig::refresh_time, "refresh_time")
		.def(&SceneStageConfig::set_refresh_time, "set_refresh_time")
		// required int32 raid_count = 8;
		.def(&SceneStageConfig::raid_count, "raid_count")
		.def(&SceneStageConfig::set_raid_count, "set_raid_count")
		// required int32 rush_count = 9;
		.def(&SceneStageConfig::rush_count, "rush_count")
		.def(&SceneStageConfig::set_rush_count, "set_rush_count")
		// repeated int32 normal_monsters = 10;
		.def(&SceneStageConfig::normal_monsters_size, "normal_monsters_size")
		.def<decltype(message->normal_monsters(0)) (SceneStageConfig::*)(int) const>(&SceneStageConfig::normal_monsters, "normal_monsters")
		.def<void(SceneStageConfig::*)(int, const decltype(message->normal_monsters(0)))>(&SceneStageConfig::set_normal_monsters, "set_normal_monsters")
		.def(&SceneStageConfig::add_normal_monsters, "add_normal_monsters")
		// repeated int32 bosses = 11;
		.def(&SceneStageConfig::bosses_size, "bosses_size")
		.def<decltype(message->bosses(0)) (SceneStageConfig::*)(int) const>(&SceneStageConfig::bosses, "bosses")
		.def<void(SceneStageConfig::*)(int, const decltype(message->bosses(0)))>(&SceneStageConfig::set_bosses, "set_bosses")
		.def(&SceneStageConfig::add_bosses, "add_bosses")
		// required int32 guard_id = 12;
		.def(&SceneStageConfig::guard_id, "guard_id")
		.def(&SceneStageConfig::set_guard_id, "set_guard_id")
		// required int32 first_drop = 13;
		.def(&SceneStageConfig::first_drop, "first_drop")
		.def(&SceneStageConfig::set_first_drop, "set_first_drop")
		// required int32 camp = 14;
		.def(&SceneStageConfig::camp, "camp")
		.def(&SceneStageConfig::set_camp, "set_camp")
		// required int32 can_captrue = 15;
		.def(&SceneStageConfig::can_captrue, "can_captrue")
		.def(&SceneStageConfig::set_can_captrue, "set_can_captrue")
		// required int32 group = 16;
		.def(&SceneStageConfig::group, "group")
		.def(&SceneStageConfig::set_group, "set_group")
		// required int32 can_guild_capture = 17;
		.def(&SceneStageConfig::can_guild_capture, "can_guild_capture")
		.def(&SceneStageConfig::set_can_guild_capture, "set_can_guild_capture")
		// required int32 guild_capture_boss = 18;
		.def(&SceneStageConfig::guild_capture_boss, "guild_capture_boss")
		.def(&SceneStageConfig::set_guild_capture_boss, "set_guild_capture_boss")
		// required int32 monster_id = 19;
		.def(&SceneStageConfig::monster_id, "monster_id")
		.def(&SceneStageConfig::set_monster_id, "set_monster_id")
		// required int32 max_exp_pre_min = 20;
		.def(&SceneStageConfig::max_exp_pre_min, "max_exp_pre_min")
		.def(&SceneStageConfig::set_max_exp_pre_min, "set_max_exp_pre_min")
		// required int32 max_gold_pre_min = 21;
		.def(&SceneStageConfig::max_gold_pre_min, "max_gold_pre_min")
		.def(&SceneStageConfig::set_max_gold_pre_min, "set_max_gold_pre_min")
		// required int32 avg_run_time = 22;
		.def(&SceneStageConfig::avg_run_time, "avg_run_time")
		.def(&SceneStageConfig::set_avg_run_time, "set_avg_run_time")
		// required int32 avg_fight_time = 23;
		.def(&SceneStageConfig::avg_fight_time, "avg_fight_time")
		.def(&SceneStageConfig::set_avg_fight_time, "set_avg_fight_time")
		// required int32 tax_broadcast_mark = 24;
		.def(&SceneStageConfig::tax_broadcast_mark, "tax_broadcast_mark")
		.def(&SceneStageConfig::set_tax_broadcast_mark, "set_tax_broadcast_mark")
		// required int32 guild_tax_broadcat_mark = 25;
		.def(&SceneStageConfig::guild_tax_broadcat_mark, "guild_tax_broadcat_mark")
		.def(&SceneStageConfig::set_guild_tax_broadcat_mark, "set_guild_tax_broadcat_mark")
		.def(&SceneStageConfig::ByteSize, "ByteSize")
		.def(&SceneStageConfig::SetInitialized, "SetInitialized")
		;
	return true;
}
bool SceneStageConfig_fflua_regist_all(lua_State* state)
{
	SceneStageConfig_fflua_reg(state);
	return true;
}
}
