// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneObject.proto
#include "SceneObject.pb.h"
#include "SceneObject.proto.fflua.h"
namespace Packet {
bool SceneLayout_fflua_reg(lua_State* state)
{
//for decltype
	SceneLayout* message(nullptr);
	message;
	ff::fflua_register_t<SceneLayout, ctor()>(state, "SceneLayout", "google::protobuf::Message")
		// required int32 id = 1;
		.def(&SceneLayout::id, "id")
		.def(&SceneLayout::set_id, "set_id")
		// required int32 scene_id = 2;
		.def(&SceneLayout::scene_id, "scene_id")
		.def(&SceneLayout::set_scene_id, "set_scene_id")
		// required .Packet.Position position = 3;
		.def(&SceneLayout::position, "position")
		.def(&SceneLayout::mutable_position, "mutable_position")
		// required float angle = 4;
		.def(&SceneLayout::angle, "angle")
		.def(&SceneLayout::set_angle, "set_angle")
		// required int32 group_index = 5;
		.def(&SceneLayout::group_index, "group_index")
		.def(&SceneLayout::set_group_index, "set_group_index")
		.def(&SceneLayout::ByteSize, "ByteSize")
		.def(&SceneLayout::SetInitialized, "SetInitialized")
		;
	return true;
}
bool NpcStaticConfig_fflua_reg(lua_State* state)
{
//for decltype
	NpcStaticConfig* message(nullptr);
	message;
	ff::fflua_register_t<NpcStaticConfig, ctor()>(state, "NpcStaticConfig", "google::protobuf::Message")
		// required int32 index = 1;
		.def(&NpcStaticConfig::index, "index")
		.def(&NpcStaticConfig::set_index, "set_index")
		// required int32 npc_id = 2;
		.def(&NpcStaticConfig::npc_id, "npc_id")
		.def(&NpcStaticConfig::set_npc_id, "set_npc_id")
		// required int32 pos_id = 3;
		.def(&NpcStaticConfig::pos_id, "pos_id")
		.def(&NpcStaticConfig::set_pos_id, "set_pos_id")
		// repeated string talk_option = 4;
		.def(&NpcStaticConfig::talk_option_size, "talk_option_size")
		.def<const std::string& (NpcStaticConfig::*)(int) const>(&NpcStaticConfig::talk_option, "talk_option")
		.def<void (NpcStaticConfig::*)(int, const std::string&)>(&NpcStaticConfig::set_talk_option, "set_talk_option")
		.def<void (NpcStaticConfig::*)(const std::string&)>(&NpcStaticConfig::add_talk_option, "add_talk_option")
		.def(&NpcStaticConfig::ByteSize, "ByteSize")
		.def(&NpcStaticConfig::SetInitialized, "SetInitialized")
		;
	return true;
}
bool NpcDynamicConfig_fflua_reg(lua_State* state)
{
//for decltype
	NpcDynamicConfig* message(nullptr);
	message;
	ff::fflua_register_t<NpcDynamicConfig, ctor()>(state, "NpcDynamicConfig", "google::protobuf::Message")
		// required int32 index = 1;
		.def(&NpcDynamicConfig::index, "index")
		.def(&NpcDynamicConfig::set_index, "set_index")
		// required int32 group_id = 2;
		.def(&NpcDynamicConfig::group_id, "group_id")
		.def(&NpcDynamicConfig::set_group_id, "set_group_id")
		// required int32 npc_id = 3;
		.def(&NpcDynamicConfig::npc_id, "npc_id")
		.def(&NpcDynamicConfig::set_npc_id, "set_npc_id")
		// repeated int32 monster_group = 4;
		.def(&NpcDynamicConfig::monster_group_size, "monster_group_size")
		.def<decltype(message->monster_group(0)) (NpcDynamicConfig::*)(int) const>(&NpcDynamicConfig::monster_group, "monster_group")
		.def<void(NpcDynamicConfig::*)(int, const decltype(message->monster_group(0)))>(&NpcDynamicConfig::set_monster_group, "set_monster_group")
		.def(&NpcDynamicConfig::add_monster_group, "add_monster_group")
		// repeated string talk_option = 5;
		.def(&NpcDynamicConfig::talk_option_size, "talk_option_size")
		.def<const std::string& (NpcDynamicConfig::*)(int) const>(&NpcDynamicConfig::talk_option, "talk_option")
		.def<void (NpcDynamicConfig::*)(int, const std::string&)>(&NpcDynamicConfig::set_talk_option, "set_talk_option")
		.def<void (NpcDynamicConfig::*)(const std::string&)>(&NpcDynamicConfig::add_talk_option, "add_talk_option")
		// required string npc_tag = 6;
		.def(&NpcDynamicConfig::npc_tag, "npc_tag")
		.def<void (NpcDynamicConfig::*)(const std::string&)>(&NpcDynamicConfig::set_npc_tag, "set_npc_tag")
		// required int32 pos_id = 7;
		.def(&NpcDynamicConfig::pos_id, "pos_id")
		.def(&NpcDynamicConfig::set_pos_id, "set_pos_id")
		.def(&NpcDynamicConfig::ByteSize, "ByteSize")
		.def(&NpcDynamicConfig::SetInitialized, "SetInitialized")
		;
	return true;
}
bool PositionGroupConfig_fflua_reg(lua_State* state)
{
//for decltype
	PositionGroupConfig* message(nullptr);
	message;
	ff::fflua_register_t<PositionGroupConfig, ctor()>(state, "PositionGroupConfig", "google::protobuf::Message")
		// required int32 group_id = 1;
		.def(&PositionGroupConfig::group_id, "group_id")
		.def(&PositionGroupConfig::set_group_id, "set_group_id")
		// required int32 pos_id = 2;
		.def(&PositionGroupConfig::pos_id, "pos_id")
		.def(&PositionGroupConfig::set_pos_id, "set_pos_id")
		.def(&PositionGroupConfig::ByteSize, "ByteSize")
		.def(&PositionGroupConfig::SetInitialized, "SetInitialized")
		;
	return true;
}
bool NpcInfo_fflua_reg(lua_State* state)
{
//for decltype
	NpcInfo* message(nullptr);
	message;
	ff::fflua_register_t<NpcInfo, ctor()>(state, "NpcInfo", "google::protobuf::Message")
		// required int32 index = 1;
		.def(&NpcInfo::index, "index")
		.def(&NpcInfo::set_index, "set_index")
		// required int32 pos_id = 2;
		.def(&NpcInfo::pos_id, "pos_id")
		.def(&NpcInfo::set_pos_id, "set_pos_id")
		// required int32 series_id = 3;
		.def(&NpcInfo::series_id, "series_id")
		.def(&NpcInfo::set_series_id, "set_series_id")
		// required int32 lifetime = 4;
		.def(&NpcInfo::lifetime, "lifetime")
		.def(&NpcInfo::set_lifetime, "set_lifetime")
		.def(&NpcInfo::ByteSize, "ByteSize")
		.def(&NpcInfo::SetInitialized, "SetInitialized")
		;
	return true;
}
bool PlayerList_fflua_reg(lua_State* state)
{
//for decltype
	PlayerList* message(nullptr);
	message;
	ff::fflua_register_t<PlayerList, ctor()>(state, "PlayerList", "google::protobuf::Message")
		// repeated .Packet.PlayerBasicInfo player_info = 1;
		.def(&PlayerList::player_info_size, "player_info_size")
		.def<decltype(message->player_info(0)) (PlayerList::*)(int) const>(&PlayerList::player_info, "player_info")
		.def<decltype(message->mutable_player_info(0)) (PlayerList::*)(int)>(&PlayerList::mutable_player_info, "mutable_player_info")
		.def(&PlayerList::add_player_info, "add_player_info")
		.def(&PlayerList::ByteSize, "ByteSize")
		.def(&PlayerList::SetInitialized, "SetInitialized")
		;
	return true;
}
bool NpcList_fflua_reg(lua_State* state)
{
//for decltype
	NpcList* message(nullptr);
	message;
	ff::fflua_register_t<NpcList, ctor()>(state, "NpcList", "google::protobuf::Message")
		// repeated .Packet.NpcInfo npc_info = 1;
		.def(&NpcList::npc_info_size, "npc_info_size")
		.def<decltype(message->npc_info(0)) (NpcList::*)(int) const>(&NpcList::npc_info, "npc_info")
		.def<decltype(message->mutable_npc_info(0)) (NpcList::*)(int)>(&NpcList::mutable_npc_info, "mutable_npc_info")
		.def(&NpcList::add_npc_info, "add_npc_info")
		// required .Packet.NpcOption option = 2;
		.def(&NpcList::option, "option")
		.def(&NpcList::set_option, "set_option")
		.def(&NpcList::ByteSize, "ByteSize")
		.def(&NpcList::SetInitialized, "SetInitialized")
		;
	return true;
}
bool PlayerNpc_fflua_reg(lua_State* state)
{
//for decltype
	PlayerNpc* message(nullptr);
	message;
	ff::fflua_register_t<PlayerNpc, ctor()>(state, "PlayerNpc", "google::protobuf::Message")
		// required .DB.TrialTarget target = 1;
		.def(&PlayerNpc::target, "target")
		.def(&PlayerNpc::mutable_target, "mutable_target")
		.def(&PlayerNpc::ByteSize, "ByteSize")
		.def(&PlayerNpc::SetInitialized, "SetInitialized")
		;
	return true;
}
bool PlayerNpcList_fflua_reg(lua_State* state)
{
//for decltype
	PlayerNpcList* message(nullptr);
	message;
	ff::fflua_register_t<PlayerNpcList, ctor()>(state, "PlayerNpcList", "google::protobuf::Message")
		// repeated .Packet.PlayerNpc player_npc = 1;
		.def(&PlayerNpcList::player_npc_size, "player_npc_size")
		.def<decltype(message->player_npc(0)) (PlayerNpcList::*)(int) const>(&PlayerNpcList::player_npc, "player_npc")
		.def<decltype(message->mutable_player_npc(0)) (PlayerNpcList::*)(int)>(&PlayerNpcList::mutable_player_npc, "mutable_player_npc")
		.def(&PlayerNpcList::add_player_npc, "add_player_npc")
		// required .Packet.NpcOption option = 2;
		.def(&PlayerNpcList::option, "option")
		.def(&PlayerNpcList::set_option, "set_option")
		.def(&PlayerNpcList::ByteSize, "ByteSize")
		.def(&PlayerNpcList::SetInitialized, "SetInitialized")
		;
	return true;
}
bool NpcSession_fflua_reg(lua_State* state)
{
//for decltype
	NpcSession* message(nullptr);
	message;
	ff::fflua_register_t<NpcSession, ctor()>(state, "NpcSession", "google::protobuf::Message")
		// required int32 index = 1;
		.def(&NpcSession::index, "index")
		.def(&NpcSession::set_index, "set_index")
		// optional int32 series_id = 2;
		.def(&NpcSession::series_id, "series_id")
		.def(&NpcSession::set_series_id, "set_series_id")
		.def(&NpcSession::has_series_id, "has_series_id")
		// optional int32 mission_id = 3;
		.def(&NpcSession::mission_id, "mission_id")
		.def(&NpcSession::set_mission_id, "set_mission_id")
		.def(&NpcSession::has_mission_id, "has_mission_id")
		// optional .Packet.MissionOption option = 4;
		.def(&NpcSession::option, "option")
		.def(&NpcSession::set_option, "set_option")
		.def(&NpcSession::has_option, "has_option")
		// optional int32 option_index = 5;
		.def(&NpcSession::option_index, "option_index")
		.def(&NpcSession::set_option_index, "set_option_index")
		.def(&NpcSession::has_option_index, "has_option_index")
		.def(&NpcSession::ByteSize, "ByteSize")
		.def(&NpcSession::SetInitialized, "SetInitialized")
		;
	return true;
}
bool PlayerNpcSession_fflua_reg(lua_State* state)
{
//for decltype
	PlayerNpcSession* message(nullptr);
	message;
	ff::fflua_register_t<PlayerNpcSession, ctor()>(state, "PlayerNpcSession", "google::protobuf::Message")
		// required fixed64 target_guid = 1;
		.def(&PlayerNpcSession::target_guid, "target_guid")
		.def(&PlayerNpcSession::set_target_guid, "set_target_guid")
		// optional int32 option_index = 2;
		.def(&PlayerNpcSession::option_index, "option_index")
		.def(&PlayerNpcSession::set_option_index, "set_option_index")
		.def(&PlayerNpcSession::has_option_index, "has_option_index")
		.def(&PlayerNpcSession::ByteSize, "ByteSize")
		.def(&PlayerNpcSession::SetInitialized, "SetInitialized")
		;
	return true;
}
bool NpcSessionReply_fflua_reg(lua_State* state)
{
//for decltype
	NpcSessionReply* message(nullptr);
	message;
	ff::fflua_register_t<NpcSessionReply, ctor()>(state, "NpcSessionReply", "google::protobuf::Message")
		// required int32 index = 1;
		.def(&NpcSessionReply::index, "index")
		.def(&NpcSessionReply::set_index, "set_index")
		// required string msg_name = 2;
		.def(&NpcSessionReply::msg_name, "msg_name")
		.def<void (NpcSessionReply::*)(const std::string&)>(&NpcSessionReply::set_msg_name, "set_msg_name")
		// optional string string_param = 3;
		.def(&NpcSessionReply::string_param, "string_param")
		.def<void (NpcSessionReply::*)(const std::string&)>(&NpcSessionReply::set_string_param, "set_string_param")
		.def(&NpcSessionReply::has_string_param, "has_string_param")
		// optional int32 int_param = 4;
		.def(&NpcSessionReply::int_param, "int_param")
		.def(&NpcSessionReply::set_int_param, "set_int_param")
		.def(&NpcSessionReply::has_int_param, "has_int_param")
		.def(&NpcSessionReply::ByteSize, "ByteSize")
		.def(&NpcSessionReply::SetInitialized, "SetInitialized")
		;
	return true;
}
bool NoNpcSession_fflua_reg(lua_State* state)
{
//for decltype
	NoNpcSession* message(nullptr);
	message;
	ff::fflua_register_t<NoNpcSession, ctor()>(state, "NoNpcSession", "google::protobuf::Message")
		// required string string_param = 1;
		.def(&NoNpcSession::string_param, "string_param")
		.def<void (NoNpcSession::*)(const std::string&)>(&NoNpcSession::set_string_param, "set_string_param")
		// required fixed64 long_param = 2;
		.def(&NoNpcSession::long_param, "long_param")
		.def(&NoNpcSession::set_long_param, "set_long_param")
		// required int32 int_param = 3;
		.def(&NoNpcSession::int_param, "int_param")
		.def(&NoNpcSession::set_int_param, "set_int_param")
		.def(&NoNpcSession::ByteSize, "ByteSize")
		.def(&NoNpcSession::SetInitialized, "SetInitialized")
		;
	return true;
}
bool MountConfig_fflua_reg(lua_State* state)
{
//for decltype
	MountConfig* message(nullptr);
	message;
	ff::fflua_register_t<MountConfig, ctor()>(state, "MountConfig", "google::protobuf::Message")
		// required int32 id = 1;
		.def(&MountConfig::id, "id")
		.def(&MountConfig::set_id, "set_id")
		// required int32 speed = 2;
		.def(&MountConfig::speed, "speed")
		.def(&MountConfig::set_speed, "set_speed")
		// required int32 impact_id = 3;
		.def(&MountConfig::impact_id, "impact_id")
		.def(&MountConfig::set_impact_id, "set_impact_id")
		.def(&MountConfig::ByteSize, "ByteSize")
		.def(&MountConfig::SetInitialized, "SetInitialized")
		;
	return true;
}
bool SceneObject_fflua_regist_all(lua_State* state)
{
	SceneLayout_fflua_reg(state);
	NpcStaticConfig_fflua_reg(state);
	NpcDynamicConfig_fflua_reg(state);
	PositionGroupConfig_fflua_reg(state);
	NpcInfo_fflua_reg(state);
	PlayerList_fflua_reg(state);
	NpcList_fflua_reg(state);
	PlayerNpc_fflua_reg(state);
	PlayerNpcList_fflua_reg(state);
	NpcSession_fflua_reg(state);
	PlayerNpcSession_fflua_reg(state);
	NpcSessionReply_fflua_reg(state);
	NoNpcSession_fflua_reg(state);
	MountConfig_fflua_reg(state);
	return true;
}
}
