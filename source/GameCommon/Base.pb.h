// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Base.proto

#ifndef PROTOBUF_Base_2eproto__INCLUDED
#define PROTOBUF_Base_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ProtoBufOption.pb.h"
// @@protoc_insertion_point(includes)

namespace Packet {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Base_2eproto();
void protobuf_AssignDesc_Base_2eproto();
void protobuf_ShutdownFile_Base_2eproto();

class Position;
class Notify;
class ShmHead;
class ServerInfo;
class PayOrderInfo;
class LuaFile;
class LuaFilesReply;
class OperativeConfig;
class OperativeConfigReply;

// ===================================================================

class Position : public ::google::protobuf::Message {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Position& default_instance();

  void Swap(Position* other);

  // implements Message ----------------------------------------------

  Position* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // required int32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // required int32 z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline ::google::protobuf::int32 z() const;
  inline void set_z(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.Position)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 z_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Base_2eproto();
  friend void protobuf_AssignDesc_Base_2eproto();
  friend void protobuf_ShutdownFile_Base_2eproto();

  void InitAsDefaultInstance();
  static Position* default_instance_;
};
// -------------------------------------------------------------------

class Notify : public ::google::protobuf::Message {
 public:
  Notify();
  virtual ~Notify();

  Notify(const Notify& from);

  inline Notify& operator=(const Notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Notify& default_instance();

  void Swap(Notify* other);

  // implements Message ----------------------------------------------

  Notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Notify& from);
  void MergeFrom(const Notify& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string notify = 1;
  inline bool has_notify() const;
  inline void clear_notify();
  static const int kNotifyFieldNumber = 1;
  inline const ::std::string& notify() const;
  inline void set_notify(const ::std::string& value);
  inline void set_notify(const char* value);
  inline void set_notify(const char* value, size_t size);
  inline ::std::string* mutable_notify();
  inline ::std::string* release_notify();
  inline void set_allocated_notify(::std::string* notify);

  // optional int32 show_type = 2;
  inline bool has_show_type() const;
  inline void clear_show_type();
  static const int kShowTypeFieldNumber = 2;
  inline ::google::protobuf::int32 show_type() const;
  inline void set_show_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.Notify)
 private:
  inline void set_has_notify();
  inline void clear_has_notify();
  inline void set_has_show_type();
  inline void clear_has_show_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* notify_;
  ::google::protobuf::int32 show_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Base_2eproto();
  friend void protobuf_AssignDesc_Base_2eproto();
  friend void protobuf_ShutdownFile_Base_2eproto();

  void InitAsDefaultInstance();
  static Notify* default_instance_;
};
// -------------------------------------------------------------------

class ShmHead : public ::google::protobuf::Message {
 public:
  ShmHead();
  virtual ~ShmHead();

  ShmHead(const ShmHead& from);

  inline ShmHead& operator=(const ShmHead& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShmHead& default_instance();

  void Swap(ShmHead* other);

  // implements Message ----------------------------------------------

  ShmHead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShmHead& from);
  void MergeFrom(const ShmHead& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 cache_time = 1;
  inline bool has_cache_time() const;
  inline void clear_cache_time();
  static const int kCacheTimeFieldNumber = 1;
  inline ::google::protobuf::uint64 cache_time() const;
  inline void set_cache_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Packet.ShmHead)
 private:
  inline void set_has_cache_time();
  inline void clear_has_cache_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cache_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Base_2eproto();
  friend void protobuf_AssignDesc_Base_2eproto();
  friend void protobuf_ShutdownFile_Base_2eproto();

  void InitAsDefaultInstance();
  static ShmHead* default_instance_;
};
// -------------------------------------------------------------------

class ServerInfo : public ::google::protobuf::Message {
 public:
  ServerInfo();
  virtual ~ServerInfo();

  ServerInfo(const ServerInfo& from);

  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerInfo& default_instance();

  void Swap(ServerInfo* other);

  // implements Message ----------------------------------------------

  ServerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerInfo& from);
  void MergeFrom(const ServerInfo& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 serverid = 1;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 1;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // required uint32 db_refresh_time = 2;
  inline bool has_db_refresh_time() const;
  inline void clear_db_refresh_time();
  static const int kDbRefreshTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 db_refresh_time() const;
  inline void set_db_refresh_time(::google::protobuf::uint32 value);

  // required bool active_gm_command = 3;
  inline bool has_active_gm_command() const;
  inline void clear_active_gm_command();
  static const int kActiveGmCommandFieldNumber = 3;
  inline bool active_gm_command() const;
  inline void set_active_gm_command(bool value);

  // required int32 invest_count = 4;
  inline bool has_invest_count() const;
  inline void clear_invest_count();
  static const int kInvestCountFieldNumber = 4;
  inline ::google::protobuf::int32 invest_count() const;
  inline void set_invest_count(::google::protobuf::int32 value);

  // required int32 guildbattle_times = 5;
  inline bool has_guildbattle_times() const;
  inline void clear_guildbattle_times();
  static const int kGuildbattleTimesFieldNumber = 5;
  inline ::google::protobuf::int32 guildbattle_times() const;
  inline void set_guildbattle_times(::google::protobuf::int32 value);

  // repeated int32 acr_data = 6;
  inline int acr_data_size() const;
  inline void clear_acr_data();
  static const int kAcrDataFieldNumber = 6;
  inline ::google::protobuf::int32 acr_data(int index) const;
  inline void set_acr_data(int index, ::google::protobuf::int32 value);
  inline void add_acr_data(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      acr_data() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_acr_data();

  // @@protoc_insertion_point(class_scope:Packet.ServerInfo)
 private:
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_db_refresh_time();
  inline void clear_has_db_refresh_time();
  inline void set_has_active_gm_command();
  inline void clear_has_active_gm_command();
  inline void set_has_invest_count();
  inline void clear_has_invest_count();
  inline void set_has_guildbattle_times();
  inline void clear_has_guildbattle_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 serverid_;
  ::google::protobuf::uint32 db_refresh_time_;
  bool active_gm_command_;
  ::google::protobuf::int32 invest_count_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > acr_data_;
  ::google::protobuf::int32 guildbattle_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Base_2eproto();
  friend void protobuf_AssignDesc_Base_2eproto();
  friend void protobuf_ShutdownFile_Base_2eproto();

  void InitAsDefaultInstance();
  static ServerInfo* default_instance_;
};
// -------------------------------------------------------------------

class PayOrderInfo : public ::google::protobuf::Message {
 public:
  PayOrderInfo();
  virtual ~PayOrderInfo();

  PayOrderInfo(const PayOrderInfo& from);

  inline PayOrderInfo& operator=(const PayOrderInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PayOrderInfo& default_instance();

  void Swap(PayOrderInfo* other);

  // implements Message ----------------------------------------------

  PayOrderInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PayOrderInfo& from);
  void MergeFrom(const PayOrderInfo& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed64 guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 guid() const;
  inline void set_guid(::google::protobuf::uint64 value);

  // required string orderid = 2;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderidFieldNumber = 2;
  inline const ::std::string& orderid() const;
  inline void set_orderid(const ::std::string& value);
  inline void set_orderid(const char* value);
  inline void set_orderid(const char* value, size_t size);
  inline ::std::string* mutable_orderid();
  inline ::std::string* release_orderid();
  inline void set_allocated_orderid(::std::string* orderid);

  // required int32 partnerid = 3;
  inline bool has_partnerid() const;
  inline void clear_partnerid();
  static const int kPartneridFieldNumber = 3;
  inline ::google::protobuf::int32 partnerid() const;
  inline void set_partnerid(::google::protobuf::int32 value);

  // required int32 serverid = 4;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 4;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // required fixed64 playerid = 5;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 5;
  inline ::google::protobuf::uint64 playerid() const;
  inline void set_playerid(::google::protobuf::uint64 value);

  // required string productid = 6;
  inline bool has_productid() const;
  inline void clear_productid();
  static const int kProductidFieldNumber = 6;
  inline const ::std::string& productid() const;
  inline void set_productid(const ::std::string& value);
  inline void set_productid(const char* value);
  inline void set_productid(const char* value, size_t size);
  inline ::std::string* mutable_productid();
  inline ::std::string* release_productid();
  inline void set_allocated_productid(::std::string* productid);

  // required float chargemoney = 7;
  inline bool has_chargemoney() const;
  inline void clear_chargemoney();
  static const int kChargemoneyFieldNumber = 7;
  inline float chargemoney() const;
  inline void set_chargemoney(float value);

  // required float activitychargemoney = 8;
  inline bool has_activitychargemoney() const;
  inline void clear_activitychargemoney();
  static const int kActivitychargemoneyFieldNumber = 8;
  inline float activitychargemoney() const;
  inline void set_activitychargemoney(float value);

  // required string deviceldentifier = 9;
  inline bool has_deviceldentifier() const;
  inline void clear_deviceldentifier();
  static const int kDeviceldentifierFieldNumber = 9;
  inline const ::std::string& deviceldentifier() const;
  inline void set_deviceldentifier(const ::std::string& value);
  inline void set_deviceldentifier(const char* value);
  inline void set_deviceldentifier(const char* value, size_t size);
  inline ::std::string* mutable_deviceldentifier();
  inline ::std::string* release_deviceldentifier();
  inline void set_allocated_deviceldentifier(::std::string* deviceldentifier);

  // required string ip = 10;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 10;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required string extra = 11;
  inline bool has_extra() const;
  inline void clear_extra();
  static const int kExtraFieldNumber = 11;
  inline const ::std::string& extra() const;
  inline void set_extra(const ::std::string& value);
  inline void set_extra(const char* value);
  inline void set_extra(const char* value, size_t size);
  inline ::std::string* mutable_extra();
  inline ::std::string* release_extra();
  inline void set_allocated_extra(::std::string* extra);

  // required float finalchargemoney = 12;
  inline bool has_finalchargemoney() const;
  inline void clear_finalchargemoney();
  static const int kFinalchargemoneyFieldNumber = 12;
  inline float finalchargemoney() const;
  inline void set_finalchargemoney(float value);

  // required int32 ismonthcard = 13;
  inline bool has_ismonthcard() const;
  inline void clear_ismonthcard();
  static const int kIsmonthcardFieldNumber = 13;
  inline ::google::protobuf::int32 ismonthcard() const;
  inline void set_ismonthcard(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Packet.PayOrderInfo)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_partnerid();
  inline void clear_has_partnerid();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_productid();
  inline void clear_has_productid();
  inline void set_has_chargemoney();
  inline void clear_has_chargemoney();
  inline void set_has_activitychargemoney();
  inline void clear_has_activitychargemoney();
  inline void set_has_deviceldentifier();
  inline void clear_has_deviceldentifier();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_extra();
  inline void clear_has_extra();
  inline void set_has_finalchargemoney();
  inline void clear_has_finalchargemoney();
  inline void set_has_ismonthcard();
  inline void clear_has_ismonthcard();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 guid_;
  ::std::string* orderid_;
  ::google::protobuf::int32 partnerid_;
  ::google::protobuf::int32 serverid_;
  ::google::protobuf::uint64 playerid_;
  ::std::string* productid_;
  float chargemoney_;
  float activitychargemoney_;
  ::std::string* deviceldentifier_;
  ::std::string* ip_;
  ::std::string* extra_;
  float finalchargemoney_;
  ::google::protobuf::int32 ismonthcard_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_Base_2eproto();
  friend void protobuf_AssignDesc_Base_2eproto();
  friend void protobuf_ShutdownFile_Base_2eproto();

  void InitAsDefaultInstance();
  static PayOrderInfo* default_instance_;
};
// -------------------------------------------------------------------

class LuaFile : public ::google::protobuf::Message {
 public:
  LuaFile();
  virtual ~LuaFile();

  LuaFile(const LuaFile& from);

  inline LuaFile& operator=(const LuaFile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LuaFile& default_instance();

  void Swap(LuaFile* other);

  // implements Message ----------------------------------------------

  LuaFile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LuaFile& from);
  void MergeFrom(const LuaFile& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 script_id = 1;
  inline bool has_script_id() const;
  inline void clear_script_id();
  static const int kScriptIdFieldNumber = 1;
  inline ::google::protobuf::int32 script_id() const;
  inline void set_script_id(::google::protobuf::int32 value);

  // required fixed64 crc = 2;
  inline bool has_crc() const;
  inline void clear_crc();
  static const int kCrcFieldNumber = 2;
  inline ::google::protobuf::uint64 crc() const;
  inline void set_crc(::google::protobuf::uint64 value);

  // required bytes content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:Packet.LuaFile)
 private:
  inline void set_has_script_id();
  inline void clear_has_script_id();
  inline void set_has_crc();
  inline void clear_has_crc();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 crc_;
  ::std::string* content_;
  ::google::protobuf::int32 script_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Base_2eproto();
  friend void protobuf_AssignDesc_Base_2eproto();
  friend void protobuf_ShutdownFile_Base_2eproto();

  void InitAsDefaultInstance();
  static LuaFile* default_instance_;
};
// -------------------------------------------------------------------

class LuaFilesReply : public ::google::protobuf::Message {
 public:
  LuaFilesReply();
  virtual ~LuaFilesReply();

  LuaFilesReply(const LuaFilesReply& from);

  inline LuaFilesReply& operator=(const LuaFilesReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LuaFilesReply& default_instance();

  void Swap(LuaFilesReply* other);

  // implements Message ----------------------------------------------

  LuaFilesReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LuaFilesReply& from);
  void MergeFrom(const LuaFilesReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Packet.LuaFile files = 1;
  inline int files_size() const;
  inline void clear_files();
  static const int kFilesFieldNumber = 1;
  inline const ::Packet::LuaFile& files(int index) const;
  inline ::Packet::LuaFile* mutable_files(int index);
  inline ::Packet::LuaFile* add_files();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::LuaFile >&
      files() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::LuaFile >*
      mutable_files();

  // @@protoc_insertion_point(class_scope:Packet.LuaFilesReply)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::LuaFile > files_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Base_2eproto();
  friend void protobuf_AssignDesc_Base_2eproto();
  friend void protobuf_ShutdownFile_Base_2eproto();

  void InitAsDefaultInstance();
  static LuaFilesReply* default_instance_;
};
// -------------------------------------------------------------------

class OperativeConfig : public ::google::protobuf::Message {
 public:
  OperativeConfig();
  virtual ~OperativeConfig();

  OperativeConfig(const OperativeConfig& from);

  inline OperativeConfig& operator=(const OperativeConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OperativeConfig& default_instance();

  void Swap(OperativeConfig* other);

  // implements Message ----------------------------------------------

  OperativeConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OperativeConfig& from);
  void MergeFrom(const OperativeConfig& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 script_id = 1;
  inline bool has_script_id() const;
  inline void clear_script_id();
  static const int kScriptIdFieldNumber = 1;
  inline ::google::protobuf::int32 script_id() const;
  inline void set_script_id(::google::protobuf::int32 value);

  // required string content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:Packet.OperativeConfig)
 private:
  inline void set_has_script_id();
  inline void clear_has_script_id();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* content_;
  ::google::protobuf::int32 script_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Base_2eproto();
  friend void protobuf_AssignDesc_Base_2eproto();
  friend void protobuf_ShutdownFile_Base_2eproto();

  void InitAsDefaultInstance();
  static OperativeConfig* default_instance_;
};
// -------------------------------------------------------------------

class OperativeConfigReply : public ::google::protobuf::Message {
 public:
  OperativeConfigReply();
  virtual ~OperativeConfigReply();

  OperativeConfigReply(const OperativeConfigReply& from);

  inline OperativeConfigReply& operator=(const OperativeConfigReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OperativeConfigReply& default_instance();

  void Swap(OperativeConfigReply* other);

  // implements Message ----------------------------------------------

  OperativeConfigReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OperativeConfigReply& from);
  void MergeFrom(const OperativeConfigReply& from);
  void Clear();
  bool IsInitialized() const;
  void SetInitialized();

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Packet.OperativeConfig configs = 1;
  inline int configs_size() const;
  inline void clear_configs();
  static const int kConfigsFieldNumber = 1;
  inline const ::Packet::OperativeConfig& configs(int index) const;
  inline ::Packet::OperativeConfig* mutable_configs(int index);
  inline ::Packet::OperativeConfig* add_configs();
  inline const ::google::protobuf::RepeatedPtrField< ::Packet::OperativeConfig >&
      configs() const;
  inline ::google::protobuf::RepeatedPtrField< ::Packet::OperativeConfig >*
      mutable_configs();

  // @@protoc_insertion_point(class_scope:Packet.OperativeConfigReply)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Packet::OperativeConfig > configs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Base_2eproto();
  friend void protobuf_AssignDesc_Base_2eproto();
  friend void protobuf_ShutdownFile_Base_2eproto();

  void InitAsDefaultInstance();
  static OperativeConfigReply* default_instance_;
};
// ===================================================================


// ===================================================================

// Position

// required int32 x = 1;
inline bool Position::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Position::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Position::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Position::clear_x() {
  x_ = 0;
  clear_has_x();
  SetDirty();
}
inline ::google::protobuf::int32 Position::x() const {
  return x_;
}
inline void Position::set_x(::google::protobuf::int32 value) {
  SetDirty();
  set_has_x();
  x_ = value;
}

// required int32 y = 2;
inline bool Position::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Position::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Position::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Position::clear_y() {
  y_ = 0;
  clear_has_y();
  SetDirty();
}
inline ::google::protobuf::int32 Position::y() const {
  return y_;
}
inline void Position::set_y(::google::protobuf::int32 value) {
  SetDirty();
  set_has_y();
  y_ = value;
}

// required int32 z = 3;
inline bool Position::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Position::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Position::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Position::clear_z() {
  z_ = 0;
  clear_has_z();
  SetDirty();
}
inline ::google::protobuf::int32 Position::z() const {
  return z_;
}
inline void Position::set_z(::google::protobuf::int32 value) {
  SetDirty();
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// Notify

// required string notify = 1;
inline bool Notify::has_notify() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Notify::set_has_notify() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Notify::clear_has_notify() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Notify::clear_notify() {
  if (notify_ != &::google::protobuf::internal::kEmptyString) {
    notify_->clear();
  }
  clear_has_notify();
  SetDirty();
}
inline const ::std::string& Notify::notify() const {
  return *notify_;
}
inline void Notify::set_notify(const ::std::string& value) {
  SetDirty();
  set_has_notify();
  if (notify_ == &::google::protobuf::internal::kEmptyString) {
    notify_ = new ::std::string;
  }
  notify_->assign(value);
}
inline void Notify::set_notify(const char* value) {
  SetDirty();
  set_has_notify();
  if (notify_ == &::google::protobuf::internal::kEmptyString) {
    notify_ = new ::std::string;
  }
  notify_->assign(value);
}
inline void Notify::set_notify(const char* value, size_t size) {
  SetDirty();
  set_has_notify();
  if (notify_ == &::google::protobuf::internal::kEmptyString) {
    notify_ = new ::std::string;
  }
  notify_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Notify::mutable_notify() {
  SetDirty();
  set_has_notify();
  if (notify_ == &::google::protobuf::internal::kEmptyString) {
    notify_ = new ::std::string;
  }
  return notify_;
}
inline ::std::string* Notify::release_notify() {
  SetDirty();
  clear_has_notify();
  if (notify_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notify_;
    notify_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Notify::set_allocated_notify(::std::string* notify) {
  SetDirty();
  if (notify_ != &::google::protobuf::internal::kEmptyString) {
    delete notify_;
  }
  if (notify) {
    set_has_notify();
    notify_ = notify;
  } else {
    clear_has_notify();
    notify_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 show_type = 2;
inline bool Notify::has_show_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Notify::set_has_show_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Notify::clear_has_show_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Notify::clear_show_type() {
  show_type_ = 0;
  clear_has_show_type();
  SetDirty();
}
inline ::google::protobuf::int32 Notify::show_type() const {
  return show_type_;
}
inline void Notify::set_show_type(::google::protobuf::int32 value) {
  SetDirty();
  set_has_show_type();
  show_type_ = value;
}

// -------------------------------------------------------------------

// ShmHead

// required fixed64 cache_time = 1;
inline bool ShmHead::has_cache_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShmHead::set_has_cache_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShmHead::clear_has_cache_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShmHead::clear_cache_time() {
  cache_time_ = GOOGLE_ULONGLONG(0);
  clear_has_cache_time();
  SetDirty();
}
inline ::google::protobuf::uint64 ShmHead::cache_time() const {
  return cache_time_;
}
inline void ShmHead::set_cache_time(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_cache_time();
  cache_time_ = value;
}

// -------------------------------------------------------------------

// ServerInfo

// required int32 serverid = 1;
inline bool ServerInfo::has_serverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerInfo::set_has_serverid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerInfo::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerInfo::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
  SetDirty();
}
inline ::google::protobuf::int32 ServerInfo::serverid() const {
  return serverid_;
}
inline void ServerInfo::set_serverid(::google::protobuf::int32 value) {
  SetDirty();
  set_has_serverid();
  serverid_ = value;
}

// required uint32 db_refresh_time = 2;
inline bool ServerInfo::has_db_refresh_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerInfo::set_has_db_refresh_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerInfo::clear_has_db_refresh_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerInfo::clear_db_refresh_time() {
  db_refresh_time_ = 0u;
  clear_has_db_refresh_time();
  SetDirty();
}
inline ::google::protobuf::uint32 ServerInfo::db_refresh_time() const {
  return db_refresh_time_;
}
inline void ServerInfo::set_db_refresh_time(::google::protobuf::uint32 value) {
  SetDirty();
  set_has_db_refresh_time();
  db_refresh_time_ = value;
}

// required bool active_gm_command = 3;
inline bool ServerInfo::has_active_gm_command() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerInfo::set_has_active_gm_command() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerInfo::clear_has_active_gm_command() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerInfo::clear_active_gm_command() {
  active_gm_command_ = false;
  clear_has_active_gm_command();
  SetDirty();
}
inline bool ServerInfo::active_gm_command() const {
  return active_gm_command_;
}
inline void ServerInfo::set_active_gm_command(bool value) {
  SetDirty();
  set_has_active_gm_command();
  active_gm_command_ = value;
}

// required int32 invest_count = 4;
inline bool ServerInfo::has_invest_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerInfo::set_has_invest_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerInfo::clear_has_invest_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerInfo::clear_invest_count() {
  invest_count_ = 0;
  clear_has_invest_count();
  SetDirty();
}
inline ::google::protobuf::int32 ServerInfo::invest_count() const {
  return invest_count_;
}
inline void ServerInfo::set_invest_count(::google::protobuf::int32 value) {
  SetDirty();
  set_has_invest_count();
  invest_count_ = value;
}

// required int32 guildbattle_times = 5;
inline bool ServerInfo::has_guildbattle_times() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServerInfo::set_has_guildbattle_times() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServerInfo::clear_has_guildbattle_times() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServerInfo::clear_guildbattle_times() {
  guildbattle_times_ = 0;
  clear_has_guildbattle_times();
  SetDirty();
}
inline ::google::protobuf::int32 ServerInfo::guildbattle_times() const {
  return guildbattle_times_;
}
inline void ServerInfo::set_guildbattle_times(::google::protobuf::int32 value) {
  SetDirty();
  set_has_guildbattle_times();
  guildbattle_times_ = value;
}

// repeated int32 acr_data = 6;
inline int ServerInfo::acr_data_size() const {
  return acr_data_.size();
}
inline void ServerInfo::clear_acr_data() {
  acr_data_.Clear();
  SetDirty();
}
inline ::google::protobuf::int32 ServerInfo::acr_data(int index) const {
  return acr_data_.Get(index);
}
inline void ServerInfo::set_acr_data(int index, ::google::protobuf::int32 value) {
  SetDirty();
  acr_data_.Set(index, value);
}
inline void ServerInfo::add_acr_data(::google::protobuf::int32 value) {
  SetDirty();
  acr_data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ServerInfo::acr_data() const {
  return acr_data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ServerInfo::mutable_acr_data() {
  SetDirty();
  return &acr_data_;
}

// -------------------------------------------------------------------

// PayOrderInfo

// required fixed64 guid = 1;
inline bool PayOrderInfo::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PayOrderInfo::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PayOrderInfo::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PayOrderInfo::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
  clear_has_guid();
  SetDirty();
}
inline ::google::protobuf::uint64 PayOrderInfo::guid() const {
  return guid_;
}
inline void PayOrderInfo::set_guid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_guid();
  guid_ = value;
}

// required string orderid = 2;
inline bool PayOrderInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PayOrderInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PayOrderInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PayOrderInfo::clear_orderid() {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    orderid_->clear();
  }
  clear_has_orderid();
  SetDirty();
}
inline const ::std::string& PayOrderInfo::orderid() const {
  return *orderid_;
}
inline void PayOrderInfo::set_orderid(const ::std::string& value) {
  SetDirty();
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void PayOrderInfo::set_orderid(const char* value) {
  SetDirty();
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void PayOrderInfo::set_orderid(const char* value, size_t size) {
  SetDirty();
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PayOrderInfo::mutable_orderid() {
  SetDirty();
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  return orderid_;
}
inline ::std::string* PayOrderInfo::release_orderid() {
  SetDirty();
  clear_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = orderid_;
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PayOrderInfo::set_allocated_orderid(::std::string* orderid) {
  SetDirty();
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (orderid) {
    set_has_orderid();
    orderid_ = orderid;
  } else {
    clear_has_orderid();
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 partnerid = 3;
inline bool PayOrderInfo::has_partnerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PayOrderInfo::set_has_partnerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PayOrderInfo::clear_has_partnerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PayOrderInfo::clear_partnerid() {
  partnerid_ = 0;
  clear_has_partnerid();
  SetDirty();
}
inline ::google::protobuf::int32 PayOrderInfo::partnerid() const {
  return partnerid_;
}
inline void PayOrderInfo::set_partnerid(::google::protobuf::int32 value) {
  SetDirty();
  set_has_partnerid();
  partnerid_ = value;
}

// required int32 serverid = 4;
inline bool PayOrderInfo::has_serverid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PayOrderInfo::set_has_serverid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PayOrderInfo::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PayOrderInfo::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
  SetDirty();
}
inline ::google::protobuf::int32 PayOrderInfo::serverid() const {
  return serverid_;
}
inline void PayOrderInfo::set_serverid(::google::protobuf::int32 value) {
  SetDirty();
  set_has_serverid();
  serverid_ = value;
}

// required fixed64 playerid = 5;
inline bool PayOrderInfo::has_playerid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PayOrderInfo::set_has_playerid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PayOrderInfo::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PayOrderInfo::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
  clear_has_playerid();
  SetDirty();
}
inline ::google::protobuf::uint64 PayOrderInfo::playerid() const {
  return playerid_;
}
inline void PayOrderInfo::set_playerid(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_playerid();
  playerid_ = value;
}

// required string productid = 6;
inline bool PayOrderInfo::has_productid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PayOrderInfo::set_has_productid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PayOrderInfo::clear_has_productid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PayOrderInfo::clear_productid() {
  if (productid_ != &::google::protobuf::internal::kEmptyString) {
    productid_->clear();
  }
  clear_has_productid();
  SetDirty();
}
inline const ::std::string& PayOrderInfo::productid() const {
  return *productid_;
}
inline void PayOrderInfo::set_productid(const ::std::string& value) {
  SetDirty();
  set_has_productid();
  if (productid_ == &::google::protobuf::internal::kEmptyString) {
    productid_ = new ::std::string;
  }
  productid_->assign(value);
}
inline void PayOrderInfo::set_productid(const char* value) {
  SetDirty();
  set_has_productid();
  if (productid_ == &::google::protobuf::internal::kEmptyString) {
    productid_ = new ::std::string;
  }
  productid_->assign(value);
}
inline void PayOrderInfo::set_productid(const char* value, size_t size) {
  SetDirty();
  set_has_productid();
  if (productid_ == &::google::protobuf::internal::kEmptyString) {
    productid_ = new ::std::string;
  }
  productid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PayOrderInfo::mutable_productid() {
  SetDirty();
  set_has_productid();
  if (productid_ == &::google::protobuf::internal::kEmptyString) {
    productid_ = new ::std::string;
  }
  return productid_;
}
inline ::std::string* PayOrderInfo::release_productid() {
  SetDirty();
  clear_has_productid();
  if (productid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = productid_;
    productid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PayOrderInfo::set_allocated_productid(::std::string* productid) {
  SetDirty();
  if (productid_ != &::google::protobuf::internal::kEmptyString) {
    delete productid_;
  }
  if (productid) {
    set_has_productid();
    productid_ = productid;
  } else {
    clear_has_productid();
    productid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required float chargemoney = 7;
inline bool PayOrderInfo::has_chargemoney() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PayOrderInfo::set_has_chargemoney() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PayOrderInfo::clear_has_chargemoney() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PayOrderInfo::clear_chargemoney() {
  chargemoney_ = 0;
  clear_has_chargemoney();
  SetDirty();
}
inline float PayOrderInfo::chargemoney() const {
  return chargemoney_;
}
inline void PayOrderInfo::set_chargemoney(float value) {
  SetDirty();
  set_has_chargemoney();
  chargemoney_ = value;
}

// required float activitychargemoney = 8;
inline bool PayOrderInfo::has_activitychargemoney() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PayOrderInfo::set_has_activitychargemoney() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PayOrderInfo::clear_has_activitychargemoney() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PayOrderInfo::clear_activitychargemoney() {
  activitychargemoney_ = 0;
  clear_has_activitychargemoney();
  SetDirty();
}
inline float PayOrderInfo::activitychargemoney() const {
  return activitychargemoney_;
}
inline void PayOrderInfo::set_activitychargemoney(float value) {
  SetDirty();
  set_has_activitychargemoney();
  activitychargemoney_ = value;
}

// required string deviceldentifier = 9;
inline bool PayOrderInfo::has_deviceldentifier() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PayOrderInfo::set_has_deviceldentifier() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PayOrderInfo::clear_has_deviceldentifier() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PayOrderInfo::clear_deviceldentifier() {
  if (deviceldentifier_ != &::google::protobuf::internal::kEmptyString) {
    deviceldentifier_->clear();
  }
  clear_has_deviceldentifier();
  SetDirty();
}
inline const ::std::string& PayOrderInfo::deviceldentifier() const {
  return *deviceldentifier_;
}
inline void PayOrderInfo::set_deviceldentifier(const ::std::string& value) {
  SetDirty();
  set_has_deviceldentifier();
  if (deviceldentifier_ == &::google::protobuf::internal::kEmptyString) {
    deviceldentifier_ = new ::std::string;
  }
  deviceldentifier_->assign(value);
}
inline void PayOrderInfo::set_deviceldentifier(const char* value) {
  SetDirty();
  set_has_deviceldentifier();
  if (deviceldentifier_ == &::google::protobuf::internal::kEmptyString) {
    deviceldentifier_ = new ::std::string;
  }
  deviceldentifier_->assign(value);
}
inline void PayOrderInfo::set_deviceldentifier(const char* value, size_t size) {
  SetDirty();
  set_has_deviceldentifier();
  if (deviceldentifier_ == &::google::protobuf::internal::kEmptyString) {
    deviceldentifier_ = new ::std::string;
  }
  deviceldentifier_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PayOrderInfo::mutable_deviceldentifier() {
  SetDirty();
  set_has_deviceldentifier();
  if (deviceldentifier_ == &::google::protobuf::internal::kEmptyString) {
    deviceldentifier_ = new ::std::string;
  }
  return deviceldentifier_;
}
inline ::std::string* PayOrderInfo::release_deviceldentifier() {
  SetDirty();
  clear_has_deviceldentifier();
  if (deviceldentifier_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = deviceldentifier_;
    deviceldentifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PayOrderInfo::set_allocated_deviceldentifier(::std::string* deviceldentifier) {
  SetDirty();
  if (deviceldentifier_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceldentifier_;
  }
  if (deviceldentifier) {
    set_has_deviceldentifier();
    deviceldentifier_ = deviceldentifier;
  } else {
    clear_has_deviceldentifier();
    deviceldentifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ip = 10;
inline bool PayOrderInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PayOrderInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PayOrderInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PayOrderInfo::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
  SetDirty();
}
inline const ::std::string& PayOrderInfo::ip() const {
  return *ip_;
}
inline void PayOrderInfo::set_ip(const ::std::string& value) {
  SetDirty();
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void PayOrderInfo::set_ip(const char* value) {
  SetDirty();
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void PayOrderInfo::set_ip(const char* value, size_t size) {
  SetDirty();
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PayOrderInfo::mutable_ip() {
  SetDirty();
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* PayOrderInfo::release_ip() {
  SetDirty();
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PayOrderInfo::set_allocated_ip(::std::string* ip) {
  SetDirty();
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string extra = 11;
inline bool PayOrderInfo::has_extra() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PayOrderInfo::set_has_extra() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PayOrderInfo::clear_has_extra() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PayOrderInfo::clear_extra() {
  if (extra_ != &::google::protobuf::internal::kEmptyString) {
    extra_->clear();
  }
  clear_has_extra();
  SetDirty();
}
inline const ::std::string& PayOrderInfo::extra() const {
  return *extra_;
}
inline void PayOrderInfo::set_extra(const ::std::string& value) {
  SetDirty();
  set_has_extra();
  if (extra_ == &::google::protobuf::internal::kEmptyString) {
    extra_ = new ::std::string;
  }
  extra_->assign(value);
}
inline void PayOrderInfo::set_extra(const char* value) {
  SetDirty();
  set_has_extra();
  if (extra_ == &::google::protobuf::internal::kEmptyString) {
    extra_ = new ::std::string;
  }
  extra_->assign(value);
}
inline void PayOrderInfo::set_extra(const char* value, size_t size) {
  SetDirty();
  set_has_extra();
  if (extra_ == &::google::protobuf::internal::kEmptyString) {
    extra_ = new ::std::string;
  }
  extra_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PayOrderInfo::mutable_extra() {
  SetDirty();
  set_has_extra();
  if (extra_ == &::google::protobuf::internal::kEmptyString) {
    extra_ = new ::std::string;
  }
  return extra_;
}
inline ::std::string* PayOrderInfo::release_extra() {
  SetDirty();
  clear_has_extra();
  if (extra_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = extra_;
    extra_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PayOrderInfo::set_allocated_extra(::std::string* extra) {
  SetDirty();
  if (extra_ != &::google::protobuf::internal::kEmptyString) {
    delete extra_;
  }
  if (extra) {
    set_has_extra();
    extra_ = extra;
  } else {
    clear_has_extra();
    extra_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required float finalchargemoney = 12;
inline bool PayOrderInfo::has_finalchargemoney() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PayOrderInfo::set_has_finalchargemoney() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PayOrderInfo::clear_has_finalchargemoney() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PayOrderInfo::clear_finalchargemoney() {
  finalchargemoney_ = 0;
  clear_has_finalchargemoney();
  SetDirty();
}
inline float PayOrderInfo::finalchargemoney() const {
  return finalchargemoney_;
}
inline void PayOrderInfo::set_finalchargemoney(float value) {
  SetDirty();
  set_has_finalchargemoney();
  finalchargemoney_ = value;
}

// required int32 ismonthcard = 13;
inline bool PayOrderInfo::has_ismonthcard() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PayOrderInfo::set_has_ismonthcard() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PayOrderInfo::clear_has_ismonthcard() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PayOrderInfo::clear_ismonthcard() {
  ismonthcard_ = 0;
  clear_has_ismonthcard();
  SetDirty();
}
inline ::google::protobuf::int32 PayOrderInfo::ismonthcard() const {
  return ismonthcard_;
}
inline void PayOrderInfo::set_ismonthcard(::google::protobuf::int32 value) {
  SetDirty();
  set_has_ismonthcard();
  ismonthcard_ = value;
}

// -------------------------------------------------------------------

// LuaFile

// required int32 script_id = 1;
inline bool LuaFile::has_script_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LuaFile::set_has_script_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LuaFile::clear_has_script_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LuaFile::clear_script_id() {
  script_id_ = 0;
  clear_has_script_id();
  SetDirty();
}
inline ::google::protobuf::int32 LuaFile::script_id() const {
  return script_id_;
}
inline void LuaFile::set_script_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_script_id();
  script_id_ = value;
}

// required fixed64 crc = 2;
inline bool LuaFile::has_crc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LuaFile::set_has_crc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LuaFile::clear_has_crc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LuaFile::clear_crc() {
  crc_ = GOOGLE_ULONGLONG(0);
  clear_has_crc();
  SetDirty();
}
inline ::google::protobuf::uint64 LuaFile::crc() const {
  return crc_;
}
inline void LuaFile::set_crc(::google::protobuf::uint64 value) {
  SetDirty();
  set_has_crc();
  crc_ = value;
}

// required bytes content = 3;
inline bool LuaFile::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LuaFile::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LuaFile::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LuaFile::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
  SetDirty();
}
inline const ::std::string& LuaFile::content() const {
  return *content_;
}
inline void LuaFile::set_content(const ::std::string& value) {
  SetDirty();
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void LuaFile::set_content(const char* value) {
  SetDirty();
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void LuaFile::set_content(const void* value, size_t size) {
  SetDirty();
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LuaFile::mutable_content() {
  SetDirty();
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* LuaFile::release_content() {
  SetDirty();
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LuaFile::set_allocated_content(::std::string* content) {
  SetDirty();
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// LuaFilesReply

// repeated .Packet.LuaFile files = 1;
inline int LuaFilesReply::files_size() const {
  return files_.size();
}
inline void LuaFilesReply::clear_files() {
  files_.Clear();
  SetDirty();
}
inline const ::Packet::LuaFile& LuaFilesReply::files(int index) const {
  return files_.Get(index);
}
inline ::Packet::LuaFile* LuaFilesReply::mutable_files(int index) {
  SetDirty();
  return files_.Mutable(index);
}
inline ::Packet::LuaFile* LuaFilesReply::add_files() {
  SetDirty();
  return files_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::LuaFile >&
LuaFilesReply::files() const {
  return files_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::LuaFile >*
LuaFilesReply::mutable_files() {
  SetDirty();
  return &files_;
}

// -------------------------------------------------------------------

// OperativeConfig

// required int32 script_id = 1;
inline bool OperativeConfig::has_script_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OperativeConfig::set_has_script_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OperativeConfig::clear_has_script_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OperativeConfig::clear_script_id() {
  script_id_ = 0;
  clear_has_script_id();
  SetDirty();
}
inline ::google::protobuf::int32 OperativeConfig::script_id() const {
  return script_id_;
}
inline void OperativeConfig::set_script_id(::google::protobuf::int32 value) {
  SetDirty();
  set_has_script_id();
  script_id_ = value;
}

// required string content = 3;
inline bool OperativeConfig::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OperativeConfig::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OperativeConfig::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OperativeConfig::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
  SetDirty();
}
inline const ::std::string& OperativeConfig::content() const {
  return *content_;
}
inline void OperativeConfig::set_content(const ::std::string& value) {
  SetDirty();
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void OperativeConfig::set_content(const char* value) {
  SetDirty();
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void OperativeConfig::set_content(const char* value, size_t size) {
  SetDirty();
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OperativeConfig::mutable_content() {
  SetDirty();
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* OperativeConfig::release_content() {
  SetDirty();
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OperativeConfig::set_allocated_content(::std::string* content) {
  SetDirty();
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// OperativeConfigReply

// repeated .Packet.OperativeConfig configs = 1;
inline int OperativeConfigReply::configs_size() const {
  return configs_.size();
}
inline void OperativeConfigReply::clear_configs() {
  configs_.Clear();
  SetDirty();
}
inline const ::Packet::OperativeConfig& OperativeConfigReply::configs(int index) const {
  return configs_.Get(index);
}
inline ::Packet::OperativeConfig* OperativeConfigReply::mutable_configs(int index) {
  SetDirty();
  return configs_.Mutable(index);
}
inline ::Packet::OperativeConfig* OperativeConfigReply::add_configs() {
  SetDirty();
  return configs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Packet::OperativeConfig >&
OperativeConfigReply::configs() const {
  return configs_;
}
inline ::google::protobuf::RepeatedPtrField< ::Packet::OperativeConfig >*
OperativeConfigReply::mutable_configs() {
  SetDirty();
  return &configs_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Packet

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Base_2eproto__INCLUDED
